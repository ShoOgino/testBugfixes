{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","commits":[{"id":"9f71b6d873161f41cef30256f162ac6fa8f88858","date":1494576240,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':'#ANY'}\" +\n        \"    ]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'cpu','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':'#ANY'}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    SolrQuery query = new SolrQuery().setParam(CommonParams.QT, path);\n    QueryResponse queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(3, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09d06843c166c033fc611df4ce71e33731bc1ad1","date":1495531684,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':'#ANY'}\" +\n        \"    ]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':'#ANY'}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    SolrQuery query = new SolrQuery().setParam(CommonParams.QT, path).setParam(\"diagnostics\", true);\n    QueryResponse queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    String[] sortedNodeNames = new String[2];\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(sortedNodeNames[i] = (String) node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertNotNull(node.get(\"heapUsage\"));\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection and ensure that its details show up in the diagnostics output\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTest\", 1, 2);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertEquals(sortedNodeNames[i], node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(1, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertNotNull(node.get(\"heapUsage\"));\n    }\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", 1, 6);\n    create.setMaxShardsPerNode(10);\n    adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(Utils.makeMap(\"replica\", \"3\"), violation.get(\"violation\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':'#ANY'}\" +\n        \"    ]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'cpu','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':'#ANY'}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'cores':'<2', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    SolrQuery query = new SolrQuery().setParam(CommonParams.QT, path);\n    QueryResponse queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(3, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n  }\n\n","bugFix":null,"bugIntro":["34dd1818ff2313f17cf59834695ab7ee0c7853d7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"acb26533c8d0113ceff75cc811f4d3d93cfb99e6","date":1495778582,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    SolrQuery query = new SolrQuery().setParam(CommonParams.QT, path).setParam(\"diagnostics\", true);\n    QueryResponse queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    String[] sortedNodeNames = new String[2];\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(sortedNodeNames[i] = (String) node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertNotNull(node.get(\"heapUsage\"));\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection and ensure that its details show up in the diagnostics output\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTest\", 1, 2);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertEquals(sortedNodeNames[i], node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(1, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertNotNull(node.get(\"heapUsage\"));\n    }\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", 1, 6);\n    create.setMaxShardsPerNode(10);\n    adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(Utils.makeMap(\"replica\", \"3\"), violation.get(\"violation\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':'#ANY'}\" +\n        \"    ]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':'#ANY'}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    SolrQuery query = new SolrQuery().setParam(CommonParams.QT, path).setParam(\"diagnostics\", true);\n    QueryResponse queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    String[] sortedNodeNames = new String[2];\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(sortedNodeNames[i] = (String) node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertNotNull(node.get(\"heapUsage\"));\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection and ensure that its details show up in the diagnostics output\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTest\", 1, 2);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertEquals(sortedNodeNames[i], node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(1, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertNotNull(node.get(\"heapUsage\"));\n    }\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", 1, 6);\n    create.setMaxShardsPerNode(10);\n    adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(Utils.makeMap(\"replica\", \"3\"), violation.get(\"violation\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a80c0cde330092676c81467a3ea0c9660b3d773b","date":1495778967,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    SolrQuery query = new SolrQuery().setParam(CommonParams.QT, path).setParam(\"diagnostics\", true);\n    QueryResponse queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    String[] sortedNodeNames = new String[2];\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(sortedNodeNames[i] = (String) node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertNotNull(node.get(\"heapUsage\"));\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection and ensure that its details show up in the diagnostics output\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTest\", 1, 2);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertEquals(sortedNodeNames[i], node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(1, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertNotNull(node.get(\"heapUsage\"));\n    }\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", 1, 6);\n    create.setMaxShardsPerNode(10);\n    adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(Utils.makeMap(\"replica\", \"3\"), violation.get(\"violation\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':'#ANY'}\" +\n        \"    ]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':'#ANY'}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    SolrQuery query = new SolrQuery().setParam(CommonParams.QT, path).setParam(\"diagnostics\", true);\n    QueryResponse queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    String[] sortedNodeNames = new String[2];\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(sortedNodeNames[i] = (String) node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertNotNull(node.get(\"heapUsage\"));\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection and ensure that its details show up in the diagnostics output\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTest\", 1, 2);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertEquals(sortedNodeNames[i], node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(1, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertNotNull(node.get(\"heapUsage\"));\n    }\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", 1, 6);\n    create.setMaxShardsPerNode(10);\n    adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(Utils.makeMap(\"replica\", \"3\"), violation.get(\"violation\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e0d5f83cef35308593d82478a890bf6bd8b53289","date":1495780452,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    SolrQuery query = new SolrQuery().setParam(CommonParams.QT, path).setParam(\"diagnostics\", true);\n    QueryResponse queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    String[] sortedNodeNames = new String[2];\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(sortedNodeNames[i] = (String) node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertNotNull(node.get(\"heapUsage\"));\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", 1, 6);\n    create.setMaxShardsPerNode(10);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(Utils.makeMap(\"replica\", \"3\", \"delta\", -1), violation.get(\"violation\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    SolrQuery query = new SolrQuery().setParam(CommonParams.QT, path).setParam(\"diagnostics\", true);\n    QueryResponse queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    String[] sortedNodeNames = new String[2];\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(sortedNodeNames[i] = (String) node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertNotNull(node.get(\"heapUsage\"));\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection and ensure that its details show up in the diagnostics output\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTest\", 1, 2);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertEquals(sortedNodeNames[i], node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(1, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertNotNull(node.get(\"heapUsage\"));\n    }\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", 1, 6);\n    create.setMaxShardsPerNode(10);\n    adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(Utils.makeMap(\"replica\", \"3\"), violation.get(\"violation\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2bdfc68740f8af2501a37780c23045a248dba491","date":1495784628,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    SolrQuery query = new SolrQuery().setParam(CommonParams.QT, path).setParam(\"diagnostics\", true);\n    QueryResponse queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    String[] sortedNodeNames = new String[2];\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(sortedNodeNames[i] = (String) node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertNotNull(node.get(\"heapUsage\"));\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", 1, 6);\n    create.setMaxShardsPerNode(10);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(Utils.makeMap(\"replica\", \"3\", \"delta\", -1), violation.get(\"violation\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'!overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    SolrQuery query = new SolrQuery().setParam(CommonParams.QT, path).setParam(\"diagnostics\", true);\n    QueryResponse queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    String[] sortedNodeNames = new String[2];\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(sortedNodeNames[i] = (String) node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertNotNull(node.get(\"heapUsage\"));\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection and ensure that its details show up in the diagnostics output\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTest\", 1, 2);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertEquals(sortedNodeNames[i], node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(1, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertNotNull(node.get(\"heapUsage\"));\n    }\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", 1, 6);\n    create.setMaxShardsPerNode(10);\n    adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(Utils.makeMap(\"replica\", \"3\"), violation.get(\"violation\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a1fb1605adf454c3893d46676e444ce7597ba08","date":1496074563,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    SolrQuery query = new SolrQuery().setParam(CommonParams.QT, path);\n    QueryResponse queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    query = new SolrQuery().setParam(CommonParams.QT, path + \"/diagnostics\");\n    queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    String[] sortedNodeNames = new String[2];\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(sortedNodeNames[i] = (String) node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertNotNull(node.get(\"heapUsage\"));\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", 1, 6);\n    create.setMaxShardsPerNode(10);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(Utils.makeMap(\"replica\", \"3\", \"delta\", -1), violation.get(\"violation\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    SolrQuery query = new SolrQuery().setParam(CommonParams.QT, path).setParam(\"diagnostics\", true);\n    QueryResponse queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    String[] sortedNodeNames = new String[2];\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(sortedNodeNames[i] = (String) node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertNotNull(node.get(\"heapUsage\"));\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", 1, 6);\n    create.setMaxShardsPerNode(10);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(Utils.makeMap(\"replica\", \"3\", \"delta\", -1), violation.get(\"violation\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrQuery query = new SolrQuery().setParam(CommonParams.QT, path);\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    String[] sortedNodeNames = new String[2];\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(sortedNodeNames[i] = (String) node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertNotNull(node.get(\"heapUsage\"));\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", 1, 6);\n    create.setMaxShardsPerNode(10);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(Utils.makeMap(\"replica\", \"3\", \"delta\", -1), violation.get(\"violation\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c0ee0c7f6bcf49646748d46aee9383b68eb55c80"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15","date":1496411842,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrQuery query = new SolrQuery().setParam(CommonParams.QT, path);\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    String[] sortedNodeNames = new String[2];\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(sortedNodeNames[i] = (String) node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(\"0\", String.valueOf(node.get(\"cores\")));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertNotNull(node.get(\"heapUsage\"));\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", 1, 6);\n    create.setMaxShardsPerNode(10);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(Utils.makeMap(\"replica\", \"3\", \"delta\", -1), violation.get(\"violation\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrQuery query = new SolrQuery().setParam(CommonParams.QT, path);\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    String[] sortedNodeNames = new String[2];\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(sortedNodeNames[i] = (String) node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertNotNull(node.get(\"heapUsage\"));\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", 1, 6);\n    create.setMaxShardsPerNode(10);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(Utils.makeMap(\"replica\", \"3\", \"delta\", -1), violation.get(\"violation\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4328dc3f7309b4c82d12f9e9420a487a1b9945dd","date":1496650286,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", 1, 6);\n    create.setMaxShardsPerNode(10);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(Utils.makeMap(\"replica\", \"3\", \"delta\", -1), violation.get(\"violation\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n//    SolrQuery query = new SolrQuery().setParam(CommonParams.QT, path);\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    String[] sortedNodeNames = new String[2];\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(sortedNodeNames[i] = (String) node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(\"0\", String.valueOf(node.get(\"cores\")));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertNotNull(node.get(\"heapUsage\"));\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", 1, 6);\n    create.setMaxShardsPerNode(10);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(Utils.makeMap(\"replica\", \"3\", \"delta\", -1), violation.get(\"violation\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", 1, 6);\n    create.setMaxShardsPerNode(10);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(Utils.makeMap(\"replica\", \"3\", \"delta\", -1), violation.get(\"violation\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", 1, 6);\n    create.setMaxShardsPerNode(10);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(Utils.makeMap(\"replica\", \"3\", \"delta\", -1), violation.get(\"violation\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    SolrQuery query = new SolrQuery().setParam(CommonParams.QT, path);\n    QueryResponse queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    query = new SolrQuery().setParam(CommonParams.QT, path + \"/diagnostics\");\n    queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    String[] sortedNodeNames = new String[2];\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(sortedNodeNames[i] = (String) node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertNotNull(node.get(\"heapUsage\"));\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", 1, 6);\n    create.setMaxShardsPerNode(10);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    queryResponse = solrClient.query(query);\n    response = queryResponse.getResponse();\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(Utils.makeMap(\"replica\", \"3\", \"delta\", -1), violation.get(\"violation\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8c77a387d47ede09f8574d5d4abe19efa4ae53ad","date":1496757723,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", 1, 6);\n    create.setMaxShardsPerNode(10);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(Utils.makeMap(\"replica\", \"3\", \"delta\", -1), violation.get(\"violation\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", 1, 6);\n    create.setMaxShardsPerNode(10);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(Utils.makeMap(\"replica\", \"3\", \"delta\", -1), violation.get(\"violation\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1852ff897aecd2f7c8376a02aedfd44104533f28","date":1498224361,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", 1, 6);\n    create.setMaxShardsPerNode(10);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(-1l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", 1, 6);\n    create.setMaxShardsPerNode(10);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(Utils.makeMap(\"replica\", \"3\", \"delta\", -1), violation.get(\"violation\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    create.setMaxShardsPerNode(10);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(Utils.makeMap(\"replica\", \"3\", \"delta\", -1), violation.get(\"violation\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", 1, 6);\n    create.setMaxShardsPerNode(10);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(Utils.makeMap(\"replica\", \"3\", \"delta\", -1), violation.get(\"violation\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    create.setMaxShardsPerNode(10);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(-1l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", 1, 6);\n    create.setMaxShardsPerNode(10);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(-1l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    create.setMaxShardsPerNode(10);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(Utils.makeMap(\"replica\", \"3\", \"delta\", -1), violation.get(\"violation\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"334787e1937d79beb6e05f612c61602a29107816","date":1499219549,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    create.setMaxShardsPerNode(10);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset to original cluster policy which allows only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(-1l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    create.setMaxShardsPerNode(10);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(-1l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"802dacaaef5ee1e51adc6cc23a315fb26bd22130","date":1499234600,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminResponse adminResponse = CollectionAdminRequest.Create\n        .createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6)\n        .setPolicy(\"policy2\")\n        .setMaxShardsPerNode(10)\n        .process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(-1l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    create.setMaxShardsPerNode(10);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(-1l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e0d9c88546c1a130d50b56981790d87a308daffd","date":1499234617,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminResponse adminResponse = CollectionAdminRequest.Create\n        .createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6)\n        .setPolicy(\"policy2\")\n        .setMaxShardsPerNode(10)\n        .process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // reset to original cluster policy which allows only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(-1l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminResponse adminResponse = CollectionAdminRequest.Create\n        .createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6)\n        .setPolicy(\"policy2\")\n        .setMaxShardsPerNode(10)\n        .process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(-1l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"938c621592956861aa11322413b72c32dc152100","date":1499235275,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminResponse adminResponse = CollectionAdminRequest.Create\n        .createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6)\n        .setMaxShardsPerNode(10)\n        .process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset to original cluster policy which allows only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(-1l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminResponse adminResponse = CollectionAdminRequest.Create\n        .createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6)\n        .setPolicy(\"policy2\")\n        .setMaxShardsPerNode(10)\n        .process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n    setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // reset to original cluster policy which allows only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(-1l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0806aac02ecbbdc6b5d9705ae15da193219c7af4","date":1499930856,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminResponse adminResponse = CollectionAdminRequest.Create\n        .createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6)\n        .process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset to original cluster policy which allows only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(-1l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminResponse adminResponse = CollectionAdminRequest.Create\n        .createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6)\n        .setMaxShardsPerNode(10)\n        .process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset to original cluster policy which allows only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(-1l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55ed5a78f8a4b37108ac73a894a105db562d303e","date":1500477652,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminResponse adminResponse = CollectionAdminRequest.Create\n        .createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6)\n        .process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset to original cluster policy which allows only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(-1l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(3, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminResponse adminResponse = CollectionAdminRequest.Create\n        .createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6)\n        .process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset to original cluster policy which allows only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(-1l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f31b9b25580c2654f9fb90381dbac5b3f968f74","date":1501508330,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminResponse adminResponse = CollectionAdminRequest.Create\n        .createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6)\n        .process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset to original cluster policy which allows only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(-1l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminResponse adminResponse = CollectionAdminRequest.Create\n        .createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6)\n        .process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset to original cluster policy which allows only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(-1l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9e302b4ecab1242453fbd12784e424ad50c66398","date":1501517060,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminResponse adminResponse = CollectionAdminRequest.Create\n        .createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6)\n        .process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset to original cluster policy which allows only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(-1l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(2, triggers.size());\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminResponse adminResponse = CollectionAdminRequest.Create\n        .createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6)\n        .process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset to original cluster policy which allows only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(-1l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fdeb4684cdf98b129ea8b38c5595c3028f931439","date":1502869160,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    String setEmptyClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': []\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setEmptyClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    create.setMaxShardsPerNode(10);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(Utils.makeMap(\"replica\", \"3\", \"delta\", -1), violation.get(\"violation\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    create.setMaxShardsPerNode(10);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(Utils.makeMap(\"replica\", \"3\", \"delta\", -1), violation.get(\"violation\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c0ee0c7f6bcf49646748d46aee9383b68eb55c80","date":1502884592,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    String setEmptyClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': []\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setEmptyClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, \"{set-cluster-policy : []}\");\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    try {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n      create.setMaxShardsPerNode(10);\n      create.process(solrClient);\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'maxShardsPerNode>0' is not supported when autoScaling policies are used\"));\n\n    }\n\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(Utils.makeMap(\"replica\", \"3\", \"delta\", -1), violation.get(\"violation\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    String setEmptyClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': []\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setEmptyClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    create.setMaxShardsPerNode(10);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(Utils.makeMap(\"replica\", \"3\", \"delta\", -1), violation.get(\"violation\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","bugFix":["a513b6a92751e54c76fb5447948c9e7d437163a7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c00aac053fdd75193eb8b6d45b64c26c3b586d5b","date":1503143818,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    String setEmptyClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': []\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setEmptyClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, \"{set-cluster-policy : []}\");\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    try {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n      create.setMaxShardsPerNode(10);\n      create.process(solrClient);\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'maxShardsPerNode>0' is not supported when autoScaling policies are used\"));\n\n    }\n\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(-1l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminResponse adminResponse = CollectionAdminRequest.Create\n        .createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6)\n        .process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset to original cluster policy which allows only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(-1l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3989cbabb60c5cb6ac1253892227bdfea3139611","date":1503145738,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // assert that when a cluster policy is in effect, using maxShardsPerNode throws an exception\n    try {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n      create.setMaxShardsPerNode(10);\n      create.process(solrClient);\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'maxShardsPerNode>0' is not supported when autoScaling policies are used\"));\n    }\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(-1l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    String setEmptyClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': []\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setEmptyClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, \"{set-cluster-policy : []}\");\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    try {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n      create.setMaxShardsPerNode(10);\n      create.process(solrClient);\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'maxShardsPerNode>0' is not supported when autoScaling policies are used\"));\n\n    }\n\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(-1l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // assert that when a cluster policy is in effect, using maxShardsPerNode throws an exception\n    try {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n      create.setMaxShardsPerNode(10);\n      create.process(solrClient);\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'maxShardsPerNode>0' is not supported when autoScaling policies are used\"));\n    }\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(-1l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    String setEmptyClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': []\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setEmptyClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, \"{set-cluster-policy : []}\");\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    try {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n      create.setMaxShardsPerNode(10);\n      create.process(solrClient);\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'maxShardsPerNode>0' is not supported when autoScaling policies are used\"));\n\n    }\n\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(Utils.makeMap(\"replica\", \"3\", \"delta\", -1), violation.get(\"violation\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // assert that when a cluster policy is in effect, using maxShardsPerNode throws an exception\n    try {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n      create.setMaxShardsPerNode(10);\n      create.process(solrClient);\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'maxShardsPerNode>0' is not supported when autoScaling policies are used\"));\n    }\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(-1l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(2, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    String setEmptyClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': []\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setEmptyClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, \"{set-cluster-policy : []}\");\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    try {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n      create.setMaxShardsPerNode(10);\n      create.process(solrClient);\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'maxShardsPerNode>0' is not supported when autoScaling policies are used\"));\n\n    }\n\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(Utils.makeMap(\"replica\", \"3\", \"delta\", -1), violation.get(\"violation\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // assert that when a cluster policy is in effect, using maxShardsPerNode throws an exception\n    try {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n      create.setMaxShardsPerNode(10);\n      create.process(solrClient);\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'maxShardsPerNode>0' is not supported when autoScaling policies are used\"));\n    }\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(2l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(1, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", Utils.getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", Utils.getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", Utils.getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) Utils.getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // assert that when a cluster policy is in effect, using maxShardsPerNode throws an exception\n    try {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n      create.setMaxShardsPerNode(10);\n      create.process(solrClient);\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'maxShardsPerNode>0' is not supported when autoScaling policies are used\"));\n    }\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(-1l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff5e25fb60ccc8574bcbd65396786ae9163f0149","date":1519706112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // assert that when a cluster policy is in effect, using maxShardsPerNode throws an exception\n    try {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n      create.setMaxShardsPerNode(10);\n      create.process(solrClient);\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'maxShardsPerNode>0' is not supported when autoScaling policies are used\"));\n    }\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(2l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(1, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", Utils.getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", Utils.getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", Utils.getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) Utils.getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // assert that when a cluster policy is in effect, using maxShardsPerNode throws an exception\n    try {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n      create.setMaxShardsPerNode(10);\n      create.process(solrClient);\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'maxShardsPerNode>0' is not supported when autoScaling policies are used\"));\n    }\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(2l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(1, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", Utils.getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", Utils.getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", Utils.getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) Utils.getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"34dd1818ff2313f17cf59834695ab7ee0c7853d7","date":1527089210,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) Utils.getObjectByPath(response, false, \"diagnostics/sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(6, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // assert that when a cluster policy is in effect, using maxShardsPerNode throws an exception\n    try {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n      create.setMaxShardsPerNode(10);\n      create.process(solrClient);\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'maxShardsPerNode>0' is not supported when autoScaling policies are used\"));\n    }\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(2l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(1, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", Utils.getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", Utils.getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", Utils.getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) Utils.getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(5, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // assert that when a cluster policy is in effect, using maxShardsPerNode throws an exception\n    try {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n      create.setMaxShardsPerNode(10);\n      create.process(solrClient);\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'maxShardsPerNode>0' is not supported when autoScaling policies are used\"));\n    }\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(2l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(1, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", Utils.getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", Utils.getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", Utils.getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) Utils.getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n  }\n\n","bugFix":["09d06843c166c033fc611df4ce71e33731bc1ad1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9837f40c922407d857991971de6def18eda0857b","date":1529994497,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) Utils.getObjectByPath(response, false, \"diagnostics/sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(6, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // assert that when a cluster policy is in effect, using maxShardsPerNode throws an exception\n    try {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n      create.setMaxShardsPerNode(10);\n      create.process(solrClient);\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'maxShardsPerNode>0' is not supported when autoScaling policies are used\"));\n    }\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(2d, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(2, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", Utils.getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", Utils.getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", Utils.getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) Utils.getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) Utils.getObjectByPath(response, false, \"diagnostics/sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(6, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // assert that when a cluster policy is in effect, using maxShardsPerNode throws an exception\n    try {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n      create.setMaxShardsPerNode(10);\n      create.process(solrClient);\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'maxShardsPerNode>0' is not supported when autoScaling policies are used\"));\n    }\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(2l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(1, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", Utils.getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", Utils.getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", Utils.getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) Utils.getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) Utils.getObjectByPath(response, false, \"diagnostics/sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(6, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // assert that when a cluster policy is in effect, using maxShardsPerNode throws an exception\n    try {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n      create.setMaxShardsPerNode(10);\n      create.process(solrClient);\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'maxShardsPerNode>0' is not supported when autoScaling policies are used\"));\n    }\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(2d, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(2, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", Utils.getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", Utils.getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", Utils.getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) Utils.getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) Utils.getObjectByPath(response, false, \"diagnostics/sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(6, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // assert that when a cluster policy is in effect, using maxShardsPerNode throws an exception\n    try {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n      create.setMaxShardsPerNode(10);\n      create.process(solrClient);\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'maxShardsPerNode>0' is not supported when autoScaling policies are used\"));\n    }\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(2l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(1, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", Utils.getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", Utils.getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", Utils.getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) Utils.getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) Utils.getObjectByPath(response, false, \"diagnostics/sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(6, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // assert that when a cluster policy is in effect, using maxShardsPerNode throws an exception\n    try {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n      create.setMaxShardsPerNode(10);\n      create.process(solrClient);\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'maxShardsPerNode>0' is not supported when autoScaling policies are used\"));\n    }\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(2d, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(2, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", Utils.getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", Utils.getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", Utils.getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) Utils.getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) Utils.getObjectByPath(response, false, \"diagnostics/sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(6, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // assert that when a cluster policy is in effect, using maxShardsPerNode throws an exception\n    try {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n      create.setMaxShardsPerNode(10);\n      create.process(solrClient);\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'maxShardsPerNode>0' is not supported when autoScaling policies are used\"));\n    }\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(2l, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(1, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", Utils.getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", Utils.getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", Utils.getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) Utils.getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52316373036b9f161a08896e7c9ebf4389790a47","date":1533187246,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) Utils.getObjectByPath(response, false, \"diagnostics/sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(6, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0d, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // assert that when a cluster policy is in effect, using maxShardsPerNode throws an exception\n    try {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n      create.setMaxShardsPerNode(10);\n      create.process(solrClient);\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'maxShardsPerNode>0' is not supported when autoScaling policies are used\"));\n    }\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(2d, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(2, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", Utils.getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", Utils.getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", Utils.getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) Utils.getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) Utils.getObjectByPath(response, false, \"diagnostics/sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(6, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0L, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // assert that when a cluster policy is in effect, using maxShardsPerNode throws an exception\n    try {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n      create.setMaxShardsPerNode(10);\n      create.process(solrClient);\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'maxShardsPerNode>0' is not supported when autoScaling policies are used\"));\n    }\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(2d, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(2, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", Utils.getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", Utils.getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", Utils.getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) Utils.getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16a22f8085bb46850c91784e94f7714345011404","date":1533741843,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy1':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy2':[{'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(2, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) Utils.getObjectByPath(response, false, \"diagnostics/sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0d, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"replicas\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // assert that when a cluster policy is in effect, using maxShardsPerNode throws an exception\n    try {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n      create.setMaxShardsPerNode(10);\n      create.process(solrClient);\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'maxShardsPerNode>0' is not supported when autoScaling policies are used\"));\n    }\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'}\"+\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(1.0d, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    log.info(\"Before starting new jetty ,{}\", cluster.getJettySolrRunners()\n        .stream()\n        .map(jettySolrRunner -> jettySolrRunner.getNodeName()).collect(Collectors.toList()));\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    log.info(\"started new jetty {}\", runner1.getNodeName());\n\n    response = waitForResponse(namedList -> {\n          List l = (List) Utils.getObjectByPath(namedList, false, \"diagnostics/liveNodes\");\n          if (l != null && l.contains(runner1.getNodeName())) return true;\n          return false;\n        },\n        createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null),\n        200,\n        20,\n        runner1.getNodeName() + \" could not come up \");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(2, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", Utils.getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", Utils.getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", Utils.getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) Utils.getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ],\" +\n        \"    'policy1':[\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ],\" +\n        \"    'policy2':[\" +\n        \"      {'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"    ]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(3, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) Utils.getObjectByPath(response, false, \"diagnostics/sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertEquals(6, node.size());\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0d, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // assert that when a cluster policy is in effect, using maxShardsPerNode throws an exception\n    try {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n      create.setMaxShardsPerNode(10);\n      create.process(solrClient);\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'maxShardsPerNode>0' is not supported when autoScaling policies are used\"));\n    }\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(2d, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(2, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", Utils.getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", Utils.getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", Utils.getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) Utils.getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdc53359111a5e3782f56300070ab2878ec82cb9","date":1534542016,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy1':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy2':[{'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(2, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) Utils.getObjectByPath(response, false, \"diagnostics/sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0d, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"replicas\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // assert that when a cluster policy is in effect, using maxShardsPerNode throws an exception\n    try {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n      create.setMaxShardsPerNode(10);\n      create.process(solrClient);\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'maxShardsPerNode>0' is not supported when autoScaling policies are used\"));\n    }\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'}\"+\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(1.0d, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    log.info(\"Before starting new jetty ,{}\", cluster.getJettySolrRunners()\n        .stream()\n        .map(jettySolrRunner -> jettySolrRunner.getNodeName()).collect(Collectors.toList()));\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    log.info(\"started new jetty {}\", runner1.getNodeName());\n\n    response = waitForResponse(namedList -> {\n          List l = (List) Utils.getObjectByPath(namedList, false, \"diagnostics/liveNodes\");\n          if (l != null && l.contains(runner1.getNodeName())) return true;\n          return false;\n        },\n        createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null),\n        200,\n        20,\n        runner1.getNodeName() + \" could not come up \");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(2, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", Utils.getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", Utils.getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", Utils.getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) Utils.getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy1':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy2':[{'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(2, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) Utils.getObjectByPath(response, false, \"diagnostics/sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0d, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"replicas\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // assert that when a cluster policy is in effect, using maxShardsPerNode throws an exception\n    try {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n      create.setMaxShardsPerNode(10);\n      create.process(solrClient);\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'maxShardsPerNode>0' is not supported when autoScaling policies are used\"));\n    }\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'}\"+\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(1.0d, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    log.info(\"Before starting new jetty ,{}\", cluster.getJettySolrRunners()\n        .stream()\n        .map(jettySolrRunner -> jettySolrRunner.getNodeName()).collect(Collectors.toList()));\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    log.info(\"started new jetty {}\", runner1.getNodeName());\n\n    response = waitForResponse(namedList -> {\n          List l = (List) Utils.getObjectByPath(namedList, false, \"diagnostics/liveNodes\");\n          if (l != null && l.contains(runner1.getNodeName())) return true;\n          return false;\n        },\n        createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null),\n        200,\n        20,\n        runner1.getNodeName() + \" could not come up \");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(2, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", Utils.getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", Utils.getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", Utils.getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) Utils.getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01322d51122b6cbe6b5ba6059fffba67798dae72","date":1539067228,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy1':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy2':[{'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(2, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) Utils.getObjectByPath(response, false, \"diagnostics/sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0d, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"replicas\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'}\"+\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6)\n        .setMaxShardsPerNode(3);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(1.0d, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    log.info(\"Before starting new jetty ,{}\", cluster.getJettySolrRunners()\n        .stream()\n        .map(jettySolrRunner -> jettySolrRunner.getNodeName()).collect(Collectors.toList()));\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    log.info(\"started new jetty {}\", runner1.getNodeName());\n\n    response = waitForResponse(namedList -> {\n          List l = (List) Utils.getObjectByPath(namedList, false, \"diagnostics/liveNodes\");\n          if (l != null && l.contains(runner1.getNodeName())) return true;\n          return false;\n        },\n        createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null),\n        200,\n        20,\n        runner1.getNodeName() + \" could not come up \");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(2, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", Utils.getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", Utils.getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", Utils.getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) Utils.getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy1':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy2':[{'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(2, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) Utils.getObjectByPath(response, false, \"diagnostics/sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0d, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"replicas\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // assert that when a cluster policy is in effect, using maxShardsPerNode throws an exception\n    try {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n      create.setMaxShardsPerNode(10);\n      create.process(solrClient);\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'maxShardsPerNode>0' is not supported when autoScaling policies are used\"));\n    }\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'}\"+\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(1.0d, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    log.info(\"Before starting new jetty ,{}\", cluster.getJettySolrRunners()\n        .stream()\n        .map(jettySolrRunner -> jettySolrRunner.getNodeName()).collect(Collectors.toList()));\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    log.info(\"started new jetty {}\", runner1.getNodeName());\n\n    response = waitForResponse(namedList -> {\n          List l = (List) Utils.getObjectByPath(namedList, false, \"diagnostics/liveNodes\");\n          if (l != null && l.contains(runner1.getNodeName())) return true;\n          return false;\n        },\n        createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null),\n        200,\n        20,\n        runner1.getNodeName() + \" could not come up \");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(2, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", Utils.getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", Utils.getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", Utils.getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) Utils.getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cceb1cc58424313a8a9bd726fed6586cdef78df","date":1544401888,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy1':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy2':[{'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(2, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) Utils.getObjectByPath(response, false, \"diagnostics/sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0d, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"replicas\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'}\"+\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6)\n        .setMaxShardsPerNode(3);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    cluster.waitForActiveCollection(\"readApiTestViolations\", 1, 6);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(1.0d, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    log.info(\"Before starting new jetty ,{}\", cluster.getJettySolrRunners()\n        .stream()\n        .map(jettySolrRunner -> jettySolrRunner.getNodeName()).collect(Collectors.toList()));\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    log.info(\"started new jetty {}\", runner1.getNodeName());\n\n    response = waitForResponse(namedList -> {\n          List l = (List) Utils.getObjectByPath(namedList, false, \"diagnostics/liveNodes\");\n          if (l != null && l.contains(runner1.getNodeName())) return true;\n          return false;\n        },\n        createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null),\n        200,\n        20,\n        runner1.getNodeName() + \" could not come up \");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(2, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", Utils.getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", Utils.getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", Utils.getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) Utils.getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy1':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy2':[{'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(2, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) Utils.getObjectByPath(response, false, \"diagnostics/sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0d, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"replicas\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'}\"+\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6)\n        .setMaxShardsPerNode(3);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(1.0d, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    log.info(\"Before starting new jetty ,{}\", cluster.getJettySolrRunners()\n        .stream()\n        .map(jettySolrRunner -> jettySolrRunner.getNodeName()).collect(Collectors.toList()));\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    log.info(\"started new jetty {}\", runner1.getNodeName());\n\n    response = waitForResponse(namedList -> {\n          List l = (List) Utils.getObjectByPath(namedList, false, \"diagnostics/liveNodes\");\n          if (l != null && l.contains(runner1.getNodeName())) return true;\n          return false;\n        },\n        createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null),\n        200,\n        20,\n        runner1.getNodeName() + \" could not come up \");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(2, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", Utils.getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", Utils.getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", Utils.getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) Utils.getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy1':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy2':[{'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}]}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(2, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) Utils.getObjectByPath(response, false, \"diagnostics/sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0d, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"replicas\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'}\"+\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6)\n        .setMaxShardsPerNode(3);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    cluster.waitForActiveCollection(\"readApiTestViolations\", 1, 6);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(1.0d, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    log.info(\"Before starting new jetty ,{}\", cluster.getJettySolrRunners()\n        .stream()\n        .map(jettySolrRunner -> jettySolrRunner.getNodeName()).collect(Collectors.toList()));\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    log.info(\"started new jetty {}\", runner1.getNodeName());\n\n    response = waitForResponse(namedList -> {\n          List l = (List) Utils.getObjectByPath(namedList, false, \"diagnostics/liveNodes\");\n          if (l != null && l.contains(runner1.getNodeName())) return true;\n          return false;\n        },\n        AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null),\n        200,\n        20,\n        runner1.getNodeName() + \" could not come up \");\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(2, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", Utils.getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", Utils.getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", Utils.getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) Utils.getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy1':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy2':[{'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}]}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(2, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) Utils.getObjectByPath(response, false, \"diagnostics/sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0d, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"replicas\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'}\"+\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6)\n        .setMaxShardsPerNode(3);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    cluster.waitForActiveCollection(\"readApiTestViolations\", 1, 6);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(1.0d, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    log.info(\"Before starting new jetty ,{}\", cluster.getJettySolrRunners()\n        .stream()\n        .map(jettySolrRunner -> jettySolrRunner.getNodeName()).collect(Collectors.toList()));\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    log.info(\"started new jetty {}\", runner1.getNodeName());\n\n    response = waitForResponse(namedList -> {\n          List l = (List) Utils.getObjectByPath(namedList, false, \"diagnostics/liveNodes\");\n          if (l != null && l.contains(runner1.getNodeName())) return true;\n          return false;\n        },\n        createAutoScalingRequest(SolrRequest.METHOD.GET, \"/diagnostics\", null),\n        200,\n        20,\n        runner1.getNodeName() + \" could not come up \");\n\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(2, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", Utils.getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", Utils.getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", Utils.getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) Utils.getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy1':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy2':[{'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}]}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(2, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) Utils.getObjectByPath(response, false, \"diagnostics/sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0d, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"replicas\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'}\"+\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6)\n        .setMaxShardsPerNode(3);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    cluster.waitForActiveCollection(\"readApiTestViolations\", 1, 6);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(1.0d, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    log.info(\"Before starting new jetty ,{}\", cluster.getJettySolrRunners()\n        .stream()\n        .map(jettySolrRunner -> jettySolrRunner.getNodeName()).collect(Collectors.toList()));\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    log.info(\"started new jetty {}\", runner1.getNodeName());\n\n    response = waitForResponse(namedList -> {\n          List l = (List) Utils.getObjectByPath(namedList, false, \"diagnostics/liveNodes\");\n          if (l != null && l.contains(runner1.getNodeName())) return true;\n          return false;\n        },\n        AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null),\n        200,\n        20,\n        runner1.getNodeName() + \" could not come up \");\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(2, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", Utils.getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", Utils.getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", Utils.getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) Utils.getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy1':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy2':[{'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}]}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(2, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) Utils.getObjectByPath(response, false, \"diagnostics/sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0d, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"replicas\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'}\"+\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6)\n        .setMaxShardsPerNode(3);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    cluster.waitForActiveCollection(\"readApiTestViolations\", 1, 6);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(1.0d, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    log.info(\"Before starting new jetty ,{}\", cluster.getJettySolrRunners()\n        .stream()\n        .map(jettySolrRunner -> jettySolrRunner.getNodeName()).collect(Collectors.toList()));\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    log.info(\"started new jetty {}\", runner1.getNodeName());\n\n    response = waitForResponse(namedList -> {\n          List l = (List) Utils.getObjectByPath(namedList, false, \"diagnostics/liveNodes\");\n          if (l != null && l.contains(runner1.getNodeName())) return true;\n          return false;\n        },\n        AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null),\n        200,\n        20,\n        runner1.getNodeName() + \" could not come up \");\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(2, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", Utils.getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", Utils.getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", Utils.getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) Utils.getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d3a1cba0d84384334e5c75e77d139a3a9e480fa","date":1557955868,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy1':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy2':[{'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}]}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(2, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) response._get(\"diagnostics/sortedNodes\", null);\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0d, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"replicas\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'}\"+\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6)\n        .setMaxShardsPerNode(3);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    cluster.waitForActiveCollection(\"readApiTestViolations\", 1, 6);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(1.0d, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    log.info(\"Before starting new jetty ,{}\", cluster.getJettySolrRunners()\n        .stream()\n        .map(jettySolrRunner -> jettySolrRunner.getNodeName()).collect(Collectors.toList()));\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    log.info(\"started new jetty {}\", runner1.getNodeName());\n\n    response = waitForResponse(namedList -> {\n          List l = (List) namedList._get(\"diagnostics/liveNodes\",null);\n          if (l != null && l.contains(runner1.getNodeName())) return true;\n          return false;\n        },\n        AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null),\n        200,\n        20,\n        runner1.getNodeName() + \" could not come up \");\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(2, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n    CollectionAdminRequest.deleteCollection(\"readApiTestViolations\")\n        .process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy1':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy2':[{'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}]}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(2, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) Utils.getObjectByPath(response, false, \"diagnostics/sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0d, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"replicas\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'}\"+\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6)\n        .setMaxShardsPerNode(3);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    cluster.waitForActiveCollection(\"readApiTestViolations\", 1, 6);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(1.0d, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    log.info(\"Before starting new jetty ,{}\", cluster.getJettySolrRunners()\n        .stream()\n        .map(jettySolrRunner -> jettySolrRunner.getNodeName()).collect(Collectors.toList()));\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    log.info(\"started new jetty {}\", runner1.getNodeName());\n\n    response = waitForResponse(namedList -> {\n          List l = (List) Utils.getObjectByPath(namedList, false, \"diagnostics/liveNodes\");\n          if (l != null && l.contains(runner1.getNodeName())) return true;\n          return false;\n        },\n        AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null),\n        200,\n        20,\n        runner1.getNodeName() + \" could not come up \");\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(2, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", Utils.getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", Utils.getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", Utils.getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) Utils.getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy1':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy2':[{'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}]}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(2, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) response._get(\"diagnostics/sortedNodes\", null);\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0d, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"replicas\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'}\"+\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6)\n        .setMaxShardsPerNode(3);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    cluster.waitForActiveCollection(\"readApiTestViolations\", 1, 6);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(1.0d, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    if (log.isInfoEnabled()) {\n      log.info(\"Before starting new jetty ,{}\", cluster.getJettySolrRunners()\n          .stream()\n          .map(jettySolrRunner -> jettySolrRunner.getNodeName()).collect(Collectors.toList()));\n    }\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (log.isInfoEnabled()) {\n      log.info(\"started new jetty {}\", runner1.getNodeName());\n    }\n\n    response = waitForResponse(namedList -> {\n          List l = (List) namedList._get(\"diagnostics/liveNodes\",null);\n          if (l != null && l.contains(runner1.getNodeName())) return true;\n          return false;\n        },\n        AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null),\n        200,\n        20,\n        runner1.getNodeName() + \" could not come up \");\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(2, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n    CollectionAdminRequest.deleteCollection(\"readApiTestViolations\")\n        .process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy1':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy2':[{'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}]}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(2, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) response._get(\"diagnostics/sortedNodes\", null);\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0d, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"replicas\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'}\"+\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6)\n        .setMaxShardsPerNode(3);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    cluster.waitForActiveCollection(\"readApiTestViolations\", 1, 6);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(1.0d, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    log.info(\"Before starting new jetty ,{}\", cluster.getJettySolrRunners()\n        .stream()\n        .map(jettySolrRunner -> jettySolrRunner.getNodeName()).collect(Collectors.toList()));\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    log.info(\"started new jetty {}\", runner1.getNodeName());\n\n    response = waitForResponse(namedList -> {\n          List l = (List) namedList._get(\"diagnostics/liveNodes\",null);\n          if (l != null && l.contains(runner1.getNodeName())) return true;\n          return false;\n        },\n        AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null),\n        200,\n        20,\n        runner1.getNodeName() + \" could not come up \");\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(2, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n    CollectionAdminRequest.deleteCollection(\"readApiTestViolations\")\n        .process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy1':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy2':[{'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}]}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(2, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) response._get(\"diagnostics/sortedNodes\", null);\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0d, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"replicas\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'}\"+\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6)\n        .setMaxShardsPerNode(3);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    cluster.waitForActiveCollection(\"readApiTestViolations\", 1, 6);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(1.0d, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    if (log.isInfoEnabled()) {\n      log.info(\"Before starting new jetty ,{}\", cluster.getJettySolrRunners()\n          .stream()\n          .map(jettySolrRunner -> jettySolrRunner.getNodeName()).collect(Collectors.toList()));\n    }\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (log.isInfoEnabled()) {\n      log.info(\"started new jetty {}\", runner1.getNodeName());\n    }\n\n    response = waitForResponse(namedList -> {\n          List l = (List) namedList._get(\"diagnostics/liveNodes\",null);\n          if (l != null && l.contains(runner1.getNodeName())) return true;\n          return false;\n        },\n        AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null),\n        200,\n        20,\n        runner1.getNodeName() + \" could not come up \");\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(2, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n    CollectionAdminRequest.deleteCollection(\"readApiTestViolations\")\n        .process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy1':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy2':[{'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}]}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(2, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) response._get(\"diagnostics/sortedNodes\", null);\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0d, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"replicas\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'}\"+\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6)\n        .setMaxShardsPerNode(3);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    cluster.waitForActiveCollection(\"readApiTestViolations\", 1, 6);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(1.0d, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    if (log.isInfoEnabled()) {\n      log.info(\"Before starting new jetty ,{}\", cluster.getJettySolrRunners()\n          .stream()\n          .map(jettySolrRunner -> jettySolrRunner.getNodeName()).collect(Collectors.toList()));\n    }\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (log.isInfoEnabled()) {\n      log.info(\"started new jetty {}\", runner1.getNodeName());\n    }\n\n    response = waitForResponse(namedList -> {\n          List l = (List) namedList._get(\"diagnostics/liveNodes\",null);\n          if (l != null && l.contains(runner1.getNodeName())) return true;\n          return false;\n        },\n        AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null),\n        200,\n        20,\n        runner1.getNodeName() + \" could not come up \");\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(2, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n    CollectionAdminRequest.deleteCollection(\"readApiTestViolations\")\n        .process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy1':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy2':[{'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}]}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(2, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) response._get(\"diagnostics/sortedNodes\", null);\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0d, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"replicas\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'}\"+\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    cluster.waitForActiveCollection(\"readApiTestViolations\", 1, 6);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(1.0d, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    if (log.isInfoEnabled()) {\n      log.info(\"Before starting new jetty ,{}\", cluster.getJettySolrRunners()\n          .stream()\n          .map(jettySolrRunner -> jettySolrRunner.getNodeName()).collect(Collectors.toList()));\n    }\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (log.isInfoEnabled()) {\n      log.info(\"started new jetty {}\", runner1.getNodeName());\n    }\n\n    response = waitForResponse(namedList -> {\n          List l = (List) namedList._get(\"diagnostics/liveNodes\",null);\n          if (l != null && l.contains(runner1.getNodeName())) return true;\n          return false;\n        },\n        AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null),\n        200,\n        20,\n        runner1.getNodeName() + \" could not come up \");\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(2, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n    CollectionAdminRequest.deleteCollection(\"readApiTestViolations\")\n        .process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy1':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy2':[{'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}]}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(2, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) response._get(\"diagnostics/sortedNodes\", null);\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0d, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"replicas\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'}\"+\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6)\n        .setMaxShardsPerNode(3);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    cluster.waitForActiveCollection(\"readApiTestViolations\", 1, 6);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(1.0d, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    if (log.isInfoEnabled()) {\n      log.info(\"Before starting new jetty ,{}\", cluster.getJettySolrRunners()\n          .stream()\n          .map(jettySolrRunner -> jettySolrRunner.getNodeName()).collect(Collectors.toList()));\n    }\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (log.isInfoEnabled()) {\n      log.info(\"started new jetty {}\", runner1.getNodeName());\n    }\n\n    response = waitForResponse(namedList -> {\n          List l = (List) namedList._get(\"diagnostics/liveNodes\",null);\n          if (l != null && l.contains(runner1.getNodeName())) return true;\n          return false;\n        },\n        AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null),\n        200,\n        20,\n        runner1.getNodeName() + \" could not come up \");\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(2, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n    CollectionAdminRequest.deleteCollection(\"readApiTestViolations\")\n        .process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testReadApi().mjava","sourceNew":null,"sourceOld":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testReadApi() throws Exception  {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPreferencesCommand = \"{\" +\n        \" 'set-cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 3},\" +\n        \"        {'maximize': 'freedisk','precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg','precision': 10},\" +\n        \"        {'minimize': 'heapUsage','precision': 10}]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setPolicyCommand =  \"{'set-policy': {\" +\n        \"    'xyz':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy1':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}],\" +\n        \"    'policy2':[{'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}]}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    Map triggers = (Map) response.get(\"triggers\");\n    assertNotNull(triggers);\n    assertEquals(1, countNotImplicitTriggers(triggers));\n    assertTrue(triggers.containsKey(\"node_added_trigger1\"));\n    Map node_added_trigger1 = (Map) triggers.get(\"node_added_trigger1\");\n    assertEquals(4, node_added_trigger1.size());\n    assertEquals(0L, node_added_trigger1.get(\"waitFor\"));\n    assertEquals(true, node_added_trigger1.get(\"enabled\"));\n    assertEquals(2, ((List)node_added_trigger1.get(\"actions\")).size());\n\n    List<Map> clusterPrefs = (List<Map>) response.get(\"cluster-preferences\");\n    assertNotNull(clusterPrefs);\n    assertEquals(4, clusterPrefs.size());\n\n    List<Map> clusterPolicy = (List<Map>) response.get(\"cluster-policy\");\n    assertNotNull(clusterPolicy);\n    assertEquals(2, clusterPolicy.size());\n\n    Map policies = (Map) response.get(\"policies\");\n    assertNotNull(policies);\n    assertEquals(3, policies.size());\n    assertNotNull(policies.get(\"xyz\"));\n    assertNotNull(policies.get(\"policy1\"));\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n\n    Map<String, Object> diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    List sortedNodes = (List) response._get(\"diagnostics/sortedNodes\", null);\n    assertNotNull(sortedNodes);\n\n    assertEquals(2, sortedNodes.size());\n    for (int i = 0; i < 2; i++) {\n      Map node = (Map) sortedNodes.get(i);\n      assertNotNull(node);\n      assertNotNull(node.get(\"node\"));\n      assertNotNull(node.get(\"cores\"));\n      assertEquals(0d, node.get(\"cores\"));\n      assertNotNull(node.get(\"freedisk\"));\n      assertNotNull(node.get(\"replicas\"));\n      assertTrue(node.get(\"freedisk\") instanceof Double);\n      assertNotNull(node.get(\"sysLoadAvg\"));\n      assertTrue(node.get(\"sysLoadAvg\") instanceof Double);\n      assertNotNull(node.get(\"heapUsage\"));\n      assertTrue(node.get(\"heapUsage\") instanceof Double);\n    }\n\n    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(0, violations.size());\n\n    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas\n    String tempClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'}\"+\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, tempClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // lets create a collection which violates the rule replicas < 2\n    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection(\"readApiTestViolations\", CONFIGSET_NAME, 1, 6);\n    CollectionAdminResponse adminResponse = create.process(solrClient);\n    cluster.waitForActiveCollection(\"readApiTestViolations\", 1, 6);\n    assertTrue(adminResponse.isSuccess());\n\n    // reset the original cluster policy\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // get the diagnostics output again\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null);\n    response = solrClient.request(req);\n    diagnostics = (Map<String, Object>) response.get(\"diagnostics\");\n    sortedNodes = (List) diagnostics.get(\"sortedNodes\");\n    assertNotNull(sortedNodes);\n\n    violations = (List<Map<String, Object>>) diagnostics.get(\"violations\");\n    assertNotNull(violations);\n    assertEquals(2, violations.size());\n    for (Map<String, Object> violation : violations) {\n      assertEquals(\"readApiTestViolations\", violation.get(\"collection\"));\n      assertEquals(\"shard1\", violation.get(\"shard\"));\n      assertEquals(1.0d, getObjectByPath(violation, true, \"violation/delta\"));\n      assertEquals(3l, getObjectByPath(violation, true, \"violation/replica/NRT\"));\n      assertNotNull(violation.get(\"clause\"));\n    }\n    if (log.isInfoEnabled()) {\n      log.info(\"Before starting new jetty ,{}\", cluster.getJettySolrRunners()\n          .stream()\n          .map(jettySolrRunner -> jettySolrRunner.getNodeName()).collect(Collectors.toList()));\n    }\n    JettySolrRunner runner1 = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    if (log.isInfoEnabled()) {\n      log.info(\"started new jetty {}\", runner1.getNodeName());\n    }\n\n    response = waitForResponse(namedList -> {\n          List l = (List) namedList._get(\"diagnostics/liveNodes\",null);\n          if (l != null && l.contains(runner1.getNodeName())) return true;\n          return false;\n        },\n        AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/diagnostics\", null),\n        200,\n        20,\n        runner1.getNodeName() + \" could not come up \");\n\n    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, \"/suggestions\", null);\n    response = solrClient.request(req);\n    List l = (List) response.get(\"suggestions\");\n    assertNotNull(l);\n    assertEquals(2, l.size());\n    for (int i = 0; i < l.size(); i++) {\n      Object suggestion = l.get(i);\n      assertEquals(\"violation\", getObjectByPath(suggestion, true, \"type\"));\n      assertEquals(\"POST\", getObjectByPath(suggestion, true, \"operation/method\"));\n      assertEquals(\"/c/readApiTestViolations\", getObjectByPath(suggestion, true, \"operation/path\"));\n      String node = (String) getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\");\n      assertNotNull(node);\n      assertEquals(runner1.getNodeName(), node);\n    }\n    CollectionAdminRequest.deleteCollection(\"readApiTestViolations\")\n        .process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"197bbedf08450ade98a11f4a0001448059666bec":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"52316373036b9f161a08896e7c9ebf4389790a47":["9837f40c922407d857991971de6def18eda0857b"],"0806aac02ecbbdc6b5d9705ae15da193219c7af4":["938c621592956861aa11322413b72c32dc152100"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"34dd1818ff2313f17cf59834695ab7ee0c7853d7":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"16a22f8085bb46850c91784e94f7714345011404":["52316373036b9f161a08896e7c9ebf4389790a47"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a1fb1605adf454c3893d46676e444ce7597ba08","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["34dd1818ff2313f17cf59834695ab7ee0c7853d7","9837f40c922407d857991971de6def18eda0857b"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["0d3a1cba0d84384334e5c75e77d139a3a9e480fa"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["c0ee0c7f6bcf49646748d46aee9383b68eb55c80","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"5f31b9b25580c2654f9fb90381dbac5b3f968f74":["55ed5a78f8a4b37108ac73a894a105db562d303e"],"e0d9c88546c1a130d50b56981790d87a308daffd":["802dacaaef5ee1e51adc6cc23a315fb26bd22130","334787e1937d79beb6e05f612c61602a29107816"],"89948af0461fead48f44ba8fb7866f107ce83f22":["7cceb1cc58424313a8a9bd726fed6586cdef78df"],"3f504512a03d978990cbff30db0522b354e846db":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e0d5f83cef35308593d82478a890bf6bd8b53289":["a80c0cde330092676c81467a3ea0c9660b3d773b"],"0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15":["a513b6a92751e54c76fb5447948c9e7d437163a7"],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15"],"09d06843c166c033fc611df4ce71e33731bc1ad1":["9f71b6d873161f41cef30256f162ac6fa8f88858"],"9f71b6d873161f41cef30256f162ac6fa8f88858":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["0806aac02ecbbdc6b5d9705ae15da193219c7af4"],"fdeb4684cdf98b129ea8b38c5595c3028f931439":["28288370235ed02234a64753cdbf0c6ec096304a"],"acb26533c8d0113ceff75cc811f4d3d93cfb99e6":["09d06843c166c033fc611df4ce71e33731bc1ad1"],"2a1fb1605adf454c3893d46676e444ce7597ba08":["2bdfc68740f8af2501a37780c23045a248dba491"],"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":["9e302b4ecab1242453fbd12784e424ad50c66398","c0ee0c7f6bcf49646748d46aee9383b68eb55c80"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["c0ee0c7f6bcf49646748d46aee9383b68eb55c80","3989cbabb60c5cb6ac1253892227bdfea3139611"],"cdc53359111a5e3782f56300070ab2878ec82cb9":["16a22f8085bb46850c91784e94f7714345011404"],"0d3a1cba0d84384334e5c75e77d139a3a9e480fa":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["89948af0461fead48f44ba8fb7866f107ce83f22"],"01322d51122b6cbe6b5ba6059fffba67798dae72":["cdc53359111a5e3782f56300070ab2878ec82cb9"],"334787e1937d79beb6e05f612c61602a29107816":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"a80c0cde330092676c81467a3ea0c9660b3d773b":["09d06843c166c033fc611df4ce71e33731bc1ad1","acb26533c8d0113ceff75cc811f4d3d93cfb99e6"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"802dacaaef5ee1e51adc6cc23a315fb26bd22130":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3989cbabb60c5cb6ac1253892227bdfea3139611":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["1852ff897aecd2f7c8376a02aedfd44104533f28","197bbedf08450ade98a11f4a0001448059666bec"],"9837f40c922407d857991971de6def18eda0857b":["34dd1818ff2313f17cf59834695ab7ee0c7853d7"],"7cceb1cc58424313a8a9bd726fed6586cdef78df":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["34dd1818ff2313f17cf59834695ab7ee0c7853d7","9837f40c922407d857991971de6def18eda0857b"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","197bbedf08450ade98a11f4a0001448059666bec"],"8c77a387d47ede09f8574d5d4abe19efa4ae53ad":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"938c621592956861aa11322413b72c32dc152100":["e0d9c88546c1a130d50b56981790d87a308daffd"],"1852ff897aecd2f7c8376a02aedfd44104533f28":["8c77a387d47ede09f8574d5d4abe19efa4ae53ad"],"2bdfc68740f8af2501a37780c23045a248dba491":["a80c0cde330092676c81467a3ea0c9660b3d773b","e0d5f83cef35308593d82478a890bf6bd8b53289"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9e302b4ecab1242453fbd12784e424ad50c66398":["5f31b9b25580c2654f9fb90381dbac5b3f968f74"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"c0ee0c7f6bcf49646748d46aee9383b68eb55c80":["fdeb4684cdf98b129ea8b38c5595c3028f931439"]},"commit2Childs":{"197bbedf08450ade98a11f4a0001448059666bec":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["34dd1818ff2313f17cf59834695ab7ee0c7853d7"],"52316373036b9f161a08896e7c9ebf4389790a47":["16a22f8085bb46850c91784e94f7714345011404"],"0806aac02ecbbdc6b5d9705ae15da193219c7af4":["55ed5a78f8a4b37108ac73a894a105db562d303e"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["3f504512a03d978990cbff30db0522b354e846db"],"34dd1818ff2313f17cf59834695ab7ee0c7853d7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9837f40c922407d857991971de6def18eda0857b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"16a22f8085bb46850c91784e94f7714345011404":["cdc53359111a5e3782f56300070ab2878ec82cb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["8c77a387d47ede09f8574d5d4abe19efa4ae53ad"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"560c18d71dad43d675158783c3840f8c80d6d39c":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"5f31b9b25580c2654f9fb90381dbac5b3f968f74":["9e302b4ecab1242453fbd12784e424ad50c66398"],"e0d9c88546c1a130d50b56981790d87a308daffd":["938c621592956861aa11322413b72c32dc152100"],"89948af0461fead48f44ba8fb7866f107ce83f22":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e0d5f83cef35308593d82478a890bf6bd8b53289":["2bdfc68740f8af2501a37780c23045a248dba491"],"0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15":["4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"09d06843c166c033fc611df4ce71e33731bc1ad1":["acb26533c8d0113ceff75cc811f4d3d93cfb99e6","a80c0cde330092676c81467a3ea0c9660b3d773b"],"9f71b6d873161f41cef30256f162ac6fa8f88858":["09d06843c166c033fc611df4ce71e33731bc1ad1"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["5f31b9b25580c2654f9fb90381dbac5b3f968f74"],"fdeb4684cdf98b129ea8b38c5595c3028f931439":["c0ee0c7f6bcf49646748d46aee9383b68eb55c80"],"acb26533c8d0113ceff75cc811f4d3d93cfb99e6":["a80c0cde330092676c81467a3ea0c9660b3d773b"],"2a1fb1605adf454c3893d46676e444ce7597ba08":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":["3989cbabb60c5cb6ac1253892227bdfea3139611"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"cdc53359111a5e3782f56300070ab2878ec82cb9":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"0d3a1cba0d84384334e5c75e77d139a3a9e480fa":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["0d3a1cba0d84384334e5c75e77d139a3a9e480fa"],"01322d51122b6cbe6b5ba6059fffba67798dae72":["7cceb1cc58424313a8a9bd726fed6586cdef78df"],"334787e1937d79beb6e05f612c61602a29107816":["e0d9c88546c1a130d50b56981790d87a308daffd"],"a80c0cde330092676c81467a3ea0c9660b3d773b":["e0d5f83cef35308593d82478a890bf6bd8b53289","2bdfc68740f8af2501a37780c23045a248dba491"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["197bbedf08450ade98a11f4a0001448059666bec","e9017cf144952056066919f1ebc7897ff9bd71b1"],"802dacaaef5ee1e51adc6cc23a315fb26bd22130":["e0d9c88546c1a130d50b56981790d87a308daffd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9f71b6d873161f41cef30256f162ac6fa8f88858","74aea047dff7f7c38a2d766827bd20d356f98c6a","28288370235ed02234a64753cdbf0c6ec096304a","a513b6a92751e54c76fb5447948c9e7d437163a7"],"3989cbabb60c5cb6ac1253892227bdfea3139611":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["334787e1937d79beb6e05f612c61602a29107816","802dacaaef5ee1e51adc6cc23a315fb26bd22130"],"9837f40c922407d857991971de6def18eda0857b":["52316373036b9f161a08896e7c9ebf4389790a47","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"7cceb1cc58424313a8a9bd726fed6586cdef78df":["89948af0461fead48f44ba8fb7866f107ce83f22"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[],"28288370235ed02234a64753cdbf0c6ec096304a":["fdeb4684cdf98b129ea8b38c5595c3028f931439"],"8c77a387d47ede09f8574d5d4abe19efa4ae53ad":["1852ff897aecd2f7c8376a02aedfd44104533f28"],"938c621592956861aa11322413b72c32dc152100":["0806aac02ecbbdc6b5d9705ae15da193219c7af4"],"2bdfc68740f8af2501a37780c23045a248dba491":["2a1fb1605adf454c3893d46676e444ce7597ba08"],"1852ff897aecd2f7c8376a02aedfd44104533f28":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15"],"9e302b4ecab1242453fbd12784e424ad50c66398":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b"],"c0ee0c7f6bcf49646748d46aee9383b68eb55c80":["560c18d71dad43d675158783c3840f8c80d6d39c","c00aac053fdd75193eb8b6d45b64c26c3b586d5b","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}