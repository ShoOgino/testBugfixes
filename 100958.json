{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#[R]_withSearcher(IOFunction[SolrIndexSearcher,R]).mjava","commits":[{"id":"4ab833f2b623042c834458d4cbcad05073a93793","date":1527625631,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#[R]_withSearcher(IOFunction[SolrIndexSearcher,R]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Executes the lambda with the {@link SolrIndexSearcher}.  This is more convenient than using\n   * {@link #getSearcher()} since there is no ref-counting business to worry about.\n   * Example:\n   * <pre class=\"prettyprint\">\n   *   IndexReader reader = h.getCore().withSearcher(SolrIndexSearcher::getIndexReader);\n   * </pre>\n   * Warning: although a lambda is concise, it may be inappropriate to simply return the IndexReader because it might\n   * be closed soon after this method returns; it really depends.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <R> R withSearcher(IOFunction<SolrIndexSearcher,R> lambda) throws IOException {\n    final RefCounted<SolrIndexSearcher> refCounted = getSearcher();\n    try {\n      return lambda.apply(refCounted.get());\n    } finally {\n      refCounted.decref();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2138c838f1c8052d94d61eb1e205dce7fa6932ef","date":1527642223,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#[R]_withSearcher(IOFunction[SolrIndexSearcher,R]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Executes the lambda with the {@link SolrIndexSearcher}.  This is more convenient than using\n   * {@link #getSearcher()} since there is no ref-counting business to worry about.\n   * Example:\n   * <pre class=\"prettyprint\">\n   *   IndexReader reader = h.getCore().withSearcher(SolrIndexSearcher::getIndexReader);\n   * </pre>\n   * Warning: although a lambda is concise, it may be inappropriate to simply return the IndexReader because it might\n   * be closed soon after this method returns; it really depends.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <R> R withSearcher(IOFunction<SolrIndexSearcher,R> lambda) throws IOException {\n    final RefCounted<SolrIndexSearcher> refCounted = getSearcher();\n    try {\n      return lambda.apply(refCounted.get());\n    } finally {\n      refCounted.decref();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#[R]_withSearcher(IOFunction[SolrIndexSearcher,R]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#[R]_withSearcher(IOFunction[SolrIndexSearcher,R]).mjava","sourceNew":"  /**\n   * Executes the lambda with the {@link SolrIndexSearcher}.  This is more convenient than using\n   * {@link #getSearcher()} since there is no ref-counting business to worry about.\n   * Example:\n   * <pre class=\"prettyprint\">\n   *   IndexReader reader = h.getCore().withSearcher(SolrIndexSearcher::getIndexReader);\n   * </pre>\n   * Warning: although a lambda is concise, it may be inappropriate to simply return the IndexReader because it might\n   * be closed soon after this method returns; it really depends.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <R> R withSearcher(IOFunction<SolrIndexSearcher, R> lambda) throws IOException {\n    final RefCounted<SolrIndexSearcher> refCounted = getSearcher();\n    try {\n      return lambda.apply(refCounted.get());\n    } finally {\n      refCounted.decref();\n    }\n  }\n\n","sourceOld":"  /**\n   * Executes the lambda with the {@link SolrIndexSearcher}.  This is more convenient than using\n   * {@link #getSearcher()} since there is no ref-counting business to worry about.\n   * Example:\n   * <pre class=\"prettyprint\">\n   *   IndexReader reader = h.getCore().withSearcher(SolrIndexSearcher::getIndexReader);\n   * </pre>\n   * Warning: although a lambda is concise, it may be inappropriate to simply return the IndexReader because it might\n   * be closed soon after this method returns; it really depends.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <R> R withSearcher(IOFunction<SolrIndexSearcher,R> lambda) throws IOException {\n    final RefCounted<SolrIndexSearcher> refCounted = getSearcher();\n    try {\n      return lambda.apply(refCounted.get());\n    } finally {\n      refCounted.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2668c99990e4c94a78bac005aa682b7c5986d23a":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ab833f2b623042c834458d4cbcad05073a93793":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ab833f2b623042c834458d4cbcad05073a93793"]},"commit2Childs":{"2668c99990e4c94a78bac005aa682b7c5986d23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ab833f2b623042c834458d4cbcad05073a93793","2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"4ab833f2b623042c834458d4cbcad05073a93793":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}