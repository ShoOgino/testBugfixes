{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#initQParsers().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initQParsers().mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#initQParsers().mjava","sourceNew":"  /** Configure the query parsers. */\n  private void initQParsers() {\n    initPlugins(qParserPlugins,QParserPlugin.class);\n    // default parsers\n    for (int i=0; i<QParserPlugin.standardPlugins.length; i+=2) {\n     try {\n       String name = (String)QParserPlugin.standardPlugins[i];\n       if (null == qParserPlugins.get(name)) {\n         Class<QParserPlugin> clazz = (Class<QParserPlugin>)QParserPlugin.standardPlugins[i+1];\n         QParserPlugin plugin = clazz.newInstance();\n         qParserPlugins.put(name, plugin);\n         plugin.init(null);\n       }\n     } catch (Exception e) {\n       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n     }\n    }\n  }\n\n","sourceOld":"  /** Configure the query parsers. */\n  private void initQParsers() {\n    initPlugins(qParserPlugins,QParserPlugin.class);\n    // default parsers\n    for (int i=0; i<QParserPlugin.standardPlugins.length; i+=2) {\n     try {\n       String name = (String)QParserPlugin.standardPlugins[i];\n       if (null == qParserPlugins.get(name)) {\n         Class<QParserPlugin> clazz = (Class<QParserPlugin>)QParserPlugin.standardPlugins[i+1];\n         QParserPlugin plugin = clazz.newInstance();\n         qParserPlugins.put(name, plugin);\n         plugin.init(null);\n       }\n     } catch (Exception e) {\n       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n     }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initQParsers().mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#initQParsers().mjava","sourceNew":"  /** Configure the query parsers. */\n  private void initQParsers() {\n    initPlugins(qParserPlugins,QParserPlugin.class);\n    // default parsers\n    for (int i=0; i<QParserPlugin.standardPlugins.length; i+=2) {\n     try {\n       String name = (String)QParserPlugin.standardPlugins[i];\n       if (null == qParserPlugins.get(name)) {\n         Class<QParserPlugin> clazz = (Class<QParserPlugin>)QParserPlugin.standardPlugins[i+1];\n         QParserPlugin plugin = clazz.newInstance();\n         qParserPlugins.put(name, plugin);\n         plugin.init(null);\n       }\n     } catch (Exception e) {\n       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n     }\n    }\n  }\n\n","sourceOld":"  /** Configure the query parsers. */\n  private void initQParsers() {\n    initPlugins(qParserPlugins,QParserPlugin.class);\n    // default parsers\n    for (int i=0; i<QParserPlugin.standardPlugins.length; i+=2) {\n     try {\n       String name = (String)QParserPlugin.standardPlugins[i];\n       if (null == qParserPlugins.get(name)) {\n         Class<QParserPlugin> clazz = (Class<QParserPlugin>)QParserPlugin.standardPlugins[i+1];\n         QParserPlugin plugin = clazz.newInstance();\n         qParserPlugins.put(name, plugin);\n         plugin.init(null);\n       }\n     } catch (Exception e) {\n       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n     }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initQParsers().mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#initQParsers().mjava","sourceNew":"  /** Configure the query parsers. */\n  private void initQParsers() {\n    initPlugins(qParserPlugins,QParserPlugin.class);\n    // default parsers\n    for (int i=0; i<QParserPlugin.standardPlugins.length; i+=2) {\n     try {\n       String name = (String)QParserPlugin.standardPlugins[i];\n       if (null == qParserPlugins.get(name)) {\n         Class<QParserPlugin> clazz = (Class<QParserPlugin>)QParserPlugin.standardPlugins[i+1];\n         QParserPlugin plugin = clazz.newInstance();\n         qParserPlugins.put(name, plugin);\n         plugin.init(null);\n       }\n     } catch (Exception e) {\n       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n     }\n    }\n  }\n\n","sourceOld":"  /** Configure the query parsers. */\n  private void initQParsers() {\n    initPlugins(qParserPlugins,QParserPlugin.class);\n    // default parsers\n    for (int i=0; i<QParserPlugin.standardPlugins.length; i+=2) {\n     try {\n       String name = (String)QParserPlugin.standardPlugins[i];\n       if (null == qParserPlugins.get(name)) {\n         Class<QParserPlugin> clazz = (Class<QParserPlugin>)QParserPlugin.standardPlugins[i+1];\n         QParserPlugin plugin = clazz.newInstance();\n         qParserPlugins.put(name, plugin);\n         plugin.init(null);\n       }\n     } catch (Exception e) {\n       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n     }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3f79b53383c3381abbce305afa234e6f864fca","date":1373477228,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initQParsers().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initQParsers().mjava","sourceNew":"  /** Configure the query parsers. */\n  private void initQParsers() {\n    initPlugins(qParserPlugins,QParserPlugin.class);\n    // default parsers\n    for (int i=0; i<QParserPlugin.standardPlugins.length; i+=2) {\n     try {\n       String name = (String)QParserPlugin.standardPlugins[i];\n       if (null == qParserPlugins.get(name)) {\n         Class<QParserPlugin> clazz = (Class<QParserPlugin>)QParserPlugin.standardPlugins[i+1];\n         QParserPlugin plugin = clazz.newInstance();\n         qParserPlugins.put(name, plugin);\n         plugin.init(null);\n         infoRegistry.put(name, plugin);\n       }\n     } catch (Exception e) {\n       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n     }\n    }\n  }\n\n","sourceOld":"  /** Configure the query parsers. */\n  private void initQParsers() {\n    initPlugins(qParserPlugins,QParserPlugin.class);\n    // default parsers\n    for (int i=0; i<QParserPlugin.standardPlugins.length; i+=2) {\n     try {\n       String name = (String)QParserPlugin.standardPlugins[i];\n       if (null == qParserPlugins.get(name)) {\n         Class<QParserPlugin> clazz = (Class<QParserPlugin>)QParserPlugin.standardPlugins[i+1];\n         QParserPlugin plugin = clazz.newInstance();\n         qParserPlugins.put(name, plugin);\n         plugin.init(null);\n       }\n     } catch (Exception e) {\n       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n     }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initQParsers().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initQParsers().mjava","sourceNew":"  /** Configure the query parsers. */\n  private void initQParsers() {\n    initPlugins(qParserPlugins,QParserPlugin.class);\n    // default parsers\n    for (int i=0; i<QParserPlugin.standardPlugins.length; i+=2) {\n     try {\n       String name = (String)QParserPlugin.standardPlugins[i];\n       if (null == qParserPlugins.get(name)) {\n         Class<QParserPlugin> clazz = (Class<QParserPlugin>)QParserPlugin.standardPlugins[i+1];\n         QParserPlugin plugin = clazz.newInstance();\n         qParserPlugins.put(name, plugin);\n         plugin.init(null);\n         infoRegistry.put(name, plugin);\n       }\n     } catch (Exception e) {\n       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n     }\n    }\n  }\n\n","sourceOld":"  /** Configure the query parsers. */\n  private void initQParsers() {\n    initPlugins(qParserPlugins,QParserPlugin.class);\n    // default parsers\n    for (int i=0; i<QParserPlugin.standardPlugins.length; i+=2) {\n     try {\n       String name = (String)QParserPlugin.standardPlugins[i];\n       if (null == qParserPlugins.get(name)) {\n         Class<QParserPlugin> clazz = (Class<QParserPlugin>)QParserPlugin.standardPlugins[i+1];\n         QParserPlugin plugin = clazz.newInstance();\n         qParserPlugins.put(name, plugin);\n         plugin.init(null);\n       }\n     } catch (Exception e) {\n       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n     }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9aea0485ecacb6734c17da2d02569816c23a69c1","date":1425707735,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initQParsers().mjava","sourceNew":null,"sourceOld":"  /** Configure the query parsers. */\n  private void initQParsers() {\n    initPlugins(qParserPlugins,QParserPlugin.class);\n    // default parsers\n    for (int i=0; i<QParserPlugin.standardPlugins.length; i+=2) {\n     try {\n       String name = (String)QParserPlugin.standardPlugins[i];\n       if (null == qParserPlugins.get(name)) {\n         Class<QParserPlugin> clazz = (Class<QParserPlugin>)QParserPlugin.standardPlugins[i+1];\n         QParserPlugin plugin = clazz.newInstance();\n         qParserPlugins.put(name, plugin);\n         plugin.init(null);\n         infoRegistry.put(name, plugin);\n       }\n     } catch (Exception e) {\n       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n     }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initQParsers().mjava","sourceNew":null,"sourceOld":"  /** Configure the query parsers. */\n  private void initQParsers() {\n    initPlugins(qParserPlugins,QParserPlugin.class);\n    // default parsers\n    for (int i=0; i<QParserPlugin.standardPlugins.length; i+=2) {\n     try {\n       String name = (String)QParserPlugin.standardPlugins[i];\n       if (null == qParserPlugins.get(name)) {\n         Class<QParserPlugin> clazz = (Class<QParserPlugin>)QParserPlugin.standardPlugins[i+1];\n         QParserPlugin plugin = clazz.newInstance();\n         qParserPlugins.put(name, plugin);\n         plugin.init(null);\n         infoRegistry.put(name, plugin);\n       }\n     } catch (Exception e) {\n       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n     }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["7c3f79b53383c3381abbce305afa234e6f864fca","9aea0485ecacb6734c17da2d02569816c23a69c1"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["c26f00b574427b55127e869b935845554afde1fa","7c3f79b53383c3381abbce305afa234e6f864fca"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["7c3f79b53383c3381abbce305afa234e6f864fca"],"7c3f79b53383c3381abbce305afa234e6f864fca":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9aea0485ecacb6734c17da2d02569816c23a69c1"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["37a0f60745e53927c4c876cfe5b5a58170f0646c","7c3f79b53383c3381abbce305afa234e6f864fca"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"9aea0485ecacb6734c17da2d02569816c23a69c1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c3f79b53383c3381abbce305afa234e6f864fca":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","37a0f60745e53927c4c876cfe5b5a58170f0646c","9aea0485ecacb6734c17da2d02569816c23a69c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","37a0f60745e53927c4c876cfe5b5a58170f0646c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}