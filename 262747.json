{"path":"src/java/org/apache/solr/request/XMLWriter#startTag(String,String,boolean).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/XMLWriter#startTag(String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void startTag(String tag, String name, boolean closeTag) throws IOException {\n    if (doIndent) indent();\n\n    writer.write('<');\n    writer.write(tag);\n    if (name!=null) {\n      writer.write(\" name=\\\"\");\n      writer.write(name);\n      if (closeTag) {\n        writer.write(\"\\\"/>\");\n      } else {\n        writer.write(\"\\\">\");\n      }\n    } else {\n      if (closeTag) {\n        writer.write(\"/>\");\n      } else {\n        writer.write('>');\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7bf252af5e92a90d1970a3dd2b4f7c0d431f235a","date":1145639412,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/request/XMLWriter#startTag(String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/request/XMLWriter#startTag(String,String,boolean).mjava","sourceNew":"  public void startTag(String tag, String name, boolean closeTag) throws IOException {\n    if (doIndent) indent();\n\n    writer.write('<');\n    writer.write(tag);\n    if (name!=null) {\n      writeAttr(\"name\", name);\n      if (closeTag) {\n        writer.write(\"/>\");\n      } else {\n        writer.write(\">\");\n      }\n    } else {\n      if (closeTag) {\n        writer.write(\"/>\");\n      } else {\n        writer.write('>');\n      }\n    }\n  }\n\n","sourceOld":"  public void startTag(String tag, String name, boolean closeTag) throws IOException {\n    if (doIndent) indent();\n\n    writer.write('<');\n    writer.write(tag);\n    if (name!=null) {\n      writer.write(\" name=\\\"\");\n      writer.write(name);\n      if (closeTag) {\n        writer.write(\"\\\"/>\");\n      } else {\n        writer.write(\"\\\">\");\n      }\n    } else {\n      if (closeTag) {\n        writer.write(\"/>\");\n      } else {\n        writer.write('>');\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"389093072f08396fd9d3e07a47399dddb47de83b","date":1263255083,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/request/XMLWriter#startTag(String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/request/XMLWriter#startTag(String,String,boolean).mjava","sourceNew":"  /**\n   * Begins the writing of an XML tag output, using the provided \n   * <code>tag</code> as the name, with an optional <code>name</code>\n   * attribute, set to the provided value of name. If <code>closeTag</code> is\n   * set to true, then the tag is written with no internal text value.\n   * \n   * @param tag The name of the XML tag to write.\n   * @param name If provided (not set to null), a &quot;name&quot; attribute is\n   * written to the tag, with the value set to the provided parameter.\n   * @param closeTag If set to true, then the tag is closed, without writing any\n   * internal text value.\n   * @throws IOException If the underlying {@link #writer} throws an Exception.\n   */\n  public void startTag(String tag, String name, boolean closeTag) throws IOException {\n    if (doIndent) indent();\n\n    writer.write('<');\n    writer.write(tag);\n    if (name!=null) {\n      writeAttr(\"name\", name);\n      if (closeTag) {\n        writer.write(\"/>\");\n      } else {\n        writer.write(\">\");\n      }\n    } else {\n      if (closeTag) {\n        writer.write(\"/>\");\n      } else {\n        writer.write('>');\n      }\n    }\n  }\n\n","sourceOld":"  public void startTag(String tag, String name, boolean closeTag) throws IOException {\n    if (doIndent) indent();\n\n    writer.write('<');\n    writer.write(tag);\n    if (name!=null) {\n      writeAttr(\"name\", name);\n      if (closeTag) {\n        writer.write(\"/>\");\n      } else {\n        writer.write(\">\");\n      }\n    } else {\n      if (closeTag) {\n        writer.write(\"/>\");\n      } else {\n        writer.write('>');\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10b17ff7ad534c3b34a34944d80a87d217011d9c","date":1263262796,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/XMLWriter#startTag(String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/request/XMLWriter#startTag(String,String,boolean).mjava","sourceNew":"  public void startTag(String tag, String name, boolean closeTag) throws IOException {\n    if (doIndent) indent();\n\n    writer.write('<');\n    writer.write(tag);\n    if (name!=null) {\n      writeAttr(\"name\", name);\n      if (closeTag) {\n        writer.write(\"/>\");\n      } else {\n        writer.write(\">\");\n      }\n    } else {\n      if (closeTag) {\n        writer.write(\"/>\");\n      } else {\n        writer.write('>');\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Begins the writing of an XML tag output, using the provided \n   * <code>tag</code> as the name, with an optional <code>name</code>\n   * attribute, set to the provided value of name. If <code>closeTag</code> is\n   * set to true, then the tag is written with no internal text value.\n   * \n   * @param tag The name of the XML tag to write.\n   * @param name If provided (not set to null), a &quot;name&quot; attribute is\n   * written to the tag, with the value set to the provided parameter.\n   * @param closeTag If set to true, then the tag is closed, without writing any\n   * internal text value.\n   * @throws IOException If the underlying {@link #writer} throws an Exception.\n   */\n  public void startTag(String tag, String name, boolean closeTag) throws IOException {\n    if (doIndent) indent();\n\n    writer.write('<');\n    writer.write(tag);\n    if (name!=null) {\n      writeAttr(\"name\", name);\n      if (closeTag) {\n        writer.write(\"/>\");\n      } else {\n        writer.write(\">\");\n      }\n    } else {\n      if (closeTag) {\n        writer.write(\"/>\");\n      } else {\n        writer.write('>');\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae7b8ff75c872b3cc70dd939c7368b1327a93ee1","date":1263263734,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/response/XMLWriter#startTag(String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/request/XMLWriter#startTag(String,String,boolean).mjava","sourceNew":"  public void startTag(String tag, String name, boolean closeTag) throws IOException {\n    if (doIndent) indent();\n\n    writer.write('<');\n    writer.write(tag);\n    if (name!=null) {\n      writeAttr(\"name\", name);\n      if (closeTag) {\n        writer.write(\"/>\");\n      } else {\n        writer.write(\">\");\n      }\n    } else {\n      if (closeTag) {\n        writer.write(\"/>\");\n      } else {\n        writer.write('>');\n      }\n    }\n  }\n\n","sourceOld":"  public void startTag(String tag, String name, boolean closeTag) throws IOException {\n    if (doIndent) indent();\n\n    writer.write('<');\n    writer.write(tag);\n    if (name!=null) {\n      writeAttr(\"name\", name);\n      if (closeTag) {\n        writer.write(\"/>\");\n      } else {\n        writer.write(\">\");\n      }\n    } else {\n      if (closeTag) {\n        writer.write(\"/>\");\n      } else {\n        writer.write('>');\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ae7b8ff75c872b3cc70dd939c7368b1327a93ee1":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["389093072f08396fd9d3e07a47399dddb47de83b"],"389093072f08396fd9d3e07a47399dddb47de83b":["7bf252af5e92a90d1970a3dd2b4f7c0d431f235a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7bf252af5e92a90d1970a3dd2b4f7c0d431f235a":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"]},"commit2Childs":{"ae7b8ff75c872b3cc70dd939c7368b1327a93ee1":[],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["7bf252af5e92a90d1970a3dd2b4f7c0d431f235a"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["ae7b8ff75c872b3cc70dd939c7368b1327a93ee1"],"389093072f08396fd9d3e07a47399dddb47de83b":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"7bf252af5e92a90d1970a3dd2b4f7c0d431f235a":["389093072f08396fd9d3e07a47399dddb47de83b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ae7b8ff75c872b3cc70dd939c7368b1327a93ee1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}