{"path":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#doStress(int).mjava","commits":[{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#doStress(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#doStress(int,boolean).mjava","sourceNew":"  // Unless things go _really_ well, stop after you have the directories set up.\n  private void doStress(int secondsToRun) throws Exception {\n    makeCores(solrHomeDirectory);\n\n    //MUST start the server after the cores are made.\n    buildClients();\n\n    try {\n\n      log.info(\"Starting indexing and querying\");\n\n      int secondsRun = 0;\n      int secondsRemaining = secondsToRun;\n      do {\n\n        int cycleSeconds = Math.min(resetInterval, secondsRemaining);\n        log.info(String.format(Locale.ROOT, \"\\n\\n\\n\\n\\nStarting a %,d second cycle, seconds left: %,d. Seconds run so far: %,d.\",\n            cycleSeconds, secondsRemaining, secondsRun));\n\n        Indexer idxer = new Indexer(this, url, indexingClients, indexingThreads, cycleSeconds, random());\n\n        Queries queries = new Queries(this, url, queryingClients, queryThreads, random());\n\n        idxer.waitOnThreads();\n\n        queries.waitOnThreads();\n\n        secondsRemaining = Math.max(secondsRemaining - resetInterval, 0);\n\n        checkResults(queryingClients.get(0), queries, idxer);\n\n        secondsRun += cycleSeconds;\n\n        if (secondsRemaining > 0) {\n          deleteAllDocuments(queryingClients.get(0), queries);\n        }\n      } while (secondsRemaining > 0);\n\n      assertTrue(\"We didn't index any documents, somethings really messed up\", cumulativeDocs > 0);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(\"Caught unexpected exception\");\n    }\n  }\n\n","sourceOld":"  // Unless things go _really_ well, stop after you have the directories set up.\n  private void doStress(int secondsToRun, boolean oldStyle) throws Exception {\n    makeCores(solrHomeDirectory, oldStyle);\n\n    //MUST start the server after the cores are made.\n    buildClients();\n\n    try {\n\n      log.info(\"Starting indexing and querying\");\n\n      int secondsRun = 0;\n      int secondsRemaining = secondsToRun;\n      do {\n\n        int cycleSeconds = Math.min(resetInterval, secondsRemaining);\n        log.info(String.format(Locale.ROOT, \"\\n\\n\\n\\n\\nStarting a %,d second cycle, seconds left: %,d. Seconds run so far: %,d.\",\n            cycleSeconds, secondsRemaining, secondsRun));\n\n        Indexer idxer = new Indexer(this, url, indexingClients, indexingThreads, cycleSeconds, random());\n\n        Queries queries = new Queries(this, url, queryingClients, queryThreads, random());\n\n        idxer.waitOnThreads();\n\n        queries.waitOnThreads();\n\n        secondsRemaining = Math.max(secondsRemaining - resetInterval, 0);\n\n        checkResults(queryingClients.get(0), queries, idxer);\n\n        secondsRun += cycleSeconds;\n\n        if (secondsRemaining > 0) {\n          deleteAllDocuments(queryingClients.get(0), queries);\n        }\n      } while (secondsRemaining > 0);\n\n      assertTrue(\"We didn't index any documents, somethings really messed up\", cumulativeDocs > 0);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(\"Caught unexpected exception\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#doStress(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#doStress(int).mjava","sourceNew":"  // Unless things go _really_ well, stop after you have the directories set up.\n  private void doStress(int secondsToRun) throws Exception {\n    makeCores(solrHomeDirectory);\n\n    //MUST start the server after the cores are made.\n    buildClients();\n\n    try {\n\n      log.info(\"Starting indexing and querying\");\n\n      int secondsRun = 0;\n      int secondsRemaining = secondsToRun;\n      do {\n\n        int cycleSeconds = Math.min(RESET_INTERVAL, secondsRemaining);\n        log.info(String.format(Locale.ROOT, \"\\n\\n\\n\\n\\nStarting a %,d second cycle, seconds left: %,d. Seconds run so far: %,d.\",\n            cycleSeconds, secondsRemaining, secondsRun));\n\n        Indexer idxer = new Indexer(this, url, indexingClients, indexingThreads, cycleSeconds, random());\n\n        Queries queries = new Queries(this, url, queryingClients, queryThreads, random());\n\n        idxer.waitOnThreads();\n\n        queries.waitOnThreads();\n\n        secondsRemaining = Math.max(secondsRemaining - RESET_INTERVAL, 0);\n\n        checkResults(queryingClients.get(0), queries, idxer);\n\n        secondsRun += cycleSeconds;\n\n        if (secondsRemaining > 0) {\n          deleteAllDocuments(queryingClients.get(0), queries);\n        }\n      } while (secondsRemaining > 0);\n\n      assertTrue(\"We didn't index any documents, somethings really messed up\", cumulativeDocs > 0);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(\"Caught unexpected exception\");\n    }\n  }\n\n","sourceOld":"  // Unless things go _really_ well, stop after you have the directories set up.\n  private void doStress(int secondsToRun) throws Exception {\n    makeCores(solrHomeDirectory);\n\n    //MUST start the server after the cores are made.\n    buildClients();\n\n    try {\n\n      log.info(\"Starting indexing and querying\");\n\n      int secondsRun = 0;\n      int secondsRemaining = secondsToRun;\n      do {\n\n        int cycleSeconds = Math.min(resetInterval, secondsRemaining);\n        log.info(String.format(Locale.ROOT, \"\\n\\n\\n\\n\\nStarting a %,d second cycle, seconds left: %,d. Seconds run so far: %,d.\",\n            cycleSeconds, secondsRemaining, secondsRun));\n\n        Indexer idxer = new Indexer(this, url, indexingClients, indexingThreads, cycleSeconds, random());\n\n        Queries queries = new Queries(this, url, queryingClients, queryThreads, random());\n\n        idxer.waitOnThreads();\n\n        queries.waitOnThreads();\n\n        secondsRemaining = Math.max(secondsRemaining - resetInterval, 0);\n\n        checkResults(queryingClients.get(0), queries, idxer);\n\n        secondsRun += cycleSeconds;\n\n        if (secondsRemaining > 0) {\n          deleteAllDocuments(queryingClients.get(0), queries);\n        }\n      } while (secondsRemaining > 0);\n\n      assertTrue(\"We didn't index any documents, somethings really messed up\", cumulativeDocs > 0);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(\"Caught unexpected exception\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#doStress(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#doStress(int).mjava","sourceNew":"  // Unless things go _really_ well, stop after you have the directories set up.\n  private void doStress(int secondsToRun) throws Exception {\n    makeCores(solrHomeDirectory);\n\n    //MUST start the server after the cores are made.\n    buildClients();\n\n    try {\n\n      log.info(\"Starting indexing and querying\");\n\n      int secondsRun = 0;\n      int secondsRemaining = secondsToRun;\n      do {\n\n        int cycleSeconds = Math.min(RESET_INTERVAL, secondsRemaining);\n        log.info(String.format(Locale.ROOT, \"\\n\\n\\n\\n\\nStarting a %,d second cycle, seconds left: %,d. Seconds run so far: %,d.\",\n            cycleSeconds, secondsRemaining, secondsRun));\n\n        Indexer idxer = new Indexer(this, url, indexingClients, indexingThreads, cycleSeconds, random());\n\n        Queries queries = new Queries(this, url, queryingClients, queryThreads, random());\n\n        idxer.waitOnThreads();\n\n        queries.waitOnThreads();\n\n        secondsRemaining = Math.max(secondsRemaining - RESET_INTERVAL, 0);\n\n        checkResults(queryingClients.get(0), queries, idxer);\n\n        secondsRun += cycleSeconds;\n\n        if (secondsRemaining > 0) {\n          deleteAllDocuments(queryingClients.get(0), queries);\n        }\n      } while (secondsRemaining > 0);\n\n      assertTrue(\"We didn't index any documents, somethings really messed up\", cumulativeDocs > 0);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(\"Caught unexpected exception\");\n    }\n  }\n\n","sourceOld":"  // Unless things go _really_ well, stop after you have the directories set up.\n  private void doStress(int secondsToRun) throws Exception {\n    makeCores(solrHomeDirectory);\n\n    //MUST start the server after the cores are made.\n    buildClients();\n\n    try {\n\n      log.info(\"Starting indexing and querying\");\n\n      int secondsRun = 0;\n      int secondsRemaining = secondsToRun;\n      do {\n\n        int cycleSeconds = Math.min(resetInterval, secondsRemaining);\n        log.info(String.format(Locale.ROOT, \"\\n\\n\\n\\n\\nStarting a %,d second cycle, seconds left: %,d. Seconds run so far: %,d.\",\n            cycleSeconds, secondsRemaining, secondsRun));\n\n        Indexer idxer = new Indexer(this, url, indexingClients, indexingThreads, cycleSeconds, random());\n\n        Queries queries = new Queries(this, url, queryingClients, queryThreads, random());\n\n        idxer.waitOnThreads();\n\n        queries.waitOnThreads();\n\n        secondsRemaining = Math.max(secondsRemaining - resetInterval, 0);\n\n        checkResults(queryingClients.get(0), queries, idxer);\n\n        secondsRun += cycleSeconds;\n\n        if (secondsRemaining > 0) {\n          deleteAllDocuments(queryingClients.get(0), queries);\n        }\n      } while (secondsRemaining > 0);\n\n      assertTrue(\"We didn't index any documents, somethings really messed up\", cumulativeDocs > 0);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(\"Caught unexpected exception\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6ad96fd05c63ec22c1203121a27e0a1adce4025","date":1552081953,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#doStress(int).mjava","sourceNew":null,"sourceOld":"  // Unless things go _really_ well, stop after you have the directories set up.\n  private void doStress(int secondsToRun) throws Exception {\n    makeCores(solrHomeDirectory);\n\n    //MUST start the server after the cores are made.\n    buildClients();\n\n    try {\n\n      log.info(\"Starting indexing and querying\");\n\n      int secondsRun = 0;\n      int secondsRemaining = secondsToRun;\n      do {\n\n        int cycleSeconds = Math.min(RESET_INTERVAL, secondsRemaining);\n        log.info(String.format(Locale.ROOT, \"\\n\\n\\n\\n\\nStarting a %,d second cycle, seconds left: %,d. Seconds run so far: %,d.\",\n            cycleSeconds, secondsRemaining, secondsRun));\n\n        Indexer idxer = new Indexer(this, url, indexingClients, indexingThreads, cycleSeconds, random());\n\n        Queries queries = new Queries(this, url, queryingClients, queryThreads, random());\n\n        idxer.waitOnThreads();\n\n        queries.waitOnThreads();\n\n        secondsRemaining = Math.max(secondsRemaining - RESET_INTERVAL, 0);\n\n        checkResults(queryingClients.get(0), queries, idxer);\n\n        secondsRun += cycleSeconds;\n\n        if (secondsRemaining > 0) {\n          deleteAllDocuments(queryingClients.get(0), queries);\n        }\n      } while (secondsRemaining > 0);\n\n      assertTrue(\"We didn't index any documents, somethings really messed up\", cumulativeDocs > 0);\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(\"Caught unexpected exception\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5de502b5478255493125e7e801411ba17a6682ec":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6ad96fd05c63ec22c1203121a27e0a1adce4025":["5de502b5478255493125e7e801411ba17a6682ec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e6ad96fd05c63ec22c1203121a27e0a1adce4025"]},"commit2Childs":{"5de502b5478255493125e7e801411ba17a6682ec":["e6ad96fd05c63ec22c1203121a27e0a1adce4025"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441"],"e6ad96fd05c63ec22c1203121a27e0a1adce4025":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6f20fd35e3055a0c5b387df0b986a68d65d86441","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}