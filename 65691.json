{"path":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testFullyMergeOldIndex().mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testFullyMergeOldIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testFullyMergeOldIndex().mjava","sourceNew":"  public void testFullyMergeOldIndex() throws Exception {\n    for (String name : oldNames) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + name);\n      }\n      Directory dir = newDirectory(oldIndexDirs.get(name));\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n      w.forceMerge(1);\n      w.close();\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testFullyMergeOldIndex() throws Exception {\n    for (String name : oldNames) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + name);\n      }\n      Directory dir = newDirectory(oldIndexDirs.get(name));\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n      w.forceMerge(1);\n      w.close();\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testFullyMergeOldIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testFullyMergeOldIndex().mjava","sourceNew":"  public void testFullyMergeOldIndex() throws Exception {\n    for (String name : oldNames) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + name);\n      }\n      Directory dir = newDirectory(oldIndexDirs.get(name));\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n      w.forceMerge(1);\n      w.close();\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testFullyMergeOldIndex() throws Exception {\n    for (String name : oldNames) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + name);\n      }\n      Directory dir = newDirectory(oldIndexDirs.get(name));\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n      w.forceMerge(1);\n      w.close();\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31741cf1390044e38a2ec3127cf302ba841bfd75","date":1491292636,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testFullyMergeOldIndex().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testFullyMergeOldIndex().mjava","sourceNew":"  public void testFullyMergeOldIndex() throws Exception {\n    for (String name : oldNames) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + name);\n      }\n      Directory dir = newDirectory(oldIndexDirs.get(name));\n\n      final SegmentInfos oldSegInfos = SegmentInfos.readLatestCommit(dir);\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n      w.forceMerge(1);\n      w.close();\n\n      final SegmentInfos segInfos = SegmentInfos.readLatestCommit(dir);\n      assertEquals(oldSegInfos.getIndexCreatedVersionMajor(), segInfos.getIndexCreatedVersionMajor());\n      assertEquals(Version.LATEST, segInfos.asList().get(0).info.getVersion());\n      assertEquals(oldSegInfos.asList().get(0).info.getMinVersion(), segInfos.asList().get(0).info.getMinVersion());\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testFullyMergeOldIndex() throws Exception {\n    for (String name : oldNames) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + name);\n      }\n      Directory dir = newDirectory(oldIndexDirs.get(name));\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n      w.forceMerge(1);\n      w.close();\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92212fd254551a0b1156aafc3a1a6ed1a43932ad","date":1491296431,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testFullyMergeOldIndex().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testFullyMergeOldIndex().mjava","sourceNew":"  public void testFullyMergeOldIndex() throws Exception {\n    for (String name : oldNames) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + name);\n      }\n      Directory dir = newDirectory(oldIndexDirs.get(name));\n\n      final SegmentInfos oldSegInfos = SegmentInfos.readLatestCommit(dir);\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n      w.forceMerge(1);\n      w.close();\n\n      final SegmentInfos segInfos = SegmentInfos.readLatestCommit(dir);\n      assertEquals(oldSegInfos.getIndexCreatedVersionMajor(), segInfos.getIndexCreatedVersionMajor());\n      assertEquals(Version.LATEST, segInfos.asList().get(0).info.getVersion());\n      assertEquals(oldSegInfos.asList().get(0).info.getMinVersion(), segInfos.asList().get(0).info.getMinVersion());\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testFullyMergeOldIndex() throws Exception {\n    for (String name : oldNames) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: index=\" + name);\n      }\n      Directory dir = newDirectory(oldIndexDirs.get(name));\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n      w.forceMerge(1);\n      w.close();\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["31741cf1390044e38a2ec3127cf302ba841bfd75"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["92212fd254551a0b1156aafc3a1a6ed1a43932ad","31741cf1390044e38a2ec3127cf302ba841bfd75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"31741cf1390044e38a2ec3127cf302ba841bfd75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["92212fd254551a0b1156aafc3a1a6ed1a43932ad","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}