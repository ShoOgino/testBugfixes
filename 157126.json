{"path":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/AnalyzerUtil#getSynonymAnalyzer(Analyzer,SynonymMap,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/AnalyzerUtil#getSynonymAnalyzer(Analyzer,SynonymMap,int).mjava","pathOld":"contrib/wordnet/src/java/org/apache/lucene/wordnet/AnalyzerUtil#getSynonymAnalyzer(Analyzer,SynonymMap,int).mjava","sourceNew":"  /**\n   * Returns an analyzer wrapper that wraps the underlying child analyzer's\n   * token stream into a {@link SynonymTokenFilter}.\n   * \n   * @param child\n   *            the underlying child analyzer\n   * @param synonyms\n   *            the map used to extract synonyms for terms\n   * @param maxSynonyms\n   *            the maximum number of synonym tokens to return per underlying\n   *            token word (a value of Integer.MAX_VALUE indicates unlimited)\n   * @return a new analyzer\n   */\n  public static Analyzer getSynonymAnalyzer(final Analyzer child, \n      final SynonymMap synonyms, final int maxSynonyms) {\n    \n    if (child == null) \n      throw new IllegalArgumentException(\"child analyzer must not be null\");\n    if (synonyms == null)\n      throw new IllegalArgumentException(\"synonyms must not be null\");\n    if (maxSynonyms < 0) \n      throw new IllegalArgumentException(\"maxSynonyms must not be negative\");\n    if (maxSynonyms == 0)\n      return child; // no need to wrap\n  \n    return new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new SynonymTokenFilter(\n          child.tokenStream(fieldName, reader), synonyms, maxSynonyms);\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Returns an analyzer wrapper that wraps the underlying child analyzer's\n   * token stream into a {@link SynonymTokenFilter}.\n   * \n   * @param child\n   *            the underlying child analyzer\n   * @param synonyms\n   *            the map used to extract synonyms for terms\n   * @param maxSynonyms\n   *            the maximum number of synonym tokens to return per underlying\n   *            token word (a value of Integer.MAX_VALUE indicates unlimited)\n   * @return a new analyzer\n   */\n  public static Analyzer getSynonymAnalyzer(final Analyzer child, \n      final SynonymMap synonyms, final int maxSynonyms) {\n    \n    if (child == null) \n      throw new IllegalArgumentException(\"child analyzer must not be null\");\n    if (synonyms == null)\n      throw new IllegalArgumentException(\"synonyms must not be null\");\n    if (maxSynonyms < 0) \n      throw new IllegalArgumentException(\"maxSynonyms must not be negative\");\n    if (maxSynonyms == 0)\n      return child; // no need to wrap\n  \n    return new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new SynonymTokenFilter(\n          child.tokenStream(fieldName, reader), synonyms, maxSynonyms);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"689f35bd9818b47b8d9fe96cf06518228e949ab6","date":1272894884,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/AnalyzerUtil#getSynonymAnalyzer(Analyzer,SynonymMap,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns an analyzer wrapper that wraps the underlying child analyzer's\n   * token stream into a {@link SynonymTokenFilter}.\n   * \n   * @param child\n   *            the underlying child analyzer\n   * @param synonyms\n   *            the map used to extract synonyms for terms\n   * @param maxSynonyms\n   *            the maximum number of synonym tokens to return per underlying\n   *            token word (a value of Integer.MAX_VALUE indicates unlimited)\n   * @return a new analyzer\n   */\n  public static Analyzer getSynonymAnalyzer(final Analyzer child, \n      final SynonymMap synonyms, final int maxSynonyms) {\n    \n    if (child == null) \n      throw new IllegalArgumentException(\"child analyzer must not be null\");\n    if (synonyms == null)\n      throw new IllegalArgumentException(\"synonyms must not be null\");\n    if (maxSynonyms < 0) \n      throw new IllegalArgumentException(\"maxSynonyms must not be negative\");\n    if (maxSynonyms == 0)\n      return child; // no need to wrap\n  \n    return new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new SynonymTokenFilter(\n          child.tokenStream(fieldName, reader), synonyms, maxSynonyms);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"689f35bd9818b47b8d9fe96cf06518228e949ab6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["689f35bd9818b47b8d9fe96cf06518228e949ab6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"689f35bd9818b47b8d9fe96cf06518228e949ab6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["689f35bd9818b47b8d9fe96cf06518228e949ab6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}