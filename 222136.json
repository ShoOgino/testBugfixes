{"path":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testPersist().mjava","commits":[{"id":"fa9fef69a29d64a132d51b8bca52175417bdb0c1","date":1312388297,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testPersist().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPersist() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName()\n        + \"_persist\");\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n    cores.setPersistent(true); // is this needed since we make explicit calls?\n    \n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    \n    // sanity check the basic persistence of the default init\n    \n    final File oneXml = new File(workDir, \"1.solr.xml\");\n    cores.persistFile(oneXml);\n    \n    assertXmlFile(oneXml, \"/solr[@persistent='true']\",\n        \"/solr/cores[@defaultCoreName='collection1']\",\n        \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n            + \"']\", \"1=count(/solr/cores/core)\");\n    \n    // create some new cores and sanity check the persistence\n    \n    final File dataXfile = new File(workDir, \"dataX\");\n    final String dataX = dataXfile.getAbsolutePath();\n    assertTrue(\"dataXfile mkdirs failed: \" + dataX, dataXfile.mkdirs());\n    \n    final File instYfile = new File(workDir, \"instY\");\n    FileUtils.copyDirectory(instDirFile, instYfile);\n    \n    // :HACK: dataDir leaves off trailing \"/\", but instanceDir uses it\n    final String instY = instYfile.getAbsolutePath() + \"/\";\n    \n    final CoreDescriptor xd = new CoreDescriptor(cores, \"X\", instDir);\n    xd.setDataDir(dataX);\n    \n    final CoreDescriptor yd = new CoreDescriptor(cores, \"Y\", instY);\n    \n    SolrCore x = null;\n    SolrCore y = null;\n    try {\n      x = cores.create(xd);\n      y = cores.create(yd);\n      cores.register(x, false);\n      cores.register(y, false);\n      \n      assertEquals(\"cores not added?\", 3, cores.getCoreNames().size());\n      \n      final File twoXml = new File(workDir, \"2.solr.xml\");\n      cores.persistFile(twoXml);\n      \n      assertXmlFile(twoXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='X' and @instanceDir='\" + instDir\n              + \"' and @dataDir='\" + dataX + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"3=count(/solr/cores/core)\");\n      \n      // delete a core, check persistence again\n      assertNotNull(\"removing X returned null\", cores.remove(\"X\"));\n      \n      final File threeXml = new File(workDir, \"3.solr.xml\");\n      cores.persistFile(threeXml);\n      \n      assertXmlFile(threeXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY\n              + \"']\", \"2=count(/solr/cores/core)\");\n      \n      // sanity check that persisting w/o changes has no changes\n      \n      final File fourXml = new File(workDir, \"4.solr.xml\");\n      cores.persistFile(fourXml);\n      \n      assertTrue(\"3 and 4 should be identical files\",\n          FileUtils.contentEquals(threeXml, fourXml));\n      \n    } finally {\n      if (x != null) {\n        try {\n          x.close();\n        } catch (Exception e) {\n          log.error(\"\", e);\n        }\n      }\n      if (y != null) {\n        try {\n          y.close();\n        } catch (Exception e) {\n          log.error(\"\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3d029af900de120a30841f8ee3f2ac09e0382f9d","date":1313877494,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testPersist().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testPersist().mjava","sourceNew":"  @Test\n  public void testPersist() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName()\n        + \"_persist\");\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n    cores.setPersistent(true); // is this needed since we make explicit calls?\n    \n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    \n    // sanity check the basic persistence of the default init\n    \n    final File oneXml = new File(workDir, \"1.solr.xml\");\n    cores.persistFile(oneXml);\n    \n    assertXmlFile(oneXml, \"/solr[@persistent='true']\",\n        \"/solr/cores[@defaultCoreName='collection1']\",\n        \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n            + \"']\", \"1=count(/solr/cores/core)\");\n    \n    // create some new cores and sanity check the persistence\n    \n    final File dataXfile = new File(workDir, \"dataX\");\n    final String dataX = dataXfile.getAbsolutePath();\n    assertTrue(\"dataXfile mkdirs failed: \" + dataX, dataXfile.mkdirs());\n    \n    final File instYfile = new File(workDir, \"instY\");\n    FileUtils.copyDirectory(instDirFile, instYfile);\n    \n    // :HACK: dataDir leaves off trailing \"/\", but instanceDir uses it\n    final String instY = instYfile.getAbsolutePath() + \"/\";\n    \n    final CoreDescriptor xd = new CoreDescriptor(cores, \"X\", instDir);\n    xd.setDataDir(dataX);\n    \n    final CoreDescriptor yd = new CoreDescriptor(cores, \"Y\", instY);\n    \n    SolrCore x = null;\n    SolrCore y = null;\n    try {\n      x = cores.create(xd);\n      y = cores.create(yd);\n      cores.register(x, false);\n      cores.register(y, false);\n      \n      assertEquals(\"cores not added?\", 3, cores.getCoreNames().size());\n      \n      final File twoXml = new File(workDir, \"2.solr.xml\");\n      cores.persistFile(twoXml);\n      \n      assertXmlFile(twoXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='X' and @instanceDir='\" + instDir\n              + \"' and @dataDir='\" + dataX + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"3=count(/solr/cores/core)\");\n      \n      // delete a core, check persistence again\n      assertNotNull(\"removing X returned null\", cores.remove(\"X\"));\n      \n      final File threeXml = new File(workDir, \"3.solr.xml\");\n      cores.persistFile(threeXml);\n      \n      assertXmlFile(threeXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY\n              + \"']\", \"2=count(/solr/cores/core)\");\n      \n      // sanity check that persisting w/o changes has no changes\n      \n      final File fourXml = new File(workDir, \"4.solr.xml\");\n      cores.persistFile(fourXml);\n      \n      assertTrue(\"3 and 4 should be identical files\",\n          FileUtils.contentEquals(threeXml, fourXml));\n      \n    } finally {\n      // y is closed by the container, but\n      // x has been removed from the container\n      if (x != null) {\n        try {\n          x.close();\n        } catch (Exception e) {\n          log.error(\"\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPersist() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName()\n        + \"_persist\");\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n    cores.setPersistent(true); // is this needed since we make explicit calls?\n    \n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    \n    // sanity check the basic persistence of the default init\n    \n    final File oneXml = new File(workDir, \"1.solr.xml\");\n    cores.persistFile(oneXml);\n    \n    assertXmlFile(oneXml, \"/solr[@persistent='true']\",\n        \"/solr/cores[@defaultCoreName='collection1']\",\n        \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n            + \"']\", \"1=count(/solr/cores/core)\");\n    \n    // create some new cores and sanity check the persistence\n    \n    final File dataXfile = new File(workDir, \"dataX\");\n    final String dataX = dataXfile.getAbsolutePath();\n    assertTrue(\"dataXfile mkdirs failed: \" + dataX, dataXfile.mkdirs());\n    \n    final File instYfile = new File(workDir, \"instY\");\n    FileUtils.copyDirectory(instDirFile, instYfile);\n    \n    // :HACK: dataDir leaves off trailing \"/\", but instanceDir uses it\n    final String instY = instYfile.getAbsolutePath() + \"/\";\n    \n    final CoreDescriptor xd = new CoreDescriptor(cores, \"X\", instDir);\n    xd.setDataDir(dataX);\n    \n    final CoreDescriptor yd = new CoreDescriptor(cores, \"Y\", instY);\n    \n    SolrCore x = null;\n    SolrCore y = null;\n    try {\n      x = cores.create(xd);\n      y = cores.create(yd);\n      cores.register(x, false);\n      cores.register(y, false);\n      \n      assertEquals(\"cores not added?\", 3, cores.getCoreNames().size());\n      \n      final File twoXml = new File(workDir, \"2.solr.xml\");\n      cores.persistFile(twoXml);\n      \n      assertXmlFile(twoXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='X' and @instanceDir='\" + instDir\n              + \"' and @dataDir='\" + dataX + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"3=count(/solr/cores/core)\");\n      \n      // delete a core, check persistence again\n      assertNotNull(\"removing X returned null\", cores.remove(\"X\"));\n      \n      final File threeXml = new File(workDir, \"3.solr.xml\");\n      cores.persistFile(threeXml);\n      \n      assertXmlFile(threeXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY\n              + \"']\", \"2=count(/solr/cores/core)\");\n      \n      // sanity check that persisting w/o changes has no changes\n      \n      final File fourXml = new File(workDir, \"4.solr.xml\");\n      cores.persistFile(fourXml);\n      \n      assertTrue(\"3 and 4 should be identical files\",\n          FileUtils.contentEquals(threeXml, fourXml));\n      \n    } finally {\n      if (x != null) {\n        try {\n          x.close();\n        } catch (Exception e) {\n          log.error(\"\", e);\n        }\n      }\n      if (y != null) {\n        try {\n          y.close();\n        } catch (Exception e) {\n          log.error(\"\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b374d78db8148ec6796fdf37148b33897ab40a8c","date":1351606544,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testPersist().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testPersist().mjava","sourceNew":"  @Test\n  public void testPersist() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName()\n        + \"_persist\");\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n    cores.setPersistent(true); // is this needed since we make explicit calls?\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    \n    // sanity check the basic persistence of the default init\n    \n    final File oneXml = new File(workDir, \"1.solr.xml\");\n    cores.persistFile(oneXml);\n\n    assertXmlFile(oneXml, \"/solr[@persistent='true']\",\n        \"/solr/cores[@defaultCoreName='collection1' and not(@swappableCacheSize)]\",\n        \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir +\n        \"' and @swappable='false' and @loadOnStartup='true' ]\", \"1=count(/solr/cores/core)\");\n\n    // create some new cores and sanity check the persistence\n    \n    final File dataXfile = new File(workDir, \"dataX\");\n    final String dataX = dataXfile.getAbsolutePath();\n    assertTrue(\"dataXfile mkdirs failed: \" + dataX, dataXfile.mkdirs());\n    \n    final File instYfile = new File(workDir, \"instY\");\n    FileUtils.copyDirectory(instDirFile, instYfile);\n    \n    // :HACK: dataDir leaves off trailing \"/\", but instanceDir uses it\n    final String instY = instYfile.getAbsolutePath() + \"/\";\n    \n    final CoreDescriptor xd = new CoreDescriptor(cores, \"X\", instDir);\n    xd.setDataDir(dataX);\n    \n    final CoreDescriptor yd = new CoreDescriptor(cores, \"Y\", instY);\n    \n    SolrCore x = null;\n    SolrCore y = null;\n    try {\n      x = cores.create(xd);\n      y = cores.create(yd);\n      cores.register(x, false);\n      cores.register(y, false);\n      \n      assertEquals(\"cores not added?\", 3, cores.getCoreNames().size());\n      \n      final File twoXml = new File(workDir, \"2.solr.xml\");\n      cores.swappableCacheSize = 32;\n\n      cores.persistFile(twoXml);\n\n      assertXmlFile(twoXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1' and @swappableCacheSize='32']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='X' and @instanceDir='\" + instDir\n              + \"' and @dataDir='\" + dataX + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"3=count(/solr/cores/core)\");\n\n      // delete a core, check persistence again\n      assertNotNull(\"removing X returned null\", cores.remove(\"X\"));\n      \n      final File threeXml = new File(workDir, \"3.solr.xml\");\n      cores.persistFile(threeXml);\n      \n      assertXmlFile(threeXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY\n              + \"']\", \"2=count(/solr/cores/core)\");\n      \n      // sanity check that persisting w/o changes has no changes\n      \n      final File fourXml = new File(workDir, \"4.solr.xml\");\n      cores.persistFile(fourXml);\n      \n      assertTrue(\"3 and 4 should be identical files\",\n          FileUtils.contentEquals(threeXml, fourXml));\n      \n    } finally {\n      // y is closed by the container, but\n      // x has been removed from the container\n      if (x != null) {\n        try {\n          x.close();\n        } catch (Exception e) {\n          log.error(\"\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPersist() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName()\n        + \"_persist\");\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n    cores.setPersistent(true); // is this needed since we make explicit calls?\n    \n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    \n    // sanity check the basic persistence of the default init\n    \n    final File oneXml = new File(workDir, \"1.solr.xml\");\n    cores.persistFile(oneXml);\n    \n    assertXmlFile(oneXml, \"/solr[@persistent='true']\",\n        \"/solr/cores[@defaultCoreName='collection1']\",\n        \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n            + \"']\", \"1=count(/solr/cores/core)\");\n    \n    // create some new cores and sanity check the persistence\n    \n    final File dataXfile = new File(workDir, \"dataX\");\n    final String dataX = dataXfile.getAbsolutePath();\n    assertTrue(\"dataXfile mkdirs failed: \" + dataX, dataXfile.mkdirs());\n    \n    final File instYfile = new File(workDir, \"instY\");\n    FileUtils.copyDirectory(instDirFile, instYfile);\n    \n    // :HACK: dataDir leaves off trailing \"/\", but instanceDir uses it\n    final String instY = instYfile.getAbsolutePath() + \"/\";\n    \n    final CoreDescriptor xd = new CoreDescriptor(cores, \"X\", instDir);\n    xd.setDataDir(dataX);\n    \n    final CoreDescriptor yd = new CoreDescriptor(cores, \"Y\", instY);\n    \n    SolrCore x = null;\n    SolrCore y = null;\n    try {\n      x = cores.create(xd);\n      y = cores.create(yd);\n      cores.register(x, false);\n      cores.register(y, false);\n      \n      assertEquals(\"cores not added?\", 3, cores.getCoreNames().size());\n      \n      final File twoXml = new File(workDir, \"2.solr.xml\");\n      cores.persistFile(twoXml);\n      \n      assertXmlFile(twoXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='X' and @instanceDir='\" + instDir\n              + \"' and @dataDir='\" + dataX + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"3=count(/solr/cores/core)\");\n      \n      // delete a core, check persistence again\n      assertNotNull(\"removing X returned null\", cores.remove(\"X\"));\n      \n      final File threeXml = new File(workDir, \"3.solr.xml\");\n      cores.persistFile(threeXml);\n      \n      assertXmlFile(threeXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY\n              + \"']\", \"2=count(/solr/cores/core)\");\n      \n      // sanity check that persisting w/o changes has no changes\n      \n      final File fourXml = new File(workDir, \"4.solr.xml\");\n      cores.persistFile(fourXml);\n      \n      assertTrue(\"3 and 4 should be identical files\",\n          FileUtils.contentEquals(threeXml, fourXml));\n      \n    } finally {\n      // y is closed by the container, but\n      // x has been removed from the container\n      if (x != null) {\n        try {\n          x.close();\n        } catch (Exception e) {\n          log.error(\"\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c33399cc2618223f11ba493f9a3a2026fe05b579","date":1356813042,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testPersist().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testPersist().mjava","sourceNew":"  @Test\n  public void testPersist() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName()\n        + \"_persist\");\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n    cores.setPersistent(true); // is this needed since we make explicit calls?\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    \n    // sanity check the basic persistence of the default init\n    \n    final File oneXml = new File(workDir, \"1.solr.xml\");\n    cores.persistFile(oneXml);\n\n    assertXmlFile(oneXml, \"/solr[@persistent='true']\",\n        \"/solr/cores[@defaultCoreName='collection1' and not(@transientCacheSize)]\",\n        \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir +\n        \"' and @transient='false' and @loadOnStartup='true' ]\", \"1=count(/solr/cores/core)\");\n\n    // create some new cores and sanity check the persistence\n    \n    final File dataXfile = new File(workDir, \"dataX\");\n    final String dataX = dataXfile.getAbsolutePath();\n    assertTrue(\"dataXfile mkdirs failed: \" + dataX, dataXfile.mkdirs());\n    \n    final File instYfile = new File(workDir, \"instY\");\n    FileUtils.copyDirectory(instDirFile, instYfile);\n    \n    // :HACK: dataDir leaves off trailing \"/\", but instanceDir uses it\n    final String instY = instYfile.getAbsolutePath() + \"/\";\n    \n    final CoreDescriptor xd = new CoreDescriptor(cores, \"X\", instDir);\n    xd.setDataDir(dataX);\n    \n    final CoreDescriptor yd = new CoreDescriptor(cores, \"Y\", instY);\n    \n    SolrCore x = null;\n    SolrCore y = null;\n    try {\n      x = cores.create(xd);\n      y = cores.create(yd);\n      cores.register(x, false);\n      cores.register(y, false);\n      \n      assertEquals(\"cores not added?\", 3, cores.getCoreNames().size());\n      \n      final File twoXml = new File(workDir, \"2.solr.xml\");\n      cores.transientCacheSize = 32;\n\n      cores.persistFile(twoXml);\n\n      assertXmlFile(twoXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1' and @transientCacheSize='32']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='X' and @instanceDir='\" + instDir\n              + \"' and @dataDir='\" + dataX + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"3=count(/solr/cores/core)\");\n\n      // delete a core, check persistence again\n      assertNotNull(\"removing X returned null\", cores.remove(\"X\"));\n      \n      final File threeXml = new File(workDir, \"3.solr.xml\");\n      cores.persistFile(threeXml);\n      \n      assertXmlFile(threeXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY\n              + \"']\", \"2=count(/solr/cores/core)\");\n      \n      // sanity check that persisting w/o changes has no changes\n      \n      final File fourXml = new File(workDir, \"4.solr.xml\");\n      cores.persistFile(fourXml);\n      \n      assertTrue(\"3 and 4 should be identical files\",\n          FileUtils.contentEquals(threeXml, fourXml));\n      \n    } finally {\n      // y is closed by the container, but\n      // x has been removed from the container\n      if (x != null) {\n        try {\n          x.close();\n        } catch (Exception e) {\n          log.error(\"\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPersist() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName()\n        + \"_persist\");\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n    cores.setPersistent(true); // is this needed since we make explicit calls?\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    \n    // sanity check the basic persistence of the default init\n    \n    final File oneXml = new File(workDir, \"1.solr.xml\");\n    cores.persistFile(oneXml);\n\n    assertXmlFile(oneXml, \"/solr[@persistent='true']\",\n        \"/solr/cores[@defaultCoreName='collection1' and not(@swappableCacheSize)]\",\n        \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir +\n        \"' and @swappable='false' and @loadOnStartup='true' ]\", \"1=count(/solr/cores/core)\");\n\n    // create some new cores and sanity check the persistence\n    \n    final File dataXfile = new File(workDir, \"dataX\");\n    final String dataX = dataXfile.getAbsolutePath();\n    assertTrue(\"dataXfile mkdirs failed: \" + dataX, dataXfile.mkdirs());\n    \n    final File instYfile = new File(workDir, \"instY\");\n    FileUtils.copyDirectory(instDirFile, instYfile);\n    \n    // :HACK: dataDir leaves off trailing \"/\", but instanceDir uses it\n    final String instY = instYfile.getAbsolutePath() + \"/\";\n    \n    final CoreDescriptor xd = new CoreDescriptor(cores, \"X\", instDir);\n    xd.setDataDir(dataX);\n    \n    final CoreDescriptor yd = new CoreDescriptor(cores, \"Y\", instY);\n    \n    SolrCore x = null;\n    SolrCore y = null;\n    try {\n      x = cores.create(xd);\n      y = cores.create(yd);\n      cores.register(x, false);\n      cores.register(y, false);\n      \n      assertEquals(\"cores not added?\", 3, cores.getCoreNames().size());\n      \n      final File twoXml = new File(workDir, \"2.solr.xml\");\n      cores.swappableCacheSize = 32;\n\n      cores.persistFile(twoXml);\n\n      assertXmlFile(twoXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1' and @swappableCacheSize='32']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='X' and @instanceDir='\" + instDir\n              + \"' and @dataDir='\" + dataX + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"3=count(/solr/cores/core)\");\n\n      // delete a core, check persistence again\n      assertNotNull(\"removing X returned null\", cores.remove(\"X\"));\n      \n      final File threeXml = new File(workDir, \"3.solr.xml\");\n      cores.persistFile(threeXml);\n      \n      assertXmlFile(threeXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY\n              + \"']\", \"2=count(/solr/cores/core)\");\n      \n      // sanity check that persisting w/o changes has no changes\n      \n      final File fourXml = new File(workDir, \"4.solr.xml\");\n      cores.persistFile(fourXml);\n      \n      assertTrue(\"3 and 4 should be identical files\",\n          FileUtils.contentEquals(threeXml, fourXml));\n      \n    } finally {\n      // y is closed by the container, but\n      // x has been removed from the container\n      if (x != null) {\n        try {\n          x.close();\n        } catch (Exception e) {\n          log.error(\"\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testPersist().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testPersist().mjava","sourceNew":"  @Test\n  public void testPersist() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName()\n        + \"_persist\");\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n    cores.setPersistent(true); // is this needed since we make explicit calls?\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    \n    // sanity check the basic persistence of the default init\n    \n    final File oneXml = new File(workDir, \"1.solr.xml\");\n    cores.persistFile(oneXml);\n\n    assertXmlFile(oneXml, \"/solr[@persistent='true']\",\n        \"/solr/cores[@defaultCoreName='collection1' and not(@transientCacheSize)]\",\n        \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir +\n        \"' and @transient='false' and @loadOnStartup='true' ]\", \"1=count(/solr/cores/core)\");\n\n    // create some new cores and sanity check the persistence\n    \n    final File dataXfile = new File(workDir, \"dataX\");\n    final String dataX = dataXfile.getAbsolutePath();\n    assertTrue(\"dataXfile mkdirs failed: \" + dataX, dataXfile.mkdirs());\n    \n    final File instYfile = new File(workDir, \"instY\");\n    FileUtils.copyDirectory(instDirFile, instYfile);\n    \n    // :HACK: dataDir leaves off trailing \"/\", but instanceDir uses it\n    final String instY = instYfile.getAbsolutePath() + \"/\";\n    \n    final CoreDescriptor xd = new CoreDescriptor(cores, \"X\", instDir);\n    xd.setDataDir(dataX);\n    \n    final CoreDescriptor yd = new CoreDescriptor(cores, \"Y\", instY);\n    \n    SolrCore x = null;\n    SolrCore y = null;\n    try {\n      x = cores.create(xd);\n      y = cores.create(yd);\n      cores.register(x, false);\n      cores.register(y, false);\n      \n      assertEquals(\"cores not added?\", 3, cores.getCoreNames().size());\n      \n      final File twoXml = new File(workDir, \"2.solr.xml\");\n      cores.transientCacheSize = 32;\n\n      cores.persistFile(twoXml);\n\n      assertXmlFile(twoXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1' and @transientCacheSize='32']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='X' and @instanceDir='\" + instDir\n              + \"' and @dataDir='\" + dataX + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"3=count(/solr/cores/core)\");\n\n      // delete a core, check persistence again\n      assertNotNull(\"removing X returned null\", cores.remove(\"X\"));\n      \n      final File threeXml = new File(workDir, \"3.solr.xml\");\n      cores.persistFile(threeXml);\n      \n      assertXmlFile(threeXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY\n              + \"']\", \"2=count(/solr/cores/core)\");\n      \n      // sanity check that persisting w/o changes has no changes\n      \n      final File fourXml = new File(workDir, \"4.solr.xml\");\n      cores.persistFile(fourXml);\n      \n      assertTrue(\"3 and 4 should be identical files\",\n          FileUtils.contentEquals(threeXml, fourXml));\n      \n    } finally {\n      // y is closed by the container, but\n      // x has been removed from the container\n      if (x != null) {\n        try {\n          x.close();\n        } catch (Exception e) {\n          log.error(\"\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPersist() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName()\n        + \"_persist\");\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n    cores.setPersistent(true); // is this needed since we make explicit calls?\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    \n    // sanity check the basic persistence of the default init\n    \n    final File oneXml = new File(workDir, \"1.solr.xml\");\n    cores.persistFile(oneXml);\n\n    assertXmlFile(oneXml, \"/solr[@persistent='true']\",\n        \"/solr/cores[@defaultCoreName='collection1' and not(@swappableCacheSize)]\",\n        \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir +\n        \"' and @swappable='false' and @loadOnStartup='true' ]\", \"1=count(/solr/cores/core)\");\n\n    // create some new cores and sanity check the persistence\n    \n    final File dataXfile = new File(workDir, \"dataX\");\n    final String dataX = dataXfile.getAbsolutePath();\n    assertTrue(\"dataXfile mkdirs failed: \" + dataX, dataXfile.mkdirs());\n    \n    final File instYfile = new File(workDir, \"instY\");\n    FileUtils.copyDirectory(instDirFile, instYfile);\n    \n    // :HACK: dataDir leaves off trailing \"/\", but instanceDir uses it\n    final String instY = instYfile.getAbsolutePath() + \"/\";\n    \n    final CoreDescriptor xd = new CoreDescriptor(cores, \"X\", instDir);\n    xd.setDataDir(dataX);\n    \n    final CoreDescriptor yd = new CoreDescriptor(cores, \"Y\", instY);\n    \n    SolrCore x = null;\n    SolrCore y = null;\n    try {\n      x = cores.create(xd);\n      y = cores.create(yd);\n      cores.register(x, false);\n      cores.register(y, false);\n      \n      assertEquals(\"cores not added?\", 3, cores.getCoreNames().size());\n      \n      final File twoXml = new File(workDir, \"2.solr.xml\");\n      cores.swappableCacheSize = 32;\n\n      cores.persistFile(twoXml);\n\n      assertXmlFile(twoXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1' and @swappableCacheSize='32']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='X' and @instanceDir='\" + instDir\n              + \"' and @dataDir='\" + dataX + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"3=count(/solr/cores/core)\");\n\n      // delete a core, check persistence again\n      assertNotNull(\"removing X returned null\", cores.remove(\"X\"));\n      \n      final File threeXml = new File(workDir, \"3.solr.xml\");\n      cores.persistFile(threeXml);\n      \n      assertXmlFile(threeXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY\n              + \"']\", \"2=count(/solr/cores/core)\");\n      \n      // sanity check that persisting w/o changes has no changes\n      \n      final File fourXml = new File(workDir, \"4.solr.xml\");\n      cores.persistFile(fourXml);\n      \n      assertTrue(\"3 and 4 should be identical files\",\n          FileUtils.contentEquals(threeXml, fourXml));\n      \n    } finally {\n      // y is closed by the container, but\n      // x has been removed from the container\n      if (x != null) {\n        try {\n          x.close();\n        } catch (Exception e) {\n          log.error(\"\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6f42dee5a60f46a3fdf3ab93b39aefb356e245","date":1363106546,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testPersist().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testPersist().mjava","sourceNew":"  @Test\n  public void testPersist() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName()\n        + \"_persist\");\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    cores.setPersistent(true); // is this needed since we make explicit calls?\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    \n    // sanity check the basic persistence of the default init\n    \n    final File oneXml = new File(workDir, \"1.solr.xml\");\n    cores.persistFile(oneXml);\n\n    assertXmlFile(oneXml, \"/solr[@persistent='true']\",\n        \"/solr/cores[@defaultCoreName='collection1' and not(@transientCacheSize)]\",\n        \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir +\n        \"' and @transient='false' and @loadOnStartup='true' ]\", \"1=count(/solr/cores/core)\");\n\n    // create some new cores and sanity check the persistence\n    \n    final File dataXfile = new File(workDir, \"dataX\");\n    final String dataX = dataXfile.getAbsolutePath();\n    assertTrue(\"dataXfile mkdirs failed: \" + dataX, dataXfile.mkdirs());\n    \n    final File instYfile = new File(workDir, \"instY\");\n    FileUtils.copyDirectory(instDirFile, instYfile);\n    \n    // :HACK: dataDir leaves off trailing \"/\", but instanceDir uses it\n    final String instY = instYfile.getAbsolutePath() + \"/\";\n    \n    final CoreDescriptor xd = new CoreDescriptor(cores, \"X\", instDir);\n    xd.setDataDir(dataX);\n    \n    final CoreDescriptor yd = new CoreDescriptor(cores, \"Y\", instY);\n    \n    SolrCore x = null;\n    SolrCore y = null;\n    try {\n      x = cores.create(xd);\n      y = cores.create(yd);\n      cores.register(x, false);\n      cores.register(y, false);\n      \n      assertEquals(\"cores not added?\", 3, cores.getCoreNames().size());\n      \n      final File twoXml = new File(workDir, \"2.solr.xml\");\n      cores.transientCacheSize = 32;\n\n      cores.persistFile(twoXml);\n\n      assertXmlFile(twoXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1' and @transientCacheSize='32']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='X' and @instanceDir='\" + instDir\n              + \"' and @dataDir='\" + dataX + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"3=count(/solr/cores/core)\");\n\n      // delete a core, check persistence again\n      assertNotNull(\"removing X returned null\", cores.remove(\"X\"));\n      \n      final File threeXml = new File(workDir, \"3.solr.xml\");\n      cores.persistFile(threeXml);\n      \n      assertXmlFile(threeXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY\n              + \"']\", \"2=count(/solr/cores/core)\");\n      \n      // sanity check that persisting w/o changes has no changes\n      \n      final File fourXml = new File(workDir, \"4.solr.xml\");\n      cores.persistFile(fourXml);\n      \n      assertTrue(\"3 and 4 should be identical files\",\n          FileUtils.contentEquals(threeXml, fourXml));\n      \n    } finally {\n      // y is closed by the container, but\n      // x has been removed from the container\n      if (x != null) {\n        try {\n          x.close();\n        } catch (Exception e) {\n          log.error(\"\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPersist() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName()\n        + \"_persist\");\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n    cores.setPersistent(true); // is this needed since we make explicit calls?\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    \n    // sanity check the basic persistence of the default init\n    \n    final File oneXml = new File(workDir, \"1.solr.xml\");\n    cores.persistFile(oneXml);\n\n    assertXmlFile(oneXml, \"/solr[@persistent='true']\",\n        \"/solr/cores[@defaultCoreName='collection1' and not(@transientCacheSize)]\",\n        \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir +\n        \"' and @transient='false' and @loadOnStartup='true' ]\", \"1=count(/solr/cores/core)\");\n\n    // create some new cores and sanity check the persistence\n    \n    final File dataXfile = new File(workDir, \"dataX\");\n    final String dataX = dataXfile.getAbsolutePath();\n    assertTrue(\"dataXfile mkdirs failed: \" + dataX, dataXfile.mkdirs());\n    \n    final File instYfile = new File(workDir, \"instY\");\n    FileUtils.copyDirectory(instDirFile, instYfile);\n    \n    // :HACK: dataDir leaves off trailing \"/\", but instanceDir uses it\n    final String instY = instYfile.getAbsolutePath() + \"/\";\n    \n    final CoreDescriptor xd = new CoreDescriptor(cores, \"X\", instDir);\n    xd.setDataDir(dataX);\n    \n    final CoreDescriptor yd = new CoreDescriptor(cores, \"Y\", instY);\n    \n    SolrCore x = null;\n    SolrCore y = null;\n    try {\n      x = cores.create(xd);\n      y = cores.create(yd);\n      cores.register(x, false);\n      cores.register(y, false);\n      \n      assertEquals(\"cores not added?\", 3, cores.getCoreNames().size());\n      \n      final File twoXml = new File(workDir, \"2.solr.xml\");\n      cores.transientCacheSize = 32;\n\n      cores.persistFile(twoXml);\n\n      assertXmlFile(twoXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1' and @transientCacheSize='32']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='X' and @instanceDir='\" + instDir\n              + \"' and @dataDir='\" + dataX + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"3=count(/solr/cores/core)\");\n\n      // delete a core, check persistence again\n      assertNotNull(\"removing X returned null\", cores.remove(\"X\"));\n      \n      final File threeXml = new File(workDir, \"3.solr.xml\");\n      cores.persistFile(threeXml);\n      \n      assertXmlFile(threeXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY\n              + \"']\", \"2=count(/solr/cores/core)\");\n      \n      // sanity check that persisting w/o changes has no changes\n      \n      final File fourXml = new File(workDir, \"4.solr.xml\");\n      cores.persistFile(fourXml);\n      \n      assertTrue(\"3 and 4 should be identical files\",\n          FileUtils.contentEquals(threeXml, fourXml));\n      \n    } finally {\n      // y is closed by the container, but\n      // x has been removed from the container\n      if (x != null) {\n        try {\n          x.close();\n        } catch (Exception e) {\n          log.error(\"\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9818efa55563ddfecdecafbdd43f4bee9f252e7d","date":1364853872,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testPersist().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testPersist().mjava","sourceNew":"  @Test\n  public void testPersist() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName()\n        + \"_persist\");\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    cores.setPersistent(true); // is this needed since we make explicit calls?\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    \n    // sanity check the basic persistence of the default init\n    \n    final File oneXml = new File(workDir, \"1.solr.xml\");\n    cores.persistFile(oneXml);\n\n    assertXmlFile(oneXml, \"/solr[@persistent='true']\",\n        \"/solr/cores[@defaultCoreName='collection1' and not(@transientCacheSize)]\",\n        \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir +\n        \"' and @transient='false' and @loadOnStartup='true' ]\", \"1=count(/solr/cores/core)\");\n\n    // create some new cores and sanity check the persistence\n    \n    final File dataXfile = new File(workDir, \"dataX\");\n    final String dataX = dataXfile.getAbsolutePath();\n    assertTrue(\"dataXfile mkdirs failed: \" + dataX, dataXfile.mkdirs());\n    \n    final File instYfile = new File(workDir, \"instY\");\n    FileUtils.copyDirectory(instDirFile, instYfile);\n    \n    // :HACK: dataDir leaves off trailing \"/\", but instanceDir uses it\n    final String instY = instYfile.getAbsolutePath() + \"/\";\n    \n    final CoreDescriptor xd = new CoreDescriptor(cores, \"X\", instDir);\n    xd.setDataDir(dataX);\n    \n    final CoreDescriptor yd = new CoreDescriptor(cores, \"Y\", instY);\n    \n    SolrCore x = null;\n    SolrCore y = null;\n    try {\n      x = cores.create(xd);\n      y = cores.create(yd);\n      cores.register(x, false);\n      cores.register(y, false);\n      \n      assertEquals(\"cores not added?\", 3, cores.getCoreNames().size());\n      \n      final File twoXml = new File(workDir, \"2.solr.xml\");\n\n      cores.persistFile(twoXml);\n\n      assertXmlFile(twoXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='X' and @instanceDir='\" + instDir\n              + \"' and @dataDir='\" + dataX + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"3=count(/solr/cores/core)\");\n\n      // delete a core, check persistence again\n      assertNotNull(\"removing X returned null\", cores.remove(\"X\"));\n      \n      final File threeXml = new File(workDir, \"3.solr.xml\");\n      cores.persistFile(threeXml);\n      \n      assertXmlFile(threeXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY\n              + \"']\", \"2=count(/solr/cores/core)\");\n      \n      // sanity check that persisting w/o changes has no changes\n      \n      final File fourXml = new File(workDir, \"4.solr.xml\");\n      cores.persistFile(fourXml);\n      \n      assertTrue(\"3 and 4 should be identical files\",\n          FileUtils.contentEquals(threeXml, fourXml));\n      \n    } finally {\n      // y is closed by the container, but\n      // x has been removed from the container\n      if (x != null) {\n        try {\n          x.close();\n        } catch (Exception e) {\n          log.error(\"\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPersist() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName()\n        + \"_persist\");\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    cores.setPersistent(true); // is this needed since we make explicit calls?\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    \n    // sanity check the basic persistence of the default init\n    \n    final File oneXml = new File(workDir, \"1.solr.xml\");\n    cores.persistFile(oneXml);\n\n    assertXmlFile(oneXml, \"/solr[@persistent='true']\",\n        \"/solr/cores[@defaultCoreName='collection1' and not(@transientCacheSize)]\",\n        \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir +\n        \"' and @transient='false' and @loadOnStartup='true' ]\", \"1=count(/solr/cores/core)\");\n\n    // create some new cores and sanity check the persistence\n    \n    final File dataXfile = new File(workDir, \"dataX\");\n    final String dataX = dataXfile.getAbsolutePath();\n    assertTrue(\"dataXfile mkdirs failed: \" + dataX, dataXfile.mkdirs());\n    \n    final File instYfile = new File(workDir, \"instY\");\n    FileUtils.copyDirectory(instDirFile, instYfile);\n    \n    // :HACK: dataDir leaves off trailing \"/\", but instanceDir uses it\n    final String instY = instYfile.getAbsolutePath() + \"/\";\n    \n    final CoreDescriptor xd = new CoreDescriptor(cores, \"X\", instDir);\n    xd.setDataDir(dataX);\n    \n    final CoreDescriptor yd = new CoreDescriptor(cores, \"Y\", instY);\n    \n    SolrCore x = null;\n    SolrCore y = null;\n    try {\n      x = cores.create(xd);\n      y = cores.create(yd);\n      cores.register(x, false);\n      cores.register(y, false);\n      \n      assertEquals(\"cores not added?\", 3, cores.getCoreNames().size());\n      \n      final File twoXml = new File(workDir, \"2.solr.xml\");\n      cores.transientCacheSize = 32;\n\n      cores.persistFile(twoXml);\n\n      assertXmlFile(twoXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1' and @transientCacheSize='32']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='X' and @instanceDir='\" + instDir\n              + \"' and @dataDir='\" + dataX + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"3=count(/solr/cores/core)\");\n\n      // delete a core, check persistence again\n      assertNotNull(\"removing X returned null\", cores.remove(\"X\"));\n      \n      final File threeXml = new File(workDir, \"3.solr.xml\");\n      cores.persistFile(threeXml);\n      \n      assertXmlFile(threeXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY\n              + \"']\", \"2=count(/solr/cores/core)\");\n      \n      // sanity check that persisting w/o changes has no changes\n      \n      final File fourXml = new File(workDir, \"4.solr.xml\");\n      cores.persistFile(fourXml);\n      \n      assertTrue(\"3 and 4 should be identical files\",\n          FileUtils.contentEquals(threeXml, fourXml));\n      \n    } finally {\n      // y is closed by the container, but\n      // x has been removed from the container\n      if (x != null) {\n        try {\n          x.close();\n        } catch (Exception e) {\n          log.error(\"\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0cf46558b3f7708ed3a21e174b9e11cd30e26be","date":1365551184,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testPersist().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testPersist().mjava","sourceNew":"  @Test\n  public void testPersist() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName()\n        + \"_persist\");\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    cores.setPersistent(true); // is this needed since we make explicit calls?\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    \n    // sanity check the basic persistence of the default init\n    \n    final File oneXml = new File(workDir, \"1.solr.xml\");\n    cores.persistFile(oneXml);\n\n    assertXmlFile(oneXml, \"/solr[@persistent='true']\",\n        \"/solr/cores[@defaultCoreName='collection1' and not(@transientCacheSize)]\",\n        \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir +\n        \"' and @transient='false' and @loadOnStartup='true' ]\", \"1=count(/solr/cores/core)\");\n\n    // create some new cores and sanity check the persistence\n    \n    final File dataXfile = new File(workDir, \"dataX\");\n    final String dataX = dataXfile.getAbsolutePath();\n    assertTrue(\"dataXfile mkdirs failed: \" + dataX, dataXfile.mkdirs());\n    \n    final File instYfile = new File(workDir, \"instY\");\n    FileUtils.copyDirectory(instDirFile, instYfile);\n    \n    // :HACK: dataDir leaves off trailing \"/\", but instanceDir uses it\n    final String instY = instYfile.getAbsolutePath() + \"/\";\n    \n    final CoreDescriptor xd = new CoreDescriptor(cores, \"X\", instDir);\n    xd.setDataDir(dataX);\n    \n    final CoreDescriptor yd = new CoreDescriptor(cores, \"Y\", instY);\n    \n    SolrCore x = null;\n    SolrCore y = null;\n    try {\n      x = cores.create(xd);\n      y = cores.create(yd);\n      cores.register(x, false);\n      cores.register(y, false);\n      \n      assertEquals(\"cores not added?\", 3, cores.getCoreNames().size());\n      \n      final File twoXml = new File(workDir, \"2.solr.xml\");\n\n      cores.persistFile(twoXml);\n\n      assertXmlFile(twoXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='X' and @instanceDir='\" + instDir\n              + \"' and @dataDir='\" + dataX + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"3=count(/solr/cores/core)\");\n\n      // Test for saving implicit properties, we should not do this.\n      assertXmlFile(twoXml, \"/solr/cores/core[@name='X' and not(@solr.core.instanceDir) and not (@solr.core.configName)]\");\n\n      // delete a core, check persistence again\n      assertNotNull(\"removing X returned null\", cores.remove(\"X\"));\n      \n      final File threeXml = new File(workDir, \"3.solr.xml\");\n      cores.persistFile(threeXml);\n      \n      assertXmlFile(threeXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"2=count(/solr/cores/core)\");\n      \n      // sanity check that persisting w/o changes has no changes\n      \n      final File fourXml = new File(workDir, \"4.solr.xml\");\n      cores.persistFile(fourXml);\n      \n      assertTrue(\"3 and 4 should be identical files\",\n          FileUtils.contentEquals(threeXml, fourXml));\n      \n    } finally {\n      // y is closed by the container, but\n      // x has been removed from the container\n      if (x != null) {\n        try {\n          x.close();\n        } catch (Exception e) {\n          log.error(\"\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPersist() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName()\n        + \"_persist\");\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    cores.setPersistent(true); // is this needed since we make explicit calls?\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    \n    // sanity check the basic persistence of the default init\n    \n    final File oneXml = new File(workDir, \"1.solr.xml\");\n    cores.persistFile(oneXml);\n\n    assertXmlFile(oneXml, \"/solr[@persistent='true']\",\n        \"/solr/cores[@defaultCoreName='collection1' and not(@transientCacheSize)]\",\n        \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir +\n        \"' and @transient='false' and @loadOnStartup='true' ]\", \"1=count(/solr/cores/core)\");\n\n    // create some new cores and sanity check the persistence\n    \n    final File dataXfile = new File(workDir, \"dataX\");\n    final String dataX = dataXfile.getAbsolutePath();\n    assertTrue(\"dataXfile mkdirs failed: \" + dataX, dataXfile.mkdirs());\n    \n    final File instYfile = new File(workDir, \"instY\");\n    FileUtils.copyDirectory(instDirFile, instYfile);\n    \n    // :HACK: dataDir leaves off trailing \"/\", but instanceDir uses it\n    final String instY = instYfile.getAbsolutePath() + \"/\";\n    \n    final CoreDescriptor xd = new CoreDescriptor(cores, \"X\", instDir);\n    xd.setDataDir(dataX);\n    \n    final CoreDescriptor yd = new CoreDescriptor(cores, \"Y\", instY);\n    \n    SolrCore x = null;\n    SolrCore y = null;\n    try {\n      x = cores.create(xd);\n      y = cores.create(yd);\n      cores.register(x, false);\n      cores.register(y, false);\n      \n      assertEquals(\"cores not added?\", 3, cores.getCoreNames().size());\n      \n      final File twoXml = new File(workDir, \"2.solr.xml\");\n\n      cores.persistFile(twoXml);\n\n      assertXmlFile(twoXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='X' and @instanceDir='\" + instDir\n              + \"' and @dataDir='\" + dataX + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"3=count(/solr/cores/core)\");\n\n      // delete a core, check persistence again\n      assertNotNull(\"removing X returned null\", cores.remove(\"X\"));\n      \n      final File threeXml = new File(workDir, \"3.solr.xml\");\n      cores.persistFile(threeXml);\n      \n      assertXmlFile(threeXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY\n              + \"']\", \"2=count(/solr/cores/core)\");\n      \n      // sanity check that persisting w/o changes has no changes\n      \n      final File fourXml = new File(workDir, \"4.solr.xml\");\n      cores.persistFile(fourXml);\n      \n      assertTrue(\"3 and 4 should be identical files\",\n          FileUtils.contentEquals(threeXml, fourXml));\n      \n    } finally {\n      // y is closed by the container, but\n      // x has been removed from the container\n      if (x != null) {\n        try {\n          x.close();\n        } catch (Exception e) {\n          log.error(\"\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":["fa9fef69a29d64a132d51b8bca52175417bdb0c1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d264f386d864b5751209060e8886ca9845f70469","date":1372172126,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testPersist().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testPersist().mjava","sourceNew":"  @Test\n  public void testPersist() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName()\n        + \"_persist\");\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    cores.setPersistent(true); // is this needed since we make explicit calls?\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getRawInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(cores.getSolrHome(), instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    \n    // sanity check the basic persistence of the default init\n    \n    final File oneXml = new File(workDir, \"1.solr.xml\");\n    cores.persistFile(oneXml);\n\n    assertXmlFile(oneXml, \"/solr[@persistent='true']\",\n        \"/solr/cores[@defaultCoreName='collection1' and not(@transientCacheSize)]\",\n        \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir +\n        \"' and @transient='false' and @loadOnStartup='true' ]\", \"1=count(/solr/cores/core)\");\n\n    // create some new cores and sanity check the persistence\n    \n    final File dataXfile = new File(workDir, \"dataX\");\n    final String dataX = dataXfile.getAbsolutePath();\n    assertTrue(\"dataXfile mkdirs failed: \" + dataX, dataXfile.mkdirs());\n    \n    final File instYfile = new File(workDir, \"instY\");\n    FileUtils.copyDirectory(instDirFile, instYfile);\n    \n    // :HACK: dataDir leaves off trailing \"/\", but instanceDir uses it\n    final String instY = instYfile.getAbsolutePath() + \"/\";\n    \n    final CoreDescriptor xd = new CoreDescriptor(cores, \"X\", instDir);\n    xd.setDataDir(dataX);\n    \n    final CoreDescriptor yd = new CoreDescriptor(cores, \"Y\", instY);\n    \n    SolrCore x = null;\n    SolrCore y = null;\n    try {\n      x = cores.create(xd);\n      y = cores.create(yd);\n      cores.register(x, false);\n      cores.register(y, false);\n      \n      assertEquals(\"cores not added?\", 3, cores.getCoreNames().size());\n      \n      final File twoXml = new File(workDir, \"2.solr.xml\");\n\n      cores.persistFile(twoXml);\n\n      assertXmlFile(twoXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='X' and @instanceDir='\" + instDir\n              + \"' and @dataDir='\" + dataX + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"3=count(/solr/cores/core)\");\n\n      // Test for saving implicit properties, we should not do this.\n      assertXmlFile(twoXml, \"/solr/cores/core[@name='X' and not(@solr.core.instanceDir) and not (@solr.core.configName)]\");\n\n      // delete a core, check persistence again\n      assertNotNull(\"removing X returned null\", cores.remove(\"X\"));\n      \n      final File threeXml = new File(workDir, \"3.solr.xml\");\n      cores.persistFile(threeXml);\n      \n      assertXmlFile(threeXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"2=count(/solr/cores/core)\");\n      \n      // sanity check that persisting w/o changes has no changes\n      \n      final File fourXml = new File(workDir, \"4.solr.xml\");\n      cores.persistFile(fourXml);\n      \n      assertTrue(\"3 and 4 should be identical files\",\n          FileUtils.contentEquals(threeXml, fourXml));\n      \n    } finally {\n      // y is closed by the container, but\n      // x has been removed from the container\n      if (x != null) {\n        try {\n          x.close();\n        } catch (Exception e) {\n          log.error(\"\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPersist() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName()\n        + \"_persist\");\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    cores.setPersistent(true); // is this needed since we make explicit calls?\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    \n    // sanity check the basic persistence of the default init\n    \n    final File oneXml = new File(workDir, \"1.solr.xml\");\n    cores.persistFile(oneXml);\n\n    assertXmlFile(oneXml, \"/solr[@persistent='true']\",\n        \"/solr/cores[@defaultCoreName='collection1' and not(@transientCacheSize)]\",\n        \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir +\n        \"' and @transient='false' and @loadOnStartup='true' ]\", \"1=count(/solr/cores/core)\");\n\n    // create some new cores and sanity check the persistence\n    \n    final File dataXfile = new File(workDir, \"dataX\");\n    final String dataX = dataXfile.getAbsolutePath();\n    assertTrue(\"dataXfile mkdirs failed: \" + dataX, dataXfile.mkdirs());\n    \n    final File instYfile = new File(workDir, \"instY\");\n    FileUtils.copyDirectory(instDirFile, instYfile);\n    \n    // :HACK: dataDir leaves off trailing \"/\", but instanceDir uses it\n    final String instY = instYfile.getAbsolutePath() + \"/\";\n    \n    final CoreDescriptor xd = new CoreDescriptor(cores, \"X\", instDir);\n    xd.setDataDir(dataX);\n    \n    final CoreDescriptor yd = new CoreDescriptor(cores, \"Y\", instY);\n    \n    SolrCore x = null;\n    SolrCore y = null;\n    try {\n      x = cores.create(xd);\n      y = cores.create(yd);\n      cores.register(x, false);\n      cores.register(y, false);\n      \n      assertEquals(\"cores not added?\", 3, cores.getCoreNames().size());\n      \n      final File twoXml = new File(workDir, \"2.solr.xml\");\n\n      cores.persistFile(twoXml);\n\n      assertXmlFile(twoXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='X' and @instanceDir='\" + instDir\n              + \"' and @dataDir='\" + dataX + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"3=count(/solr/cores/core)\");\n\n      // Test for saving implicit properties, we should not do this.\n      assertXmlFile(twoXml, \"/solr/cores/core[@name='X' and not(@solr.core.instanceDir) and not (@solr.core.configName)]\");\n\n      // delete a core, check persistence again\n      assertNotNull(\"removing X returned null\", cores.remove(\"X\"));\n      \n      final File threeXml = new File(workDir, \"3.solr.xml\");\n      cores.persistFile(threeXml);\n      \n      assertXmlFile(threeXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"2=count(/solr/cores/core)\");\n      \n      // sanity check that persisting w/o changes has no changes\n      \n      final File fourXml = new File(workDir, \"4.solr.xml\");\n      cores.persistFile(fourXml);\n      \n      assertTrue(\"3 and 4 should be identical files\",\n          FileUtils.contentEquals(threeXml, fourXml));\n      \n    } finally {\n      // y is closed by the container, but\n      // x has been removed from the container\n      if (x != null) {\n        try {\n          x.close();\n        } catch (Exception e) {\n          log.error(\"\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"354983dcdf70c800bf2573d10b54a7391b1dc167","date":1372183171,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testPersist().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testPersist().mjava","sourceNew":"  @Test\n  public void testPersist() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName()\n        + \"_persist\");\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    cores.setPersistent(true); // is this needed since we make explicit calls?\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    \n    // sanity check the basic persistence of the default init\n    \n    final File oneXml = new File(workDir, \"1.solr.xml\");\n    cores.persistFile(oneXml);\n\n    assertXmlFile(oneXml, \"/solr[@persistent='true']\",\n        \"/solr/cores[@defaultCoreName='collection1' and not(@transientCacheSize)]\",\n        \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir +\n        \"' and @transient='false' and @loadOnStartup='true' ]\", \"1=count(/solr/cores/core)\");\n\n    // create some new cores and sanity check the persistence\n    \n    final File dataXfile = new File(workDir, \"dataX\");\n    final String dataX = dataXfile.getAbsolutePath();\n    assertTrue(\"dataXfile mkdirs failed: \" + dataX, dataXfile.mkdirs());\n    \n    final File instYfile = new File(workDir, \"instY\");\n    FileUtils.copyDirectory(instDirFile, instYfile);\n    \n    // :HACK: dataDir leaves off trailing \"/\", but instanceDir uses it\n    final String instY = instYfile.getAbsolutePath() + \"/\";\n    \n    final CoreDescriptor xd = new CoreDescriptor(cores, \"X\", instDir);\n    xd.setDataDir(dataX);\n    \n    final CoreDescriptor yd = new CoreDescriptor(cores, \"Y\", instY);\n    \n    SolrCore x = null;\n    SolrCore y = null;\n    try {\n      x = cores.create(xd);\n      y = cores.create(yd);\n      cores.register(x, false);\n      cores.register(y, false);\n      \n      assertEquals(\"cores not added?\", 3, cores.getCoreNames().size());\n      \n      final File twoXml = new File(workDir, \"2.solr.xml\");\n\n      cores.persistFile(twoXml);\n\n      assertXmlFile(twoXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='X' and @instanceDir='\" + instDir\n              + \"' and @dataDir='\" + dataX + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"3=count(/solr/cores/core)\");\n\n      // Test for saving implicit properties, we should not do this.\n      assertXmlFile(twoXml, \"/solr/cores/core[@name='X' and not(@solr.core.instanceDir) and not (@solr.core.configName)]\");\n\n      // delete a core, check persistence again\n      assertNotNull(\"removing X returned null\", cores.remove(\"X\"));\n      \n      final File threeXml = new File(workDir, \"3.solr.xml\");\n      cores.persistFile(threeXml);\n      \n      assertXmlFile(threeXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"2=count(/solr/cores/core)\");\n      \n      // sanity check that persisting w/o changes has no changes\n      \n      final File fourXml = new File(workDir, \"4.solr.xml\");\n      cores.persistFile(fourXml);\n      \n      assertTrue(\"3 and 4 should be identical files\",\n          FileUtils.contentEquals(threeXml, fourXml));\n      \n    } finally {\n      // y is closed by the container, but\n      // x has been removed from the container\n      if (x != null) {\n        try {\n          x.close();\n        } catch (Exception e) {\n          log.error(\"\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPersist() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName()\n        + \"_persist\");\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    cores.setPersistent(true); // is this needed since we make explicit calls?\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getRawInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(cores.getSolrHome(), instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    \n    // sanity check the basic persistence of the default init\n    \n    final File oneXml = new File(workDir, \"1.solr.xml\");\n    cores.persistFile(oneXml);\n\n    assertXmlFile(oneXml, \"/solr[@persistent='true']\",\n        \"/solr/cores[@defaultCoreName='collection1' and not(@transientCacheSize)]\",\n        \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir +\n        \"' and @transient='false' and @loadOnStartup='true' ]\", \"1=count(/solr/cores/core)\");\n\n    // create some new cores and sanity check the persistence\n    \n    final File dataXfile = new File(workDir, \"dataX\");\n    final String dataX = dataXfile.getAbsolutePath();\n    assertTrue(\"dataXfile mkdirs failed: \" + dataX, dataXfile.mkdirs());\n    \n    final File instYfile = new File(workDir, \"instY\");\n    FileUtils.copyDirectory(instDirFile, instYfile);\n    \n    // :HACK: dataDir leaves off trailing \"/\", but instanceDir uses it\n    final String instY = instYfile.getAbsolutePath() + \"/\";\n    \n    final CoreDescriptor xd = new CoreDescriptor(cores, \"X\", instDir);\n    xd.setDataDir(dataX);\n    \n    final CoreDescriptor yd = new CoreDescriptor(cores, \"Y\", instY);\n    \n    SolrCore x = null;\n    SolrCore y = null;\n    try {\n      x = cores.create(xd);\n      y = cores.create(yd);\n      cores.register(x, false);\n      cores.register(y, false);\n      \n      assertEquals(\"cores not added?\", 3, cores.getCoreNames().size());\n      \n      final File twoXml = new File(workDir, \"2.solr.xml\");\n\n      cores.persistFile(twoXml);\n\n      assertXmlFile(twoXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='X' and @instanceDir='\" + instDir\n              + \"' and @dataDir='\" + dataX + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"3=count(/solr/cores/core)\");\n\n      // Test for saving implicit properties, we should not do this.\n      assertXmlFile(twoXml, \"/solr/cores/core[@name='X' and not(@solr.core.instanceDir) and not (@solr.core.configName)]\");\n\n      // delete a core, check persistence again\n      assertNotNull(\"removing X returned null\", cores.remove(\"X\"));\n      \n      final File threeXml = new File(workDir, \"3.solr.xml\");\n      cores.persistFile(threeXml);\n      \n      assertXmlFile(threeXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"2=count(/solr/cores/core)\");\n      \n      // sanity check that persisting w/o changes has no changes\n      \n      final File fourXml = new File(workDir, \"4.solr.xml\");\n      cores.persistFile(fourXml);\n      \n      assertTrue(\"3 and 4 should be identical files\",\n          FileUtils.contentEquals(threeXml, fourXml));\n      \n    } finally {\n      // y is closed by the container, but\n      // x has been removed from the container\n      if (x != null) {\n        try {\n          x.close();\n        } catch (Exception e) {\n          log.error(\"\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7116474e2e390259937401cf928323e0cbc75e60","date":1372780249,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testPersist().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testPersist().mjava","sourceNew":"  @Test\n  public void testPersist() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName()\n        + \"_persist\");\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    cores.setPersistent(true); // is this needed since we make explicit calls?\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getRawInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(cores.getSolrHome(), instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    \n    // sanity check the basic persistence of the default init\n    \n    final File oneXml = new File(workDir, \"1.solr.xml\");\n    cores.persistFile(oneXml);\n\n    assertXmlFile(oneXml, \"/solr[@persistent='true']\",\n        \"/solr/cores[@defaultCoreName='collection1' and not(@transientCacheSize)]\",\n        \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir +\n        \"' and @transient='false' and @loadOnStartup='true' ]\", \"1=count(/solr/cores/core)\");\n\n    // create some new cores and sanity check the persistence\n    \n    final File dataXfile = new File(workDir, \"dataX\");\n    final String dataX = dataXfile.getAbsolutePath();\n    assertTrue(\"dataXfile mkdirs failed: \" + dataX, dataXfile.mkdirs());\n    \n    final File instYfile = new File(workDir, \"instY\");\n    FileUtils.copyDirectory(instDirFile, instYfile);\n    \n    // :HACK: dataDir leaves off trailing \"/\", but instanceDir uses it\n    final String instY = instYfile.getAbsolutePath() + \"/\";\n    \n    final CoreDescriptor xd = new CoreDescriptor(cores, \"X\", instDir);\n    xd.setDataDir(dataX);\n    \n    final CoreDescriptor yd = new CoreDescriptor(cores, \"Y\", instY);\n    \n    SolrCore x = null;\n    SolrCore y = null;\n    try {\n      x = cores.create(xd);\n      y = cores.create(yd);\n      cores.register(x, false);\n      cores.register(y, false);\n      \n      assertEquals(\"cores not added?\", 3, cores.getCoreNames().size());\n      \n      final File twoXml = new File(workDir, \"2.solr.xml\");\n\n      cores.persistFile(twoXml);\n\n      assertXmlFile(twoXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='X' and @instanceDir='\" + instDir\n              + \"' and @dataDir='\" + dataX + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"3=count(/solr/cores/core)\");\n\n      // Test for saving implicit properties, we should not do this.\n      assertXmlFile(twoXml, \"/solr/cores/core[@name='X' and not(@solr.core.instanceDir) and not (@solr.core.configName)]\");\n\n      // delete a core, check persistence again\n      assertNotNull(\"removing X returned null\", cores.remove(\"X\"));\n      \n      final File threeXml = new File(workDir, \"3.solr.xml\");\n      cores.persistFile(threeXml);\n      \n      assertXmlFile(threeXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"2=count(/solr/cores/core)\");\n      \n      // sanity check that persisting w/o changes has no changes\n      \n      final File fourXml = new File(workDir, \"4.solr.xml\");\n      cores.persistFile(fourXml);\n      \n      assertTrue(\"3 and 4 should be identical files\",\n          FileUtils.contentEquals(threeXml, fourXml));\n      \n    } finally {\n      // y is closed by the container, but\n      // x has been removed from the container\n      if (x != null) {\n        try {\n          x.close();\n        } catch (Exception e) {\n          log.error(\"\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPersist() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName()\n        + \"_persist\");\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    cores.setPersistent(true); // is this needed since we make explicit calls?\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    \n    // sanity check the basic persistence of the default init\n    \n    final File oneXml = new File(workDir, \"1.solr.xml\");\n    cores.persistFile(oneXml);\n\n    assertXmlFile(oneXml, \"/solr[@persistent='true']\",\n        \"/solr/cores[@defaultCoreName='collection1' and not(@transientCacheSize)]\",\n        \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir +\n        \"' and @transient='false' and @loadOnStartup='true' ]\", \"1=count(/solr/cores/core)\");\n\n    // create some new cores and sanity check the persistence\n    \n    final File dataXfile = new File(workDir, \"dataX\");\n    final String dataX = dataXfile.getAbsolutePath();\n    assertTrue(\"dataXfile mkdirs failed: \" + dataX, dataXfile.mkdirs());\n    \n    final File instYfile = new File(workDir, \"instY\");\n    FileUtils.copyDirectory(instDirFile, instYfile);\n    \n    // :HACK: dataDir leaves off trailing \"/\", but instanceDir uses it\n    final String instY = instYfile.getAbsolutePath() + \"/\";\n    \n    final CoreDescriptor xd = new CoreDescriptor(cores, \"X\", instDir);\n    xd.setDataDir(dataX);\n    \n    final CoreDescriptor yd = new CoreDescriptor(cores, \"Y\", instY);\n    \n    SolrCore x = null;\n    SolrCore y = null;\n    try {\n      x = cores.create(xd);\n      y = cores.create(yd);\n      cores.register(x, false);\n      cores.register(y, false);\n      \n      assertEquals(\"cores not added?\", 3, cores.getCoreNames().size());\n      \n      final File twoXml = new File(workDir, \"2.solr.xml\");\n\n      cores.persistFile(twoXml);\n\n      assertXmlFile(twoXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='X' and @instanceDir='\" + instDir\n              + \"' and @dataDir='\" + dataX + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"3=count(/solr/cores/core)\");\n\n      // Test for saving implicit properties, we should not do this.\n      assertXmlFile(twoXml, \"/solr/cores/core[@name='X' and not(@solr.core.instanceDir) and not (@solr.core.configName)]\");\n\n      // delete a core, check persistence again\n      assertNotNull(\"removing X returned null\", cores.remove(\"X\"));\n      \n      final File threeXml = new File(workDir, \"3.solr.xml\");\n      cores.persistFile(threeXml);\n      \n      assertXmlFile(threeXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"2=count(/solr/cores/core)\");\n      \n      // sanity check that persisting w/o changes has no changes\n      \n      final File fourXml = new File(workDir, \"4.solr.xml\");\n      cores.persistFile(fourXml);\n      \n      assertTrue(\"3 and 4 should be identical files\",\n          FileUtils.contentEquals(threeXml, fourXml));\n      \n    } finally {\n      // y is closed by the container, but\n      // x has been removed from the container\n      if (x != null) {\n        try {\n          x.close();\n        } catch (Exception e) {\n          log.error(\"\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#testPersist().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testPersist().mjava","sourceNew":"  @Test\n  public void testPersist() throws Exception {\n\n    final CoreContainer cores = init(ConfigSolrXmlOld.DEF_SOLR_XML, \"collection1\");\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cores.getCoresLocator();\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getRawInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n\n    final File instDirFile = new File(cores.getSolrHome(), instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n\n    // sanity check the basic persistence of the default init\n    TestHarness.validateXPath(locator.xml,\n        \"/solr[@persistent='true']\",\n        \"/solr/cores[@defaultCoreName='collection1' and not(@transientCacheSize)]\",\n        \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir +\n            \"' and @transient='false' and @loadOnStartup='true' ]\",\n        \"1=count(/solr/cores/core)\");\n\n    // create some new cores and sanity check the persistence\n\n    final File dataXfile = new File(solrHomeDirectory, \"dataX\");\n    final String dataX = dataXfile.getAbsolutePath();\n    assertTrue(\"dataXfile mkdirs failed: \" + dataX, dataXfile.mkdirs());\n\n    final File instYfile = new File(solrHomeDirectory, \"instY\");\n    FileUtils.copyDirectory(instDirFile, instYfile);\n\n    // :HACK: dataDir leaves off trailing \"/\", but instanceDir uses it\n    final String instY = instYfile.getAbsolutePath() + \"/\";\n\n    final CoreDescriptor xd = buildCoreDescriptor(cores, \"X\", instDir)\n        .withDataDir(dataX).build();\n\n    final CoreDescriptor yd = new CoreDescriptor(cores, \"Y\", instY);\n\n    SolrCore x = null;\n    SolrCore y = null;\n    try {\n      x = cores.create(xd);\n      y = cores.create(yd);\n      cores.register(x, false);\n      cores.register(y, false);\n\n      assertEquals(\"cores not added?\", 3, cores.getCoreNames().size());\n\n      TestHarness.validateXPath(locator.xml,\n          \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='X' and @instanceDir='\" + instDir\n              + \"' and @dataDir='\" + dataX + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"3=count(/solr/cores/core)\");\n\n      // Test for saving implicit properties, we should not do this.\n      TestHarness.validateXPath(locator.xml,\n          \"/solr/cores/core[@name='X' and not(@solr.core.instanceDir) and not (@solr.core.configName)]\");\n\n      // delete a core, check persistence again\n      assertNotNull(\"removing X returned null\", cores.remove(\"X\"));\n\n      TestHarness.validateXPath(locator.xml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"2=count(/solr/cores/core)\");\n\n    } finally {\n      // y is closed by the container, but\n      // x has been removed from the container\n      if (x != null) {\n        try {\n          x.close();\n        } catch (Exception e) {\n          log.error(\"\", e);\n        }\n      }\n      cores.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPersist() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName()\n        + \"_persist\");\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    cores.setPersistent(true); // is this needed since we make explicit calls?\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getRawInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(cores.getSolrHome(), instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    \n    // sanity check the basic persistence of the default init\n    \n    final File oneXml = new File(workDir, \"1.solr.xml\");\n    cores.persistFile(oneXml);\n\n    assertXmlFile(oneXml, \"/solr[@persistent='true']\",\n        \"/solr/cores[@defaultCoreName='collection1' and not(@transientCacheSize)]\",\n        \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir +\n        \"' and @transient='false' and @loadOnStartup='true' ]\", \"1=count(/solr/cores/core)\");\n\n    // create some new cores and sanity check the persistence\n    \n    final File dataXfile = new File(workDir, \"dataX\");\n    final String dataX = dataXfile.getAbsolutePath();\n    assertTrue(\"dataXfile mkdirs failed: \" + dataX, dataXfile.mkdirs());\n    \n    final File instYfile = new File(workDir, \"instY\");\n    FileUtils.copyDirectory(instDirFile, instYfile);\n    \n    // :HACK: dataDir leaves off trailing \"/\", but instanceDir uses it\n    final String instY = instYfile.getAbsolutePath() + \"/\";\n    \n    final CoreDescriptor xd = new CoreDescriptor(cores, \"X\", instDir);\n    xd.setDataDir(dataX);\n    \n    final CoreDescriptor yd = new CoreDescriptor(cores, \"Y\", instY);\n    \n    SolrCore x = null;\n    SolrCore y = null;\n    try {\n      x = cores.create(xd);\n      y = cores.create(yd);\n      cores.register(x, false);\n      cores.register(y, false);\n      \n      assertEquals(\"cores not added?\", 3, cores.getCoreNames().size());\n      \n      final File twoXml = new File(workDir, \"2.solr.xml\");\n\n      cores.persistFile(twoXml);\n\n      assertXmlFile(twoXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='X' and @instanceDir='\" + instDir\n              + \"' and @dataDir='\" + dataX + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"3=count(/solr/cores/core)\");\n\n      // Test for saving implicit properties, we should not do this.\n      assertXmlFile(twoXml, \"/solr/cores/core[@name='X' and not(@solr.core.instanceDir) and not (@solr.core.configName)]\");\n\n      // delete a core, check persistence again\n      assertNotNull(\"removing X returned null\", cores.remove(\"X\"));\n      \n      final File threeXml = new File(workDir, \"3.solr.xml\");\n      cores.persistFile(threeXml);\n      \n      assertXmlFile(threeXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"2=count(/solr/cores/core)\");\n      \n      // sanity check that persisting w/o changes has no changes\n      \n      final File fourXml = new File(workDir, \"4.solr.xml\");\n      cores.persistFile(fourXml);\n      \n      assertTrue(\"3 and 4 should be identical files\",\n          FileUtils.contentEquals(threeXml, fourXml));\n      \n    } finally {\n      // y is closed by the container, but\n      // x has been removed from the container\n      if (x != null) {\n        try {\n          x.close();\n        } catch (Exception e) {\n          log.error(\"\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["e0571cb12a71d379cc6bd0d3b70fe1d8867a109d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testPersist().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testPersist() throws Exception {\n    final File workDir = new File(TEMP_DIR, this.getClass().getName()\n        + \"_persist\");\n    if (workDir.exists()) {\n      FileUtils.deleteDirectory(workDir);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", workDir.mkdirs());\n    \n    final CoreContainer cores = h.getCoreContainer();\n\n    cores.setPersistent(true); // is this needed since we make explicit calls?\n\n    String instDir = null;\n    {\n      SolrCore template = null;\n      try {\n        template = cores.getCore(\"collection1\");\n        instDir = template.getCoreDescriptor().getInstanceDir();\n      } finally {\n        if (null != template) template.close();\n      }\n    }\n    \n    final File instDirFile = new File(instDir);\n    assertTrue(\"instDir doesn't exist: \" + instDir, instDirFile.exists());\n    \n    // sanity check the basic persistence of the default init\n    \n    final File oneXml = new File(workDir, \"1.solr.xml\");\n    cores.persistFile(oneXml);\n\n    assertXmlFile(oneXml, \"/solr[@persistent='true']\",\n        \"/solr/cores[@defaultCoreName='collection1' and not(@transientCacheSize)]\",\n        \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir +\n        \"' and @transient='false' and @loadOnStartup='true' ]\", \"1=count(/solr/cores/core)\");\n\n    // create some new cores and sanity check the persistence\n    \n    final File dataXfile = new File(workDir, \"dataX\");\n    final String dataX = dataXfile.getAbsolutePath();\n    assertTrue(\"dataXfile mkdirs failed: \" + dataX, dataXfile.mkdirs());\n    \n    final File instYfile = new File(workDir, \"instY\");\n    FileUtils.copyDirectory(instDirFile, instYfile);\n    \n    // :HACK: dataDir leaves off trailing \"/\", but instanceDir uses it\n    final String instY = instYfile.getAbsolutePath() + \"/\";\n    \n    final CoreDescriptor xd = new CoreDescriptor(cores, \"X\", instDir);\n    xd.setDataDir(dataX);\n    \n    final CoreDescriptor yd = new CoreDescriptor(cores, \"Y\", instY);\n    \n    SolrCore x = null;\n    SolrCore y = null;\n    try {\n      x = cores.create(xd);\n      y = cores.create(yd);\n      cores.register(x, false);\n      cores.register(y, false);\n      \n      assertEquals(\"cores not added?\", 3, cores.getCoreNames().size());\n      \n      final File twoXml = new File(workDir, \"2.solr.xml\");\n\n      cores.persistFile(twoXml);\n\n      assertXmlFile(twoXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir\n              + \"']\", \"/solr/cores/core[@name='X' and @instanceDir='\" + instDir\n              + \"' and @dataDir='\" + dataX + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"3=count(/solr/cores/core)\");\n\n      // Test for saving implicit properties, we should not do this.\n      assertXmlFile(twoXml, \"/solr/cores/core[@name='X' and not(@solr.core.instanceDir) and not (@solr.core.configName)]\");\n\n      // delete a core, check persistence again\n      assertNotNull(\"removing X returned null\", cores.remove(\"X\"));\n      \n      final File threeXml = new File(workDir, \"3.solr.xml\");\n      cores.persistFile(threeXml);\n      \n      assertXmlFile(threeXml, \"/solr[@persistent='true']\",\n          \"/solr/cores[@defaultCoreName='collection1']\",\n          \"/solr/cores/core[@name='collection1' and @instanceDir='\" + instDir + \"']\",\n          \"/solr/cores/core[@name='Y' and @instanceDir='\" + instY + \"']\",\n          \"2=count(/solr/cores/core)\");\n      \n      // sanity check that persisting w/o changes has no changes\n      \n      final File fourXml = new File(workDir, \"4.solr.xml\");\n      cores.persistFile(fourXml);\n      \n      assertTrue(\"3 and 4 should be identical files\",\n          FileUtils.contentEquals(threeXml, fourXml));\n      \n    } finally {\n      // y is closed by the container, but\n      // x has been removed from the container\n      if (x != null) {\n        try {\n          x.close();\n        } catch (Exception e) {\n          log.error(\"\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8b6f42dee5a60f46a3fdf3ab93b39aefb356e245":["c33399cc2618223f11ba493f9a3a2026fe05b579"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b374d78db8148ec6796fdf37148b33897ab40a8c","c33399cc2618223f11ba493f9a3a2026fe05b579"],"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"7116474e2e390259937401cf928323e0cbc75e60":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"c33399cc2618223f11ba493f9a3a2026fe05b579":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"354983dcdf70c800bf2573d10b54a7391b1dc167":["d264f386d864b5751209060e8886ca9845f70469"],"3d029af900de120a30841f8ee3f2ac09e0382f9d":["fa9fef69a29d64a132d51b8bca52175417bdb0c1"],"d264f386d864b5751209060e8886ca9845f70469":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["8b6f42dee5a60f46a3fdf3ab93b39aefb356e245"],"fa9fef69a29d64a132d51b8bca52175417bdb0c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b374d78db8148ec6796fdf37148b33897ab40a8c":["3d029af900de120a30841f8ee3f2ac09e0382f9d"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["7116474e2e390259937401cf928323e0cbc75e60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"]},"commit2Childs":{"8b6f42dee5a60f46a3fdf3ab93b39aefb356e245":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d264f386d864b5751209060e8886ca9845f70469"],"7116474e2e390259937401cf928323e0cbc75e60":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c33399cc2618223f11ba493f9a3a2026fe05b579":["8b6f42dee5a60f46a3fdf3ab93b39aefb356e245","d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"354983dcdf70c800bf2573d10b54a7391b1dc167":["7116474e2e390259937401cf928323e0cbc75e60"],"3d029af900de120a30841f8ee3f2ac09e0382f9d":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"d264f386d864b5751209060e8886ca9845f70469":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"fa9fef69a29d64a132d51b8bca52175417bdb0c1":["3d029af900de120a30841f8ee3f2ac09e0382f9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa9fef69a29d64a132d51b8bca52175417bdb0c1"],"b374d78db8148ec6796fdf37148b33897ab40a8c":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c33399cc2618223f11ba493f9a3a2026fe05b579"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}