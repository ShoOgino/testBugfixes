{"path":"lucene/core/src/test/org/apache/lucene/index/TestParallelAtomicReader#testQueries().mjava","commits":[{"id":"6e09a3a223be07d75777515a717312813221fe58","date":1328908385,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelAtomicReader#testQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelReader#testQueries().mjava","sourceNew":"  public void testQueries() throws Exception {\n    single = single(random);\n    parallel = parallel(random);\n    \n    queryTest(new TermQuery(new Term(\"f1\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f1\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f2\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f2\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f3\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f3\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f4\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f4\", \"v2\")));\n\n    BooleanQuery bq1 = new BooleanQuery();\n    bq1.add(new TermQuery(new Term(\"f1\", \"v1\")), Occur.MUST);\n    bq1.add(new TermQuery(new Term(\"f4\", \"v1\")), Occur.MUST);\n    queryTest(bq1);\n    \n    single.getIndexReader().close(); single = null;\n    parallel.getIndexReader().close(); parallel = null;\n    dir.close(); dir = null;\n    dir1.close(); dir1 = null;\n    dir2.close(); dir2 = null;\n  }\n\n","sourceOld":"  public void testQueries() throws Exception {\n    queryTest(new TermQuery(new Term(\"f1\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f1\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f2\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f2\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f3\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f3\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f4\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f4\", \"v2\")));\n\n    BooleanQuery bq1 = new BooleanQuery();\n    bq1.add(new TermQuery(new Term(\"f1\", \"v1\")), Occur.MUST);\n    bq1.add(new TermQuery(new Term(\"f4\", \"v1\")), Occur.MUST);\n    queryTest(bq1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelAtomicReader#testQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelAtomicReader#testQueries().mjava","sourceNew":"  public void testQueries() throws Exception {\n    single = single(random());\n    parallel = parallel(random());\n    \n    queryTest(new TermQuery(new Term(\"f1\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f1\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f2\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f2\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f3\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f3\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f4\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f4\", \"v2\")));\n\n    BooleanQuery bq1 = new BooleanQuery();\n    bq1.add(new TermQuery(new Term(\"f1\", \"v1\")), Occur.MUST);\n    bq1.add(new TermQuery(new Term(\"f4\", \"v1\")), Occur.MUST);\n    queryTest(bq1);\n    \n    single.getIndexReader().close(); single = null;\n    parallel.getIndexReader().close(); parallel = null;\n    dir.close(); dir = null;\n    dir1.close(); dir1 = null;\n    dir2.close(); dir2 = null;\n  }\n\n","sourceOld":"  public void testQueries() throws Exception {\n    single = single(random);\n    parallel = parallel(random);\n    \n    queryTest(new TermQuery(new Term(\"f1\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f1\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f2\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f2\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f3\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f3\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f4\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f4\", \"v2\")));\n\n    BooleanQuery bq1 = new BooleanQuery();\n    bq1.add(new TermQuery(new Term(\"f1\", \"v1\")), Occur.MUST);\n    bq1.add(new TermQuery(new Term(\"f4\", \"v1\")), Occur.MUST);\n    queryTest(bq1);\n    \n    single.getIndexReader().close(); single = null;\n    parallel.getIndexReader().close(); parallel = null;\n    dir.close(); dir = null;\n    dir1.close(); dir1 = null;\n    dir2.close(); dir2 = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9644a32526f2e2ae87543b00e8be543aa25f29c","date":1411548458,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelLeafReader#testQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelAtomicReader#testQueries().mjava","sourceNew":"  public void testQueries() throws Exception {\n    single = single(random());\n    parallel = parallel(random());\n    \n    queryTest(new TermQuery(new Term(\"f1\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f1\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f2\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f2\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f3\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f3\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f4\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f4\", \"v2\")));\n\n    BooleanQuery bq1 = new BooleanQuery();\n    bq1.add(new TermQuery(new Term(\"f1\", \"v1\")), Occur.MUST);\n    bq1.add(new TermQuery(new Term(\"f4\", \"v1\")), Occur.MUST);\n    queryTest(bq1);\n    \n    single.getIndexReader().close(); single = null;\n    parallel.getIndexReader().close(); parallel = null;\n    dir.close(); dir = null;\n    dir1.close(); dir1 = null;\n    dir2.close(); dir2 = null;\n  }\n\n","sourceOld":"  public void testQueries() throws Exception {\n    single = single(random());\n    parallel = parallel(random());\n    \n    queryTest(new TermQuery(new Term(\"f1\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f1\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f2\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f2\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f3\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f3\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f4\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f4\", \"v2\")));\n\n    BooleanQuery bq1 = new BooleanQuery();\n    bq1.add(new TermQuery(new Term(\"f1\", \"v1\")), Occur.MUST);\n    bq1.add(new TermQuery(new Term(\"f4\", \"v1\")), Occur.MUST);\n    queryTest(bq1);\n    \n    single.getIndexReader().close(); single = null;\n    parallel.getIndexReader().close(); parallel = null;\n    dir.close(); dir = null;\n    dir1.close(); dir1 = null;\n    dir2.close(); dir2 = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c9644a32526f2e2ae87543b00e8be543aa25f29c":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6e09a3a223be07d75777515a717312813221fe58"],"6e09a3a223be07d75777515a717312813221fe58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9644a32526f2e2ae87543b00e8be543aa25f29c"]},"commit2Childs":{"c9644a32526f2e2ae87543b00e8be543aa25f29c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6e09a3a223be07d75777515a717312813221fe58"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["c9644a32526f2e2ae87543b00e8be543aa25f29c"],"6e09a3a223be07d75777515a717312813221fe58":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}