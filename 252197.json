{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","commits":[{"id":"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e","date":1358793943,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == Lucene42DocValuesConsumer.NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.tableized = meta.readByte() != 0;\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVInt();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == Lucene41DocValuesConsumer.NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.tableized = meta.readByte() != 0;\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == Lucene41DocValuesConsumer.BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == Lucene41DocValuesConsumer.FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVInt();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e76d3450662dab47d54e3f462c7b3eba4e38b9ac","date":1358866496,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == Lucene42DocValuesConsumer.NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.tableized = meta.readByte() != 0;\n        entry.packedIntsVersion = meta.readVInt();\n        entry.count = meta.readVInt();\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.count = meta.readVInt();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVInt();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == Lucene42DocValuesConsumer.NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.tableized = meta.readByte() != 0;\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVInt();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ce33b902e857f52067011e1a4f4bd4a42627b139","date":1359144094,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == Lucene42DocValuesConsumer.NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.tableized = meta.readByte() != 0;\n        entry.packedIntsVersion = meta.readVInt();\n        entry.count = meta.readVInt();\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVInt();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == Lucene42DocValuesConsumer.NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.tableized = meta.readByte() != 0;\n        entry.packedIntsVersion = meta.readVInt();\n        entry.count = meta.readVInt();\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.count = meta.readVInt();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVInt();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69f2d92e64f751f5af8d5559f6efa01239d50237","date":1359144355,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == Lucene42DocValuesConsumer.NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.tableized = meta.readByte() != 0;\n        entry.packedIntsVersion = meta.readVInt();\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVInt();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == Lucene42DocValuesConsumer.NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.tableized = meta.readByte() != 0;\n        entry.packedIntsVersion = meta.readVInt();\n        entry.count = meta.readVInt();\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVInt();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6fca07cac66b15729e7870bc0896a88560270b5","date":1360097580,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == Lucene42DocValuesConsumer.NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        if (entry.format != Lucene42DocValuesConsumer.UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVInt();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == Lucene42DocValuesConsumer.NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.tableized = meta.readByte() != 0;\n        entry.packedIntsVersion = meta.readVInt();\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVInt();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"/dev/null","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == Lucene42DocValuesConsumer.NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        if (entry.format != Lucene42DocValuesConsumer.UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVInt();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f366ce28775e2b8ea4e06355009471328711666d","date":1360551293,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == Lucene42DocValuesConsumer.NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        if (entry.format != Lucene42DocValuesConsumer.UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == Lucene42DocValuesConsumer.NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        if (entry.format != Lucene42DocValuesConsumer.UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVInt();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == Lucene42DocValuesConsumer.NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        if (entry.format != Lucene42DocValuesConsumer.UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == Lucene42DocValuesConsumer.NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        if (entry.format != Lucene42DocValuesConsumer.UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVInt();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bf317f41f8247db62a955791ebb8a5ab3e7c8d47","date":1366724337,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == Lucene42DocValuesConsumer.NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case GCD_COMPRESSED:\n          case UNCOMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        if (entry.format != Lucene42DocValuesConsumer.UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == Lucene42DocValuesConsumer.NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        if (entry.format != Lucene42DocValuesConsumer.UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09a42395865f791464f0bd5f6118a4abbfa3eb8a","date":1376920143,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case GCD_COMPRESSED:\n          case UNCOMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        if (entry.format != UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == Lucene42DocValuesConsumer.NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case GCD_COMPRESSED:\n          case UNCOMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        if (entry.format != Lucene42DocValuesConsumer.UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case GCD_COMPRESSED:\n          case UNCOMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        if (entry.format != UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == Lucene42DocValuesConsumer.NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case GCD_COMPRESSED:\n          case UNCOMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        if (entry.format != Lucene42DocValuesConsumer.UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case GCD_COMPRESSED:\n          case UNCOMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        if (entry.format != UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == Lucene42DocValuesConsumer.NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case GCD_COMPRESSED:\n          case UNCOMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        if (entry.format != Lucene42DocValuesConsumer.UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == Lucene42DocValuesConsumer.FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb13dd414f655a70c821300dea007cb565533e03","date":1397838390,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      // check should be: infos.fieldInfo(fieldNumber) != null, which incorporates negative check\n      // but docvalues updates are currently buggy here (loading extra stuff, etc): LUCENE-5616\n      if (fieldNumber < 0) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \", input=\" + meta);\n      }\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case GCD_COMPRESSED:\n          case UNCOMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        if (entry.format != UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case GCD_COMPRESSED:\n          case UNCOMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        if (entry.format != UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":["0567bdc5c86c94ced64201187cfcef2417d76dda"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0567bdc5c86c94ced64201187cfcef2417d76dda","date":1400678298,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      if (infos.fieldInfo(fieldNumber) == null) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case GCD_COMPRESSED:\n          case UNCOMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        if (entry.format != UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      // check should be: infos.fieldInfo(fieldNumber) != null, which incorporates negative check\n      // but docvalues updates are currently buggy here (loading extra stuff, etc): LUCENE-5616\n      if (fieldNumber < 0) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \", input=\" + meta);\n      }\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case GCD_COMPRESSED:\n          case UNCOMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        if (entry.format != UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":["fb13dd414f655a70c821300dea007cb565533e03"],"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a656b32c3aa151037a8c52e9b134acc3cbf482bc","date":1400688195,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      if (infos.fieldInfo(fieldNumber) == null) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case GCD_COMPRESSED:\n          case UNCOMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        if (entry.format != UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      // check should be: infos.fieldInfo(fieldNumber) != null, which incorporates negative check\n      // but docvalues updates are currently buggy here (loading extra stuff, etc): LUCENE-5616\n      if (fieldNumber < 0) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \", input=\" + meta);\n      }\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case GCD_COMPRESSED:\n          case UNCOMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        if (entry.format != UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      if (infos.fieldInfo(fieldNumber) == null) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case GCD_COMPRESSED:\n          case UNCOMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        if (entry.format != UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      // check should be: infos.fieldInfo(fieldNumber) != null, which incorporates negative check\n      // but docvalues updates are currently buggy here (loading extra stuff, etc): LUCENE-5616\n      if (fieldNumber < 0) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \", input=\" + meta);\n      }\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case GCD_COMPRESSED:\n          case UNCOMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        if (entry.format != UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      if (infos.fieldInfo(fieldNumber) == null) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case GCD_COMPRESSED:\n          case UNCOMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        if (entry.format != UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      if (infos.fieldInfo(fieldNumber) == null) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case GCD_COMPRESSED:\n          case UNCOMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        if (entry.format != UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      if (infos.fieldInfo(fieldNumber) == null) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case GCD_COMPRESSED:\n          case UNCOMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        if (entry.format != UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      if (infos.fieldInfo(fieldNumber) == null) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case GCD_COMPRESSED:\n          case UNCOMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        if (entry.format != UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"fb13dd414f655a70c821300dea007cb565533e03":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e76d3450662dab47d54e3f462c7b3eba4e38b9ac":["3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"0567bdc5c86c94ced64201187cfcef2417d76dda":["fb13dd414f655a70c821300dea007cb565533e03"],"bf317f41f8247db62a955791ebb8a5ab3e7c8d47":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47","09a42395865f791464f0bd5f6118a4abbfa3eb8a"],"b7605579001505896d48b07160075a5c8b8e128e":["fb13dd414f655a70c821300dea007cb565533e03","0567bdc5c86c94ced64201187cfcef2417d76dda"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["d4d69c535930b5cce125cff868d40f6373dc27d4","f366ce28775e2b8ea4e06355009471328711666d"],"09a42395865f791464f0bd5f6118a4abbfa3eb8a":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["0567bdc5c86c94ced64201187cfcef2417d76dda","4cc45c615dbb82bf79d5f9550286098367874fbf"],"69f2d92e64f751f5af8d5559f6efa01239d50237":["ce33b902e857f52067011e1a4f4bd4a42627b139"],"c6fca07cac66b15729e7870bc0896a88560270b5":["69f2d92e64f751f5af8d5559f6efa01239d50237"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c6fca07cac66b15729e7870bc0896a88560270b5"],"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ce33b902e857f52067011e1a4f4bd4a42627b139":["e76d3450662dab47d54e3f462c7b3eba4e38b9ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["0567bdc5c86c94ced64201187cfcef2417d76dda"],"a656b32c3aa151037a8c52e9b134acc3cbf482bc":["fb13dd414f655a70c821300dea007cb565533e03","0567bdc5c86c94ced64201187cfcef2417d76dda"],"f366ce28775e2b8ea4e06355009471328711666d":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"]},"commit2Childs":{"fb13dd414f655a70c821300dea007cb565533e03":["0567bdc5c86c94ced64201187cfcef2417d76dda","b7605579001505896d48b07160075a5c8b8e128e","a656b32c3aa151037a8c52e9b134acc3cbf482bc"],"e76d3450662dab47d54e3f462c7b3eba4e38b9ac":["ce33b902e857f52067011e1a4f4bd4a42627b139"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"0567bdc5c86c94ced64201187cfcef2417d76dda":["b7605579001505896d48b07160075a5c8b8e128e","402ad3ddc9da7b70da1b167667a60ece6a1381fb","4cc45c615dbb82bf79d5f9550286098367874fbf","a656b32c3aa151037a8c52e9b134acc3cbf482bc"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["fb13dd414f655a70c821300dea007cb565533e03","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"bf317f41f8247db62a955791ebb8a5ab3e7c8d47":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","09a42395865f791464f0bd5f6118a4abbfa3eb8a"],"b7605579001505896d48b07160075a5c8b8e128e":[],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47"],"09a42395865f791464f0bd5f6118a4abbfa3eb8a":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"69f2d92e64f751f5af8d5559f6efa01239d50237":["c6fca07cac66b15729e7870bc0896a88560270b5"],"c6fca07cac66b15729e7870bc0896a88560270b5":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":["e76d3450662dab47d54e3f462c7b3eba4e38b9ac"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ddbb72a33557d2b5bc22ee95daf3281c43560502","f366ce28775e2b8ea4e06355009471328711666d"],"ce33b902e857f52067011e1a4f4bd4a42627b139":["69f2d92e64f751f5af8d5559f6efa01239d50237"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e"],"a656b32c3aa151037a8c52e9b134acc3cbf482bc":[],"f366ce28775e2b8ea4e06355009471328711666d":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","b7605579001505896d48b07160075a5c8b8e128e","a656b32c3aa151037a8c52e9b134acc3cbf482bc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}