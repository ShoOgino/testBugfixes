{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      TermEnum tis = reader.terms();\n      while (tis.next()) {\n        out.print(tis.term());\n        out.println(\" DF=\" + tis.docFreq());\n\n        TermPositions positions = reader.termPositions(tis.term());\n        try {\n          while (positions.next()) {\n            out.print(\" doc=\" + positions.doc());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        } finally {\n          positions.close();\n        }\n      }\n      tis.close();\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      TermEnum tis = reader.terms();\n      while (tis.next()) {\n        out.print(tis.term());\n        out.println(\" DF=\" + tis.docFreq());\n\n        TermPositions positions = reader.termPositions(tis.term());\n        try {\n          while (positions.next()) {\n            out.print(\" doc=\" + positions.doc());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        } finally {\n          positions.close();\n        }\n      }\n      tis.close();\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":null,"sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = SegmentReader.get(true, si, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      TermEnum tis = reader.terms();\n      while (tis.next()) {\n        out.print(tis.term());\n        out.println(\" DF=\" + tis.docFreq());\n\n        TermPositions positions = reader.termPositions(tis.term());\n        try {\n          while (positions.next()) {\n            out.print(\" doc=\" + positions.doc());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        } finally {\n          positions.close();\n        }\n      }\n      tis.close();\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}