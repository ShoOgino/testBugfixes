{"path":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#newSortingMergePolicy(Sorter).mjava","commits":[{"id":"66b61ab77ab36893d701d693f1b6df2a383bb7b5","date":1364405461,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#newSortingMergePolicy(Sorter).mjava","pathOld":"/dev/null","sourceNew":"  private static MergePolicy newSortingMergePolicy(Sorter sorter) {\n    // create a MP with a low merge factor so that many merges happen\n    MergePolicy mp;\n    if (random().nextBoolean()) {\n      TieredMergePolicy tmp = newTieredMergePolicy(random());\n      final int numSegs = _TestUtil.nextInt(random(), 3, 5);\n      tmp.setSegmentsPerTier(numSegs);\n      tmp.setMaxMergeAtOnce(_TestUtil.nextInt(random(), 2, numSegs));\n      mp = tmp;\n    } else {\n      LogMergePolicy lmp = newLogMergePolicy(random());\n      lmp.setMergeFactor(_TestUtil.nextInt(random(), 3, 5));\n      mp = lmp;\n    }\n    // wrap it with a sorting mp\n    return new SortingMergePolicy(mp, sorter);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b31300b5ffd92c482faabff5910228b4cdaa7dde","b31300b5ffd92c482faabff5910228b4cdaa7dde","b31300b5ffd92c482faabff5910228b4cdaa7dde"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d1c249f01722fe2de6d60de2f0aade417fbb638","date":1365517193,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#newSortingMergePolicy(Sorter).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#newSortingMergePolicy(Sorter).mjava","sourceNew":"  static MergePolicy newSortingMergePolicy(Sorter sorter) {\n    // create a MP with a low merge factor so that many merges happen\n    MergePolicy mp;\n    if (random().nextBoolean()) {\n      TieredMergePolicy tmp = newTieredMergePolicy(random());\n      final int numSegs = _TestUtil.nextInt(random(), 3, 5);\n      tmp.setSegmentsPerTier(numSegs);\n      tmp.setMaxMergeAtOnce(_TestUtil.nextInt(random(), 2, numSegs));\n      mp = tmp;\n    } else {\n      LogMergePolicy lmp = newLogMergePolicy(random());\n      lmp.setMergeFactor(_TestUtil.nextInt(random(), 3, 5));\n      mp = lmp;\n    }\n    // wrap it with a sorting mp\n    return new SortingMergePolicy(mp, sorter);\n  }\n\n","sourceOld":"  private static MergePolicy newSortingMergePolicy(Sorter sorter) {\n    // create a MP with a low merge factor so that many merges happen\n    MergePolicy mp;\n    if (random().nextBoolean()) {\n      TieredMergePolicy tmp = newTieredMergePolicy(random());\n      final int numSegs = _TestUtil.nextInt(random(), 3, 5);\n      tmp.setSegmentsPerTier(numSegs);\n      tmp.setMaxMergeAtOnce(_TestUtil.nextInt(random(), 2, numSegs));\n      mp = tmp;\n    } else {\n      LogMergePolicy lmp = newLogMergePolicy(random());\n      lmp.setMergeFactor(_TestUtil.nextInt(random(), 3, 5));\n      mp = lmp;\n    }\n    // wrap it with a sorting mp\n    return new SortingMergePolicy(mp, sorter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#newSortingMergePolicy(Sorter).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#newSortingMergePolicy(Sorter).mjava","sourceNew":"  static MergePolicy newSortingMergePolicy(Sorter sorter) {\n    // create a MP with a low merge factor so that many merges happen\n    MergePolicy mp;\n    if (random().nextBoolean()) {\n      TieredMergePolicy tmp = newTieredMergePolicy(random());\n      final int numSegs = TestUtil.nextInt(random(), 3, 5);\n      tmp.setSegmentsPerTier(numSegs);\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(random(), 2, numSegs));\n      mp = tmp;\n    } else {\n      LogMergePolicy lmp = newLogMergePolicy(random());\n      lmp.setMergeFactor(TestUtil.nextInt(random(), 3, 5));\n      mp = lmp;\n    }\n    // wrap it with a sorting mp\n    return new SortingMergePolicy(mp, sorter);\n  }\n\n","sourceOld":"  static MergePolicy newSortingMergePolicy(Sorter sorter) {\n    // create a MP with a low merge factor so that many merges happen\n    MergePolicy mp;\n    if (random().nextBoolean()) {\n      TieredMergePolicy tmp = newTieredMergePolicy(random());\n      final int numSegs = _TestUtil.nextInt(random(), 3, 5);\n      tmp.setSegmentsPerTier(numSegs);\n      tmp.setMaxMergeAtOnce(_TestUtil.nextInt(random(), 2, numSegs));\n      mp = tmp;\n    } else {\n      LogMergePolicy lmp = newLogMergePolicy(random());\n      lmp.setMergeFactor(_TestUtil.nextInt(random(), 3, 5));\n      mp = lmp;\n    }\n    // wrap it with a sorting mp\n    return new SortingMergePolicy(mp, sorter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b060a9c887ff2c6f4280953afc6fb6000934dae5","date":1394119540,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#newSortingMergePolicy(Sort).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#newSortingMergePolicy(Sorter).mjava","sourceNew":"  static MergePolicy newSortingMergePolicy(Sort sort) {\n    // create a MP with a low merge factor so that many merges happen\n    MergePolicy mp;\n    if (random().nextBoolean()) {\n      TieredMergePolicy tmp = newTieredMergePolicy(random());\n      final int numSegs = TestUtil.nextInt(random(), 3, 5);\n      tmp.setSegmentsPerTier(numSegs);\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(random(), 2, numSegs));\n      mp = tmp;\n    } else {\n      LogMergePolicy lmp = newLogMergePolicy(random());\n      lmp.setMergeFactor(TestUtil.nextInt(random(), 3, 5));\n      mp = lmp;\n    }\n    // wrap it with a sorting mp\n    return new SortingMergePolicy(mp, sort);\n  }\n\n","sourceOld":"  static MergePolicy newSortingMergePolicy(Sorter sorter) {\n    // create a MP with a low merge factor so that many merges happen\n    MergePolicy mp;\n    if (random().nextBoolean()) {\n      TieredMergePolicy tmp = newTieredMergePolicy(random());\n      final int numSegs = TestUtil.nextInt(random(), 3, 5);\n      tmp.setSegmentsPerTier(numSegs);\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(random(), 2, numSegs));\n      mp = tmp;\n    } else {\n      LogMergePolicy lmp = newLogMergePolicy(random());\n      lmp.setMergeFactor(TestUtil.nextInt(random(), 3, 5));\n      mp = lmp;\n    }\n    // wrap it with a sorting mp\n    return new SortingMergePolicy(mp, sorter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4637747f71df783fc2014ef1f1e0418466e3bed6","date":1394196311,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#newSortingMergePolicy(Sort).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#newSortingMergePolicy(Sorter).mjava","sourceNew":"  static MergePolicy newSortingMergePolicy(Sort sort) {\n    // create a MP with a low merge factor so that many merges happen\n    MergePolicy mp;\n    if (random().nextBoolean()) {\n      TieredMergePolicy tmp = newTieredMergePolicy(random());\n      final int numSegs = TestUtil.nextInt(random(), 3, 5);\n      tmp.setSegmentsPerTier(numSegs);\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(random(), 2, numSegs));\n      mp = tmp;\n    } else {\n      LogMergePolicy lmp = newLogMergePolicy(random());\n      lmp.setMergeFactor(TestUtil.nextInt(random(), 3, 5));\n      mp = lmp;\n    }\n    // wrap it with a sorting mp\n    return new SortingMergePolicy(mp, sort);\n  }\n\n","sourceOld":"  static MergePolicy newSortingMergePolicy(Sorter sorter) {\n    // create a MP with a low merge factor so that many merges happen\n    MergePolicy mp;\n    if (random().nextBoolean()) {\n      TieredMergePolicy tmp = newTieredMergePolicy(random());\n      final int numSegs = TestUtil.nextInt(random(), 3, 5);\n      tmp.setSegmentsPerTier(numSegs);\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(random(), 2, numSegs));\n      mp = tmp;\n    } else {\n      LogMergePolicy lmp = newLogMergePolicy(random());\n      lmp.setMergeFactor(TestUtil.nextInt(random(), 3, 5));\n      mp = lmp;\n    }\n    // wrap it with a sorting mp\n    return new SortingMergePolicy(mp, sorter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#newSortingMergePolicy(Sort).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#newSortingMergePolicy(Sorter).mjava","sourceNew":"  static MergePolicy newSortingMergePolicy(Sort sort) {\n    // create a MP with a low merge factor so that many merges happen\n    MergePolicy mp;\n    if (random().nextBoolean()) {\n      TieredMergePolicy tmp = newTieredMergePolicy(random());\n      final int numSegs = TestUtil.nextInt(random(), 3, 5);\n      tmp.setSegmentsPerTier(numSegs);\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(random(), 2, numSegs));\n      mp = tmp;\n    } else {\n      LogMergePolicy lmp = newLogMergePolicy(random());\n      lmp.setMergeFactor(TestUtil.nextInt(random(), 3, 5));\n      mp = lmp;\n    }\n    // wrap it with a sorting mp\n    return new SortingMergePolicy(mp, sort);\n  }\n\n","sourceOld":"  static MergePolicy newSortingMergePolicy(Sorter sorter) {\n    // create a MP with a low merge factor so that many merges happen\n    MergePolicy mp;\n    if (random().nextBoolean()) {\n      TieredMergePolicy tmp = newTieredMergePolicy(random());\n      final int numSegs = TestUtil.nextInt(random(), 3, 5);\n      tmp.setSegmentsPerTier(numSegs);\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(random(), 2, numSegs));\n      mp = tmp;\n    } else {\n      LogMergePolicy lmp = newLogMergePolicy(random());\n      lmp.setMergeFactor(TestUtil.nextInt(random(), 3, 5));\n      mp = lmp;\n    }\n    // wrap it with a sorting mp\n    return new SortingMergePolicy(mp, sorter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":["6613659748fe4411a7dcf85266e55db1f95f7315","4637747f71df783fc2014ef1f1e0418466e3bed6"],"b060a9c887ff2c6f4280953afc6fb6000934dae5":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["4d1c249f01722fe2de6d60de2f0aade417fbb638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d1c249f01722fe2de6d60de2f0aade417fbb638":["66b61ab77ab36893d701d693f1b6df2a383bb7b5"],"4637747f71df783fc2014ef1f1e0418466e3bed6":["6613659748fe4411a7dcf85266e55db1f95f7315","b060a9c887ff2c6f4280953afc6fb6000934dae5"],"66b61ab77ab36893d701d693f1b6df2a383bb7b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4637747f71df783fc2014ef1f1e0418466e3bed6"]},"commit2Childs":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"b060a9c887ff2c6f4280953afc6fb6000934dae5":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"6613659748fe4411a7dcf85266e55db1f95f7315":["96ea64d994d340044e0d57aeb6a5871539d10ca5","b060a9c887ff2c6f4280953afc6fb6000934dae5","4637747f71df783fc2014ef1f1e0418466e3bed6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["66b61ab77ab36893d701d693f1b6df2a383bb7b5"],"4d1c249f01722fe2de6d60de2f0aade417fbb638":["6613659748fe4411a7dcf85266e55db1f95f7315"],"4637747f71df783fc2014ef1f1e0418466e3bed6":["96ea64d994d340044e0d57aeb6a5871539d10ca5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"66b61ab77ab36893d701d693f1b6df2a383bb7b5":["4d1c249f01722fe2de6d60de2f0aade417fbb638"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}