{"path":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#invokeBulkAddCall(int,ArrayList[String]).mjava","commits":[{"id":"eeeea2295d6355a29e259130a5c48ace73022d7c","date":1426569216,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#invokeBulkAddCall(int,ArrayList[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#invokeBulkCall(int,ArrayList[String]).mjava","sourceNew":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\",dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    //get another node\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(format(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(format(\"dynamic field {0} not created\", dynamicFldName));\n        \n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(format(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(format(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n\n","sourceOld":"  private void invokeBulkCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                        'type':'string',\\n\" +\n        \"                        'stored':true,\\n\" +\n        \"                        'indexed':true\\n\" +\n        \"                        },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                        'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                        },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                        'sortMissingLast':'true'\\n\" +\n        \"                        }\\n\" +\n        \"\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    payload = payload.replace(\"replaceFieldA\", aField);\n\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"dynamicFieldLol\",\"lol\"+seed);\n\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\",dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if(errors!= null){\n      errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    //get another node\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      boolean success = false;\n      long maxTimeoutMillis = 100000;\n      while (!success\n          && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(format(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(format(\"dynamic field {0} not created\", dynamicFldName));\n        \n        List l = getCopyFields(harness, \"a1\");\n        if (!checkCopyField(l, aField, dynamicCopyFldDest)) errmessages\n            .add(format(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, \"mystr\", \"fieldTypes\");\n        if (m == null) errmessages.add(format(\"new type {}  not created\", newFieldTypeName));\n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if(!errmessages.isEmpty()){\n      errs.addAll(errmessages);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bdb19206b4aeab66b9fb393c53969f44bdd48be","date":1426629125,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#invokeBulkAddCall(int,ArrayList[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#invokeBulkAddCall(int,ArrayList[String]).mjava","sourceNew":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\",dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    //get another node\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} not created\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n\n","sourceOld":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\",dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    //get another node\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(format(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(format(\"dynamic field {0} not created\", dynamicFldName));\n        \n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(format(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(format(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7a7509102c58cf4f57c425a621aaa20575804b2","date":1427264724,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#invokeBulkAddCall(int,ArrayList[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#invokeBulkAddCall(int,ArrayList[String]).mjava","sourceNew":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\", dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    //get another node\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} not created\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n\n","sourceOld":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\",dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    //get another node\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} not created\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#invokeBulkAddCall(int,ArrayList[String]).mjava","pathOld":"/dev/null","sourceNew":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\", dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    //get another node\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} not created\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#invokeBulkAddCall(int,ArrayList[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#invokeBulkAddCall(int,ArrayList[String]).mjava","sourceNew":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\", dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    //get another node\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} not created\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n\n","sourceOld":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\", dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    //get another node\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} not created\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#invokeBulkAddCall(int,ArrayList[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#invokeBulkAddCall(int,ArrayList[String]).mjava","sourceNew":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\", dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    //get another node\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} not created\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n\n","sourceOld":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\", dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    //get another node\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} not created\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#invokeBulkAddCall(int,ArrayList[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#invokeBulkAddCall(int,ArrayList[String]).mjava","sourceNew":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\", dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    //get another node\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} not created\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n\n","sourceOld":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\", dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    //get another node\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} not created\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#invokeBulkAddCall(int,ArrayList[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#invokeBulkAddCall(int,ArrayList[String]).mjava","sourceNew":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\", dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    //get another node\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} not created\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n\n","sourceOld":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\", dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    //get another node\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} not created\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0853c291617e0f9d0474b720bf609eb350e9225c","date":1514464265,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#invokeBulkAddCall(int,ArrayList[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#invokeBulkAddCall(int,ArrayList[String]).mjava","sourceNew":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\", dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = randomRestTestHarness(r);\n    String response = publisher.post(\"/schema\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    //get another node\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = randomRestTestHarness(r);\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} not created\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n\n","sourceOld":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\", dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    //get another node\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} not created\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#invokeBulkAddCall(int,ArrayList[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#invokeBulkAddCall(int,ArrayList[String]).mjava","sourceNew":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\", dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = randomRestTestHarness(r);\n    String response = publisher.post(\"/schema\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) Utils.fromJSONString(response);\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    //get another node\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = randomRestTestHarness(r);\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} not created\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n\n","sourceOld":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\", dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = randomRestTestHarness(r);\n    String response = publisher.post(\"/schema\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    //get another node\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = randomRestTestHarness(r);\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} not created\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#invokeBulkAddCall(int,ArrayList[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#invokeBulkAddCall(int,ArrayList[String]).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\", dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = randomRestTestHarness(r);\n    String response = publisher.post(\"/schema\", SolrTestCaseJ4.json(payload));\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = (Map) Utils.fromJSONString(response);\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    //get another node\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = randomRestTestHarness(r);\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        @SuppressWarnings({\"rawtypes\"})\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} not created\", dynamicFldName));\n\n        @SuppressWarnings({\"rawtypes\"})\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n\n","sourceOld":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\", dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = randomRestTestHarness(r);\n    String response = publisher.post(\"/schema\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) Utils.fromJSONString(response);\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(Utils.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    //get another node\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = randomRestTestHarness(r);\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"dynamic field {0} not created\", dynamicFldName));\n\n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(StrUtils.formatString(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(StrUtils.formatString(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eeeea2295d6355a29e259130a5c48ace73022d7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["b693a83132c9e45afcd564fd65a25b60ed80388b","ac1e7fa558287a811ea07634d815ee7b1c541284"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["a7a7509102c58cf4f57c425a621aaa20575804b2"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["0853c291617e0f9d0474b720bf609eb350e9225c"],"a7a7509102c58cf4f57c425a621aaa20575804b2":["9bdb19206b4aeab66b9fb393c53969f44bdd48be"],"e98520789adb1d5ad05afb4956eca0944a929688":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a7a7509102c58cf4f57c425a621aaa20575804b2"],"a52341299179de5479672f7cf518bf4b173f34b3":["b693a83132c9e45afcd564fd65a25b60ed80388b","ac1e7fa558287a811ea07634d815ee7b1c541284"],"0853c291617e0f9d0474b720bf609eb350e9225c":["a52341299179de5479672f7cf518bf4b173f34b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9bdb19206b4aeab66b9fb393c53969f44bdd48be":["eeeea2295d6355a29e259130a5c48ace73022d7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["b693a83132c9e45afcd564fd65a25b60ed80388b"]},"commit2Childs":{"eeeea2295d6355a29e259130a5c48ace73022d7c":["9bdb19206b4aeab66b9fb393c53969f44bdd48be"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3","ac1e7fa558287a811ea07634d815ee7b1c541284"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["e98520789adb1d5ad05afb4956eca0944a929688"],"a7a7509102c58cf4f57c425a621aaa20575804b2":["b693a83132c9e45afcd564fd65a25b60ed80388b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a52341299179de5479672f7cf518bf4b173f34b3":["0853c291617e0f9d0474b720bf609eb350e9225c"],"0853c291617e0f9d0474b720bf609eb350e9225c":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eeeea2295d6355a29e259130a5c48ace73022d7c","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"9bdb19206b4aeab66b9fb393c53969f44bdd48be":["a7a7509102c58cf4f57c425a621aaa20575804b2"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}