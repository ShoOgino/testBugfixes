{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#adjustSorts(Bucket[],FieldComparator[]).mjava","commits":[{"id":"79509167584beb75c0b777d2b701adeb1f06d885","date":1441841855,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#adjustSorts(Bucket[],FieldComparator[]).mjava","pathOld":"/dev/null","sourceNew":"  private FieldComparator[] adjustSorts(Bucket[] _buckets, FieldComparator[] _sorts) throws IOException {\n    if(_buckets.length == _sorts.length) {\n      return _sorts;\n    } else if(_sorts.length == 1) {\n      FieldComparator[] adjustedSorts = new FieldComparator[_buckets.length];\n      if (_sorts[0].getFieldName().contains(\"(\")) {\n        //Its a metric sort so apply the same sort criteria at each level.\n        for (int i = 0; i < adjustedSorts.length; i++) {\n          adjustedSorts[i] = _sorts[0];\n        }\n      } else {\n        //Its an index sort so apply an index sort at each level.\n        for (int i = 0; i < adjustedSorts.length; i++) {\n          adjustedSorts[i] = new FieldComparator(_buckets[i].toString(), _sorts[0].getOrder());\n        }\n      }\n      return adjustedSorts;\n    } else {\n      throw new IOException(\"If multiple sorts are specified there must be a sort for each bucket.\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"333d804f5abfaf34c57493306a4cb2e01e55662d","date":1447206304,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#adjustSorts(Bucket[],FieldComparator[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#adjustSorts(Bucket[],FieldComparator[]).mjava","sourceNew":"  private FieldComparator[] adjustSorts(Bucket[] _buckets, FieldComparator[] _sorts) throws IOException {\n    if(_buckets.length == _sorts.length) {\n      return _sorts;\n    } else if(_sorts.length == 1) {\n      FieldComparator[] adjustedSorts = new FieldComparator[_buckets.length];\n      if (_sorts[0].getLeftFieldName().contains(\"(\")) {\n        //Its a metric sort so apply the same sort criteria at each level.\n        for (int i = 0; i < adjustedSorts.length; i++) {\n          adjustedSorts[i] = _sorts[0];\n        }\n      } else {\n        //Its an index sort so apply an index sort at each level.\n        for (int i = 0; i < adjustedSorts.length; i++) {\n          adjustedSorts[i] = new FieldComparator(_buckets[i].toString(), _sorts[0].getOrder());\n        }\n      }\n      return adjustedSorts;\n    } else {\n      throw new IOException(\"If multiple sorts are specified there must be a sort for each bucket.\");\n    }\n  }\n\n","sourceOld":"  private FieldComparator[] adjustSorts(Bucket[] _buckets, FieldComparator[] _sorts) throws IOException {\n    if(_buckets.length == _sorts.length) {\n      return _sorts;\n    } else if(_sorts.length == 1) {\n      FieldComparator[] adjustedSorts = new FieldComparator[_buckets.length];\n      if (_sorts[0].getFieldName().contains(\"(\")) {\n        //Its a metric sort so apply the same sort criteria at each level.\n        for (int i = 0; i < adjustedSorts.length; i++) {\n          adjustedSorts[i] = _sorts[0];\n        }\n      } else {\n        //Its an index sort so apply an index sort at each level.\n        for (int i = 0; i < adjustedSorts.length; i++) {\n          adjustedSorts[i] = new FieldComparator(_buckets[i].toString(), _sorts[0].getOrder());\n        }\n      }\n      return adjustedSorts;\n    } else {\n      throw new IOException(\"If multiple sorts are specified there must be a sort for each bucket.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"333d804f5abfaf34c57493306a4cb2e01e55662d":["79509167584beb75c0b777d2b701adeb1f06d885"],"79509167584beb75c0b777d2b701adeb1f06d885":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["333d804f5abfaf34c57493306a4cb2e01e55662d"]},"commit2Childs":{"333d804f5abfaf34c57493306a4cb2e01e55662d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"79509167584beb75c0b777d2b701adeb1f06d885":["333d804f5abfaf34c57493306a4cb2e01e55662d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["79509167584beb75c0b777d2b701adeb1f06d885"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}