{"path":"lucene/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","commits":[{"id":"e77feb4ffb7321af961c838aeafdd07ef1f307d4","date":1305577750,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasic() throws Exception {\n    CachingCollector cc = new CachingCollector(new NoOpCollector(false), true, 1);\n    cc.setScorer(new MockScorer());\n    \n    // collect 1000 docs\n    for (int i = 0; i < 1000; i++) {\n      cc.collect(i);\n    }\n    \n    // now replay them\n    cc.replay(new Collector() {\n      int prevDocID = -1;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {}\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) throws IOException {}\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(prevDocID + 1, doc);\n        prevDocID = doc;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return false;\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6703e55954db440ab8a2bc2a615c4fa9f66b602b","date":1305691248,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(false), cacheScores, 1);\n      cc.setScorer(new MockScorer());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        cc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new Collector() {\n        int prevDocID = -1;\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {}\n\n        @Override\n        public void collect(int doc) throws IOException {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      });\n    }\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    CachingCollector cc = new CachingCollector(new NoOpCollector(false), true, 1);\n    cc.setScorer(new MockScorer());\n    \n    // collect 1000 docs\n    for (int i = 0; i < 1000; i++) {\n      cc.collect(i);\n    }\n    \n    // now replay them\n    cc.replay(new Collector() {\n      int prevDocID = -1;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {}\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) throws IOException {}\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        assertEquals(prevDocID + 1, doc);\n        prevDocID = doc;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return false;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(false), cacheScores, 1);\n      cc.setScorer(new MockScorer());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        cc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new Collector() {\n        int prevDocID = -1;\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {}\n\n        @Override\n        public void collect(int doc) throws IOException {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      });\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(false), cacheScores, 1);\n      cc.setScorer(new MockScorer());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        cc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new Collector() {\n        int prevDocID = -1;\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {}\n\n        @Override\n        public void collect(int doc) throws IOException {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      });\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c7cdfe5a1ea9db97faa404b251fa644faa73597","date":1308345959,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(false), cacheScores, 1.0);\n      cc.setScorer(new MockScorer());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        cc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new Collector() {\n        int prevDocID = -1;\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {}\n\n        @Override\n        public void collect(int doc) throws IOException {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      });\n    }\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(false), cacheScores, 1);\n      cc.setScorer(new MockScorer());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        cc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new Collector() {\n        int prevDocID = -1;\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {}\n\n        @Override\n        public void collect(int doc) throws IOException {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7edfc3f7caa7b49a18fe367692768b33b018e9db","date":1308374217,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(false), cacheScores, 1.0);\n      cc.setScorer(new MockScorer());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        cc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new Collector() {\n        int prevDocID = -1;\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {}\n\n        @Override\n        public void collect(int doc) throws IOException {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      });\n    }\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(false), cacheScores, 1);\n      cc.setScorer(new MockScorer());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        cc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new Collector() {\n        int prevDocID = -1;\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {}\n\n        @Override\n        public void collect(int doc) throws IOException {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingCollector#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(false), cacheScores, 1.0);\n      cc.setScorer(new MockScorer());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        cc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new Collector() {\n        int prevDocID = -1;\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {}\n\n        @Override\n        public void collect(int doc) throws IOException {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      });\n    }\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    for (boolean cacheScores : new boolean[] { false, true }) {\n      CachingCollector cc = CachingCollector.create(new NoOpCollector(false), cacheScores, 1.0);\n      cc.setScorer(new MockScorer());\n\n      // collect 1000 docs\n      for (int i = 0; i < 1000; i++) {\n        cc.collect(i);\n      }\n\n      // now replay them\n      cc.replay(new Collector() {\n        int prevDocID = -1;\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\n        @Override\n        public void setNextReader(AtomicReaderContext context) throws IOException {}\n\n        @Override\n        public void collect(int doc) throws IOException {\n          assertEquals(prevDocID + 1, doc);\n          prevDocID = doc;\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e77feb4ffb7321af961c838aeafdd07ef1f307d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6703e55954db440ab8a2bc2a615c4fa9f66b602b":["e77feb4ffb7321af961c838aeafdd07ef1f307d4"],"7edfc3f7caa7b49a18fe367692768b33b018e9db":["a3776dccca01c11e7046323cfad46a3b4a471233","9c7cdfe5a1ea9db97faa404b251fa644faa73597"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6703e55954db440ab8a2bc2a615c4fa9f66b602b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9c7cdfe5a1ea9db97faa404b251fa644faa73597"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6703e55954db440ab8a2bc2a615c4fa9f66b602b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9c7cdfe5a1ea9db97faa404b251fa644faa73597":["6703e55954db440ab8a2bc2a615c4fa9f66b602b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"e77feb4ffb7321af961c838aeafdd07ef1f307d4":["6703e55954db440ab8a2bc2a615c4fa9f66b602b"],"6703e55954db440ab8a2bc2a615c4fa9f66b602b":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","9c7cdfe5a1ea9db97faa404b251fa644faa73597"],"7edfc3f7caa7b49a18fe367692768b33b018e9db":[],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["7edfc3f7caa7b49a18fe367692768b33b018e9db"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e77feb4ffb7321af961c838aeafdd07ef1f307d4","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"9c7cdfe5a1ea9db97faa404b251fa644faa73597":["7edfc3f7caa7b49a18fe367692768b33b018e9db","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7edfc3f7caa7b49a18fe367692768b33b018e9db","c3a8a449466c1ff7ce2274fe73dab487256964b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}