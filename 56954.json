{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoNorthLatitudeZone#GeoNorthLatitudeZone(PlanetModel,double).mjava","commits":[{"id":"f9f97ca977ad649f14b4f60a888adef2edd7a64e","date":1432702490,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoNorthLatitudeZone#GeoNorthLatitudeZone(PlanetModel,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoNorthLatitudeZone#GeoNorthLatitudeZone(double).mjava","sourceNew":"  public GeoNorthLatitudeZone(final PlanetModel planetModel, final double bottomLat) {\n    super(planetModel);\n    this.bottomLat = bottomLat;\n\n    final double sinBottomLat = Math.sin(bottomLat);\n    this.cosBottomLat = Math.cos(bottomLat);\n\n    // Compute an interior point.  Pick one whose lat is between top and bottom.\n    final double middleLat = (Math.PI * 0.5 + bottomLat) * 0.5;\n    final double sinMiddleLat = Math.sin(middleLat);\n    this.interiorPoint = new GeoPoint(planetModel, sinMiddleLat, 0.0, Math.sqrt(1.0 - sinMiddleLat * sinMiddleLat), 1.0);\n    this.bottomBoundaryPoint = new GeoPoint(planetModel, sinBottomLat, 0.0, Math.sqrt(1.0 - sinBottomLat * sinBottomLat), 1.0);\n\n    this.bottomPlane = new SidedPlane(interiorPoint, planetModel, sinBottomLat);\n\n    this.edgePoints = new GeoPoint[]{bottomBoundaryPoint};\n  }\n\n","sourceOld":"  public GeoNorthLatitudeZone(final double bottomLat) {\n    this.bottomLat = bottomLat;\n\n    final double sinBottomLat = Math.sin(bottomLat);\n    this.cosBottomLat = Math.cos(bottomLat);\n\n    // Construct sample points, so we get our sidedness right\n    final Vector bottomPoint = new Vector(0.0, 0.0, sinBottomLat);\n\n    // Compute an interior point.  Pick one whose lat is between top and bottom.\n    final double middleLat = (Math.PI * 0.5 + bottomLat) * 0.5;\n    final double sinMiddleLat = Math.sin(middleLat);\n    this.interiorPoint = new GeoPoint(Math.sqrt(1.0 - sinMiddleLat * sinMiddleLat), 0.0, sinMiddleLat);\n    this.bottomBoundaryPoint = new GeoPoint(Math.sqrt(1.0 - sinBottomLat * sinBottomLat), 0.0, sinBottomLat);\n\n    this.bottomPlane = new SidedPlane(interiorPoint, sinBottomLat);\n\n    this.edgePoints = new GeoPoint[]{bottomBoundaryPoint};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fec06d6753751ae302c7d35866763e6cb414112d","date":1433250698,"type":1,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoNorthLatitudeZone#GeoNorthLatitudeZone(PlanetModel,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoNorthLatitudeZone#GeoNorthLatitudeZone(double).mjava","sourceNew":"  public GeoNorthLatitudeZone(final PlanetModel planetModel, final double bottomLat) {\n    super(planetModel);\n    this.bottomLat = bottomLat;\n\n    final double sinBottomLat = Math.sin(bottomLat);\n    this.cosBottomLat = Math.cos(bottomLat);\n\n    // Compute an interior point.  Pick one whose lat is between top and bottom.\n    final double middleLat = (Math.PI * 0.5 + bottomLat) * 0.5;\n    final double sinMiddleLat = Math.sin(middleLat);\n    this.interiorPoint = new GeoPoint(planetModel, sinMiddleLat, 0.0, Math.sqrt(1.0 - sinMiddleLat * sinMiddleLat), 1.0);\n    this.bottomBoundaryPoint = new GeoPoint(planetModel, sinBottomLat, 0.0, Math.sqrt(1.0 - sinBottomLat * sinBottomLat), 1.0);\n\n    this.bottomPlane = new SidedPlane(interiorPoint, planetModel, sinBottomLat);\n\n    this.edgePoints = new GeoPoint[]{bottomBoundaryPoint};\n  }\n\n","sourceOld":"  public GeoNorthLatitudeZone(final double bottomLat) {\n    this.bottomLat = bottomLat;\n\n    final double sinBottomLat = Math.sin(bottomLat);\n    this.cosBottomLat = Math.cos(bottomLat);\n\n    // Construct sample points, so we get our sidedness right\n    final Vector bottomPoint = new Vector(0.0, 0.0, sinBottomLat);\n\n    // Compute an interior point.  Pick one whose lat is between top and bottom.\n    final double middleLat = (Math.PI * 0.5 + bottomLat) * 0.5;\n    final double sinMiddleLat = Math.sin(middleLat);\n    this.interiorPoint = new GeoPoint(Math.sqrt(1.0 - sinMiddleLat * sinMiddleLat), 0.0, sinMiddleLat);\n    this.bottomBoundaryPoint = new GeoPoint(Math.sqrt(1.0 - sinBottomLat * sinBottomLat), 0.0, sinBottomLat);\n\n    this.bottomPlane = new SidedPlane(interiorPoint, sinBottomLat);\n\n    this.edgePoints = new GeoPoint[]{bottomBoundaryPoint};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoNorthLatitudeZone#GeoNorthLatitudeZone(PlanetModel,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoNorthLatitudeZone#GeoNorthLatitudeZone(PlanetModel,double).mjava","sourceNew":"  public GeoNorthLatitudeZone(final PlanetModel planetModel, final double bottomLat) {\n    super(planetModel);\n    this.bottomLat = bottomLat;\n\n    final double sinBottomLat = Math.sin(bottomLat);\n    this.cosBottomLat = Math.cos(bottomLat);\n\n    // Compute an interior point.  Pick one whose lat is between top and bottom.\n    final double middleLat = (Math.PI * 0.5 + bottomLat) * 0.5;\n    final double sinMiddleLat = Math.sin(middleLat);\n    this.interiorPoint = new GeoPoint(planetModel, sinMiddleLat, 0.0, Math.sqrt(1.0 - sinMiddleLat * sinMiddleLat), 1.0);\n    this.bottomBoundaryPoint = new GeoPoint(planetModel, sinBottomLat, 0.0, Math.sqrt(1.0 - sinBottomLat * sinBottomLat), 1.0);\n\n    this.bottomPlane = new SidedPlane(interiorPoint, planetModel, sinBottomLat);\n\n    this.edgePoints = new GeoPoint[]{bottomBoundaryPoint};\n  }\n\n","sourceOld":"  public GeoNorthLatitudeZone(final PlanetModel planetModel, final double bottomLat) {\n    super(planetModel);\n    this.bottomLat = bottomLat;\n\n    final double sinBottomLat = Math.sin(bottomLat);\n    this.cosBottomLat = Math.cos(bottomLat);\n\n    // Compute an interior point.  Pick one whose lat is between top and bottom.\n    final double middleLat = (Math.PI * 0.5 + bottomLat) * 0.5;\n    final double sinMiddleLat = Math.sin(middleLat);\n    this.interiorPoint = new GeoPoint(planetModel, sinMiddleLat, 0.0, Math.sqrt(1.0 - sinMiddleLat * sinMiddleLat), 1.0);\n    this.bottomBoundaryPoint = new GeoPoint(planetModel, sinBottomLat, 0.0, Math.sqrt(1.0 - sinBottomLat * sinBottomLat), 1.0);\n\n    this.bottomPlane = new SidedPlane(interiorPoint, planetModel, sinBottomLat);\n\n    this.edgePoints = new GeoPoint[]{bottomBoundaryPoint};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fec06d6753751ae302c7d35866763e6cb414112d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["fec06d6753751ae302c7d35866763e6cb414112d"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3022be5842502b7c2a57a5124199bbc30236f0a0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fec06d6753751ae302c7d35866763e6cb414112d","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"fec06d6753751ae302c7d35866763e6cb414112d":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["fec06d6753751ae302c7d35866763e6cb414112d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}