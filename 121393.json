{"path":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie.Node#findAvailableChildren(String,Set[String]).mjava","commits":[{"id":"5174b677b2536f97776e6b67e8c10ae5c66e6fa2","date":1496916595,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie.Node#findAvailableChildren(String,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/PathTrie.Node#findAvailableChildren(String,Set[String]).mjava","sourceNew":"    void findAvailableChildren(String path, Set<String> availableSubPaths) {\n      if (availableSubPaths == null) return;\n      if (children != null) {\n        for (Node node : children.values()) {\n          if (node.obj != null) {\n            String s = path + \"/\" + node.name;\n            availableSubPaths.add(s);\n          }\n        }\n\n        for (Node node : children.values()) {\n          node.findAvailableChildren(path + \"/\" + node.name, availableSubPaths);\n        }\n      }\n    }\n\n","sourceOld":"    void findAvailableChildren(String path, Set<String> availableSubPaths) {\n      if (availableSubPaths == null) return;\n      if (children != null) {\n        for (Node node : children.values()) {\n          if (node.obj != null) {\n            String s = path + \"/\" + node.name;\n            availableSubPaths.add(s);\n          }\n        }\n\n        for (Node node : children.values()) {\n          node.findAvailableChildren(path + \"/\" + node.name, availableSubPaths);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie.Node#findAvailableChildren(String,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/PathTrie.Node#findAvailableChildren(String,Set[String]).mjava","sourceNew":"    void findAvailableChildren(String path, Set<String> availableSubPaths) {\n      if (availableSubPaths == null) return;\n      if (children != null) {\n        for (Node node : children.values()) {\n          if (node.obj != null) {\n            String s = path + \"/\" + node.name;\n            availableSubPaths.add(s);\n          }\n        }\n\n        for (Node node : children.values()) {\n          node.findAvailableChildren(path + \"/\" + node.name, availableSubPaths);\n        }\n      }\n    }\n\n","sourceOld":"    void findAvailableChildren(String path, Set<String> availableSubPaths) {\n      if (availableSubPaths == null) return;\n      if (children != null) {\n        for (Node node : children.values()) {\n          if (node.obj != null) {\n            String s = path + \"/\" + node.name;\n            availableSubPaths.add(s);\n          }\n        }\n\n        for (Node node : children.values()) {\n          node.findAvailableChildren(path + \"/\" + node.name, availableSubPaths);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie.Node#findAvailableChildren(String,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/PathTrie.Node#findAvailableChildren(String,Set[String]).mjava","sourceNew":"    void findAvailableChildren(String path, Set<String> availableSubPaths) {\n      if (availableSubPaths == null) return;\n      if (children != null) {\n        for (Node node : children.values()) {\n          if (node.obj != null) {\n            String s = path + \"/\" + node.name;\n            availableSubPaths.add(s);\n          }\n        }\n\n        for (Node node : children.values()) {\n          node.findAvailableChildren(path + \"/\" + node.name, availableSubPaths);\n        }\n      }\n    }\n\n","sourceOld":"    void findAvailableChildren(String path, Set<String> availableSubPaths) {\n      if (availableSubPaths == null) return;\n      if (children != null) {\n        for (Node node : children.values()) {\n          if (node.obj != null) {\n            String s = path + \"/\" + node.name;\n            availableSubPaths.add(s);\n          }\n        }\n\n        for (Node node : children.values()) {\n          node.findAvailableChildren(path + \"/\" + node.name, availableSubPaths);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5174b677b2536f97776e6b67e8c10ae5c66e6fa2"],"5174b677b2536f97776e6b67e8c10ae5c66e6fa2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5174b677b2536f97776e6b67e8c10ae5c66e6fa2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["28288370235ed02234a64753cdbf0c6ec096304a","5174b677b2536f97776e6b67e8c10ae5c66e6fa2","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5174b677b2536f97776e6b67e8c10ae5c66e6fa2":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}