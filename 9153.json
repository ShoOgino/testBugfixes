{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBBoxFactory#makeGeoBBox(PlanetModel,double,double,double,double).mjava","commits":[{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBBoxFactory#makeGeoBBox(PlanetModel,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoBBoxFactory#makeGeoBBox(PlanetModel,double,double,double,double).mjava","sourceNew":"  /**\n   * Create a geobbox of the right kind given the specified bounds.\n   *\n   * @param planetModel is the planet model\n   * @param topLat    is the top latitude\n   * @param bottomLat is the bottom latitude\n   * @param leftLon   is the left longitude\n   * @param rightLon  is the right longitude\n   * @return a GeoBBox corresponding to what was specified.\n   */\n  public static GeoBBox makeGeoBBox(final PlanetModel planetModel, double topLat, double bottomLat, double leftLon, double rightLon) {\n    //System.err.println(\"Making rectangle for topLat=\"+topLat*180.0/Math.PI+\", bottomLat=\"+bottomLat*180.0/Math.PI+\", leftLon=\"+leftLon*180.0/Math.PI+\", rightlon=\"+rightLon*180.0/Math.PI);\n    if (topLat > Math.PI * 0.5)\n      topLat = Math.PI * 0.5;\n    if (bottomLat < -Math.PI * 0.5)\n      bottomLat = -Math.PI * 0.5;\n    if (leftLon < -Math.PI)\n      leftLon = -Math.PI;\n    if (rightLon > Math.PI)\n      rightLon = Math.PI;\n    if (Math.abs(leftLon + Math.PI) < Vector.MINIMUM_RESOLUTION && Math.abs(rightLon - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION && Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoWorld(planetModel);\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n        if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n          return new GeoDegeneratePoint(planetModel, topLat, 0.0);\n        return new GeoDegenerateLatitudeZone(planetModel, topLat);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoNorthLatitudeZone(planetModel, bottomLat);\n      else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoSouthLatitudeZone(planetModel, topLat);\n      return new GeoLatitudeZone(planetModel, topLat, bottomLat);\n    }\n    //System.err.println(\" not latitude zone\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0)\n      extent += Math.PI * 2.0;\n    if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5) {\n      if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_RESOLUTION)\n        return new GeoDegenerateLongitudeSlice(planetModel, leftLon);\n\n      if (extent >= Math.PI)\n        return new GeoWideLongitudeSlice(planetModel, leftLon, rightLon);\n\n      return new GeoLongitudeSlice(planetModel, leftLon, rightLon);\n    }\n    //System.err.println(\" not longitude slice\");\n    if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION)\n        return new GeoDegeneratePoint(planetModel, topLat, leftLon);\n      return new GeoDegenerateVerticalLine(planetModel, topLat, bottomLat, leftLon);\n    }\n    //System.err.println(\" not vertical line\");\n    if (extent >= Math.PI) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n        //System.err.println(\" wide degenerate line\");\n        return new GeoWideDegenerateHorizontalLine(planetModel, topLat, leftLon, rightLon);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoWideNorthRectangle(planetModel, bottomLat, leftLon, rightLon);\n      } else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoWideSouthRectangle(planetModel, topLat, leftLon, rightLon);\n      }\n      //System.err.println(\" wide rect\");\n      return new GeoWideRectangle(planetModel, topLat, bottomLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoDegeneratePoint(planetModel, topLat, 0.0);\n      }\n      //System.err.println(\" horizontal line\");\n      return new GeoDegenerateHorizontalLine(planetModel, topLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n      return new GeoNorthRectangle(planetModel, bottomLat, leftLon, rightLon);\n    } else if (Math.abs(bottomLat + Math.PI * 0.5) <  Vector.MINIMUM_RESOLUTION) {\n      return new GeoSouthRectangle(planetModel, topLat, leftLon, rightLon);\n    }\n    //System.err.println(\" rectangle\");\n    return new GeoRectangle(planetModel, topLat, bottomLat, leftLon, rightLon);\n  }\n\n","sourceOld":"  /**\n   * Create a geobbox of the right kind given the specified bounds.\n   *\n   * @param planetModel is the planet model\n   * @param topLat    is the top latitude\n   * @param bottomLat is the bottom latitude\n   * @param leftLon   is the left longitude\n   * @param rightLon  is the right longitude\n   * @return a GeoBBox corresponding to what was specified.\n   */\n  public static GeoBBox makeGeoBBox(final PlanetModel planetModel, double topLat, double bottomLat, double leftLon, double rightLon) {\n    //System.err.println(\"Making rectangle for topLat=\"+topLat*180.0/Math.PI+\", bottomLat=\"+bottomLat*180.0/Math.PI+\", leftLon=\"+leftLon*180.0/Math.PI+\", rightlon=\"+rightLon*180.0/Math.PI);\n    if (topLat > Math.PI * 0.5)\n      topLat = Math.PI * 0.5;\n    if (bottomLat < -Math.PI * 0.5)\n      bottomLat = -Math.PI * 0.5;\n    if (leftLon < -Math.PI)\n      leftLon = -Math.PI;\n    if (rightLon > Math.PI)\n      rightLon = Math.PI;\n    if (Math.abs(leftLon + Math.PI) < Vector.MINIMUM_RESOLUTION && Math.abs(rightLon - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION && Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoWorld(planetModel);\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n        if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n          return new GeoDegeneratePoint(planetModel, topLat, 0.0);\n        return new GeoDegenerateLatitudeZone(planetModel, topLat);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoNorthLatitudeZone(planetModel, bottomLat);\n      else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoSouthLatitudeZone(planetModel, topLat);\n      return new GeoLatitudeZone(planetModel, topLat, bottomLat);\n    }\n    //System.err.println(\" not latitude zone\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0)\n      extent += Math.PI * 2.0;\n    if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5) {\n      if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_RESOLUTION)\n        return new GeoDegenerateLongitudeSlice(planetModel, leftLon);\n\n      if (extent >= Math.PI)\n        return new GeoWideLongitudeSlice(planetModel, leftLon, rightLon);\n\n      return new GeoLongitudeSlice(planetModel, leftLon, rightLon);\n    }\n    //System.err.println(\" not longitude slice\");\n    if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION)\n        return new GeoDegeneratePoint(planetModel, topLat, leftLon);\n      return new GeoDegenerateVerticalLine(planetModel, topLat, bottomLat, leftLon);\n    }\n    //System.err.println(\" not vertical line\");\n    if (extent >= Math.PI) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n        //System.err.println(\" wide degenerate line\");\n        return new GeoWideDegenerateHorizontalLine(planetModel, topLat, leftLon, rightLon);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoWideNorthRectangle(planetModel, bottomLat, leftLon, rightLon);\n      } else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoWideSouthRectangle(planetModel, topLat, leftLon, rightLon);\n      }\n      //System.err.println(\" wide rect\");\n      return new GeoWideRectangle(planetModel, topLat, bottomLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoDegeneratePoint(planetModel, topLat, 0.0);\n      }\n      //System.err.println(\" horizontal line\");\n      return new GeoDegenerateHorizontalLine(planetModel, topLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n      return new GeoNorthRectangle(planetModel, bottomLat, leftLon, rightLon);\n    } else if (Math.abs(bottomLat + Math.PI * 0.5) <  Vector.MINIMUM_RESOLUTION) {\n      return new GeoSouthRectangle(planetModel, topLat, leftLon, rightLon);\n    }\n    //System.err.println(\" rectangle\");\n    return new GeoRectangle(planetModel, topLat, bottomLat, leftLon, rightLon);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8328598d8abb21553424b7df5440c362f4052ee6","date":1460393568,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBBoxFactory#makeGeoBBox(PlanetModel,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBBoxFactory#makeGeoBBox(PlanetModel,double,double,double,double).mjava","sourceNew":"  /**\n   * Create a geobbox of the right kind given the specified bounds.\n   *\n   * @param planetModel is the planet model\n   * @param topLat    is the top latitude\n   * @param bottomLat is the bottom latitude\n   * @param leftLon   is the left longitude\n   * @param rightLon  is the right longitude\n   * @return a GeoBBox corresponding to what was specified.\n   */\n  public static GeoBBox makeGeoBBox(final PlanetModel planetModel, double topLat, double bottomLat, double leftLon, double rightLon) {\n    //System.err.println(\"Making rectangle for topLat=\"+topLat*180.0/Math.PI+\", bottomLat=\"+bottomLat*180.0/Math.PI+\", leftLon=\"+leftLon*180.0/Math.PI+\", rightlon=\"+rightLon*180.0/Math.PI);\n    if (topLat > Math.PI * 0.5)\n      topLat = Math.PI * 0.5;\n    if (bottomLat < -Math.PI * 0.5)\n      bottomLat = -Math.PI * 0.5;\n    if (leftLon < -Math.PI)\n      leftLon = -Math.PI;\n    if (rightLon > Math.PI)\n      rightLon = Math.PI;\n    if ((Math.abs(leftLon + Math.PI) < Vector.MINIMUM_RESOLUTION && Math.abs(rightLon - Math.PI) < Vector.MINIMUM_RESOLUTION) ||\n        (Math.abs(rightLon + Math.PI) < Vector.MINIMUM_RESOLUTION && Math.abs(leftLon - Math.PI) < Vector.MINIMUM_RESOLUTION)) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION && Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoWorld(planetModel);\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n        if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n          return new GeoDegeneratePoint(planetModel, topLat, 0.0);\n        return new GeoDegenerateLatitudeZone(planetModel, topLat);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoNorthLatitudeZone(planetModel, bottomLat);\n      else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoSouthLatitudeZone(planetModel, topLat);\n      return new GeoLatitudeZone(planetModel, topLat, bottomLat);\n    }\n    //System.err.println(\" not latitude zone\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0)\n      extent += Math.PI * 2.0;\n    if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5) {\n      if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_RESOLUTION)\n        return new GeoDegenerateLongitudeSlice(planetModel, leftLon);\n\n      if (extent >= Math.PI)\n        return new GeoWideLongitudeSlice(planetModel, leftLon, rightLon);\n\n      return new GeoLongitudeSlice(planetModel, leftLon, rightLon);\n    }\n    //System.err.println(\" not longitude slice\");\n    if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION)\n        return new GeoDegeneratePoint(planetModel, topLat, leftLon);\n      return new GeoDegenerateVerticalLine(planetModel, topLat, bottomLat, leftLon);\n    }\n    //System.err.println(\" not vertical line\");\n    if (extent >= Math.PI) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n        //System.err.println(\" wide degenerate line\");\n        return new GeoWideDegenerateHorizontalLine(planetModel, topLat, leftLon, rightLon);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoWideNorthRectangle(planetModel, bottomLat, leftLon, rightLon);\n      } else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoWideSouthRectangle(planetModel, topLat, leftLon, rightLon);\n      }\n      //System.err.println(\" wide rect\");\n      return new GeoWideRectangle(planetModel, topLat, bottomLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoDegeneratePoint(planetModel, topLat, 0.0);\n      }\n      //System.err.println(\" horizontal line\");\n      return new GeoDegenerateHorizontalLine(planetModel, topLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n      return new GeoNorthRectangle(planetModel, bottomLat, leftLon, rightLon);\n    } else if (Math.abs(bottomLat + Math.PI * 0.5) <  Vector.MINIMUM_RESOLUTION) {\n      return new GeoSouthRectangle(planetModel, topLat, leftLon, rightLon);\n    }\n    //System.err.println(\" rectangle\");\n    return new GeoRectangle(planetModel, topLat, bottomLat, leftLon, rightLon);\n  }\n\n","sourceOld":"  /**\n   * Create a geobbox of the right kind given the specified bounds.\n   *\n   * @param planetModel is the planet model\n   * @param topLat    is the top latitude\n   * @param bottomLat is the bottom latitude\n   * @param leftLon   is the left longitude\n   * @param rightLon  is the right longitude\n   * @return a GeoBBox corresponding to what was specified.\n   */\n  public static GeoBBox makeGeoBBox(final PlanetModel planetModel, double topLat, double bottomLat, double leftLon, double rightLon) {\n    //System.err.println(\"Making rectangle for topLat=\"+topLat*180.0/Math.PI+\", bottomLat=\"+bottomLat*180.0/Math.PI+\", leftLon=\"+leftLon*180.0/Math.PI+\", rightlon=\"+rightLon*180.0/Math.PI);\n    if (topLat > Math.PI * 0.5)\n      topLat = Math.PI * 0.5;\n    if (bottomLat < -Math.PI * 0.5)\n      bottomLat = -Math.PI * 0.5;\n    if (leftLon < -Math.PI)\n      leftLon = -Math.PI;\n    if (rightLon > Math.PI)\n      rightLon = Math.PI;\n    if (Math.abs(leftLon + Math.PI) < Vector.MINIMUM_RESOLUTION && Math.abs(rightLon - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION && Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoWorld(planetModel);\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n        if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n          return new GeoDegeneratePoint(planetModel, topLat, 0.0);\n        return new GeoDegenerateLatitudeZone(planetModel, topLat);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoNorthLatitudeZone(planetModel, bottomLat);\n      else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoSouthLatitudeZone(planetModel, topLat);\n      return new GeoLatitudeZone(planetModel, topLat, bottomLat);\n    }\n    //System.err.println(\" not latitude zone\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0)\n      extent += Math.PI * 2.0;\n    if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5) {\n      if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_RESOLUTION)\n        return new GeoDegenerateLongitudeSlice(planetModel, leftLon);\n\n      if (extent >= Math.PI)\n        return new GeoWideLongitudeSlice(planetModel, leftLon, rightLon);\n\n      return new GeoLongitudeSlice(planetModel, leftLon, rightLon);\n    }\n    //System.err.println(\" not longitude slice\");\n    if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION)\n        return new GeoDegeneratePoint(planetModel, topLat, leftLon);\n      return new GeoDegenerateVerticalLine(planetModel, topLat, bottomLat, leftLon);\n    }\n    //System.err.println(\" not vertical line\");\n    if (extent >= Math.PI) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n        //System.err.println(\" wide degenerate line\");\n        return new GeoWideDegenerateHorizontalLine(planetModel, topLat, leftLon, rightLon);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoWideNorthRectangle(planetModel, bottomLat, leftLon, rightLon);\n      } else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoWideSouthRectangle(planetModel, topLat, leftLon, rightLon);\n      }\n      //System.err.println(\" wide rect\");\n      return new GeoWideRectangle(planetModel, topLat, bottomLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoDegeneratePoint(planetModel, topLat, 0.0);\n      }\n      //System.err.println(\" horizontal line\");\n      return new GeoDegenerateHorizontalLine(planetModel, topLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n      return new GeoNorthRectangle(planetModel, bottomLat, leftLon, rightLon);\n    } else if (Math.abs(bottomLat + Math.PI * 0.5) <  Vector.MINIMUM_RESOLUTION) {\n      return new GeoSouthRectangle(planetModel, topLat, leftLon, rightLon);\n    }\n    //System.err.println(\" rectangle\");\n    return new GeoRectangle(planetModel, topLat, bottomLat, leftLon, rightLon);\n  }\n\n","bugFix":null,"bugIntro":["098b5036c89446805f69a16e53f6d22f10ae5766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"098b5036c89446805f69a16e53f6d22f10ae5766","date":1482885715,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBBoxFactory#makeGeoBBox(PlanetModel,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBBoxFactory#makeGeoBBox(PlanetModel,double,double,double,double).mjava","sourceNew":"  /**\n   * Create a geobbox of the right kind given the specified bounds.\n   *\n   * @param planetModel is the planet model\n   * @param topLat    is the top latitude\n   * @param bottomLat is the bottom latitude\n   * @param leftLon   is the left longitude\n   * @param rightLon  is the right longitude\n   * @return a GeoBBox corresponding to what was specified.\n   */\n  public static GeoBBox makeGeoBBox(final PlanetModel planetModel, double topLat, double bottomLat, double leftLon, double rightLon) {\n    //System.err.println(\"Making rectangle for topLat=\"+topLat*180.0/Math.PI+\", bottomLat=\"+bottomLat*180.0/Math.PI+\", leftLon=\"+leftLon*180.0/Math.PI+\", rightlon=\"+rightLon*180.0/Math.PI);\n    if (topLat > Math.PI * 0.5)\n      topLat = Math.PI * 0.5;\n    if (bottomLat < -Math.PI * 0.5)\n      bottomLat = -Math.PI * 0.5;\n    if (leftLon < -Math.PI)\n      leftLon = -Math.PI;\n    if (rightLon > Math.PI)\n      rightLon = Math.PI;\n    if ((Math.abs(leftLon + Math.PI) < Vector.MINIMUM_ANGULAR_RESOLUTION && Math.abs(rightLon - Math.PI) < Vector.MINIMUM_ANGULAR_RESOLUTION) ||\n        (Math.abs(rightLon + Math.PI) < Vector.MINIMUM_ANGULAR_RESOLUTION && Math.abs(leftLon - Math.PI) < Vector.MINIMUM_ANGULAR_RESOLUTION)) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION && Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n        return new GeoWorld(planetModel);\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n          return new GeoDegeneratePoint(planetModel, topLat, 0.0);\n        return new GeoDegenerateLatitudeZone(planetModel, topLat);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n        return new GeoNorthLatitudeZone(planetModel, bottomLat);\n      else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n        return new GeoSouthLatitudeZone(planetModel, topLat);\n      return new GeoLatitudeZone(planetModel, topLat, bottomLat);\n    }\n    //System.err.println(\" not latitude zone\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0)\n      extent += Math.PI * 2.0;\n    if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5) {\n      if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n        return new GeoDegenerateLongitudeSlice(planetModel, leftLon);\n\n      if (extent >= Math.PI)\n        return new GeoWideLongitudeSlice(planetModel, leftLon, rightLon);\n\n      return new GeoLongitudeSlice(planetModel, leftLon, rightLon);\n    }\n    //System.err.println(\" not longitude slice\");\n    if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n        return new GeoDegeneratePoint(planetModel, topLat, leftLon);\n      return new GeoDegenerateVerticalLine(planetModel, topLat, bottomLat, leftLon);\n    }\n    //System.err.println(\" not vertical line\");\n    if (extent >= Math.PI) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        //System.err.println(\" wide degenerate line\");\n        return new GeoWideDegenerateHorizontalLine(planetModel, topLat, leftLon, rightLon);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        return new GeoWideNorthRectangle(planetModel, bottomLat, leftLon, rightLon);\n      } else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        return new GeoWideSouthRectangle(planetModel, topLat, leftLon, rightLon);\n      }\n      //System.err.println(\" wide rect\");\n      return new GeoWideRectangle(planetModel, topLat, bottomLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        return new GeoDegeneratePoint(planetModel, topLat, 0.0);\n      }\n      //System.err.println(\" horizontal line\");\n      return new GeoDegenerateHorizontalLine(planetModel, topLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n      return new GeoNorthRectangle(planetModel, bottomLat, leftLon, rightLon);\n    } else if (Math.abs(bottomLat + Math.PI * 0.5) <  Vector.MINIMUM_ANGULAR_RESOLUTION) {\n      return new GeoSouthRectangle(planetModel, topLat, leftLon, rightLon);\n    }\n    //System.err.println(\" rectangle\");\n    return new GeoRectangle(planetModel, topLat, bottomLat, leftLon, rightLon);\n  }\n\n","sourceOld":"  /**\n   * Create a geobbox of the right kind given the specified bounds.\n   *\n   * @param planetModel is the planet model\n   * @param topLat    is the top latitude\n   * @param bottomLat is the bottom latitude\n   * @param leftLon   is the left longitude\n   * @param rightLon  is the right longitude\n   * @return a GeoBBox corresponding to what was specified.\n   */\n  public static GeoBBox makeGeoBBox(final PlanetModel planetModel, double topLat, double bottomLat, double leftLon, double rightLon) {\n    //System.err.println(\"Making rectangle for topLat=\"+topLat*180.0/Math.PI+\", bottomLat=\"+bottomLat*180.0/Math.PI+\", leftLon=\"+leftLon*180.0/Math.PI+\", rightlon=\"+rightLon*180.0/Math.PI);\n    if (topLat > Math.PI * 0.5)\n      topLat = Math.PI * 0.5;\n    if (bottomLat < -Math.PI * 0.5)\n      bottomLat = -Math.PI * 0.5;\n    if (leftLon < -Math.PI)\n      leftLon = -Math.PI;\n    if (rightLon > Math.PI)\n      rightLon = Math.PI;\n    if ((Math.abs(leftLon + Math.PI) < Vector.MINIMUM_RESOLUTION && Math.abs(rightLon - Math.PI) < Vector.MINIMUM_RESOLUTION) ||\n        (Math.abs(rightLon + Math.PI) < Vector.MINIMUM_RESOLUTION && Math.abs(leftLon - Math.PI) < Vector.MINIMUM_RESOLUTION)) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION && Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoWorld(planetModel);\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n        if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n          return new GeoDegeneratePoint(planetModel, topLat, 0.0);\n        return new GeoDegenerateLatitudeZone(planetModel, topLat);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoNorthLatitudeZone(planetModel, bottomLat);\n      else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoSouthLatitudeZone(planetModel, topLat);\n      return new GeoLatitudeZone(planetModel, topLat, bottomLat);\n    }\n    //System.err.println(\" not latitude zone\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0)\n      extent += Math.PI * 2.0;\n    if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5) {\n      if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_RESOLUTION)\n        return new GeoDegenerateLongitudeSlice(planetModel, leftLon);\n\n      if (extent >= Math.PI)\n        return new GeoWideLongitudeSlice(planetModel, leftLon, rightLon);\n\n      return new GeoLongitudeSlice(planetModel, leftLon, rightLon);\n    }\n    //System.err.println(\" not longitude slice\");\n    if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION)\n        return new GeoDegeneratePoint(planetModel, topLat, leftLon);\n      return new GeoDegenerateVerticalLine(planetModel, topLat, bottomLat, leftLon);\n    }\n    //System.err.println(\" not vertical line\");\n    if (extent >= Math.PI) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n        //System.err.println(\" wide degenerate line\");\n        return new GeoWideDegenerateHorizontalLine(planetModel, topLat, leftLon, rightLon);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoWideNorthRectangle(planetModel, bottomLat, leftLon, rightLon);\n      } else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoWideSouthRectangle(planetModel, topLat, leftLon, rightLon);\n      }\n      //System.err.println(\" wide rect\");\n      return new GeoWideRectangle(planetModel, topLat, bottomLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoDegeneratePoint(planetModel, topLat, 0.0);\n      }\n      //System.err.println(\" horizontal line\");\n      return new GeoDegenerateHorizontalLine(planetModel, topLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n      return new GeoNorthRectangle(planetModel, bottomLat, leftLon, rightLon);\n    } else if (Math.abs(bottomLat + Math.PI * 0.5) <  Vector.MINIMUM_RESOLUTION) {\n      return new GeoSouthRectangle(planetModel, topLat, leftLon, rightLon);\n    }\n    //System.err.println(\" rectangle\");\n    return new GeoRectangle(planetModel, topLat, bottomLat, leftLon, rightLon);\n  }\n\n","bugFix":["c8ba5fe73a7ca70f6d54a333cc3a57d4e01eedb7","8328598d8abb21553424b7df5440c362f4052ee6"],"bugIntro":["d5cd55eca27a26026e692d83b78bbadf16c20575"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBBoxFactory#makeGeoBBox(PlanetModel,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBBoxFactory#makeGeoBBox(PlanetModel,double,double,double,double).mjava","sourceNew":"  /**\n   * Create a geobbox of the right kind given the specified bounds.\n   *\n   * @param planetModel is the planet model\n   * @param topLat    is the top latitude\n   * @param bottomLat is the bottom latitude\n   * @param leftLon   is the left longitude\n   * @param rightLon  is the right longitude\n   * @return a GeoBBox corresponding to what was specified.\n   */\n  public static GeoBBox makeGeoBBox(final PlanetModel planetModel, double topLat, double bottomLat, double leftLon, double rightLon) {\n    //System.err.println(\"Making rectangle for topLat=\"+topLat*180.0/Math.PI+\", bottomLat=\"+bottomLat*180.0/Math.PI+\", leftLon=\"+leftLon*180.0/Math.PI+\", rightlon=\"+rightLon*180.0/Math.PI);\n    if (topLat > Math.PI * 0.5)\n      topLat = Math.PI * 0.5;\n    if (bottomLat < -Math.PI * 0.5)\n      bottomLat = -Math.PI * 0.5;\n    if (leftLon < -Math.PI)\n      leftLon = -Math.PI;\n    if (rightLon > Math.PI)\n      rightLon = Math.PI;\n    if ((Math.abs(leftLon + Math.PI) < Vector.MINIMUM_ANGULAR_RESOLUTION && Math.abs(rightLon - Math.PI) < Vector.MINIMUM_ANGULAR_RESOLUTION) ||\n        (Math.abs(rightLon + Math.PI) < Vector.MINIMUM_ANGULAR_RESOLUTION && Math.abs(leftLon - Math.PI) < Vector.MINIMUM_ANGULAR_RESOLUTION)) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION && Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n        return new GeoWorld(planetModel);\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n          return new GeoDegeneratePoint(planetModel, topLat, 0.0);\n        return new GeoDegenerateLatitudeZone(planetModel, topLat);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n        return new GeoNorthLatitudeZone(planetModel, bottomLat);\n      else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n        return new GeoSouthLatitudeZone(planetModel, topLat);\n      return new GeoLatitudeZone(planetModel, topLat, bottomLat);\n    }\n    //System.err.println(\" not latitude zone\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0)\n      extent += Math.PI * 2.0;\n    if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5) {\n      if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n        return new GeoDegenerateLongitudeSlice(planetModel, leftLon);\n\n      if (extent >= Math.PI)\n        return new GeoWideLongitudeSlice(planetModel, leftLon, rightLon);\n\n      return new GeoLongitudeSlice(planetModel, leftLon, rightLon);\n    }\n    //System.err.println(\" not longitude slice\");\n    if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n        return new GeoDegeneratePoint(planetModel, topLat, leftLon);\n      return new GeoDegenerateVerticalLine(planetModel, topLat, bottomLat, leftLon);\n    }\n    //System.err.println(\" not vertical line\");\n    if (extent >= Math.PI) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        //System.err.println(\" wide degenerate line\");\n        return new GeoWideDegenerateHorizontalLine(planetModel, topLat, leftLon, rightLon);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        return new GeoWideNorthRectangle(planetModel, bottomLat, leftLon, rightLon);\n      } else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        return new GeoWideSouthRectangle(planetModel, topLat, leftLon, rightLon);\n      }\n      //System.err.println(\" wide rect\");\n      return new GeoWideRectangle(planetModel, topLat, bottomLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        return new GeoDegeneratePoint(planetModel, topLat, 0.0);\n      }\n      //System.err.println(\" horizontal line\");\n      return new GeoDegenerateHorizontalLine(planetModel, topLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n      return new GeoNorthRectangle(planetModel, bottomLat, leftLon, rightLon);\n    } else if (Math.abs(bottomLat + Math.PI * 0.5) <  Vector.MINIMUM_ANGULAR_RESOLUTION) {\n      return new GeoSouthRectangle(planetModel, topLat, leftLon, rightLon);\n    }\n    //System.err.println(\" rectangle\");\n    return new GeoRectangle(planetModel, topLat, bottomLat, leftLon, rightLon);\n  }\n\n","sourceOld":"  /**\n   * Create a geobbox of the right kind given the specified bounds.\n   *\n   * @param planetModel is the planet model\n   * @param topLat    is the top latitude\n   * @param bottomLat is the bottom latitude\n   * @param leftLon   is the left longitude\n   * @param rightLon  is the right longitude\n   * @return a GeoBBox corresponding to what was specified.\n   */\n  public static GeoBBox makeGeoBBox(final PlanetModel planetModel, double topLat, double bottomLat, double leftLon, double rightLon) {\n    //System.err.println(\"Making rectangle for topLat=\"+topLat*180.0/Math.PI+\", bottomLat=\"+bottomLat*180.0/Math.PI+\", leftLon=\"+leftLon*180.0/Math.PI+\", rightlon=\"+rightLon*180.0/Math.PI);\n    if (topLat > Math.PI * 0.5)\n      topLat = Math.PI * 0.5;\n    if (bottomLat < -Math.PI * 0.5)\n      bottomLat = -Math.PI * 0.5;\n    if (leftLon < -Math.PI)\n      leftLon = -Math.PI;\n    if (rightLon > Math.PI)\n      rightLon = Math.PI;\n    if ((Math.abs(leftLon + Math.PI) < Vector.MINIMUM_RESOLUTION && Math.abs(rightLon - Math.PI) < Vector.MINIMUM_RESOLUTION) ||\n        (Math.abs(rightLon + Math.PI) < Vector.MINIMUM_RESOLUTION && Math.abs(leftLon - Math.PI) < Vector.MINIMUM_RESOLUTION)) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION && Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoWorld(planetModel);\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n        if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n          return new GeoDegeneratePoint(planetModel, topLat, 0.0);\n        return new GeoDegenerateLatitudeZone(planetModel, topLat);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoNorthLatitudeZone(planetModel, bottomLat);\n      else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION)\n        return new GeoSouthLatitudeZone(planetModel, topLat);\n      return new GeoLatitudeZone(planetModel, topLat, bottomLat);\n    }\n    //System.err.println(\" not latitude zone\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0)\n      extent += Math.PI * 2.0;\n    if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5) {\n      if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_RESOLUTION)\n        return new GeoDegenerateLongitudeSlice(planetModel, leftLon);\n\n      if (extent >= Math.PI)\n        return new GeoWideLongitudeSlice(planetModel, leftLon, rightLon);\n\n      return new GeoLongitudeSlice(planetModel, leftLon, rightLon);\n    }\n    //System.err.println(\" not longitude slice\");\n    if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION)\n        return new GeoDegeneratePoint(planetModel, topLat, leftLon);\n      return new GeoDegenerateVerticalLine(planetModel, topLat, bottomLat, leftLon);\n    }\n    //System.err.println(\" not vertical line\");\n    if (extent >= Math.PI) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n        //System.err.println(\" wide degenerate line\");\n        return new GeoWideDegenerateHorizontalLine(planetModel, topLat, leftLon, rightLon);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoWideNorthRectangle(planetModel, bottomLat, leftLon, rightLon);\n      } else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoWideSouthRectangle(planetModel, topLat, leftLon, rightLon);\n      }\n      //System.err.println(\" wide rect\");\n      return new GeoWideRectangle(planetModel, topLat, bottomLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_RESOLUTION) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n        return new GeoDegeneratePoint(planetModel, topLat, 0.0);\n      }\n      //System.err.println(\" horizontal line\");\n      return new GeoDegenerateHorizontalLine(planetModel, topLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_RESOLUTION) {\n      return new GeoNorthRectangle(planetModel, bottomLat, leftLon, rightLon);\n    } else if (Math.abs(bottomLat + Math.PI * 0.5) <  Vector.MINIMUM_RESOLUTION) {\n      return new GeoSouthRectangle(planetModel, topLat, leftLon, rightLon);\n    }\n    //System.err.println(\" rectangle\");\n    return new GeoRectangle(planetModel, topLat, bottomLat, leftLon, rightLon);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5cd55eca27a26026e692d83b78bbadf16c20575","date":1504933293,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBBoxFactory#makeGeoBBox(PlanetModel,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBBoxFactory#makeGeoBBox(PlanetModel,double,double,double,double).mjava","sourceNew":"  /**\n   * Create a geobbox of the right kind given the specified bounds.\n   *\n   * @param planetModel is the planet model\n   * @param topLat    is the top latitude\n   * @param bottomLat is the bottom latitude\n   * @param leftLon   is the left longitude\n   * @param rightLon  is the right longitude\n   * @return a GeoBBox corresponding to what was specified.\n   */\n  public static GeoBBox makeGeoBBox(final PlanetModel planetModel, double topLat, double bottomLat, double leftLon, double rightLon) {\n    //System.err.println(\"Making rectangle for topLat=\"+topLat*180.0/Math.PI+\", bottomLat=\"+bottomLat*180.0/Math.PI+\", leftLon=\"+leftLon*180.0/Math.PI+\", rightlon=\"+rightLon*180.0/Math.PI);\n    if (topLat > Math.PI * 0.5)\n      topLat = Math.PI * 0.5;\n    if (bottomLat < -Math.PI * 0.5)\n      bottomLat = -Math.PI * 0.5;\n    if (leftLon < -Math.PI)\n      leftLon = -Math.PI;\n    if (rightLon > Math.PI)\n      rightLon = Math.PI;\n    if ((Math.abs(leftLon + Math.PI) < Vector.MINIMUM_ANGULAR_RESOLUTION && Math.abs(rightLon - Math.PI) < Vector.MINIMUM_ANGULAR_RESOLUTION) ||\n        (Math.abs(rightLon + Math.PI) < Vector.MINIMUM_ANGULAR_RESOLUTION && Math.abs(leftLon - Math.PI) < Vector.MINIMUM_ANGULAR_RESOLUTION)) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION && Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n        return new GeoWorld(planetModel);\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n          return new GeoDegeneratePoint(planetModel, topLat, 0.0);\n        return new GeoDegenerateLatitudeZone(planetModel, topLat);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n        return new GeoNorthLatitudeZone(planetModel, bottomLat);\n      else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n        return new GeoSouthLatitudeZone(planetModel, topLat);\n      return new GeoLatitudeZone(planetModel, topLat, bottomLat);\n    }\n    //System.err.println(\" not latitude zone\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0)\n      extent += Math.PI * 2.0;\n    if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5) {\n      if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n        return new GeoDegenerateLongitudeSlice(planetModel, leftLon);\n\n      if (extent >= Math.PI)\n        return new GeoWideLongitudeSlice(planetModel, leftLon, rightLon);\n\n      return new GeoLongitudeSlice(planetModel, leftLon, rightLon);\n    }\n    //System.err.println(\" not longitude slice\");\n    if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n        return new GeoDegeneratePoint(planetModel, topLat, leftLon);\n      return new GeoDegenerateVerticalLine(planetModel, topLat, bottomLat, leftLon);\n    }\n    //System.err.println(\" not vertical line\");\n    if (extent >= Math.PI) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n          return new GeoDegeneratePoint(planetModel, topLat, 0.0);\n        } else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n          return new GeoDegeneratePoint(planetModel, bottomLat, 0.0);\n        }\n        //System.err.println(\" wide degenerate line\");\n        return new GeoWideDegenerateHorizontalLine(planetModel, topLat, leftLon, rightLon);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        return new GeoWideNorthRectangle(planetModel, bottomLat, leftLon, rightLon);\n      } else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        return new GeoWideSouthRectangle(planetModel, topLat, leftLon, rightLon);\n      }\n      //System.err.println(\" wide rect\");\n      return new GeoWideRectangle(planetModel, topLat, bottomLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        return new GeoDegeneratePoint(planetModel, topLat, 0.0);\n      } else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        return new GeoDegeneratePoint(planetModel, bottomLat, 0.0);\n      }\n      //System.err.println(\" horizontal line\");\n      return new GeoDegenerateHorizontalLine(planetModel, topLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n      return new GeoNorthRectangle(planetModel, bottomLat, leftLon, rightLon);\n    } else if (Math.abs(bottomLat + Math.PI * 0.5) <  Vector.MINIMUM_ANGULAR_RESOLUTION) {\n      return new GeoSouthRectangle(planetModel, topLat, leftLon, rightLon);\n    }\n    //System.err.println(\" rectangle\");\n    return new GeoRectangle(planetModel, topLat, bottomLat, leftLon, rightLon);\n  }\n\n","sourceOld":"  /**\n   * Create a geobbox of the right kind given the specified bounds.\n   *\n   * @param planetModel is the planet model\n   * @param topLat    is the top latitude\n   * @param bottomLat is the bottom latitude\n   * @param leftLon   is the left longitude\n   * @param rightLon  is the right longitude\n   * @return a GeoBBox corresponding to what was specified.\n   */\n  public static GeoBBox makeGeoBBox(final PlanetModel planetModel, double topLat, double bottomLat, double leftLon, double rightLon) {\n    //System.err.println(\"Making rectangle for topLat=\"+topLat*180.0/Math.PI+\", bottomLat=\"+bottomLat*180.0/Math.PI+\", leftLon=\"+leftLon*180.0/Math.PI+\", rightlon=\"+rightLon*180.0/Math.PI);\n    if (topLat > Math.PI * 0.5)\n      topLat = Math.PI * 0.5;\n    if (bottomLat < -Math.PI * 0.5)\n      bottomLat = -Math.PI * 0.5;\n    if (leftLon < -Math.PI)\n      leftLon = -Math.PI;\n    if (rightLon > Math.PI)\n      rightLon = Math.PI;\n    if ((Math.abs(leftLon + Math.PI) < Vector.MINIMUM_ANGULAR_RESOLUTION && Math.abs(rightLon - Math.PI) < Vector.MINIMUM_ANGULAR_RESOLUTION) ||\n        (Math.abs(rightLon + Math.PI) < Vector.MINIMUM_ANGULAR_RESOLUTION && Math.abs(leftLon - Math.PI) < Vector.MINIMUM_ANGULAR_RESOLUTION)) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION && Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n        return new GeoWorld(planetModel);\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n          return new GeoDegeneratePoint(planetModel, topLat, 0.0);\n        return new GeoDegenerateLatitudeZone(planetModel, topLat);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n        return new GeoNorthLatitudeZone(planetModel, bottomLat);\n      else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n        return new GeoSouthLatitudeZone(planetModel, topLat);\n      return new GeoLatitudeZone(planetModel, topLat, bottomLat);\n    }\n    //System.err.println(\" not latitude zone\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0)\n      extent += Math.PI * 2.0;\n    if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5) {\n      if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n        return new GeoDegenerateLongitudeSlice(planetModel, leftLon);\n\n      if (extent >= Math.PI)\n        return new GeoWideLongitudeSlice(planetModel, leftLon, rightLon);\n\n      return new GeoLongitudeSlice(planetModel, leftLon, rightLon);\n    }\n    //System.err.println(\" not longitude slice\");\n    if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n        return new GeoDegeneratePoint(planetModel, topLat, leftLon);\n      return new GeoDegenerateVerticalLine(planetModel, topLat, bottomLat, leftLon);\n    }\n    //System.err.println(\" not vertical line\");\n    if (extent >= Math.PI) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        //System.err.println(\" wide degenerate line\");\n        return new GeoWideDegenerateHorizontalLine(planetModel, topLat, leftLon, rightLon);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        return new GeoWideNorthRectangle(planetModel, bottomLat, leftLon, rightLon);\n      } else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        return new GeoWideSouthRectangle(planetModel, topLat, leftLon, rightLon);\n      }\n      //System.err.println(\" wide rect\");\n      return new GeoWideRectangle(planetModel, topLat, bottomLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        return new GeoDegeneratePoint(planetModel, topLat, 0.0);\n      }\n      //System.err.println(\" horizontal line\");\n      return new GeoDegenerateHorizontalLine(planetModel, topLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n      return new GeoNorthRectangle(planetModel, bottomLat, leftLon, rightLon);\n    } else if (Math.abs(bottomLat + Math.PI * 0.5) <  Vector.MINIMUM_ANGULAR_RESOLUTION) {\n      return new GeoSouthRectangle(planetModel, topLat, leftLon, rightLon);\n    }\n    //System.err.println(\" rectangle\");\n    return new GeoRectangle(planetModel, topLat, bottomLat, leftLon, rightLon);\n  }\n\n","bugFix":["098b5036c89446805f69a16e53f6d22f10ae5766"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBBoxFactory#makeGeoBBox(PlanetModel,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBBoxFactory#makeGeoBBox(PlanetModel,double,double,double,double).mjava","sourceNew":"  /**\n   * Create a geobbox of the right kind given the specified bounds.\n   *\n   * @param planetModel is the planet model\n   * @param topLat    is the top latitude\n   * @param bottomLat is the bottom latitude\n   * @param leftLon   is the left longitude\n   * @param rightLon  is the right longitude\n   * @return a GeoBBox corresponding to what was specified.\n   */\n  public static GeoBBox makeGeoBBox(final PlanetModel planetModel, double topLat, double bottomLat, double leftLon, double rightLon) {\n    //System.err.println(\"Making rectangle for topLat=\"+topLat*180.0/Math.PI+\", bottomLat=\"+bottomLat*180.0/Math.PI+\", leftLon=\"+leftLon*180.0/Math.PI+\", rightlon=\"+rightLon*180.0/Math.PI);\n    if (topLat > Math.PI * 0.5)\n      topLat = Math.PI * 0.5;\n    if (bottomLat < -Math.PI * 0.5)\n      bottomLat = -Math.PI * 0.5;\n    if (leftLon < -Math.PI)\n      leftLon = -Math.PI;\n    if (rightLon > Math.PI)\n      rightLon = Math.PI;\n    if ((Math.abs(leftLon + Math.PI) < Vector.MINIMUM_ANGULAR_RESOLUTION && Math.abs(rightLon - Math.PI) < Vector.MINIMUM_ANGULAR_RESOLUTION) ||\n        (Math.abs(rightLon + Math.PI) < Vector.MINIMUM_ANGULAR_RESOLUTION && Math.abs(leftLon - Math.PI) < Vector.MINIMUM_ANGULAR_RESOLUTION)) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION && Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n        return new GeoWorld(planetModel);\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n          return new GeoDegeneratePoint(planetModel, topLat, 0.0);\n        return new GeoDegenerateLatitudeZone(planetModel, topLat);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n        return new GeoNorthLatitudeZone(planetModel, bottomLat);\n      else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n        return new GeoSouthLatitudeZone(planetModel, topLat);\n      return new GeoLatitudeZone(planetModel, topLat, bottomLat);\n    }\n    //System.err.println(\" not latitude zone\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0)\n      extent += Math.PI * 2.0;\n    if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5) {\n      if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n        return new GeoDegenerateLongitudeSlice(planetModel, leftLon);\n\n      if (extent >= Math.PI)\n        return new GeoWideLongitudeSlice(planetModel, leftLon, rightLon);\n\n      return new GeoLongitudeSlice(planetModel, leftLon, rightLon);\n    }\n    //System.err.println(\" not longitude slice\");\n    if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n        return new GeoDegeneratePoint(planetModel, topLat, leftLon);\n      return new GeoDegenerateVerticalLine(planetModel, topLat, bottomLat, leftLon);\n    }\n    //System.err.println(\" not vertical line\");\n    if (extent >= Math.PI) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n          return new GeoDegeneratePoint(planetModel, topLat, 0.0);\n        } else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n          return new GeoDegeneratePoint(planetModel, bottomLat, 0.0);\n        }\n        //System.err.println(\" wide degenerate line\");\n        return new GeoWideDegenerateHorizontalLine(planetModel, topLat, leftLon, rightLon);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        return new GeoWideNorthRectangle(planetModel, bottomLat, leftLon, rightLon);\n      } else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        return new GeoWideSouthRectangle(planetModel, topLat, leftLon, rightLon);\n      }\n      //System.err.println(\" wide rect\");\n      return new GeoWideRectangle(planetModel, topLat, bottomLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        return new GeoDegeneratePoint(planetModel, topLat, 0.0);\n      } else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        return new GeoDegeneratePoint(planetModel, bottomLat, 0.0);\n      }\n      //System.err.println(\" horizontal line\");\n      return new GeoDegenerateHorizontalLine(planetModel, topLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n      return new GeoNorthRectangle(planetModel, bottomLat, leftLon, rightLon);\n    } else if (Math.abs(bottomLat + Math.PI * 0.5) <  Vector.MINIMUM_ANGULAR_RESOLUTION) {\n      return new GeoSouthRectangle(planetModel, topLat, leftLon, rightLon);\n    }\n    //System.err.println(\" rectangle\");\n    return new GeoRectangle(planetModel, topLat, bottomLat, leftLon, rightLon);\n  }\n\n","sourceOld":"  /**\n   * Create a geobbox of the right kind given the specified bounds.\n   *\n   * @param planetModel is the planet model\n   * @param topLat    is the top latitude\n   * @param bottomLat is the bottom latitude\n   * @param leftLon   is the left longitude\n   * @param rightLon  is the right longitude\n   * @return a GeoBBox corresponding to what was specified.\n   */\n  public static GeoBBox makeGeoBBox(final PlanetModel planetModel, double topLat, double bottomLat, double leftLon, double rightLon) {\n    //System.err.println(\"Making rectangle for topLat=\"+topLat*180.0/Math.PI+\", bottomLat=\"+bottomLat*180.0/Math.PI+\", leftLon=\"+leftLon*180.0/Math.PI+\", rightlon=\"+rightLon*180.0/Math.PI);\n    if (topLat > Math.PI * 0.5)\n      topLat = Math.PI * 0.5;\n    if (bottomLat < -Math.PI * 0.5)\n      bottomLat = -Math.PI * 0.5;\n    if (leftLon < -Math.PI)\n      leftLon = -Math.PI;\n    if (rightLon > Math.PI)\n      rightLon = Math.PI;\n    if ((Math.abs(leftLon + Math.PI) < Vector.MINIMUM_ANGULAR_RESOLUTION && Math.abs(rightLon - Math.PI) < Vector.MINIMUM_ANGULAR_RESOLUTION) ||\n        (Math.abs(rightLon + Math.PI) < Vector.MINIMUM_ANGULAR_RESOLUTION && Math.abs(leftLon - Math.PI) < Vector.MINIMUM_ANGULAR_RESOLUTION)) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION && Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n        return new GeoWorld(planetModel);\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n          return new GeoDegeneratePoint(planetModel, topLat, 0.0);\n        return new GeoDegenerateLatitudeZone(planetModel, topLat);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n        return new GeoNorthLatitudeZone(planetModel, bottomLat);\n      else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n        return new GeoSouthLatitudeZone(planetModel, topLat);\n      return new GeoLatitudeZone(planetModel, topLat, bottomLat);\n    }\n    //System.err.println(\" not latitude zone\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0)\n      extent += Math.PI * 2.0;\n    if (topLat == Math.PI * 0.5 && bottomLat == -Math.PI * 0.5) {\n      if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n        return new GeoDegenerateLongitudeSlice(planetModel, leftLon);\n\n      if (extent >= Math.PI)\n        return new GeoWideLongitudeSlice(planetModel, leftLon, rightLon);\n\n      return new GeoLongitudeSlice(planetModel, leftLon, rightLon);\n    }\n    //System.err.println(\" not longitude slice\");\n    if (Math.abs(leftLon - rightLon) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_ANGULAR_RESOLUTION)\n        return new GeoDegeneratePoint(planetModel, topLat, leftLon);\n      return new GeoDegenerateVerticalLine(planetModel, topLat, bottomLat, leftLon);\n    }\n    //System.err.println(\" not vertical line\");\n    if (extent >= Math.PI) {\n      if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        //System.err.println(\" wide degenerate line\");\n        return new GeoWideDegenerateHorizontalLine(planetModel, topLat, leftLon, rightLon);\n      }\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        return new GeoWideNorthRectangle(planetModel, bottomLat, leftLon, rightLon);\n      } else if (Math.abs(bottomLat + Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        return new GeoWideSouthRectangle(planetModel, topLat, leftLon, rightLon);\n      }\n      //System.err.println(\" wide rect\");\n      return new GeoWideRectangle(planetModel, topLat, bottomLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - bottomLat) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n      if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION || Math.abs(topLat + Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n        return new GeoDegeneratePoint(planetModel, topLat, 0.0);\n      }\n      //System.err.println(\" horizontal line\");\n      return new GeoDegenerateHorizontalLine(planetModel, topLat, leftLon, rightLon);\n    }\n    if (Math.abs(topLat - Math.PI * 0.5) < Vector.MINIMUM_ANGULAR_RESOLUTION) {\n      return new GeoNorthRectangle(planetModel, bottomLat, leftLon, rightLon);\n    } else if (Math.abs(bottomLat + Math.PI * 0.5) <  Vector.MINIMUM_ANGULAR_RESOLUTION) {\n      return new GeoSouthRectangle(planetModel, topLat, leftLon, rightLon);\n    }\n    //System.err.println(\" rectangle\");\n    return new GeoRectangle(planetModel, topLat, bottomLat, leftLon, rightLon);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d5cd55eca27a26026e692d83b78bbadf16c20575":["098b5036c89446805f69a16e53f6d22f10ae5766"],"685bd38810c206c93e9058f3c2cfa9827c086c27":["098b5036c89446805f69a16e53f6d22f10ae5766","d5cd55eca27a26026e692d83b78bbadf16c20575"],"8328598d8abb21553424b7df5440c362f4052ee6":["b4e444678504caf66a8060b1d514383aa4feac0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"098b5036c89446805f69a16e53f6d22f10ae5766":["8328598d8abb21553424b7df5440c362f4052ee6"],"b4e444678504caf66a8060b1d514383aa4feac0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d5cd55eca27a26026e692d83b78bbadf16c20575"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["8328598d8abb21553424b7df5440c362f4052ee6","098b5036c89446805f69a16e53f6d22f10ae5766"]},"commit2Childs":{"d5cd55eca27a26026e692d83b78bbadf16c20575":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"8328598d8abb21553424b7df5440c362f4052ee6":["098b5036c89446805f69a16e53f6d22f10ae5766","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4e444678504caf66a8060b1d514383aa4feac0c"],"098b5036c89446805f69a16e53f6d22f10ae5766":["d5cd55eca27a26026e692d83b78bbadf16c20575","685bd38810c206c93e9058f3c2cfa9827c086c27","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"b4e444678504caf66a8060b1d514383aa4feac0c":["8328598d8abb21553424b7df5440c362f4052ee6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}