{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ClobTransformer#transformRow(Map[String,Object],Context).mjava","commits":[{"id":"5db4e847e2754f60ffa4d9077a776a2acb2cae4c","date":1229065329,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ClobTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"/dev/null","sourceNew":"  public Object transformRow(Map<String, Object> aRow, Context context) {\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      if (!\"true\".equals(map.get(CLOB))) continue;\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      Object o = aRow.get(srcCol);\n      if (o instanceof List) {\n        List<Clob> inputs = (List<Clob>) o;\n        List<String> results = new ArrayList<String>();\n        for (Object input : inputs) {\n          if (input instanceof Clob) {\n            Clob clob = (Clob) input;\n            results.add(readFromClob(clob));\n          }\n        }\n        aRow.put(column, results);\n      } else {\n        if (o instanceof Clob) {\n          Clob clob = (Clob) o;\n          aRow.put(column, readFromClob(clob));\n        }\n      }\n    }\n    return aRow;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73dfcb0f0208cdc38da92da0c7be6ed50fef55ba","date":1233903110,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ClobTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ClobTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  public Object transformRow(Map<String, Object> aRow, Context context) {\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      if (!TRUE.equals(map.get(CLOB))) continue;\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      Object o = aRow.get(srcCol);\n      if (o instanceof List) {\n        List<Clob> inputs = (List<Clob>) o;\n        List<String> results = new ArrayList<String>();\n        for (Object input : inputs) {\n          if (input instanceof Clob) {\n            Clob clob = (Clob) input;\n            results.add(readFromClob(clob));\n          }\n        }\n        aRow.put(column, results);\n      } else {\n        if (o instanceof Clob) {\n          Clob clob = (Clob) o;\n          aRow.put(column, readFromClob(clob));\n        }\n      }\n    }\n    return aRow;\n  }\n\n","sourceOld":"  public Object transformRow(Map<String, Object> aRow, Context context) {\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      if (!\"true\".equals(map.get(CLOB))) continue;\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      Object o = aRow.get(srcCol);\n      if (o instanceof List) {\n        List<Clob> inputs = (List<Clob>) o;\n        List<String> results = new ArrayList<String>();\n        for (Object input : inputs) {\n          if (input instanceof Clob) {\n            Clob clob = (Clob) input;\n            results.add(readFromClob(clob));\n          }\n        }\n        aRow.put(column, results);\n      } else {\n        if (o instanceof Clob) {\n          Clob clob = (Clob) o;\n          aRow.put(column, readFromClob(clob));\n        }\n      }\n    }\n    return aRow;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ClobTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ClobTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  public Object transformRow(Map<String, Object> aRow, Context context) {\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      if (!TRUE.equals(map.get(CLOB))) continue;\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      Object o = aRow.get(srcCol);\n      if (o instanceof List) {\n        List<Clob> inputs = (List<Clob>) o;\n        List<String> results = new ArrayList<String>();\n        for (Object input : inputs) {\n          if (input instanceof Clob) {\n            Clob clob = (Clob) input;\n            results.add(readFromClob(clob));\n          }\n        }\n        aRow.put(column, results);\n      } else {\n        if (o instanceof Clob) {\n          Clob clob = (Clob) o;\n          aRow.put(column, readFromClob(clob));\n        }\n      }\n    }\n    return aRow;\n  }\n\n","sourceOld":"  public Object transformRow(Map<String, Object> aRow, Context context) {\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      if (!TRUE.equals(map.get(CLOB))) continue;\n      String column = map.get(DataImporter.COLUMN);\n      String srcCol = map.get(RegexTransformer.SRC_COL_NAME);\n      if (srcCol == null)\n        srcCol = column;\n      Object o = aRow.get(srcCol);\n      if (o instanceof List) {\n        List<Clob> inputs = (List<Clob>) o;\n        List<String> results = new ArrayList<String>();\n        for (Object input : inputs) {\n          if (input instanceof Clob) {\n            Clob clob = (Clob) input;\n            results.add(readFromClob(clob));\n          }\n        }\n        aRow.put(column, results);\n      } else {\n        if (o instanceof Clob) {\n          Clob clob = (Clob) o;\n          aRow.put(column, readFromClob(clob));\n        }\n      }\n    }\n    return aRow;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5db4e847e2754f60ffa4d9077a776a2acb2cae4c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"73dfcb0f0208cdc38da92da0c7be6ed50fef55ba":["5db4e847e2754f60ffa4d9077a776a2acb2cae4c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["73dfcb0f0208cdc38da92da0c7be6ed50fef55ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5db4e847e2754f60ffa4d9077a776a2acb2cae4c":["73dfcb0f0208cdc38da92da0c7be6ed50fef55ba"],"73dfcb0f0208cdc38da92da0c7be6ed50fef55ba":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5db4e847e2754f60ffa4d9077a776a2acb2cae4c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}