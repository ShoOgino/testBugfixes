{"path":"lucene/sandbox/src/java/org/apache/lucene/geo/Line2D#isPointOnLine(Edge,double,double).mjava","commits":[{"id":"fc005279ab64cbf458ccef2ada610bc1a04b6139","date":1554992856,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Line2D#isPointOnLine(Edge,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** returns true if the provided x, y point lies on the line */\n  private boolean isPointOnLine(Edge tree, double x, double y) {\n    if (y <= tree.max) {\n      double minY = StrictMath.min(tree.lat1, tree.lat2);\n      double maxY = StrictMath.max(tree.lat1, tree.lat2);\n      double minX = StrictMath.min(tree.lon1, tree.lon2);\n      double maxX = StrictMath.max(tree.lon1, tree.lon2);\n      if (Rectangle.containsPoint(y, x, minY, maxY, minX, maxX) &&\n          orient(tree.lon1, tree.lat1, tree.lon2, tree.lat2, x, y) == 0) {\n        return true;\n      }\n      if (tree.left != null && isPointOnLine(tree.left, x, y)) {\n        return true;\n      }\n      if (tree.right != null && maxY >= tree.low && isPointOnLine(tree.right, x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","date":1571074565,"type":4,"author":"Ignacio Vera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Line2D#isPointOnLine(Edge,double,double).mjava","sourceNew":null,"sourceOld":"  /** returns true if the provided x, y point lies on the line */\n  private boolean isPointOnLine(Edge tree, double x, double y) {\n    if (y <= tree.max) {\n      double minY = StrictMath.min(tree.lat1, tree.lat2);\n      double maxY = StrictMath.max(tree.lat1, tree.lat2);\n      double minX = StrictMath.min(tree.lon1, tree.lon2);\n      double maxX = StrictMath.max(tree.lon1, tree.lon2);\n      if (Rectangle.containsPoint(y, x, minY, maxY, minX, maxX) &&\n          orient(tree.lon1, tree.lat1, tree.lon2, tree.lat2, x, y) == 0) {\n        return true;\n      }\n      if (tree.left != null && isPointOnLine(tree.left, x, y)) {\n        return true;\n      }\n      if (tree.right != null && maxY >= tree.low && isPointOnLine(tree.right, x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Line2D#isPointOnLine(Edge,double,double).mjava","sourceNew":null,"sourceOld":"  /** returns true if the provided x, y point lies on the line */\n  private boolean isPointOnLine(Edge tree, double x, double y) {\n    if (y <= tree.max) {\n      double minY = StrictMath.min(tree.lat1, tree.lat2);\n      double maxY = StrictMath.max(tree.lat1, tree.lat2);\n      double minX = StrictMath.min(tree.lon1, tree.lon2);\n      double maxX = StrictMath.max(tree.lon1, tree.lon2);\n      if (Rectangle.containsPoint(y, x, minY, maxY, minX, maxX) &&\n          orient(tree.lon1, tree.lat1, tree.lon2, tree.lat2, x, y) == 0) {\n        return true;\n      }\n      if (tree.left != null && isPointOnLine(tree.left, x, y)) {\n        return true;\n      }\n      if (tree.right != null && maxY >= tree.low && isPointOnLine(tree.right, x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["fc005279ab64cbf458ccef2ada610bc1a04b6139"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fc005279ab64cbf458ccef2ada610bc1a04b6139":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"b0b597c65628ca9e73913a07e81691f8229bae35":["fc005279ab64cbf458ccef2ada610bc1a04b6139","b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"]},"commit2Childs":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fc005279ab64cbf458ccef2ada610bc1a04b6139"],"fc005279ab64cbf458ccef2ada610bc1a04b6139":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}