{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testOptional().mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testOptional().mjava","pathOld":"/dev/null","sourceNew":"  public void testOptional() throws Exception {\n    Automaton a = Automata.makeString(\"foobar\");\n    Automaton a2 = Operations.optional(a);\n    a2 = Operations.determinize(a2);\n    \n    assertTrue(Operations.run(a, \"foobar\"));\n    assertFalse(Operations.run(a, \"\"));\n    assertTrue(Operations.run(a2, \"foobar\"));\n    assertTrue(Operations.run(a2, \"\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testOptional().mjava","pathOld":"/dev/null","sourceNew":"  public void testOptional() throws Exception {\n    Automaton a = Automata.makeString(\"foobar\");\n    Automaton a2 = Operations.optional(a);\n    a2 = Operations.determinize(a2);\n    \n    assertTrue(Operations.run(a, \"foobar\"));\n    assertFalse(Operations.run(a, \"\"));\n    assertTrue(Operations.run(a2, \"foobar\"));\n    assertTrue(Operations.run(a2, \"\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testOptional().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testOptional().mjava","sourceNew":"  public void testOptional() throws Exception {\n    Automaton a = Automata.makeString(\"foobar\");\n    Automaton a2 = Operations.optional(a);\n    a2 = Operations.determinize(a2, DEFAULT_MAX_DETERMINIZED_STATES);\n    \n    assertTrue(Operations.run(a, \"foobar\"));\n    assertFalse(Operations.run(a, \"\"));\n    assertTrue(Operations.run(a2, \"foobar\"));\n    assertTrue(Operations.run(a2, \"\"));\n  }\n\n","sourceOld":"  public void testOptional() throws Exception {\n    Automaton a = Automata.makeString(\"foobar\");\n    Automaton a2 = Operations.optional(a);\n    a2 = Operations.determinize(a2);\n    \n    assertTrue(Operations.run(a, \"foobar\"));\n    assertFalse(Operations.run(a, \"\"));\n    assertTrue(Operations.run(a2, \"foobar\"));\n    assertTrue(Operations.run(a2, \"\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b316f82baae88f5e279893a9cb7eee51fd8902f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5c84485629d80d203608e8975a1139de9933cc38":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}