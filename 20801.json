{"path":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","sourceNew":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n\n    String stringIncludingLocalParams = qstr;\n    SolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      Map<String, String> localMap = new HashMap<String, String>();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localMap, globalParams);\n\n      String val = localMap.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localMap.put(QueryParsing.V, val);\n      }\n      localParams = new MapSolrParams(localMap);\n    }\n\n\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      type = localParams.get(QueryParsing.TYPE,defaultType);\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","sourceOld":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n\n    String stringIncludingLocalParams = qstr;\n    SolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      Map<String, String> localMap = new HashMap<String, String>();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localMap, globalParams);\n\n      String val = localMap.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localMap.put(QueryParsing.V, val);\n      }\n      localParams = new MapSolrParams(localMap);\n    }\n\n\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      type = localParams.get(QueryParsing.TYPE,defaultType);\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","sourceNew":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n\n    String stringIncludingLocalParams = qstr;\n    SolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      Map<String, String> localMap = new HashMap<String, String>();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localMap, globalParams);\n\n      String val = localMap.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localMap.put(QueryParsing.V, val);\n      }\n      localParams = new MapSolrParams(localMap);\n    }\n\n\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      type = localParams.get(QueryParsing.TYPE,defaultType);\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","sourceOld":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n\n    String stringIncludingLocalParams = qstr;\n    SolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      Map<String, String> localMap = new HashMap<String, String>();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localMap, globalParams);\n\n      String val = localMap.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localMap.put(QueryParsing.V, val);\n      }\n      localParams = new MapSolrParams(localMap);\n    }\n\n\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      type = localParams.get(QueryParsing.TYPE,defaultType);\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","sourceNew":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n\n    String stringIncludingLocalParams = qstr;\n    SolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      Map<String, String> localMap = new HashMap<String, String>();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localMap, globalParams);\n\n      String val = localMap.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localMap.put(QueryParsing.V, val);\n      }\n      localParams = new MapSolrParams(localMap);\n    }\n\n\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      type = localParams.get(QueryParsing.TYPE,defaultType);\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","sourceOld":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n\n    String stringIncludingLocalParams = qstr;\n    SolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      Map<String, String> localMap = new HashMap<String, String>();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localMap, globalParams);\n\n      String val = localMap.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localMap.put(QueryParsing.V, val);\n      }\n      localParams = new MapSolrParams(localMap);\n    }\n\n\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      type = localParams.get(QueryParsing.TYPE,defaultType);\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0870e32fa7a0102b83abf570fd545f78e9290612","date":1340332896,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","sourceNew":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query parser is <code>defaultParser</code>.\n   * The query parser may be overridden by local parameters in the query\n   * string itself.  For example if defaultParser=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultParser, SolrQueryRequest req) throws ParseException {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n\n    String stringIncludingLocalParams = qstr;\n    SolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      Map<String, String> localMap = new HashMap<String, String>();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localMap, globalParams);\n\n      String val = localMap.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localMap.put(QueryParsing.V, val);\n      }\n      localParams = new MapSolrParams(localMap);\n    }\n\n\n    String parserName;\n    \n    if (localParams == null) {\n      parserName = defaultParser;\n    } else {\n      parserName = localParams.get(QueryParsing.TYPE,defaultParser);\n      qstr = localParams.get(\"v\");\n    }\n\n    parserName = parserName==null ? QParserPlugin.DEFAULT_QTYPE : parserName;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(parserName);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","sourceOld":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n\n    String stringIncludingLocalParams = qstr;\n    SolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      Map<String, String> localMap = new HashMap<String, String>();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localMap, globalParams);\n\n      String val = localMap.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localMap.put(QueryParsing.V, val);\n      }\n      localParams = new MapSolrParams(localMap);\n    }\n\n\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      type = localParams.get(QueryParsing.TYPE,defaultType);\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","sourceNew":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query parser is <code>defaultParser</code>.\n   * The query parser may be overridden by local parameters in the query\n   * string itself.  For example if defaultParser=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultParser, SolrQueryRequest req) throws ParseException {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n\n    String stringIncludingLocalParams = qstr;\n    SolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      Map<String, String> localMap = new HashMap<String, String>();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localMap, globalParams);\n\n      String val = localMap.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localMap.put(QueryParsing.V, val);\n      }\n      localParams = new MapSolrParams(localMap);\n    }\n\n\n    String parserName;\n    \n    if (localParams == null) {\n      parserName = defaultParser;\n    } else {\n      parserName = localParams.get(QueryParsing.TYPE,defaultParser);\n      qstr = localParams.get(\"v\");\n    }\n\n    parserName = parserName==null ? QParserPlugin.DEFAULT_QTYPE : parserName;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(parserName);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","sourceOld":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query type is <code>defaultType</code>.\n   * The query type may be overridden by local parameters in the query\n   * string itself.  For example if defaultType=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultType, SolrQueryRequest req) throws ParseException {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n\n    String stringIncludingLocalParams = qstr;\n    SolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      Map<String, String> localMap = new HashMap<String, String>();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localMap, globalParams);\n\n      String val = localMap.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localMap.put(QueryParsing.V, val);\n      }\n      localParams = new MapSolrParams(localMap);\n    }\n\n\n    String type;\n    \n    if (localParams == null) {\n      type = defaultType;\n    } else {\n      type = localParams.get(QueryParsing.TYPE,defaultType);\n      qstr = localParams.get(\"v\");\n    }\n\n    type = type==null ? QParserPlugin.DEFAULT_QTYPE : type;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(type);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","sourceNew":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query parser is <code>defaultParser</code>.\n   * The query parser may be overridden by local parameters in the query\n   * string itself.  For example if defaultParser=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultParser, SolrQueryRequest req) throws SyntaxError {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n\n    String stringIncludingLocalParams = qstr;\n    SolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      Map<String, String> localMap = new HashMap<String, String>();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localMap, globalParams);\n\n      String val = localMap.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localMap.put(QueryParsing.V, val);\n      }\n      localParams = new MapSolrParams(localMap);\n    }\n\n\n    String parserName;\n    \n    if (localParams == null) {\n      parserName = defaultParser;\n    } else {\n      parserName = localParams.get(QueryParsing.TYPE,defaultParser);\n      qstr = localParams.get(\"v\");\n    }\n\n    parserName = parserName==null ? QParserPlugin.DEFAULT_QTYPE : parserName;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(parserName);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","sourceOld":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query parser is <code>defaultParser</code>.\n   * The query parser may be overridden by local parameters in the query\n   * string itself.  For example if defaultParser=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultParser, SolrQueryRequest req) throws ParseException {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n\n    String stringIncludingLocalParams = qstr;\n    SolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      Map<String, String> localMap = new HashMap<String, String>();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localMap, globalParams);\n\n      String val = localMap.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localMap.put(QueryParsing.V, val);\n      }\n      localParams = new MapSolrParams(localMap);\n    }\n\n\n    String parserName;\n    \n    if (localParams == null) {\n      parserName = defaultParser;\n    } else {\n      parserName = localParams.get(QueryParsing.TYPE,defaultParser);\n      qstr = localParams.get(\"v\");\n    }\n\n    parserName = parserName==null ? QParserPlugin.DEFAULT_QTYPE : parserName;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(parserName);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","sourceNew":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query parser is <code>defaultParser</code>.\n   * The query parser may be overridden by local parameters in the query\n   * string itself.  For example if defaultParser=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultParser, SolrQueryRequest req) throws SyntaxError {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n\n    String stringIncludingLocalParams = qstr;\n    SolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      Map<String, String> localMap = new HashMap<String, String>();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localMap, globalParams);\n\n      String val = localMap.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localMap.put(QueryParsing.V, val);\n      }\n      localParams = new MapSolrParams(localMap);\n    }\n\n\n    String parserName;\n    \n    if (localParams == null) {\n      parserName = defaultParser;\n    } else {\n      parserName = localParams.get(QueryParsing.TYPE,defaultParser);\n      qstr = localParams.get(\"v\");\n    }\n\n    parserName = parserName==null ? QParserPlugin.DEFAULT_QTYPE : parserName;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(parserName);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","sourceOld":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query parser is <code>defaultParser</code>.\n   * The query parser may be overridden by local parameters in the query\n   * string itself.  For example if defaultParser=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultParser, SolrQueryRequest req) throws ParseException {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n\n    String stringIncludingLocalParams = qstr;\n    SolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      Map<String, String> localMap = new HashMap<String, String>();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localMap, globalParams);\n\n      String val = localMap.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localMap.put(QueryParsing.V, val);\n      }\n      localParams = new MapSolrParams(localMap);\n    }\n\n\n    String parserName;\n    \n    if (localParams == null) {\n      parserName = defaultParser;\n    } else {\n      parserName = localParams.get(QueryParsing.TYPE,defaultParser);\n      qstr = localParams.get(\"v\");\n    }\n\n    parserName = parserName==null ? QParserPlugin.DEFAULT_QTYPE : parserName;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(parserName);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","sourceNew":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query parser is <code>defaultParser</code>.\n   * The query parser may be overridden by local parameters in the query\n   * string itself.  For example if defaultParser=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultParser, SolrQueryRequest req) throws SyntaxError {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n\n    String stringIncludingLocalParams = qstr;\n    SolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      Map<String, String> localMap = new HashMap<String, String>();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localMap, globalParams);\n\n      String val = localMap.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localMap.put(QueryParsing.V, val);\n      }\n      localParams = new MapSolrParams(localMap);\n    }\n\n\n    String parserName;\n    \n    if (localParams == null) {\n      parserName = defaultParser;\n    } else {\n      parserName = localParams.get(QueryParsing.TYPE,defaultParser);\n      qstr = localParams.get(\"v\");\n    }\n\n    parserName = parserName==null ? QParserPlugin.DEFAULT_QTYPE : parserName;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(parserName);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","sourceOld":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query parser is <code>defaultParser</code>.\n   * The query parser may be overridden by local parameters in the query\n   * string itself.  For example if defaultParser=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultParser, SolrQueryRequest req) throws SyntaxError {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n\n    String stringIncludingLocalParams = qstr;\n    SolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      Map<String, String> localMap = new HashMap<String, String>();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localMap, globalParams);\n\n      String val = localMap.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localMap.put(QueryParsing.V, val);\n      }\n      localParams = new MapSolrParams(localMap);\n    }\n\n\n    String parserName;\n    \n    if (localParams == null) {\n      parserName = defaultParser;\n    } else {\n      parserName = localParams.get(QueryParsing.TYPE,defaultParser);\n      qstr = localParams.get(\"v\");\n    }\n\n    parserName = parserName==null ? QParserPlugin.DEFAULT_QTYPE : parserName;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(parserName);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","sourceNew":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query parser is <code>defaultParser</code>.\n   * The query parser may be overridden by local parameters in the query\n   * string itself.  For example if defaultParser=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultParser, SolrQueryRequest req) throws SyntaxError {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n\n    String stringIncludingLocalParams = qstr;\n    SolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      Map<String, String> localMap = new HashMap<String, String>();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localMap, globalParams);\n\n      String val = localMap.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localMap.put(QueryParsing.V, val);\n      }\n      localParams = new MapSolrParams(localMap);\n    }\n\n\n    String parserName;\n    \n    if (localParams == null) {\n      parserName = defaultParser;\n    } else {\n      parserName = localParams.get(QueryParsing.TYPE,defaultParser);\n      qstr = localParams.get(\"v\");\n    }\n\n    parserName = parserName==null ? QParserPlugin.DEFAULT_QTYPE : parserName;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(parserName);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","sourceOld":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query parser is <code>defaultParser</code>.\n   * The query parser may be overridden by local parameters in the query\n   * string itself.  For example if defaultParser=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultParser, SolrQueryRequest req) throws SyntaxError {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n\n    String stringIncludingLocalParams = qstr;\n    SolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      Map<String, String> localMap = new HashMap<String, String>();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localMap, globalParams);\n\n      String val = localMap.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localMap.put(QueryParsing.V, val);\n      }\n      localParams = new MapSolrParams(localMap);\n    }\n\n\n    String parserName;\n    \n    if (localParams == null) {\n      parserName = defaultParser;\n    } else {\n      parserName = localParams.get(QueryParsing.TYPE,defaultParser);\n      qstr = localParams.get(\"v\");\n    }\n\n    parserName = parserName==null ? QParserPlugin.DEFAULT_QTYPE : parserName;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(parserName);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","sourceNew":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query parser is <code>defaultParser</code>.\n   * The query parser may be overridden by local parameters in the query\n   * string itself.  For example if defaultParser=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultParser, SolrQueryRequest req) throws SyntaxError {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n\n    String stringIncludingLocalParams = qstr;\n    SolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      Map<String, String> localMap = new HashMap<>();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localMap, globalParams);\n\n      String val = localMap.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localMap.put(QueryParsing.V, val);\n      }\n      localParams = new MapSolrParams(localMap);\n    }\n\n\n    String parserName;\n    \n    if (localParams == null) {\n      parserName = defaultParser;\n    } else {\n      parserName = localParams.get(QueryParsing.TYPE,defaultParser);\n      qstr = localParams.get(\"v\");\n    }\n\n    parserName = parserName==null ? QParserPlugin.DEFAULT_QTYPE : parserName;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(parserName);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","sourceOld":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query parser is <code>defaultParser</code>.\n   * The query parser may be overridden by local parameters in the query\n   * string itself.  For example if defaultParser=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultParser, SolrQueryRequest req) throws SyntaxError {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n\n    String stringIncludingLocalParams = qstr;\n    SolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      Map<String, String> localMap = new HashMap<String, String>();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localMap, globalParams);\n\n      String val = localMap.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localMap.put(QueryParsing.V, val);\n      }\n      localParams = new MapSolrParams(localMap);\n    }\n\n\n    String parserName;\n    \n    if (localParams == null) {\n      parserName = defaultParser;\n    } else {\n      parserName = localParams.get(QueryParsing.TYPE,defaultParser);\n      qstr = localParams.get(\"v\");\n    }\n\n    parserName = parserName==null ? QParserPlugin.DEFAULT_QTYPE : parserName;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(parserName);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a2e3a7d2549a34fb7ec9be55424e41388025336","date":1452801298,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","sourceNew":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query parser is <code>defaultParser</code>.\n   * The query parser may be overridden by local parameters in the query\n   * string itself.  For example if defaultParser=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultParser, SolrQueryRequest req) throws SyntaxError {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n\n    String stringIncludingLocalParams = qstr;\n    ModifiableSolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      localParams = new ModifiableSolrParams();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localParams, globalParams);\n\n      String val = localParams.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localParams.set(QueryParsing.V, val);\n      }\n    }\n\n\n    String parserName;\n    \n    if (localParams == null) {\n      parserName = defaultParser;\n    } else {\n      parserName = localParams.get(QueryParsing.TYPE,defaultParser);\n      qstr = localParams.get(\"v\");\n    }\n\n    parserName = parserName==null ? QParserPlugin.DEFAULT_QTYPE : parserName;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(parserName);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","sourceOld":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query parser is <code>defaultParser</code>.\n   * The query parser may be overridden by local parameters in the query\n   * string itself.  For example if defaultParser=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultParser, SolrQueryRequest req) throws SyntaxError {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n\n    String stringIncludingLocalParams = qstr;\n    SolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      Map<String, String> localMap = new HashMap<>();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localMap, globalParams);\n\n      String val = localMap.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localMap.put(QueryParsing.V, val);\n      }\n      localParams = new MapSolrParams(localMap);\n    }\n\n\n    String parserName;\n    \n    if (localParams == null) {\n      parserName = defaultParser;\n    } else {\n      parserName = localParams.get(QueryParsing.TYPE,defaultParser);\n      qstr = localParams.get(\"v\");\n    }\n\n    parserName = parserName==null ? QParserPlugin.DEFAULT_QTYPE : parserName;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(parserName);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a91f19e3f7576973404e13b7ecfb8ae94f313921","date":1511358452,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Create a {@link QParser} to parse <code>qstr</code> using the <code>defaultParser</code>.\n   * Note that local-params is only parsed when the defaultParser is \"lucene\" or \"func\".\n   */\n  public static QParser getParser(String qstr, String defaultParser, SolrQueryRequest req) throws SyntaxError {\n    boolean allowLocalParams = defaultParser == null || defaultParser.equals(QParserPlugin.DEFAULT_QTYPE)\n        || defaultParser.equals(FunctionQParserPlugin.NAME);\n    return getParser(qstr, defaultParser, allowLocalParams, req);\n  }\n\n","sourceOld":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query parser is <code>defaultParser</code>.\n   * The query parser may be overridden by local parameters in the query\n   * string itself.  For example if defaultParser=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultParser, SolrQueryRequest req) throws SyntaxError {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n\n    String stringIncludingLocalParams = qstr;\n    ModifiableSolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      localParams = new ModifiableSolrParams();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localParams, globalParams);\n\n      String val = localParams.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localParams.set(QueryParsing.V, val);\n      }\n    }\n\n\n    String parserName;\n    \n    if (localParams == null) {\n      parserName = defaultParser;\n    } else {\n      parserName = localParams.get(QueryParsing.TYPE,defaultParser);\n      qstr = localParams.get(\"v\");\n    }\n\n    parserName = parserName==null ? QParserPlugin.DEFAULT_QTYPE : parserName;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(parserName);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4aee4980038a10791618ea04e79233ce5cbf6607","date":1511366888,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QParser#getParser(String,String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Create a {@link QParser} to parse <code>qstr</code> using the <code>defaultParser</code>.\n   * Note that local-params is only parsed when the defaultParser is \"lucene\" or \"func\".\n   */\n  public static QParser getParser(String qstr, String defaultParser, SolrQueryRequest req) throws SyntaxError {\n    boolean allowLocalParams = defaultParser == null || defaultParser.equals(QParserPlugin.DEFAULT_QTYPE)\n        || defaultParser.equals(FunctionQParserPlugin.NAME);\n    return getParser(qstr, defaultParser, allowLocalParams, req);\n  }\n\n","sourceOld":"  /** Create a <code>QParser</code> to parse <code>qstr</code>,\n   * assuming that the default query parser is <code>defaultParser</code>.\n   * The query parser may be overridden by local parameters in the query\n   * string itself.  For example if defaultParser=<code>\"dismax\"</code>\n   * and qstr=<code>foo</code>, then the dismax query parser will be used\n   * to parse and construct the query object.  However\n   * if qstr=<code>{!prefix f=myfield}foo</code>\n   * then the prefix query parser will be used.\n   */\n  public static QParser getParser(String qstr, String defaultParser, SolrQueryRequest req) throws SyntaxError {\n    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());\n\n    String stringIncludingLocalParams = qstr;\n    ModifiableSolrParams localParams = null;\n    SolrParams globalParams = req.getParams();\n    boolean valFollowedParams = true;\n    int localParamsEnd = -1;\n\n    if (qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {\n      localParams = new ModifiableSolrParams();\n      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localParams, globalParams);\n\n      String val = localParams.get(QueryParsing.V);\n      if (val != null) {\n        // val was directly specified in localParams via v=<something> or v=$arg\n        valFollowedParams = false;\n      } else {\n        // use the remainder of the string as the value\n        valFollowedParams = true;\n        val = qstr.substring(localParamsEnd);\n        localParams.set(QueryParsing.V, val);\n      }\n    }\n\n\n    String parserName;\n    \n    if (localParams == null) {\n      parserName = defaultParser;\n    } else {\n      parserName = localParams.get(QueryParsing.TYPE,defaultParser);\n      qstr = localParams.get(\"v\");\n    }\n\n    parserName = parserName==null ? QParserPlugin.DEFAULT_QTYPE : parserName;\n\n    QParserPlugin qplug = req.getCore().getQueryPlugin(parserName);\n    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);\n\n    parser.stringIncludingLocalParams = stringIncludingLocalParams;\n    parser.valFollowedParams = valFollowedParams;\n    parser.localParamsEnd = localParamsEnd;\n    return parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["3cdb67100dc016748799a77218aa409478372d79","19275ba31e621f6da1b83bf13af75233876fd3d4"],"3a2e3a7d2549a34fb7ec9be55424e41388025336":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3cdb67100dc016748799a77218aa409478372d79":["0870e32fa7a0102b83abf570fd545f78e9290612"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"407687e67faf6e1f02a211ca078d8e3eed631027":["0870e32fa7a0102b83abf570fd545f78e9290612","3cdb67100dc016748799a77218aa409478372d79"],"a91f19e3f7576973404e13b7ecfb8ae94f313921":["3a2e3a7d2549a34fb7ec9be55424e41388025336"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["3cdb67100dc016748799a77218aa409478372d79"],"0870e32fa7a0102b83abf570fd545f78e9290612":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c26f00b574427b55127e869b935845554afde1fa","0870e32fa7a0102b83abf570fd545f78e9290612"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4aee4980038a10791618ea04e79233ce5cbf6607":["3a2e3a7d2549a34fb7ec9be55424e41388025336","a91f19e3f7576973404e13b7ecfb8ae94f313921"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4aee4980038a10791618ea04e79233ce5cbf6607"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a2e3a7d2549a34fb7ec9be55424e41388025336"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"3cdb67100dc016748799a77218aa409478372d79":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","407687e67faf6e1f02a211ca078d8e3eed631027","19275ba31e621f6da1b83bf13af75233876fd3d4"],"3a2e3a7d2549a34fb7ec9be55424e41388025336":["a91f19e3f7576973404e13b7ecfb8ae94f313921","4aee4980038a10791618ea04e79233ce5cbf6607"],"c26f00b574427b55127e869b935845554afde1fa":["0870e32fa7a0102b83abf570fd545f78e9290612","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"a91f19e3f7576973404e13b7ecfb8ae94f313921":["4aee4980038a10791618ea04e79233ce5cbf6607"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"0870e32fa7a0102b83abf570fd545f78e9290612":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"4aee4980038a10791618ea04e79233ce5cbf6607":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","407687e67faf6e1f02a211ca078d8e3eed631027","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}