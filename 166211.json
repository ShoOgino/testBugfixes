{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISICacheFactory#getCache(IndexInput,long,long,String).mjava","commits":[{"id":"fb9d1512598fc72005b830d5e2b88e61a0f4b374","date":1543843391,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISICacheFactory#getCache(IndexInput,long,long,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a cache (jump table) for {@link IndexedDISI}.\n   * If the cache has previously been created, the old cache is returned.\n   * @param data   the slice to create a cache for.\n   * @param offset same as the offset that will also be used for creating an {@link IndexedDISI}.\n   * @param length same af the length that will also be used for creating an {@link IndexedDISI}.\n   * @param name human readable designation, typically a field name. Used for debug, log and inspection.\n   * @return a cache for the given slice+offset+length or null if not suitable for caching.\n   */\n  public IndexedDISICache getCache(IndexInput data, long offset, long length, String name) throws IOException {\n    if (length < MIN_LENGTH_FOR_CACHING) {\n      return null;\n    }\n\n    long key = offset + length;\n    IndexedDISICache cache = disiPool.get(key);\n    if (cache == null) {\n      // TODO: Avoid overlapping builds of the same cache for performance reason\n      cache = new IndexedDISICache(data.slice(\"docs\", offset, length), name);\n      disiPool.put(key, cache);\n    }\n    return cache;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c74cb19c6e988ccfef4286a1f3f0e5930f0863e","date":1544534277,"type":4,"author":"Toke Eskildsen","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISICacheFactory#getCache(IndexInput,long,long,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a cache (jump table) for {@link IndexedDISI}.\n   * If the cache has previously been created, the old cache is returned.\n   * @param data   the slice to create a cache for.\n   * @param offset same as the offset that will also be used for creating an {@link IndexedDISI}.\n   * @param length same af the length that will also be used for creating an {@link IndexedDISI}.\n   * @param name human readable designation, typically a field name. Used for debug, log and inspection.\n   * @return a cache for the given slice+offset+length or null if not suitable for caching.\n   */\n  public IndexedDISICache getCache(IndexInput data, long offset, long length, String name) throws IOException {\n    if (length < MIN_LENGTH_FOR_CACHING) {\n      return null;\n    }\n\n    long key = offset + length;\n    IndexedDISICache cache = disiPool.get(key);\n    if (cache == null) {\n      // TODO: Avoid overlapping builds of the same cache for performance reason\n      cache = new IndexedDISICache(data.slice(\"docs\", offset, length), name);\n      disiPool.put(key, cache);\n    }\n    return cache;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd70c9571310639a77f0123aea0db41077d9bb6","date":1544538617,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/IndexedDISICacheFactory#getCache(IndexInput,long,long,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a cache (jump table) for {@link IndexedDISI}.\n   * If the cache has previously been created, the old cache is returned.\n   * @param data   the slice to create a cache for.\n   * @param offset same as the offset that will also be used for creating an {@link IndexedDISI}.\n   * @param length same af the length that will also be used for creating an {@link IndexedDISI}.\n   * @param name human readable designation, typically a field name. Used for debug, log and inspection.\n   * @return a cache for the given slice+offset+length or null if not suitable for caching.\n   */\n  public IndexedDISICache getCache(IndexInput data, long offset, long length, String name) throws IOException {\n    if (length < MIN_LENGTH_FOR_CACHING) {\n      return null;\n    }\n\n    long key = offset + length;\n    IndexedDISICache cache = disiPool.get(key);\n    if (cache == null) {\n      // TODO: Avoid overlapping builds of the same cache for performance reason\n      cache = new IndexedDISICache(data.slice(\"docs\", offset, length), name);\n      disiPool.put(key, cache);\n    }\n    return cache;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cfd70c9571310639a77f0123aea0db41077d9bb6":["fb9d1512598fc72005b830d5e2b88e61a0f4b374","5c74cb19c6e988ccfef4286a1f3f0e5930f0863e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb9d1512598fc72005b830d5e2b88e61a0f4b374":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c74cb19c6e988ccfef4286a1f3f0e5930f0863e":["fb9d1512598fc72005b830d5e2b88e61a0f4b374"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfd70c9571310639a77f0123aea0db41077d9bb6"]},"commit2Childs":{"cfd70c9571310639a77f0123aea0db41077d9bb6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb9d1512598fc72005b830d5e2b88e61a0f4b374"],"fb9d1512598fc72005b830d5e2b88e61a0f4b374":["cfd70c9571310639a77f0123aea0db41077d9bb6","5c74cb19c6e988ccfef4286a1f3f0e5930f0863e"],"5c74cb19c6e988ccfef4286a1f3f0e5930f0863e":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}