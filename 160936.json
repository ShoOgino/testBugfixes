{"path":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#tsToString(TokenStream).mjava","commits":[{"id":"540f57ba7d9d46ccc6f0157e8b8021a4c969770d","date":1272974241,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#tsToString(TokenStream).mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestPatternTokenizerFactory#tsToString(TokenStream).mjava","sourceNew":"  /** \n   * TODO: rewrite tests not to use string comparison.\n   * @deprecated only tests TermAttribute!\n   */\n  private static String tsToString(TokenStream in) throws IOException {\n    StringBuilder out = new StringBuilder();\n    CharTermAttribute termAtt = in.addAttribute(CharTermAttribute.class);\n    // extra safety to enforce, that the state is not preserved and also\n    // assign bogus values\n    in.clearAttributes();\n    termAtt.setEmpty().append(\"bogusTerm\");\n    while (in.incrementToken()) {\n      if (out.length() > 0)\n        out.append(' ');\n      out.append(termAtt.toString());\n      in.clearAttributes();\n      termAtt.setEmpty().append(\"bogusTerm\");\n    }\n\n    in.close();\n    return out.toString();\n  }\n\n","sourceOld":"  /** \n   * TODO: rewrite tests not to use string comparison.\n   * @deprecated only tests TermAttribute!\n   */\n  private static String tsToString(TokenStream in) throws IOException {\n    StringBuilder out = new StringBuilder();\n    CharTermAttribute termAtt = in.addAttribute(CharTermAttribute.class);\n    // extra safety to enforce, that the state is not preserved and also\n    // assign bogus values\n    in.clearAttributes();\n    termAtt.setEmpty().append(\"bogusTerm\");\n    while (in.incrementToken()) {\n      if (out.length() > 0)\n        out.append(' ');\n      out.append(termAtt.toString());\n      in.clearAttributes();\n      termAtt.setEmpty().append(\"bogusTerm\");\n    }\n\n    in.close();\n    return out.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#tsToString(TokenStream).mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#tsToString(TokenStream).mjava","sourceNew":"  /** \n   * TODO: rewrite tests not to use string comparison.\n   * @deprecated only tests TermAttribute!\n   */\n  private static String tsToString(TokenStream in) throws IOException {\n    StringBuilder out = new StringBuilder();\n    CharTermAttribute termAtt = in.addAttribute(CharTermAttribute.class);\n    // extra safety to enforce, that the state is not preserved and also\n    // assign bogus values\n    in.clearAttributes();\n    termAtt.setEmpty().append(\"bogusTerm\");\n    while (in.incrementToken()) {\n      if (out.length() > 0)\n        out.append(' ');\n      out.append(termAtt.toString());\n      in.clearAttributes();\n      termAtt.setEmpty().append(\"bogusTerm\");\n    }\n\n    in.close();\n    return out.toString();\n  }\n\n","sourceOld":"  /** \n   * TODO: rewrite tests not to use string comparison.\n   * @deprecated only tests TermAttribute!\n   */\n  private static String tsToString(TokenStream in) throws IOException {\n    StringBuilder out = new StringBuilder();\n    CharTermAttribute termAtt = in.addAttribute(CharTermAttribute.class);\n    // extra safety to enforce, that the state is not preserved and also\n    // assign bogus values\n    in.clearAttributes();\n    termAtt.setEmpty().append(\"bogusTerm\");\n    while (in.incrementToken()) {\n      if (out.length() > 0)\n        out.append(' ');\n      out.append(termAtt.toString());\n      in.clearAttributes();\n      termAtt.setEmpty().append(\"bogusTerm\");\n    }\n\n    in.close();\n    return out.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"540f57ba7d9d46ccc6f0157e8b8021a4c969770d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["540f57ba7d9d46ccc6f0157e8b8021a4c969770d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["540f57ba7d9d46ccc6f0157e8b8021a4c969770d"],"540f57ba7d9d46ccc6f0157e8b8021a4c969770d":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}