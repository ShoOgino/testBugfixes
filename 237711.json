{"path":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,CharSequence,IndexableFieldType).mjava","commits":[{"id":"4e7ba4f223712927a09f4dfb65a4c261d07ccc54","date":1544513757,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,CharSequence,IndexableFieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,String,IndexableFieldType).mjava","sourceNew":"  /**\n   * Create field with String value.\n   * @param name field name\n   * @param value string value\n   * @param type field type\n   * @throws IllegalArgumentException if either the name, value or type\n   *         is null, or if the field's type is neither indexed() nor stored(), \n   *         or if indexed() is false but storeTermVectors() is true.\n   */\n  public Field(String name, CharSequence value, IndexableFieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name must not be null\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"value must not be null\");\n    }\n    if (type == null) {\n      throw new IllegalArgumentException(\"type must not be null\");\n    }\n    if (!type.stored() && type.indexOptions() == IndexOptions.NONE) {\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n        + \"is neither indexed nor stored\");\n    }\n    this.name = name;\n    this.fieldsData = value;\n    this.type = type;\n  }\n\n","sourceOld":"  /**\n   * Create field with String value.\n   * @param name field name\n   * @param value string value\n   * @param type field type\n   * @throws IllegalArgumentException if either the name, value or type\n   *         is null, or if the field's type is neither indexed() nor stored(), \n   *         or if indexed() is false but storeTermVectors() is true.\n   */\n  public Field(String name, String value, IndexableFieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name must not be null\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"value must not be null\");\n    }\n    if (type == null) {\n      throw new IllegalArgumentException(\"type must not be null\");\n    }\n    if (!type.stored() && type.indexOptions() == IndexOptions.NONE) {\n      throw new IllegalArgumentException(\"it doesn't make sense to have a field that \"\n        + \"is neither indexed nor stored\");\n    }\n    this.name = name;\n    this.fieldsData = value;\n    this.type = type;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4e7ba4f223712927a09f4dfb65a4c261d07ccc54":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e7ba4f223712927a09f4dfb65a4c261d07ccc54"]},"commit2Childs":{"4e7ba4f223712927a09f4dfb65a4c261d07ccc54":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e7ba4f223712927a09f4dfb65a4c261d07ccc54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}