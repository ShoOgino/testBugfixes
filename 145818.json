{"path":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFilterSource(IndexSchema,String,int).mjava","commits":[{"id":"ff403346522eaa9de75403763e297e83a3ea585c","date":1384904731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFilterSource(IndexSchema,String,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Builds a default is missing source that wraps a given source. A missing value is required for all \n   * non-field value sources.\n   * @param schema the schema\n   * @param expressionString The name of the field to build a Field Source from.\n   * @param sourceType FIELD_TYPE for any type of field, NUMBER_TYPE for numeric fields, \n   * DATE_TYPE for date fields and STRING_TYPE for string fields.\n   * @return a value source\n   */\n  @SuppressWarnings(\"deprecation\")\n  private static ValueSource buildFilterSource(IndexSchema schema, String expressionString, int sourceType) {\n    String[] arguments = ExpressionFactory.getArguments(expressionString);\n    if (arguments.length!=2) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid arguments were given for \\\"\"+AnalyticsParams.FILTER+\"\\\".\");\n    }\n    ValueSource delegateSource = buildSourceTree(schema, arguments[0], sourceType);\n    if (delegateSource==null) {\n      return null;\n    }\n    Object defaultObject;\n    Class<? extends ValueSource> type = delegateSource.getClass();\n    ValueSource src = delegateSource;\n    if (delegateSource instanceof FilterFieldSource) {\n      src = ((FilterFieldSource)delegateSource).getRootSource();\n    }\n    if ( src instanceof IntFieldSource) {\n      try {\n        defaultObject = new Integer(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into an integer.\",e);\n      }\n    } else if ( src instanceof LongFieldSource ) {\n      try {\n        defaultObject = new Long(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a long.\",e);\n      }\n    } else if ( src instanceof FloatFieldSource ) {\n      try {\n        defaultObject = new Float(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a float.\",e);\n      }\n    } else if ( src instanceof DoubleFieldSource || src instanceof SingleDoubleFunction ||\n                src instanceof DualDoubleFunction|| src instanceof MultiDoubleFunction) {\n      try {\n        defaultObject = new Double(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a double.\",e);\n      }\n    } else if ( src instanceof DateFieldSource || src instanceof MultiDateFunction) {\n      try {\n        defaultObject = TrieDateField.parseDate(arguments[1]);\n      } catch (ParseException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a date.\",e);\n      }\n    } else {\n      defaultObject = arguments[1];\n    }\n    return new FilterFieldSource(delegateSource,defaultObject);\n  } \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad2513ee0db0cc50a31af45e8acb305599d51de8","date":1385433738,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFilterSource(IndexSchema,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFilterSource(IndexSchema,String,int).mjava","sourceNew":"  /**\n   * Builds a default is missing source that wraps a given source. A missing value is required for all \n   * non-field value sources.\n   * @param schema the schema\n   * @param expressionString The name of the field to build a Field Source from.\n   * @param sourceType FIELD_TYPE for any type of field, NUMBER_TYPE for numeric fields, \n   * DATE_TYPE for date fields and STRING_TYPE for string fields.\n   * @return a value source\n   */\n  @SuppressWarnings(\"deprecation\")\n  private static ValueSource buildFilterSource(IndexSchema schema, String expressionString, int sourceType) {\n    String[] arguments = ExpressionFactory.getArguments(expressionString);\n    if (arguments.length!=2) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid arguments were given for \\\"\"+AnalyticsParams.FILTER+\"\\\".\");\n    }\n    ValueSource delegateSource = buildSourceTree(schema, arguments[0], sourceType);\n    if (delegateSource==null) {\n      return null;\n    }\n    Object defaultObject;\n\n    ValueSource src = delegateSource;\n    if (delegateSource instanceof FilterFieldSource) {\n      src = ((FilterFieldSource)delegateSource).getRootSource();\n    }\n    if ( src instanceof IntFieldSource) {\n      try {\n        defaultObject = new Integer(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into an integer.\",e);\n      }\n    } else if ( src instanceof DateFieldSource || src instanceof MultiDateFunction) {\n      try {\n        defaultObject = TrieDateField.parseDate(arguments[1]);\n      } catch (ParseException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a date.\",e);\n      }\n    } else if ( src instanceof LongFieldSource ) {\n      try {\n        defaultObject = new Long(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a long.\",e);\n      }\n    } else if ( src instanceof FloatFieldSource ) {\n      try {\n        defaultObject = new Float(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a float.\",e);\n      }\n    } else if ( src instanceof DoubleFieldSource || src instanceof SingleDoubleFunction ||\n                src instanceof DualDoubleFunction|| src instanceof MultiDoubleFunction) {\n      try {\n        defaultObject = new Double(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a double.\",e);\n      }\n    } else {\n      defaultObject = arguments[1];\n    }\n    return new FilterFieldSource(delegateSource,defaultObject);\n  } \n\n","sourceOld":"  /**\n   * Builds a default is missing source that wraps a given source. A missing value is required for all \n   * non-field value sources.\n   * @param schema the schema\n   * @param expressionString The name of the field to build a Field Source from.\n   * @param sourceType FIELD_TYPE for any type of field, NUMBER_TYPE for numeric fields, \n   * DATE_TYPE for date fields and STRING_TYPE for string fields.\n   * @return a value source\n   */\n  @SuppressWarnings(\"deprecation\")\n  private static ValueSource buildFilterSource(IndexSchema schema, String expressionString, int sourceType) {\n    String[] arguments = ExpressionFactory.getArguments(expressionString);\n    if (arguments.length!=2) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid arguments were given for \\\"\"+AnalyticsParams.FILTER+\"\\\".\");\n    }\n    ValueSource delegateSource = buildSourceTree(schema, arguments[0], sourceType);\n    if (delegateSource==null) {\n      return null;\n    }\n    Object defaultObject;\n    Class<? extends ValueSource> type = delegateSource.getClass();\n    ValueSource src = delegateSource;\n    if (delegateSource instanceof FilterFieldSource) {\n      src = ((FilterFieldSource)delegateSource).getRootSource();\n    }\n    if ( src instanceof IntFieldSource) {\n      try {\n        defaultObject = new Integer(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into an integer.\",e);\n      }\n    } else if ( src instanceof LongFieldSource ) {\n      try {\n        defaultObject = new Long(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a long.\",e);\n      }\n    } else if ( src instanceof FloatFieldSource ) {\n      try {\n        defaultObject = new Float(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a float.\",e);\n      }\n    } else if ( src instanceof DoubleFieldSource || src instanceof SingleDoubleFunction ||\n                src instanceof DualDoubleFunction|| src instanceof MultiDoubleFunction) {\n      try {\n        defaultObject = new Double(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a double.\",e);\n      }\n    } else if ( src instanceof DateFieldSource || src instanceof MultiDateFunction) {\n      try {\n        defaultObject = TrieDateField.parseDate(arguments[1]);\n      } catch (ParseException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a date.\",e);\n      }\n    } else {\n      defaultObject = arguments[1];\n    }\n    return new FilterFieldSource(delegateSource,defaultObject);\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFilterSource(IndexSchema,String,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Builds a default is missing source that wraps a given source. A missing value is required for all \n   * non-field value sources.\n   * @param schema the schema\n   * @param expressionString The name of the field to build a Field Source from.\n   * @param sourceType FIELD_TYPE for any type of field, NUMBER_TYPE for numeric fields, \n   * DATE_TYPE for date fields and STRING_TYPE for string fields.\n   * @return a value source\n   */\n  @SuppressWarnings(\"deprecation\")\n  private static ValueSource buildFilterSource(IndexSchema schema, String expressionString, int sourceType) {\n    String[] arguments = ExpressionFactory.getArguments(expressionString);\n    if (arguments.length!=2) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid arguments were given for \\\"\"+AnalyticsParams.FILTER+\"\\\".\");\n    }\n    ValueSource delegateSource = buildSourceTree(schema, arguments[0], sourceType);\n    if (delegateSource==null) {\n      return null;\n    }\n    Object defaultObject;\n\n    ValueSource src = delegateSource;\n    if (delegateSource instanceof FilterFieldSource) {\n      src = ((FilterFieldSource)delegateSource).getRootSource();\n    }\n    if ( src instanceof IntFieldSource) {\n      try {\n        defaultObject = new Integer(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into an integer.\",e);\n      }\n    } else if ( src instanceof DateFieldSource || src instanceof MultiDateFunction) {\n      try {\n        defaultObject = TrieDateField.parseDate(arguments[1]);\n      } catch (ParseException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a date.\",e);\n      }\n    } else if ( src instanceof LongFieldSource ) {\n      try {\n        defaultObject = new Long(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a long.\",e);\n      }\n    } else if ( src instanceof FloatFieldSource ) {\n      try {\n        defaultObject = new Float(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a float.\",e);\n      }\n    } else if ( src instanceof DoubleFieldSource || src instanceof SingleDoubleFunction ||\n                src instanceof DualDoubleFunction|| src instanceof MultiDoubleFunction) {\n      try {\n        defaultObject = new Double(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a double.\",e);\n      }\n    } else {\n      defaultObject = arguments[1];\n    }\n    return new FilterFieldSource(delegateSource,defaultObject);\n  } \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFilterSource(IndexSchema,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFilterSource(IndexSchema,String,int).mjava","sourceNew":"  /**\n   * Builds a default is missing source that wraps a given source. A missing value is required for all \n   * non-field value sources.\n   * @param schema the schema\n   * @param expressionString The name of the field to build a Field Source from.\n   * @param sourceType FIELD_TYPE for any type of field, NUMBER_TYPE for numeric fields, \n   * DATE_TYPE for date fields and STRING_TYPE for string fields.\n   * @return a value source\n   */\n  @SuppressWarnings(\"deprecation\")\n  private static ValueSource buildFilterSource(IndexSchema schema, String expressionString, int sourceType) {\n    String[] arguments = ExpressionFactory.getArguments(expressionString);\n    if (arguments.length!=2) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid arguments were given for \\\"\"+AnalyticsParams.FILTER+\"\\\".\");\n    }\n    ValueSource delegateSource = buildSourceTree(schema, arguments[0], sourceType);\n    if (delegateSource==null) {\n      return null;\n    }\n    Object defaultObject;\n\n    ValueSource src = delegateSource;\n    if (delegateSource instanceof FilterFieldSource) {\n      src = ((FilterFieldSource)delegateSource).getRootSource();\n    }\n    if ( src instanceof IntFieldSource) {\n      try {\n        defaultObject = new Integer(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into an integer.\",e);\n      }\n    } else if ( src instanceof DateFieldSource || src instanceof MultiDateFunction) {\n      try {\n        defaultObject = TrieDateField.parseDate(arguments[1]);\n      } catch (ParseException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a date.\",e);\n      }\n    } else if ( src instanceof LongFieldSource ) {\n      try {\n        defaultObject = new Long(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a long.\",e);\n      }\n    } else if ( src instanceof FloatFieldSource ) {\n      try {\n        defaultObject = new Float(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a float.\",e);\n      }\n    } else if ( src instanceof DoubleFieldSource || src instanceof SingleDoubleFunction ||\n                src instanceof DualDoubleFunction|| src instanceof MultiDoubleFunction) {\n      try {\n        defaultObject = new Double(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a double.\",e);\n      }\n    } else {\n      defaultObject = arguments[1];\n    }\n    return new FilterFieldSource(delegateSource,defaultObject);\n  } \n\n","sourceOld":"  /**\n   * Builds a default is missing source that wraps a given source. A missing value is required for all \n   * non-field value sources.\n   * @param schema the schema\n   * @param expressionString The name of the field to build a Field Source from.\n   * @param sourceType FIELD_TYPE for any type of field, NUMBER_TYPE for numeric fields, \n   * DATE_TYPE for date fields and STRING_TYPE for string fields.\n   * @return a value source\n   */\n  @SuppressWarnings(\"deprecation\")\n  private static ValueSource buildFilterSource(IndexSchema schema, String expressionString, int sourceType) {\n    String[] arguments = ExpressionFactory.getArguments(expressionString);\n    if (arguments.length!=2) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid arguments were given for \\\"\"+AnalyticsParams.FILTER+\"\\\".\");\n    }\n    ValueSource delegateSource = buildSourceTree(schema, arguments[0], sourceType);\n    if (delegateSource==null) {\n      return null;\n    }\n    Object defaultObject;\n\n    ValueSource src = delegateSource;\n    if (delegateSource instanceof FilterFieldSource) {\n      src = ((FilterFieldSource)delegateSource).getRootSource();\n    }\n    if ( src instanceof IntFieldSource) {\n      try {\n        defaultObject = new Integer(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into an integer.\",e);\n      }\n    } else if ( src instanceof DateFieldSource || src instanceof MultiDateFunction) {\n      try {\n        defaultObject = TrieDateField.parseDate(arguments[1]);\n      } catch (ParseException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a date.\",e);\n      }\n    } else if ( src instanceof LongFieldSource ) {\n      try {\n        defaultObject = new Long(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a long.\",e);\n      }\n    } else if ( src instanceof FloatFieldSource ) {\n      try {\n        defaultObject = new Float(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a float.\",e);\n      }\n    } else if ( src instanceof DoubleFieldSource || src instanceof SingleDoubleFunction ||\n                src instanceof DualDoubleFunction|| src instanceof MultiDoubleFunction) {\n      try {\n        defaultObject = new Double(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a double.\",e);\n      }\n    } else {\n      defaultObject = arguments[1];\n    }\n    return new FilterFieldSource(delegateSource,defaultObject);\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad2513ee0db0cc50a31af45e8acb305599d51de8":["ff403346522eaa9de75403763e297e83a3ea585c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ad2513ee0db0cc50a31af45e8acb305599d51de8"],"ff403346522eaa9de75403763e297e83a3ea585c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["ad2513ee0db0cc50a31af45e8acb305599d51de8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"ad2513ee0db0cc50a31af45e8acb305599d51de8":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","0f719faa74f7213d4a395510dbc1f1b7cb178484"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ff403346522eaa9de75403763e297e83a3ea585c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ff403346522eaa9de75403763e297e83a3ea585c":["ad2513ee0db0cc50a31af45e8acb305599d51de8"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}