{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/QueryParserUtil#escape(String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/QueryParserUtil#escape(String).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/QueryParserUtil#escape(String).mjava","sourceNew":"  /**\n   * Returns a String where those characters that TextParser expects to be\n   * escaped are escaped by a preceding <code>\\</code>.\n   */\n  public static String escape(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')'\n          || c == ':' || c == '^' || c == '[' || c == ']' || c == '\\\"'\n          || c == '{' || c == '}' || c == '~' || c == '*' || c == '?'\n          || c == '|' || c == '&') {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a String where those characters that TextParser expects to be\n   * escaped are escaped by a preceding <code>\\</code>.\n   */\n  public static String escape(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')'\n          || c == ':' || c == '^' || c == '[' || c == ']' || c == '\\\"'\n          || c == '{' || c == '}' || c == '~' || c == '*' || c == '?'\n          || c == '|' || c == '&') {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"702b008b055d7e1f72c6e90845d8b1e452342f61","date":1372737226,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/QueryParserUtil#escape(String).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/QueryParserUtil#escape(String).mjava","sourceNew":"  /**\n   * Returns a String where those characters that TextParser expects to be\n   * escaped are escaped by a preceding <code>\\</code>.\n   */\n  public static String escape(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')'\n          || c == ':' || c == '^' || c == '[' || c == ']' || c == '\\\"'\n          || c == '{' || c == '}' || c == '~' || c == '*' || c == '?'\n          || c == '|' || c == '&' || c == '/') {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a String where those characters that TextParser expects to be\n   * escaped are escaped by a preceding <code>\\</code>.\n   */\n  public static String escape(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')'\n          || c == ':' || c == '^' || c == '[' || c == ']' || c == '\\\"'\n          || c == '{' || c == '}' || c == '~' || c == '*' || c == '?'\n          || c == '|' || c == '&') {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/QueryParserUtil#escape(String).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/QueryParserUtil#escape(String).mjava","sourceNew":"  /**\n   * Returns a String where those characters that TextParser expects to be\n   * escaped are escaped by a preceding <code>\\</code>.\n   */\n  public static String escape(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')'\n          || c == ':' || c == '^' || c == '[' || c == ']' || c == '\\\"'\n          || c == '{' || c == '}' || c == '~' || c == '*' || c == '?'\n          || c == '|' || c == '&' || c == '/') {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a String where those characters that TextParser expects to be\n   * escaped are escaped by a preceding <code>\\</code>.\n   */\n  public static String escape(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      // These characters are part of the query syntax and must be escaped\n      if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')'\n          || c == ':' || c == '^' || c == '[' || c == ']' || c == '\\\"'\n          || c == '{' || c == '}' || c == '~' || c == '*' || c == '?'\n          || c == '|' || c == '&') {\n        sb.append('\\\\');\n      }\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"702b008b055d7e1f72c6e90845d8b1e452342f61":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["b89678825b68eccaf09e6ab71675fc0b0af1e099","702b008b055d7e1f72c6e90845d8b1e452342f61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["702b008b055d7e1f72c6e90845d8b1e452342f61"]},"commit2Childs":{"702b008b055d7e1f72c6e90845d8b1e452342f61":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["702b008b055d7e1f72c6e90845d8b1e452342f61","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}