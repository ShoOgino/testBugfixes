{"path":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#doPop().mjava","commits":[{"id":"163fe85a71d778fd2b7747f65ca27b54829e2e57","date":1279898785,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#doPop().mjava","pathOld":"/dev/null","sourceNew":"    // Look for seek type 3 (\"pop\"): if the delta from\n    // prev -> current was replacing an S with an E,\n    // we must now seek to beyond that E.  This seek\n    // \"finishes\" the dance at this character\n    // position.\n    private boolean doPop() throws IOException {\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  try pop\");\n      }\n\n      assert newSuffixStart <= prevTerm.length;\n      assert newSuffixStart < scratchTerm.length || newSuffixStart == 0;\n\n      if (prevTerm.length > newSuffixStart &&\n          isNonBMPChar(prevTerm.bytes, newSuffixStart) &&\n          isHighBMPChar(scratchTerm.bytes, newSuffixStart)) {\n\n        // Seek type 2 -- put U+FFFF at this position:\n        // nocommit -- can we somehow use 0xff???\n        scratchTerm.bytes[newSuffixStart] = (byte) 0xff;\n        //scratchTerm.bytes[newSuffixStart] = (byte) 0xef;\n        scratchTerm.bytes[newSuffixStart+1] = (byte) 0xbf;\n        scratchTerm.bytes[newSuffixStart+2] = (byte) 0xbf;\n        scratchTerm.length = newSuffixStart+3;\n\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"    seek to term=\" + UnicodeUtil.toHexString(scratchTerm.utf8ToString()) + \" \" + scratchTerm.toString());\n        }\n          \n        // TODO: more efficient seek?  can we simply swap\n        // the enums?\n        getTermsDict().seekEnum(termEnum, protoTerm.createTerm(scratchTerm));\n\n        final Term t2 = termEnum.term();\n\n        // We could hit EOF or different field since this\n        // was a seek \"forward\":\n        if (t2 != null && t2.field() == fieldInfo.name) {\n\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()) + \" \" + t2.bytes());\n          }\n\n          final BytesRef b2 = t2.bytes();\n          assert b2.offset == 0;\n\n\n          // Set newSuffixStart -- we can't use\n          // termEnum's since the above seek may have\n          // done no scanning (eg, term was precisely\n          // and index term, or, was in the term seek\n          // cache):\n          scratchTerm.copy(b2);\n          setNewSuffixStart(prevTerm, scratchTerm);\n\n          return true;\n        } else if (newSuffixStart != 0 || scratchTerm.length != 0) {\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=null (or next field)\");\n          }\n          newSuffixStart = 0;\n          scratchTerm.length = 0;\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5fe916adfeb72fdd1187d31c86dbd5cf67797ba0","date":1279982320,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#doPop().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#doPop().mjava","sourceNew":"    // Look for seek type 3 (\"pop\"): if the delta from\n    // prev -> current was replacing an S with an E,\n    // we must now seek to beyond that E.  This seek\n    // \"finishes\" the dance at this character\n    // position.\n    private boolean doPop() throws IOException {\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  try pop\");\n      }\n\n      assert newSuffixStart <= prevTerm.length;\n      assert newSuffixStart < scratchTerm.length || newSuffixStart == 0;\n\n      if (prevTerm.length > newSuffixStart &&\n          isNonBMPChar(prevTerm.bytes, newSuffixStart) &&\n          isHighBMPChar(scratchTerm.bytes, newSuffixStart)) {\n\n        // Seek type 2 -- put 0xFF at this position:\n        scratchTerm.bytes[newSuffixStart] = (byte) 0xff;\n        scratchTerm.length = newSuffixStart+1;\n\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"    seek to term=\" + UnicodeUtil.toHexString(scratchTerm.utf8ToString()) + \" \" + scratchTerm.toString());\n        }\n          \n        // TODO: more efficient seek?  can we simply swap\n        // the enums?\n        getTermsDict().seekEnum(termEnum, protoTerm.createTerm(scratchTerm));\n\n        final Term t2 = termEnum.term();\n\n        // We could hit EOF or different field since this\n        // was a seek \"forward\":\n        if (t2 != null && t2.field() == fieldInfo.name) {\n\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()) + \" \" + t2.bytes());\n          }\n\n          final BytesRef b2 = t2.bytes();\n          assert b2.offset == 0;\n\n\n          // Set newSuffixStart -- we can't use\n          // termEnum's since the above seek may have\n          // done no scanning (eg, term was precisely\n          // and index term, or, was in the term seek\n          // cache):\n          scratchTerm.copy(b2);\n          setNewSuffixStart(prevTerm, scratchTerm);\n\n          return true;\n        } else if (newSuffixStart != 0 || scratchTerm.length != 0) {\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=null (or next field)\");\n          }\n          newSuffixStart = 0;\n          scratchTerm.length = 0;\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n","sourceOld":"    // Look for seek type 3 (\"pop\"): if the delta from\n    // prev -> current was replacing an S with an E,\n    // we must now seek to beyond that E.  This seek\n    // \"finishes\" the dance at this character\n    // position.\n    private boolean doPop() throws IOException {\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  try pop\");\n      }\n\n      assert newSuffixStart <= prevTerm.length;\n      assert newSuffixStart < scratchTerm.length || newSuffixStart == 0;\n\n      if (prevTerm.length > newSuffixStart &&\n          isNonBMPChar(prevTerm.bytes, newSuffixStart) &&\n          isHighBMPChar(scratchTerm.bytes, newSuffixStart)) {\n\n        // Seek type 2 -- put U+FFFF at this position:\n        // nocommit -- can we somehow use 0xff???\n        scratchTerm.bytes[newSuffixStart] = (byte) 0xff;\n        //scratchTerm.bytes[newSuffixStart] = (byte) 0xef;\n        scratchTerm.bytes[newSuffixStart+1] = (byte) 0xbf;\n        scratchTerm.bytes[newSuffixStart+2] = (byte) 0xbf;\n        scratchTerm.length = newSuffixStart+3;\n\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"    seek to term=\" + UnicodeUtil.toHexString(scratchTerm.utf8ToString()) + \" \" + scratchTerm.toString());\n        }\n          \n        // TODO: more efficient seek?  can we simply swap\n        // the enums?\n        getTermsDict().seekEnum(termEnum, protoTerm.createTerm(scratchTerm));\n\n        final Term t2 = termEnum.term();\n\n        // We could hit EOF or different field since this\n        // was a seek \"forward\":\n        if (t2 != null && t2.field() == fieldInfo.name) {\n\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()) + \" \" + t2.bytes());\n          }\n\n          final BytesRef b2 = t2.bytes();\n          assert b2.offset == 0;\n\n\n          // Set newSuffixStart -- we can't use\n          // termEnum's since the above seek may have\n          // done no scanning (eg, term was precisely\n          // and index term, or, was in the term seek\n          // cache):\n          scratchTerm.copy(b2);\n          setNewSuffixStart(prevTerm, scratchTerm);\n\n          return true;\n        } else if (newSuffixStart != 0 || scratchTerm.length != 0) {\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=null (or next field)\");\n          }\n          newSuffixStart = 0;\n          scratchTerm.length = 0;\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#doPop().mjava","pathOld":"/dev/null","sourceNew":"    // Look for seek type 3 (\"pop\"): if the delta from\n    // prev -> current was replacing an S with an E,\n    // we must now seek to beyond that E.  This seek\n    // \"finishes\" the dance at this character\n    // position.\n    private boolean doPop() throws IOException {\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  try pop\");\n      }\n\n      assert newSuffixStart <= prevTerm.length;\n      assert newSuffixStart < scratchTerm.length || newSuffixStart == 0;\n\n      if (prevTerm.length > newSuffixStart &&\n          isNonBMPChar(prevTerm.bytes, newSuffixStart) &&\n          isHighBMPChar(scratchTerm.bytes, newSuffixStart)) {\n\n        // Seek type 2 -- put 0xFF at this position:\n        scratchTerm.bytes[newSuffixStart] = (byte) 0xff;\n        scratchTerm.length = newSuffixStart+1;\n\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"    seek to term=\" + UnicodeUtil.toHexString(scratchTerm.utf8ToString()) + \" \" + scratchTerm.toString());\n        }\n          \n        // TODO: more efficient seek?  can we simply swap\n        // the enums?\n        getTermsDict().seekEnum(termEnum, protoTerm.createTerm(scratchTerm));\n\n        final Term t2 = termEnum.term();\n\n        // We could hit EOF or different field since this\n        // was a seek \"forward\":\n        if (t2 != null && t2.field() == fieldInfo.name) {\n\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()) + \" \" + t2.bytes());\n          }\n\n          final BytesRef b2 = t2.bytes();\n          assert b2.offset == 0;\n\n\n          // Set newSuffixStart -- we can't use\n          // termEnum's since the above seek may have\n          // done no scanning (eg, term was precisely\n          // and index term, or, was in the term seek\n          // cache):\n          scratchTerm.copy(b2);\n          setNewSuffixStart(prevTerm, scratchTerm);\n\n          return true;\n        } else if (newSuffixStart != 0 || scratchTerm.length != 0) {\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=null (or next field)\");\n          }\n          newSuffixStart = 0;\n          scratchTerm.length = 0;\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#doPop().mjava","pathOld":"/dev/null","sourceNew":"    // Look for seek type 3 (\"pop\"): if the delta from\n    // prev -> current was replacing an S with an E,\n    // we must now seek to beyond that E.  This seek\n    // \"finishes\" the dance at this character\n    // position.\n    private boolean doPop() throws IOException {\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  try pop\");\n      }\n\n      assert newSuffixStart <= prevTerm.length;\n      assert newSuffixStart < scratchTerm.length || newSuffixStart == 0;\n\n      if (prevTerm.length > newSuffixStart &&\n          isNonBMPChar(prevTerm.bytes, newSuffixStart) &&\n          isHighBMPChar(scratchTerm.bytes, newSuffixStart)) {\n\n        // Seek type 2 -- put 0xFF at this position:\n        scratchTerm.bytes[newSuffixStart] = (byte) 0xff;\n        scratchTerm.length = newSuffixStart+1;\n\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"    seek to term=\" + UnicodeUtil.toHexString(scratchTerm.utf8ToString()) + \" \" + scratchTerm.toString());\n        }\n          \n        // TODO: more efficient seek?  can we simply swap\n        // the enums?\n        getTermsDict().seekEnum(termEnum, protoTerm.createTerm(scratchTerm));\n\n        final Term t2 = termEnum.term();\n\n        // We could hit EOF or different field since this\n        // was a seek \"forward\":\n        if (t2 != null && t2.field() == fieldInfo.name) {\n\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()) + \" \" + t2.bytes());\n          }\n\n          final BytesRef b2 = t2.bytes();\n          assert b2.offset == 0;\n\n\n          // Set newSuffixStart -- we can't use\n          // termEnum's since the above seek may have\n          // done no scanning (eg, term was precisely\n          // and index term, or, was in the term seek\n          // cache):\n          scratchTerm.copy(b2);\n          setNewSuffixStart(prevTerm, scratchTerm);\n\n          return true;\n        } else if (newSuffixStart != 0 || scratchTerm.length != 0) {\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=null (or next field)\");\n          }\n          newSuffixStart = 0;\n          scratchTerm.length = 0;\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"825bcb488bc228d1fb6a19c1f441a2181f7d766d","date":1285691504,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#doPop().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#doPop().mjava","sourceNew":"    // Look for seek type 3 (\"pop\"): if the delta from\n    // prev -> current was replacing an S with an E,\n    // we must now seek to beyond that E.  This seek\n    // \"finishes\" the dance at this character\n    // position.\n    private boolean doPop() throws IOException {\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  try pop\");\n      }\n\n      assert newSuffixStart <= prevTerm.length;\n      assert newSuffixStart < scratchTerm.length || newSuffixStart == 0;\n\n      if (prevTerm.length > newSuffixStart &&\n          isNonBMPChar(prevTerm.bytes, newSuffixStart) &&\n          isHighBMPChar(scratchTerm.bytes, newSuffixStart)) {\n\n        // Seek type 2 -- put 0xFF at this position:\n        scratchTerm.bytes[newSuffixStart] = (byte) 0xff;\n        scratchTerm.length = newSuffixStart+1;\n\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"    seek to term=\" + UnicodeUtil.toHexString(scratchTerm.utf8ToString()) + \" \" + scratchTerm.toString());\n        }\n          \n        // TODO: more efficient seek?  can we simply swap\n        // the enums?\n        getTermsDict().seekEnum(termEnum, protoTerm.createTerm(scratchTerm), true);\n\n        final Term t2 = termEnum.term();\n\n        // We could hit EOF or different field since this\n        // was a seek \"forward\":\n        if (t2 != null && t2.field() == fieldInfo.name) {\n\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()) + \" \" + t2.bytes());\n          }\n\n          final BytesRef b2 = t2.bytes();\n          assert b2.offset == 0;\n\n\n          // Set newSuffixStart -- we can't use\n          // termEnum's since the above seek may have\n          // done no scanning (eg, term was precisely\n          // and index term, or, was in the term seek\n          // cache):\n          scratchTerm.copy(b2);\n          setNewSuffixStart(prevTerm, scratchTerm);\n\n          return true;\n        } else if (newSuffixStart != 0 || scratchTerm.length != 0) {\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=null (or next field)\");\n          }\n          newSuffixStart = 0;\n          scratchTerm.length = 0;\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n","sourceOld":"    // Look for seek type 3 (\"pop\"): if the delta from\n    // prev -> current was replacing an S with an E,\n    // we must now seek to beyond that E.  This seek\n    // \"finishes\" the dance at this character\n    // position.\n    private boolean doPop() throws IOException {\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  try pop\");\n      }\n\n      assert newSuffixStart <= prevTerm.length;\n      assert newSuffixStart < scratchTerm.length || newSuffixStart == 0;\n\n      if (prevTerm.length > newSuffixStart &&\n          isNonBMPChar(prevTerm.bytes, newSuffixStart) &&\n          isHighBMPChar(scratchTerm.bytes, newSuffixStart)) {\n\n        // Seek type 2 -- put 0xFF at this position:\n        scratchTerm.bytes[newSuffixStart] = (byte) 0xff;\n        scratchTerm.length = newSuffixStart+1;\n\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"    seek to term=\" + UnicodeUtil.toHexString(scratchTerm.utf8ToString()) + \" \" + scratchTerm.toString());\n        }\n          \n        // TODO: more efficient seek?  can we simply swap\n        // the enums?\n        getTermsDict().seekEnum(termEnum, protoTerm.createTerm(scratchTerm));\n\n        final Term t2 = termEnum.term();\n\n        // We could hit EOF or different field since this\n        // was a seek \"forward\":\n        if (t2 != null && t2.field() == fieldInfo.name) {\n\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()) + \" \" + t2.bytes());\n          }\n\n          final BytesRef b2 = t2.bytes();\n          assert b2.offset == 0;\n\n\n          // Set newSuffixStart -- we can't use\n          // termEnum's since the above seek may have\n          // done no scanning (eg, term was precisely\n          // and index term, or, was in the term seek\n          // cache):\n          scratchTerm.copy(b2);\n          setNewSuffixStart(prevTerm, scratchTerm);\n\n          return true;\n        } else if (newSuffixStart != 0 || scratchTerm.length != 0) {\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=null (or next field)\");\n          }\n          newSuffixStart = 0;\n          scratchTerm.length = 0;\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#doPop().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#doPop().mjava","sourceNew":"    // Look for seek type 3 (\"pop\"): if the delta from\n    // prev -> current was replacing an S with an E,\n    // we must now seek to beyond that E.  This seek\n    // \"finishes\" the dance at this character\n    // position.\n    private boolean doPop() throws IOException {\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  try pop\");\n      }\n\n      assert newSuffixStart <= prevTerm.length;\n      assert newSuffixStart < scratchTerm.length || newSuffixStart == 0;\n\n      if (prevTerm.length > newSuffixStart &&\n          isNonBMPChar(prevTerm.bytes, newSuffixStart) &&\n          isHighBMPChar(scratchTerm.bytes, newSuffixStart)) {\n\n        // Seek type 2 -- put 0xFF at this position:\n        scratchTerm.bytes[newSuffixStart] = (byte) 0xff;\n        scratchTerm.length = newSuffixStart+1;\n\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"    seek to term=\" + UnicodeUtil.toHexString(scratchTerm.utf8ToString()) + \" \" + scratchTerm.toString());\n        }\n          \n        // TODO: more efficient seek?  can we simply swap\n        // the enums?\n        getTermsDict().seekEnum(termEnum, protoTerm.createTerm(scratchTerm), true);\n\n        final Term t2 = termEnum.term();\n\n        // We could hit EOF or different field since this\n        // was a seek \"forward\":\n        if (t2 != null && t2.field() == fieldInfo.name) {\n\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()) + \" \" + t2.bytes());\n          }\n\n          final BytesRef b2 = t2.bytes();\n          assert b2.offset == 0;\n\n\n          // Set newSuffixStart -- we can't use\n          // termEnum's since the above seek may have\n          // done no scanning (eg, term was precisely\n          // and index term, or, was in the term seek\n          // cache):\n          scratchTerm.copy(b2);\n          setNewSuffixStart(prevTerm, scratchTerm);\n\n          return true;\n        } else if (newSuffixStart != 0 || scratchTerm.length != 0) {\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=null (or next field)\");\n          }\n          newSuffixStart = 0;\n          scratchTerm.length = 0;\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n","sourceOld":"    // Look for seek type 3 (\"pop\"): if the delta from\n    // prev -> current was replacing an S with an E,\n    // we must now seek to beyond that E.  This seek\n    // \"finishes\" the dance at this character\n    // position.\n    private boolean doPop() throws IOException {\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  try pop\");\n      }\n\n      assert newSuffixStart <= prevTerm.length;\n      assert newSuffixStart < scratchTerm.length || newSuffixStart == 0;\n\n      if (prevTerm.length > newSuffixStart &&\n          isNonBMPChar(prevTerm.bytes, newSuffixStart) &&\n          isHighBMPChar(scratchTerm.bytes, newSuffixStart)) {\n\n        // Seek type 2 -- put 0xFF at this position:\n        scratchTerm.bytes[newSuffixStart] = (byte) 0xff;\n        scratchTerm.length = newSuffixStart+1;\n\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"    seek to term=\" + UnicodeUtil.toHexString(scratchTerm.utf8ToString()) + \" \" + scratchTerm.toString());\n        }\n          \n        // TODO: more efficient seek?  can we simply swap\n        // the enums?\n        getTermsDict().seekEnum(termEnum, protoTerm.createTerm(scratchTerm));\n\n        final Term t2 = termEnum.term();\n\n        // We could hit EOF or different field since this\n        // was a seek \"forward\":\n        if (t2 != null && t2.field() == fieldInfo.name) {\n\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()) + \" \" + t2.bytes());\n          }\n\n          final BytesRef b2 = t2.bytes();\n          assert b2.offset == 0;\n\n\n          // Set newSuffixStart -- we can't use\n          // termEnum's since the above seek may have\n          // done no scanning (eg, term was precisely\n          // and index term, or, was in the term seek\n          // cache):\n          scratchTerm.copy(b2);\n          setNewSuffixStart(prevTerm, scratchTerm);\n\n          return true;\n        } else if (newSuffixStart != 0 || scratchTerm.length != 0) {\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=null (or next field)\");\n          }\n          newSuffixStart = 0;\n          scratchTerm.length = 0;\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#doPop().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#doPop().mjava","sourceNew":"    // Look for seek type 3 (\"pop\"): if the delta from\n    // prev -> current was replacing an S with an E,\n    // we must now seek to beyond that E.  This seek\n    // \"finishes\" the dance at this character\n    // position.\n    private boolean doPop() throws IOException {\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  try pop\");\n      }\n\n      assert newSuffixStart <= prevTerm.length;\n      assert newSuffixStart < scratchTerm.length || newSuffixStart == 0;\n\n      if (prevTerm.length > newSuffixStart &&\n          isNonBMPChar(prevTerm.bytes, newSuffixStart) &&\n          isHighBMPChar(scratchTerm.bytes, newSuffixStart)) {\n\n        // Seek type 2 -- put 0xFF at this position:\n        scratchTerm.bytes[newSuffixStart] = (byte) 0xff;\n        scratchTerm.length = newSuffixStart+1;\n\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"    seek to term=\" + UnicodeUtil.toHexString(scratchTerm.utf8ToString()) + \" \" + scratchTerm.toString());\n        }\n          \n        // TODO: more efficient seek?  can we simply swap\n        // the enums?\n        getTermsDict().seekEnum(termEnum, new Term(fieldInfo.name, scratchTerm), true);\n\n        final Term t2 = termEnum.term();\n\n        // We could hit EOF or different field since this\n        // was a seek \"forward\":\n        if (t2 != null && t2.field() == internedFieldName) {\n\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()) + \" \" + t2.bytes());\n          }\n\n          final BytesRef b2 = t2.bytes();\n          assert b2.offset == 0;\n\n\n          // Set newSuffixStart -- we can't use\n          // termEnum's since the above seek may have\n          // done no scanning (eg, term was precisely\n          // and index term, or, was in the term seek\n          // cache):\n          scratchTerm.copy(b2);\n          setNewSuffixStart(prevTerm, scratchTerm);\n\n          return true;\n        } else if (newSuffixStart != 0 || scratchTerm.length != 0) {\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=null (or next field)\");\n          }\n          newSuffixStart = 0;\n          scratchTerm.length = 0;\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n","sourceOld":"    // Look for seek type 3 (\"pop\"): if the delta from\n    // prev -> current was replacing an S with an E,\n    // we must now seek to beyond that E.  This seek\n    // \"finishes\" the dance at this character\n    // position.\n    private boolean doPop() throws IOException {\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  try pop\");\n      }\n\n      assert newSuffixStart <= prevTerm.length;\n      assert newSuffixStart < scratchTerm.length || newSuffixStart == 0;\n\n      if (prevTerm.length > newSuffixStart &&\n          isNonBMPChar(prevTerm.bytes, newSuffixStart) &&\n          isHighBMPChar(scratchTerm.bytes, newSuffixStart)) {\n\n        // Seek type 2 -- put 0xFF at this position:\n        scratchTerm.bytes[newSuffixStart] = (byte) 0xff;\n        scratchTerm.length = newSuffixStart+1;\n\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"    seek to term=\" + UnicodeUtil.toHexString(scratchTerm.utf8ToString()) + \" \" + scratchTerm.toString());\n        }\n          \n        // TODO: more efficient seek?  can we simply swap\n        // the enums?\n        getTermsDict().seekEnum(termEnum, protoTerm.createTerm(scratchTerm), true);\n\n        final Term t2 = termEnum.term();\n\n        // We could hit EOF or different field since this\n        // was a seek \"forward\":\n        if (t2 != null && t2.field() == fieldInfo.name) {\n\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()) + \" \" + t2.bytes());\n          }\n\n          final BytesRef b2 = t2.bytes();\n          assert b2.offset == 0;\n\n\n          // Set newSuffixStart -- we can't use\n          // termEnum's since the above seek may have\n          // done no scanning (eg, term was precisely\n          // and index term, or, was in the term seek\n          // cache):\n          scratchTerm.copy(b2);\n          setNewSuffixStart(prevTerm, scratchTerm);\n\n          return true;\n        } else if (newSuffixStart != 0 || scratchTerm.length != 0) {\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=null (or next field)\");\n          }\n          newSuffixStart = 0;\n          scratchTerm.length = 0;\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#doPop().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#doPop().mjava","sourceNew":"    // Look for seek type 3 (\"pop\"): if the delta from\n    // prev -> current was replacing an S with an E,\n    // we must now seek to beyond that E.  This seek\n    // \"finishes\" the dance at this character\n    // position.\n    private boolean doPop() throws IOException {\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  try pop\");\n      }\n\n      assert newSuffixStart <= prevTerm.length;\n      assert newSuffixStart < scratchTerm.length || newSuffixStart == 0;\n\n      if (prevTerm.length > newSuffixStart &&\n          isNonBMPChar(prevTerm.bytes, newSuffixStart) &&\n          isHighBMPChar(scratchTerm.bytes, newSuffixStart)) {\n\n        // Seek type 2 -- put 0xFF at this position:\n        scratchTerm.bytes[newSuffixStart] = (byte) 0xff;\n        scratchTerm.length = newSuffixStart+1;\n\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"    seek to term=\" + UnicodeUtil.toHexString(scratchTerm.utf8ToString()) + \" \" + scratchTerm.toString());\n        }\n          \n        // TODO: more efficient seek?  can we simply swap\n        // the enums?\n        getTermsDict().seekEnum(termEnum, new Term(fieldInfo.name, scratchTerm), true);\n\n        final Term t2 = termEnum.term();\n\n        // We could hit EOF or different field since this\n        // was a seek \"forward\":\n        if (t2 != null && t2.field() == internedFieldName) {\n\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()) + \" \" + t2.bytes());\n          }\n\n          final BytesRef b2 = t2.bytes();\n          assert b2.offset == 0;\n\n\n          // Set newSuffixStart -- we can't use\n          // termEnum's since the above seek may have\n          // done no scanning (eg, term was precisely\n          // and index term, or, was in the term seek\n          // cache):\n          scratchTerm.copy(b2);\n          setNewSuffixStart(prevTerm, scratchTerm);\n\n          return true;\n        } else if (newSuffixStart != 0 || scratchTerm.length != 0) {\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=null (or next field)\");\n          }\n          newSuffixStart = 0;\n          scratchTerm.length = 0;\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n","sourceOld":"    // Look for seek type 3 (\"pop\"): if the delta from\n    // prev -> current was replacing an S with an E,\n    // we must now seek to beyond that E.  This seek\n    // \"finishes\" the dance at this character\n    // position.\n    private boolean doPop() throws IOException {\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  try pop\");\n      }\n\n      assert newSuffixStart <= prevTerm.length;\n      assert newSuffixStart < scratchTerm.length || newSuffixStart == 0;\n\n      if (prevTerm.length > newSuffixStart &&\n          isNonBMPChar(prevTerm.bytes, newSuffixStart) &&\n          isHighBMPChar(scratchTerm.bytes, newSuffixStart)) {\n\n        // Seek type 2 -- put 0xFF at this position:\n        scratchTerm.bytes[newSuffixStart] = (byte) 0xff;\n        scratchTerm.length = newSuffixStart+1;\n\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"    seek to term=\" + UnicodeUtil.toHexString(scratchTerm.utf8ToString()) + \" \" + scratchTerm.toString());\n        }\n          \n        // TODO: more efficient seek?  can we simply swap\n        // the enums?\n        getTermsDict().seekEnum(termEnum, protoTerm.createTerm(scratchTerm), true);\n\n        final Term t2 = termEnum.term();\n\n        // We could hit EOF or different field since this\n        // was a seek \"forward\":\n        if (t2 != null && t2.field() == fieldInfo.name) {\n\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()) + \" \" + t2.bytes());\n          }\n\n          final BytesRef b2 = t2.bytes();\n          assert b2.offset == 0;\n\n\n          // Set newSuffixStart -- we can't use\n          // termEnum's since the above seek may have\n          // done no scanning (eg, term was precisely\n          // and index term, or, was in the term seek\n          // cache):\n          scratchTerm.copy(b2);\n          setNewSuffixStart(prevTerm, scratchTerm);\n\n          return true;\n        } else if (newSuffixStart != 0 || scratchTerm.length != 0) {\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=null (or next field)\");\n          }\n          newSuffixStart = 0;\n          scratchTerm.length = 0;\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#doPop().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#doPop().mjava","sourceNew":"    // Look for seek type 3 (\"pop\"): if the delta from\n    // prev -> current was replacing an S with an E,\n    // we must now seek to beyond that E.  This seek\n    // \"finishes\" the dance at this character\n    // position.\n    private boolean doPop() throws IOException {\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  try pop\");\n      }\n\n      assert newSuffixStart <= prevTerm.length;\n      assert newSuffixStart < scratchTerm.length || newSuffixStart == 0;\n\n      if (prevTerm.length > newSuffixStart &&\n          isNonBMPChar(prevTerm.bytes, newSuffixStart) &&\n          isHighBMPChar(scratchTerm.bytes, newSuffixStart)) {\n\n        // Seek type 2 -- put 0xFF at this position:\n        scratchTerm.bytes[newSuffixStart] = (byte) 0xff;\n        scratchTerm.length = newSuffixStart+1;\n\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"    seek to term=\" + UnicodeUtil.toHexString(scratchTerm.utf8ToString()) + \" \" + scratchTerm.toString());\n        }\n          \n        // TODO: more efficient seek?  can we simply swap\n        // the enums?\n        getTermsDict().seekEnum(termEnum, new Term(fieldInfo.name, scratchTerm), true);\n\n        final Term t2 = termEnum.term();\n\n        // We could hit EOF or different field since this\n        // was a seek \"forward\":\n        if (t2 != null && t2.field() == internedFieldName) {\n\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()) + \" \" + t2.bytes());\n          }\n\n          final BytesRef b2 = t2.bytes();\n          assert b2.offset == 0;\n\n\n          // Set newSuffixStart -- we can't use\n          // termEnum's since the above seek may have\n          // done no scanning (eg, term was precisely\n          // and index term, or, was in the term seek\n          // cache):\n          scratchTerm.copy(b2);\n          setNewSuffixStart(prevTerm, scratchTerm);\n\n          return true;\n        } else if (newSuffixStart != 0 || scratchTerm.length != 0) {\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=null (or next field)\");\n          }\n          newSuffixStart = 0;\n          scratchTerm.length = 0;\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n","sourceOld":"    // Look for seek type 3 (\"pop\"): if the delta from\n    // prev -> current was replacing an S with an E,\n    // we must now seek to beyond that E.  This seek\n    // \"finishes\" the dance at this character\n    // position.\n    private boolean doPop() throws IOException {\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  try pop\");\n      }\n\n      assert newSuffixStart <= prevTerm.length;\n      assert newSuffixStart < scratchTerm.length || newSuffixStart == 0;\n\n      if (prevTerm.length > newSuffixStart &&\n          isNonBMPChar(prevTerm.bytes, newSuffixStart) &&\n          isHighBMPChar(scratchTerm.bytes, newSuffixStart)) {\n\n        // Seek type 2 -- put 0xFF at this position:\n        scratchTerm.bytes[newSuffixStart] = (byte) 0xff;\n        scratchTerm.length = newSuffixStart+1;\n\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"    seek to term=\" + UnicodeUtil.toHexString(scratchTerm.utf8ToString()) + \" \" + scratchTerm.toString());\n        }\n          \n        // TODO: more efficient seek?  can we simply swap\n        // the enums?\n        getTermsDict().seekEnum(termEnum, protoTerm.createTerm(scratchTerm), true);\n\n        final Term t2 = termEnum.term();\n\n        // We could hit EOF or different field since this\n        // was a seek \"forward\":\n        if (t2 != null && t2.field() == fieldInfo.name) {\n\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()) + \" \" + t2.bytes());\n          }\n\n          final BytesRef b2 = t2.bytes();\n          assert b2.offset == 0;\n\n\n          // Set newSuffixStart -- we can't use\n          // termEnum's since the above seek may have\n          // done no scanning (eg, term was precisely\n          // and index term, or, was in the term seek\n          // cache):\n          scratchTerm.copy(b2);\n          setNewSuffixStart(prevTerm, scratchTerm);\n\n          return true;\n        } else if (newSuffixStart != 0 || scratchTerm.length != 0) {\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=null (or next field)\");\n          }\n          newSuffixStart = 0;\n          scratchTerm.length = 0;\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene3x/Lucene3xFields.PreTermsEnum#doPop().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#doPop().mjava","sourceNew":"    // Look for seek type 3 (\"pop\"): if the delta from\n    // prev -> current was replacing an S with an E,\n    // we must now seek to beyond that E.  This seek\n    // \"finishes\" the dance at this character\n    // position.\n    private boolean doPop() throws IOException {\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  try pop\");\n      }\n\n      assert newSuffixStart <= prevTerm.length;\n      assert newSuffixStart < scratchTerm.length || newSuffixStart == 0;\n\n      if (prevTerm.length > newSuffixStart &&\n          isNonBMPChar(prevTerm.bytes, newSuffixStart) &&\n          isHighBMPChar(scratchTerm.bytes, newSuffixStart)) {\n\n        // Seek type 2 -- put 0xFF at this position:\n        scratchTerm.bytes[newSuffixStart] = (byte) 0xff;\n        scratchTerm.length = newSuffixStart+1;\n\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"    seek to term=\" + UnicodeUtil.toHexString(scratchTerm.utf8ToString()) + \" \" + scratchTerm.toString());\n        }\n          \n        // TODO: more efficient seek?  can we simply swap\n        // the enums?\n        getTermsDict().seekEnum(termEnum, new Term(fieldInfo.name, scratchTerm), true);\n\n        final Term t2 = termEnum.term();\n\n        // We could hit EOF or different field since this\n        // was a seek \"forward\":\n        if (t2 != null && t2.field() == internedFieldName) {\n\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()) + \" \" + t2.bytes());\n          }\n\n          final BytesRef b2 = t2.bytes();\n          assert b2.offset == 0;\n\n\n          // Set newSuffixStart -- we can't use\n          // termEnum's since the above seek may have\n          // done no scanning (eg, term was precisely\n          // and index term, or, was in the term seek\n          // cache):\n          scratchTerm.copy(b2);\n          setNewSuffixStart(prevTerm, scratchTerm);\n\n          return true;\n        } else if (newSuffixStart != 0 || scratchTerm.length != 0) {\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=null (or next field)\");\n          }\n          newSuffixStart = 0;\n          scratchTerm.length = 0;\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n","sourceOld":"    // Look for seek type 3 (\"pop\"): if the delta from\n    // prev -> current was replacing an S with an E,\n    // we must now seek to beyond that E.  This seek\n    // \"finishes\" the dance at this character\n    // position.\n    private boolean doPop() throws IOException {\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"  try pop\");\n      }\n\n      assert newSuffixStart <= prevTerm.length;\n      assert newSuffixStart < scratchTerm.length || newSuffixStart == 0;\n\n      if (prevTerm.length > newSuffixStart &&\n          isNonBMPChar(prevTerm.bytes, newSuffixStart) &&\n          isHighBMPChar(scratchTerm.bytes, newSuffixStart)) {\n\n        // Seek type 2 -- put 0xFF at this position:\n        scratchTerm.bytes[newSuffixStart] = (byte) 0xff;\n        scratchTerm.length = newSuffixStart+1;\n\n        if (DEBUG_SURROGATES) {\n          System.out.println(\"    seek to term=\" + UnicodeUtil.toHexString(scratchTerm.utf8ToString()) + \" \" + scratchTerm.toString());\n        }\n          \n        // TODO: more efficient seek?  can we simply swap\n        // the enums?\n        getTermsDict().seekEnum(termEnum, new Term(fieldInfo.name, scratchTerm), true);\n\n        final Term t2 = termEnum.term();\n\n        // We could hit EOF or different field since this\n        // was a seek \"forward\":\n        if (t2 != null && t2.field() == internedFieldName) {\n\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()) + \" \" + t2.bytes());\n          }\n\n          final BytesRef b2 = t2.bytes();\n          assert b2.offset == 0;\n\n\n          // Set newSuffixStart -- we can't use\n          // termEnum's since the above seek may have\n          // done no scanning (eg, term was precisely\n          // and index term, or, was in the term seek\n          // cache):\n          scratchTerm.copy(b2);\n          setNewSuffixStart(prevTerm, scratchTerm);\n\n          return true;\n        } else if (newSuffixStart != 0 || scratchTerm.length != 0) {\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"      got term=null (or next field)\");\n          }\n          newSuffixStart = 0;\n          scratchTerm.length = 0;\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5fe916adfeb72fdd1187d31c86dbd5cf67797ba0"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"825bcb488bc228d1fb6a19c1f441a2181f7d766d":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["825bcb488bc228d1fb6a19c1f441a2181f7d766d"],"5fe916adfeb72fdd1187d31c86dbd5cf67797ba0":["163fe85a71d778fd2b7747f65ca27b54829e2e57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2553b00f699380c64959ccb27991289aae87be2e":["825bcb488bc228d1fb6a19c1f441a2181f7d766d","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","825bcb488bc228d1fb6a19c1f441a2181f7d766d"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["825bcb488bc228d1fb6a19c1f441a2181f7d766d","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","825bcb488bc228d1fb6a19c1f441a2181f7d766d"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["5fe916adfeb72fdd1187d31c86dbd5cf67797ba0"],"825bcb488bc228d1fb6a19c1f441a2181f7d766d":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","2553b00f699380c64959ccb27991289aae87be2e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["7b91922b55d15444d554721b352861d028eb8278","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"5fe916adfeb72fdd1187d31c86dbd5cf67797ba0":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3242a09f703274d3b9283f2064a1a33064b53a1b","4b103252dee6afa1b6d7a622c773d178788eb85a","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"2553b00f699380c64959ccb27991289aae87be2e":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}