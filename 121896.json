{"path":"lucene/src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","pathOld":"src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","sourceNew":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      reader = IndexReader.open(directory, true);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n  }\n\n","sourceOld":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      reader = IndexReader.open(directory, true);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","sourceNew":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      reader = IndexReader.open(directory, true);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n  }\n\n","sourceOld":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      reader = IndexReader.open(directory, true);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","sourceNew":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n      \n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n    rw1 = query.rewrite(reader);\n      \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(query, BooleanClause.Occur.MUST);\n      \n    rw2 = bq.rewrite(reader);\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      reader = IndexReader.open(directory, true);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","sourceNew":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n      \n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n    rw1 = query.rewrite(reader);\n      \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(query, BooleanClause.Occur.MUST);\n      \n    rw2 = bq.rewrite(reader);\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    try {\n      IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      for (int i = 0; i < categories.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n      \n      reader = IndexReader.open(directory, true);\n      PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n      rw1 = query.rewrite(reader);\n      \n      BooleanQuery bq = new BooleanQuery();\n      bq.add(query, BooleanClause.Occur.MUST);\n      \n      rw2 = bq.rewrite(reader);\n    } catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","sourceNew":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n      \n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n    rw1 = query.rewrite(reader);\n      \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(query, BooleanClause.Occur.MUST);\n      \n    rw2 = bq.rewrite(reader);\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n      \n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n    rw1 = query.rewrite(reader);\n      \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(query, BooleanClause.Occur.MUST);\n      \n    rw2 = bq.rewrite(reader);\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","sourceNew":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n      \n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n    rw1 = query.rewrite(reader);\n      \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(query, BooleanClause.Occur.MUST);\n      \n    rw2 = bq.rewrite(reader);\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n      \n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n    rw1 = query.rewrite(reader);\n      \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(query, BooleanClause.Occur.MUST);\n      \n    rw2 = bq.rewrite(reader);\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","sourceNew":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n      \n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n    rw1 = query.rewrite(reader);\n      \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(query, BooleanClause.Occur.MUST);\n      \n    rw2 = bq.rewrite(reader);\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n      \n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n    rw1 = query.rewrite(reader);\n      \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(query, BooleanClause.Occur.MUST);\n      \n    rw2 = bq.rewrite(reader);\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","sourceNew":"  public void testMethod() throws Exception {\n    MockRAMDirectory directory = new MockRAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n      \n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n    rw1 = query.rewrite(reader);\n      \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(query, BooleanClause.Occur.MUST);\n      \n    rw2 = bq.rewrite(reader);\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n      \n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n    rw1 = query.rewrite(reader);\n      \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(query, BooleanClause.Occur.MUST);\n      \n    rw2 = bq.rewrite(reader);\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","sourceNew":"  public void testMethod() throws Exception {\n    Random random = newRandom();\n    MockRAMDirectory directory = newDirectory(random);\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n      \n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n    rw1 = query.rewrite(reader);\n      \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(query, BooleanClause.Occur.MUST);\n      \n    rw2 = bq.rewrite(reader);\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testMethod() throws Exception {\n    MockRAMDirectory directory = new MockRAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n      \n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n    rw1 = query.rewrite(reader);\n      \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(query, BooleanClause.Occur.MUST);\n      \n    rw2 = bq.rewrite(reader);\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","sourceNew":"  public void testMethod() throws Exception {\n    Random random = newRandom();\n    Directory directory = newDirectory(random);\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n      \n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n    rw1 = query.rewrite(reader);\n      \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(query, BooleanClause.Occur.MUST);\n      \n    rw2 = bq.rewrite(reader);\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testMethod() throws Exception {\n    Random random = newRandom();\n    MockRAMDirectory directory = newDirectory(random);\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n      \n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n    rw1 = query.rewrite(reader);\n      \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(query, BooleanClause.Occur.MUST);\n      \n    rw2 = bq.rewrite(reader);\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","sourceNew":"  public void testMethod() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n      \n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n    rw1 = query.rewrite(reader);\n      \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(query, BooleanClause.Occur.MUST);\n      \n    rw2 = bq.rewrite(reader);\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testMethod() throws Exception {\n    Random random = newRandom();\n    Directory directory = newDirectory(random);\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n      \n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n    rw1 = query.rewrite(reader);\n      \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(query, BooleanClause.Occur.MUST);\n      \n    rw2 = bq.rewrite(reader);\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","sourceNew":"  public void testMethod() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n      \n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n    rw1 = query.rewrite(reader);\n      \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(query, BooleanClause.Occur.MUST);\n      \n    rw2 = bq.rewrite(reader);\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testMethod() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n      \n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n    rw1 = query.rewrite(reader);\n      \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(query, BooleanClause.Occur.MUST);\n      \n    rw2 = bq.rewrite(reader);\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","sourceNew":"  public void testMethod() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n      \n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n    rw1 = query.rewrite(reader);\n      \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(query, BooleanClause.Occur.MUST);\n      \n    rw2 = bq.rewrite(reader);\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testMethod() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n      \n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n    rw1 = query.rewrite(reader);\n      \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(query, BooleanClause.Occur.MUST);\n      \n    rw2 = bq.rewrite(reader);\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e37a877cbb3c0d736bdc1fcb3aea4c24015799f","date":1293976079,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","sourceNew":null,"sourceOld":"  public void testMethod() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n      \n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n    rw1 = query.rewrite(reader);\n      \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(query, BooleanClause.Occur.MUST);\n      \n    rw2 = bq.rewrite(reader);\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","sourceNew":null,"sourceOld":"  public void testMethod() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n      \n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n    rw1 = query.rewrite(reader);\n      \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(query, BooleanClause.Occur.MUST);\n      \n    rw2 = bq.rewrite(reader);\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanPrefixQuery#testMethod().mjava","sourceNew":null,"sourceOld":"  public void testMethod() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[]{\"food\",\n                                       \"foodanddrink\",\n                                       \"foodanddrinkandgoodtimes\",\n                                       \"food and drink\"};\n\n    Query rw1 = null;\n    Query rw2 = null;\n    IndexReader reader = null;\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"category\", categories[i], Field.Store.YES, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n      \n    PrefixQuery query = new PrefixQuery(new Term(\"category\", \"foo\"));\n    rw1 = query.rewrite(reader);\n      \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(query, BooleanClause.Occur.MUST);\n      \n    rw2 = bq.rewrite(reader);\n\n    assertEquals(\"Number of Clauses Mismatch\", getCount(reader, rw1), getCount(reader, rw2));\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["132903c28af3aa6f67284b78de91c0f0a99488c2","3e37a877cbb3c0d736bdc1fcb3aea4c24015799f"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","15bbd254c1506df5299c4df8c148262c7bd6301e"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"3e37a877cbb3c0d736bdc1fcb3aea4c24015799f":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["c084e47df29de3330311d69dabf515ceaa989512"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","c084e47df29de3330311d69dabf515ceaa989512"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","132903c28af3aa6f67284b78de91c0f0a99488c2"],"c084e47df29de3330311d69dabf515ceaa989512":["d572389229127c297dd1fa5ce4758e1cec41e799"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3e37a877cbb3c0d736bdc1fcb3aea4c24015799f"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e37a877cbb3c0d736bdc1fcb3aea4c24015799f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"3e37a877cbb3c0d736bdc1fcb3aea4c24015799f":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"d572389229127c297dd1fa5ce4758e1cec41e799":["5f4e87790277826a2aea119328600dfb07761f32","c084e47df29de3330311d69dabf515ceaa989512"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["70ad682703b8585f5d0a637efec044d57ec05efb","3e37a877cbb3c0d736bdc1fcb3aea4c24015799f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"c084e47df29de3330311d69dabf515ceaa989512":["4b103252dee6afa1b6d7a622c773d178788eb85a","15bbd254c1506df5299c4df8c148262c7bd6301e","5f4e87790277826a2aea119328600dfb07761f32"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}