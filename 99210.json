{"path":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud#assertOneIter(SolrInputDocument[]).mjava","commits":[{"id":"136796946c32863f11b97ebec6b4091cdfe3a20b","date":1468862468,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud#assertOneIter(SolrInputDocument[]).mjava","pathOld":"/dev/null","sourceNew":"  private void assertOneIter(final SolrInputDocument[] knownDocs) throws IOException, SolrServerException {\n    // we want to occasionally test more then one doc per RTG\n    final int numDocsThisIter = TestUtil.nextInt(random(), 1, atLeast(2));\n    int numDocsThisIterThatExist = 0;\n    \n    // pick some random docIds for this iteration and ...\n    final int[] docIds = new int[numDocsThisIter];\n    for (int i = 0; i < numDocsThisIter; i++) {\n      docIds[i] = random().nextInt(knownDocs.length);\n      if (null != knownDocs[docIds[i]]) {\n        // ...check how many already exist\n        numDocsThisIterThatExist++;\n      }\n    }\n\n    // we want our RTG requests to occasionally include missing/deleted docs,\n    // but that's not the primary focus of the test, so weight the odds accordingly\n    if (random().nextInt(numDocsThisIter + 2) <= numDocsThisIterThatExist) {\n\n      if (0 < TestUtil.nextInt(random(), 0, 13)) {\n        log.info(\"RTG: numDocsThisIter={} numDocsThisIterThatExist={}, docIds={}\",\n                 numDocsThisIter, numDocsThisIterThatExist, docIds);\n        assertRTG(knownDocs, docIds);\n      } else {\n        // sporadically delete some docs instead of doing an RTG\n        log.info(\"DEL: numDocsThisIter={} numDocsThisIterThatExist={}, docIds={}\",\n                 numDocsThisIter, numDocsThisIterThatExist, docIds);\n        assertDelete(knownDocs, docIds);\n      }\n    } else {\n      log.info(\"UPD: numDocsThisIter={} numDocsThisIterThatExist={}, docIds={}\",\n               numDocsThisIter, numDocsThisIterThatExist, docIds);\n      assertUpdate(knownDocs, docIds);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRandomFlRTGCloud#assertOneIter(SolrInputDocument[]).mjava","pathOld":"/dev/null","sourceNew":"  private void assertOneIter(final SolrInputDocument[] knownDocs) throws IOException, SolrServerException {\n    // we want to occasionally test more then one doc per RTG\n    final int numDocsThisIter = TestUtil.nextInt(random(), 1, atLeast(2));\n    int numDocsThisIterThatExist = 0;\n    \n    // pick some random docIds for this iteration and ...\n    final int[] docIds = new int[numDocsThisIter];\n    for (int i = 0; i < numDocsThisIter; i++) {\n      docIds[i] = random().nextInt(knownDocs.length);\n      if (null != knownDocs[docIds[i]]) {\n        // ...check how many already exist\n        numDocsThisIterThatExist++;\n      }\n    }\n\n    // we want our RTG requests to occasionally include missing/deleted docs,\n    // but that's not the primary focus of the test, so weight the odds accordingly\n    if (random().nextInt(numDocsThisIter + 2) <= numDocsThisIterThatExist) {\n\n      if (0 < TestUtil.nextInt(random(), 0, 13)) {\n        log.info(\"RTG: numDocsThisIter={} numDocsThisIterThatExist={}, docIds={}\",\n                 numDocsThisIter, numDocsThisIterThatExist, docIds);\n        assertRTG(knownDocs, docIds);\n      } else {\n        // sporadically delete some docs instead of doing an RTG\n        log.info(\"DEL: numDocsThisIter={} numDocsThisIterThatExist={}, docIds={}\",\n                 numDocsThisIter, numDocsThisIterThatExist, docIds);\n        assertDelete(knownDocs, docIds);\n      }\n    } else {\n      log.info(\"UPD: numDocsThisIter={} numDocsThisIterThatExist={}, docIds={}\",\n               numDocsThisIter, numDocsThisIterThatExist, docIds);\n      assertUpdate(knownDocs, docIds);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"136796946c32863f11b97ebec6b4091cdfe3a20b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","136796946c32863f11b97ebec6b4091cdfe3a20b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["136796946c32863f11b97ebec6b4091cdfe3a20b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["136796946c32863f11b97ebec6b4091cdfe3a20b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"136796946c32863f11b97ebec6b4091cdfe3a20b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}