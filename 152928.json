{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuilder,String,boolean,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuilder,String,boolean,boolean).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuilder,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Read until a line starting with the specified <code>lineStart</code>.\n   * @param buf buffer for collecting the data if so specified/ \n   * @param lineStart line start to look for, must not be null.\n   * @param collectMatchLine whether to collect the matching line into <code>buffer</code>.\n   * @param collectAll whether to collect all lines into <code>buffer</code>.\n   * @throws IOException\n   * @throws NoMoreDataException\n   */\n   private void read(StringBuilder buf, String lineStart, \n       boolean collectMatchLine, boolean collectAll) throws IOException, NoMoreDataException {\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n\n      if (line == null) {\n        openNextFile();\n        continue;\n      }\n\n      rawDocSize += line.length();\n\n      if (lineStart!=null && line.startsWith(lineStart)) {\n        if (collectMatchLine) {\n          buf.append(sep).append(line);\n          sep = NEW_LINE;\n        }\n        return;\n      }\n\n      if (collectAll) {\n        buf.append(sep).append(line);\n        sep = NEW_LINE;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read until a line starting with the specified <code>lineStart</code>.\n   * @param buf buffer for collecting the data if so specified/ \n   * @param lineStart line start to look for, must not be null.\n   * @param collectMatchLine whether to collect the matching line into <code>buffer</code>.\n   * @param collectAll whether to collect all lines into <code>buffer</code>.\n   * @throws IOException\n   * @throws NoMoreDataException\n   */\n   private void read(StringBuilder buf, String lineStart, \n       boolean collectMatchLine, boolean collectAll) throws IOException, NoMoreDataException {\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n\n      if (line == null) {\n        openNextFile();\n        continue;\n      }\n\n      rawDocSize += line.length();\n\n      if (lineStart!=null && line.startsWith(lineStart)) {\n        if (collectMatchLine) {\n          buf.append(sep).append(line);\n          sep = NEW_LINE;\n        }\n        return;\n      }\n\n      if (collectAll) {\n        buf.append(sep).append(line);\n        sep = NEW_LINE;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91e8768e9769f9e5175b1d99dcd27600bc9d4374","date":1342373687,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuilder,String,boolean,boolean).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuilder,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Read until a line starting with the specified <code>lineStart</code>.\n   * @param buf buffer for collecting the data if so specified/ \n   * @param lineStart line start to look for, must not be null.\n   * @param collectMatchLine whether to collect the matching line into <code>buffer</code>.\n   * @param collectAll whether to collect all lines into <code>buffer</code>.\n   * @throws IOException\n   * @throws NoMoreDataException\n   */\n   private void read(StringBuilder buf, String lineStart, \n       boolean collectMatchLine, boolean collectAll) throws IOException, NoMoreDataException {\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n\n      if (line == null) {\n        openNextFile();\n        continue;\n      }\n\n      line.length();\n\n      if (lineStart!=null && line.startsWith(lineStart)) {\n        if (collectMatchLine) {\n          buf.append(sep).append(line);\n          sep = NEW_LINE;\n        }\n        return;\n      }\n\n      if (collectAll) {\n        buf.append(sep).append(line);\n        sep = NEW_LINE;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read until a line starting with the specified <code>lineStart</code>.\n   * @param buf buffer for collecting the data if so specified/ \n   * @param lineStart line start to look for, must not be null.\n   * @param collectMatchLine whether to collect the matching line into <code>buffer</code>.\n   * @param collectAll whether to collect all lines into <code>buffer</code>.\n   * @throws IOException\n   * @throws NoMoreDataException\n   */\n   private void read(StringBuilder buf, String lineStart, \n       boolean collectMatchLine, boolean collectAll) throws IOException, NoMoreDataException {\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n\n      if (line == null) {\n        openNextFile();\n        continue;\n      }\n\n      rawDocSize += line.length();\n\n      if (lineStart!=null && line.startsWith(lineStart)) {\n        if (collectMatchLine) {\n          buf.append(sep).append(line);\n          sep = NEW_LINE;\n        }\n        return;\n      }\n\n      if (collectAll) {\n        buf.append(sep).append(line);\n        sep = NEW_LINE;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuilder,String,boolean,boolean).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuilder,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Read until a line starting with the specified <code>lineStart</code>.\n   * @param buf buffer for collecting the data if so specified/ \n   * @param lineStart line start to look for, must not be null.\n   * @param collectMatchLine whether to collect the matching line into <code>buffer</code>.\n   * @param collectAll whether to collect all lines into <code>buffer</code>.\n   * @throws IOException\n   * @throws NoMoreDataException\n   */\n   private void read(StringBuilder buf, String lineStart, \n       boolean collectMatchLine, boolean collectAll) throws IOException, NoMoreDataException {\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n\n      if (line == null) {\n        openNextFile();\n        continue;\n      }\n\n      line.length();\n\n      if (lineStart!=null && line.startsWith(lineStart)) {\n        if (collectMatchLine) {\n          buf.append(sep).append(line);\n          sep = NEW_LINE;\n        }\n        return;\n      }\n\n      if (collectAll) {\n        buf.append(sep).append(line);\n        sep = NEW_LINE;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read until a line starting with the specified <code>lineStart</code>.\n   * @param buf buffer for collecting the data if so specified/ \n   * @param lineStart line start to look for, must not be null.\n   * @param collectMatchLine whether to collect the matching line into <code>buffer</code>.\n   * @param collectAll whether to collect all lines into <code>buffer</code>.\n   * @throws IOException\n   * @throws NoMoreDataException\n   */\n   private void read(StringBuilder buf, String lineStart, \n       boolean collectMatchLine, boolean collectAll) throws IOException, NoMoreDataException {\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n\n      if (line == null) {\n        openNextFile();\n        continue;\n      }\n\n      rawDocSize += line.length();\n\n      if (lineStart!=null && line.startsWith(lineStart)) {\n        if (collectMatchLine) {\n          buf.append(sep).append(line);\n          sep = NEW_LINE;\n        }\n        return;\n      }\n\n      if (collectAll) {\n        buf.append(sep).append(line);\n        sep = NEW_LINE;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuilder,String,boolean,boolean).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuilder,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Read until a line starting with the specified <code>lineStart</code>.\n   * @param buf buffer for collecting the data if so specified/ \n   * @param lineStart line start to look for, must not be null.\n   * @param collectMatchLine whether to collect the matching line into <code>buffer</code>.\n   * @param collectAll whether to collect all lines into <code>buffer</code>.\n   * @throws IOException\n   * @throws NoMoreDataException\n   */\n   private void read(StringBuilder buf, String lineStart, \n       boolean collectMatchLine, boolean collectAll) throws IOException, NoMoreDataException {\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n\n      if (line == null) {\n        openNextFile();\n        continue;\n      }\n\n      line.length();\n\n      if (lineStart!=null && line.startsWith(lineStart)) {\n        if (collectMatchLine) {\n          buf.append(sep).append(line);\n          sep = NEW_LINE;\n        }\n        return;\n      }\n\n      if (collectAll) {\n        buf.append(sep).append(line);\n        sep = NEW_LINE;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read until a line starting with the specified <code>lineStart</code>.\n   * @param buf buffer for collecting the data if so specified/ \n   * @param lineStart line start to look for, must not be null.\n   * @param collectMatchLine whether to collect the matching line into <code>buffer</code>.\n   * @param collectAll whether to collect all lines into <code>buffer</code>.\n   * @throws IOException\n   * @throws NoMoreDataException\n   */\n   private void read(StringBuilder buf, String lineStart, \n       boolean collectMatchLine, boolean collectAll) throws IOException, NoMoreDataException {\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n\n      if (line == null) {\n        openNextFile();\n        continue;\n      }\n\n      rawDocSize += line.length();\n\n      if (lineStart!=null && line.startsWith(lineStart)) {\n        if (collectMatchLine) {\n          buf.append(sep).append(line);\n          sep = NEW_LINE;\n        }\n        return;\n      }\n\n      if (collectAll) {\n        buf.append(sep).append(line);\n        sep = NEW_LINE;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuilder,String,boolean,boolean).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuilder,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Read until a line starting with the specified <code>lineStart</code>.\n   * @param buf buffer for collecting the data if so specified/ \n   * @param lineStart line start to look for, must not be null.\n   * @param collectMatchLine whether to collect the matching line into <code>buffer</code>.\n   * @param collectAll whether to collect all lines into <code>buffer</code>.\n   * @throws IOException If there is a low-level I/O error.\n   * @throws NoMoreDataException If the source is exhausted.\n   */\n   private void read(StringBuilder buf, String lineStart, \n       boolean collectMatchLine, boolean collectAll) throws IOException, NoMoreDataException {\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n\n      if (line == null) {\n        openNextFile();\n        continue;\n      }\n\n      line.length();\n\n      if (lineStart!=null && line.startsWith(lineStart)) {\n        if (collectMatchLine) {\n          buf.append(sep).append(line);\n          sep = NEW_LINE;\n        }\n        return;\n      }\n\n      if (collectAll) {\n        buf.append(sep).append(line);\n        sep = NEW_LINE;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read until a line starting with the specified <code>lineStart</code>.\n   * @param buf buffer for collecting the data if so specified/ \n   * @param lineStart line start to look for, must not be null.\n   * @param collectMatchLine whether to collect the matching line into <code>buffer</code>.\n   * @param collectAll whether to collect all lines into <code>buffer</code>.\n   * @throws IOException\n   * @throws NoMoreDataException\n   */\n   private void read(StringBuilder buf, String lineStart, \n       boolean collectMatchLine, boolean collectAll) throws IOException, NoMoreDataException {\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n\n      if (line == null) {\n        openNextFile();\n        continue;\n      }\n\n      line.length();\n\n      if (lineStart!=null && line.startsWith(lineStart)) {\n        if (collectMatchLine) {\n          buf.append(sep).append(line);\n          sep = NEW_LINE;\n        }\n        return;\n      }\n\n      if (collectAll) {\n        buf.append(sep).append(line);\n        sep = NEW_LINE;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d254c4173f1ad282804b272d4814bfd6ec1cd64d","date":1449148054,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuilder,String,boolean,boolean).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#read(StringBuilder,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Read until a line starting with the specified <code>lineStart</code>.\n   * @param buf buffer for collecting the data if so specified/ \n   * @param lineStart line start to look for, must not be null.\n   * @param collectMatchLine whether to collect the matching line into <code>buffer</code>.\n   * @param collectAll whether to collect all lines into <code>buffer</code>.\n   * @throws IOException If there is a low-level I/O error.\n   * @throws NoMoreDataException If the source is exhausted.\n   */\n   private void read(StringBuilder buf, String lineStart, \n       boolean collectMatchLine, boolean collectAll) throws IOException, NoMoreDataException {\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n\n      if (line == null) {\n        openNextFile();\n        continue;\n      }\n\n      if (lineStart!=null && line.startsWith(lineStart)) {\n        if (collectMatchLine) {\n          buf.append(sep).append(line);\n          sep = NEW_LINE;\n        }\n        return;\n      }\n\n      if (collectAll) {\n        buf.append(sep).append(line);\n        sep = NEW_LINE;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read until a line starting with the specified <code>lineStart</code>.\n   * @param buf buffer for collecting the data if so specified/ \n   * @param lineStart line start to look for, must not be null.\n   * @param collectMatchLine whether to collect the matching line into <code>buffer</code>.\n   * @param collectAll whether to collect all lines into <code>buffer</code>.\n   * @throws IOException If there is a low-level I/O error.\n   * @throws NoMoreDataException If the source is exhausted.\n   */\n   private void read(StringBuilder buf, String lineStart, \n       boolean collectMatchLine, boolean collectAll) throws IOException, NoMoreDataException {\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n\n      if (line == null) {\n        openNextFile();\n        continue;\n      }\n\n      line.length();\n\n      if (lineStart!=null && line.startsWith(lineStart)) {\n        if (collectMatchLine) {\n          buf.append(sep).append(line);\n          sep = NEW_LINE;\n        }\n        return;\n      }\n\n      if (collectAll) {\n        buf.append(sep).append(line);\n        sep = NEW_LINE;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d254c4173f1ad282804b272d4814bfd6ec1cd64d":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["91e8768e9769f9e5175b1d99dcd27600bc9d4374"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["b89678825b68eccaf09e6ab71675fc0b0af1e099","91e8768e9769f9e5175b1d99dcd27600bc9d4374"],"91e8768e9769f9e5175b1d99dcd27600bc9d4374":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","91e8768e9769f9e5175b1d99dcd27600bc9d4374"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d254c4173f1ad282804b272d4814bfd6ec1cd64d"]},"commit2Childs":{"d254c4173f1ad282804b272d4814bfd6ec1cd64d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["d254c4173f1ad282804b272d4814bfd6ec1cd64d"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["aba371508186796cc6151d8223a5b4e16d02e26e","91e8768e9769f9e5175b1d99dcd27600bc9d4374","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"91e8768e9769f9e5175b1d99dcd27600bc9d4374":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}