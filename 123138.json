{"path":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleMarkFailure#apply(Statement,Description).mjava","commits":[{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleMarkFailure#apply(Statement,Description).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/SystemPropertiesRestoreRule#apply(Statement,Description).mjava","sourceNew":"  @Override\n  public Statement apply(final Statement s, Description d) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        // Clear status at start.\n        failures = false;\n\n        try {\n          s.evaluate();\n        } catch (Throwable t) {\n          for (Throwable t2 : expandFromMultiple(t)) {\n            if (!(t2 instanceof AssumptionViolatedException)) {\n              markFailed();\n              break;\n            }\n          }\n          throw t;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Statement apply(final Statement s, Description d) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        TreeMap<String,String> before = cloneAsMap(System.getProperties());\n        try {\n          s.evaluate();\n        } finally {\n          TreeMap<String,String> after = cloneAsMap(System.getProperties());\n          if (!after.equals(before)) {\n            // Restore original properties.\n            restore(before, after, ignoredProperties);\n          }\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c813a2b1db6d91d83baed4eab53ecc22eb857a82","date":1340957276,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleMarkFailure#apply(Statement,Description).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleMarkFailure#apply(Statement,Description).mjava","sourceNew":"  @Override\n  public Statement apply(final Statement s, Description d) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        // Clear status at start.\n        failures = false;\n\n        try {\n          s.evaluate();\n        } catch (Throwable t) {\n          if (!isAssumption(t)) {\n            markFailed();\n          }\n          throw t;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Statement apply(final Statement s, Description d) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        // Clear status at start.\n        failures = false;\n\n        try {\n          s.evaluate();\n        } catch (Throwable t) {\n          for (Throwable t2 : expandFromMultiple(t)) {\n            if (!(t2 instanceof AssumptionViolatedException)) {\n              markFailed();\n              break;\n            }\n          }\n          throw t;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleMarkFailure#apply(Statement,Description).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleMarkFailure#apply(Statement,Description).mjava","sourceNew":"  @Override\n  public Statement apply(final Statement s, Description d) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        // Clear status at start.\n        failures = false;\n\n        try {\n          s.evaluate();\n        } catch (Throwable t) {\n          if (!isAssumption(t)) {\n            markFailed();\n          }\n          throw t;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Statement apply(final Statement s, Description d) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        // Clear status at start.\n        failures = false;\n\n        try {\n          s.evaluate();\n        } catch (Throwable t) {\n          for (Throwable t2 : expandFromMultiple(t)) {\n            if (!(t2 instanceof AssumptionViolatedException)) {\n              markFailed();\n              break;\n            }\n          }\n          throw t;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5da0b42730b6b99b31389ef94cb97384e83b9ede":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["5da0b42730b6b99b31389ef94cb97384e83b9ede","c813a2b1db6d91d83baed4eab53ecc22eb857a82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c813a2b1db6d91d83baed4eab53ecc22eb857a82"],"c813a2b1db6d91d83baed4eab53ecc22eb857a82":["5da0b42730b6b99b31389ef94cb97384e83b9ede"]},"commit2Childs":{"5da0b42730b6b99b31389ef94cb97384e83b9ede":["fe33227f6805edab2036cbb80645cc4e2d1fa424","c813a2b1db6d91d83baed4eab53ecc22eb857a82"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"c813a2b1db6d91d83baed4eab53ecc22eb857a82":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}