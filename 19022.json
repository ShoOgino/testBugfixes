{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#buildCombinedAutomaton(Predicate[String],BytesRef[],CharacterRunAutomaton[],PhraseHelper,Function[Query,Collection[Query]]).mjava","commits":[{"id":"5675b3bced0b155f0ff8001ce2e1e502be7c92f6","date":1480972317,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#buildCombinedAutomaton(Predicate[String],BytesRef[],CharacterRunAutomaton[],PhraseHelper,Function[Query,Collection[Query]]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#buildCombinedAutomaton(String,BytesRef[],CharacterRunAutomaton[],PhraseHelper,Function[Query,Collection[Query]]).mjava","sourceNew":"  /**\n   * Build one {@link CharacterRunAutomaton} matching any term the query might match.\n   */\n  private static CharacterRunAutomaton buildCombinedAutomaton(Predicate<String> fieldMatcher,\n                                                              BytesRef[] terms,\n                                                              CharacterRunAutomaton[] automata,\n                                                              PhraseHelper strictPhrases,\n                                                              Function<Query, Collection<Query>> multiTermQueryRewrite) {\n    List<CharacterRunAutomaton> allAutomata = new ArrayList<>();\n    if (terms.length > 0) {\n      allAutomata.add(new CharacterRunAutomaton(Automata.makeStringUnion(Arrays.asList(terms))));\n    }\n    Collections.addAll(allAutomata, automata);\n    for (SpanQuery spanQuery : strictPhrases.getSpanQueries()) {\n      Collections.addAll(allAutomata,\n          MultiTermHighlighting.extractAutomata(spanQuery, fieldMatcher, true, multiTermQueryRewrite));//true==lookInSpan\n    }\n\n    if (allAutomata.size() == 1) {\n      return allAutomata.get(0);\n    }\n    //TODO it'd be nice if we could get at the underlying Automaton in CharacterRunAutomaton so that we\n    //  could union them all. But it's not exposed, and note TermRangeQuery isn't modelled as an Automaton\n    //  by MultiTermHighlighting.\n\n    // Return an aggregate CharacterRunAutomaton of others\n    return new CharacterRunAutomaton(Automata.makeEmpty()) {// the makeEmpty() is bogus; won't be used\n      @Override\n      public boolean run(char[] chars, int offset, int length) {\n        for (int i = 0; i < allAutomata.size(); i++) {// don't use foreach to avoid Iterator allocation\n          if (allAutomata.get(i).run(chars, offset, length)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Build one {@link CharacterRunAutomaton} matching any term the query might match.\n   */\n  private static CharacterRunAutomaton buildCombinedAutomaton(String field, BytesRef[] terms,\n                                                              CharacterRunAutomaton[] automata,\n                                                              PhraseHelper strictPhrases,\n                                                              Function<Query, Collection<Query>> multiTermQueryRewrite) {\n    List<CharacterRunAutomaton> allAutomata = new ArrayList<>();\n    if (terms.length > 0) {\n      allAutomata.add(new CharacterRunAutomaton(Automata.makeStringUnion(Arrays.asList(terms))));\n    }\n    Collections.addAll(allAutomata, automata);\n    for (SpanQuery spanQuery : strictPhrases.getSpanQueries()) {\n      Collections.addAll(allAutomata,\n          MultiTermHighlighting.extractAutomata(spanQuery, field, true, multiTermQueryRewrite));//true==lookInSpan\n    }\n\n    if (allAutomata.size() == 1) {\n      return allAutomata.get(0);\n    }\n    //TODO it'd be nice if we could get at the underlying Automaton in CharacterRunAutomaton so that we\n    //  could union them all. But it's not exposed, and note TermRangeQuery isn't modelled as an Automaton\n    //  by MultiTermHighlighting.\n\n    // Return an aggregate CharacterRunAutomaton of others\n    return new CharacterRunAutomaton(Automata.makeEmpty()) {// the makeEmpty() is bogus; won't be used\n      @Override\n      public boolean run(char[] chars, int offset, int length) {\n        for (int i = 0; i < allAutomata.size(); i++) {// don't use foreach to avoid Iterator allocation\n          if (allAutomata.get(i).run(chars, offset, length)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d","date":1481116359,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#buildCombinedAutomaton(Predicate[String],BytesRef[],CharacterRunAutomaton[],PhraseHelper,Function[Query,Collection[Query]]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#buildCombinedAutomaton(String,BytesRef[],CharacterRunAutomaton[],PhraseHelper,Function[Query,Collection[Query]]).mjava","sourceNew":"  /**\n   * Build one {@link CharacterRunAutomaton} matching any term the query might match.\n   */\n  private static CharacterRunAutomaton buildCombinedAutomaton(Predicate<String> fieldMatcher,\n                                                              BytesRef[] terms,\n                                                              CharacterRunAutomaton[] automata,\n                                                              PhraseHelper strictPhrases,\n                                                              Function<Query, Collection<Query>> multiTermQueryRewrite) {\n    List<CharacterRunAutomaton> allAutomata = new ArrayList<>();\n    if (terms.length > 0) {\n      allAutomata.add(new CharacterRunAutomaton(Automata.makeStringUnion(Arrays.asList(terms))));\n    }\n    Collections.addAll(allAutomata, automata);\n    for (SpanQuery spanQuery : strictPhrases.getSpanQueries()) {\n      Collections.addAll(allAutomata,\n          MultiTermHighlighting.extractAutomata(spanQuery, fieldMatcher, true, multiTermQueryRewrite));//true==lookInSpan\n    }\n\n    if (allAutomata.size() == 1) {\n      return allAutomata.get(0);\n    }\n    //TODO it'd be nice if we could get at the underlying Automaton in CharacterRunAutomaton so that we\n    //  could union them all. But it's not exposed, and note TermRangeQuery isn't modelled as an Automaton\n    //  by MultiTermHighlighting.\n\n    // Return an aggregate CharacterRunAutomaton of others\n    return new CharacterRunAutomaton(Automata.makeEmpty()) {// the makeEmpty() is bogus; won't be used\n      @Override\n      public boolean run(char[] chars, int offset, int length) {\n        for (int i = 0; i < allAutomata.size(); i++) {// don't use foreach to avoid Iterator allocation\n          if (allAutomata.get(i).run(chars, offset, length)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Build one {@link CharacterRunAutomaton} matching any term the query might match.\n   */\n  private static CharacterRunAutomaton buildCombinedAutomaton(String field, BytesRef[] terms,\n                                                              CharacterRunAutomaton[] automata,\n                                                              PhraseHelper strictPhrases,\n                                                              Function<Query, Collection<Query>> multiTermQueryRewrite) {\n    List<CharacterRunAutomaton> allAutomata = new ArrayList<>();\n    if (terms.length > 0) {\n      allAutomata.add(new CharacterRunAutomaton(Automata.makeStringUnion(Arrays.asList(terms))));\n    }\n    Collections.addAll(allAutomata, automata);\n    for (SpanQuery spanQuery : strictPhrases.getSpanQueries()) {\n      Collections.addAll(allAutomata,\n          MultiTermHighlighting.extractAutomata(spanQuery, field, true, multiTermQueryRewrite));//true==lookInSpan\n    }\n\n    if (allAutomata.size() == 1) {\n      return allAutomata.get(0);\n    }\n    //TODO it'd be nice if we could get at the underlying Automaton in CharacterRunAutomaton so that we\n    //  could union them all. But it's not exposed, and note TermRangeQuery isn't modelled as an Automaton\n    //  by MultiTermHighlighting.\n\n    // Return an aggregate CharacterRunAutomaton of others\n    return new CharacterRunAutomaton(Automata.makeEmpty()) {// the makeEmpty() is bogus; won't be used\n      @Override\n      public boolean run(char[] chars, int offset, int length) {\n        for (int i = 0; i < allAutomata.size(); i++) {// don't use foreach to avoid Iterator allocation\n          if (allAutomata.get(i).run(chars, offset, length)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#buildCombinedAutomaton(Predicate[String],BytesRef[],CharacterRunAutomaton[],PhraseHelper,Function[Query,Collection[Query]]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#buildCombinedAutomaton(String,BytesRef[],CharacterRunAutomaton[],PhraseHelper,Function[Query,Collection[Query]]).mjava","sourceNew":"  /**\n   * Build one {@link CharacterRunAutomaton} matching any term the query might match.\n   */\n  private static CharacterRunAutomaton buildCombinedAutomaton(Predicate<String> fieldMatcher,\n                                                              BytesRef[] terms,\n                                                              CharacterRunAutomaton[] automata,\n                                                              PhraseHelper strictPhrases,\n                                                              Function<Query, Collection<Query>> multiTermQueryRewrite) {\n    List<CharacterRunAutomaton> allAutomata = new ArrayList<>();\n    if (terms.length > 0) {\n      allAutomata.add(new CharacterRunAutomaton(Automata.makeStringUnion(Arrays.asList(terms))));\n    }\n    Collections.addAll(allAutomata, automata);\n    for (SpanQuery spanQuery : strictPhrases.getSpanQueries()) {\n      Collections.addAll(allAutomata,\n          MultiTermHighlighting.extractAutomata(spanQuery, fieldMatcher, true, multiTermQueryRewrite));//true==lookInSpan\n    }\n\n    if (allAutomata.size() == 1) {\n      return allAutomata.get(0);\n    }\n    //TODO it'd be nice if we could get at the underlying Automaton in CharacterRunAutomaton so that we\n    //  could union them all. But it's not exposed, and note TermRangeQuery isn't modelled as an Automaton\n    //  by MultiTermHighlighting.\n\n    // Return an aggregate CharacterRunAutomaton of others\n    return new CharacterRunAutomaton(Automata.makeEmpty()) {// the makeEmpty() is bogus; won't be used\n      @Override\n      public boolean run(char[] chars, int offset, int length) {\n        for (int i = 0; i < allAutomata.size(); i++) {// don't use foreach to avoid Iterator allocation\n          if (allAutomata.get(i).run(chars, offset, length)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Build one {@link CharacterRunAutomaton} matching any term the query might match.\n   */\n  private static CharacterRunAutomaton buildCombinedAutomaton(String field, BytesRef[] terms,\n                                                              CharacterRunAutomaton[] automata,\n                                                              PhraseHelper strictPhrases,\n                                                              Function<Query, Collection<Query>> multiTermQueryRewrite) {\n    List<CharacterRunAutomaton> allAutomata = new ArrayList<>();\n    if (terms.length > 0) {\n      allAutomata.add(new CharacterRunAutomaton(Automata.makeStringUnion(Arrays.asList(terms))));\n    }\n    Collections.addAll(allAutomata, automata);\n    for (SpanQuery spanQuery : strictPhrases.getSpanQueries()) {\n      Collections.addAll(allAutomata,\n          MultiTermHighlighting.extractAutomata(spanQuery, field, true, multiTermQueryRewrite));//true==lookInSpan\n    }\n\n    if (allAutomata.size() == 1) {\n      return allAutomata.get(0);\n    }\n    //TODO it'd be nice if we could get at the underlying Automaton in CharacterRunAutomaton so that we\n    //  could union them all. But it's not exposed, and note TermRangeQuery isn't modelled as an Automaton\n    //  by MultiTermHighlighting.\n\n    // Return an aggregate CharacterRunAutomaton of others\n    return new CharacterRunAutomaton(Automata.makeEmpty()) {// the makeEmpty() is bogus; won't be used\n      @Override\n      public boolean run(char[] chars, int offset, int length) {\n        for (int i = 0; i < allAutomata.size(); i++) {// don't use foreach to avoid Iterator allocation\n          if (allAutomata.get(i).run(chars, offset, length)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb37680595d3fecd821eaa695beb5c9ced607584","date":1497668271,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#buildCombinedAutomaton(Predicate[String],BytesRef[],CharacterRunAutomaton[],PhraseHelper,Function[Query,Collection[Query]]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#buildCombinedAutomaton(Predicate[String],BytesRef[],CharacterRunAutomaton[],PhraseHelper,Function[Query,Collection[Query]]).mjava","sourceNew":"  /**\n   * Build one {@link CharacterRunAutomaton} matching any term the query might match.\n   */\n  private static CharacterRunAutomaton buildCombinedAutomaton(Predicate<String> fieldMatcher,\n                                                              BytesRef[] terms,\n                                                              CharacterRunAutomaton[] automata,\n                                                              PhraseHelper strictPhrases,\n                                                              Function<Query, Collection<Query>> multiTermQueryRewrite) {\n    List<CharacterRunAutomaton> allAutomata = new ArrayList<>();\n    if (terms.length > 0) {\n      allAutomata.add(new CharacterRunAutomaton(Automata.makeStringUnion(Arrays.asList(terms))));\n    }\n    Collections.addAll(allAutomata, automata);\n    for (SpanQuery spanQuery : strictPhrases.getSpanQueries()) {\n      Collections.addAll(allAutomata,\n          MultiTermHighlighting.extractAutomata(spanQuery, fieldMatcher, true, multiTermQueryRewrite));//true==lookInSpan\n    }\n\n    if (allAutomata.size() == 1) {\n      return allAutomata.get(0);\n    }\n    //TODO it'd be nice if we could get at the underlying Automaton in CharacterRunAutomaton so that we\n    //  could union them all. But it's not exposed, and sometimes the automaton is byte (not char) oriented\n\n    // Return an aggregate CharacterRunAutomaton of others\n    return new CharacterRunAutomaton(Automata.makeEmpty()) {// the makeEmpty() is bogus; won't be used\n      @Override\n      public boolean run(char[] chars, int offset, int length) {\n        for (int i = 0; i < allAutomata.size(); i++) {// don't use foreach to avoid Iterator allocation\n          if (allAutomata.get(i).run(chars, offset, length)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Build one {@link CharacterRunAutomaton} matching any term the query might match.\n   */\n  private static CharacterRunAutomaton buildCombinedAutomaton(Predicate<String> fieldMatcher,\n                                                              BytesRef[] terms,\n                                                              CharacterRunAutomaton[] automata,\n                                                              PhraseHelper strictPhrases,\n                                                              Function<Query, Collection<Query>> multiTermQueryRewrite) {\n    List<CharacterRunAutomaton> allAutomata = new ArrayList<>();\n    if (terms.length > 0) {\n      allAutomata.add(new CharacterRunAutomaton(Automata.makeStringUnion(Arrays.asList(terms))));\n    }\n    Collections.addAll(allAutomata, automata);\n    for (SpanQuery spanQuery : strictPhrases.getSpanQueries()) {\n      Collections.addAll(allAutomata,\n          MultiTermHighlighting.extractAutomata(spanQuery, fieldMatcher, true, multiTermQueryRewrite));//true==lookInSpan\n    }\n\n    if (allAutomata.size() == 1) {\n      return allAutomata.get(0);\n    }\n    //TODO it'd be nice if we could get at the underlying Automaton in CharacterRunAutomaton so that we\n    //  could union them all. But it's not exposed, and note TermRangeQuery isn't modelled as an Automaton\n    //  by MultiTermHighlighting.\n\n    // Return an aggregate CharacterRunAutomaton of others\n    return new CharacterRunAutomaton(Automata.makeEmpty()) {// the makeEmpty() is bogus; won't be used\n      @Override\n      public boolean run(char[] chars, int offset, int length) {\n        for (int i = 0; i < allAutomata.size(); i++) {// don't use foreach to avoid Iterator allocation\n          if (allAutomata.get(i).run(chars, offset, length)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#buildCombinedAutomaton(Predicate[String],BytesRef[],CharacterRunAutomaton[],PhraseHelper,Function[Query,Collection[Query]]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#buildCombinedAutomaton(Predicate[String],BytesRef[],CharacterRunAutomaton[],PhraseHelper,Function[Query,Collection[Query]]).mjava","sourceNew":"  /**\n   * Build one {@link CharacterRunAutomaton} matching any term the query might match.\n   */\n  private static CharacterRunAutomaton buildCombinedAutomaton(Predicate<String> fieldMatcher,\n                                                              BytesRef[] terms,\n                                                              CharacterRunAutomaton[] automata,\n                                                              PhraseHelper strictPhrases,\n                                                              Function<Query, Collection<Query>> multiTermQueryRewrite) {\n    List<CharacterRunAutomaton> allAutomata = new ArrayList<>();\n    if (terms.length > 0) {\n      allAutomata.add(new CharacterRunAutomaton(Automata.makeStringUnion(Arrays.asList(terms))));\n    }\n    Collections.addAll(allAutomata, automata);\n    for (SpanQuery spanQuery : strictPhrases.getSpanQueries()) {\n      Collections.addAll(allAutomata,\n          MultiTermHighlighting.extractAutomata(spanQuery, fieldMatcher, true, multiTermQueryRewrite));//true==lookInSpan\n    }\n\n    if (allAutomata.size() == 1) {\n      return allAutomata.get(0);\n    }\n    //TODO it'd be nice if we could get at the underlying Automaton in CharacterRunAutomaton so that we\n    //  could union them all. But it's not exposed, and sometimes the automaton is byte (not char) oriented\n\n    // Return an aggregate CharacterRunAutomaton of others\n    return new CharacterRunAutomaton(Automata.makeEmpty()) {// the makeEmpty() is bogus; won't be used\n      @Override\n      public boolean run(char[] chars, int offset, int length) {\n        for (int i = 0; i < allAutomata.size(); i++) {// don't use foreach to avoid Iterator allocation\n          if (allAutomata.get(i).run(chars, offset, length)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Build one {@link CharacterRunAutomaton} matching any term the query might match.\n   */\n  private static CharacterRunAutomaton buildCombinedAutomaton(Predicate<String> fieldMatcher,\n                                                              BytesRef[] terms,\n                                                              CharacterRunAutomaton[] automata,\n                                                              PhraseHelper strictPhrases,\n                                                              Function<Query, Collection<Query>> multiTermQueryRewrite) {\n    List<CharacterRunAutomaton> allAutomata = new ArrayList<>();\n    if (terms.length > 0) {\n      allAutomata.add(new CharacterRunAutomaton(Automata.makeStringUnion(Arrays.asList(terms))));\n    }\n    Collections.addAll(allAutomata, automata);\n    for (SpanQuery spanQuery : strictPhrases.getSpanQueries()) {\n      Collections.addAll(allAutomata,\n          MultiTermHighlighting.extractAutomata(spanQuery, fieldMatcher, true, multiTermQueryRewrite));//true==lookInSpan\n    }\n\n    if (allAutomata.size() == 1) {\n      return allAutomata.get(0);\n    }\n    //TODO it'd be nice if we could get at the underlying Automaton in CharacterRunAutomaton so that we\n    //  could union them all. But it's not exposed, and note TermRangeQuery isn't modelled as an Automaton\n    //  by MultiTermHighlighting.\n\n    // Return an aggregate CharacterRunAutomaton of others\n    return new CharacterRunAutomaton(Automata.makeEmpty()) {// the makeEmpty() is bogus; won't be used\n      @Override\n      public boolean run(char[] chars, int offset, int length) {\n        for (int i = 0; i < allAutomata.size(); i++) {// don't use foreach to avoid Iterator allocation\n          if (allAutomata.get(i).run(chars, offset, length)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#buildCombinedAutomaton(Predicate[String],BytesRef[],CharacterRunAutomaton[],PhraseHelper,Function[Query,Collection[Query]]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#buildCombinedAutomaton(Predicate[String],BytesRef[],CharacterRunAutomaton[],PhraseHelper,Function[Query,Collection[Query]]).mjava","sourceNew":"  /**\n   * Build one {@link CharacterRunAutomaton} matching any term the query might match.\n   */\n  private static CharacterRunAutomaton buildCombinedAutomaton(Predicate<String> fieldMatcher,\n                                                              BytesRef[] terms,\n                                                              CharacterRunAutomaton[] automata,\n                                                              PhraseHelper strictPhrases,\n                                                              Function<Query, Collection<Query>> multiTermQueryRewrite) {\n    List<CharacterRunAutomaton> allAutomata = new ArrayList<>();\n    if (terms.length > 0) {\n      allAutomata.add(new CharacterRunAutomaton(Automata.makeStringUnion(Arrays.asList(terms))));\n    }\n    Collections.addAll(allAutomata, automata);\n    for (SpanQuery spanQuery : strictPhrases.getSpanQueries()) {\n      Collections.addAll(allAutomata,\n          MultiTermHighlighting.extractAutomata(spanQuery, fieldMatcher, true, multiTermQueryRewrite));//true==lookInSpan\n    }\n\n    if (allAutomata.size() == 1) {\n      return allAutomata.get(0);\n    }\n    //TODO it'd be nice if we could get at the underlying Automaton in CharacterRunAutomaton so that we\n    //  could union them all. But it's not exposed, and sometimes the automaton is byte (not char) oriented\n\n    // Return an aggregate CharacterRunAutomaton of others\n    return new CharacterRunAutomaton(Automata.makeEmpty()) {// the makeEmpty() is bogus; won't be used\n      @Override\n      public boolean run(char[] chars, int offset, int length) {\n        for (int i = 0; i < allAutomata.size(); i++) {// don't use foreach to avoid Iterator allocation\n          if (allAutomata.get(i).run(chars, offset, length)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Build one {@link CharacterRunAutomaton} matching any term the query might match.\n   */\n  private static CharacterRunAutomaton buildCombinedAutomaton(Predicate<String> fieldMatcher,\n                                                              BytesRef[] terms,\n                                                              CharacterRunAutomaton[] automata,\n                                                              PhraseHelper strictPhrases,\n                                                              Function<Query, Collection<Query>> multiTermQueryRewrite) {\n    List<CharacterRunAutomaton> allAutomata = new ArrayList<>();\n    if (terms.length > 0) {\n      allAutomata.add(new CharacterRunAutomaton(Automata.makeStringUnion(Arrays.asList(terms))));\n    }\n    Collections.addAll(allAutomata, automata);\n    for (SpanQuery spanQuery : strictPhrases.getSpanQueries()) {\n      Collections.addAll(allAutomata,\n          MultiTermHighlighting.extractAutomata(spanQuery, fieldMatcher, true, multiTermQueryRewrite));//true==lookInSpan\n    }\n\n    if (allAutomata.size() == 1) {\n      return allAutomata.get(0);\n    }\n    //TODO it'd be nice if we could get at the underlying Automaton in CharacterRunAutomaton so that we\n    //  could union them all. But it's not exposed, and note TermRangeQuery isn't modelled as an Automaton\n    //  by MultiTermHighlighting.\n\n    // Return an aggregate CharacterRunAutomaton of others\n    return new CharacterRunAutomaton(Automata.makeEmpty()) {// the makeEmpty() is bogus; won't be used\n      @Override\n      public boolean run(char[] chars, int offset, int length) {\n        for (int i = 0; i < allAutomata.size(); i++) {// don't use foreach to avoid Iterator allocation\n          if (allAutomata.get(i).run(chars, offset, length)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"795822cce6616d4035b5a4bdbb6c113ea2f715ba","date":1535599765,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#buildCombinedAutomaton(UHComponents,Function[Query,Collection[Query]]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/MemoryIndexOffsetStrategy#buildCombinedAutomaton(Predicate[String],BytesRef[],CharacterRunAutomaton[],PhraseHelper,Function[Query,Collection[Query]]).mjava","sourceNew":"  /**\n   * Build one {@link CharacterRunAutomaton} matching any term the query might match.\n   */\n  private static CharacterRunAutomaton buildCombinedAutomaton(UHComponents components,\n                                                              Function<Query, Collection<Query>> multiTermQueryRewrite) {\n    List<CharacterRunAutomaton> allAutomata = new ArrayList<>();\n    if (components.getTerms().length > 0) {\n      allAutomata.add(new CharacterRunAutomaton(Automata.makeStringUnion(Arrays.asList(components.getTerms()))));\n    }\n    Collections.addAll(allAutomata, components.getAutomata());\n    for (SpanQuery spanQuery : components.getPhraseHelper().getSpanQueries()) {\n      Collections.addAll(allAutomata,\n          MultiTermHighlighting.extractAutomata(spanQuery, components.getFieldMatcher(), true, multiTermQueryRewrite));//true==lookInSpan\n    }\n\n    if (allAutomata.size() == 1) {\n      return allAutomata.get(0);\n    }\n    //TODO it'd be nice if we could get at the underlying Automaton in CharacterRunAutomaton so that we\n    //  could union them all. But it's not exposed, and sometimes the automaton is byte (not char) oriented\n\n    // Return an aggregate CharacterRunAutomaton of others\n    return new CharacterRunAutomaton(Automata.makeEmpty()) {// the makeEmpty() is bogus; won't be used\n      @Override\n      public boolean run(char[] chars, int offset, int length) {\n        for (int i = 0; i < allAutomata.size(); i++) {// don't use foreach to avoid Iterator allocation\n          if (allAutomata.get(i).run(chars, offset, length)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Build one {@link CharacterRunAutomaton} matching any term the query might match.\n   */\n  private static CharacterRunAutomaton buildCombinedAutomaton(Predicate<String> fieldMatcher,\n                                                              BytesRef[] terms,\n                                                              CharacterRunAutomaton[] automata,\n                                                              PhraseHelper strictPhrases,\n                                                              Function<Query, Collection<Query>> multiTermQueryRewrite) {\n    List<CharacterRunAutomaton> allAutomata = new ArrayList<>();\n    if (terms.length > 0) {\n      allAutomata.add(new CharacterRunAutomaton(Automata.makeStringUnion(Arrays.asList(terms))));\n    }\n    Collections.addAll(allAutomata, automata);\n    for (SpanQuery spanQuery : strictPhrases.getSpanQueries()) {\n      Collections.addAll(allAutomata,\n          MultiTermHighlighting.extractAutomata(spanQuery, fieldMatcher, true, multiTermQueryRewrite));//true==lookInSpan\n    }\n\n    if (allAutomata.size() == 1) {\n      return allAutomata.get(0);\n    }\n    //TODO it'd be nice if we could get at the underlying Automaton in CharacterRunAutomaton so that we\n    //  could union them all. But it's not exposed, and sometimes the automaton is byte (not char) oriented\n\n    // Return an aggregate CharacterRunAutomaton of others\n    return new CharacterRunAutomaton(Automata.makeEmpty()) {// the makeEmpty() is bogus; won't be used\n      @Override\n      public boolean run(char[] chars, int offset, int length) {\n        for (int i = 0; i < allAutomata.size(); i++) {// don't use foreach to avoid Iterator allocation\n          if (allAutomata.get(i).run(chars, offset, length)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5675b3bced0b155f0ff8001ce2e1e502be7c92f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fb37680595d3fecd821eaa695beb5c9ced607584":["ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5675b3bced0b155f0ff8001ce2e1e502be7c92f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d","fb37680595d3fecd821eaa695beb5c9ced607584"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d","fb37680595d3fecd821eaa695beb5c9ced607584"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["795822cce6616d4035b5a4bdbb6c113ea2f715ba"]},"commit2Childs":{"5675b3bced0b155f0ff8001ce2e1e502be7c92f6":["ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"fb37680595d3fecd821eaa695beb5c9ced607584":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d":["fb37680595d3fecd821eaa695beb5c9ced607584","9856095f7afb5a607bf5e65077615ed91273508c","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5675b3bced0b155f0ff8001ce2e1e502be7c92f6","ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d","9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["795822cce6616d4035b5a4bdbb6c113ea2f715ba"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}