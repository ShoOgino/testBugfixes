{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/TermQueryPrefixTreeStrategy#makeQuery(SpatialArgs,SimpleSpatialFieldInfo).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/TermQueryPrefixTreeStrategy#makeQuery(SpatialArgs,SimpleSpatialFieldInfo).mjava","pathOld":"modules/spatial/src/java/org/apache/lucene/spatial/prefix/TermQueryPrefixTreeStrategy#makeQuery(SpatialArgs,SimpleSpatialFieldInfo).mjava","sourceNew":"  @Override\n  public Query makeQuery(SpatialArgs args, SimpleSpatialFieldInfo fieldInfo) {\n    if (args.getOperation() != SpatialOperation.Intersects &&\n        args.getOperation() != SpatialOperation.IsWithin &&\n        args.getOperation() != SpatialOperation.Overlaps ){\n      // TODO -- can translate these other query types\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    }\n    Shape qshape = args.getShape();\n    int detailLevel = grid.getMaxLevelForPrecision(qshape, args.getDistPrecision());\n    List<Node> cells = grid.getNodes(qshape, detailLevel, false);\n\n    BooleanQuery booleanQuery = new BooleanQuery();\n    for (Node cell : cells) {\n      booleanQuery.add(new TermQuery(new Term(fieldInfo.getFieldName(), cell.getTokenString())), BooleanClause.Occur.SHOULD);\n    }\n    return booleanQuery;\n  }\n\n","sourceOld":"  @Override\n  public Query makeQuery(SpatialArgs args, SimpleSpatialFieldInfo fieldInfo) {\n    if (args.getOperation() != SpatialOperation.Intersects &&\n        args.getOperation() != SpatialOperation.IsWithin &&\n        args.getOperation() != SpatialOperation.Overlaps ){\n      // TODO -- can translate these other query types\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    }\n    Shape qshape = args.getShape();\n    int detailLevel = grid.getMaxLevelForPrecision(qshape, args.getDistPrecision());\n    List<Node> cells = grid.getNodes(qshape, detailLevel, false);\n\n    BooleanQuery booleanQuery = new BooleanQuery();\n    for (Node cell : cells) {\n      booleanQuery.add(new TermQuery(new Term(fieldInfo.getFieldName(), cell.getTokenString())), BooleanClause.Occur.SHOULD);\n    }\n    return booleanQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"561469a62683fb18474394874c6010a19fb0deb7","date":1340864819,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/TermQueryPrefixTreeStrategy#makeQuery(SpatialArgs,SimpleSpatialFieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Query makeQuery(SpatialArgs args, SimpleSpatialFieldInfo fieldInfo) {\n    if (args.getOperation() != SpatialOperation.Intersects &&\n        args.getOperation() != SpatialOperation.IsWithin &&\n        args.getOperation() != SpatialOperation.Overlaps ){\n      // TODO -- can translate these other query types\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    }\n    Shape qshape = args.getShape();\n    int detailLevel = grid.getMaxLevelForPrecision(qshape, args.getDistPrecision());\n    List<Node> cells = grid.getNodes(qshape, detailLevel, false);\n\n    BooleanQuery booleanQuery = new BooleanQuery();\n    for (Node cell : cells) {\n      booleanQuery.add(new TermQuery(new Term(fieldInfo.getFieldName(), cell.getTokenString())), BooleanClause.Occur.SHOULD);\n    }\n    return booleanQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/TermQueryPrefixTreeStrategy#makeQuery(SpatialArgs,SimpleSpatialFieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Query makeQuery(SpatialArgs args, SimpleSpatialFieldInfo fieldInfo) {\n    if (args.getOperation() != SpatialOperation.Intersects &&\n        args.getOperation() != SpatialOperation.IsWithin &&\n        args.getOperation() != SpatialOperation.Overlaps ){\n      // TODO -- can translate these other query types\n      throw new UnsupportedSpatialOperation(args.getOperation());\n    }\n    Shape qshape = args.getShape();\n    int detailLevel = grid.getMaxLevelForPrecision(qshape, args.getDistPrecision());\n    List<Node> cells = grid.getNodes(qshape, detailLevel, false);\n\n    BooleanQuery booleanQuery = new BooleanQuery();\n    for (Node cell : cells) {\n      booleanQuery.add(new TermQuery(new Term(fieldInfo.getFieldName(), cell.getTokenString())), BooleanClause.Occur.SHOULD);\n    }\n    return booleanQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","561469a62683fb18474394874c6010a19fb0deb7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"561469a62683fb18474394874c6010a19fb0deb7":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["561469a62683fb18474394874c6010a19fb0deb7"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","561469a62683fb18474394874c6010a19fb0deb7"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"561469a62683fb18474394874c6010a19fb0deb7":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}