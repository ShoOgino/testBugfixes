{"path":"lucene/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#createCategoryListIterator(IndexReader,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#createCategoryListIterator(IndexReader,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#createCategoryListIterator(IndexReader,int).mjava","sourceNew":"  /**\n   * Create the category list iterator for the specified partition.\n   */\n  public CategoryListIterator createCategoryListIterator(IndexReader reader,\n      int partition) throws IOException {\n    String categoryListTermStr = PartitionsUtils.partitionName(this, partition);\n    Term payloadTerm = new Term(term.field(), categoryListTermStr);\n    return new PayloadIntDecodingIterator(reader, payloadTerm,\n        createEncoder().createMatchingDecoder());\n  }\n\n","sourceOld":"  /**\n   * Create the category list iterator for the specified partition.\n   */\n  public CategoryListIterator createCategoryListIterator(IndexReader reader,\n      int partition) throws IOException {\n    String categoryListTermStr = PartitionsUtils.partitionName(this, partition);\n    Term payloadTerm = new Term(term.field(), categoryListTermStr);\n    return new PayloadIntDecodingIterator(reader, payloadTerm,\n        createEncoder().createMatchingDecoder());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bceb02c33032dd9bbf107cd06d0b74e5db4f110a","date":1357909746,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#createCategoryListIterator(IndexReader,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#createCategoryListIterator(IndexReader,int).mjava","sourceNew":"  /**\n   * Create the category list iterator for the specified partition.\n   */\n  public CategoryListIterator createCategoryListIterator(IndexReader reader,\n      int partition) throws IOException {\n    String categoryListTermStr = PartitionsUtils.partitionName(this, partition);\n    Term payloadTerm = new Term(term.field(), categoryListTermStr);\n    return new PayloadCategoryListIteraor(reader, payloadTerm,\n        createEncoder().createMatchingDecoder());\n  }\n\n","sourceOld":"  /**\n   * Create the category list iterator for the specified partition.\n   */\n  public CategoryListIterator createCategoryListIterator(IndexReader reader,\n      int partition) throws IOException {\n    String categoryListTermStr = PartitionsUtils.partitionName(this, partition);\n    Term payloadTerm = new Term(term.field(), categoryListTermStr);\n    return new PayloadIntDecodingIterator(reader, payloadTerm,\n        createEncoder().createMatchingDecoder());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#createCategoryListIterator(IndexReader,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#createCategoryListIterator(IndexReader,int).mjava","sourceNew":"  /**\n   * Create the category list iterator for the specified partition.\n   */\n  public CategoryListIterator createCategoryListIterator(IndexReader reader,\n      int partition) throws IOException {\n    String categoryListTermStr = PartitionsUtils.partitionName(this, partition);\n    Term payloadTerm = new Term(term.field(), categoryListTermStr);\n    return new PayloadCategoryListIteraor(reader, payloadTerm,\n        createEncoder().createMatchingDecoder());\n  }\n\n","sourceOld":"  /**\n   * Create the category list iterator for the specified partition.\n   */\n  public CategoryListIterator createCategoryListIterator(IndexReader reader,\n      int partition) throws IOException {\n    String categoryListTermStr = PartitionsUtils.partitionName(this, partition);\n    Term payloadTerm = new Term(term.field(), categoryListTermStr);\n    return new PayloadIntDecodingIterator(reader, payloadTerm,\n        createEncoder().createMatchingDecoder());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f51b3ab4258ff4623227b0db011b8bb83db5c7","date":1358164991,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#createCategoryListIterator(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#createCategoryListIterator(IndexReader,int).mjava","sourceNew":"  /** Create the {@link CategoryListIterator} for the specified partition. */\n  public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n    String categoryListTermStr = PartitionsUtils.partitionName(this, partition);\n    Term payloadTerm = new Term(term.field(), categoryListTermStr);\n    return new PayloadCategoryListIteraor(payloadTerm, createEncoder().createMatchingDecoder());\n  }\n\n","sourceOld":"  /**\n   * Create the category list iterator for the specified partition.\n   */\n  public CategoryListIterator createCategoryListIterator(IndexReader reader,\n      int partition) throws IOException {\n    String categoryListTermStr = PartitionsUtils.partitionName(this, partition);\n    Term payloadTerm = new Term(term.field(), categoryListTermStr);\n    return new PayloadCategoryListIteraor(reader, payloadTerm,\n        createEncoder().createMatchingDecoder());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#createCategoryListIterator(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/params/CategoryListParams#createCategoryListIterator(IndexReader,int).mjava","sourceNew":"  /** Create the {@link CategoryListIterator} for the specified partition. */\n  public CategoryListIterator createCategoryListIterator(int partition) throws IOException {\n    String categoryListTermStr = PartitionsUtils.partitionName(this, partition);\n    Term payloadTerm = new Term(term.field(), categoryListTermStr);\n    return new PayloadCategoryListIteraor(payloadTerm, createEncoder().createMatchingDecoder());\n  }\n\n","sourceOld":"  /**\n   * Create the category list iterator for the specified partition.\n   */\n  public CategoryListIterator createCategoryListIterator(IndexReader reader,\n      int partition) throws IOException {\n    String categoryListTermStr = PartitionsUtils.partitionName(this, partition);\n    Term payloadTerm = new Term(term.field(), categoryListTermStr);\n    return new PayloadCategoryListIteraor(reader, payloadTerm,\n        createEncoder().createMatchingDecoder());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["4e6354dd7c71fe122926fc53d7d29f715b1283db","42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["b89678825b68eccaf09e6ab71675fc0b0af1e099","bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["42f51b3ab4258ff4623227b0db011b8bb83db5c7"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["42f51b3ab4258ff4623227b0db011b8bb83db5c7","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["8917bfede3b4ca30f4305c1e391e9218959cd723"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}