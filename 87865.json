{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getBinary(FieldInfo).mjava","commits":[{"id":"e8550173e67bccdaad7c5cbb85fb81886fecfcb7","date":1376943063,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getBinary(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public synchronized BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryDocValues instance = binaryInstances.get(field.number);\n    if (instance == null) {\n      instance = loadBinary(field);\n      binaryInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getBinary(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public synchronized BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryDocValues instance = binaryInstances.get(field.number);\n    if (instance == null) {\n      instance = loadBinary(field);\n      binaryInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getBinary(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public synchronized BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryDocValues instance = binaryInstances.get(field.number);\n    if (instance == null) {\n      instance = loadBinary(field);\n      binaryInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getBinary(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getBinary(FieldInfo).mjava","sourceNew":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n\n    BytesAndAddresses instance;\n    synchronized (this) {\n      instance = pagedBytesInstances.get(field.number);\n      if (instance == null) {\n        instance = loadBinary(field);\n        pagedBytesInstances.put(field.number, instance);\n      }\n    }\n    final PagedBytes.Reader bytesReader = instance.reader;\n    final MonotonicBlockPackedReader addresses = instance.addresses;\n\n    if (addresses == null) {\n      assert entry.minLength == entry.maxLength;\n      final int fixedLength = entry.minLength;\n      return new BinaryDocValues() {\n        final BytesRef term = new BytesRef();\n\n        @Override\n        public BytesRef get(int docID) {\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } else {\n      return new BinaryDocValues() {\n        final BytesRef term = new BytesRef();\n\n        @Override\n        public BytesRef get(int docID) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID);\n          bytesReader.fillSlice(term, startAddress, (int) (endAddress - startAddress));\n          return term;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryDocValues instance = binaryInstances.get(field.number);\n    if (instance == null) {\n      instance = loadBinary(field);\n      binaryInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getBinary(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getBinary(FieldInfo).mjava","sourceNew":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.name);\n\n    BytesAndAddresses instance;\n    synchronized (this) {\n      instance = pagedBytesInstances.get(field.name);\n      if (instance == null) {\n        instance = loadBinary(field);\n        pagedBytesInstances.put(field.name, instance);\n      }\n    }\n    final PagedBytes.Reader bytesReader = instance.reader;\n    final MonotonicBlockPackedReader addresses = instance.addresses;\n\n    if (addresses == null) {\n      assert entry.minLength == entry.maxLength;\n      final int fixedLength = entry.minLength;\n      return new BinaryDocValues() {\n        final BytesRef term = new BytesRef();\n\n        @Override\n        public BytesRef get(int docID) {\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } else {\n      return new BinaryDocValues() {\n        final BytesRef term = new BytesRef();\n\n        @Override\n        public BytesRef get(int docID) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID);\n          bytesReader.fillSlice(term, startAddress, (int) (endAddress - startAddress));\n          return term;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n\n    BytesAndAddresses instance;\n    synchronized (this) {\n      instance = pagedBytesInstances.get(field.number);\n      if (instance == null) {\n        instance = loadBinary(field);\n        pagedBytesInstances.put(field.number, instance);\n      }\n    }\n    final PagedBytes.Reader bytesReader = instance.reader;\n    final MonotonicBlockPackedReader addresses = instance.addresses;\n\n    if (addresses == null) {\n      assert entry.minLength == entry.maxLength;\n      final int fixedLength = entry.minLength;\n      return new BinaryDocValues() {\n        final BytesRef term = new BytesRef();\n\n        @Override\n        public BytesRef get(int docID) {\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } else {\n      return new BinaryDocValues() {\n        final BytesRef term = new BytesRef();\n\n        @Override\n        public BytesRef get(int docID) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID);\n          bytesReader.fillSlice(term, startAddress, (int) (endAddress - startAddress));\n          return term;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f80fee115148a0e4a0574560be06b494de821","date":1412069872,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getBinary(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getBinary(FieldInfo).mjava","sourceNew":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.name);\n\n    BytesAndAddresses instance;\n    synchronized (this) {\n      instance = pagedBytesInstances.get(field.name);\n      if (instance == null) {\n        instance = loadBinary(field);\n        if (!merging) {\n          pagedBytesInstances.put(field.name, instance);\n        }\n      }\n    }\n    final PagedBytes.Reader bytesReader = instance.reader;\n    final MonotonicBlockPackedReader addresses = instance.addresses;\n\n    if (addresses == null) {\n      assert entry.minLength == entry.maxLength;\n      final int fixedLength = entry.minLength;\n      return new BinaryDocValues() {\n        final BytesRef term = new BytesRef();\n\n        @Override\n        public BytesRef get(int docID) {\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } else {\n      return new BinaryDocValues() {\n        final BytesRef term = new BytesRef();\n\n        @Override\n        public BytesRef get(int docID) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID);\n          bytesReader.fillSlice(term, startAddress, (int) (endAddress - startAddress));\n          return term;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.name);\n\n    BytesAndAddresses instance;\n    synchronized (this) {\n      instance = pagedBytesInstances.get(field.name);\n      if (instance == null) {\n        instance = loadBinary(field);\n        pagedBytesInstances.put(field.name, instance);\n      }\n    }\n    final PagedBytes.Reader bytesReader = instance.reader;\n    final MonotonicBlockPackedReader addresses = instance.addresses;\n\n    if (addresses == null) {\n      assert entry.minLength == entry.maxLength;\n      final int fixedLength = entry.minLength;\n      return new BinaryDocValues() {\n        final BytesRef term = new BytesRef();\n\n        @Override\n        public BytesRef get(int docID) {\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } else {\n      return new BinaryDocValues() {\n        final BytesRef term = new BytesRef();\n\n        @Override\n        public BytesRef get(int docID) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID);\n          bytesReader.fillSlice(term, startAddress, (int) (endAddress - startAddress));\n          return term;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getBinary(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getBinary(FieldInfo).mjava","sourceNew":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.name);\n\n    BytesAndAddresses instance;\n    synchronized (this) {\n      instance = pagedBytesInstances.get(field.name);\n      if (instance == null) {\n        instance = loadBinary(field);\n        if (!merging) {\n          pagedBytesInstances.put(field.name, instance);\n        }\n      }\n    }\n    final PagedBytes.Reader bytesReader = instance.reader;\n    final MonotonicBlockPackedReader addresses = instance.addresses;\n\n    if (addresses == null) {\n      assert entry.minLength == entry.maxLength;\n      final int fixedLength = entry.minLength;\n      return new BinaryDocValues() {\n        final BytesRef term = new BytesRef();\n\n        @Override\n        public BytesRef get(int docID) {\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } else {\n      return new BinaryDocValues() {\n        final BytesRef term = new BytesRef();\n\n        @Override\n        public BytesRef get(int docID) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID);\n          bytesReader.fillSlice(term, startAddress, (int) (endAddress - startAddress));\n          return term;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.name);\n\n    BytesAndAddresses instance;\n    synchronized (this) {\n      instance = pagedBytesInstances.get(field.name);\n      if (instance == null) {\n        instance = loadBinary(field);\n        pagedBytesInstances.put(field.name, instance);\n      }\n    }\n    final PagedBytes.Reader bytesReader = instance.reader;\n    final MonotonicBlockPackedReader addresses = instance.addresses;\n\n    if (addresses == null) {\n      assert entry.minLength == entry.maxLength;\n      final int fixedLength = entry.minLength;\n      return new BinaryDocValues() {\n        final BytesRef term = new BytesRef();\n\n        @Override\n        public BytesRef get(int docID) {\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } else {\n      return new BinaryDocValues() {\n        final BytesRef term = new BytesRef();\n\n        @Override\n        public BytesRef get(int docID) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID);\n          bytesReader.fillSlice(term, startAddress, (int) (endAddress - startAddress));\n          return term;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getBinary(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getBinary(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry be = binaries.get(field.name);\n    return new LegacyBinaryDocValuesWrapper(getMissingBits(field, be.missingOffset, be.missingBytes), getLegacyBinary(field));\n  }\n\n","sourceOld":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.name);\n\n    BytesAndAddresses instance;\n    synchronized (this) {\n      instance = pagedBytesInstances.get(field.name);\n      if (instance == null) {\n        instance = loadBinary(field);\n        if (!merging) {\n          pagedBytesInstances.put(field.name, instance);\n        }\n      }\n    }\n    final PagedBytes.Reader bytesReader = instance.reader;\n    final MonotonicBlockPackedReader addresses = instance.addresses;\n\n    if (addresses == null) {\n      assert entry.minLength == entry.maxLength;\n      final int fixedLength = entry.minLength;\n      return new BinaryDocValues() {\n        final BytesRef term = new BytesRef();\n\n        @Override\n        public BytesRef get(int docID) {\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } else {\n      return new BinaryDocValues() {\n        final BytesRef term = new BytesRef();\n\n        @Override\n        public BytesRef get(int docID) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID);\n          bytesReader.fillSlice(term, startAddress, (int) (endAddress - startAddress));\n          return term;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getBinary(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getBinary(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry be = binaries.get(field.name);\n    return new LegacyBinaryDocValuesWrapper(getMissingBits(field, be.missingOffset, be.missingBytes), getLegacyBinary(field));\n  }\n\n","sourceOld":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.name);\n\n    BytesAndAddresses instance;\n    synchronized (this) {\n      instance = pagedBytesInstances.get(field.name);\n      if (instance == null) {\n        instance = loadBinary(field);\n        if (!merging) {\n          pagedBytesInstances.put(field.name, instance);\n        }\n      }\n    }\n    final PagedBytes.Reader bytesReader = instance.reader;\n    final MonotonicBlockPackedReader addresses = instance.addresses;\n\n    if (addresses == null) {\n      assert entry.minLength == entry.maxLength;\n      final int fixedLength = entry.minLength;\n      return new BinaryDocValues() {\n        final BytesRef term = new BytesRef();\n\n        @Override\n        public BytesRef get(int docID) {\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } else {\n      return new BinaryDocValues() {\n        final BytesRef term = new BytesRef();\n\n        @Override\n        public BytesRef get(int docID) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID);\n          bytesReader.fillSlice(term, startAddress, (int) (endAddress - startAddress));\n          return term;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getBinary(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getBinary(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry be = binaries.get(field.name);\n    return new LegacyBinaryDocValuesWrapper(getMissingBits(field, be.missingOffset, be.missingBytes), getLegacyBinary(field));\n  }\n\n","sourceOld":"  @Override\n  public BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.name);\n\n    BytesAndAddresses instance;\n    synchronized (this) {\n      instance = pagedBytesInstances.get(field.name);\n      if (instance == null) {\n        instance = loadBinary(field);\n        if (!merging) {\n          pagedBytesInstances.put(field.name, instance);\n        }\n      }\n    }\n    final PagedBytes.Reader bytesReader = instance.reader;\n    final MonotonicBlockPackedReader addresses = instance.addresses;\n\n    if (addresses == null) {\n      assert entry.minLength == entry.maxLength;\n      final int fixedLength = entry.minLength;\n      return new BinaryDocValues() {\n        final BytesRef term = new BytesRef();\n\n        @Override\n        public BytesRef get(int docID) {\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } else {\n      return new BinaryDocValues() {\n        final BytesRef term = new BytesRef();\n\n        @Override\n        public BytesRef get(int docID) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID);\n          bytesReader.fillSlice(term, startAddress, (int) (endAddress - startAddress));\n          return term;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f89e8a6aac05753cde4c83d62a74356098200d","date":1525768331,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getBinary(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public synchronized BinaryDocValues getBinary(FieldInfo field) throws IOException {\n    BinaryEntry be = binaries.get(field.name);\n    return new LegacyBinaryDocValuesWrapper(getMissingBits(field, be.missingOffset, be.missingBytes), getLegacyBinary(field));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e8550173e67bccdaad7c5cbb85fb81886fecfcb7"],"e8550173e67bccdaad7c5cbb85fb81886fecfcb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9bb9a29a5e71a90295f175df8919802993142c9a","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"bc8f80fee115148a0e4a0574560be06b494de821":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"24f89e8a6aac05753cde4c83d62a74356098200d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"9bb9a29a5e71a90295f175df8919802993142c9a":["0936055c0eed56be3e4ae5c9db5b0e355390736a","bc8f80fee115148a0e4a0574560be06b494de821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9bb9a29a5e71a90295f175df8919802993142c9a","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["9bb9a29a5e71a90295f175df8919802993142c9a"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24f89e8a6aac05753cde4c83d62a74356098200d"]},"commit2Childs":{"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"e8550173e67bccdaad7c5cbb85fb81886fecfcb7":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"bc8f80fee115148a0e4a0574560be06b494de821":["9bb9a29a5e71a90295f175df8919802993142c9a"],"24f89e8a6aac05753cde4c83d62a74356098200d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9bb9a29a5e71a90295f175df8919802993142c9a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","e8550173e67bccdaad7c5cbb85fb81886fecfcb7"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","24f89e8a6aac05753cde4c83d62a74356098200d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["bc8f80fee115148a0e4a0574560be06b494de821","9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}