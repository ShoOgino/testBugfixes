{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/fr/TestElision#filtre(TokenFilter).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/fr/TestElision#filtre(TokenFilter).mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/fr/TestElision#filtre(TokenFilter).mjava","sourceNew":"  private List filtre(TokenFilter filter) {\n    List tas = new ArrayList();\n    try {\n      final Token reusableToken = new Token();\n      for (Token nextToken = filter.next(reusableToken); nextToken != null; nextToken = filter.next(reusableToken)) {\n        tas.add(nextToken.term());\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n    return tas;\n  }\n\n","sourceOld":"  private List filtre(TokenFilter filter) {\n    List tas = new ArrayList();\n    try {\n      final Token reusableToken = new Token();\n      for (Token nextToken = filter.next(reusableToken); nextToken != null; nextToken = filter.next(reusableToken)) {\n        tas.add(nextToken.term());\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n    return tas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/fr/TestElision#filtre(TokenFilter).mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/fr/TestElision#filtre(TokenFilter).mjava","sourceNew":"  private List filtre(TokenFilter filter) {\n    List tas = new ArrayList();\n    try {\n      TermAttribute termAtt = (TermAttribute) filter.getAttribute(TermAttribute.class);\n      while (filter.incrementToken()) {\n        tas.add(termAtt.term());\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n    return tas;\n  }\n\n","sourceOld":"  private List filtre(TokenFilter filter) {\n    List tas = new ArrayList();\n    try {\n      final Token reusableToken = new Token();\n      for (Token nextToken = filter.next(reusableToken); nextToken != null; nextToken = filter.next(reusableToken)) {\n        tas.add(nextToken.term());\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n    return tas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc","date":1251117853,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/fr/TestElision#filtre(TokenFilter).mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/fr/TestElision#filtre(TokenFilter).mjava","sourceNew":"  private List filtre(TokenFilter filter) throws IOException {\n    List tas = new ArrayList();\n    TermAttribute termAtt = (TermAttribute) filter.getAttribute(TermAttribute.class);\n    while (filter.incrementToken()) {\n      tas.add(termAtt.term());\n    }\n    return tas;\n  }\n\n","sourceOld":"  private List filtre(TokenFilter filter) {\n    List tas = new ArrayList();\n    try {\n      TermAttribute termAtt = (TermAttribute) filter.getAttribute(TermAttribute.class);\n      while (filter.incrementToken()) {\n        tas.add(termAtt.term());\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n    return tas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/fr/TestElision#filtre(TokenFilter).mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/fr/TestElision#filtre(TokenFilter).mjava","sourceNew":"  private List filtre(TokenFilter filter) throws IOException {\n    List tas = new ArrayList();\n    TermAttribute termAtt = filter.getAttribute(TermAttribute.class);\n    while (filter.incrementToken()) {\n      tas.add(termAtt.term());\n    }\n    return tas;\n  }\n\n","sourceOld":"  private List filtre(TokenFilter filter) throws IOException {\n    List tas = new ArrayList();\n    TermAttribute termAtt = (TermAttribute) filter.getAttribute(TermAttribute.class);\n    while (filter.incrementToken()) {\n      tas.add(termAtt.term());\n    }\n    return tas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/fr/TestElision#filter(TokenFilter).mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/fr/TestElision#filtre(TokenFilter).mjava","sourceNew":"  private List<String> filter(TokenFilter filter) throws IOException {\n    List<String> tas = new ArrayList<String>();\n    TermAttribute termAtt = filter.getAttribute(TermAttribute.class);\n    while (filter.incrementToken()) {\n      tas.add(termAtt.term());\n    }\n    return tas;\n  }\n\n","sourceOld":"  private List filtre(TokenFilter filter) throws IOException {\n    List tas = new ArrayList();\n    TermAttribute termAtt = filter.getAttribute(TermAttribute.class);\n    while (filter.incrementToken()) {\n      tas.add(termAtt.term());\n    }\n    return tas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}