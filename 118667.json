{"path":"lucene/core/src/java/org/apache/lucene/util/NotDocIdSet#iterator().mjava","commits":[{"id":"9cd756794a4a9e33f786119818f9d56162965cf8","date":1412591300,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NotDocIdSet#iterator().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocIdSetIterator iterator() throws IOException {\n    final DocIdSetIterator inIterator = in.iterator();\n    return new DocIdSetIterator() {\n\n      int doc = -1;\n      int nextSkippedDoc = -1;\n\n      @Override\n      public int nextDoc() throws IOException {\n        if (doc == NO_MORE_DOCS) {\n          return NO_MORE_DOCS;\n        }\n        return advance(doc + 1);\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        doc = target;\n        if (doc > nextSkippedDoc) {\n          nextSkippedDoc = inIterator.advance(doc);\n        }\n        while (true) {\n          if (doc >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          assert doc <= nextSkippedDoc;\n          if (doc != nextSkippedDoc) {\n            return doc;\n          }\n          doc += 1;\n          nextSkippedDoc = inIterator.nextDoc();\n        }\n      }\n\n      @Override\n      public int docID() {\n        return doc;\n      }\n\n      @Override\n      public long cost() {\n        // even if there are few docs in this set, iterating over all documents\n        // costs O(maxDoc) in all cases\n        return maxDoc;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NotDocIdSet#iterator().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocIdSetIterator iterator() throws IOException {\n    final DocIdSetIterator inIterator = in.iterator();\n    return new DocIdSetIterator() {\n\n      int doc = -1;\n      int nextSkippedDoc = -1;\n\n      @Override\n      public int nextDoc() throws IOException {\n        if (doc == NO_MORE_DOCS) {\n          return NO_MORE_DOCS;\n        }\n        return advance(doc + 1);\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        doc = target;\n        if (doc > nextSkippedDoc) {\n          nextSkippedDoc = inIterator.advance(doc);\n        }\n        while (true) {\n          if (doc >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          assert doc <= nextSkippedDoc;\n          if (doc != nextSkippedDoc) {\n            return doc;\n          }\n          doc += 1;\n          nextSkippedDoc = inIterator.nextDoc();\n        }\n      }\n\n      @Override\n      public int docID() {\n        return doc;\n      }\n\n      @Override\n      public long cost() {\n        // even if there are few docs in this set, iterating over all documents\n        // costs O(maxDoc) in all cases\n        return maxDoc;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d17035b3b6e3a8b5fb11ad1d447bc1124a06635b","date":1413468113,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NotDocIdSet#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/NotDocIdSet#iterator().mjava","sourceNew":"  @Override\n  public DocIdSetIterator iterator() throws IOException {\n    final DocIdSetIterator inIterator = in.iterator();\n    return new DocIdSetIterator() {\n\n      int doc = -1;\n      int nextSkippedDoc = -1;\n\n      @Override\n      public int nextDoc() throws IOException {\n        return advance(doc + 1);\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        doc = target;\n        if (doc > nextSkippedDoc) {\n          nextSkippedDoc = inIterator.advance(doc);\n        }\n        while (true) {\n          if (doc >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          assert doc <= nextSkippedDoc;\n          if (doc != nextSkippedDoc) {\n            return doc;\n          }\n          doc += 1;\n          nextSkippedDoc = inIterator.nextDoc();\n        }\n      }\n\n      @Override\n      public int docID() {\n        return doc;\n      }\n\n      @Override\n      public long cost() {\n        // even if there are few docs in this set, iterating over all documents\n        // costs O(maxDoc) in all cases\n        return maxDoc;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSetIterator iterator() throws IOException {\n    final DocIdSetIterator inIterator = in.iterator();\n    return new DocIdSetIterator() {\n\n      int doc = -1;\n      int nextSkippedDoc = -1;\n\n      @Override\n      public int nextDoc() throws IOException {\n        if (doc == NO_MORE_DOCS) {\n          return NO_MORE_DOCS;\n        }\n        return advance(doc + 1);\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        doc = target;\n        if (doc > nextSkippedDoc) {\n          nextSkippedDoc = inIterator.advance(doc);\n        }\n        while (true) {\n          if (doc >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          assert doc <= nextSkippedDoc;\n          if (doc != nextSkippedDoc) {\n            return doc;\n          }\n          doc += 1;\n          nextSkippedDoc = inIterator.nextDoc();\n        }\n      }\n\n      @Override\n      public int docID() {\n        return doc;\n      }\n\n      @Override\n      public long cost() {\n        // even if there are few docs in this set, iterating over all documents\n        // costs O(maxDoc) in all cases\n        return maxDoc;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NotDocIdSet#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/NotDocIdSet#iterator().mjava","sourceNew":"  @Override\n  public DocIdSetIterator iterator() throws IOException {\n    final DocIdSetIterator inIterator = in.iterator();\n    return new DocIdSetIterator() {\n\n      int doc = -1;\n      int nextSkippedDoc = -1;\n\n      @Override\n      public int nextDoc() throws IOException {\n        return advance(doc + 1);\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        doc = target;\n        if (doc > nextSkippedDoc) {\n          nextSkippedDoc = inIterator.advance(doc);\n        }\n        while (true) {\n          if (doc >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          assert doc <= nextSkippedDoc;\n          if (doc != nextSkippedDoc) {\n            return doc;\n          }\n          doc += 1;\n          nextSkippedDoc = inIterator.nextDoc();\n        }\n      }\n\n      @Override\n      public int docID() {\n        return doc;\n      }\n\n      @Override\n      public long cost() {\n        // even if there are few docs in this set, iterating over all documents\n        // costs O(maxDoc) in all cases\n        return maxDoc;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSetIterator iterator() throws IOException {\n    final DocIdSetIterator inIterator = in.iterator();\n    return new DocIdSetIterator() {\n\n      int doc = -1;\n      int nextSkippedDoc = -1;\n\n      @Override\n      public int nextDoc() throws IOException {\n        if (doc == NO_MORE_DOCS) {\n          return NO_MORE_DOCS;\n        }\n        return advance(doc + 1);\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        doc = target;\n        if (doc > nextSkippedDoc) {\n          nextSkippedDoc = inIterator.advance(doc);\n        }\n        while (true) {\n          if (doc >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          assert doc <= nextSkippedDoc;\n          if (doc != nextSkippedDoc) {\n            return doc;\n          }\n          doc += 1;\n          nextSkippedDoc = inIterator.nextDoc();\n        }\n      }\n\n      @Override\n      public int docID() {\n        return doc;\n      }\n\n      @Override\n      public long cost() {\n        // even if there are few docs in this set, iterating over all documents\n        // costs O(maxDoc) in all cases\n        return maxDoc;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9cd756794a4a9e33f786119818f9d56162965cf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55980207f1977bd1463465de1659b821347e2fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9cd756794a4a9e33f786119818f9d56162965cf8"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["55980207f1977bd1463465de1659b821347e2fa8","d17035b3b6e3a8b5fb11ad1d447bc1124a06635b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d17035b3b6e3a8b5fb11ad1d447bc1124a06635b":["9cd756794a4a9e33f786119818f9d56162965cf8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d17035b3b6e3a8b5fb11ad1d447bc1124a06635b"]},"commit2Childs":{"9cd756794a4a9e33f786119818f9d56162965cf8":["55980207f1977bd1463465de1659b821347e2fa8","d17035b3b6e3a8b5fb11ad1d447bc1124a06635b"],"55980207f1977bd1463465de1659b821347e2fa8":["0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9cd756794a4a9e33f786119818f9d56162965cf8","55980207f1977bd1463465de1659b821347e2fa8"],"d17035b3b6e3a8b5fb11ad1d447bc1124a06635b":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}