{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","sourceNew":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"id\", Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"autf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"fie\\u2C77ld\", \"field with non-ascii name\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    /* This was used in 2.9 to generate an index with compressed field:\n    if (id % 2 == 0) {\n      doc.add(new Field(\"compressed\", TEXT_TO_COMPRESS, Field.Store.COMPRESS, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"compressedSize\", Integer.toString(TEXT_COMPRESSED_LENGTH), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    } else {\n      doc.add(new Field(\"compressed\", BINARY_TO_COMPRESS, Field.Store.COMPRESS));    \n      doc.add(new Field(\"compressedSize\", Integer.toString(BINARY_COMPRESSED_LENGTH), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    }\n    */\n    writer.addDocument(doc);\n  }\n\n","sourceOld":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"id\", Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"autf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"fie\\u2C77ld\", \"field with non-ascii name\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    /* This was used in 2.9 to generate an index with compressed field:\n    if (id % 2 == 0) {\n      doc.add(new Field(\"compressed\", TEXT_TO_COMPRESS, Field.Store.COMPRESS, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"compressedSize\", Integer.toString(TEXT_COMPRESSED_LENGTH), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    } else {\n      doc.add(new Field(\"compressed\", BINARY_TO_COMPRESS, Field.Store.COMPRESS));    \n      doc.add(new Field(\"compressedSize\", Integer.toString(BINARY_COMPRESSED_LENGTH), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    }\n    */\n    writer.addDocument(doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestBackwardsCompatibility#addDoc(IndexWriter,int).mjava","sourceNew":null,"sourceOld":"  private void addDoc(IndexWriter writer, int id) throws IOException\n  {\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"id\", Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    doc.add(new Field(\"autf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"content2\", \"here is more content with aaa aaa aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    doc.add(new Field(\"fie\\u2C77ld\", \"field with non-ascii name\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    /* This was used in 2.9 to generate an index with compressed field:\n    if (id % 2 == 0) {\n      doc.add(new Field(\"compressed\", TEXT_TO_COMPRESS, Field.Store.COMPRESS, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"compressedSize\", Integer.toString(TEXT_COMPRESSED_LENGTH), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    } else {\n      doc.add(new Field(\"compressed\", BINARY_TO_COMPRESS, Field.Store.COMPRESS));    \n      doc.add(new Field(\"compressedSize\", Integer.toString(BINARY_COMPRESSED_LENGTH), Field.Store.YES, Field.Index.NOT_ANALYZED));\n    }\n    */\n    writer.addDocument(doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}