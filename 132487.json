{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse().mjava","sourceNew":"  @Test\n  public void testSpellCheckResponse() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    Assert.assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSpellCheckResponse() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    Assert.assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse().mjava","sourceNew":"  @Test\n  public void testSpellCheckResponse() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    Assert.assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSpellCheckResponse() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    Assert.assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse().mjava","sourceNew":"  @Test\n  public void testSpellCheckResponse() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    Assert.assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSpellCheckResponse() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    Assert.assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3df4431225cd26f95bfda0ddc15b497b506c886","date":1338839306,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse().mjava","sourceNew":"  @Test\n  public void testSpellCheckResponse() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"name:samsang\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    Assert.assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSpellCheckResponse() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    Assert.assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b215968db57f22e351a70732d4bb05c8d7073f68","date":1338845616,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse().mjava","sourceNew":"  @Test\n  public void testSpellCheckResponse() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    Assert.assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSpellCheckResponse() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"name:samsang\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    Assert.assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"553792fcb0090ce291710a75588e0454549c99be","date":1338858478,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse().mjava","sourceNew":"  @Ignore\n  @Test\n  public void testSpellCheckResponse() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    Assert.assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSpellCheckResponse() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    Assert.assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56d78974d33c1244e0810e0dc8f1c6371faceac9","date":1338918242,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse().mjava","sourceNew":"  @Test\n  public void testSpellCheckResponse() throws Exception {\n    getSolrServer();\n    server.deleteByQuery(\"*:*\");\n    server.commit(true, true);\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    Assert.assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n\n","sourceOld":"  @Ignore\n  @Test\n  public void testSpellCheckResponse() throws Exception {\n    getSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    Assert.assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckResponse().mjava","sourceNew":"  @Test\n  public void testSpellCheckResponse() throws Exception {\n    getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit(true, true);\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    client.add(doc);\n    client.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(client).getSpellCheckResponse();\n    Assert.assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSpellCheckResponse() throws Exception {\n    getSolrServer();\n    server.deleteByQuery(\"*:*\");\n    server.commit(true, true);\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"111\");\n    doc.setField(field, \"Samsung\");\n    server.add(doc);\n    server.commit(true, true);\n\n    SolrQuery query = new SolrQuery(\"*:*\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_Q, \"samsang\");\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    Assert.assertEquals(\"samsung\", response.getFirstSuggestion(\"samsang\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56d78974d33c1244e0810e0dc8f1c6371faceac9":["553792fcb0090ce291710a75588e0454549c99be"],"553792fcb0090ce291710a75588e0454549c99be":["b215968db57f22e351a70732d4bb05c8d7073f68"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b215968db57f22e351a70732d4bb05c8d7073f68":["c3df4431225cd26f95bfda0ddc15b497b506c886"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["56d78974d33c1244e0810e0dc8f1c6371faceac9"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c3df4431225cd26f95bfda0ddc15b497b506c886":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"56d78974d33c1244e0810e0dc8f1c6371faceac9":["bafca15d8e408346a67f4282ad1143b88023893b"],"553792fcb0090ce291710a75588e0454549c99be":["56d78974d33c1244e0810e0dc8f1c6371faceac9"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"b215968db57f22e351a70732d4bb05c8d7073f68":["553792fcb0090ce291710a75588e0454549c99be"],"c26f00b574427b55127e869b935845554afde1fa":["c3df4431225cd26f95bfda0ddc15b497b506c886"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"c3df4431225cd26f95bfda0ddc15b497b506c886":["b215968db57f22e351a70732d4bb05c8d7073f68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}