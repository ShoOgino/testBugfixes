{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/Http2SolrClientTest#testQueryString().mjava","commits":[{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/Http2SolrClientTest#testQueryString().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testQueryString() throws Exception {\n\n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try(Http2SolrClient client = getHttp2SolrClient(clientUrl)) {\n      // test without request query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf(\"serverOnly\"));\n      UpdateRequest req = new UpdateRequest();\n      setReqParamsOf(req, \"serverOnly\", \"notServer\");\n      try {\n        client.request(req);\n      } catch (ParseException ignored) {}\n      verifyServletState(client, req);\n\n      // test without server query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf());\n      req = new UpdateRequest();\n      req.setQueryParams(setOf(\"requestOnly\"));\n      setReqParamsOf(req, \"requestOnly\", \"notRequest\");\n      try {\n        client.request(req);\n      } catch (ParseException ignored) {}\n      verifyServletState(client, req);\n\n      // test with both request and server query params\n      DebugServlet.clear();\n      req = new UpdateRequest();\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n      try {\n        client.request(req);\n      } catch (ParseException ignored) {}\n      verifyServletState(client, req);\n\n      // test with both request and server query params with single stream\n      DebugServlet.clear();\n      req = new UpdateRequest();\n      req.add(new SolrInputDocument());\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n      try {\n        client.request(req);\n      } catch (ParseException ignored) {}\n      // NOTE: single stream requests send all the params\n      // as part of the query string.  So add \"neither\" to the request\n      // so it passes the verification step.\n      req.setQueryParams(setOf(\"requestOnly\", \"both\", \"neither\"));\n      verifyServletState(client, req);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f","date":1589320207,"type":3,"author":"Samuel García Martínez","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/Http2SolrClientTest#testQueryString().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/Http2SolrClientTest#testQueryString().mjava","sourceNew":"  @Test\n  public void testQueryString() throws Exception {\n\n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try(Http2SolrClient client = getHttp2SolrClient(clientUrl)) {\n      // test without request query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf(\"serverOnly\"));\n      UpdateRequest req = new UpdateRequest();\n      setReqParamsOf(req, \"serverOnly\", \"notServer\");\n      try {\n        client.request(req);\n      } catch (BaseHttpSolrClient.RemoteSolrException ignored) {}\n      verifyServletState(client, req);\n\n      // test without server query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf());\n      req = new UpdateRequest();\n      req.setQueryParams(setOf(\"requestOnly\"));\n      setReqParamsOf(req, \"requestOnly\", \"notRequest\");\n      try {\n        client.request(req);\n      } catch (BaseHttpSolrClient.RemoteSolrException ignored) {}\n      verifyServletState(client, req);\n\n      // test with both request and server query params\n      DebugServlet.clear();\n      req = new UpdateRequest();\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n      try {\n        client.request(req);\n      } catch (BaseHttpSolrClient.RemoteSolrException ignored) {}\n      verifyServletState(client, req);\n\n      // test with both request and server query params with single stream\n      DebugServlet.clear();\n      req = new UpdateRequest();\n      req.add(new SolrInputDocument());\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n      try {\n        client.request(req);\n      } catch (BaseHttpSolrClient.RemoteSolrException ignored) {}\n      // NOTE: single stream requests send all the params\n      // as part of the query string.  So add \"neither\" to the request\n      // so it passes the verification step.\n      req.setQueryParams(setOf(\"requestOnly\", \"both\", \"neither\"));\n      verifyServletState(client, req);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testQueryString() throws Exception {\n\n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try(Http2SolrClient client = getHttp2SolrClient(clientUrl)) {\n      // test without request query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf(\"serverOnly\"));\n      UpdateRequest req = new UpdateRequest();\n      setReqParamsOf(req, \"serverOnly\", \"notServer\");\n      try {\n        client.request(req);\n      } catch (ParseException ignored) {}\n      verifyServletState(client, req);\n\n      // test without server query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf());\n      req = new UpdateRequest();\n      req.setQueryParams(setOf(\"requestOnly\"));\n      setReqParamsOf(req, \"requestOnly\", \"notRequest\");\n      try {\n        client.request(req);\n      } catch (ParseException ignored) {}\n      verifyServletState(client, req);\n\n      // test with both request and server query params\n      DebugServlet.clear();\n      req = new UpdateRequest();\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n      try {\n        client.request(req);\n      } catch (ParseException ignored) {}\n      verifyServletState(client, req);\n\n      // test with both request and server query params with single stream\n      DebugServlet.clear();\n      req = new UpdateRequest();\n      req.add(new SolrInputDocument());\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n      try {\n        client.request(req);\n      } catch (ParseException ignored) {}\n      // NOTE: single stream requests send all the params\n      // as part of the query string.  So add \"neither\" to the request\n      // so it passes the verification step.\n      req.setQueryParams(setOf(\"requestOnly\", \"both\", \"neither\"));\n      verifyServletState(client, req);\n    }\n  }\n\n","bugFix":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"]},"commit2Childs":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}