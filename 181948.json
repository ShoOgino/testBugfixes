{"path":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#addReplicaProperty(ClusterState,ZkNodeProps).mjava","commits":[{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#addReplicaProperty(ClusterState,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  public ZkWriteCommand addReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_VALUE_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer SETREPLICAPROPERTY requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" and \" +\n              ZkStateReader.PROPERTY_VALUE_PROP + \" no action taken.\");\n    }\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionProcessor.COLL_PROP_PREFIX + property;\n    }\n    property = property.toLowerCase(Locale.ROOT);\n    String propVal = message.getStr(ZkStateReader.PROPERTY_VALUE_PROP);\n    String shardUnique = message.getStr(OverseerCollectionProcessor.SHARD_UNIQUE);\n\n    boolean isUnique = false;\n\n    if (SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(property)) {\n      if (StringUtils.isNotBlank(shardUnique) && Boolean.parseBoolean(shardUnique) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Overseer SETREPLICAPROPERTY for \" +\n            property + \" cannot have \" + OverseerCollectionProcessor.SHARD_UNIQUE + \" set to anything other than\" +\n            \"'true'. No action taken\");\n      }\n      isUnique = true;\n    } else {\n      isUnique = Boolean.parseBoolean(shardUnique);\n    }\n\n    Replica replica = clusterState.getReplica(collectionName, replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n    log.info(\"Setting property \" + property + \" with value: \" + propVal +\n        \" for collection: \" + collectionName + \". Full message: \" + message);\n    if (StringUtils.equalsIgnoreCase(replica.getStr(property), propVal)) return ZkStateWriter.NO_OP; // already the value we're going to set\n\n    // OK, there's no way we won't change the cluster state now\n    Map<String,Replica> replicas = clusterState.getSlice(collectionName, sliceName).getReplicasCopy();\n    if (isUnique == false) {\n      replicas.get(replicaName).getProperties().put(property, propVal);\n    } else { // Set prop for this replica, but remove it for all others.\n      for (Replica rep : replicas.values()) {\n        if (rep.getName().equalsIgnoreCase(replicaName)) {\n          rep.getProperties().put(property, propVal);\n        } else {\n          rep.getProperties().remove(property);\n        }\n      }\n    }\n    Slice newSlice = new Slice(sliceName, replicas, clusterState.getSlice(collectionName, sliceName).shallowCopy());\n    DocCollection newCollection = CollectionMutator.updateSlice(collectionName, clusterState.getCollection(collectionName),\n        newSlice);\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["da5ef0533dae1e5782b071a5484e1b9f3c28fc5f","e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da5ef0533dae1e5782b071a5484e1b9f3c28fc5f","date":1419334852,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#addReplicaProperty(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#addReplicaProperty(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand addReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_VALUE_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer ADDREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" and \" +\n              ZkStateReader.PROPERTY_VALUE_PROP + \" no action taken.\");\n    }\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionProcessor.COLL_PROP_PREFIX + property;\n    }\n    property = property.toLowerCase(Locale.ROOT);\n    String propVal = message.getStr(ZkStateReader.PROPERTY_VALUE_PROP);\n    String shardUnique = message.getStr(OverseerCollectionProcessor.SHARD_UNIQUE);\n\n    boolean isUnique = false;\n\n    if (SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(property)) {\n      if (StringUtils.isNotBlank(shardUnique) && Boolean.parseBoolean(shardUnique) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Overseer ADDREPLICAPROP for \" +\n            property + \" cannot have \" + OverseerCollectionProcessor.SHARD_UNIQUE + \" set to anything other than\" +\n            \"'true'. No action taken\");\n      }\n      isUnique = true;\n    } else {\n      isUnique = Boolean.parseBoolean(shardUnique);\n    }\n\n    Replica replica = clusterState.getReplica(collectionName, replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n    log.info(\"Setting property \" + property + \" with value: \" + propVal +\n        \" for collection: \" + collectionName + \". Full message: \" + message);\n    if (StringUtils.equalsIgnoreCase(replica.getStr(property), propVal)) return ZkStateWriter.NO_OP; // already the value we're going to set\n\n    // OK, there's no way we won't change the cluster state now\n    Map<String,Replica> replicas = clusterState.getSlice(collectionName, sliceName).getReplicasCopy();\n    if (isUnique == false) {\n      replicas.get(replicaName).getProperties().put(property, propVal);\n    } else { // Set prop for this replica, but remove it for all others.\n      for (Replica rep : replicas.values()) {\n        if (rep.getName().equalsIgnoreCase(replicaName)) {\n          rep.getProperties().put(property, propVal);\n        } else {\n          rep.getProperties().remove(property);\n        }\n      }\n    }\n    Slice newSlice = new Slice(sliceName, replicas, clusterState.getSlice(collectionName, sliceName).shallowCopy());\n    DocCollection newCollection = CollectionMutator.updateSlice(collectionName, clusterState.getCollection(collectionName),\n        newSlice);\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand addReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_VALUE_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer SETREPLICAPROPERTY requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" and \" +\n              ZkStateReader.PROPERTY_VALUE_PROP + \" no action taken.\");\n    }\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionProcessor.COLL_PROP_PREFIX + property;\n    }\n    property = property.toLowerCase(Locale.ROOT);\n    String propVal = message.getStr(ZkStateReader.PROPERTY_VALUE_PROP);\n    String shardUnique = message.getStr(OverseerCollectionProcessor.SHARD_UNIQUE);\n\n    boolean isUnique = false;\n\n    if (SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(property)) {\n      if (StringUtils.isNotBlank(shardUnique) && Boolean.parseBoolean(shardUnique) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Overseer SETREPLICAPROPERTY for \" +\n            property + \" cannot have \" + OverseerCollectionProcessor.SHARD_UNIQUE + \" set to anything other than\" +\n            \"'true'. No action taken\");\n      }\n      isUnique = true;\n    } else {\n      isUnique = Boolean.parseBoolean(shardUnique);\n    }\n\n    Replica replica = clusterState.getReplica(collectionName, replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n    log.info(\"Setting property \" + property + \" with value: \" + propVal +\n        \" for collection: \" + collectionName + \". Full message: \" + message);\n    if (StringUtils.equalsIgnoreCase(replica.getStr(property), propVal)) return ZkStateWriter.NO_OP; // already the value we're going to set\n\n    // OK, there's no way we won't change the cluster state now\n    Map<String,Replica> replicas = clusterState.getSlice(collectionName, sliceName).getReplicasCopy();\n    if (isUnique == false) {\n      replicas.get(replicaName).getProperties().put(property, propVal);\n    } else { // Set prop for this replica, but remove it for all others.\n      for (Replica rep : replicas.values()) {\n        if (rep.getName().equalsIgnoreCase(replicaName)) {\n          rep.getProperties().put(property, propVal);\n        } else {\n          rep.getProperties().remove(property);\n        }\n      }\n    }\n    Slice newSlice = new Slice(sliceName, replicas, clusterState.getSlice(collectionName, sliceName).shallowCopy());\n    DocCollection newCollection = CollectionMutator.updateSlice(collectionName, clusterState.getCollection(collectionName),\n        newSlice);\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","bugFix":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#addReplicaProperty(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#addReplicaProperty(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand addReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_VALUE_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer ADDREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" and \" +\n              ZkStateReader.PROPERTY_VALUE_PROP + \" no action taken.\");\n    }\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n    property = property.toLowerCase(Locale.ROOT);\n    String propVal = message.getStr(ZkStateReader.PROPERTY_VALUE_PROP);\n    String shardUnique = message.getStr(OverseerCollectionMessageHandler.SHARD_UNIQUE);\n\n    boolean isUnique = false;\n\n    if (SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(property)) {\n      if (StringUtils.isNotBlank(shardUnique) && Boolean.parseBoolean(shardUnique) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Overseer ADDREPLICAPROP for \" +\n            property + \" cannot have \" + OverseerCollectionMessageHandler.SHARD_UNIQUE + \" set to anything other than\" +\n            \"'true'. No action taken\");\n      }\n      isUnique = true;\n    } else {\n      isUnique = Boolean.parseBoolean(shardUnique);\n    }\n\n    Replica replica = clusterState.getReplica(collectionName, replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n    log.info(\"Setting property \" + property + \" with value: \" + propVal +\n        \" for collection: \" + collectionName + \". Full message: \" + message);\n    if (StringUtils.equalsIgnoreCase(replica.getStr(property), propVal)) return ZkStateWriter.NO_OP; // already the value we're going to set\n\n    // OK, there's no way we won't change the cluster state now\n    Map<String,Replica> replicas = clusterState.getSlice(collectionName, sliceName).getReplicasCopy();\n    if (isUnique == false) {\n      replicas.get(replicaName).getProperties().put(property, propVal);\n    } else { // Set prop for this replica, but remove it for all others.\n      for (Replica rep : replicas.values()) {\n        if (rep.getName().equalsIgnoreCase(replicaName)) {\n          rep.getProperties().put(property, propVal);\n        } else {\n          rep.getProperties().remove(property);\n        }\n      }\n    }\n    Slice newSlice = new Slice(sliceName, replicas, clusterState.getSlice(collectionName, sliceName).shallowCopy());\n    DocCollection newCollection = CollectionMutator.updateSlice(collectionName, clusterState.getCollection(collectionName),\n        newSlice);\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand addReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_VALUE_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer ADDREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" and \" +\n              ZkStateReader.PROPERTY_VALUE_PROP + \" no action taken.\");\n    }\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionProcessor.COLL_PROP_PREFIX + property;\n    }\n    property = property.toLowerCase(Locale.ROOT);\n    String propVal = message.getStr(ZkStateReader.PROPERTY_VALUE_PROP);\n    String shardUnique = message.getStr(OverseerCollectionProcessor.SHARD_UNIQUE);\n\n    boolean isUnique = false;\n\n    if (SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(property)) {\n      if (StringUtils.isNotBlank(shardUnique) && Boolean.parseBoolean(shardUnique) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Overseer ADDREPLICAPROP for \" +\n            property + \" cannot have \" + OverseerCollectionProcessor.SHARD_UNIQUE + \" set to anything other than\" +\n            \"'true'. No action taken\");\n      }\n      isUnique = true;\n    } else {\n      isUnique = Boolean.parseBoolean(shardUnique);\n    }\n\n    Replica replica = clusterState.getReplica(collectionName, replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n    log.info(\"Setting property \" + property + \" with value: \" + propVal +\n        \" for collection: \" + collectionName + \". Full message: \" + message);\n    if (StringUtils.equalsIgnoreCase(replica.getStr(property), propVal)) return ZkStateWriter.NO_OP; // already the value we're going to set\n\n    // OK, there's no way we won't change the cluster state now\n    Map<String,Replica> replicas = clusterState.getSlice(collectionName, sliceName).getReplicasCopy();\n    if (isUnique == false) {\n      replicas.get(replicaName).getProperties().put(property, propVal);\n    } else { // Set prop for this replica, but remove it for all others.\n      for (Replica rep : replicas.values()) {\n        if (rep.getName().equalsIgnoreCase(replicaName)) {\n          rep.getProperties().put(property, propVal);\n        } else {\n          rep.getProperties().remove(property);\n        }\n      }\n    }\n    Slice newSlice = new Slice(sliceName, replicas, clusterState.getSlice(collectionName, sliceName).shallowCopy());\n    DocCollection newCollection = CollectionMutator.updateSlice(collectionName, clusterState.getCollection(collectionName),\n        newSlice);\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","bugFix":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c8df3f10a676c3de5dbf390f17a2de2d45cacd","date":1461615626,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#addReplicaProperty(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#addReplicaProperty(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand addReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_VALUE_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer ADDREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" and \" +\n              ZkStateReader.PROPERTY_VALUE_PROP + \" no action taken.\");\n    }\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n    property = property.toLowerCase(Locale.ROOT);\n    String propVal = message.getStr(ZkStateReader.PROPERTY_VALUE_PROP);\n    String shardUnique = message.getStr(OverseerCollectionMessageHandler.SHARD_UNIQUE);\n\n    boolean isUnique = false;\n\n    if (SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(property)) {\n      if (StringUtils.isNotBlank(shardUnique) && Boolean.parseBoolean(shardUnique) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Overseer ADDREPLICAPROP for \" +\n            property + \" cannot have \" + OverseerCollectionMessageHandler.SHARD_UNIQUE + \" set to anything other than\" +\n            \"'true'. No action taken\");\n      }\n      isUnique = true;\n    } else {\n      isUnique = Boolean.parseBoolean(shardUnique);\n    }\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Replica replica = collection.getReplica(replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n    log.info(\"Setting property \" + property + \" with value: \" + propVal +\n        \" for collection: \" + collectionName + \". Full message: \" + message);\n    if (StringUtils.equalsIgnoreCase(replica.getStr(property), propVal)) return ZkStateWriter.NO_OP; // already the value we're going to set\n\n    // OK, there's no way we won't change the cluster state now\n    Map<String,Replica> replicas = collection.getSlice(sliceName).getReplicasCopy();\n    if (isUnique == false) {\n      replicas.get(replicaName).getProperties().put(property, propVal);\n    } else { // Set prop for this replica, but remove it for all others.\n      for (Replica rep : replicas.values()) {\n        if (rep.getName().equalsIgnoreCase(replicaName)) {\n          rep.getProperties().put(property, propVal);\n        } else {\n          rep.getProperties().remove(property);\n        }\n      }\n    }\n    Slice newSlice = new Slice(sliceName, replicas, collection.getSlice(sliceName).shallowCopy());\n    DocCollection newCollection = CollectionMutator.updateSlice(collectionName, collection,\n        newSlice);\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand addReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_VALUE_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer ADDREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" and \" +\n              ZkStateReader.PROPERTY_VALUE_PROP + \" no action taken.\");\n    }\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n    property = property.toLowerCase(Locale.ROOT);\n    String propVal = message.getStr(ZkStateReader.PROPERTY_VALUE_PROP);\n    String shardUnique = message.getStr(OverseerCollectionMessageHandler.SHARD_UNIQUE);\n\n    boolean isUnique = false;\n\n    if (SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(property)) {\n      if (StringUtils.isNotBlank(shardUnique) && Boolean.parseBoolean(shardUnique) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Overseer ADDREPLICAPROP for \" +\n            property + \" cannot have \" + OverseerCollectionMessageHandler.SHARD_UNIQUE + \" set to anything other than\" +\n            \"'true'. No action taken\");\n      }\n      isUnique = true;\n    } else {\n      isUnique = Boolean.parseBoolean(shardUnique);\n    }\n\n    Replica replica = clusterState.getReplica(collectionName, replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n    log.info(\"Setting property \" + property + \" with value: \" + propVal +\n        \" for collection: \" + collectionName + \". Full message: \" + message);\n    if (StringUtils.equalsIgnoreCase(replica.getStr(property), propVal)) return ZkStateWriter.NO_OP; // already the value we're going to set\n\n    // OK, there's no way we won't change the cluster state now\n    Map<String,Replica> replicas = clusterState.getSlice(collectionName, sliceName).getReplicasCopy();\n    if (isUnique == false) {\n      replicas.get(replicaName).getProperties().put(property, propVal);\n    } else { // Set prop for this replica, but remove it for all others.\n      for (Replica rep : replicas.values()) {\n        if (rep.getName().equalsIgnoreCase(replicaName)) {\n          rep.getProperties().put(property, propVal);\n        } else {\n          rep.getProperties().remove(property);\n        }\n      }\n    }\n    Slice newSlice = new Slice(sliceName, replicas, clusterState.getSlice(collectionName, sliceName).shallowCopy());\n    DocCollection newCollection = CollectionMutator.updateSlice(collectionName, clusterState.getCollection(collectionName),\n        newSlice);\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#addReplicaProperty(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#addReplicaProperty(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand addReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_VALUE_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer ADDREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" and \" +\n              ZkStateReader.PROPERTY_VALUE_PROP + \" no action taken.\");\n    }\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n    property = property.toLowerCase(Locale.ROOT);\n    String propVal = message.getStr(ZkStateReader.PROPERTY_VALUE_PROP);\n    String shardUnique = message.getStr(OverseerCollectionMessageHandler.SHARD_UNIQUE);\n\n    boolean isUnique = false;\n\n    if (SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(property)) {\n      if (StringUtils.isNotBlank(shardUnique) && Boolean.parseBoolean(shardUnique) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Overseer ADDREPLICAPROP for \" +\n            property + \" cannot have \" + OverseerCollectionMessageHandler.SHARD_UNIQUE + \" set to anything other than\" +\n            \"'true'. No action taken\");\n      }\n      isUnique = true;\n    } else {\n      isUnique = Boolean.parseBoolean(shardUnique);\n    }\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Replica replica = collection.getReplica(replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n    log.info(\"Setting property \" + property + \" with value: \" + propVal +\n        \" for collection: \" + collectionName + \". Full message: \" + message);\n    if (StringUtils.equalsIgnoreCase(replica.getStr(property), propVal)) return ZkStateWriter.NO_OP; // already the value we're going to set\n\n    // OK, there's no way we won't change the cluster state now\n    Map<String,Replica> replicas = collection.getSlice(sliceName).getReplicasCopy();\n    if (isUnique == false) {\n      replicas.get(replicaName).getProperties().put(property, propVal);\n    } else { // Set prop for this replica, but remove it for all others.\n      for (Replica rep : replicas.values()) {\n        if (rep.getName().equalsIgnoreCase(replicaName)) {\n          rep.getProperties().put(property, propVal);\n        } else {\n          rep.getProperties().remove(property);\n        }\n      }\n    }\n    Slice newSlice = new Slice(sliceName, replicas, collection.getSlice(sliceName).shallowCopy());\n    DocCollection newCollection = CollectionMutator.updateSlice(collectionName, collection,\n        newSlice);\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand addReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_VALUE_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer ADDREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" and \" +\n              ZkStateReader.PROPERTY_VALUE_PROP + \" no action taken.\");\n    }\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n    property = property.toLowerCase(Locale.ROOT);\n    String propVal = message.getStr(ZkStateReader.PROPERTY_VALUE_PROP);\n    String shardUnique = message.getStr(OverseerCollectionMessageHandler.SHARD_UNIQUE);\n\n    boolean isUnique = false;\n\n    if (SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(property)) {\n      if (StringUtils.isNotBlank(shardUnique) && Boolean.parseBoolean(shardUnique) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Overseer ADDREPLICAPROP for \" +\n            property + \" cannot have \" + OverseerCollectionMessageHandler.SHARD_UNIQUE + \" set to anything other than\" +\n            \"'true'. No action taken\");\n      }\n      isUnique = true;\n    } else {\n      isUnique = Boolean.parseBoolean(shardUnique);\n    }\n\n    Replica replica = clusterState.getReplica(collectionName, replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n    log.info(\"Setting property \" + property + \" with value: \" + propVal +\n        \" for collection: \" + collectionName + \". Full message: \" + message);\n    if (StringUtils.equalsIgnoreCase(replica.getStr(property), propVal)) return ZkStateWriter.NO_OP; // already the value we're going to set\n\n    // OK, there's no way we won't change the cluster state now\n    Map<String,Replica> replicas = clusterState.getSlice(collectionName, sliceName).getReplicasCopy();\n    if (isUnique == false) {\n      replicas.get(replicaName).getProperties().put(property, propVal);\n    } else { // Set prop for this replica, but remove it for all others.\n      for (Replica rep : replicas.values()) {\n        if (rep.getName().equalsIgnoreCase(replicaName)) {\n          rep.getProperties().put(property, propVal);\n        } else {\n          rep.getProperties().remove(property);\n        }\n      }\n    }\n    Slice newSlice = new Slice(sliceName, replicas, clusterState.getSlice(collectionName, sliceName).shallowCopy());\n    DocCollection newCollection = CollectionMutator.updateSlice(collectionName, clusterState.getCollection(collectionName),\n        newSlice);\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#addReplicaProperty(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#addReplicaProperty(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand addReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_VALUE_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer ADDREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" and \" +\n              ZkStateReader.PROPERTY_VALUE_PROP + \" no action taken.\");\n    }\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n    property = property.toLowerCase(Locale.ROOT);\n    String propVal = message.getStr(ZkStateReader.PROPERTY_VALUE_PROP);\n    String shardUnique = message.getStr(OverseerCollectionMessageHandler.SHARD_UNIQUE);\n\n    boolean isUnique = false;\n\n    if (SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(property)) {\n      if (StringUtils.isNotBlank(shardUnique) && Boolean.parseBoolean(shardUnique) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Overseer ADDREPLICAPROP for \" +\n            property + \" cannot have \" + OverseerCollectionMessageHandler.SHARD_UNIQUE + \" set to anything other than\" +\n            \"'true'. No action taken\");\n      }\n      isUnique = true;\n    } else {\n      isUnique = Boolean.parseBoolean(shardUnique);\n    }\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Replica replica = collection.getReplica(replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n    log.info(\"Setting property {} with value {} for collection {}\", property, propVal, collectionName);\n    log.debug(\"Full message: {}\", message);\n    if (StringUtils.equalsIgnoreCase(replica.getStr(property), propVal)) return ZkStateWriter.NO_OP; // already the value we're going to set\n\n    // OK, there's no way we won't change the cluster state now\n    Map<String,Replica> replicas = collection.getSlice(sliceName).getReplicasCopy();\n    if (isUnique == false) {\n      replicas.get(replicaName).getProperties().put(property, propVal);\n    } else { // Set prop for this replica, but remove it for all others.\n      for (Replica rep : replicas.values()) {\n        if (rep.getName().equalsIgnoreCase(replicaName)) {\n          rep.getProperties().put(property, propVal);\n        } else {\n          rep.getProperties().remove(property);\n        }\n      }\n    }\n    Slice newSlice = new Slice(sliceName, replicas, collection.getSlice(sliceName).shallowCopy());\n    DocCollection newCollection = CollectionMutator.updateSlice(collectionName, collection,\n        newSlice);\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand addReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_VALUE_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer ADDREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" and \" +\n              ZkStateReader.PROPERTY_VALUE_PROP + \" no action taken.\");\n    }\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n    property = property.toLowerCase(Locale.ROOT);\n    String propVal = message.getStr(ZkStateReader.PROPERTY_VALUE_PROP);\n    String shardUnique = message.getStr(OverseerCollectionMessageHandler.SHARD_UNIQUE);\n\n    boolean isUnique = false;\n\n    if (SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(property)) {\n      if (StringUtils.isNotBlank(shardUnique) && Boolean.parseBoolean(shardUnique) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Overseer ADDREPLICAPROP for \" +\n            property + \" cannot have \" + OverseerCollectionMessageHandler.SHARD_UNIQUE + \" set to anything other than\" +\n            \"'true'. No action taken\");\n      }\n      isUnique = true;\n    } else {\n      isUnique = Boolean.parseBoolean(shardUnique);\n    }\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Replica replica = collection.getReplica(replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n    log.info(\"Setting property \" + property + \" with value: \" + propVal +\n        \" for collection: \" + collectionName + \". Full message: \" + message);\n    if (StringUtils.equalsIgnoreCase(replica.getStr(property), propVal)) return ZkStateWriter.NO_OP; // already the value we're going to set\n\n    // OK, there's no way we won't change the cluster state now\n    Map<String,Replica> replicas = collection.getSlice(sliceName).getReplicasCopy();\n    if (isUnique == false) {\n      replicas.get(replicaName).getProperties().put(property, propVal);\n    } else { // Set prop for this replica, but remove it for all others.\n      for (Replica rep : replicas.values()) {\n        if (rep.getName().equalsIgnoreCase(replicaName)) {\n          rep.getProperties().put(property, propVal);\n        } else {\n          rep.getProperties().remove(property);\n        }\n      }\n    }\n    Slice newSlice = new Slice(sliceName, replicas, collection.getSlice(sliceName).shallowCopy());\n    DocCollection newCollection = CollectionMutator.updateSlice(collectionName, collection,\n        newSlice);\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#addReplicaProperty(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#addReplicaProperty(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand addReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_VALUE_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer ADDREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" and \" +\n              ZkStateReader.PROPERTY_VALUE_PROP + \" no action taken.\");\n    }\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n    property = property.toLowerCase(Locale.ROOT);\n    String propVal = message.getStr(ZkStateReader.PROPERTY_VALUE_PROP);\n    String shardUnique = message.getStr(OverseerCollectionMessageHandler.SHARD_UNIQUE);\n\n    boolean isUnique = false;\n\n    if (SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(property)) {\n      if (StringUtils.isNotBlank(shardUnique) && Boolean.parseBoolean(shardUnique) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Overseer ADDREPLICAPROP for \" +\n            property + \" cannot have \" + OverseerCollectionMessageHandler.SHARD_UNIQUE + \" set to anything other than\" +\n            \"'true'. No action taken\");\n      }\n      isUnique = true;\n    } else {\n      isUnique = Boolean.parseBoolean(shardUnique);\n    }\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Replica replica = collection.getReplica(replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n    log.info(\"Setting property {} with value {} for collection {}\", property, propVal, collectionName);\n    log.debug(\"Full message: {}\", message);\n    if (StringUtils.equalsIgnoreCase(replica.getStr(property), propVal)) return ZkStateWriter.NO_OP; // already the value we're going to set\n\n    // OK, there's no way we won't change the cluster state now\n    Map<String,Replica> replicas = collection.getSlice(sliceName).getReplicasCopy();\n    if (isUnique == false) {\n      replicas.get(replicaName).getProperties().put(property, propVal);\n    } else { // Set prop for this replica, but remove it for all others.\n      for (Replica rep : replicas.values()) {\n        if (rep.getName().equalsIgnoreCase(replicaName)) {\n          rep.getProperties().put(property, propVal);\n        } else {\n          rep.getProperties().remove(property);\n        }\n      }\n    }\n    Slice newSlice = new Slice(sliceName, replicas, collection.getSlice(sliceName).shallowCopy());\n    DocCollection newCollection = CollectionMutator.updateSlice(collectionName, collection,\n        newSlice);\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand addReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_VALUE_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer ADDREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" and \" +\n              ZkStateReader.PROPERTY_VALUE_PROP + \" no action taken.\");\n    }\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n    property = property.toLowerCase(Locale.ROOT);\n    String propVal = message.getStr(ZkStateReader.PROPERTY_VALUE_PROP);\n    String shardUnique = message.getStr(OverseerCollectionMessageHandler.SHARD_UNIQUE);\n\n    boolean isUnique = false;\n\n    if (SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(property)) {\n      if (StringUtils.isNotBlank(shardUnique) && Boolean.parseBoolean(shardUnique) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Overseer ADDREPLICAPROP for \" +\n            property + \" cannot have \" + OverseerCollectionMessageHandler.SHARD_UNIQUE + \" set to anything other than\" +\n            \"'true'. No action taken\");\n      }\n      isUnique = true;\n    } else {\n      isUnique = Boolean.parseBoolean(shardUnique);\n    }\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Replica replica = collection.getReplica(replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n    log.info(\"Setting property \" + property + \" with value: \" + propVal +\n        \" for collection: \" + collectionName + \". Full message: \" + message);\n    if (StringUtils.equalsIgnoreCase(replica.getStr(property), propVal)) return ZkStateWriter.NO_OP; // already the value we're going to set\n\n    // OK, there's no way we won't change the cluster state now\n    Map<String,Replica> replicas = collection.getSlice(sliceName).getReplicasCopy();\n    if (isUnique == false) {\n      replicas.get(replicaName).getProperties().put(property, propVal);\n    } else { // Set prop for this replica, but remove it for all others.\n      for (Replica rep : replicas.values()) {\n        if (rep.getName().equalsIgnoreCase(replicaName)) {\n          rep.getProperties().put(property, propVal);\n        } else {\n          rep.getProperties().remove(property);\n        }\n      }\n    }\n    Slice newSlice = new Slice(sliceName, replicas, collection.getSlice(sliceName).shallowCopy());\n    DocCollection newCollection = CollectionMutator.updateSlice(collectionName, collection,\n        newSlice);\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#addReplicaProperty(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#addReplicaProperty(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand addReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_VALUE_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer ADDREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" and \" +\n              ZkStateReader.PROPERTY_VALUE_PROP + \" no action taken.\");\n    }\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n    property = property.toLowerCase(Locale.ROOT);\n    String propVal = message.getStr(ZkStateReader.PROPERTY_VALUE_PROP);\n    String shardUnique = message.getStr(OverseerCollectionMessageHandler.SHARD_UNIQUE);\n\n    boolean isUnique = false;\n\n    if (SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(property)) {\n      if (StringUtils.isNotBlank(shardUnique) && Boolean.parseBoolean(shardUnique) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Overseer ADDREPLICAPROP for \" +\n            property + \" cannot have \" + OverseerCollectionMessageHandler.SHARD_UNIQUE + \" set to anything other than\" +\n            \"'true'. No action taken\");\n      }\n      isUnique = true;\n    } else {\n      isUnique = Boolean.parseBoolean(shardUnique);\n    }\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Replica replica = collection.getReplica(replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n    log.info(\"Setting property {} with value {} for collection {}\", property, propVal, collectionName);\n    log.debug(\"Full message: {}\", message);\n    if (StringUtils.equalsIgnoreCase(replica.getStr(property), propVal)) return ZkStateWriter.NO_OP; // already the value we're going to set\n\n    // OK, there's no way we won't change the cluster state now\n    Map<String,Replica> replicas = collection.getSlice(sliceName).getReplicasCopy();\n    if (isUnique == false) {\n      replicas.get(replicaName).getProperties().put(property, propVal);\n    } else { // Set prop for this replica, but remove it for all others.\n      for (Replica rep : replicas.values()) {\n        if (rep.getName().equalsIgnoreCase(replicaName)) {\n          rep.getProperties().put(property, propVal);\n        } else {\n          rep.getProperties().remove(property);\n        }\n      }\n    }\n    Slice newSlice = new Slice(sliceName, replicas, collection.getSlice(sliceName).shallowCopy());\n    DocCollection newCollection = CollectionMutator.updateSlice(collectionName, collection,\n        newSlice);\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand addReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_VALUE_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer ADDREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" and \" +\n              ZkStateReader.PROPERTY_VALUE_PROP + \" no action taken.\");\n    }\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n    property = property.toLowerCase(Locale.ROOT);\n    String propVal = message.getStr(ZkStateReader.PROPERTY_VALUE_PROP);\n    String shardUnique = message.getStr(OverseerCollectionMessageHandler.SHARD_UNIQUE);\n\n    boolean isUnique = false;\n\n    if (SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(property)) {\n      if (StringUtils.isNotBlank(shardUnique) && Boolean.parseBoolean(shardUnique) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Overseer ADDREPLICAPROP for \" +\n            property + \" cannot have \" + OverseerCollectionMessageHandler.SHARD_UNIQUE + \" set to anything other than\" +\n            \"'true'. No action taken\");\n      }\n      isUnique = true;\n    } else {\n      isUnique = Boolean.parseBoolean(shardUnique);\n    }\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Replica replica = collection.getReplica(replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n    log.info(\"Setting property \" + property + \" with value: \" + propVal +\n        \" for collection: \" + collectionName + \". Full message: \" + message);\n    if (StringUtils.equalsIgnoreCase(replica.getStr(property), propVal)) return ZkStateWriter.NO_OP; // already the value we're going to set\n\n    // OK, there's no way we won't change the cluster state now\n    Map<String,Replica> replicas = collection.getSlice(sliceName).getReplicasCopy();\n    if (isUnique == false) {\n      replicas.get(replicaName).getProperties().put(property, propVal);\n    } else { // Set prop for this replica, but remove it for all others.\n      for (Replica rep : replicas.values()) {\n        if (rep.getName().equalsIgnoreCase(replicaName)) {\n          rep.getProperties().put(property, propVal);\n        } else {\n          rep.getProperties().remove(property);\n        }\n      }\n    }\n    Slice newSlice = new Slice(sliceName, replicas, collection.getSlice(sliceName).shallowCopy());\n    DocCollection newCollection = CollectionMutator.updateSlice(collectionName, collection,\n        newSlice);\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#addReplicaProperty(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#addReplicaProperty(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand addReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_VALUE_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer ADDREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" and \" +\n              ZkStateReader.PROPERTY_VALUE_PROP + \" no action taken.\");\n    }\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, OverseerCollectionMessageHandler.COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n    property = property.toLowerCase(Locale.ROOT);\n    String propVal = message.getStr(ZkStateReader.PROPERTY_VALUE_PROP);\n    String shardUnique = message.getStr(OverseerCollectionMessageHandler.SHARD_UNIQUE);\n\n    boolean isUnique = false;\n\n    if (SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(property)) {\n      if (StringUtils.isNotBlank(shardUnique) && Boolean.parseBoolean(shardUnique) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Overseer ADDREPLICAPROP for \" +\n            property + \" cannot have \" + OverseerCollectionMessageHandler.SHARD_UNIQUE + \" set to anything other than\" +\n            \"'true'. No action taken\");\n      }\n      isUnique = true;\n    } else {\n      isUnique = Boolean.parseBoolean(shardUnique);\n    }\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Replica replica = collection.getReplica(replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n    log.info(\"Setting property {} with value {} for collection {}\", property, propVal, collectionName);\n    log.debug(\"Full message: {}\", message);\n    if (StringUtils.equalsIgnoreCase(replica.getStr(property), propVal)) return ZkStateWriter.NO_OP; // already the value we're going to set\n\n    // OK, there's no way we won't change the cluster state now\n    Map<String,Replica> replicas = collection.getSlice(sliceName).getReplicasCopy();\n    if (isUnique == false) {\n      replicas.get(replicaName).getProperties().put(property, propVal);\n    } else { // Set prop for this replica, but remove it for all others.\n      for (Replica rep : replicas.values()) {\n        if (rep.getName().equalsIgnoreCase(replicaName)) {\n          rep.getProperties().put(property, propVal);\n        } else {\n          rep.getProperties().remove(property);\n        }\n      }\n    }\n    Slice newSlice = new Slice(sliceName, replicas, collection.getSlice(sliceName).shallowCopy());\n    DocCollection newCollection = CollectionMutator.updateSlice(collectionName, collection,\n        newSlice);\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand addReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_VALUE_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer ADDREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" and \" +\n              ZkStateReader.PROPERTY_VALUE_PROP + \" no action taken.\");\n    }\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n    property = property.toLowerCase(Locale.ROOT);\n    String propVal = message.getStr(ZkStateReader.PROPERTY_VALUE_PROP);\n    String shardUnique = message.getStr(OverseerCollectionMessageHandler.SHARD_UNIQUE);\n\n    boolean isUnique = false;\n\n    if (SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(property)) {\n      if (StringUtils.isNotBlank(shardUnique) && Boolean.parseBoolean(shardUnique) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Overseer ADDREPLICAPROP for \" +\n            property + \" cannot have \" + OverseerCollectionMessageHandler.SHARD_UNIQUE + \" set to anything other than\" +\n            \"'true'. No action taken\");\n      }\n      isUnique = true;\n    } else {\n      isUnique = Boolean.parseBoolean(shardUnique);\n    }\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Replica replica = collection.getReplica(replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n    log.info(\"Setting property {} with value {} for collection {}\", property, propVal, collectionName);\n    log.debug(\"Full message: {}\", message);\n    if (StringUtils.equalsIgnoreCase(replica.getStr(property), propVal)) return ZkStateWriter.NO_OP; // already the value we're going to set\n\n    // OK, there's no way we won't change the cluster state now\n    Map<String,Replica> replicas = collection.getSlice(sliceName).getReplicasCopy();\n    if (isUnique == false) {\n      replicas.get(replicaName).getProperties().put(property, propVal);\n    } else { // Set prop for this replica, but remove it for all others.\n      for (Replica rep : replicas.values()) {\n        if (rep.getName().equalsIgnoreCase(replicaName)) {\n          rep.getProperties().put(property, propVal);\n        } else {\n          rep.getProperties().remove(property);\n        }\n      }\n    }\n    Slice newSlice = new Slice(sliceName, replicas, collection.getSlice(sliceName).shallowCopy());\n    DocCollection newCollection = CollectionMutator.updateSlice(collectionName, collection,\n        newSlice);\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#addReplicaProperty(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#addReplicaProperty(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand addReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_VALUE_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer ADDREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" and \" +\n              ZkStateReader.PROPERTY_VALUE_PROP + \" no action taken.\");\n    }\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, OverseerCollectionMessageHandler.COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n    property = property.toLowerCase(Locale.ROOT);\n    String propVal = message.getStr(ZkStateReader.PROPERTY_VALUE_PROP);\n    String shardUnique = message.getStr(OverseerCollectionMessageHandler.SHARD_UNIQUE);\n\n    boolean isUnique = false;\n\n    if (SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(property)) {\n      if (StringUtils.isNotBlank(shardUnique) && Boolean.parseBoolean(shardUnique) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Overseer ADDREPLICAPROP for \" +\n            property + \" cannot have \" + OverseerCollectionMessageHandler.SHARD_UNIQUE + \" set to anything other than\" +\n            \"'true'. No action taken\");\n      }\n      isUnique = true;\n    } else {\n      isUnique = Boolean.parseBoolean(shardUnique);\n    }\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Replica replica = collection.getReplica(replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n    log.info(\"Setting property {} with value {} for collection {}\", property, propVal, collectionName);\n    log.debug(\"Full message: {}\", message);\n    if (StringUtils.equalsIgnoreCase(replica.getStr(property), propVal)) return ZkStateWriter.NO_OP; // already the value we're going to set\n\n    // OK, there's no way we won't change the cluster state now\n    Map<String,Replica> replicas = collection.getSlice(sliceName).getReplicasCopy();\n    if (isUnique == false) {\n      replicas.get(replicaName).getProperties().put(property, propVal);\n    } else { // Set prop for this replica, but remove it for all others.\n      for (Replica rep : replicas.values()) {\n        if (rep.getName().equalsIgnoreCase(replicaName)) {\n          rep.getProperties().put(property, propVal);\n        } else {\n          rep.getProperties().remove(property);\n        }\n      }\n    }\n    Slice newSlice = new Slice(sliceName, replicas, collection.getSlice(sliceName).shallowCopy());\n    DocCollection newCollection = CollectionMutator.updateSlice(collectionName, collection,\n        newSlice);\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand addReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_VALUE_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer ADDREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" and \" +\n              ZkStateReader.PROPERTY_VALUE_PROP + \" no action taken.\");\n    }\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n    property = property.toLowerCase(Locale.ROOT);\n    String propVal = message.getStr(ZkStateReader.PROPERTY_VALUE_PROP);\n    String shardUnique = message.getStr(OverseerCollectionMessageHandler.SHARD_UNIQUE);\n\n    boolean isUnique = false;\n\n    if (SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(property)) {\n      if (StringUtils.isNotBlank(shardUnique) && Boolean.parseBoolean(shardUnique) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Overseer ADDREPLICAPROP for \" +\n            property + \" cannot have \" + OverseerCollectionMessageHandler.SHARD_UNIQUE + \" set to anything other than\" +\n            \"'true'. No action taken\");\n      }\n      isUnique = true;\n    } else {\n      isUnique = Boolean.parseBoolean(shardUnique);\n    }\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Replica replica = collection.getReplica(replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n    log.info(\"Setting property {} with value {} for collection {}\", property, propVal, collectionName);\n    log.debug(\"Full message: {}\", message);\n    if (StringUtils.equalsIgnoreCase(replica.getStr(property), propVal)) return ZkStateWriter.NO_OP; // already the value we're going to set\n\n    // OK, there's no way we won't change the cluster state now\n    Map<String,Replica> replicas = collection.getSlice(sliceName).getReplicasCopy();\n    if (isUnique == false) {\n      replicas.get(replicaName).getProperties().put(property, propVal);\n    } else { // Set prop for this replica, but remove it for all others.\n      for (Replica rep : replicas.values()) {\n        if (rep.getName().equalsIgnoreCase(replicaName)) {\n          rep.getProperties().put(property, propVal);\n        } else {\n          rep.getProperties().remove(property);\n        }\n      }\n    }\n    Slice newSlice = new Slice(sliceName, replicas, collection.getSlice(sliceName).shallowCopy());\n    DocCollection newCollection = CollectionMutator.updateSlice(collectionName, collection,\n        newSlice);\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20c968c14aace7cf49843bf2c1fafc7fd3845659","date":1533133859,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#addReplicaProperty(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#addReplicaProperty(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand addReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (!checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) ||\n        !checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) ||\n        !checkKeyExistence(message, ZkStateReader.REPLICA_PROP) ||\n        !checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) ||\n        !checkKeyExistence(message, ZkStateReader.PROPERTY_VALUE_PROP)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer ADDREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" and \" +\n              ZkStateReader.PROPERTY_VALUE_PROP + \" no action taken.\");\n    }\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, OverseerCollectionMessageHandler.COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n    property = property.toLowerCase(Locale.ROOT);\n    String propVal = message.getStr(ZkStateReader.PROPERTY_VALUE_PROP);\n    String shardUnique = message.getStr(OverseerCollectionMessageHandler.SHARD_UNIQUE);\n\n    boolean isUnique = false;\n\n    if (SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(property)) {\n      if (StringUtils.isNotBlank(shardUnique) && Boolean.parseBoolean(shardUnique) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Overseer ADDREPLICAPROP for \" +\n            property + \" cannot have \" + OverseerCollectionMessageHandler.SHARD_UNIQUE + \" set to anything other than\" +\n            \"'true'. No action taken\");\n      }\n      isUnique = true;\n    } else {\n      isUnique = Boolean.parseBoolean(shardUnique);\n    }\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Replica replica = collection.getReplica(replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n    log.info(\"Setting property {} with value {} for collection {}\", property, propVal, collectionName);\n    log.debug(\"Full message: {}\", message);\n    if (StringUtils.equalsIgnoreCase(replica.getStr(property), propVal)) return ZkStateWriter.NO_OP; // already the value we're going to set\n\n    // OK, there's no way we won't change the cluster state now\n    Map<String,Replica> replicas = collection.getSlice(sliceName).getReplicasCopy();\n    if (isUnique == false) {\n      replicas.get(replicaName).getProperties().put(property, propVal);\n    } else { // Set prop for this replica, but remove it for all others.\n      for (Replica rep : replicas.values()) {\n        if (rep.getName().equalsIgnoreCase(replicaName)) {\n          rep.getProperties().put(property, propVal);\n        } else {\n          rep.getProperties().remove(property);\n        }\n      }\n    }\n    Slice newSlice = new Slice(sliceName, replicas, collection.getSlice(sliceName).shallowCopy());\n    DocCollection newCollection = CollectionMutator.updateSlice(collectionName, collection,\n        newSlice);\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand addReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.REPLICA_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) == false ||\n        checkKeyExistence(message, ZkStateReader.PROPERTY_VALUE_PROP) == false) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer ADDREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" and \" +\n              ZkStateReader.PROPERTY_VALUE_PROP + \" no action taken.\");\n    }\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, OverseerCollectionMessageHandler.COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n    property = property.toLowerCase(Locale.ROOT);\n    String propVal = message.getStr(ZkStateReader.PROPERTY_VALUE_PROP);\n    String shardUnique = message.getStr(OverseerCollectionMessageHandler.SHARD_UNIQUE);\n\n    boolean isUnique = false;\n\n    if (SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(property)) {\n      if (StringUtils.isNotBlank(shardUnique) && Boolean.parseBoolean(shardUnique) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Overseer ADDREPLICAPROP for \" +\n            property + \" cannot have \" + OverseerCollectionMessageHandler.SHARD_UNIQUE + \" set to anything other than\" +\n            \"'true'. No action taken\");\n      }\n      isUnique = true;\n    } else {\n      isUnique = Boolean.parseBoolean(shardUnique);\n    }\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Replica replica = collection.getReplica(replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n    log.info(\"Setting property {} with value {} for collection {}\", property, propVal, collectionName);\n    log.debug(\"Full message: {}\", message);\n    if (StringUtils.equalsIgnoreCase(replica.getStr(property), propVal)) return ZkStateWriter.NO_OP; // already the value we're going to set\n\n    // OK, there's no way we won't change the cluster state now\n    Map<String,Replica> replicas = collection.getSlice(sliceName).getReplicasCopy();\n    if (isUnique == false) {\n      replicas.get(replicaName).getProperties().put(property, propVal);\n    } else { // Set prop for this replica, but remove it for all others.\n      for (Replica rep : replicas.values()) {\n        if (rep.getName().equalsIgnoreCase(replicaName)) {\n          rep.getProperties().put(property, propVal);\n        } else {\n          rep.getProperties().remove(property);\n        }\n      }\n    }\n    Slice newSlice = new Slice(sliceName, replicas, collection.getSlice(sliceName).shallowCopy());\n    DocCollection newCollection = CollectionMutator.updateSlice(collectionName, collection,\n        newSlice);\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6681d02f2302c363be938426e68f8dfd090cc1bf","date":1575339019,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#addReplicaProperty(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#addReplicaProperty(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand addReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (!checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) ||\n        !checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) ||\n        !checkKeyExistence(message, ZkStateReader.REPLICA_PROP) ||\n        !checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) ||\n        !checkKeyExistence(message, ZkStateReader.PROPERTY_VALUE_PROP)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer ADDREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" and \" +\n              ZkStateReader.PROPERTY_VALUE_PROP + \" no action taken.\");\n    }\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, OverseerCollectionMessageHandler.COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n    property = property.toLowerCase(Locale.ROOT);\n    String propVal = message.getStr(ZkStateReader.PROPERTY_VALUE_PROP);\n    String shardUnique = message.getStr(OverseerCollectionMessageHandler.SHARD_UNIQUE);\n\n    boolean isUnique = false;\n\n    if (SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(property)) {\n      if (StringUtils.isNotBlank(shardUnique) && Boolean.parseBoolean(shardUnique) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Overseer ADDREPLICAPROP for \" +\n            property + \" cannot have \" + OverseerCollectionMessageHandler.SHARD_UNIQUE + \" set to anything other than\" +\n            \"'true'. No action taken\");\n      }\n      isUnique = true;\n    } else {\n      isUnique = Boolean.parseBoolean(shardUnique);\n    }\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Replica replica = collection.getReplica(replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n    log.info(\"Setting property {} with value {} for collection {}\", property, propVal, collectionName);\n    log.debug(\"Full message: {}\", message);\n    if (StringUtils.equalsIgnoreCase(replica.getStr(property), propVal))\n      return ZkStateWriter.NO_OP; // already the value we're going to set\n\n    // OK, there's no way we won't change the cluster state now\n    Map<String, Replica> replicas = collection.getSlice(sliceName).getReplicasCopy();\n    if (isUnique == false) {\n      replicas.get(replicaName).getProperties().put(property, propVal);\n    } else { // Set prop for this replica, but remove it for all others.\n      for (Replica rep : replicas.values()) {\n        if (rep.getName().equalsIgnoreCase(replicaName)) {\n          rep.getProperties().put(property, propVal);\n        } else {\n          rep.getProperties().remove(property);\n        }\n      }\n    }\n    Slice newSlice = new Slice(sliceName, replicas, collection.getSlice(sliceName).shallowCopy(),collectionName);\n    DocCollection newCollection = CollectionMutator.updateSlice(collectionName, collection,\n        newSlice);\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand addReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (!checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) ||\n        !checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) ||\n        !checkKeyExistence(message, ZkStateReader.REPLICA_PROP) ||\n        !checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) ||\n        !checkKeyExistence(message, ZkStateReader.PROPERTY_VALUE_PROP)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer ADDREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" and \" +\n              ZkStateReader.PROPERTY_VALUE_PROP + \" no action taken.\");\n    }\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, OverseerCollectionMessageHandler.COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n    property = property.toLowerCase(Locale.ROOT);\n    String propVal = message.getStr(ZkStateReader.PROPERTY_VALUE_PROP);\n    String shardUnique = message.getStr(OverseerCollectionMessageHandler.SHARD_UNIQUE);\n\n    boolean isUnique = false;\n\n    if (SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(property)) {\n      if (StringUtils.isNotBlank(shardUnique) && Boolean.parseBoolean(shardUnique) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Overseer ADDREPLICAPROP for \" +\n            property + \" cannot have \" + OverseerCollectionMessageHandler.SHARD_UNIQUE + \" set to anything other than\" +\n            \"'true'. No action taken\");\n      }\n      isUnique = true;\n    } else {\n      isUnique = Boolean.parseBoolean(shardUnique);\n    }\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Replica replica = collection.getReplica(replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n    log.info(\"Setting property {} with value {} for collection {}\", property, propVal, collectionName);\n    log.debug(\"Full message: {}\", message);\n    if (StringUtils.equalsIgnoreCase(replica.getStr(property), propVal)) return ZkStateWriter.NO_OP; // already the value we're going to set\n\n    // OK, there's no way we won't change the cluster state now\n    Map<String,Replica> replicas = collection.getSlice(sliceName).getReplicasCopy();\n    if (isUnique == false) {\n      replicas.get(replicaName).getProperties().put(property, propVal);\n    } else { // Set prop for this replica, but remove it for all others.\n      for (Replica rep : replicas.values()) {\n        if (rep.getName().equalsIgnoreCase(replicaName)) {\n          rep.getProperties().put(property, propVal);\n        } else {\n          rep.getProperties().remove(property);\n        }\n      }\n    }\n    Slice newSlice = new Slice(sliceName, replicas, collection.getSlice(sliceName).shallowCopy());\n    DocCollection newCollection = CollectionMutator.updateSlice(collectionName, collection,\n        newSlice);\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#addReplicaProperty(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#addReplicaProperty(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand addReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (!checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) ||\n        !checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) ||\n        !checkKeyExistence(message, ZkStateReader.REPLICA_PROP) ||\n        !checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) ||\n        !checkKeyExistence(message, ZkStateReader.PROPERTY_VALUE_PROP)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer ADDREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" and \" +\n              ZkStateReader.PROPERTY_VALUE_PROP + \" no action taken.\");\n    }\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, OverseerCollectionMessageHandler.COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n    property = property.toLowerCase(Locale.ROOT);\n    String propVal = message.getStr(ZkStateReader.PROPERTY_VALUE_PROP);\n    String shardUnique = message.getStr(OverseerCollectionMessageHandler.SHARD_UNIQUE);\n\n    boolean isUnique = false;\n\n    if (SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(property)) {\n      if (StringUtils.isNotBlank(shardUnique) && Boolean.parseBoolean(shardUnique) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Overseer ADDREPLICAPROP for \" +\n            property + \" cannot have \" + OverseerCollectionMessageHandler.SHARD_UNIQUE + \" set to anything other than\" +\n            \"'true'. No action taken\");\n      }\n      isUnique = true;\n    } else {\n      isUnique = Boolean.parseBoolean(shardUnique);\n    }\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Replica replica = collection.getReplica(replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n    log.info(\"Setting property {} with value {} for collection {}\", property, propVal, collectionName);\n    log.debug(\"Full message: {}\", message);\n    if (StringUtils.equalsIgnoreCase(replica.getStr(property), propVal))\n      return ZkStateWriter.NO_OP; // already the value we're going to set\n\n    // OK, there's no way we won't change the cluster state now\n    Map<String, Replica> replicas = collection.getSlice(sliceName).getReplicasCopy();\n    if (isUnique == false) {\n      replicas.get(replicaName).getProperties().put(property, propVal);\n    } else { // Set prop for this replica, but remove it for all others.\n      for (Replica rep : replicas.values()) {\n        if (rep.getName().equalsIgnoreCase(replicaName)) {\n          rep.getProperties().put(property, propVal);\n        } else {\n          rep.getProperties().remove(property);\n        }\n      }\n    }\n    Slice newSlice = new Slice(sliceName, replicas, collection.getSlice(sliceName).shallowCopy(),collectionName);\n    DocCollection newCollection = CollectionMutator.updateSlice(collectionName, collection,\n        newSlice);\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","sourceOld":"  public ZkWriteCommand addReplicaProperty(ClusterState clusterState, ZkNodeProps message) {\n    if (!checkKeyExistence(message, ZkStateReader.COLLECTION_PROP) ||\n        !checkKeyExistence(message, ZkStateReader.SHARD_ID_PROP) ||\n        !checkKeyExistence(message, ZkStateReader.REPLICA_PROP) ||\n        !checkKeyExistence(message, ZkStateReader.PROPERTY_PROP) ||\n        !checkKeyExistence(message, ZkStateReader.PROPERTY_VALUE_PROP)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Overseer ADDREPLICAPROP requires \" +\n              ZkStateReader.COLLECTION_PROP + \" and \" + ZkStateReader.SHARD_ID_PROP + \" and \" +\n              ZkStateReader.REPLICA_PROP + \" and \" + ZkStateReader.PROPERTY_PROP + \" and \" +\n              ZkStateReader.PROPERTY_VALUE_PROP + \" no action taken.\");\n    }\n\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceName = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String replicaName = message.getStr(ZkStateReader.REPLICA_PROP);\n    String property = message.getStr(ZkStateReader.PROPERTY_PROP).toLowerCase(Locale.ROOT);\n    if (StringUtils.startsWith(property, OverseerCollectionMessageHandler.COLL_PROP_PREFIX) == false) {\n      property = OverseerCollectionMessageHandler.COLL_PROP_PREFIX + property;\n    }\n    property = property.toLowerCase(Locale.ROOT);\n    String propVal = message.getStr(ZkStateReader.PROPERTY_VALUE_PROP);\n    String shardUnique = message.getStr(OverseerCollectionMessageHandler.SHARD_UNIQUE);\n\n    boolean isUnique = false;\n\n    if (SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(property)) {\n      if (StringUtils.isNotBlank(shardUnique) && Boolean.parseBoolean(shardUnique) == false) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Overseer ADDREPLICAPROP for \" +\n            property + \" cannot have \" + OverseerCollectionMessageHandler.SHARD_UNIQUE + \" set to anything other than\" +\n            \"'true'. No action taken\");\n      }\n      isUnique = true;\n    } else {\n      isUnique = Boolean.parseBoolean(shardUnique);\n    }\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Replica replica = collection.getReplica(replicaName);\n\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find collection/slice/replica \" +\n          collectionName + \"/\" + sliceName + \"/\" + replicaName + \" no action taken.\");\n    }\n    log.info(\"Setting property {} with value {} for collection {}\", property, propVal, collectionName);\n    log.debug(\"Full message: {}\", message);\n    if (StringUtils.equalsIgnoreCase(replica.getStr(property), propVal)) return ZkStateWriter.NO_OP; // already the value we're going to set\n\n    // OK, there's no way we won't change the cluster state now\n    Map<String,Replica> replicas = collection.getSlice(sliceName).getReplicasCopy();\n    if (isUnique == false) {\n      replicas.get(replicaName).getProperties().put(property, propVal);\n    } else { // Set prop for this replica, but remove it for all others.\n      for (Replica rep : replicas.values()) {\n        if (rep.getName().equalsIgnoreCase(replicaName)) {\n          rep.getProperties().put(property, propVal);\n        } else {\n          rep.getProperties().remove(property);\n        }\n      }\n    }\n    Slice newSlice = new Slice(sliceName, replicas, collection.getSlice(sliceName).shallowCopy());\n    DocCollection newCollection = CollectionMutator.updateSlice(collectionName, collection,\n        newSlice);\n    return new ZkWriteCommand(collectionName, newCollection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3aa683bba99315838c968fefedf3d74f44aa993":["20c968c14aace7cf49843bf2c1fafc7fd3845659","6681d02f2302c363be938426e68f8dfd090cc1bf"],"962cd4f5e313777f35da8f521265323e84184929":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"b94236357aaa22b76c10629851fe4e376e0cea82":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"20c968c14aace7cf49843bf2c1fafc7fd3845659":["b94236357aaa22b76c10629851fe4e376e0cea82"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["20c968c14aace7cf49843bf2c1fafc7fd3845659"],"da5ef0533dae1e5782b071a5484e1b9f3c28fc5f":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["da5ef0533dae1e5782b071a5484e1b9f3c28fc5f"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","962cd4f5e313777f35da8f521265323e84184929"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6681d02f2302c363be938426e68f8dfd090cc1bf"]},"commit2Childs":{"d3aa683bba99315838c968fefedf3d74f44aa993":[],"962cd4f5e313777f35da8f521265323e84184929":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b94236357aaa22b76c10629851fe4e376e0cea82":["20c968c14aace7cf49843bf2c1fafc7fd3845659"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["962cd4f5e313777f35da8f521265323e84184929","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"20c968c14aace7cf49843bf2c1fafc7fd3845659":["d3aa683bba99315838c968fefedf3d74f44aa993","6681d02f2302c363be938426e68f8dfd090cc1bf"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"6681d02f2302c363be938426e68f8dfd090cc1bf":["d3aa683bba99315838c968fefedf3d74f44aa993","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"da5ef0533dae1e5782b071a5484e1b9f3c28fc5f":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["da5ef0533dae1e5782b071a5484e1b9f3c28fc5f"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}