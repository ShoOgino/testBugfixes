{"path":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testExistingSnapshots().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testExistingSnapshots().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testExistingSnapshots().mjava","sourceNew":"  @Test\n  public void testExistingSnapshots() throws Exception {\n    // Tests the ability to construct a SDP from existing snapshots, and\n    // asserts that those snapshots/commit points are protected.\n    int numSnapshots = 3;\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n\n    // Make a new policy and initialize with snapshots.\n    sdp = getDeletionPolicy(sdp.getSnapshots());\n    writer = new IndexWriter(dir, getConfig(random, sdp));\n    // attempt to delete unused files - the snapshotted files should not be deleted\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertSnapshotExists(dir, sdp, numSnapshots);\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testExistingSnapshots() throws Exception {\n    // Tests the ability to construct a SDP from existing snapshots, and\n    // asserts that those snapshots/commit points are protected.\n    int numSnapshots = 3;\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n\n    // Make a new policy and initialize with snapshots.\n    sdp = getDeletionPolicy(sdp.getSnapshots());\n    writer = new IndexWriter(dir, getConfig(random, sdp));\n    // attempt to delete unused files - the snapshotted files should not be deleted\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertSnapshotExists(dir, sdp, numSnapshots);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testExistingSnapshots().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testExistingSnapshots().mjava","sourceNew":"  @Test\n  public void testExistingSnapshots() throws Exception {\n    // Tests the ability to construct a SDP from existing snapshots, and\n    // asserts that those snapshots/commit points are protected.\n    int numSnapshots = 3;\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n\n    // Make a new policy and initialize with snapshots.\n    sdp = getDeletionPolicy(sdp.getSnapshots());\n    writer = new IndexWriter(dir, getConfig(random(), sdp));\n    // attempt to delete unused files - the snapshotted files should not be deleted\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertSnapshotExists(dir, sdp, numSnapshots);\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testExistingSnapshots() throws Exception {\n    // Tests the ability to construct a SDP from existing snapshots, and\n    // asserts that those snapshots/commit points are protected.\n    int numSnapshots = 3;\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n\n    // Make a new policy and initialize with snapshots.\n    sdp = getDeletionPolicy(sdp.getSnapshots());\n    writer = new IndexWriter(dir, getConfig(random, sdp));\n    // attempt to delete unused files - the snapshotted files should not be deleted\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertSnapshotExists(dir, sdp, numSnapshots);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70790b11e79a0366b21b2cc5b82d03b6fddcef81","date":1364594206,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testExistingSnapshots().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testExistingSnapshots().mjava","sourceNew":"  @Test\n  public void testExistingSnapshots() throws Exception {\n    // Tests the ability to construct a SDP from existing snapshots, and\n    // asserts that those snapshots/commit points are protected.\n    int numSnapshots = 3;\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n\n    // Make a new policy and initialize with snapshots.\n    sdp = getDeletionPolicy(sdp.getSnapshots());\n    writer = new IndexWriter(dir, getConfig(random(), sdp));\n    // attempt to delete unused files - the snapshotted files should not be deleted\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertSnapshotExists(dir, sdp, numSnapshots);\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testExistingSnapshots() throws Exception {\n    // Tests the ability to construct a SDP from existing snapshots, and\n    // asserts that those snapshots/commit points are protected.\n    int numSnapshots = 3;\n    Directory dir = newDirectory();\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n\n    // Make a new policy and initialize with snapshots.\n    sdp = getDeletionPolicy(sdp.getSnapshots());\n    writer = new IndexWriter(dir, getConfig(random(), sdp));\n    // attempt to delete unused files - the snapshotted files should not be deleted\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertSnapshotExists(dir, sdp, numSnapshots);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a207624ce3e468bca1819861084438d936e3b1c","date":1367514967,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testExistingSnapshots().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testExistingSnapshots() throws Exception {\n    // Tests the ability to construct a SDP from existing snapshots, and\n    // asserts that those snapshots/commit points are protected.\n    int numSnapshots = 3;\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n\n    // Make a new policy and initialize with snapshots.\n    sdp = getDeletionPolicy(sdp.getSnapshots());\n    writer = new IndexWriter(dir, getConfig(random(), sdp));\n    // attempt to delete unused files - the snapshotted files should not be deleted\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertSnapshotExists(dir, sdp, numSnapshots);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70790b11e79a0366b21b2cc5b82d03b6fddcef81":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"8a207624ce3e468bca1819861084438d936e3b1c":["70790b11e79a0366b21b2cc5b82d03b6fddcef81"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a207624ce3e468bca1819861084438d936e3b1c"]},"commit2Childs":{"70790b11e79a0366b21b2cc5b82d03b6fddcef81":["8a207624ce3e468bca1819861084438d936e3b1c"],"8a207624ce3e468bca1819861084438d936e3b1c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["70790b11e79a0366b21b2cc5b82d03b6fddcef81"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}