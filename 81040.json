{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#processResponse(XMLStreamReader).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#processResponse(XMLStreamReader).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#processResponse(XMLStreamReader).mjava","sourceNew":"  /**\n   * parse the text into a named list...\n   */\n  private NamedList<Object> processResponse(XMLStreamReader parser)\n  {\n    try {\n      NamedList<Object> response = null;\n      for (int event = parser.next();  \n       event != XMLStreamConstants.END_DOCUMENT;\n       event = parser.next()) \n      {\n        switch (event) {\n          case XMLStreamConstants.START_ELEMENT:\n\n            if( response != null ) {\n              throw new Exception( \"already read the response!\" );\n            }\n            \n            // only top-level element is \"response\n            String name = parser.getLocalName();\n            if( name.equals( \"response\" ) || name.equals( \"result\" ) ) {\n              response = readNamedList( parser );\n            }\n            else if( name.equals( \"solr\" ) ) {\n              return new SimpleOrderedMap<Object>();\n            }\n            else {\n              throw new Exception( \"really needs to be response or result.  \" +\n                  \"not:\"+parser.getLocalName() );\n            }\n            break;\n        } \n      } \n      return response;\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", ex );\n    }\n    finally {\n      try {\n        parser.close();\n      }\n      catch( Exception ex ){}\n    }\n  }\n\n","sourceOld":"  /**\n   * parse the text into a named list...\n   */\n  private NamedList<Object> processResponse(XMLStreamReader parser)\n  {\n    try {\n      NamedList<Object> response = null;\n      for (int event = parser.next();  \n       event != XMLStreamConstants.END_DOCUMENT;\n       event = parser.next()) \n      {\n        switch (event) {\n          case XMLStreamConstants.START_ELEMENT:\n\n            if( response != null ) {\n              throw new Exception( \"already read the response!\" );\n            }\n            \n            // only top-level element is \"response\n            String name = parser.getLocalName();\n            if( name.equals( \"response\" ) || name.equals( \"result\" ) ) {\n              response = readNamedList( parser );\n            }\n            else if( name.equals( \"solr\" ) ) {\n              return new SimpleOrderedMap<Object>();\n            }\n            else {\n              throw new Exception( \"really needs to be response or result.  \" +\n                  \"not:\"+parser.getLocalName() );\n            }\n            break;\n        } \n      } \n      return response;\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", ex );\n    }\n    finally {\n      try {\n        parser.close();\n      }\n      catch( Exception ex ){}\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#processResponse(XMLStreamReader).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#processResponse(XMLStreamReader).mjava","sourceNew":"  /**\n   * parse the text into a named list...\n   */\n  private NamedList<Object> processResponse(XMLStreamReader parser)\n  {\n    try {\n      NamedList<Object> response = null;\n      for (int event = parser.next();  \n       event != XMLStreamConstants.END_DOCUMENT;\n       event = parser.next()) \n      {\n        switch (event) {\n          case XMLStreamConstants.START_ELEMENT:\n\n            if( response != null ) {\n              throw new Exception( \"already read the response!\" );\n            }\n            \n            // only top-level element is \"response\n            String name = parser.getLocalName();\n            if( name.equals( \"response\" ) || name.equals( \"result\" ) ) {\n              response = readNamedList( parser );\n            }\n            else if( name.equals( \"solr\" ) ) {\n              return new SimpleOrderedMap<Object>();\n            }\n            else {\n              throw new Exception( \"really needs to be response or result.  \" +\n                  \"not:\"+parser.getLocalName() );\n            }\n            break;\n        } \n      } \n      return response;\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", ex );\n    }\n    finally {\n      try {\n        parser.close();\n      }\n      catch( Exception ex ){}\n    }\n  }\n\n","sourceOld":"  /**\n   * parse the text into a named list...\n   */\n  private NamedList<Object> processResponse(XMLStreamReader parser)\n  {\n    try {\n      NamedList<Object> response = null;\n      for (int event = parser.next();  \n       event != XMLStreamConstants.END_DOCUMENT;\n       event = parser.next()) \n      {\n        switch (event) {\n          case XMLStreamConstants.START_ELEMENT:\n\n            if( response != null ) {\n              throw new Exception( \"already read the response!\" );\n            }\n            \n            // only top-level element is \"response\n            String name = parser.getLocalName();\n            if( name.equals( \"response\" ) || name.equals( \"result\" ) ) {\n              response = readNamedList( parser );\n            }\n            else if( name.equals( \"solr\" ) ) {\n              return new SimpleOrderedMap<Object>();\n            }\n            else {\n              throw new Exception( \"really needs to be response or result.  \" +\n                  \"not:\"+parser.getLocalName() );\n            }\n            break;\n        } \n      } \n      return response;\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", ex );\n    }\n    finally {\n      try {\n        parser.close();\n      }\n      catch( Exception ex ){}\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#processResponse(XMLStreamReader).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#processResponse(XMLStreamReader).mjava","sourceNew":"  /**\n   * parse the text into a named list...\n   */\n  private NamedList<Object> processResponse(XMLStreamReader parser)\n  {\n    try {\n      NamedList<Object> response = null;\n      for (int event = parser.next();  \n       event != XMLStreamConstants.END_DOCUMENT;\n       event = parser.next()) \n      {\n        switch (event) {\n          case XMLStreamConstants.START_ELEMENT:\n\n            if( response != null ) {\n              throw new Exception( \"already read the response!\" );\n            }\n            \n            // only top-level element is \"response\n            String name = parser.getLocalName();\n            if( name.equals( \"response\" ) || name.equals( \"result\" ) ) {\n              response = readNamedList( parser );\n            }\n            else if( name.equals( \"solr\" ) ) {\n              return new SimpleOrderedMap<Object>();\n            }\n            else {\n              throw new Exception( \"really needs to be response or result.  \" +\n                  \"not:\"+parser.getLocalName() );\n            }\n            break;\n        } \n      } \n      return response;\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", ex );\n    }\n    finally {\n      try {\n        parser.close();\n      }\n      catch( Exception ex ){}\n    }\n  }\n\n","sourceOld":"  /**\n   * parse the text into a named list...\n   */\n  private NamedList<Object> processResponse(XMLStreamReader parser)\n  {\n    try {\n      NamedList<Object> response = null;\n      for (int event = parser.next();  \n       event != XMLStreamConstants.END_DOCUMENT;\n       event = parser.next()) \n      {\n        switch (event) {\n          case XMLStreamConstants.START_ELEMENT:\n\n            if( response != null ) {\n              throw new Exception( \"already read the response!\" );\n            }\n            \n            // only top-level element is \"response\n            String name = parser.getLocalName();\n            if( name.equals( \"response\" ) || name.equals( \"result\" ) ) {\n              response = readNamedList( parser );\n            }\n            else if( name.equals( \"solr\" ) ) {\n              return new SimpleOrderedMap<Object>();\n            }\n            else {\n              throw new Exception( \"really needs to be response or result.  \" +\n                  \"not:\"+parser.getLocalName() );\n            }\n            break;\n        } \n      } \n      return response;\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", ex );\n    }\n    finally {\n      try {\n        parser.close();\n      }\n      catch( Exception ex ){}\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#processResponse(XMLStreamReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#processResponse(XMLStreamReader).mjava","sourceNew":"  /**\n   * parse the text into a named list...\n   */\n  private NamedList<Object> processResponse(XMLStreamReader parser)\n  {\n    try {\n      NamedList<Object> response = null;\n      for (int event = parser.next();  \n       event != XMLStreamConstants.END_DOCUMENT;\n       event = parser.next()) \n      {\n        switch (event) {\n          case XMLStreamConstants.START_ELEMENT:\n\n            if( response != null ) {\n              throw new Exception( \"already read the response!\" );\n            }\n            \n            // only top-level element is \"response\n            String name = parser.getLocalName();\n            if( name.equals( \"response\" ) || name.equals( \"result\" ) ) {\n              response = readNamedList( parser );\n            }\n            else if( name.equals( \"solr\" ) ) {\n              return new SimpleOrderedMap<>();\n            }\n            else {\n              throw new Exception( \"really needs to be response or result.  \" +\n                  \"not:\"+parser.getLocalName() );\n            }\n            break;\n        } \n      } \n      return response;\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", ex );\n    }\n    finally {\n      try {\n        parser.close();\n      }\n      catch( Exception ex ){}\n    }\n  }\n\n","sourceOld":"  /**\n   * parse the text into a named list...\n   */\n  private NamedList<Object> processResponse(XMLStreamReader parser)\n  {\n    try {\n      NamedList<Object> response = null;\n      for (int event = parser.next();  \n       event != XMLStreamConstants.END_DOCUMENT;\n       event = parser.next()) \n      {\n        switch (event) {\n          case XMLStreamConstants.START_ELEMENT:\n\n            if( response != null ) {\n              throw new Exception( \"already read the response!\" );\n            }\n            \n            // only top-level element is \"response\n            String name = parser.getLocalName();\n            if( name.equals( \"response\" ) || name.equals( \"result\" ) ) {\n              response = readNamedList( parser );\n            }\n            else if( name.equals( \"solr\" ) ) {\n              return new SimpleOrderedMap<Object>();\n            }\n            else {\n              throw new Exception( \"really needs to be response or result.  \" +\n                  \"not:\"+parser.getLocalName() );\n            }\n            break;\n        } \n      } \n      return response;\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", ex );\n    }\n    finally {\n      try {\n        parser.close();\n      }\n      catch( Exception ex ){}\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#processResponse(XMLStreamReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#processResponse(XMLStreamReader).mjava","sourceNew":"  /**\n   * parse the text into a named list...\n   */\n  private NamedList<Object> processResponse(XMLStreamReader parser)\n  {\n    try {\n      NamedList<Object> response = null;\n      for (int event = parser.next();\n       event != XMLStreamConstants.END_DOCUMENT;\n       event = parser.next())\n      {\n        switch (event) {\n          case XMLStreamConstants.START_ELEMENT:\n\n            if( response != null ) {\n              throw new Exception( \"already read the response!\" );\n            }\n\n            // only top-level element is \"response\n            String name = parser.getLocalName();\n            if( name.equals( \"response\" ) || name.equals( \"result\" ) ) {\n              response = readNamedList( parser );\n            }\n            else if( name.equals( \"solr\" ) ) {\n              return new SimpleOrderedMap<>();\n            }\n            else {\n              throw new Exception( \"really needs to be response or result.  \" +\n                  \"not:\"+parser.getLocalName() );\n            }\n            break;\n        }\n      }\n      return response;\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", ex );\n    }\n    finally {\n      try {\n        parser.close();\n      }\n      catch( Exception ex ){}\n    }\n  }\n\n","sourceOld":"  /**\n   * parse the text into a named list...\n   */\n  private NamedList<Object> processResponse(XMLStreamReader parser)\n  {\n    try {\n      NamedList<Object> response = null;\n      for (int event = parser.next();  \n       event != XMLStreamConstants.END_DOCUMENT;\n       event = parser.next()) \n      {\n        switch (event) {\n          case XMLStreamConstants.START_ELEMENT:\n\n            if( response != null ) {\n              throw new Exception( \"already read the response!\" );\n            }\n            \n            // only top-level element is \"response\n            String name = parser.getLocalName();\n            if( name.equals( \"response\" ) || name.equals( \"result\" ) ) {\n              response = readNamedList( parser );\n            }\n            else if( name.equals( \"solr\" ) ) {\n              return new SimpleOrderedMap<>();\n            }\n            else {\n              throw new Exception( \"really needs to be response or result.  \" +\n                  \"not:\"+parser.getLocalName() );\n            }\n            break;\n        } \n      } \n      return response;\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"parsing error\", ex );\n    }\n    finally {\n      try {\n        parser.close();\n      }\n      catch( Exception ex ){}\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}