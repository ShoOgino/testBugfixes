{"path":"src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,boolean).mjava","commits":[{"id":"9691bd012f05632bf944115412ed90daae112f68","date":1168971974,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,boolean,boolean).mjava","sourceNew":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see SolrParams#FACET_LIMIT\n   * @see SolrParams#FACET_ZEROS\n   * @see SolrParams#FACET_MISSING\n   */\n  public NamedList getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing, boolean sort)\n    throws IOException {\n\n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    IndexSchema schema = searcher.getSchema();\n    IndexReader r = searcher.getReader();\n    FieldType ft = schema.getFieldType(field);\n\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;    \n    final BoundedTreeSet<CountPair<String,Integer>> queue = sort ? new BoundedTreeSet<CountPair<String,Integer>>(maxsize) : null;\n    final NamedList res = new NamedList();\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n    TermEnum te = r.terms(new Term(field,\"\"));\n    do {\n      Term t = te.term();\n\n      if (null == t || ! t.field().equals(field))\n        break;\n\n      int df = te.docFreq();\n\n      if (df>0) { /* check df since all docs may be deleted */\n        int c = searcher.numDocs(new TermQuery(t), docs);\n\n        if (sort) {\n          if (c>min) {\n            queue.add(new CountPair<String,Integer>(t.text(), c));\n            if (queue.size()>=maxsize) min=queue.last().val;\n          }\n        } else {\n          if (c >= mincount && --off<0) {\n            if (--lim<0) break;\n            res.add(ft.indexedToReadable(t.text()), c);\n          }\n        }\n      }\n    } while (te.next());\n\n    if (sort) {\n      for (CountPair<String,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        res.add(ft.indexedToReadable(p.key), p.val);\n      }\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n    \n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corrisponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see SolrParams#FACET_LIMIT\n   * @see SolrParams#FACET_ZEROS\n   * @see SolrParams#FACET_MISSING\n   */\n  public NamedList getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int limit, boolean zeros, boolean missing)\n    throws IOException {\n\n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    IndexSchema schema = searcher.getSchema();\n    IndexReader r = searcher.getReader();\n    FieldType ft = schema.getFieldType(field);\n\n    Set<CountPair<String,Integer>> counts\n      = new HashSet<CountPair<String,Integer>>();\n\n    if (0 <= limit) {\n      counts = new BoundedTreeSet<CountPair<String,Integer>>(limit);\n    }\n\n    TermEnum te = r.terms(new Term(field,\"\"));\n    do {\n      Term t = te.term();\n\n      if (null == t || ! t.field().equals(field))\n        break;\n\n      if (0 < te.docFreq()) { /* all docs may be deleted */\n        int count = searcher.numDocs(new TermQuery(t),\n                                     docs);\n\n        if (zeros || 0 < count)\n          counts.add(new CountPair<String,Integer>\n                     (t.text(), count));\n\n      }\n    } while (te.next());\n\n    NamedList res = new NamedList();\n    for (CountPair<String,Integer> p : counts) {\n      res.add(ft.indexedToReadable(p.key), p.val);\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a902fceaa7c10b5669d1ed631319bd619378ca7","date":1169742721,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,boolean,String).mjava","pathOld":"src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,boolean).mjava","sourceNew":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see SolrParams#FACET_LIMIT\n   * @see SolrParams#FACET_ZEROS\n   * @see SolrParams#FACET_MISSING\n   */\n  public NamedList getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing, boolean sort, String prefix)\n    throws IOException {\n\n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    IndexSchema schema = searcher.getSchema();\n    IndexReader r = searcher.getReader();\n    FieldType ft = schema.getFieldType(field);\n\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;    \n    final BoundedTreeSet<CountPair<String,Integer>> queue = sort ? new BoundedTreeSet<CountPair<String,Integer>>(maxsize) : null;\n    final NamedList res = new NamedList();\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    String startTerm = prefix==null ? \"\" : ft.toInternal(prefix);\n    TermEnum te = r.terms(new Term(field,startTerm));\n    do {\n      Term t = te.term();\n\n      if (null == t || ! t.field().equals(field))\n        break;\n\n      if (prefix!=null && !t.text().startsWith(prefix)) break;\n\n      int df = te.docFreq();\n\n      if (df>0) { /* check df since all docs may be deleted */\n        int c = searcher.numDocs(new TermQuery(t), docs);\n\n        if (sort) {\n          if (c>min) {\n            queue.add(new CountPair<String,Integer>(t.text(), c));\n            if (queue.size()>=maxsize) min=queue.last().val;\n          }\n        } else {\n          if (c >= mincount && --off<0) {\n            if (--lim<0) break;\n            res.add(ft.indexedToReadable(t.text()), c);\n          }\n        }\n      }\n    } while (te.next());\n\n    if (sort) {\n      for (CountPair<String,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        res.add(ft.indexedToReadable(p.key), p.val);\n      }\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n    \n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see SolrParams#FACET_LIMIT\n   * @see SolrParams#FACET_ZEROS\n   * @see SolrParams#FACET_MISSING\n   */\n  public NamedList getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing, boolean sort)\n    throws IOException {\n\n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    IndexSchema schema = searcher.getSchema();\n    IndexReader r = searcher.getReader();\n    FieldType ft = schema.getFieldType(field);\n\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;    \n    final BoundedTreeSet<CountPair<String,Integer>> queue = sort ? new BoundedTreeSet<CountPair<String,Integer>>(maxsize) : null;\n    final NamedList res = new NamedList();\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n    TermEnum te = r.terms(new Term(field,\"\"));\n    do {\n      Term t = te.term();\n\n      if (null == t || ! t.field().equals(field))\n        break;\n\n      int df = te.docFreq();\n\n      if (df>0) { /* check df since all docs may be deleted */\n        int c = searcher.numDocs(new TermQuery(t), docs);\n\n        if (sort) {\n          if (c>min) {\n            queue.add(new CountPair<String,Integer>(t.text(), c));\n            if (queue.size()>=maxsize) min=queue.last().val;\n          }\n        } else {\n          if (c >= mincount && --off<0) {\n            if (--lim<0) break;\n            res.add(ft.indexedToReadable(t.text()), c);\n          }\n        }\n      }\n    } while (te.next());\n\n    if (sort) {\n      for (CountPair<String,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        res.add(ft.indexedToReadable(p.key), p.val);\n      }\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n    \n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9691bd012f05632bf944115412ed90daae112f68":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5a902fceaa7c10b5669d1ed631319bd619378ca7":["9691bd012f05632bf944115412ed90daae112f68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9691bd012f05632bf944115412ed90daae112f68":["5a902fceaa7c10b5669d1ed631319bd619378ca7"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["9691bd012f05632bf944115412ed90daae112f68"],"5a902fceaa7c10b5669d1ed631319bd619378ca7":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5a902fceaa7c10b5669d1ed631319bd619378ca7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}