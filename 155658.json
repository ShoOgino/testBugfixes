{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/ForUtil#ForUtil(float,DataOutput).mjava","commits":[{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/ForUtil#ForUtil(float,DataOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/ForUtil#ForUtil(float,DataOutput).mjava","sourceNew":"  /**\n   * Create a new {@link ForUtil} instance and save state into <code>out</code>.\n   */\n  ForUtil(float acceptableOverheadRatio, DataOutput out) throws IOException {\n    out.writeVInt(PackedInts.VERSION_CURRENT);\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(\n          BLOCK_SIZE, bpv, acceptableOverheadRatio);\n      assert formatAndBits.format.isSupported(formatAndBits.bitsPerValue);\n      assert formatAndBits.bitsPerValue <= 32;\n      encodedSizes[bpv] = encodedSize(formatAndBits.format, PackedInts.VERSION_CURRENT, formatAndBits.bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          formatAndBits.format, PackedInts.VERSION_CURRENT, formatAndBits.bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          formatAndBits.format, PackedInts.VERSION_CURRENT, formatAndBits.bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n\n      out.writeVInt(formatAndBits.format.getId() << 5 | (formatAndBits.bitsPerValue - 1));\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link ForUtil} instance and save state into <code>out</code>.\n   */\n  ForUtil(float acceptableOverheadRatio, DataOutput out) throws IOException {\n    out.writeVInt(PackedInts.VERSION_CURRENT);\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(\n          BLOCK_SIZE, bpv, acceptableOverheadRatio);\n      assert formatAndBits.format.isSupported(formatAndBits.bitsPerValue);\n      assert formatAndBits.bitsPerValue <= 32;\n      encodedSizes[bpv] = encodedSize(formatAndBits.format, PackedInts.VERSION_CURRENT, formatAndBits.bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          formatAndBits.format, PackedInts.VERSION_CURRENT, formatAndBits.bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          formatAndBits.format, PackedInts.VERSION_CURRENT, formatAndBits.bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n\n      out.writeVInt(formatAndBits.format.getId() << 5 | (formatAndBits.bitsPerValue - 1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}