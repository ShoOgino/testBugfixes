{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/VarSortedBytesImpl.DirectSortedSource#DirectSortedSource(IndexInput,IndexInput,Comparator[BytesRef],Type).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/VarSortedBytesImpl.DirectSortedSource#DirectSortedSource(IndexInput,IndexInput,Comparator[BytesRef],Type).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/values/VarSortedBytesImpl.DirectSortedSource#DirectSortedSource(IndexInput,IndexInput,Comparator[BytesRef],Type).mjava","sourceNew":"    DirectSortedSource(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comparator, Type type) throws IOException {\n      super(type, comparator);\n      idxIn.readLong();\n      ordToOffsetIndex = PackedInts.getDirectReader(idxIn);\n      valueCount = ordToOffsetIndex.size()-1; // the last value here is just a dummy value to get the length of the last value\n      // advance this iterator to the end and clone the stream once it points to the docToOrdIndex header\n      ordToOffsetIndex.get(valueCount);\n      docToOrdIndex = PackedInts.getDirectReader((IndexInput) idxIn.clone()); // read the ords in to prevent too many random disk seeks\n      basePointer = datIn.getFilePointer();\n      this.datIn = datIn;\n    }\n\n","sourceOld":"    DirectSortedSource(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comparator, Type type) throws IOException {\n      super(type, comparator);\n      idxIn.readLong();\n      ordToOffsetIndex = PackedInts.getDirectReader(idxIn);\n      valueCount = ordToOffsetIndex.size()-1; // the last value here is just a dummy value to get the length of the last value\n      // advance this iterator to the end and clone the stream once it points to the docToOrdIndex header\n      ordToOffsetIndex.get(valueCount);\n      docToOrdIndex = PackedInts.getDirectReader((IndexInput) idxIn.clone()); // read the ords in to prevent too many random disk seeks\n      basePointer = datIn.getFilePointer();\n      this.datIn = datIn;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7460755aa94143153400f49c8ac2746f5d092e1a","date":1345536974,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/VarSortedBytesImpl.DirectSortedSource#DirectSortedSource(IndexInput,IndexInput,Comparator[BytesRef],Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/VarSortedBytesImpl.DirectSortedSource#DirectSortedSource(IndexInput,IndexInput,Comparator[BytesRef],Type).mjava","sourceNew":"    DirectSortedSource(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comparator, Type type) throws IOException {\n      super(type, comparator);\n      idxIn.readLong();\n      ordToOffsetIndex = PackedInts.getDirectReader(idxIn);\n      valueCount = ordToOffsetIndex.size()-1; // the last value here is just a dummy value to get the length of the last value\n      // advance this iterator to the end and clone the stream once it points to the docToOrdIndex header\n      ordToOffsetIndex.get(valueCount);\n      docToOrdIndex = PackedInts.getDirectReader(idxIn.clone()); // read the ords in to prevent too many random disk seeks\n      basePointer = datIn.getFilePointer();\n      this.datIn = datIn;\n    }\n\n","sourceOld":"    DirectSortedSource(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comparator, Type type) throws IOException {\n      super(type, comparator);\n      idxIn.readLong();\n      ordToOffsetIndex = PackedInts.getDirectReader(idxIn);\n      valueCount = ordToOffsetIndex.size()-1; // the last value here is just a dummy value to get the length of the last value\n      // advance this iterator to the end and clone the stream once it points to the docToOrdIndex header\n      ordToOffsetIndex.get(valueCount);\n      docToOrdIndex = PackedInts.getDirectReader((IndexInput) idxIn.clone()); // read the ords in to prevent too many random disk seeks\n      basePointer = datIn.getFilePointer();\n      this.datIn = datIn;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/VarSortedBytesImpl.DirectSortedSource#DirectSortedSource(IndexInput,IndexInput,Comparator[BytesRef],Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/VarSortedBytesImpl.DirectSortedSource#DirectSortedSource(IndexInput,IndexInput,Comparator[BytesRef],Type).mjava","sourceNew":"    DirectSortedSource(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comparator, Type type) throws IOException {\n      super(type, comparator);\n      idxIn.readLong();\n      ordToOffsetIndex = PackedInts.getDirectReader(idxIn);\n      valueCount = ordToOffsetIndex.size()-1; // the last value here is just a dummy value to get the length of the last value\n      // advance this iterator to the end and clone the stream once it points to the docToOrdIndex header\n      ordToOffsetIndex.get(valueCount);\n      docToOrdIndex = PackedInts.getDirectReader(idxIn.clone()); // read the ords in to prevent too many random disk seeks\n      basePointer = datIn.getFilePointer();\n      this.datIn = datIn;\n    }\n\n","sourceOld":"    DirectSortedSource(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comparator, Type type) throws IOException {\n      super(type, comparator);\n      idxIn.readLong();\n      ordToOffsetIndex = PackedInts.getDirectReader(idxIn);\n      valueCount = ordToOffsetIndex.size()-1; // the last value here is just a dummy value to get the length of the last value\n      // advance this iterator to the end and clone the stream once it points to the docToOrdIndex header\n      ordToOffsetIndex.get(valueCount);\n      docToOrdIndex = PackedInts.getDirectReader((IndexInput) idxIn.clone()); // read the ords in to prevent too many random disk seeks\n      basePointer = datIn.getFilePointer();\n      this.datIn = datIn;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/VarSortedBytesImpl.DirectSortedSource#DirectSortedSource(IndexInput,IndexInput,Comparator[BytesRef],Type).mjava","sourceNew":null,"sourceOld":"    DirectSortedSource(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comparator, Type type) throws IOException {\n      super(type, comparator);\n      idxIn.readLong();\n      ordToOffsetIndex = PackedInts.getDirectReader(idxIn);\n      valueCount = ordToOffsetIndex.size()-1; // the last value here is just a dummy value to get the length of the last value\n      // advance this iterator to the end and clone the stream once it points to the docToOrdIndex header\n      ordToOffsetIndex.get(valueCount);\n      docToOrdIndex = PackedInts.getDirectReader(idxIn.clone()); // read the ords in to prevent too many random disk seeks\n      basePointer = datIn.getFilePointer();\n      this.datIn = datIn;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/VarSortedBytesImpl.DirectSortedSource#DirectSortedSource(IndexInput,IndexInput,Comparator[BytesRef],Type).mjava","sourceNew":null,"sourceOld":"    DirectSortedSource(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comparator, Type type) throws IOException {\n      super(type, comparator);\n      idxIn.readLong();\n      ordToOffsetIndex = PackedInts.getDirectReader(idxIn);\n      valueCount = ordToOffsetIndex.size()-1; // the last value here is just a dummy value to get the length of the last value\n      // advance this iterator to the end and clone the stream once it points to the docToOrdIndex header\n      ordToOffsetIndex.get(valueCount);\n      docToOrdIndex = PackedInts.getDirectReader(idxIn.clone()); // read the ords in to prevent too many random disk seeks\n      basePointer = datIn.getFilePointer();\n      this.datIn = datIn;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7460755aa94143153400f49c8ac2746f5d092e1a"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["7460755aa94143153400f49c8ac2746f5d092e1a","0837ab0472feecb3a54260729d845f839e1cbd72"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["7460755aa94143153400f49c8ac2746f5d092e1a"],"7460755aa94143153400f49c8ac2746f5d092e1a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["001b25b42373b22a52f399dbf072f1224632e8e6","7460755aa94143153400f49c8ac2746f5d092e1a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"7460755aa94143153400f49c8ac2746f5d092e1a":["001b25b42373b22a52f399dbf072f1224632e8e6","d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}