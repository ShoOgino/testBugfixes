{"path":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createShardRequest(ResponseBuilder,List[String]).mjava","commits":[{"id":"76b65cf789129cacd84e977b8f1538aec29e0281","date":1470165799,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createShardRequest(ResponseBuilder,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Helper method for creating a new ShardRequest for the specified ids, based on the params \n   * specified for the current request.  The new ShardRequest does not yet know anything about \n   * which shard/slice it will be sent to.\n   */\n  private ShardRequest createShardRequest(final ResponseBuilder rb, final List<String> ids) {\n    final ShardRequest sreq = new ShardRequest();\n    sreq.purpose = 1;\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // TODO: how to avoid hardcoding this and hit the same handler?\n    sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      \n    sreq.params.set(\"distrib\",false);\n\n    sreq.params.remove(ShardParams.SHARDS);\n    sreq.params.remove(\"id\");\n    sreq.params.remove(\"ids\");\n    sreq.params.set(\"ids\", StrUtils.join(ids, ','));\n    \n    return sreq;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createShardRequest(ResponseBuilder,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Helper method for creating a new ShardRequest for the specified ids, based on the params \n   * specified for the current request.  The new ShardRequest does not yet know anything about \n   * which shard/slice it will be sent to.\n   */\n  private ShardRequest createShardRequest(final ResponseBuilder rb, final List<String> ids) {\n    final ShardRequest sreq = new ShardRequest();\n    sreq.purpose = 1;\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // TODO: how to avoid hardcoding this and hit the same handler?\n    sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      \n    sreq.params.set(\"distrib\",false);\n\n    sreq.params.remove(ShardParams.SHARDS);\n    sreq.params.remove(\"id\");\n    sreq.params.remove(\"ids\");\n    sreq.params.set(\"ids\", StrUtils.join(ids, ','));\n    \n    return sreq;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createShardRequest(ResponseBuilder,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Helper method for creating a new ShardRequest for the specified ids, based on the params \n   * specified for the current request.  The new ShardRequest does not yet know anything about \n   * which shard/slice it will be sent to.\n   */\n  private ShardRequest createShardRequest(final ResponseBuilder rb, final List<String> ids) {\n    final ShardRequest sreq = new ShardRequest();\n    sreq.purpose = 1;\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // TODO: how to avoid hardcoding this and hit the same handler?\n    sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      \n    sreq.params.set(\"distrib\",false);\n\n    sreq.params.remove(ShardParams.SHARDS);\n    sreq.params.remove(\"id\");\n    sreq.params.remove(\"ids\");\n    sreq.params.set(\"ids\", StrUtils.join(ids, ','));\n    \n    return sreq;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2dadc1f5ca8703d8659f4964961f9967935d75","date":1490231750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createShardRequest(ResponseBuilder,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createShardRequest(ResponseBuilder,List[String]).mjava","sourceNew":"  /**\n   * Helper method for creating a new ShardRequest for the specified ids, based on the params \n   * specified for the current request.  The new ShardRequest does not yet know anything about \n   * which shard/slice it will be sent to.\n   */\n  private ShardRequest createShardRequest(final ResponseBuilder rb, final List<String> ids) {\n    final ShardRequest sreq = new ShardRequest();\n    sreq.purpose = 1;\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // TODO: how to avoid hardcoding this and hit the same handler?\n    sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      \n    sreq.params.set(\"distrib\",false);\n\n    sreq.params.remove(ShardParams.SHARDS);\n    sreq.params.remove(ID);\n    sreq.params.remove(\"ids\");\n    sreq.params.set(\"ids\", StrUtils.join(ids, ','));\n    \n    return sreq;\n  }\n\n","sourceOld":"  /**\n   * Helper method for creating a new ShardRequest for the specified ids, based on the params \n   * specified for the current request.  The new ShardRequest does not yet know anything about \n   * which shard/slice it will be sent to.\n   */\n  private ShardRequest createShardRequest(final ResponseBuilder rb, final List<String> ids) {\n    final ShardRequest sreq = new ShardRequest();\n    sreq.purpose = 1;\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // TODO: how to avoid hardcoding this and hit the same handler?\n    sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      \n    sreq.params.set(\"distrib\",false);\n\n    sreq.params.remove(ShardParams.SHARDS);\n    sreq.params.remove(\"id\");\n    sreq.params.remove(\"ids\");\n    sreq.params.set(\"ids\", StrUtils.join(ids, ','));\n    \n    return sreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01624b85de12fb02335810bdf325124e59040772","date":1490254940,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createShardRequest(ResponseBuilder,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createShardRequest(ResponseBuilder,List[String]).mjava","sourceNew":"  /**\n   * Helper method for creating a new ShardRequest for the specified ids, based on the params \n   * specified for the current request.  The new ShardRequest does not yet know anything about \n   * which shard/slice it will be sent to.\n   */\n  private ShardRequest createShardRequest(final ResponseBuilder rb, final List<String> ids) {\n    final ShardRequest sreq = new ShardRequest();\n    sreq.purpose = 1;\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // TODO: how to avoid hardcoding this and hit the same handler?\n    sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      \n    sreq.params.set(DISTRIB,false);\n\n    sreq.params.remove(ShardParams.SHARDS);\n    sreq.params.remove(ID);\n    sreq.params.remove(\"ids\");\n    sreq.params.set(\"ids\", StrUtils.join(ids, ','));\n    \n    return sreq;\n  }\n\n","sourceOld":"  /**\n   * Helper method for creating a new ShardRequest for the specified ids, based on the params \n   * specified for the current request.  The new ShardRequest does not yet know anything about \n   * which shard/slice it will be sent to.\n   */\n  private ShardRequest createShardRequest(final ResponseBuilder rb, final List<String> ids) {\n    final ShardRequest sreq = new ShardRequest();\n    sreq.purpose = 1;\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // TODO: how to avoid hardcoding this and hit the same handler?\n    sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      \n    sreq.params.set(\"distrib\",false);\n\n    sreq.params.remove(ShardParams.SHARDS);\n    sreq.params.remove(ID);\n    sreq.params.remove(\"ids\");\n    sreq.params.set(\"ids\", StrUtils.join(ids, ','));\n    \n    return sreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5fa6615014cd2288fe930f8c8bb726f9504961d","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createShardRequest(ResponseBuilder,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createShardRequest(ResponseBuilder,List[String]).mjava","sourceNew":"  /**\n   * Helper method for creating a new ShardRequest for the specified ids, based on the params \n   * specified for the current request.  The new ShardRequest does not yet know anything about \n   * which shard/slice it will be sent to.\n   */\n  private ShardRequest createShardRequest(final ResponseBuilder rb, final List<String> ids) {\n    final ShardRequest sreq = new ShardRequest();\n    sreq.purpose = 1;\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // TODO: how to avoid hardcoding this and hit the same handler?\n    sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      \n    sreq.params.set(\"distrib\",false);\n\n    sreq.params.remove(ShardParams.SHARDS);\n    sreq.params.remove(ID);\n    sreq.params.remove(\"ids\");\n    sreq.params.set(\"ids\", StrUtils.join(ids, ','));\n    \n    return sreq;\n  }\n\n","sourceOld":"  /**\n   * Helper method for creating a new ShardRequest for the specified ids, based on the params \n   * specified for the current request.  The new ShardRequest does not yet know anything about \n   * which shard/slice it will be sent to.\n   */\n  private ShardRequest createShardRequest(final ResponseBuilder rb, final List<String> ids) {\n    final ShardRequest sreq = new ShardRequest();\n    sreq.purpose = 1;\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // TODO: how to avoid hardcoding this and hit the same handler?\n    sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      \n    sreq.params.set(\"distrib\",false);\n\n    sreq.params.remove(ShardParams.SHARDS);\n    sreq.params.remove(\"id\");\n    sreq.params.remove(\"ids\");\n    sreq.params.set(\"ids\", StrUtils.join(ids, ','));\n    \n    return sreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f4c5d3859373c3a74734e85efa122b17514e3e8","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createShardRequest(ResponseBuilder,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#createShardRequest(ResponseBuilder,List[String]).mjava","sourceNew":"  /**\n   * Helper method for creating a new ShardRequest for the specified ids, based on the params \n   * specified for the current request.  The new ShardRequest does not yet know anything about \n   * which shard/slice it will be sent to.\n   */\n  private ShardRequest createShardRequest(final ResponseBuilder rb, final List<String> ids) {\n    final ShardRequest sreq = new ShardRequest();\n    sreq.purpose = 1;\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // TODO: how to avoid hardcoding this and hit the same handler?\n    sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      \n    sreq.params.set(DISTRIB,false);\n\n    sreq.params.remove(ShardParams.SHARDS);\n    sreq.params.remove(ID);\n    sreq.params.remove(\"ids\");\n    sreq.params.set(\"ids\", StrUtils.join(ids, ','));\n    \n    return sreq;\n  }\n\n","sourceOld":"  /**\n   * Helper method for creating a new ShardRequest for the specified ids, based on the params \n   * specified for the current request.  The new ShardRequest does not yet know anything about \n   * which shard/slice it will be sent to.\n   */\n  private ShardRequest createShardRequest(final ResponseBuilder rb, final List<String> ids) {\n    final ShardRequest sreq = new ShardRequest();\n    sreq.purpose = 1;\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // TODO: how to avoid hardcoding this and hit the same handler?\n    sreq.params.set(ShardParams.SHARDS_QT,\"/get\");      \n    sreq.params.set(\"distrib\",false);\n\n    sreq.params.remove(ShardParams.SHARDS);\n    sreq.params.remove(ID);\n    sreq.params.remove(\"ids\");\n    sreq.params.set(\"ids\", StrUtils.join(ids, ','));\n    \n    return sreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":["76b65cf789129cacd84e977b8f1538aec29e0281"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["76b65cf789129cacd84e977b8f1538aec29e0281"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["e5fa6615014cd2288fe930f8c8bb726f9504961d"],"01624b85de12fb02335810bdf325124e59040772":["6d2dadc1f5ca8703d8659f4964961f9967935d75"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","76b65cf789129cacd84e977b8f1538aec29e0281"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","76b65cf789129cacd84e977b8f1538aec29e0281"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["01624b85de12fb02335810bdf325124e59040772"],"76b65cf789129cacd84e977b8f1538aec29e0281":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":["6f4c5d3859373c3a74734e85efa122b17514e3e8"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["01624b85de12fb02335810bdf325124e59040772"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","76b65cf789129cacd84e977b8f1538aec29e0281"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":[],"01624b85de12fb02335810bdf325124e59040772":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"76b65cf789129cacd84e977b8f1538aec29e0281":["e5fa6615014cd2288fe930f8c8bb726f9504961d","6d2dadc1f5ca8703d8659f4964961f9967935d75","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6f4c5d3859373c3a74734e85efa122b17514e3e8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}