{"path":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = TEST_NIGHTLY ? 15 : 5;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(\"expected num docs don't match - failures: \" + c.failures, expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(\"found unexpected failures: \" + c.failures, c.failures.isEmpty());\n\n    IndexReader reader = IndexReader.open(c.dir2);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = TEST_NIGHTLY ? 15 : 5;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(\"expected num docs don't match - failures: \" + c.failures, expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(\"found unexpected failures: \" + c.failures, c.failures.isEmpty());\n\n    IndexReader reader = IndexReader.open(c.dir2);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = TEST_NIGHTLY ? 15 : 5;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(\"expected num docs don't match - failures: \" + c.failures, expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(\"found unexpected failures: \" + c.failures, c.failures.isEmpty());\n\n    IndexReader reader = DirectoryReader.open(c.dir2);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = TEST_NIGHTLY ? 15 : 5;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(\"expected num docs don't match - failures: \" + c.failures, expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(\"found unexpected failures: \" + c.failures, c.failures.isEmpty());\n\n    IndexReader reader = IndexReader.open(c.dir2);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = TEST_NIGHTLY ? 15 : 5;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(\"expected num docs don't match - failures: \" + c.failures, expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(\"found unexpected failures: \" + c.failures, c.failures.isEmpty());\n\n    IndexReader reader = DirectoryReader.open(c.dir2);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = TEST_NIGHTLY ? 15 : 5;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(\"expected num docs don't match - failures: \" + c.failures, expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(\"found unexpected failures: \" + c.failures, c.failures.isEmpty());\n\n    IndexReader reader = DirectoryReader.open(c.dir2);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = TEST_NIGHTLY ? 15 : 5;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(\"expected num docs don't match - failures: \" + c.failures, expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(\"found unexpected failures: \" + c.failures, c.failures.isEmpty());\n\n    IndexReader reader = DirectoryReader.open(c.dir2);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = TEST_NIGHTLY ? 15 : 5;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(\"expected num docs don't match - failures: \" + c.failures, expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(\"found unexpected failures: \" + c.failures, c.failures.isEmpty());\n\n    IndexReader reader = DirectoryReader.open(c.dir2);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feb4029567b43f074ed7b6eb8fb126d355075dfd","date":1544812585,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = TEST_NIGHTLY ? 15 : 5;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(\"expected num docs don't match - failures: \" + c.failures, expectedNumDocs, c.writer2.getDocStats().numDocs);\n\n    c.close(true);\n\n    assertTrue(\"found unexpected failures: \" + c.failures, c.failures.isEmpty());\n\n    IndexReader reader = DirectoryReader.open(c.dir2);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = TEST_NIGHTLY ? 15 : 5;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(\"expected num docs don't match - failures: \" + c.failures, expectedNumDocs, c.writer2.numDocs());\n\n    c.close(true);\n\n    assertTrue(\"found unexpected failures: \" + c.failures, c.failures.isEmpty());\n\n    IndexReader reader = DirectoryReader.open(c.dir2);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4208ed8e426ae5f75a41d8b4ae53f4587e413061","date":1580475454,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#testAddIndexesWithThreads().mjava","sourceNew":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = TEST_NIGHTLY ? 15 : 5;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*c.threads.length*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(\"expected num docs don't match - failures: \" + c.failures, expectedNumDocs, c.writer2.getDocStats().numDocs);\n\n    c.close(true);\n\n    assertTrue(\"found unexpected failures: \" + c.failures, c.failures.isEmpty());\n\n    IndexReader reader = DirectoryReader.open(c.dir2);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","sourceOld":"  // LUCENE-1335: test simultaneous addIndexes & commits\n  // from multiple threads\n  public void testAddIndexesWithThreads() throws Throwable {\n\n    final int NUM_ITER = TEST_NIGHTLY ? 15 : 5;\n    final int NUM_COPY = 3;\n    CommitAndAddIndexes c = new CommitAndAddIndexes(NUM_COPY);\n    c.launchThreads(NUM_ITER);\n\n    for(int i=0;i<100;i++)\n      addDoc(c.writer2);\n\n    c.joinThreads();\n\n    int expectedNumDocs = 100+NUM_COPY*(4*NUM_ITER/5)*RunAddIndexesThreads.NUM_THREADS*RunAddIndexesThreads.NUM_INIT_DOCS;\n    assertEquals(\"expected num docs don't match - failures: \" + c.failures, expectedNumDocs, c.writer2.getDocStats().numDocs);\n\n    c.close(true);\n\n    assertTrue(\"found unexpected failures: \" + c.failures, c.failures.isEmpty());\n\n    IndexReader reader = DirectoryReader.open(c.dir2);\n    assertEquals(expectedNumDocs, reader.numDocs());\n    reader.close();\n\n    c.closeDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"]},"commit2Childs":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}