{"path":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(AtomicReader,String).mjava","commits":[{"id":"7e8b89f40d84573f3342b8fee0d8ff5408444c7e","date":1400051147,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(AtomicReader,String).mjava","pathOld":"/dev/null","sourceNew":"    InsaneReader(AtomicReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.isIndexed(), fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), null, fi.getNormType(), null));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ca02c6cbb1ba28fd0bd36bd0f8a2ac84be5f0e71"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(AtomicReader,String).mjava","pathOld":"/dev/null","sourceNew":"    InsaneReader(AtomicReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.isIndexed(), fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), null, fi.getNormType(), null));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(AtomicReader,String).mjava","pathOld":"/dev/null","sourceNew":"    InsaneReader(AtomicReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.isIndexed(), fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), null, fi.getNormType(), null));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ca02c6cbb1ba28fd0bd36bd0f8a2ac84be5f0e71","date":1400675008,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(AtomicReader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(AtomicReader,String).mjava","sourceNew":"    InsaneReader(AtomicReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.isIndexed(), fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), null, fi.getNormType(), -1, null));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","sourceOld":"    InsaneReader(AtomicReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.isIndexed(), fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), null, fi.getNormType(), null));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","bugFix":["7e8b89f40d84573f3342b8fee0d8ff5408444c7e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a656b32c3aa151037a8c52e9b134acc3cbf482bc","date":1400688195,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(AtomicReader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(AtomicReader,String).mjava","sourceNew":"    InsaneReader(AtomicReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.isIndexed(), fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), null, fi.getNormType(), -1, null));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","sourceOld":"    InsaneReader(AtomicReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.isIndexed(), fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), null, fi.getNormType(), null));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(AtomicReader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(AtomicReader,String).mjava","sourceNew":"    InsaneReader(AtomicReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.isIndexed(), fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), null, fi.getNormType(), -1, null));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","sourceOld":"    InsaneReader(AtomicReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.isIndexed(), fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), null, fi.getNormType(), null));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/Insanity.InsaneReader#InsaneReader(AtomicReader,String).mjava","sourceNew":null,"sourceOld":"    InsaneReader(AtomicReader in, String insaneField) {\n      super(in);\n      this.insaneField = insaneField;\n      ArrayList<FieldInfo> filteredInfos = new ArrayList<>();\n      for (FieldInfo fi : in.getFieldInfos()) {\n        if (fi.name.equals(insaneField)) {\n          filteredInfos.add(new FieldInfo(fi.name, fi.isIndexed(), fi.number, fi.hasVectors(), fi.omitsNorms(),\n                                          fi.hasPayloads(), fi.getIndexOptions(), null, fi.getNormType(), -1, null));\n        } else {\n          filteredInfos.add(fi);\n        }\n      }\n      fieldInfos = new FieldInfos(filteredInfos.toArray(new FieldInfo[filteredInfos.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7e8b89f40d84573f3342b8fee0d8ff5408444c7e"],"7e8b89f40d84573f3342b8fee0d8ff5408444c7e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a656b32c3aa151037a8c52e9b134acc3cbf482bc":["93dd449115a9247533e44bab47e8429e5dccbc6d","ca02c6cbb1ba28fd0bd36bd0f8a2ac84be5f0e71"],"b7605579001505896d48b07160075a5c8b8e128e":["56572ec06f1407c066d6b7399413178b33176cd8","ca02c6cbb1ba28fd0bd36bd0f8a2ac84be5f0e71"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["ca02c6cbb1ba28fd0bd36bd0f8a2ac84be5f0e71"],"ca02c6cbb1ba28fd0bd36bd0f8a2ac84be5f0e71":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["a656b32c3aa151037a8c52e9b134acc3cbf482bc","56572ec06f1407c066d6b7399413178b33176cd8","ca02c6cbb1ba28fd0bd36bd0f8a2ac84be5f0e71"],"7e8b89f40d84573f3342b8fee0d8ff5408444c7e":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93dd449115a9247533e44bab47e8429e5dccbc6d","7e8b89f40d84573f3342b8fee0d8ff5408444c7e","56572ec06f1407c066d6b7399413178b33176cd8"],"a656b32c3aa151037a8c52e9b134acc3cbf482bc":[],"b7605579001505896d48b07160075a5c8b8e128e":[],"56572ec06f1407c066d6b7399413178b33176cd8":["b7605579001505896d48b07160075a5c8b8e128e"],"ca02c6cbb1ba28fd0bd36bd0f8a2ac84be5f0e71":["a656b32c3aa151037a8c52e9b134acc3cbf482bc","b7605579001505896d48b07160075a5c8b8e128e","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a656b32c3aa151037a8c52e9b134acc3cbf482bc","b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}