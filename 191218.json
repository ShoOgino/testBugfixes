{"path":"lucene/src/java/org/apache/lucene/util/CharsRef#compareTo(CharsRef).mjava","commits":[{"id":"a1b3a24d5d9b47345473ff564f5cc127a7b526b4","date":1306277076,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/CharsRef#compareTo(CharsRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Signed int order comparison */\n  public int compareTo(CharsRef other) {\n    if (this == other)\n      return 0;\n\n    final char[] aChars = this.chars;\n    int aUpto = this.offset;\n    final char[] bChars = other.chars;\n    int bUpto = other.offset;\n\n    final int aStop = aUpto + Math.min(this.length, other.length);\n\n    while (aUpto < aStop) {\n      int aInt = aChars[aUpto++];\n      int bInt = bChars[bUpto++];\n      if (aInt > bInt) {\n        return 1;\n      } else if (aInt < bInt) {\n        return -1;\n      }\n    }\n\n    // One is a prefix of the other, or, they are equal:\n    return this.length - other.length;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/CharsRef#compareTo(CharsRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Signed int order comparison */\n  public int compareTo(CharsRef other) {\n    if (this == other)\n      return 0;\n\n    final char[] aChars = this.chars;\n    int aUpto = this.offset;\n    final char[] bChars = other.chars;\n    int bUpto = other.offset;\n\n    final int aStop = aUpto + Math.min(this.length, other.length);\n\n    while (aUpto < aStop) {\n      int aInt = aChars[aUpto++];\n      int bInt = bChars[bUpto++];\n      if (aInt > bInt) {\n        return 1;\n      } else if (aInt < bInt) {\n        return -1;\n      }\n    }\n\n    // One is a prefix of the other, or, they are equal:\n    return this.length - other.length;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/CharsRef#compareTo(CharsRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Signed int order comparison */\n  public int compareTo(CharsRef other) {\n    if (this == other)\n      return 0;\n\n    final char[] aChars = this.chars;\n    int aUpto = this.offset;\n    final char[] bChars = other.chars;\n    int bUpto = other.offset;\n\n    final int aStop = aUpto + Math.min(this.length, other.length);\n\n    while (aUpto < aStop) {\n      int aInt = aChars[aUpto++];\n      int bInt = bChars[bUpto++];\n      if (aInt > bInt) {\n        return 1;\n      } else if (aInt < bInt) {\n        return -1;\n      }\n    }\n\n    // One is a prefix of the other, or, they are equal:\n    return this.length - other.length;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/CharsRef#compareTo(CharsRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/CharsRef#compareTo(CharsRef).mjava","sourceNew":"  /** Signed int order comparison */\n  public int compareTo(CharsRef other) {\n    if (this == other)\n      return 0;\n\n    final char[] aChars = this.chars;\n    int aUpto = this.offset;\n    final char[] bChars = other.chars;\n    int bUpto = other.offset;\n\n    final int aStop = aUpto + Math.min(this.length, other.length);\n\n    while (aUpto < aStop) {\n      int aInt = aChars[aUpto++];\n      int bInt = bChars[bUpto++];\n      if (aInt > bInt) {\n        return 1;\n      } else if (aInt < bInt) {\n        return -1;\n      }\n    }\n\n    // One is a prefix of the other, or, they are equal:\n    return this.length - other.length;\n  }\n\n","sourceOld":"  /** Signed int order comparison */\n  public int compareTo(CharsRef other) {\n    if (this == other)\n      return 0;\n\n    final char[] aChars = this.chars;\n    int aUpto = this.offset;\n    final char[] bChars = other.chars;\n    int bUpto = other.offset;\n\n    final int aStop = aUpto + Math.min(this.length, other.length);\n\n    while (aUpto < aStop) {\n      int aInt = aChars[aUpto++];\n      int bInt = bChars[bUpto++];\n      if (aInt > bInt) {\n        return 1;\n      } else if (aInt < bInt) {\n        return -1;\n      }\n    }\n\n    // One is a prefix of the other, or, they are equal:\n    return this.length - other.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"]},"commit2Childs":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a1b3a24d5d9b47345473ff564f5cc127a7b526b4","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","3a119bbc8703c10faa329ec201c654b3a35a1e3e","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}