{"path":"lucene/src/java/org/apache/lucene/index/DirectoryReader#DirectoryReader(Directory,SegmentInfos,SegmentReader[],int[],boolean,boolean,int,CodecProvider,Collection[ReaderFinishedListener]).mjava","commits":[{"id":"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340","date":1295995357,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#DirectoryReader(Directory,SegmentInfos,SegmentReader[],int[],boolean,boolean,int,CodecProvider,Collection[ReaderFinishedListener]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#DirectoryReader(Directory,SegmentInfos,SegmentReader[],int[],boolean,boolean,int,CodecProvider).mjava","sourceNew":"  /** This constructor is only used for {@link #reopen()} */\n  DirectoryReader(Directory directory, SegmentInfos infos, SegmentReader[] oldReaders, int[] oldStarts,\n                  boolean readOnly, boolean doClone, int termInfosIndexDivisor, CodecProvider codecs,\n                  Collection<ReaderFinishedListener> readerFinishedListeners) throws IOException {\n    this.directory = directory;\n    this.readOnly = readOnly;\n    this.segmentInfos = infos;\n    this.termInfosIndexDivisor = termInfosIndexDivisor;\n    this.readerFinishedListeners = readerFinishedListeners;\n\n    if (codecs == null) {\n      this.codecs = CodecProvider.getDefault();\n    } else {\n      this.codecs = codecs;\n    }\n    \n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(oldReaders[i].getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // We should never see a totally new segment during cloning\n          assert !doClone;\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = SegmentReader.get(readOnly, infos.info(i), termInfosIndexDivisor);\n          newReader.readerFinishedListeners = readerFinishedListeners;\n        } else {\n          newReader = newReaders[i].reopenSegment(infos.info(i), doClone, readOnly);\n          assert newReader.readerFinishedListeners == readerFinishedListeners;\n        }\n        if (newReader == newReaders[i]) {\n          // this reader will be shared between the old and the new one,\n          // so we must incRef it\n          readerShared[i] = true;\n          newReader.incRef();\n        } else {\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ignore) {\n                // keep going - we want to clean up as much as possible\n              }\n            }\n          }\n        }\n      }\n    }    \n    \n    // initialize the readers to calculate maxDoc before we try to reuse the old normsCache\n    initialize(newReaders);\n  }\n\n","sourceOld":"  /** This constructor is only used for {@link #reopen()} */\n  DirectoryReader(Directory directory, SegmentInfos infos, SegmentReader[] oldReaders, int[] oldStarts,\n                  boolean readOnly, boolean doClone, int termInfosIndexDivisor, CodecProvider codecs) throws IOException {\n    this.directory = directory;\n    this.readOnly = readOnly;\n    this.segmentInfos = infos;\n    this.termInfosIndexDivisor = termInfosIndexDivisor;\n    if (codecs == null) {\n      this.codecs = CodecProvider.getDefault();\n    } else {\n      this.codecs = codecs;\n    }\n    \n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(oldReaders[i].getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // We should never see a totally new segment during cloning\n          assert !doClone;\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = SegmentReader.get(readOnly, infos.info(i), termInfosIndexDivisor);\n        } else {\n          newReader = newReaders[i].reopenSegment(infos.info(i), doClone, readOnly);\n        }\n        if (newReader == newReaders[i]) {\n          // this reader will be shared between the old and the new one,\n          // so we must incRef it\n          readerShared[i] = true;\n          newReader.incRef();\n        } else {\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ignore) {\n                // keep going - we want to clean up as much as possible\n              }\n            }\n          }\n        }\n      }\n    }    \n    \n    // initialize the readers to calculate maxDoc before we try to reuse the old normsCache\n    initialize(newReaders);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb378f8bdee16a26810e086303a4a86b4930ea12","date":1296410797,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#DirectoryReader(Directory,SegmentInfos,SegmentReader[],int[],boolean,boolean,int,CodecProvider,Collection[ReaderFinishedListener]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#DirectoryReader(Directory,SegmentInfos,SegmentReader[],int[],boolean,boolean,int,CodecProvider,Collection[ReaderFinishedListener]).mjava","sourceNew":"  /** This constructor is only used for {@link #reopen()} */\n  DirectoryReader(Directory directory, SegmentInfos infos, SegmentReader[] oldReaders, int[] oldStarts,\n                  boolean readOnly, boolean doClone, int termInfosIndexDivisor, CodecProvider codecs,\n                  Collection<ReaderFinishedListener> readerFinishedListeners) throws IOException {\n    this.directory = directory;\n    this.readOnly = readOnly;\n    this.segmentInfos = infos;\n    this.termInfosIndexDivisor = termInfosIndexDivisor;\n    this.readerFinishedListeners = readerFinishedListeners;\n    applyAllDeletes = false;\n\n    if (codecs == null) {\n      this.codecs = CodecProvider.getDefault();\n    } else {\n      this.codecs = codecs;\n    }\n    \n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(oldReaders[i].getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // We should never see a totally new segment during cloning\n          assert !doClone;\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = SegmentReader.get(readOnly, infos.info(i), termInfosIndexDivisor);\n          newReader.readerFinishedListeners = readerFinishedListeners;\n        } else {\n          newReader = newReaders[i].reopenSegment(infos.info(i), doClone, readOnly);\n          assert newReader.readerFinishedListeners == readerFinishedListeners;\n        }\n        if (newReader == newReaders[i]) {\n          // this reader will be shared between the old and the new one,\n          // so we must incRef it\n          readerShared[i] = true;\n          newReader.incRef();\n        } else {\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ignore) {\n                // keep going - we want to clean up as much as possible\n              }\n            }\n          }\n        }\n      }\n    }    \n    \n    // initialize the readers to calculate maxDoc before we try to reuse the old normsCache\n    initialize(newReaders);\n  }\n\n","sourceOld":"  /** This constructor is only used for {@link #reopen()} */\n  DirectoryReader(Directory directory, SegmentInfos infos, SegmentReader[] oldReaders, int[] oldStarts,\n                  boolean readOnly, boolean doClone, int termInfosIndexDivisor, CodecProvider codecs,\n                  Collection<ReaderFinishedListener> readerFinishedListeners) throws IOException {\n    this.directory = directory;\n    this.readOnly = readOnly;\n    this.segmentInfos = infos;\n    this.termInfosIndexDivisor = termInfosIndexDivisor;\n    this.readerFinishedListeners = readerFinishedListeners;\n\n    if (codecs == null) {\n      this.codecs = CodecProvider.getDefault();\n    } else {\n      this.codecs = codecs;\n    }\n    \n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(oldReaders[i].getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // We should never see a totally new segment during cloning\n          assert !doClone;\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = SegmentReader.get(readOnly, infos.info(i), termInfosIndexDivisor);\n          newReader.readerFinishedListeners = readerFinishedListeners;\n        } else {\n          newReader = newReaders[i].reopenSegment(infos.info(i), doClone, readOnly);\n          assert newReader.readerFinishedListeners == readerFinishedListeners;\n        }\n        if (newReader == newReaders[i]) {\n          // this reader will be shared between the old and the new one,\n          // so we must incRef it\n          readerShared[i] = true;\n          newReader.incRef();\n        } else {\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ignore) {\n                // keep going - we want to clean up as much as possible\n              }\n            }\n          }\n        }\n      }\n    }    \n    \n    // initialize the readers to calculate maxDoc before we try to reuse the old normsCache\n    initialize(newReaders);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#DirectoryReader(Directory,SegmentInfos,SegmentReader[],int[],boolean,boolean,int,CodecProvider,Collection[ReaderFinishedListener]).mjava","pathOld":"/dev/null","sourceNew":"  /** This constructor is only used for {@link #reopen()} */\n  DirectoryReader(Directory directory, SegmentInfos infos, SegmentReader[] oldReaders, int[] oldStarts,\n                  boolean readOnly, boolean doClone, int termInfosIndexDivisor, CodecProvider codecs,\n                  Collection<ReaderFinishedListener> readerFinishedListeners) throws IOException {\n    this.directory = directory;\n    this.readOnly = readOnly;\n    this.segmentInfos = infos;\n    this.termInfosIndexDivisor = termInfosIndexDivisor;\n    this.readerFinishedListeners = readerFinishedListeners;\n    applyAllDeletes = false;\n\n    if (codecs == null) {\n      this.codecs = CodecProvider.getDefault();\n    } else {\n      this.codecs = codecs;\n    }\n    \n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(oldReaders[i].getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // We should never see a totally new segment during cloning\n          assert !doClone;\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = SegmentReader.get(readOnly, infos.info(i), termInfosIndexDivisor);\n          newReader.readerFinishedListeners = readerFinishedListeners;\n        } else {\n          newReader = newReaders[i].reopenSegment(infos.info(i), doClone, readOnly);\n          assert newReader.readerFinishedListeners == readerFinishedListeners;\n        }\n        if (newReader == newReaders[i]) {\n          // this reader will be shared between the old and the new one,\n          // so we must incRef it\n          readerShared[i] = true;\n          newReader.incRef();\n        } else {\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ignore) {\n                // keep going - we want to clean up as much as possible\n              }\n            }\n          }\n        }\n      }\n    }    \n    \n    // initialize the readers to calculate maxDoc before we try to reuse the old normsCache\n    initialize(newReaders);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#DirectoryReader(Directory,SegmentInfos,SegmentReader[],int[],boolean,boolean,int,CodecProvider,Collection[ReaderFinishedListener]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#DirectoryReader(Directory,SegmentInfos,SegmentReader[],int[],boolean,boolean,int,CodecProvider).mjava","sourceNew":"  /** This constructor is only used for {@link #reopen()} */\n  DirectoryReader(Directory directory, SegmentInfos infos, SegmentReader[] oldReaders, int[] oldStarts,\n                  boolean readOnly, boolean doClone, int termInfosIndexDivisor, CodecProvider codecs,\n                  Collection<ReaderFinishedListener> readerFinishedListeners) throws IOException {\n    this.directory = directory;\n    this.readOnly = readOnly;\n    this.segmentInfos = infos;\n    this.termInfosIndexDivisor = termInfosIndexDivisor;\n    this.readerFinishedListeners = readerFinishedListeners;\n    applyAllDeletes = false;\n\n    if (codecs == null) {\n      this.codecs = CodecProvider.getDefault();\n    } else {\n      this.codecs = codecs;\n    }\n    \n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(oldReaders[i].getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // We should never see a totally new segment during cloning\n          assert !doClone;\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = SegmentReader.get(readOnly, infos.info(i), termInfosIndexDivisor);\n          newReader.readerFinishedListeners = readerFinishedListeners;\n        } else {\n          newReader = newReaders[i].reopenSegment(infos.info(i), doClone, readOnly);\n          assert newReader.readerFinishedListeners == readerFinishedListeners;\n        }\n        if (newReader == newReaders[i]) {\n          // this reader will be shared between the old and the new one,\n          // so we must incRef it\n          readerShared[i] = true;\n          newReader.incRef();\n        } else {\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ignore) {\n                // keep going - we want to clean up as much as possible\n              }\n            }\n          }\n        }\n      }\n    }    \n    \n    // initialize the readers to calculate maxDoc before we try to reuse the old normsCache\n    initialize(newReaders);\n  }\n\n","sourceOld":"  /** This constructor is only used for {@link #reopen()} */\n  DirectoryReader(Directory directory, SegmentInfos infos, SegmentReader[] oldReaders, int[] oldStarts,\n                  boolean readOnly, boolean doClone, int termInfosIndexDivisor, CodecProvider codecs) throws IOException {\n    this.directory = directory;\n    this.readOnly = readOnly;\n    this.segmentInfos = infos;\n    this.termInfosIndexDivisor = termInfosIndexDivisor;\n    if (codecs == null) {\n      this.codecs = CodecProvider.getDefault();\n    } else {\n      this.codecs = codecs;\n    }\n    \n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(oldReaders[i].getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // We should never see a totally new segment during cloning\n          assert !doClone;\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = SegmentReader.get(readOnly, infos.info(i), termInfosIndexDivisor);\n        } else {\n          newReader = newReaders[i].reopenSegment(infos.info(i), doClone, readOnly);\n        }\n        if (newReader == newReaders[i]) {\n          // this reader will be shared between the old and the new one,\n          // so we must incRef it\n          readerShared[i] = true;\n          newReader.incRef();\n        } else {\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ignore) {\n                // keep going - we want to clean up as much as possible\n              }\n            }\n          }\n        }\n      }\n    }    \n    \n    // initialize the readers to calculate maxDoc before we try to reuse the old normsCache\n    initialize(newReaders);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#DirectoryReader(Directory,SegmentInfos,SegmentReader[],int[],boolean,boolean,int,CodecProvider,Collection[ReaderFinishedListener]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#DirectoryReader(Directory,SegmentInfos,SegmentReader[],int[],boolean,boolean,int,CodecProvider,Collection[ReaderFinishedListener]).mjava","sourceNew":"  /** This constructor is only used for {@link #reopen()} */\n  DirectoryReader(Directory directory, SegmentInfos infos, SegmentReader[] oldReaders, int[] oldStarts,\n                  boolean readOnly, boolean doClone, int termInfosIndexDivisor, CodecProvider codecs,\n                  Collection<ReaderFinishedListener> readerFinishedListeners) throws IOException {\n    this.directory = directory;\n    this.readOnly = readOnly;\n    this.segmentInfos = infos;\n    this.termInfosIndexDivisor = termInfosIndexDivisor;\n    this.readerFinishedListeners = readerFinishedListeners;\n    applyAllDeletes = false;\n\n    if (codecs == null) {\n      this.codecs = CodecProvider.getDefault();\n    } else {\n      this.codecs = codecs;\n    }\n    \n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(oldReaders[i].getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // We should never see a totally new segment during cloning\n          assert !doClone;\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = SegmentReader.get(readOnly, infos.info(i), termInfosIndexDivisor, IOContext.READ);\n          newReader.readerFinishedListeners = readerFinishedListeners;\n        } else {\n          newReader = newReaders[i].reopenSegment(infos.info(i), doClone, readOnly);\n          assert newReader.readerFinishedListeners == readerFinishedListeners;\n        }\n        if (newReader == newReaders[i]) {\n          // this reader will be shared between the old and the new one,\n          // so we must incRef it\n          readerShared[i] = true;\n          newReader.incRef();\n        } else {\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ignore) {\n                // keep going - we want to clean up as much as possible\n              }\n            }\n          }\n        }\n      }\n    }    \n    \n    // initialize the readers to calculate maxDoc before we try to reuse the old normsCache\n    initialize(newReaders);\n  }\n\n","sourceOld":"  /** This constructor is only used for {@link #reopen()} */\n  DirectoryReader(Directory directory, SegmentInfos infos, SegmentReader[] oldReaders, int[] oldStarts,\n                  boolean readOnly, boolean doClone, int termInfosIndexDivisor, CodecProvider codecs,\n                  Collection<ReaderFinishedListener> readerFinishedListeners) throws IOException {\n    this.directory = directory;\n    this.readOnly = readOnly;\n    this.segmentInfos = infos;\n    this.termInfosIndexDivisor = termInfosIndexDivisor;\n    this.readerFinishedListeners = readerFinishedListeners;\n    applyAllDeletes = false;\n\n    if (codecs == null) {\n      this.codecs = CodecProvider.getDefault();\n    } else {\n      this.codecs = codecs;\n    }\n    \n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(oldReaders[i].getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // We should never see a totally new segment during cloning\n          assert !doClone;\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = SegmentReader.get(readOnly, infos.info(i), termInfosIndexDivisor);\n          newReader.readerFinishedListeners = readerFinishedListeners;\n        } else {\n          newReader = newReaders[i].reopenSegment(infos.info(i), doClone, readOnly);\n          assert newReader.readerFinishedListeners == readerFinishedListeners;\n        }\n        if (newReader == newReaders[i]) {\n          // this reader will be shared between the old and the new one,\n          // so we must incRef it\n          readerShared[i] = true;\n          newReader.incRef();\n        } else {\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ignore) {\n                // keep going - we want to clean up as much as possible\n              }\n            }\n          }\n        }\n      }\n    }    \n    \n    // initialize the readers to calculate maxDoc before we try to reuse the old normsCache\n    initialize(newReaders);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#DirectoryReader(Directory,SegmentInfos,SegmentReader[],int[],boolean,boolean,int,CodecProvider,Collection[ReaderFinishedListener]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#DirectoryReader(Directory,SegmentInfos,SegmentReader[],int[],boolean,boolean,int,CodecProvider,Collection[ReaderFinishedListener]).mjava","sourceNew":"  /** This constructor is only used for {@link #reopen()} */\n  DirectoryReader(Directory directory, SegmentInfos infos, SegmentReader[] oldReaders, int[] oldStarts,\n                  boolean readOnly, boolean doClone, int termInfosIndexDivisor, CodecProvider codecs,\n                  Collection<ReaderFinishedListener> readerFinishedListeners) throws IOException {\n    this.directory = directory;\n    this.readOnly = readOnly;\n    this.segmentInfos = infos;\n    this.termInfosIndexDivisor = termInfosIndexDivisor;\n    this.readerFinishedListeners = readerFinishedListeners;\n    applyAllDeletes = false;\n\n    if (codecs == null) {\n      this.codecs = CodecProvider.getDefault();\n    } else {\n      this.codecs = codecs;\n    }\n    \n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(oldReaders[i].getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // We should never see a totally new segment during cloning\n          assert !doClone;\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = SegmentReader.get(readOnly, infos.info(i), termInfosIndexDivisor, IOContext.READ);\n          newReader.readerFinishedListeners = readerFinishedListeners;\n        } else {\n          newReader = newReaders[i].reopenSegment(infos.info(i), doClone, readOnly);\n          assert newReader.readerFinishedListeners == readerFinishedListeners;\n        }\n        if (newReader == newReaders[i]) {\n          // this reader will be shared between the old and the new one,\n          // so we must incRef it\n          readerShared[i] = true;\n          newReader.incRef();\n        } else {\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ignore) {\n                // keep going - we want to clean up as much as possible\n              }\n            }\n          }\n        }\n      }\n    }    \n    \n    // initialize the readers to calculate maxDoc before we try to reuse the old normsCache\n    initialize(newReaders);\n  }\n\n","sourceOld":"  /** This constructor is only used for {@link #reopen()} */\n  DirectoryReader(Directory directory, SegmentInfos infos, SegmentReader[] oldReaders, int[] oldStarts,\n                  boolean readOnly, boolean doClone, int termInfosIndexDivisor, CodecProvider codecs,\n                  Collection<ReaderFinishedListener> readerFinishedListeners) throws IOException {\n    this.directory = directory;\n    this.readOnly = readOnly;\n    this.segmentInfos = infos;\n    this.termInfosIndexDivisor = termInfosIndexDivisor;\n    this.readerFinishedListeners = readerFinishedListeners;\n    applyAllDeletes = false;\n\n    if (codecs == null) {\n      this.codecs = CodecProvider.getDefault();\n    } else {\n      this.codecs = codecs;\n    }\n    \n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(oldReaders[i].getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // We should never see a totally new segment during cloning\n          assert !doClone;\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = SegmentReader.get(readOnly, infos.info(i), termInfosIndexDivisor);\n          newReader.readerFinishedListeners = readerFinishedListeners;\n        } else {\n          newReader = newReaders[i].reopenSegment(infos.info(i), doClone, readOnly);\n          assert newReader.readerFinishedListeners == readerFinishedListeners;\n        }\n        if (newReader == newReaders[i]) {\n          // this reader will be shared between the old and the new one,\n          // so we must incRef it\n          readerShared[i] = true;\n          newReader.incRef();\n        } else {\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ignore) {\n                // keep going - we want to clean up as much as possible\n              }\n            }\n          }\n        }\n      }\n    }    \n    \n    // initialize the readers to calculate maxDoc before we try to reuse the old normsCache\n    initialize(newReaders);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#DirectoryReader(Directory,SegmentInfos,SegmentReader[],int[],boolean,boolean,int,CodecProvider,Collection[ReaderFinishedListener]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#DirectoryReader(Directory,SegmentInfos,SegmentReader[],int[],boolean,boolean,int,CodecProvider,Collection[ReaderFinishedListener]).mjava","sourceNew":"  /** This constructor is only used for {@link #reopen()} */\n  DirectoryReader(Directory directory, SegmentInfos infos, SegmentReader[] oldReaders, int[] oldStarts,\n                  boolean readOnly, boolean doClone, int termInfosIndexDivisor, CodecProvider codecs,\n                  Collection<ReaderFinishedListener> readerFinishedListeners) throws IOException {\n    this.directory = directory;\n    this.readOnly = readOnly;\n    this.segmentInfos = infos;\n    this.termInfosIndexDivisor = termInfosIndexDivisor;\n    this.readerFinishedListeners = readerFinishedListeners;\n    applyAllDeletes = false;\n\n    if (codecs == null) {\n      this.codecs = CodecProvider.getDefault();\n    } else {\n      this.codecs = codecs;\n    }\n    \n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(oldReaders[i].getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // We should never see a totally new segment during cloning\n          assert !doClone;\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = SegmentReader.get(readOnly, infos.info(i), termInfosIndexDivisor, IOContext.READ);\n          newReader.readerFinishedListeners = readerFinishedListeners;\n        } else {\n          newReader = newReaders[i].reopenSegment(infos.info(i), doClone, readOnly);\n          assert newReader.readerFinishedListeners == readerFinishedListeners;\n        }\n        if (newReader == newReaders[i]) {\n          // this reader will be shared between the old and the new one,\n          // so we must incRef it\n          readerShared[i] = true;\n          newReader.incRef();\n        } else {\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ignore) {\n                // keep going - we want to clean up as much as possible\n              }\n            }\n          }\n        }\n      }\n    }    \n    \n    // initialize the readers to calculate maxDoc before we try to reuse the old normsCache\n    initialize(newReaders);\n  }\n\n","sourceOld":"  /** This constructor is only used for {@link #reopen()} */\n  DirectoryReader(Directory directory, SegmentInfos infos, SegmentReader[] oldReaders, int[] oldStarts,\n                  boolean readOnly, boolean doClone, int termInfosIndexDivisor, CodecProvider codecs,\n                  Collection<ReaderFinishedListener> readerFinishedListeners) throws IOException {\n    this.directory = directory;\n    this.readOnly = readOnly;\n    this.segmentInfos = infos;\n    this.termInfosIndexDivisor = termInfosIndexDivisor;\n    this.readerFinishedListeners = readerFinishedListeners;\n    applyAllDeletes = false;\n\n    if (codecs == null) {\n      this.codecs = CodecProvider.getDefault();\n    } else {\n      this.codecs = codecs;\n    }\n    \n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(oldReaders[i].getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // We should never see a totally new segment during cloning\n          assert !doClone;\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = SegmentReader.get(readOnly, infos.info(i), termInfosIndexDivisor);\n          newReader.readerFinishedListeners = readerFinishedListeners;\n        } else {\n          newReader = newReaders[i].reopenSegment(infos.info(i), doClone, readOnly);\n          assert newReader.readerFinishedListeners == readerFinishedListeners;\n        }\n        if (newReader == newReaders[i]) {\n          // this reader will be shared between the old and the new one,\n          // so we must incRef it\n          readerShared[i] = true;\n          newReader.incRef();\n        } else {\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ignore) {\n                // keep going - we want to clean up as much as possible\n              }\n            }\n          }\n        }\n      }\n    }    \n    \n    // initialize the readers to calculate maxDoc before we try to reuse the old normsCache\n    initialize(newReaders);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#DirectoryReader(Directory,SegmentInfos,SegmentReader[],boolean,boolean,int,CodecProvider,Collection[ReaderFinishedListener]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#DirectoryReader(Directory,SegmentInfos,SegmentReader[],int[],boolean,boolean,int,CodecProvider,Collection[ReaderFinishedListener]).mjava","sourceNew":"  /** This constructor is only used for {@link #doOpenIfChanged()} */\n  DirectoryReader(Directory directory, SegmentInfos infos, SegmentReader[] oldReaders,\n                  boolean readOnly, boolean doClone, int termInfosIndexDivisor, CodecProvider codecs,\n                  Collection<ReaderFinishedListener> readerFinishedListeners) throws IOException {\n    this.directory = directory;\n    this.readOnly = readOnly;\n    this.segmentInfos = infos;\n    this.termInfosIndexDivisor = termInfosIndexDivisor;\n    this.readerFinishedListeners = readerFinishedListeners;\n    applyAllDeletes = false;\n\n    if (codecs == null) {\n      this.codecs = CodecProvider.getDefault();\n    } else {\n      this.codecs = codecs;\n    }\n    \n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(oldReaders[i].getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // We should never see a totally new segment during cloning\n          assert !doClone;\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = SegmentReader.get(readOnly, infos.info(i), termInfosIndexDivisor, IOContext.READ);\n          newReader.readerFinishedListeners = readerFinishedListeners;\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          newReader = newReaders[i].reopenSegment(infos.info(i), doClone, readOnly);\n          if (newReader == null) {\n            // this reader will be shared between the old and the new one,\n            // so we must incRef it\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            assert newReader.readerFinishedListeners == readerFinishedListeners;\n            readerShared[i] = false;\n            // Steal ref returned to us by reopenSegment:\n            newReaders[i] = newReader;\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ignore) {\n                // keep going - we want to clean up as much as possible\n              }\n            }\n          }\n        }\n      }\n    }    \n    \n    // initialize the readers to calculate maxDoc before we try to reuse the old normsCache\n    initialize(newReaders);\n  }\n\n","sourceOld":"  /** This constructor is only used for {@link #reopen()} */\n  DirectoryReader(Directory directory, SegmentInfos infos, SegmentReader[] oldReaders, int[] oldStarts,\n                  boolean readOnly, boolean doClone, int termInfosIndexDivisor, CodecProvider codecs,\n                  Collection<ReaderFinishedListener> readerFinishedListeners) throws IOException {\n    this.directory = directory;\n    this.readOnly = readOnly;\n    this.segmentInfos = infos;\n    this.termInfosIndexDivisor = termInfosIndexDivisor;\n    this.readerFinishedListeners = readerFinishedListeners;\n    applyAllDeletes = false;\n\n    if (codecs == null) {\n      this.codecs = CodecProvider.getDefault();\n    } else {\n      this.codecs = codecs;\n    }\n    \n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(oldReaders[i].getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // We should never see a totally new segment during cloning\n          assert !doClone;\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = SegmentReader.get(readOnly, infos.info(i), termInfosIndexDivisor, IOContext.READ);\n          newReader.readerFinishedListeners = readerFinishedListeners;\n        } else {\n          newReader = newReaders[i].reopenSegment(infos.info(i), doClone, readOnly);\n          assert newReader.readerFinishedListeners == readerFinishedListeners;\n        }\n        if (newReader == newReaders[i]) {\n          // this reader will be shared between the old and the new one,\n          // so we must incRef it\n          readerShared[i] = true;\n          newReader.incRef();\n        } else {\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ignore) {\n                // keep going - we want to clean up as much as possible\n              }\n            }\n          }\n        }\n      }\n    }    \n    \n    // initialize the readers to calculate maxDoc before we try to reuse the old normsCache\n    initialize(newReaders);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eb378f8bdee16a26810e086303a4a86b4930ea12"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["eb378f8bdee16a26810e086303a4a86b4930ea12"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["eb378f8bdee16a26810e086303a4a86b4930ea12","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["eb378f8bdee16a26810e086303a4a86b4930ea12","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"eb378f8bdee16a26810e086303a4a86b4930ea12":["cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eb378f8bdee16a26810e086303a4a86b4930ea12"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a8259c922a83abc544609227a60d48e5ee93e7e"]},"commit2Childs":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340":["eb378f8bdee16a26810e086303a4a86b4930ea12"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["8a8259c922a83abc544609227a60d48e5ee93e7e","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"eb378f8bdee16a26810e086303a4a86b4930ea12":["29ef99d61cda9641b6250bf9567329a6e65f901d","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","5d004d0e0b3f65bb40da76d476d659d7888270e8","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}