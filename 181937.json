{"path":"solr/core/src/test/org/apache/solr/cloud/MetricsHistoryIntegrationTest#setupCluster().mjava","commits":[{"id":"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","date":1527582939,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MetricsHistoryIntegrationTest#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    boolean simulated = random().nextBoolean();\n    if (simulated) {\n      cloudManager = SimCloudManager.createCluster(1, TimeSource.get(\"simTime:50\"));\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n    }\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (!simulated) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      solrClient = cluster.getSolrClient();\n    }\n    timeSource = cloudManager.getTimeSource();\n    // create .system\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 1)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, CollectionAdminParams.SYSTEM_COLL,\n        30, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 1));\n    solrClient.query(CollectionAdminParams.SYSTEM_COLL, params(CommonParams.Q, \"*:*\"));\n    // sleep a little to allow the handler to collect some metrics\n    timeSource.sleep(90000);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MetricsHistoryIntegrationTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MetricsHistoryIntegrationTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    boolean simulated = TEST_NIGHTLY ? random().nextBoolean() : true;\n    if (simulated) {\n      cloudManager = SimCloudManager.createCluster(1, TimeSource.get(\"simTime:50\"));\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n    }\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (!simulated) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      solrClient = cluster.getSolrClient();\n    }\n    timeSource = cloudManager.getTimeSource();\n    // create .system\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 1)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, CollectionAdminParams.SYSTEM_COLL,\n        30, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 1));\n    solrClient.query(CollectionAdminParams.SYSTEM_COLL, params(CommonParams.Q, \"*:*\"));\n    // sleep a little to allow the handler to collect some metrics\n    if (simulated) {\n      timeSource.sleep(90000);\n    } else {\n      timeSource.sleep(100000);\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    boolean simulated = random().nextBoolean();\n    if (simulated) {\n      cloudManager = SimCloudManager.createCluster(1, TimeSource.get(\"simTime:50\"));\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n    }\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (!simulated) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      solrClient = cluster.getSolrClient();\n    }\n    timeSource = cloudManager.getTimeSource();\n    // create .system\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 1)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, CollectionAdminParams.SYSTEM_COLL,\n        30, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 1));\n    solrClient.query(CollectionAdminParams.SYSTEM_COLL, params(CommonParams.Q, \"*:*\"));\n    // sleep a little to allow the handler to collect some metrics\n    timeSource.sleep(90000);\n  }\n\n","bugFix":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MetricsHistoryIntegrationTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MetricsHistoryIntegrationTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    boolean simulated = TEST_NIGHTLY ? random().nextBoolean() : true;\n    if (simulated) {\n      cloudManager = SimCloudManager.createCluster(1, TimeSource.get(\"simTime:50\"));\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n    }\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (!simulated) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      solrClient = cluster.getSolrClient();\n    }\n    timeSource = cloudManager.getTimeSource();\n    // create .system\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 1)\n        .process(solrClient);\n    CloudUtil.waitForState(cloudManager, CollectionAdminParams.SYSTEM_COLL,\n        30, TimeUnit.SECONDS, CloudUtil.clusterShape(1, 1));\n    solrClient.query(CollectionAdminParams.SYSTEM_COLL, params(CommonParams.Q, \"*:*\"));\n    // sleep a little to allow the handler to collect some metrics\n    if (simulated) {\n      timeSource.sleep(90000);\n    } else {\n      timeSource.sleep(100000);\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    boolean simulated = TEST_NIGHTLY ? random().nextBoolean() : true;\n    if (simulated) {\n      cloudManager = SimCloudManager.createCluster(1, TimeSource.get(\"simTime:50\"));\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n    }\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (!simulated) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      solrClient = cluster.getSolrClient();\n    }\n    timeSource = cloudManager.getTimeSource();\n    // create .system\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 1)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, CollectionAdminParams.SYSTEM_COLL,\n        30, TimeUnit.SECONDS, CloudTestUtils.clusterShape(1, 1));\n    solrClient.query(CollectionAdminParams.SYSTEM_COLL, params(CommonParams.Q, \"*:*\"));\n    // sleep a little to allow the handler to collect some metrics\n    if (simulated) {\n      timeSource.sleep(90000);\n    } else {\n      timeSource.sleep(100000);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MetricsHistoryIntegrationTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MetricsHistoryIntegrationTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    solrClient = cluster.getSolrClient();\n    timeSource = cloudManager.getTimeSource();\n    // create .system\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 1)\n        .process(solrClient);\n    CloudUtil.waitForState(cloudManager, CollectionAdminParams.SYSTEM_COLL,\n        30, TimeUnit.SECONDS, CloudUtil.clusterShape(1, 1));\n    solrClient.query(CollectionAdminParams.SYSTEM_COLL, params(CommonParams.Q, \"*:*\"));\n    // sleep until next generation of kids grow up to allow the handler to collect some metrics\n    timeSource.sleep(100000);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    boolean simulated = TEST_NIGHTLY ? random().nextBoolean() : true;\n    if (simulated) {\n      cloudManager = SimCloudManager.createCluster(1, TimeSource.get(\"simTime:50\"));\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n    }\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (!simulated) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      solrClient = cluster.getSolrClient();\n    }\n    timeSource = cloudManager.getTimeSource();\n    // create .system\n    CollectionAdminRequest.createCollection(CollectionAdminParams.SYSTEM_COLL, null, 1, 1)\n        .process(solrClient);\n    CloudUtil.waitForState(cloudManager, CollectionAdminParams.SYSTEM_COLL,\n        30, TimeUnit.SECONDS, CloudUtil.clusterShape(1, 1));\n    solrClient.query(CollectionAdminParams.SYSTEM_COLL, params(CommonParams.Q, \"*:*\"));\n    // sleep a little to allow the handler to collect some metrics\n    if (simulated) {\n      timeSource.sleep(90000);\n    } else {\n      timeSource.sleep(100000);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}