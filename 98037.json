{"path":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#addValue(int,BytesRef).mjava","commits":[{"id":"f44e5a6148908e8393ddd1c2d8b810a385a743c1","date":1352400727,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#addValue(int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  public void addValue(int docID, BytesRef value) {\n    final int oldBytesUsed = bytesUsed;\n    if (value == null) {\n      // nocommit improve message\n      throw new IllegalArgumentException(\"null binaryValue not allowed (field=\" + fieldInfo.name + \")\");\n    }\n    mergeLength(value.length);\n    // Fill in any holes:\n    while(pending.size() < docID) {\n      pending.add(BytesRef.EMPTY_BYTES);\n      bytesUsed += RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      mergeLength(0);\n    }\n    byte[] bytes = new byte[value.length];\n    System.arraycopy(value.bytes, value.offset, bytes, 0, value.length);\n    pending.add(bytes);\n\n    // estimate 25% overhead for ArrayList:\n    bytesUsed += (int) (bytes.length + RamUsageEstimator.NUM_BYTES_ARRAY_HEADER + (RamUsageEstimator.NUM_BYTES_OBJECT_REF * 1.25));\n    iwBytesUsed.addAndGet(bytesUsed - oldBytesUsed);\n    //System.out.println(\"ADD: \" + value);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71df1db89d3a713f022b58111aafd14a4b352da0","date":1352479848,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#addValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#addValue(int,BytesRef).mjava","sourceNew":"  public void addValue(int docID, BytesRef value) {\n    final int oldBytesUsed = bytesUsed;\n    if (value == null) {\n      // nocommit improve message\n      throw new IllegalArgumentException(\"null binaryValue not allowed (field=\" + fieldInfo.name + \")\");\n    }\n    mergeLength(value.length);\n    // Fill in any holes:\n    while(pending.size() < docID) {\n      pending.add(BytesRef.EMPTY_BYTES);\n      bytesUsed += (int) (RamUsageEstimator.NUM_BYTES_OBJECT_REF * 1.25);\n      mergeLength(0);\n    }\n    byte[] bytes = new byte[value.length];\n    System.arraycopy(value.bytes, value.offset, bytes, 0, value.length);\n    pending.add(bytes);\n\n    // estimate 25% overhead for ArrayList:\n    bytesUsed += (int) (bytes.length + RamUsageEstimator.NUM_BYTES_ARRAY_HEADER + (RamUsageEstimator.NUM_BYTES_OBJECT_REF * 1.25));\n    iwBytesUsed.addAndGet(bytesUsed - oldBytesUsed);\n    //System.out.println(\"ADD: \" + value);\n  }\n\n","sourceOld":"  public void addValue(int docID, BytesRef value) {\n    final int oldBytesUsed = bytesUsed;\n    if (value == null) {\n      // nocommit improve message\n      throw new IllegalArgumentException(\"null binaryValue not allowed (field=\" + fieldInfo.name + \")\");\n    }\n    mergeLength(value.length);\n    // Fill in any holes:\n    while(pending.size() < docID) {\n      pending.add(BytesRef.EMPTY_BYTES);\n      bytesUsed += RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      mergeLength(0);\n    }\n    byte[] bytes = new byte[value.length];\n    System.arraycopy(value.bytes, value.offset, bytes, 0, value.length);\n    pending.add(bytes);\n\n    // estimate 25% overhead for ArrayList:\n    bytesUsed += (int) (bytes.length + RamUsageEstimator.NUM_BYTES_ARRAY_HEADER + (RamUsageEstimator.NUM_BYTES_OBJECT_REF * 1.25));\n    iwBytesUsed.addAndGet(bytesUsed - oldBytesUsed);\n    //System.out.println(\"ADD: \" + value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce73f585d17f53055185a19beb46db23d76e0ad9","date":1353077110,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#addValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#addValue(int,BytesRef).mjava","sourceNew":"  public void addValue(int docID, BytesRef value) {\n    if (value == null) {\n      // nocommit improve message\n      throw new IllegalArgumentException(\"null binaryValue not allowed (field=\" + fieldInfo.name + \")\");\n    }\n    mergeLength(value.length);\n    \n    // Fill in any holes:\n    while(addeValues < docID) {\n      addeValues++;\n      bytesRefArray.append(emptyBytesRef);\n      mergeLength(0);\n    }\n    addeValues++;\n    bytesRefArray.append(value);\n  }\n\n","sourceOld":"  public void addValue(int docID, BytesRef value) {\n    final int oldBytesUsed = bytesUsed;\n    if (value == null) {\n      // nocommit improve message\n      throw new IllegalArgumentException(\"null binaryValue not allowed (field=\" + fieldInfo.name + \")\");\n    }\n    mergeLength(value.length);\n    // Fill in any holes:\n    while(pending.size() < docID) {\n      pending.add(BytesRef.EMPTY_BYTES);\n      bytesUsed += (int) (RamUsageEstimator.NUM_BYTES_OBJECT_REF * 1.25);\n      mergeLength(0);\n    }\n    byte[] bytes = new byte[value.length];\n    System.arraycopy(value.bytes, value.offset, bytes, 0, value.length);\n    pending.add(bytes);\n\n    // estimate 25% overhead for ArrayList:\n    bytesUsed += (int) (bytes.length + RamUsageEstimator.NUM_BYTES_ARRAY_HEADER + (RamUsageEstimator.NUM_BYTES_OBJECT_REF * 1.25));\n    iwBytesUsed.addAndGet(bytesUsed - oldBytesUsed);\n    //System.out.println(\"ADD: \" + value);\n  }\n\n","bugFix":null,"bugIntro":["c024a3e8fec0a081cbf9539845db12f0dc84d029"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ed65f3455364344c6d2ff76ea5421aac754eae7","date":1353261762,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#addValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#addValue(int,BytesRef).mjava","sourceNew":"  public void addValue(int docID, BytesRef value) {\n    if (value == null) {\n      // nocommit improve message\n      throw new IllegalArgumentException(\"null binaryValue not allowed (field=\" + fieldInfo.name + \")\");\n    }\n    mergeLength(value.length);\n    \n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      bytesRefArray.append(emptyBytesRef);\n      mergeLength(0);\n    }\n    addedValues++;\n    bytesRefArray.append(value);\n  }\n\n","sourceOld":"  public void addValue(int docID, BytesRef value) {\n    if (value == null) {\n      // nocommit improve message\n      throw new IllegalArgumentException(\"null binaryValue not allowed (field=\" + fieldInfo.name + \")\");\n    }\n    mergeLength(value.length);\n    \n    // Fill in any holes:\n    while(addeValues < docID) {\n      addeValues++;\n      bytesRefArray.append(emptyBytesRef);\n      mergeLength(0);\n    }\n    addeValues++;\n    bytesRefArray.append(value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f37ad9574eb102efe282ecda793ea5ebdf5d2fb","date":1353263968,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#addValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#addValue(int,BytesRef).mjava","sourceNew":"  public void addValue(int docID, BytesRef value) {\n    if (docID < addedValues) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      // nocommit improve message\n      throw new IllegalArgumentException(\"null binaryValue not allowed (field=\" + fieldInfo.name + \")\");\n    }\n    mergeLength(value.length);\n    \n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      bytesRefArray.append(emptyBytesRef);\n      mergeLength(0);\n    }\n    addedValues++;\n    bytesRefArray.append(value);\n  }\n\n","sourceOld":"  public void addValue(int docID, BytesRef value) {\n    if (value == null) {\n      // nocommit improve message\n      throw new IllegalArgumentException(\"null binaryValue not allowed (field=\" + fieldInfo.name + \")\");\n    }\n    mergeLength(value.length);\n    \n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      bytesRefArray.append(emptyBytesRef);\n      mergeLength(0);\n    }\n    addedValues++;\n    bytesRefArray.append(value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"746e3645169db50c8f53252b30d6bc9ac21dea7c","date":1357597773,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#addValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#addValue(int,BytesRef).mjava","sourceNew":"  public void addValue(int docID, BytesRef value) {\n    if (docID < addedValues) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      // nocommit improve message\n      throw new IllegalArgumentException(\"null binaryValue not allowed (field=\" + fieldInfo.name + \")\");\n    }\n    \n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      bytesRefArray.append(emptyBytesRef);\n    }\n    addedValues++;\n    bytesRefArray.append(value);\n  }\n\n","sourceOld":"  public void addValue(int docID, BytesRef value) {\n    if (docID < addedValues) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      // nocommit improve message\n      throw new IllegalArgumentException(\"null binaryValue not allowed (field=\" + fieldInfo.name + \")\");\n    }\n    mergeLength(value.length);\n    \n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      bytesRefArray.append(emptyBytesRef);\n      mergeLength(0);\n    }\n    addedValues++;\n    bytesRefArray.append(value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"423d89a2b3cc419b647c07c2b3fdbc54311d07f9","date":1358836612,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#addValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#addValue(int,BytesRef).mjava","sourceNew":"  public void addValue(int docID, BytesRef value) {\n    if (docID < addedValues) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      // nocommit improve message\n      throw new IllegalArgumentException(\"null binaryValue not allowed (field=\" + fieldInfo.name + \")\");\n    }\n    if (value.length > (BYTE_BLOCK_SIZE - 2)) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + (BYTE_BLOCK_SIZE - 2));\n    }\n    \n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      bytesRefArray.append(emptyBytesRef);\n    }\n    addedValues++;\n    bytesRefArray.append(value);\n  }\n\n","sourceOld":"  public void addValue(int docID, BytesRef value) {\n    if (docID < addedValues) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      // nocommit improve message\n      throw new IllegalArgumentException(\"null binaryValue not allowed (field=\" + fieldInfo.name + \")\");\n    }\n    \n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      bytesRefArray.append(emptyBytesRef);\n    }\n    addedValues++;\n    bytesRefArray.append(value);\n  }\n\n","bugFix":null,"bugIntro":["c024a3e8fec0a081cbf9539845db12f0dc84d029"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e5d36d3b999ce76a1e80788e5d243f513c69d50","date":1359044508,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#addValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#addValue(int,BytesRef).mjava","sourceNew":"  public void addValue(int docID, BytesRef value) {\n    if (docID < addedValues) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + fieldInfo.name + \"\\\": null value not allowed\");\n    }\n    if (value.length > (BYTE_BLOCK_SIZE - 2)) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + (BYTE_BLOCK_SIZE - 2));\n    }\n    \n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      bytesRefArray.append(emptyBytesRef);\n    }\n    addedValues++;\n    bytesRefArray.append(value);\n  }\n\n","sourceOld":"  public void addValue(int docID, BytesRef value) {\n    if (docID < addedValues) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      // nocommit improve message\n      throw new IllegalArgumentException(\"null binaryValue not allowed (field=\" + fieldInfo.name + \")\");\n    }\n    if (value.length > (BYTE_BLOCK_SIZE - 2)) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + (BYTE_BLOCK_SIZE - 2));\n    }\n    \n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      bytesRefArray.append(emptyBytesRef);\n    }\n    addedValues++;\n    bytesRefArray.append(value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ce73f585d17f53055185a19beb46db23d76e0ad9":["71df1db89d3a713f022b58111aafd14a4b352da0"],"746e3645169db50c8f53252b30d6bc9ac21dea7c":["0f37ad9574eb102efe282ecda793ea5ebdf5d2fb"],"2e5d36d3b999ce76a1e80788e5d243f513c69d50":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"0f37ad9574eb102efe282ecda793ea5ebdf5d2fb":["1ed65f3455364344c6d2ff76ea5421aac754eae7"],"1ed65f3455364344c6d2ff76ea5421aac754eae7":["ce73f585d17f53055185a19beb46db23d76e0ad9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71df1db89d3a713f022b58111aafd14a4b352da0":["f44e5a6148908e8393ddd1c2d8b810a385a743c1"],"f44e5a6148908e8393ddd1c2d8b810a385a743c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["746e3645169db50c8f53252b30d6bc9ac21dea7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ce73f585d17f53055185a19beb46db23d76e0ad9":["1ed65f3455364344c6d2ff76ea5421aac754eae7"],"746e3645169db50c8f53252b30d6bc9ac21dea7c":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"0f37ad9574eb102efe282ecda793ea5ebdf5d2fb":["746e3645169db50c8f53252b30d6bc9ac21dea7c"],"2e5d36d3b999ce76a1e80788e5d243f513c69d50":[],"1ed65f3455364344c6d2ff76ea5421aac754eae7":["0f37ad9574eb102efe282ecda793ea5ebdf5d2fb"],"71df1db89d3a713f022b58111aafd14a4b352da0":["ce73f585d17f53055185a19beb46db23d76e0ad9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f44e5a6148908e8393ddd1c2d8b810a385a743c1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f44e5a6148908e8393ddd1c2d8b810a385a743c1":["71df1db89d3a713f022b58111aafd14a4b352da0"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["2e5d36d3b999ce76a1e80788e5d243f513c69d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2e5d36d3b999ce76a1e80788e5d243f513c69d50","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}