{"path":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesAndDeletes().mjava","commits":[{"id":"06805da26538ed636bd89b10c2699cc3834032ae","date":1395132972,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesAndDeletes().mjava","pathOld":"/dev/null","sourceNew":"  public void testUpdatesAndDeletes() throws Exception {\n    // create an index with a segment with only deletes, a segment with both\n    // deletes and updates and a segment with only updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges for this test\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 6; i++) {\n      writer.addDocument(doc(i));\n      if (i % 2 == 1) {\n        writer.commit(); // create 2-docs segments\n      }\n    }\n    \n    // delete doc-1 and doc-2\n    writer.deleteDocuments(new Term(\"id\", \"doc-1\"), new Term(\"id\", \"doc-2\")); // 1st and 2nd segments\n    \n    // update docs 3 and 5\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-3\"), \"val\", toBytes(17L));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-5\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.close();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer, true);\n      writer.close();\n    }\n    \n    AtomicReader slow = SlowCompositeReaderWrapper.wrap(reader);\n    \n    Bits liveDocs = slow.getLiveDocs();\n    boolean[] expectedLiveDocs = new boolean[] { true, false, false, true, true, true };\n    for (int i = 0; i < expectedLiveDocs.length; i++) {\n      assertEquals(expectedLiveDocs[i], liveDocs.get(i));\n    }\n    \n    long[] expectedValues = new long[] { 1, 2, 3, 17, 5, 17};\n    BinaryDocValues bdv = slow.getBinaryDocValues(\"val\");\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < expectedValues.length; i++) {\n      assertEquals(expectedValues[i], getValue(bdv, i, scratch));\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesAndDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesAndDeletes().mjava","sourceNew":"  public void testUpdatesAndDeletes() throws Exception {\n    // create an index with a segment with only deletes, a segment with both\n    // deletes and updates and a segment with only updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges for this test\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 6; i++) {\n      writer.addDocument(doc(i));\n      if (i % 2 == 1) {\n        writer.commit(); // create 2-docs segments\n      }\n    }\n    \n    // delete doc-1 and doc-2\n    writer.deleteDocuments(new Term(\"id\", \"doc-1\"), new Term(\"id\", \"doc-2\")); // 1st and 2nd segments\n    \n    // update docs 3 and 5\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-3\"), \"val\", toBytes(17L));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-5\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.shutdown();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer, true);\n      writer.shutdown();\n    }\n    \n    AtomicReader slow = SlowCompositeReaderWrapper.wrap(reader);\n    \n    Bits liveDocs = slow.getLiveDocs();\n    boolean[] expectedLiveDocs = new boolean[] { true, false, false, true, true, true };\n    for (int i = 0; i < expectedLiveDocs.length; i++) {\n      assertEquals(expectedLiveDocs[i], liveDocs.get(i));\n    }\n    \n    long[] expectedValues = new long[] { 1, 2, 3, 17, 5, 17};\n    BinaryDocValues bdv = slow.getBinaryDocValues(\"val\");\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < expectedValues.length; i++) {\n      assertEquals(expectedValues[i], getValue(bdv, i, scratch));\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdatesAndDeletes() throws Exception {\n    // create an index with a segment with only deletes, a segment with both\n    // deletes and updates and a segment with only updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges for this test\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 6; i++) {\n      writer.addDocument(doc(i));\n      if (i % 2 == 1) {\n        writer.commit(); // create 2-docs segments\n      }\n    }\n    \n    // delete doc-1 and doc-2\n    writer.deleteDocuments(new Term(\"id\", \"doc-1\"), new Term(\"id\", \"doc-2\")); // 1st and 2nd segments\n    \n    // update docs 3 and 5\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-3\"), \"val\", toBytes(17L));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-5\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.close();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer, true);\n      writer.close();\n    }\n    \n    AtomicReader slow = SlowCompositeReaderWrapper.wrap(reader);\n    \n    Bits liveDocs = slow.getLiveDocs();\n    boolean[] expectedLiveDocs = new boolean[] { true, false, false, true, true, true };\n    for (int i = 0; i < expectedLiveDocs.length; i++) {\n      assertEquals(expectedLiveDocs[i], liveDocs.get(i));\n    }\n    \n    long[] expectedValues = new long[] { 1, 2, 3, 17, 5, 17};\n    BinaryDocValues bdv = slow.getBinaryDocValues(\"val\");\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < expectedValues.length; i++) {\n      assertEquals(expectedValues[i], getValue(bdv, i, scratch));\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e2fb55c0777755badd3b46d8140f3d4301febed","date":1398881584,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesAndDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesAndDeletes().mjava","sourceNew":"  public void testUpdatesAndDeletes() throws Exception {\n    // create an index with a segment with only deletes, a segment with both\n    // deletes and updates and a segment with only updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // prevent merges for this test\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 6; i++) {\n      writer.addDocument(doc(i));\n      if (i % 2 == 1) {\n        writer.commit(); // create 2-docs segments\n      }\n    }\n    \n    // delete doc-1 and doc-2\n    writer.deleteDocuments(new Term(\"id\", \"doc-1\"), new Term(\"id\", \"doc-2\")); // 1st and 2nd segments\n    \n    // update docs 3 and 5\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-3\"), \"val\", toBytes(17L));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-5\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.shutdown();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer, true);\n      writer.shutdown();\n    }\n    \n    AtomicReader slow = SlowCompositeReaderWrapper.wrap(reader);\n    \n    Bits liveDocs = slow.getLiveDocs();\n    boolean[] expectedLiveDocs = new boolean[] { true, false, false, true, true, true };\n    for (int i = 0; i < expectedLiveDocs.length; i++) {\n      assertEquals(expectedLiveDocs[i], liveDocs.get(i));\n    }\n    \n    long[] expectedValues = new long[] { 1, 2, 3, 17, 5, 17};\n    BinaryDocValues bdv = slow.getBinaryDocValues(\"val\");\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < expectedValues.length; i++) {\n      assertEquals(expectedValues[i], getValue(bdv, i, scratch));\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdatesAndDeletes() throws Exception {\n    // create an index with a segment with only deletes, a segment with both\n    // deletes and updates and a segment with only updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges for this test\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 6; i++) {\n      writer.addDocument(doc(i));\n      if (i % 2 == 1) {\n        writer.commit(); // create 2-docs segments\n      }\n    }\n    \n    // delete doc-1 and doc-2\n    writer.deleteDocuments(new Term(\"id\", \"doc-1\"), new Term(\"id\", \"doc-2\")); // 1st and 2nd segments\n    \n    // update docs 3 and 5\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-3\"), \"val\", toBytes(17L));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-5\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.shutdown();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer, true);\n      writer.shutdown();\n    }\n    \n    AtomicReader slow = SlowCompositeReaderWrapper.wrap(reader);\n    \n    Bits liveDocs = slow.getLiveDocs();\n    boolean[] expectedLiveDocs = new boolean[] { true, false, false, true, true, true };\n    for (int i = 0; i < expectedLiveDocs.length; i++) {\n      assertEquals(expectedLiveDocs[i], liveDocs.get(i));\n    }\n    \n    long[] expectedValues = new long[] { 1, 2, 3, 17, 5, 17};\n    BinaryDocValues bdv = slow.getBinaryDocValues(\"val\");\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < expectedValues.length; i++) {\n      assertEquals(expectedValues[i], getValue(bdv, i, scratch));\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesAndDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesAndDeletes().mjava","sourceNew":"  public void testUpdatesAndDeletes() throws Exception {\n    // create an index with a segment with only deletes, a segment with both\n    // deletes and updates and a segment with only updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // prevent merges for this test\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 6; i++) {\n      writer.addDocument(doc(i));\n      if (i % 2 == 1) {\n        writer.commit(); // create 2-docs segments\n      }\n    }\n    \n    // delete doc-1 and doc-2\n    writer.deleteDocuments(new Term(\"id\", \"doc-1\"), new Term(\"id\", \"doc-2\")); // 1st and 2nd segments\n    \n    // update docs 3 and 5\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-3\"), \"val\", toBytes(17L));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-5\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.shutdown();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer, true);\n      writer.shutdown();\n    }\n    \n    AtomicReader slow = SlowCompositeReaderWrapper.wrap(reader);\n    \n    Bits liveDocs = slow.getLiveDocs();\n    boolean[] expectedLiveDocs = new boolean[] { true, false, false, true, true, true };\n    for (int i = 0; i < expectedLiveDocs.length; i++) {\n      assertEquals(expectedLiveDocs[i], liveDocs.get(i));\n    }\n    \n    long[] expectedValues = new long[] { 1, 2, 3, 17, 5, 17};\n    BinaryDocValues bdv = slow.getBinaryDocValues(\"val\");\n    for (int i = 0; i < expectedValues.length; i++) {\n      assertEquals(expectedValues[i], getValue(bdv, i));\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdatesAndDeletes() throws Exception {\n    // create an index with a segment with only deletes, a segment with both\n    // deletes and updates and a segment with only updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // prevent merges for this test\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 6; i++) {\n      writer.addDocument(doc(i));\n      if (i % 2 == 1) {\n        writer.commit(); // create 2-docs segments\n      }\n    }\n    \n    // delete doc-1 and doc-2\n    writer.deleteDocuments(new Term(\"id\", \"doc-1\"), new Term(\"id\", \"doc-2\")); // 1st and 2nd segments\n    \n    // update docs 3 and 5\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-3\"), \"val\", toBytes(17L));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-5\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.shutdown();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer, true);\n      writer.shutdown();\n    }\n    \n    AtomicReader slow = SlowCompositeReaderWrapper.wrap(reader);\n    \n    Bits liveDocs = slow.getLiveDocs();\n    boolean[] expectedLiveDocs = new boolean[] { true, false, false, true, true, true };\n    for (int i = 0; i < expectedLiveDocs.length; i++) {\n      assertEquals(expectedLiveDocs[i], liveDocs.get(i));\n    }\n    \n    long[] expectedValues = new long[] { 1, 2, 3, 17, 5, 17};\n    BinaryDocValues bdv = slow.getBinaryDocValues(\"val\");\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < expectedValues.length; i++) {\n      assertEquals(expectedValues[i], getValue(bdv, i, scratch));\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesAndDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesAndDeletes().mjava","sourceNew":"  public void testUpdatesAndDeletes() throws Exception {\n    // create an index with a segment with only deletes, a segment with both\n    // deletes and updates and a segment with only updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // prevent merges for this test\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 6; i++) {\n      writer.addDocument(doc(i));\n      if (i % 2 == 1) {\n        writer.commit(); // create 2-docs segments\n      }\n    }\n    \n    // delete doc-1 and doc-2\n    writer.deleteDocuments(new Term(\"id\", \"doc-1\"), new Term(\"id\", \"doc-2\")); // 1st and 2nd segments\n    \n    // update docs 3 and 5\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-3\"), \"val\", toBytes(17L));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-5\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.shutdown();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer, true);\n      writer.shutdown();\n    }\n    \n    AtomicReader slow = SlowCompositeReaderWrapper.wrap(reader);\n    \n    Bits liveDocs = slow.getLiveDocs();\n    boolean[] expectedLiveDocs = new boolean[] { true, false, false, true, true, true };\n    for (int i = 0; i < expectedLiveDocs.length; i++) {\n      assertEquals(expectedLiveDocs[i], liveDocs.get(i));\n    }\n    \n    long[] expectedValues = new long[] { 1, 2, 3, 17, 5, 17};\n    BinaryDocValues bdv = slow.getBinaryDocValues(\"val\");\n    for (int i = 0; i < expectedValues.length; i++) {\n      assertEquals(expectedValues[i], getValue(bdv, i));\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdatesAndDeletes() throws Exception {\n    // create an index with a segment with only deletes, a segment with both\n    // deletes and updates and a segment with only updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // prevent merges for this test\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 6; i++) {\n      writer.addDocument(doc(i));\n      if (i % 2 == 1) {\n        writer.commit(); // create 2-docs segments\n      }\n    }\n    \n    // delete doc-1 and doc-2\n    writer.deleteDocuments(new Term(\"id\", \"doc-1\"), new Term(\"id\", \"doc-2\")); // 1st and 2nd segments\n    \n    // update docs 3 and 5\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-3\"), \"val\", toBytes(17L));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-5\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.shutdown();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer, true);\n      writer.shutdown();\n    }\n    \n    AtomicReader slow = SlowCompositeReaderWrapper.wrap(reader);\n    \n    Bits liveDocs = slow.getLiveDocs();\n    boolean[] expectedLiveDocs = new boolean[] { true, false, false, true, true, true };\n    for (int i = 0; i < expectedLiveDocs.length; i++) {\n      assertEquals(expectedLiveDocs[i], liveDocs.get(i));\n    }\n    \n    long[] expectedValues = new long[] { 1, 2, 3, 17, 5, 17};\n    BinaryDocValues bdv = slow.getBinaryDocValues(\"val\");\n    for (int i = 0; i < expectedValues.length; i++) {\n      assertEquals(expectedValues[i], getValue(bdv, i));\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesAndDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesAndDeletes().mjava","sourceNew":"  public void testUpdatesAndDeletes() throws Exception {\n    // create an index with a segment with only deletes, a segment with both\n    // deletes and updates and a segment with only updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // prevent merges for this test\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 6; i++) {\n      writer.addDocument(doc(i));\n      if (i % 2 == 1) {\n        writer.commit(); // create 2-docs segments\n      }\n    }\n    \n    // delete doc-1 and doc-2\n    writer.deleteDocuments(new Term(\"id\", \"doc-1\"), new Term(\"id\", \"doc-2\")); // 1st and 2nd segments\n    \n    // update docs 3 and 5\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-3\"), \"val\", toBytes(17L));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-5\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.close();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer, true);\n      writer.close();\n    }\n    \n    AtomicReader slow = SlowCompositeReaderWrapper.wrap(reader);\n    \n    Bits liveDocs = slow.getLiveDocs();\n    boolean[] expectedLiveDocs = new boolean[] { true, false, false, true, true, true };\n    for (int i = 0; i < expectedLiveDocs.length; i++) {\n      assertEquals(expectedLiveDocs[i], liveDocs.get(i));\n    }\n    \n    long[] expectedValues = new long[] { 1, 2, 3, 17, 5, 17};\n    BinaryDocValues bdv = slow.getBinaryDocValues(\"val\");\n    for (int i = 0; i < expectedValues.length; i++) {\n      assertEquals(expectedValues[i], getValue(bdv, i));\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdatesAndDeletes() throws Exception {\n    // create an index with a segment with only deletes, a segment with both\n    // deletes and updates and a segment with only updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // prevent merges for this test\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 6; i++) {\n      writer.addDocument(doc(i));\n      if (i % 2 == 1) {\n        writer.commit(); // create 2-docs segments\n      }\n    }\n    \n    // delete doc-1 and doc-2\n    writer.deleteDocuments(new Term(\"id\", \"doc-1\"), new Term(\"id\", \"doc-2\")); // 1st and 2nd segments\n    \n    // update docs 3 and 5\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-3\"), \"val\", toBytes(17L));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-5\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.shutdown();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer, true);\n      writer.shutdown();\n    }\n    \n    AtomicReader slow = SlowCompositeReaderWrapper.wrap(reader);\n    \n    Bits liveDocs = slow.getLiveDocs();\n    boolean[] expectedLiveDocs = new boolean[] { true, false, false, true, true, true };\n    for (int i = 0; i < expectedLiveDocs.length; i++) {\n      assertEquals(expectedLiveDocs[i], liveDocs.get(i));\n    }\n    \n    long[] expectedValues = new long[] { 1, 2, 3, 17, 5, 17};\n    BinaryDocValues bdv = slow.getBinaryDocValues(\"val\");\n    for (int i = 0; i < expectedValues.length; i++) {\n      assertEquals(expectedValues[i], getValue(bdv, i));\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesAndDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesAndDeletes().mjava","sourceNew":"  public void testUpdatesAndDeletes() throws Exception {\n    // create an index with a segment with only deletes, a segment with both\n    // deletes and updates and a segment with only updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // prevent merges for this test\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 6; i++) {\n      writer.addDocument(doc(i));\n      if (i % 2 == 1) {\n        writer.commit(); // create 2-docs segments\n      }\n    }\n    \n    // delete doc-1 and doc-2\n    writer.deleteDocuments(new Term(\"id\", \"doc-1\"), new Term(\"id\", \"doc-2\")); // 1st and 2nd segments\n    \n    // update docs 3 and 5\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-3\"), \"val\", toBytes(17L));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-5\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.close();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer, true);\n      writer.close();\n    }\n    \n    LeafReader slow = SlowCompositeReaderWrapper.wrap(reader);\n    \n    Bits liveDocs = slow.getLiveDocs();\n    boolean[] expectedLiveDocs = new boolean[] { true, false, false, true, true, true };\n    for (int i = 0; i < expectedLiveDocs.length; i++) {\n      assertEquals(expectedLiveDocs[i], liveDocs.get(i));\n    }\n    \n    long[] expectedValues = new long[] { 1, 2, 3, 17, 5, 17};\n    BinaryDocValues bdv = slow.getBinaryDocValues(\"val\");\n    for (int i = 0; i < expectedValues.length; i++) {\n      assertEquals(expectedValues[i], getValue(bdv, i));\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdatesAndDeletes() throws Exception {\n    // create an index with a segment with only deletes, a segment with both\n    // deletes and updates and a segment with only updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // prevent merges for this test\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 6; i++) {\n      writer.addDocument(doc(i));\n      if (i % 2 == 1) {\n        writer.commit(); // create 2-docs segments\n      }\n    }\n    \n    // delete doc-1 and doc-2\n    writer.deleteDocuments(new Term(\"id\", \"doc-1\"), new Term(\"id\", \"doc-2\")); // 1st and 2nd segments\n    \n    // update docs 3 and 5\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-3\"), \"val\", toBytes(17L));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-5\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.close();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer, true);\n      writer.close();\n    }\n    \n    AtomicReader slow = SlowCompositeReaderWrapper.wrap(reader);\n    \n    Bits liveDocs = slow.getLiveDocs();\n    boolean[] expectedLiveDocs = new boolean[] { true, false, false, true, true, true };\n    for (int i = 0; i < expectedLiveDocs.length; i++) {\n      assertEquals(expectedLiveDocs[i], liveDocs.get(i));\n    }\n    \n    long[] expectedValues = new long[] { 1, 2, 3, 17, 5, 17};\n    BinaryDocValues bdv = slow.getBinaryDocValues(\"val\");\n    for (int i = 0; i < expectedValues.length; i++) {\n      assertEquals(expectedValues[i], getValue(bdv, i));\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesAndDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesAndDeletes().mjava","sourceNew":"  public void testUpdatesAndDeletes() throws Exception {\n    // create an index with a segment with only deletes, a segment with both\n    // deletes and updates and a segment with only updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // prevent merges for this test\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 6; i++) {\n      writer.addDocument(doc(i));\n      if (i % 2 == 1) {\n        writer.commit(); // create 2-docs segments\n      }\n    }\n    \n    // delete doc-1 and doc-2\n    writer.deleteDocuments(new Term(\"id\", \"doc-1\"), new Term(\"id\", \"doc-2\")); // 1st and 2nd segments\n    \n    // update docs 3 and 5\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-3\"), \"val\", toBytes(17L));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-5\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.close();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer);\n      writer.close();\n    }\n    \n    LeafReader slow = SlowCompositeReaderWrapper.wrap(reader);\n    \n    Bits liveDocs = slow.getLiveDocs();\n    boolean[] expectedLiveDocs = new boolean[] { true, false, false, true, true, true };\n    for (int i = 0; i < expectedLiveDocs.length; i++) {\n      assertEquals(expectedLiveDocs[i], liveDocs.get(i));\n    }\n    \n    long[] expectedValues = new long[] { 1, 2, 3, 17, 5, 17};\n    BinaryDocValues bdv = slow.getBinaryDocValues(\"val\");\n    for (int i = 0; i < expectedValues.length; i++) {\n      assertEquals(expectedValues[i], getValue(bdv, i));\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdatesAndDeletes() throws Exception {\n    // create an index with a segment with only deletes, a segment with both\n    // deletes and updates and a segment with only updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // prevent merges for this test\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 6; i++) {\n      writer.addDocument(doc(i));\n      if (i % 2 == 1) {\n        writer.commit(); // create 2-docs segments\n      }\n    }\n    \n    // delete doc-1 and doc-2\n    writer.deleteDocuments(new Term(\"id\", \"doc-1\"), new Term(\"id\", \"doc-2\")); // 1st and 2nd segments\n    \n    // update docs 3 and 5\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-3\"), \"val\", toBytes(17L));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-5\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.close();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer, true);\n      writer.close();\n    }\n    \n    LeafReader slow = SlowCompositeReaderWrapper.wrap(reader);\n    \n    Bits liveDocs = slow.getLiveDocs();\n    boolean[] expectedLiveDocs = new boolean[] { true, false, false, true, true, true };\n    for (int i = 0; i < expectedLiveDocs.length; i++) {\n      assertEquals(expectedLiveDocs[i], liveDocs.get(i));\n    }\n    \n    long[] expectedValues = new long[] { 1, 2, 3, 17, 5, 17};\n    BinaryDocValues bdv = slow.getBinaryDocValues(\"val\");\n    for (int i = 0; i < expectedValues.length; i++) {\n      assertEquals(expectedValues[i], getValue(bdv, i));\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesAndDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesAndDeletes().mjava","sourceNew":"  public void testUpdatesAndDeletes() throws Exception {\n    // create an index with a segment with only deletes, a segment with both\n    // deletes and updates and a segment with only updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // prevent merges for this test\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 6; i++) {\n      writer.addDocument(doc(i));\n      if (i % 2 == 1) {\n        writer.commit(); // create 2-docs segments\n      }\n    }\n    \n    // delete doc-1 and doc-2\n    writer.deleteDocuments(new Term(\"id\", \"doc-1\"), new Term(\"id\", \"doc-2\")); // 1st and 2nd segments\n    \n    // update docs 3 and 5\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-3\"), \"val\", toBytes(17L));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-5\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.close();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer);\n      writer.close();\n    }\n    \n    Bits liveDocs = MultiFields.getLiveDocs(reader);\n    boolean[] expectedLiveDocs = new boolean[] { true, false, false, true, true, true };\n    for (int i = 0; i < expectedLiveDocs.length; i++) {\n      assertEquals(expectedLiveDocs[i], liveDocs.get(i));\n    }\n    \n    long[] expectedValues = new long[] { 1, 2, 3, 17, 5, 17};\n    BinaryDocValues bdv = MultiDocValues.getBinaryValues(reader, \"val\");\n    for (int i = 0; i < expectedValues.length; i++) {\n      assertEquals(expectedValues[i], getValue(bdv, i));\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdatesAndDeletes() throws Exception {\n    // create an index with a segment with only deletes, a segment with both\n    // deletes and updates and a segment with only updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // prevent merges for this test\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 6; i++) {\n      writer.addDocument(doc(i));\n      if (i % 2 == 1) {\n        writer.commit(); // create 2-docs segments\n      }\n    }\n    \n    // delete doc-1 and doc-2\n    writer.deleteDocuments(new Term(\"id\", \"doc-1\"), new Term(\"id\", \"doc-2\")); // 1st and 2nd segments\n    \n    // update docs 3 and 5\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-3\"), \"val\", toBytes(17L));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-5\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.close();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer);\n      writer.close();\n    }\n    \n    LeafReader slow = SlowCompositeReaderWrapper.wrap(reader);\n    \n    Bits liveDocs = slow.getLiveDocs();\n    boolean[] expectedLiveDocs = new boolean[] { true, false, false, true, true, true };\n    for (int i = 0; i < expectedLiveDocs.length; i++) {\n      assertEquals(expectedLiveDocs[i], liveDocs.get(i));\n    }\n    \n    long[] expectedValues = new long[] { 1, 2, 3, 17, 5, 17};\n    BinaryDocValues bdv = slow.getBinaryDocValues(\"val\");\n    for (int i = 0; i < expectedValues.length; i++) {\n      assertEquals(expectedValues[i], getValue(bdv, i));\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87","06805da26538ed636bd89b10c2699cc3834032ae"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesAndDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesAndDeletes().mjava","sourceNew":"  public void testUpdatesAndDeletes() throws Exception {\n    // create an index with a segment with only deletes, a segment with both\n    // deletes and updates and a segment with only updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // prevent merges for this test\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 6; i++) {\n      writer.addDocument(doc(i));\n      if (i % 2 == 1) {\n        writer.commit(); // create 2-docs segments\n      }\n    }\n    \n    // delete doc-1 and doc-2\n    writer.deleteDocuments(new Term(\"id\", \"doc-1\"), new Term(\"id\", \"doc-2\")); // 1st and 2nd segments\n    \n    // update docs 3 and 5\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-3\"), \"val\", toBytes(17L));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-5\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.close();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer);\n      writer.close();\n    }\n    \n    Bits liveDocs = MultiFields.getLiveDocs(reader);\n    boolean[] expectedLiveDocs = new boolean[] { true, false, false, true, true, true };\n    for (int i = 0; i < expectedLiveDocs.length; i++) {\n      assertEquals(expectedLiveDocs[i], liveDocs.get(i));\n    }\n    \n    long[] expectedValues = new long[] { 1, 2, 3, 17, 5, 17};\n    BinaryDocValues bdv = MultiDocValues.getBinaryValues(reader, \"val\");\n    for (int i = 0; i < expectedValues.length; i++) {\n      assertEquals(i, bdv.nextDoc());\n      assertEquals(expectedValues[i], getValue(bdv));\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdatesAndDeletes() throws Exception {\n    // create an index with a segment with only deletes, a segment with both\n    // deletes and updates and a segment with only updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // prevent merges for this test\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 6; i++) {\n      writer.addDocument(doc(i));\n      if (i % 2 == 1) {\n        writer.commit(); // create 2-docs segments\n      }\n    }\n    \n    // delete doc-1 and doc-2\n    writer.deleteDocuments(new Term(\"id\", \"doc-1\"), new Term(\"id\", \"doc-2\")); // 1st and 2nd segments\n    \n    // update docs 3 and 5\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-3\"), \"val\", toBytes(17L));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-5\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.close();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer);\n      writer.close();\n    }\n    \n    Bits liveDocs = MultiFields.getLiveDocs(reader);\n    boolean[] expectedLiveDocs = new boolean[] { true, false, false, true, true, true };\n    for (int i = 0; i < expectedLiveDocs.length; i++) {\n      assertEquals(expectedLiveDocs[i], liveDocs.get(i));\n    }\n    \n    long[] expectedValues = new long[] { 1, 2, 3, 17, 5, 17};\n    BinaryDocValues bdv = MultiDocValues.getBinaryValues(reader, \"val\");\n    for (int i = 0; i < expectedValues.length; i++) {\n      assertEquals(expectedValues[i], getValue(bdv, i));\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesAndDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesAndDeletes().mjava","sourceNew":"  public void testUpdatesAndDeletes() throws Exception {\n    // create an index with a segment with only deletes, a segment with both\n    // deletes and updates and a segment with only updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // prevent merges for this test\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 6; i++) {\n      writer.addDocument(doc(i));\n      if (i % 2 == 1) {\n        writer.commit(); // create 2-docs segments\n      }\n    }\n    \n    // delete doc-1 and doc-2\n    writer.deleteDocuments(new Term(\"id\", \"doc-1\"), new Term(\"id\", \"doc-2\")); // 1st and 2nd segments\n    \n    // update docs 3 and 5\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-3\"), \"val\", toBytes(17L));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-5\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.close();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer);\n      writer.close();\n    }\n    \n    Bits liveDocs = MultiFields.getLiveDocs(reader);\n    boolean[] expectedLiveDocs = new boolean[] { true, false, false, true, true, true };\n    for (int i = 0; i < expectedLiveDocs.length; i++) {\n      assertEquals(expectedLiveDocs[i], liveDocs.get(i));\n    }\n    \n    long[] expectedValues = new long[] { 1, 2, 3, 17, 5, 17};\n    BinaryDocValues bdv = MultiDocValues.getBinaryValues(reader, \"val\");\n    for (int i = 0; i < expectedValues.length; i++) {\n      assertEquals(i, bdv.nextDoc());\n      assertEquals(expectedValues[i], getValue(bdv));\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdatesAndDeletes() throws Exception {\n    // create an index with a segment with only deletes, a segment with both\n    // deletes and updates and a segment with only updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // prevent merges for this test\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 6; i++) {\n      writer.addDocument(doc(i));\n      if (i % 2 == 1) {\n        writer.commit(); // create 2-docs segments\n      }\n    }\n    \n    // delete doc-1 and doc-2\n    writer.deleteDocuments(new Term(\"id\", \"doc-1\"), new Term(\"id\", \"doc-2\")); // 1st and 2nd segments\n    \n    // update docs 3 and 5\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-3\"), \"val\", toBytes(17L));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-5\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.close();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer);\n      writer.close();\n    }\n    \n    Bits liveDocs = MultiFields.getLiveDocs(reader);\n    boolean[] expectedLiveDocs = new boolean[] { true, false, false, true, true, true };\n    for (int i = 0; i < expectedLiveDocs.length; i++) {\n      assertEquals(expectedLiveDocs[i], liveDocs.get(i));\n    }\n    \n    long[] expectedValues = new long[] { 1, 2, 3, 17, 5, 17};\n    BinaryDocValues bdv = MultiDocValues.getBinaryValues(reader, \"val\");\n    for (int i = 0; i < expectedValues.length; i++) {\n      assertEquals(expectedValues[i], getValue(bdv, i));\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesAndDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesAndDeletes().mjava","sourceNew":"  public void testUpdatesAndDeletes() throws Exception {\n    // create an index with a segment with only deletes, a segment with both\n    // deletes and updates and a segment with only updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // prevent merges for this test\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 6; i++) {\n      writer.addDocument(doc(i));\n      if (i % 2 == 1) {\n        writer.commit(); // create 2-docs segments\n      }\n    }\n    \n    // delete doc-1 and doc-2\n    writer.deleteDocuments(new Term(\"id\", \"doc-1\"), new Term(\"id\", \"doc-2\")); // 1st and 2nd segments\n    \n    // update docs 3 and 5\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-3\"), \"val\", toBytes(17L));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-5\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.close();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer);\n      writer.close();\n    }\n    \n    Bits liveDocs = MultiFields.getLiveDocs(reader);\n    boolean[] expectedLiveDocs = new boolean[] { true, false, false, true, true, true };\n    for (int i = 0; i < expectedLiveDocs.length; i++) {\n      assertEquals(expectedLiveDocs[i], liveDocs.get(i));\n    }\n    \n    long[] expectedValues = new long[] { 1, 2, 3, 17, 5, 17};\n    BinaryDocValues bdv = MultiDocValues.getBinaryValues(reader, \"val\");\n    for (int i = 0; i < expectedValues.length; i++) {\n      assertEquals(i, bdv.nextDoc());\n      assertEquals(expectedValues[i], getValue(bdv));\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdatesAndDeletes() throws Exception {\n    // create an index with a segment with only deletes, a segment with both\n    // deletes and updates and a segment with only updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // prevent merges for this test\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 6; i++) {\n      writer.addDocument(doc(i));\n      if (i % 2 == 1) {\n        writer.commit(); // create 2-docs segments\n      }\n    }\n    \n    // delete doc-1 and doc-2\n    writer.deleteDocuments(new Term(\"id\", \"doc-1\"), new Term(\"id\", \"doc-2\")); // 1st and 2nd segments\n    \n    // update docs 3 and 5\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-3\"), \"val\", toBytes(17L));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-5\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.close();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer);\n      writer.close();\n    }\n    \n    Bits liveDocs = MultiFields.getLiveDocs(reader);\n    boolean[] expectedLiveDocs = new boolean[] { true, false, false, true, true, true };\n    for (int i = 0; i < expectedLiveDocs.length; i++) {\n      assertEquals(expectedLiveDocs[i], liveDocs.get(i));\n    }\n    \n    long[] expectedValues = new long[] { 1, 2, 3, 17, 5, 17};\n    BinaryDocValues bdv = MultiDocValues.getBinaryValues(reader, \"val\");\n    for (int i = 0; i < expectedValues.length; i++) {\n      assertEquals(expectedValues[i], getValue(bdv, i));\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesAndDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdatesAndDeletes().mjava","sourceNew":"  public void testUpdatesAndDeletes() throws Exception {\n    // create an index with a segment with only deletes, a segment with both\n    // deletes and updates and a segment with only updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // prevent merges for this test\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 6; i++) {\n      writer.addDocument(doc(i));\n      if (i % 2 == 1) {\n        writer.commit(); // create 2-docs segments\n      }\n    }\n    \n    // delete doc-1 and doc-2\n    writer.deleteDocuments(new Term(\"id\", \"doc-1\"), new Term(\"id\", \"doc-2\")); // 1st and 2nd segments\n    \n    // update docs 3 and 5\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-3\"), \"val\", toBytes(17L));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-5\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.close();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer);\n      writer.close();\n    }\n    \n    Bits liveDocs = MultiBits.getLiveDocs(reader);\n    boolean[] expectedLiveDocs = new boolean[] { true, false, false, true, true, true };\n    for (int i = 0; i < expectedLiveDocs.length; i++) {\n      assertEquals(expectedLiveDocs[i], liveDocs.get(i));\n    }\n    \n    long[] expectedValues = new long[] { 1, 2, 3, 17, 5, 17};\n    BinaryDocValues bdv = MultiDocValues.getBinaryValues(reader, \"val\");\n    for (int i = 0; i < expectedValues.length; i++) {\n      assertEquals(i, bdv.nextDoc());\n      assertEquals(expectedValues[i], getValue(bdv));\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdatesAndDeletes() throws Exception {\n    // create an index with a segment with only deletes, a segment with both\n    // deletes and updates and a segment with only updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    conf.setMergePolicy(NoMergePolicy.INSTANCE); // prevent merges for this test\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 6; i++) {\n      writer.addDocument(doc(i));\n      if (i % 2 == 1) {\n        writer.commit(); // create 2-docs segments\n      }\n    }\n    \n    // delete doc-1 and doc-2\n    writer.deleteDocuments(new Term(\"id\", \"doc-1\"), new Term(\"id\", \"doc-2\")); // 1st and 2nd segments\n    \n    // update docs 3 and 5\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-3\"), \"val\", toBytes(17L));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-5\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.close();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer);\n      writer.close();\n    }\n    \n    Bits liveDocs = MultiFields.getLiveDocs(reader);\n    boolean[] expectedLiveDocs = new boolean[] { true, false, false, true, true, true };\n    for (int i = 0; i < expectedLiveDocs.length; i++) {\n      assertEquals(expectedLiveDocs[i], liveDocs.get(i));\n    }\n    \n    long[] expectedValues = new long[] { 1, 2, 3, 17, 5, 17};\n    BinaryDocValues bdv = MultiDocValues.getBinaryValues(reader, \"val\");\n    for (int i = 0; i < expectedValues.length; i++) {\n      assertEquals(i, bdv.nextDoc());\n      assertEquals(expectedValues[i], getValue(bdv));\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"06805da26538ed636bd89b10c2699cc3834032ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["2a1862266772deb28cdcb7d996b64d2177022687"],"2a1862266772deb28cdcb7d996b64d2177022687":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["06805da26538ed636bd89b10c2699cc3834032ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"06805da26538ed636bd89b10c2699cc3834032ae":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["2a1862266772deb28cdcb7d996b64d2177022687"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"2a1862266772deb28cdcb7d996b64d2177022687":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06805da26538ed636bd89b10c2699cc3834032ae"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","04e775de416dd2d8067b10db1c8af975a1d5017e"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}