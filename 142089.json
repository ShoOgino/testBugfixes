{"path":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","commits":[{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"java.io.tmpdir\");\n    String path = tmpIODir + File.separator + \"lazyDir\";\n    File file = new File(path);\n    FSDirectory tmpDir = FSDirectory.getDirectory(file, true);\n    assertTrue(tmpDir != null);\n    DocumentWriter writer = new DocumentWriter(tmpDir, new WhitespaceAnalyzer(),\n            Similarity.getDefault(), 50);\n    assertTrue(writer != null);\n    writer.addDocument(\"test\", testDoc);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set lazyFieldNames = new HashSet();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections.EMPTY_SET, lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, \"test\", fieldInfos);\n      assertTrue(reader != null);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getField(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, \"test\", fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getField(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["044cc6e1551cd0687478395eeceb9cde12caf10b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"044cc6e1551cd0687478395eeceb9cde12caf10b","date":1150919367,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"java.io.tmpdir\");\n    String path = tmpIODir + File.separator + \"lazyDir\";\n    File file = new File(path);\n    FSDirectory tmpDir = FSDirectory.getDirectory(file, true);\n    assertTrue(tmpDir != null);\n    DocumentWriter writer = new DocumentWriter(tmpDir, new WhitespaceAnalyzer(),\n            Similarity.getDefault(), 50);\n    assertTrue(writer != null);\n    writer.addDocument(\"test\", testDoc);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set lazyFieldNames = new HashSet();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections.EMPTY_SET, lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, \"test\", fieldInfos);\n      assertTrue(reader != null);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, \"test\", fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"java.io.tmpdir\");\n    String path = tmpIODir + File.separator + \"lazyDir\";\n    File file = new File(path);\n    FSDirectory tmpDir = FSDirectory.getDirectory(file, true);\n    assertTrue(tmpDir != null);\n    DocumentWriter writer = new DocumentWriter(tmpDir, new WhitespaceAnalyzer(),\n            Similarity.getDefault(), 50);\n    assertTrue(writer != null);\n    writer.addDocument(\"test\", testDoc);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set lazyFieldNames = new HashSet();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections.EMPTY_SET, lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, \"test\", fieldInfos);\n      assertTrue(reader != null);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getField(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, \"test\", fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getField(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","bugFix":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00fa9ac9b33207b94f0334b1648174071c76fdd1","date":1165891482,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"java.io.tmpdir\");\n    String userName = System.getProperty(\"user.name\");\n    String path = tmpIODir + File.separator + \"lazyDir\" + userName;\n    File file = new File(path);\n    FSDirectory tmpDir = FSDirectory.getDirectory(file, true);\n    assertTrue(tmpDir != null);\n    DocumentWriter writer = new DocumentWriter(tmpDir, new WhitespaceAnalyzer(),\n            Similarity.getDefault(), 50);\n    assertTrue(writer != null);\n    writer.addDocument(\"test\", testDoc);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set lazyFieldNames = new HashSet();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections.EMPTY_SET, lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, \"test\", fieldInfos);\n      assertTrue(reader != null);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, \"test\", fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"java.io.tmpdir\");\n    String path = tmpIODir + File.separator + \"lazyDir\";\n    File file = new File(path);\n    FSDirectory tmpDir = FSDirectory.getDirectory(file, true);\n    assertTrue(tmpDir != null);\n    DocumentWriter writer = new DocumentWriter(tmpDir, new WhitespaceAnalyzer(),\n            Similarity.getDefault(), 50);\n    assertTrue(writer != null);\n    writer.addDocument(\"test\", testDoc);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set lazyFieldNames = new HashSet();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections.EMPTY_SET, lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, \"test\", fieldInfos);\n      assertTrue(reader != null);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, \"test\", fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7358d4d9785ec9821aeb31c3aaa882713b3cffac","date":1166301524,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"tempDir\");\n    String userName = System.getProperty(\"user.name\");\n    String path = tmpIODir + File.separator + \"lazyDir\" + userName;\n    File file = new File(path);\n    FSDirectory tmpDir = FSDirectory.getDirectory(file, true);\n    assertTrue(tmpDir != null);\n    DocumentWriter writer = new DocumentWriter(tmpDir, new WhitespaceAnalyzer(),\n            Similarity.getDefault(), 50);\n    assertTrue(writer != null);\n    writer.addDocument(\"test\", testDoc);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set lazyFieldNames = new HashSet();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections.EMPTY_SET, lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, \"test\", fieldInfos);\n      assertTrue(reader != null);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, \"test\", fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"java.io.tmpdir\");\n    String userName = System.getProperty(\"user.name\");\n    String path = tmpIODir + File.separator + \"lazyDir\" + userName;\n    File file = new File(path);\n    FSDirectory tmpDir = FSDirectory.getDirectory(file, true);\n    assertTrue(tmpDir != null);\n    DocumentWriter writer = new DocumentWriter(tmpDir, new WhitespaceAnalyzer(),\n            Similarity.getDefault(), 50);\n    assertTrue(writer != null);\n    writer.addDocument(\"test\", testDoc);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set lazyFieldNames = new HashSet();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections.EMPTY_SET, lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, \"test\", fieldInfos);\n      assertTrue(reader != null);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, \"test\", fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b12ba4967665216eeb706b58d424c51fb3641a","date":1169160423,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"tempDir\");\n    String userName = System.getProperty(\"user.name\");\n    String path = tmpIODir + File.separator + \"lazyDir\" + userName;\n    File file = new File(path);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.getDirectory(file);\n    assertTrue(tmpDir != null);\n    DocumentWriter writer = new DocumentWriter(tmpDir, new WhitespaceAnalyzer(),\n            Similarity.getDefault(), 50);\n    assertTrue(writer != null);\n    writer.addDocument(\"test\", testDoc);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set lazyFieldNames = new HashSet();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections.EMPTY_SET, lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, \"test\", fieldInfos);\n      assertTrue(reader != null);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, \"test\", fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"tempDir\");\n    String userName = System.getProperty(\"user.name\");\n    String path = tmpIODir + File.separator + \"lazyDir\" + userName;\n    File file = new File(path);\n    FSDirectory tmpDir = FSDirectory.getDirectory(file, true);\n    assertTrue(tmpDir != null);\n    DocumentWriter writer = new DocumentWriter(tmpDir, new WhitespaceAnalyzer(),\n            Similarity.getDefault(), 50);\n    assertTrue(writer != null);\n    writer.addDocument(\"test\", testDoc);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set lazyFieldNames = new HashSet();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections.EMPTY_SET, lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, \"test\", fieldInfos);\n      assertTrue(reader != null);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, \"test\", fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","bugFix":null,"bugIntro":["3741149a89925c02f14dbeef8365b896798d91fc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0","date":1185569419,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"tempDir\");\n    String userName = System.getProperty(\"user.name\");\n    String path = tmpIODir + File.separator + \"lazyDir\" + userName;\n    File file = new File(path);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.getDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriter writer = new IndexWriter(tmpDir, new WhitespaceAnalyzer(), true);\n    writer.setUseCompoundFile(false);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set lazyFieldNames = new HashSet();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections.EMPTY_SET, lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader != null);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"tempDir\");\n    String userName = System.getProperty(\"user.name\");\n    String path = tmpIODir + File.separator + \"lazyDir\" + userName;\n    File file = new File(path);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.getDirectory(file);\n    assertTrue(tmpDir != null);\n    DocumentWriter writer = new DocumentWriter(tmpDir, new WhitespaceAnalyzer(),\n            Similarity.getDefault(), 50);\n    assertTrue(writer != null);\n    writer.addDocument(\"test\", testDoc);\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set lazyFieldNames = new HashSet();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections.EMPTY_SET, lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, \"test\", fieldInfos);\n      assertTrue(reader != null);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, \"test\", fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"tempDir\");\n    String userName = System.getProperty(\"user.name\");\n    String path = tmpIODir + File.separator + \"lazyDir\" + userName;\n    File file = new File(path);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.getDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriter writer = new IndexWriter(tmpDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set lazyFieldNames = new HashSet();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections.EMPTY_SET, lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader != null);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"tempDir\");\n    String userName = System.getProperty(\"user.name\");\n    String path = tmpIODir + File.separator + \"lazyDir\" + userName;\n    File file = new File(path);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.getDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriter writer = new IndexWriter(tmpDir, new WhitespaceAnalyzer(), true);\n    writer.setUseCompoundFile(false);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set lazyFieldNames = new HashSet();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections.EMPTY_SET, lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader != null);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02","date":1243677645,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"tempDir\");\n    String userName = System.getProperty(\"user.name\");\n    String path = tmpIODir + File.separator + \"lazyDir\" + userName;\n    File file = new File(path);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriter writer = new IndexWriter(tmpDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set lazyFieldNames = new HashSet();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections.EMPTY_SET, lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader != null);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"tempDir\");\n    String userName = System.getProperty(\"user.name\");\n    String path = tmpIODir + File.separator + \"lazyDir\" + userName;\n    File file = new File(path);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.getDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriter writer = new IndexWriter(tmpDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set lazyFieldNames = new HashSet();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections.EMPTY_SET, lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader != null);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"tempDir\");\n    String userName = System.getProperty(\"user.name\");\n    String path = tmpIODir + File.separator + \"lazyDir\" + userName;\n    File file = new File(path);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriter writer = new IndexWriter(tmpDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader != null);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"tempDir\");\n    String userName = System.getProperty(\"user.name\");\n    String path = tmpIODir + File.separator + \"lazyDir\" + userName;\n    File file = new File(path);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriter writer = new IndexWriter(tmpDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set lazyFieldNames = new HashSet();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections.EMPTY_SET, lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader != null);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"tempDir\");\n    String userName = System.getProperty(\"user.name\");\n    String path = tmpIODir + File.separator + \"lazyDir\" + userName;\n    File file = new File(path);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriter writer = new IndexWriter(tmpDir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader != null);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"tempDir\");\n    String userName = System.getProperty(\"user.name\");\n    String path = tmpIODir + File.separator + \"lazyDir\" + userName;\n    File file = new File(path);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriter writer = new IndexWriter(tmpDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader != null);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"tempDir\");\n    String userName = System.getProperty(\"user.name\");\n    String path = tmpIODir + File.separator + \"lazyDir\" + userName;\n    File file = new File(path);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriter writer = new IndexWriter(tmpDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader != null);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"tempDir\");\n    String userName = System.getProperty(\"user.name\");\n    String path = tmpIODir + File.separator + \"lazyDir\" + userName;\n    File file = new File(path);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriter writer = new IndexWriter(tmpDir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader != null);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"tempDir\");\n    String userName = System.getProperty(\"user.name\");\n    String path = tmpIODir + File.separator + \"lazyDir\" + userName;\n    File file = new File(path);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriter writer = new IndexWriter(tmpDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"tempDir\");\n    String userName = System.getProperty(\"user.name\");\n    String path = tmpIODir + File.separator + \"lazyDir\" + userName;\n    File file = new File(path);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriter writer = new IndexWriter(tmpDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader != null);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"tempDir\");\n    String userName = System.getProperty(\"user.name\");\n    String path = tmpIODir + File.separator + \"lazyDir\" + userName;\n    File file = new File(path);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriter writer = new IndexWriter(tmpDir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"tempDir\");\n    String userName = System.getProperty(\"user.name\");\n    String path = tmpIODir + File.separator + \"lazyDir\" + userName;\n    File file = new File(path);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriter writer = new IndexWriter(tmpDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"tempDir\");\n    String userName = System.getProperty(\"user.name\");\n    String path = tmpIODir + File.separator + \"lazyDir\" + userName;\n    File file = new File(path);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriter writer = new IndexWriter(tmpDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"tempDir\");\n    String userName = System.getProperty(\"user.name\");\n    String path = tmpIODir + File.separator + \"lazyDir\" + userName;\n    File file = new File(path);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriter writer = new IndexWriter(tmpDir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"tempDir\");\n    String userName = System.getProperty(\"user.name\");\n    String path = tmpIODir + File.separator + \"lazyDir\" + userName;\n    File file = new File(path);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriter writer = new IndexWriter(tmpDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"tempDir\");\n    String userName = System.getProperty(\"user.name\");\n    String path = tmpIODir + File.separator + \"lazyDir\" + userName;\n    File file = new File(path);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriter writer = new IndexWriter(tmpDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d16275d75dfe0b780ed62df4c811d083187c71a","date":1268583591,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriter writer = new IndexWriter(tmpDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"tempDir\");\n    String userName = System.getProperty(\"user.name\");\n    String path = tmpIODir + File.separator + \"lazyDir\" + userName;\n    File file = new File(path);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriter writer = new IndexWriter(tmpDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","bugFix":null,"bugIntro":["3741149a89925c02f14dbeef8365b896798d91fc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42607aa380c892dc1ec0ab26e86a575c28e13618","date":1268641604,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriter writer = new IndexWriter(tmpDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriter writer = new IndexWriter(tmpDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriter writer = new IndexWriter(tmpDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = new File(TEMP_DIR, \"lazyDir\" + userName);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriter writer = new IndexWriter(tmpDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n    ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0":["66b12ba4967665216eeb706b58d424c51fb3641a"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"],"044cc6e1551cd0687478395eeceb9cde12caf10b":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"66b12ba4967665216eeb706b58d424c51fb3641a":["7358d4d9785ec9821aeb31c3aaa882713b3cffac"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7358d4d9785ec9821aeb31c3aaa882713b3cffac":["00fa9ac9b33207b94f0334b1648174071c76fdd1"],"1d16275d75dfe0b780ed62df4c811d083187c71a":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["1d16275d75dfe0b780ed62df4c811d083187c71a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"00fa9ac9b33207b94f0334b1648174071c76fdd1":["044cc6e1551cd0687478395eeceb9cde12caf10b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["42607aa380c892dc1ec0ab26e86a575c28e13618"]},"commit2Childs":{"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"044cc6e1551cd0687478395eeceb9cde12caf10b":["00fa9ac9b33207b94f0334b1648174071c76fdd1"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["044cc6e1551cd0687478395eeceb9cde12caf10b"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"66b12ba4967665216eeb706b58d424c51fb3641a":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["1d16275d75dfe0b780ed62df4c811d083187c71a"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"7358d4d9785ec9821aeb31c3aaa882713b3cffac":["66b12ba4967665216eeb706b58d424c51fb3641a"],"1d16275d75dfe0b780ed62df4c811d083187c71a":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"00fa9ac9b33207b94f0334b1648174071c76fdd1":["7358d4d9785ec9821aeb31c3aaa882713b3cffac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}