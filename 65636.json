{"path":"lucene/src/java/org/apache/lucene/codecs/TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","sourceNew":"  /** \n   * Called by IndexWriter when writing new segments.\n   * <p>\n   * This is an expert API that allows the codec to consume \n   * positions and offsets directly from the indexer.\n   * <p>\n   * The default implementation calls {@link #addPosition(int, int, int)},\n   * but subclasses can override this if they want to efficiently write \n   * all the positions, then all the offsets, for example.\n   * <p>\n   * NOTE: This API is extremely expert and subject to change or removal!!!\n   * @lucene.internal\n   */\n  // TODO: we should probably nuke this and make a more efficient 4.x format\n  // PreFlex-RW could then be slow and buffer (its only used in tests...)\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    int position = 0;\n    int lastOffset = 0;\n\n    for (int i = 0; i < numProx; i++) {\n      final int startOffset;\n      final int endOffset;\n      \n      if (positions == null) {\n        position = -1;\n      } else {\n        position += positions.readVInt();\n      }\n      \n      if (offsets == null) {\n        startOffset = endOffset = -1;\n      } else {\n        startOffset = lastOffset + offsets.readVInt();\n        endOffset = startOffset + offsets.readVInt();\n        lastOffset = endOffset;\n      }\n      addPosition(position, startOffset, endOffset);\n    }\n  }\n\n","sourceOld":"  /** \n   * Called by IndexWriter when writing new segments.\n   * <p>\n   * This is an expert API that allows the codec to consume \n   * positions and offsets directly from the indexer.\n   * <p>\n   * The default implementation calls {@link #addPosition(int, int, int)},\n   * but subclasses can override this if they want to efficiently write \n   * all the positions, then all the offsets, for example.\n   * <p>\n   * NOTE: This API is extremely expert and subject to change or removal!!!\n   * @lucene.internal\n   */\n  // TODO: we should probably nuke this and make a more efficient 4.x format\n  // PreFlex-RW could then be slow and buffer (its only used in tests...)\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    int position = 0;\n    int lastOffset = 0;\n\n    for (int i = 0; i < numProx; i++) {\n      final int startOffset;\n      final int endOffset;\n      \n      if (positions == null) {\n        position = -1;\n      } else {\n        position += positions.readVInt();\n      }\n      \n      if (offsets == null) {\n        startOffset = endOffset = -1;\n      } else {\n        startOffset = lastOffset + offsets.readVInt();\n        endOffset = startOffset + offsets.readVInt();\n        lastOffset = endOffset;\n      }\n      addPosition(position, startOffset, endOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","sourceNew":"  /** \n   * Called by IndexWriter when writing new segments.\n   * <p>\n   * This is an expert API that allows the codec to consume \n   * positions and offsets directly from the indexer.\n   * <p>\n   * The default implementation calls {@link #addPosition(int, int, int)},\n   * but subclasses can override this if they want to efficiently write \n   * all the positions, then all the offsets, for example.\n   * <p>\n   * NOTE: This API is extremely expert and subject to change or removal!!!\n   * @lucene.internal\n   */\n  // TODO: we should probably nuke this and make a more efficient 4.x format\n  // PreFlex-RW could then be slow and buffer (its only used in tests...)\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    int position = 0;\n    int lastOffset = 0;\n\n    for (int i = 0; i < numProx; i++) {\n      final int startOffset;\n      final int endOffset;\n      \n      if (positions == null) {\n        position = -1;\n      } else {\n        position += positions.readVInt();\n      }\n      \n      if (offsets == null) {\n        startOffset = endOffset = -1;\n      } else {\n        startOffset = lastOffset + offsets.readVInt();\n        endOffset = startOffset + offsets.readVInt();\n        lastOffset = endOffset;\n      }\n      addPosition(position, startOffset, endOffset);\n    }\n  }\n\n","sourceOld":"  /** \n   * Called by IndexWriter when writing new segments.\n   * <p>\n   * This is an expert API that allows the codec to consume \n   * positions and offsets directly from the indexer.\n   * <p>\n   * The default implementation calls {@link #addPosition(int, int, int)},\n   * but subclasses can override this if they want to efficiently write \n   * all the positions, then all the offsets, for example.\n   * <p>\n   * NOTE: This API is extremely expert and subject to change or removal!!!\n   * @lucene.internal\n   */\n  // TODO: we should probably nuke this and make a more efficient 4.x format\n  // PreFlex-RW could then be slow and buffer (its only used in tests...)\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    int position = 0;\n    int lastOffset = 0;\n\n    for (int i = 0; i < numProx; i++) {\n      final int startOffset;\n      final int endOffset;\n      \n      if (positions == null) {\n        position = -1;\n      } else {\n        position += positions.readVInt();\n      }\n      \n      if (offsets == null) {\n        startOffset = endOffset = -1;\n      } else {\n        startOffset = lastOffset + offsets.readVInt();\n        endOffset = startOffset + offsets.readVInt();\n        lastOffset = endOffset;\n      }\n      addPosition(position, startOffset, endOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}