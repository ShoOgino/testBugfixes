{"path":"solr/src/test/org/apache/solr/analysis/TestSynonymFilter#tokens(String).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestSynonymFilter#tokens(String).mjava","pathOld":"/dev/null","sourceNew":"  /***\n   * Return a list of tokens according to a test string format:\n   * a b c  =>  returns List<Token> [a,b,c]\n   * a/b   => tokens a and b share the same spot (b.positionIncrement=0)\n   * a,3/b/c => a,b,c all share same position (a.positionIncrement=3, b.positionIncrement=0, c.positionIncrement=0)\n   * a,1,10,11  => \"a\" with positionIncrement=1, startOffset=10, endOffset=11\n   * @deprecated does not support attributes api\n   */\n  private List<Token> tokens(String str) {\n    String[] arr = str.split(\" \");\n    List<Token> result = new ArrayList<Token>();\n    for (int i=0; i<arr.length; i++) {\n      String[] toks = arr[i].split(\"/\");\n      String[] params = toks[0].split(\",\");\n\n      int posInc;\n      int start;\n      int end;\n\n      if (params.length > 1) {\n        posInc = Integer.parseInt(params[1]);\n      } else {\n        posInc = 1;\n      }\n\n      if (params.length > 2) {\n        start = Integer.parseInt(params[2]);\n      } else {\n        start = 0;\n      }\n\n      if (params.length > 3) {\n        end = Integer.parseInt(params[3]);\n      } else {\n        end = start + params[0].length();\n      }\n\n      Token t = new Token(params[0],start,end,\"TEST\");\n      t.setPositionIncrement(posInc);\n      \n      result.add(t);\n      for (int j=1; j<toks.length; j++) {\n        t = new Token(toks[j],0,0,\"TEST\");\n        t.setPositionIncrement(0);\n        result.add(t);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/analysis/TestSynonymFilter#tokens(String).mjava","sourceNew":null,"sourceOld":"  /***\n   * Return a list of tokens according to a test string format:\n   * a b c  =>  returns List<Token> [a,b,c]\n   * a/b   => tokens a and b share the same spot (b.positionIncrement=0)\n   * a,3/b/c => a,b,c all share same position (a.positionIncrement=3, b.positionIncrement=0, c.positionIncrement=0)\n   * a,1,10,11  => \"a\" with positionIncrement=1, startOffset=10, endOffset=11\n   * @deprecated does not support attributes api\n   */\n  private List<Token> tokens(String str) {\n    String[] arr = str.split(\" \");\n    List<Token> result = new ArrayList<Token>();\n    for (int i=0; i<arr.length; i++) {\n      String[] toks = arr[i].split(\"/\");\n      String[] params = toks[0].split(\",\");\n\n      int posInc;\n      int start;\n      int end;\n\n      if (params.length > 1) {\n        posInc = Integer.parseInt(params[1]);\n      } else {\n        posInc = 1;\n      }\n\n      if (params.length > 2) {\n        start = Integer.parseInt(params[2]);\n      } else {\n        start = 0;\n      }\n\n      if (params.length > 3) {\n        end = Integer.parseInt(params[3]);\n      } else {\n        end = start + params[0].length();\n      }\n\n      Token t = new Token(params[0],start,end,\"TEST\");\n      t.setPositionIncrement(posInc);\n      \n      result.add(t);\n      for (int j=1; j<toks.length; j++) {\n        t = new Token(toks[j],0,0,\"TEST\");\n        t.setPositionIncrement(0);\n        result.add(t);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestSynonymFilter#tokens(String).mjava","pathOld":"src/test/org/apache/solr/analysis/TestSynonymFilter#tokens(String).mjava","sourceNew":"  /***\n   * Return a list of tokens according to a test string format:\n   * a b c  =>  returns List<Token> [a,b,c]\n   * a/b   => tokens a and b share the same spot (b.positionIncrement=0)\n   * a,3/b/c => a,b,c all share same position (a.positionIncrement=3, b.positionIncrement=0, c.positionIncrement=0)\n   * a,1,10,11  => \"a\" with positionIncrement=1, startOffset=10, endOffset=11\n   * @deprecated does not support attributes api\n   */\n  private List<Token> tokens(String str) {\n    String[] arr = str.split(\" \");\n    List<Token> result = new ArrayList<Token>();\n    for (int i=0; i<arr.length; i++) {\n      String[] toks = arr[i].split(\"/\");\n      String[] params = toks[0].split(\",\");\n\n      int posInc;\n      int start;\n      int end;\n\n      if (params.length > 1) {\n        posInc = Integer.parseInt(params[1]);\n      } else {\n        posInc = 1;\n      }\n\n      if (params.length > 2) {\n        start = Integer.parseInt(params[2]);\n      } else {\n        start = 0;\n      }\n\n      if (params.length > 3) {\n        end = Integer.parseInt(params[3]);\n      } else {\n        end = start + params[0].length();\n      }\n\n      Token t = new Token(params[0],start,end,\"TEST\");\n      t.setPositionIncrement(posInc);\n      \n      result.add(t);\n      for (int j=1; j<toks.length; j++) {\n        t = new Token(toks[j],0,0,\"TEST\");\n        t.setPositionIncrement(0);\n        result.add(t);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /***\n   * Return a list of tokens according to a test string format:\n   * a b c  =>  returns List<Token> [a,b,c]\n   * a/b   => tokens a and b share the same spot (b.positionIncrement=0)\n   * a,3/b/c => a,b,c all share same position (a.positionIncrement=3, b.positionIncrement=0, c.positionIncrement=0)\n   * a,1,10,11  => \"a\" with positionIncrement=1, startOffset=10, endOffset=11\n   * @deprecated does not support attributes api\n   */\n  private List<Token> tokens(String str) {\n    String[] arr = str.split(\" \");\n    List<Token> result = new ArrayList<Token>();\n    for (int i=0; i<arr.length; i++) {\n      String[] toks = arr[i].split(\"/\");\n      String[] params = toks[0].split(\",\");\n\n      int posInc;\n      int start;\n      int end;\n\n      if (params.length > 1) {\n        posInc = Integer.parseInt(params[1]);\n      } else {\n        posInc = 1;\n      }\n\n      if (params.length > 2) {\n        start = Integer.parseInt(params[2]);\n      } else {\n        start = 0;\n      }\n\n      if (params.length > 3) {\n        end = Integer.parseInt(params[3]);\n      } else {\n        end = start + params[0].length();\n      }\n\n      Token t = new Token(params[0],start,end,\"TEST\");\n      t.setPositionIncrement(posInc);\n      \n      result.add(t);\n      for (int j=1; j<toks.length; j++) {\n        t = new Token(toks[j],0,0,\"TEST\");\n        t.setPositionIncrement(0);\n        result.add(t);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/analysis/TestSynonymFilter#tokens(String).mjava","pathOld":"/dev/null","sourceNew":"  /***\n   * Return a list of tokens according to a test string format:\n   * a b c  =>  returns List<Token> [a,b,c]\n   * a/b   => tokens a and b share the same spot (b.positionIncrement=0)\n   * a,3/b/c => a,b,c all share same position (a.positionIncrement=3, b.positionIncrement=0, c.positionIncrement=0)\n   * a,1,10,11  => \"a\" with positionIncrement=1, startOffset=10, endOffset=11\n   * @deprecated does not support attributes api\n   */\n  private List<Token> tokens(String str) {\n    String[] arr = str.split(\" \");\n    List<Token> result = new ArrayList<Token>();\n    for (int i=0; i<arr.length; i++) {\n      String[] toks = arr[i].split(\"/\");\n      String[] params = toks[0].split(\",\");\n\n      int posInc;\n      int start;\n      int end;\n\n      if (params.length > 1) {\n        posInc = Integer.parseInt(params[1]);\n      } else {\n        posInc = 1;\n      }\n\n      if (params.length > 2) {\n        start = Integer.parseInt(params[2]);\n      } else {\n        start = 0;\n      }\n\n      if (params.length > 3) {\n        end = Integer.parseInt(params[3]);\n      } else {\n        end = start + params[0].length();\n      }\n\n      Token t = new Token(params[0],start,end,\"TEST\");\n      t.setPositionIncrement(posInc);\n      \n      result.add(t);\n      for (int j=1; j<toks.length; j++) {\n        t = new Token(toks[j],0,0,\"TEST\");\n        t.setPositionIncrement(0);\n        result.add(t);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b59603a30f81d2af70cd2033270521dc7c8ec626","date":1273513065,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilter#tokens(String).mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestSynonymFilter#tokens(String).mjava","sourceNew":"  /***\n   * Return a list of tokens according to a test string format:\n   * a b c  =>  returns List<Token> [a,b,c]\n   * a/b   => tokens a and b share the same spot (b.positionIncrement=0)\n   * a,3/b/c => a,b,c all share same position (a.positionIncrement=3, b.positionIncrement=0, c.positionIncrement=0)\n   * a,1,10,11  => \"a\" with positionIncrement=1, startOffset=10, endOffset=11\n   * @deprecated does not support attributes api\n   */\n  private List<Token> tokens(String str) {\n    String[] arr = str.split(\" \");\n    List<Token> result = new ArrayList<Token>();\n    for (int i=0; i<arr.length; i++) {\n      String[] toks = arr[i].split(\"/\");\n      String[] params = toks[0].split(\",\");\n\n      int posInc;\n      int start;\n      int end;\n\n      if (params.length > 1) {\n        posInc = Integer.parseInt(params[1]);\n      } else {\n        posInc = 1;\n      }\n\n      if (params.length > 2) {\n        start = Integer.parseInt(params[2]);\n      } else {\n        start = 0;\n      }\n\n      if (params.length > 3) {\n        end = Integer.parseInt(params[3]);\n      } else {\n        end = start + params[0].length();\n      }\n\n      Token t = new Token(params[0],start,end,\"TEST\");\n      t.setPositionIncrement(posInc);\n      \n      result.add(t);\n      for (int j=1; j<toks.length; j++) {\n        t = new Token(toks[j],0,0,\"TEST\");\n        t.setPositionIncrement(0);\n        result.add(t);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /***\n   * Return a list of tokens according to a test string format:\n   * a b c  =>  returns List<Token> [a,b,c]\n   * a/b   => tokens a and b share the same spot (b.positionIncrement=0)\n   * a,3/b/c => a,b,c all share same position (a.positionIncrement=3, b.positionIncrement=0, c.positionIncrement=0)\n   * a,1,10,11  => \"a\" with positionIncrement=1, startOffset=10, endOffset=11\n   * @deprecated does not support attributes api\n   */\n  private List<Token> tokens(String str) {\n    String[] arr = str.split(\" \");\n    List<Token> result = new ArrayList<Token>();\n    for (int i=0; i<arr.length; i++) {\n      String[] toks = arr[i].split(\"/\");\n      String[] params = toks[0].split(\",\");\n\n      int posInc;\n      int start;\n      int end;\n\n      if (params.length > 1) {\n        posInc = Integer.parseInt(params[1]);\n      } else {\n        posInc = 1;\n      }\n\n      if (params.length > 2) {\n        start = Integer.parseInt(params[2]);\n      } else {\n        start = 0;\n      }\n\n      if (params.length > 3) {\n        end = Integer.parseInt(params[3]);\n      } else {\n        end = start + params[0].length();\n      }\n\n      Token t = new Token(params[0],start,end,\"TEST\");\n      t.setPositionIncrement(posInc);\n      \n      result.add(t);\n      for (int j=1; j<toks.length; j++) {\n        t = new Token(toks[j],0,0,\"TEST\");\n        t.setPositionIncrement(0);\n        result.add(t);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"b59603a30f81d2af70cd2033270521dc7c8ec626":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b59603a30f81d2af70cd2033270521dc7c8ec626"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["b59603a30f81d2af70cd2033270521dc7c8ec626"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"b59603a30f81d2af70cd2033270521dc7c8ec626":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}