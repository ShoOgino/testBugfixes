{"path":"backwards/src/test/org/apache/lucene/index/TestTransactionRollback#rollBackLast(int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestTransactionRollback#rollBackLast(int).mjava","pathOld":"/dev/null","sourceNew":"  //Rolls back index to a chosen ID\n  private void rollBackLast(int id) throws Exception {\n\t\t\n    // System.out.println(\"Attempting to rollback to \"+id);\n    String ids=\"-\"+id;\n    IndexCommit last=null;\n    Collection commits = IndexReader.listCommits(dir);\n    for (Iterator iterator = commits.iterator(); iterator.hasNext();) {\n      IndexCommit commit = (IndexCommit) iterator.next();\n      Map ud=commit.getUserData();\n      if (ud.size() > 0)\n        if (((String) ud.get(\"index\")).endsWith(ids))\n          last=commit;\n    }\n\n    if (last==null)\n      throw new RuntimeException(\"Couldn't find commit point \"+id);\n\t\t\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(),\n                                    new RollbackDeletionPolicy(id), MaxFieldLength.UNLIMITED, last);\n    Map data = new HashMap();\n    data.put(\"index\", \"Rolled back to 1-\"+id);\n    w.commit(data);\n    w.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestTransactionRollback#rollBackLast(int).mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestTransactionRollback#rollBackLast(int).mjava","sourceNew":"  //Rolls back index to a chosen ID\n  private void rollBackLast(int id) throws Exception {\n\t\t\n    // System.out.println(\"Attempting to rollback to \"+id);\n    String ids=\"-\"+id;\n    IndexCommit last=null;\n    Collection commits = IndexReader.listCommits(dir);\n    for (Iterator iterator = commits.iterator(); iterator.hasNext();) {\n      IndexCommit commit = (IndexCommit) iterator.next();\n      Map ud=commit.getUserData();\n      if (ud.size() > 0)\n        if (((String) ud.get(\"index\")).endsWith(ids))\n          last=commit;\n    }\n\n    if (last==null)\n      throw new RuntimeException(\"Couldn't find commit point \"+id);\n\t\t\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(),\n                                    new RollbackDeletionPolicy(id), MaxFieldLength.UNLIMITED, last);\n    Map data = new HashMap();\n    data.put(\"index\", \"Rolled back to 1-\"+id);\n    w.commit(data);\n    w.close();\n  }\n\n","sourceOld":"  //Rolls back index to a chosen ID\n  private void rollBackLast(int id) throws Exception {\n\t\t\n    // System.out.println(\"Attempting to rollback to \"+id);\n    String ids=\"-\"+id;\n    IndexCommit last=null;\n    Collection commits = IndexReader.listCommits(dir);\n    for (Iterator iterator = commits.iterator(); iterator.hasNext();) {\n      IndexCommit commit = (IndexCommit) iterator.next();\n      Map ud=commit.getUserData();\n      if (ud.size() > 0)\n        if (((String) ud.get(\"index\")).endsWith(ids))\n          last=commit;\n    }\n\n    if (last==null)\n      throw new RuntimeException(\"Couldn't find commit point \"+id);\n\t\t\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(),\n                                    new RollbackDeletionPolicy(id), MaxFieldLength.UNLIMITED, last);\n    Map data = new HashMap();\n    data.put(\"index\", \"Rolled back to 1-\"+id);\n    w.commit(data);\n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}