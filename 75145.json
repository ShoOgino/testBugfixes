{"path":"src/java/org/apache/lucene/search/MultiPhraseQuery#add(Term[],int).mjava","commits":[{"id":"45f06bdc846cdc9b2546a27a8a1492d613e87879","date":1097422035,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiPhraseQuery#add(Term[],int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * \n   * @see PhraseQuery#add(Term, int)\n   * @param terms\n   * @param position\n   */\n  public void add(Term[] terms, int position) {\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n\n    for (int i = 0; i < terms.length; i++) {\n      if (terms[i].field() != field) {\n        throw new IllegalArgumentException(\n            \"All phrase terms must be in the same field (\" + field + \"): \"\n                + terms[i]);\n      }\n    }\n\n    termArrays.add(terms);\n    positions.addElement(new Integer(position));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["860d9cc0c963b5c0db351fb0473b6894b1d96020"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19f758d6efad251890e720eb5370329f6ab5b509","date":1217253519,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiPhraseQuery#add(Term[],int).mjava","pathOld":"src/java/org/apache/lucene/search/MultiPhraseQuery#add(Term[],int).mjava","sourceNew":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * \n   * @see PhraseQuery#add(Term, int)\n   * @param terms\n   * @param position\n   */\n  public void add(Term[] terms, int position) {\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n\n    for (int i = 0; i < terms.length; i++) {\n      if (terms[i].field() != field) {\n        throw new IllegalArgumentException(\n            \"All phrase terms must be in the same field (\" + field + \"): \"\n                + terms[i]);\n      }\n    }\n\n    termArrays.add(terms);\n    positions.add(new Integer(position));\n  }\n\n","sourceOld":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * \n   * @see PhraseQuery#add(Term, int)\n   * @param terms\n   * @param position\n   */\n  public void add(Term[] terms, int position) {\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n\n    for (int i = 0; i < terms.length; i++) {\n      if (terms[i].field() != field) {\n        throw new IllegalArgumentException(\n            \"All phrase terms must be in the same field (\" + field + \"): \"\n                + terms[i]);\n      }\n    }\n\n    termArrays.add(terms);\n    positions.addElement(new Integer(position));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiPhraseQuery#add(Term[],int).mjava","pathOld":"src/java/org/apache/lucene/search/MultiPhraseQuery#add(Term[],int).mjava","sourceNew":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * \n   * @see PhraseQuery#add(Term, int)\n   * @param terms\n   * @param position\n   */\n  public void add(Term[] terms, int position) {\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n\n    for (int i = 0; i < terms.length; i++) {\n      if (terms[i].field() != field) {\n        throw new IllegalArgumentException(\n            \"All phrase terms must be in the same field (\" + field + \"): \"\n                + terms[i]);\n      }\n    }\n\n    termArrays.add(terms);\n    positions.add(Integer.valueOf(position));\n  }\n\n","sourceOld":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * \n   * @see PhraseQuery#add(Term, int)\n   * @param terms\n   * @param position\n   */\n  public void add(Term[] terms, int position) {\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n\n    for (int i = 0; i < terms.length; i++) {\n      if (terms[i].field() != field) {\n        throw new IllegalArgumentException(\n            \"All phrase terms must be in the same field (\" + field + \"): \"\n                + terms[i]);\n      }\n    }\n\n    termArrays.add(terms);\n    positions.add(new Integer(position));\n  }\n\n","bugFix":null,"bugIntro":["860d9cc0c963b5c0db351fb0473b6894b1d96020"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery#add(Term[],int).mjava","pathOld":"src/java/org/apache/lucene/search/MultiPhraseQuery#add(Term[],int).mjava","sourceNew":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * \n   * @see PhraseQuery#add(Term, int)\n   * @param terms\n   * @param position\n   */\n  public void add(Term[] terms, int position) {\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n\n    for (int i = 0; i < terms.length; i++) {\n      if (terms[i].field() != field) {\n        throw new IllegalArgumentException(\n            \"All phrase terms must be in the same field (\" + field + \"): \"\n                + terms[i]);\n      }\n    }\n\n    termArrays.add(terms);\n    positions.add(Integer.valueOf(position));\n  }\n\n","sourceOld":"  /**\n   * Allows to specify the relative position of terms within the phrase.\n   * \n   * @see PhraseQuery#add(Term, int)\n   * @param terms\n   * @param position\n   */\n  public void add(Term[] terms, int position) {\n    if (termArrays.size() == 0)\n      field = terms[0].field();\n\n    for (int i = 0; i < terms.length; i++) {\n      if (terms[i].field() != field) {\n        throw new IllegalArgumentException(\n            \"All phrase terms must be in the same field (\" + field + \"): \"\n                + terms[i]);\n      }\n    }\n\n    termArrays.add(terms);\n    positions.add(Integer.valueOf(position));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"19f758d6efad251890e720eb5370329f6ab5b509":["45f06bdc846cdc9b2546a27a8a1492d613e87879"],"6bcde5e3f23911110baa101ed062b544162825b5":["19f758d6efad251890e720eb5370329f6ab5b509"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45f06bdc846cdc9b2546a27a8a1492d613e87879":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6bcde5e3f23911110baa101ed062b544162825b5"]},"commit2Childs":{"19f758d6efad251890e720eb5370329f6ab5b509":["6bcde5e3f23911110baa101ed062b544162825b5"],"6bcde5e3f23911110baa101ed062b544162825b5":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45f06bdc846cdc9b2546a27a8a1492d613e87879"],"45f06bdc846cdc9b2546a27a8a1492d613e87879":["19f758d6efad251890e720eb5370329f6ab5b509"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}