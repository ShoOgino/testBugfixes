{"path":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyReplicationClientTest.IndexAndTaxonomyReadyCallback#call().mjava","commits":[{"id":"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4","date":1368446242,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyReplicationClientTest.IndexAndTaxonomyReadyCallback#call().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Boolean call() throws Exception {\n      if (indexReader == null) {\n        indexReader = DirectoryReader.open(indexDir);\n        lastIndexGeneration = indexReader.getIndexCommit().getGeneration();\n        taxoReader = new DirectoryTaxonomyReader(taxoDir);\n      } else {\n        // verify search index\n        DirectoryReader newReader = DirectoryReader.openIfChanged(indexReader);\n        assertNotNull(\"should not have reached here if no changes were made to the index\", newReader);\n        long newGeneration = newReader.getIndexCommit().getGeneration();\n        assertTrue(\"expected newer generation; current=\" + lastIndexGeneration + \" new=\" + newGeneration, newGeneration > lastIndexGeneration);\n        indexReader.close();\n        indexReader = newReader;\n        lastIndexGeneration = newGeneration;\n        _TestUtil.checkIndex(indexDir);\n        \n        // verify taxonomy index\n        DirectoryTaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(taxoReader);\n        if (newTaxoReader != null) {\n          taxoReader.close();\n          taxoReader = newTaxoReader;\n        }\n        _TestUtil.checkIndex(taxoDir);\n        \n        // verify faceted search\n        int id = Integer.parseInt(indexReader.getIndexCommit().getUserData().get(VERSION_ID), 16);\n        CategoryPath cp = new CategoryPath(\"A\", Integer.toString(id, 16));\n        IndexSearcher searcher = new IndexSearcher(indexReader);\n        FacetsCollector fc = FacetsCollector.create(new FacetSearchParams(new CountFacetRequest(cp, 10)), indexReader, taxoReader);\n        searcher.search(new MatchAllDocsQuery(), fc);\n        assertEquals(1, (int) fc.getFacetResults().get(0).getFacetResultNode().value);\n        \n        DrillDownQuery drillDown = new DrillDownQuery(FacetIndexingParams.DEFAULT);\n        drillDown.add(cp);\n        TopDocs docs = searcher.search(drillDown, 10);\n        assertEquals(1, docs.totalHits);\n      }\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyReplicationClientTest.IndexAndTaxonomyReadyCallback#call().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyReplicationClientTest.IndexAndTaxonomyReadyCallback#call().mjava","sourceNew":"    @Override\n    public Boolean call() throws Exception {\n      if (indexReader == null) {\n        indexReader = DirectoryReader.open(indexDir);\n        lastIndexGeneration = indexReader.getIndexCommit().getGeneration();\n        taxoReader = new DirectoryTaxonomyReader(taxoDir);\n      } else {\n        // verify search index\n        DirectoryReader newReader = DirectoryReader.openIfChanged(indexReader);\n        assertNotNull(\"should not have reached here if no changes were made to the index\", newReader);\n        long newGeneration = newReader.getIndexCommit().getGeneration();\n        assertTrue(\"expected newer generation; current=\" + lastIndexGeneration + \" new=\" + newGeneration, newGeneration > lastIndexGeneration);\n        indexReader.close();\n        indexReader = newReader;\n        lastIndexGeneration = newGeneration;\n        _TestUtil.checkIndex(indexDir);\n        \n        // verify taxonomy index\n        DirectoryTaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(taxoReader);\n        if (newTaxoReader != null) {\n          taxoReader.close();\n          taxoReader = newTaxoReader;\n        }\n        _TestUtil.checkIndex(taxoDir);\n        \n        // verify faceted search\n        int id = Integer.parseInt(indexReader.getIndexCommit().getUserData().get(VERSION_ID), 16);\n        CategoryPath cp = new CategoryPath(\"A\", Integer.toString(id, 16));\n        IndexSearcher searcher = new IndexSearcher(indexReader);\n        FacetsCollector fc = FacetsCollector.create(new FacetSearchParams(new CountFacetRequest(cp, 10)), indexReader, taxoReader);\n        searcher.search(new MatchAllDocsQuery(), fc);\n        assertEquals(1, (int) fc.getFacetResults().get(0).getFacetResultNode().value);\n        \n        DrillDownQuery drillDown = new DrillDownQuery(FacetIndexingParams.DEFAULT);\n        drillDown.add(cp);\n        TopDocs docs = searcher.search(drillDown, 10);\n        assertEquals(1, docs.totalHits);\n      }\n      return null;\n    }\n\n","sourceOld":"    @Override\n    public Boolean call() throws Exception {\n      if (indexReader == null) {\n        indexReader = DirectoryReader.open(indexDir);\n        lastIndexGeneration = indexReader.getIndexCommit().getGeneration();\n        taxoReader = new DirectoryTaxonomyReader(taxoDir);\n      } else {\n        // verify search index\n        DirectoryReader newReader = DirectoryReader.openIfChanged(indexReader);\n        assertNotNull(\"should not have reached here if no changes were made to the index\", newReader);\n        long newGeneration = newReader.getIndexCommit().getGeneration();\n        assertTrue(\"expected newer generation; current=\" + lastIndexGeneration + \" new=\" + newGeneration, newGeneration > lastIndexGeneration);\n        indexReader.close();\n        indexReader = newReader;\n        lastIndexGeneration = newGeneration;\n        _TestUtil.checkIndex(indexDir);\n        \n        // verify taxonomy index\n        DirectoryTaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(taxoReader);\n        if (newTaxoReader != null) {\n          taxoReader.close();\n          taxoReader = newTaxoReader;\n        }\n        _TestUtil.checkIndex(taxoDir);\n        \n        // verify faceted search\n        int id = Integer.parseInt(indexReader.getIndexCommit().getUserData().get(VERSION_ID), 16);\n        CategoryPath cp = new CategoryPath(\"A\", Integer.toString(id, 16));\n        IndexSearcher searcher = new IndexSearcher(indexReader);\n        FacetsCollector fc = FacetsCollector.create(new FacetSearchParams(new CountFacetRequest(cp, 10)), indexReader, taxoReader);\n        searcher.search(new MatchAllDocsQuery(), fc);\n        assertEquals(1, (int) fc.getFacetResults().get(0).getFacetResultNode().value);\n        \n        DrillDownQuery drillDown = new DrillDownQuery(FacetIndexingParams.DEFAULT);\n        drillDown.add(cp);\n        TopDocs docs = searcher.search(drillDown, 10);\n        assertEquals(1, docs.totalHits);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyReplicationClientTest.IndexAndTaxonomyReadyCallback#call().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyReplicationClientTest.IndexAndTaxonomyReadyCallback#call().mjava","sourceNew":"    @Override\n    public Boolean call() throws Exception {\n      if (indexReader == null) {\n        indexReader = DirectoryReader.open(indexDir);\n        lastIndexGeneration = indexReader.getIndexCommit().getGeneration();\n        taxoReader = new DirectoryTaxonomyReader(taxoDir);\n      } else {\n        // verify search index\n        DirectoryReader newReader = DirectoryReader.openIfChanged(indexReader);\n        assertNotNull(\"should not have reached here if no changes were made to the index\", newReader);\n        long newGeneration = newReader.getIndexCommit().getGeneration();\n        assertTrue(\"expected newer generation; current=\" + lastIndexGeneration + \" new=\" + newGeneration, newGeneration > lastIndexGeneration);\n        indexReader.close();\n        indexReader = newReader;\n        lastIndexGeneration = newGeneration;\n        _TestUtil.checkIndex(indexDir);\n        \n        // verify taxonomy index\n        DirectoryTaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(taxoReader);\n        if (newTaxoReader != null) {\n          taxoReader.close();\n          taxoReader = newTaxoReader;\n        }\n        _TestUtil.checkIndex(taxoDir);\n        \n        // verify faceted search\n        int id = Integer.parseInt(indexReader.getIndexCommit().getUserData().get(VERSION_ID), 16);\n        CategoryPath cp = new CategoryPath(\"A\", Integer.toString(id, 16));\n        IndexSearcher searcher = new IndexSearcher(indexReader);\n        FacetsCollector fc = FacetsCollector.create(new FacetSearchParams(new CountFacetRequest(cp, 10)), indexReader, taxoReader);\n        searcher.search(new MatchAllDocsQuery(), fc);\n        assertEquals(1, (int) fc.getFacetResults().get(0).getFacetResultNode().value);\n        \n        DrillDownQuery drillDown = new DrillDownQuery(FacetIndexingParams.DEFAULT);\n        drillDown.add(cp);\n        TopDocs docs = searcher.search(drillDown, 10);\n        assertEquals(1, docs.totalHits);\n      }\n      return null;\n    }\n\n","sourceOld":"    @Override\n    public Boolean call() throws Exception {\n      if (indexReader == null) {\n        indexReader = DirectoryReader.open(indexDir);\n        lastIndexGeneration = indexReader.getIndexCommit().getGeneration();\n        taxoReader = new DirectoryTaxonomyReader(taxoDir);\n      } else {\n        // verify search index\n        DirectoryReader newReader = DirectoryReader.openIfChanged(indexReader);\n        assertNotNull(\"should not have reached here if no changes were made to the index\", newReader);\n        long newGeneration = newReader.getIndexCommit().getGeneration();\n        assertTrue(\"expected newer generation; current=\" + lastIndexGeneration + \" new=\" + newGeneration, newGeneration > lastIndexGeneration);\n        indexReader.close();\n        indexReader = newReader;\n        lastIndexGeneration = newGeneration;\n        _TestUtil.checkIndex(indexDir);\n        \n        // verify taxonomy index\n        DirectoryTaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(taxoReader);\n        if (newTaxoReader != null) {\n          taxoReader.close();\n          taxoReader = newTaxoReader;\n        }\n        _TestUtil.checkIndex(taxoDir);\n        \n        // verify faceted search\n        int id = Integer.parseInt(indexReader.getIndexCommit().getUserData().get(VERSION_ID), 16);\n        CategoryPath cp = new CategoryPath(\"A\", Integer.toString(id, 16));\n        IndexSearcher searcher = new IndexSearcher(indexReader);\n        FacetsCollector fc = FacetsCollector.create(new FacetSearchParams(new CountFacetRequest(cp, 10)), indexReader, taxoReader);\n        searcher.search(new MatchAllDocsQuery(), fc);\n        assertEquals(1, (int) fc.getFacetResults().get(0).getFacetResultNode().value);\n        \n        DrillDownQuery drillDown = new DrillDownQuery(FacetIndexingParams.DEFAULT);\n        drillDown.add(cp);\n        TopDocs docs = searcher.search(drillDown, 10);\n        assertEquals(1, docs.totalHits);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyReplicationClientTest.IndexAndTaxonomyReadyCallback#call().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyReplicationClientTest.IndexAndTaxonomyReadyCallback#call().mjava","sourceNew":"    @Override\n    public Boolean call() throws Exception {\n      if (indexReader == null) {\n        indexReader = DirectoryReader.open(indexDir);\n        lastIndexGeneration = indexReader.getIndexCommit().getGeneration();\n        taxoReader = new DirectoryTaxonomyReader(taxoDir);\n      } else {\n        // verify search index\n        DirectoryReader newReader = DirectoryReader.openIfChanged(indexReader);\n        assertNotNull(\"should not have reached here if no changes were made to the index\", newReader);\n        long newGeneration = newReader.getIndexCommit().getGeneration();\n        assertTrue(\"expected newer generation; current=\" + lastIndexGeneration + \" new=\" + newGeneration, newGeneration > lastIndexGeneration);\n        indexReader.close();\n        indexReader = newReader;\n        lastIndexGeneration = newGeneration;\n        _TestUtil.checkIndex(indexDir);\n        \n        // verify taxonomy index\n        DirectoryTaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(taxoReader);\n        if (newTaxoReader != null) {\n          taxoReader.close();\n          taxoReader = newTaxoReader;\n        }\n        _TestUtil.checkIndex(taxoDir);\n        \n        // verify faceted search\n        int id = Integer.parseInt(indexReader.getIndexCommit().getUserData().get(VERSION_ID), 16);\n        FacetLabel cp = new FacetLabel(\"A\", Integer.toString(id, 16));\n        IndexSearcher searcher = new IndexSearcher(indexReader);\n        FacetsCollector fc = FacetsCollector.create(new FacetSearchParams(new CountFacetRequest(cp, 10)), indexReader, taxoReader);\n        searcher.search(new MatchAllDocsQuery(), fc);\n        assertEquals(1, (int) fc.getFacetResults().get(0).getFacetResultNode().value);\n        \n        DrillDownQuery drillDown = new DrillDownQuery(FacetIndexingParams.DEFAULT);\n        drillDown.add(cp);\n        TopDocs docs = searcher.search(drillDown, 10);\n        assertEquals(1, docs.totalHits);\n      }\n      return null;\n    }\n\n","sourceOld":"    @Override\n    public Boolean call() throws Exception {\n      if (indexReader == null) {\n        indexReader = DirectoryReader.open(indexDir);\n        lastIndexGeneration = indexReader.getIndexCommit().getGeneration();\n        taxoReader = new DirectoryTaxonomyReader(taxoDir);\n      } else {\n        // verify search index\n        DirectoryReader newReader = DirectoryReader.openIfChanged(indexReader);\n        assertNotNull(\"should not have reached here if no changes were made to the index\", newReader);\n        long newGeneration = newReader.getIndexCommit().getGeneration();\n        assertTrue(\"expected newer generation; current=\" + lastIndexGeneration + \" new=\" + newGeneration, newGeneration > lastIndexGeneration);\n        indexReader.close();\n        indexReader = newReader;\n        lastIndexGeneration = newGeneration;\n        _TestUtil.checkIndex(indexDir);\n        \n        // verify taxonomy index\n        DirectoryTaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(taxoReader);\n        if (newTaxoReader != null) {\n          taxoReader.close();\n          taxoReader = newTaxoReader;\n        }\n        _TestUtil.checkIndex(taxoDir);\n        \n        // verify faceted search\n        int id = Integer.parseInt(indexReader.getIndexCommit().getUserData().get(VERSION_ID), 16);\n        CategoryPath cp = new CategoryPath(\"A\", Integer.toString(id, 16));\n        IndexSearcher searcher = new IndexSearcher(indexReader);\n        FacetsCollector fc = FacetsCollector.create(new FacetSearchParams(new CountFacetRequest(cp, 10)), indexReader, taxoReader);\n        searcher.search(new MatchAllDocsQuery(), fc);\n        assertEquals(1, (int) fc.getFacetResults().get(0).getFacetResultNode().value);\n        \n        DrillDownQuery drillDown = new DrillDownQuery(FacetIndexingParams.DEFAULT);\n        drillDown.add(cp);\n        TopDocs docs = searcher.search(drillDown, 10);\n        assertEquals(1, docs.totalHits);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyReplicationClientTest.IndexAndTaxonomyReadyCallback#call().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyReplicationClientTest.IndexAndTaxonomyReadyCallback#call().mjava","sourceNew":"    @Override\n    public Boolean call() throws Exception {\n      if (indexReader == null) {\n        indexReader = DirectoryReader.open(indexDir);\n        lastIndexGeneration = indexReader.getIndexCommit().getGeneration();\n        taxoReader = new DirectoryTaxonomyReader(taxoDir);\n      } else {\n        // verify search index\n        DirectoryReader newReader = DirectoryReader.openIfChanged(indexReader);\n        assertNotNull(\"should not have reached here if no changes were made to the index\", newReader);\n        long newGeneration = newReader.getIndexCommit().getGeneration();\n        assertTrue(\"expected newer generation; current=\" + lastIndexGeneration + \" new=\" + newGeneration, newGeneration > lastIndexGeneration);\n        indexReader.close();\n        indexReader = newReader;\n        lastIndexGeneration = newGeneration;\n        _TestUtil.checkIndex(indexDir);\n        \n        // verify taxonomy index\n        DirectoryTaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(taxoReader);\n        if (newTaxoReader != null) {\n          taxoReader.close();\n          taxoReader = newTaxoReader;\n        }\n        _TestUtil.checkIndex(taxoDir);\n        \n        // verify faceted search\n        int id = Integer.parseInt(indexReader.getIndexCommit().getUserData().get(VERSION_ID), 16);\n        IndexSearcher searcher = new IndexSearcher(indexReader);\n        FacetsCollector fc = new FacetsCollector();\n        searcher.search(new MatchAllDocsQuery(), fc);\n        Facets facets = new FastTaxonomyFacetCounts(taxoReader, config, fc);\n        assertEquals(1, facets.getSpecificValue(\"A\", Integer.toString(id, 16)).intValue());\n        \n        DrillDownQuery drillDown = new DrillDownQuery(config);\n        drillDown.add(\"A\", Integer.toString(id, 16));\n        TopDocs docs = searcher.search(drillDown, 10);\n        assertEquals(1, docs.totalHits);\n      }\n      return null;\n    }\n\n","sourceOld":"    @Override\n    public Boolean call() throws Exception {\n      if (indexReader == null) {\n        indexReader = DirectoryReader.open(indexDir);\n        lastIndexGeneration = indexReader.getIndexCommit().getGeneration();\n        taxoReader = new DirectoryTaxonomyReader(taxoDir);\n      } else {\n        // verify search index\n        DirectoryReader newReader = DirectoryReader.openIfChanged(indexReader);\n        assertNotNull(\"should not have reached here if no changes were made to the index\", newReader);\n        long newGeneration = newReader.getIndexCommit().getGeneration();\n        assertTrue(\"expected newer generation; current=\" + lastIndexGeneration + \" new=\" + newGeneration, newGeneration > lastIndexGeneration);\n        indexReader.close();\n        indexReader = newReader;\n        lastIndexGeneration = newGeneration;\n        _TestUtil.checkIndex(indexDir);\n        \n        // verify taxonomy index\n        DirectoryTaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(taxoReader);\n        if (newTaxoReader != null) {\n          taxoReader.close();\n          taxoReader = newTaxoReader;\n        }\n        _TestUtil.checkIndex(taxoDir);\n        \n        // verify faceted search\n        int id = Integer.parseInt(indexReader.getIndexCommit().getUserData().get(VERSION_ID), 16);\n        FacetLabel cp = new FacetLabel(\"A\", Integer.toString(id, 16));\n        IndexSearcher searcher = new IndexSearcher(indexReader);\n        FacetsCollector fc = FacetsCollector.create(new FacetSearchParams(new CountFacetRequest(cp, 10)), indexReader, taxoReader);\n        searcher.search(new MatchAllDocsQuery(), fc);\n        assertEquals(1, (int) fc.getFacetResults().get(0).getFacetResultNode().value);\n        \n        DrillDownQuery drillDown = new DrillDownQuery(FacetIndexingParams.DEFAULT);\n        drillDown.add(cp);\n        TopDocs docs = searcher.search(drillDown, 10);\n        assertEquals(1, docs.totalHits);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyReplicationClientTest.IndexAndTaxonomyReadyCallback#call().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyReplicationClientTest.IndexAndTaxonomyReadyCallback#call().mjava","sourceNew":"    @Override\n    public Boolean call() throws Exception {\n      if (indexReader == null) {\n        indexReader = DirectoryReader.open(indexDir);\n        lastIndexGeneration = indexReader.getIndexCommit().getGeneration();\n        taxoReader = new DirectoryTaxonomyReader(taxoDir);\n      } else {\n        // verify search index\n        DirectoryReader newReader = DirectoryReader.openIfChanged(indexReader);\n        assertNotNull(\"should not have reached here if no changes were made to the index\", newReader);\n        long newGeneration = newReader.getIndexCommit().getGeneration();\n        assertTrue(\"expected newer generation; current=\" + lastIndexGeneration + \" new=\" + newGeneration, newGeneration > lastIndexGeneration);\n        indexReader.close();\n        indexReader = newReader;\n        lastIndexGeneration = newGeneration;\n        _TestUtil.checkIndex(indexDir);\n        \n        // verify taxonomy index\n        DirectoryTaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(taxoReader);\n        if (newTaxoReader != null) {\n          taxoReader.close();\n          taxoReader = newTaxoReader;\n        }\n        _TestUtil.checkIndex(taxoDir);\n        \n        // verify faceted search\n        int id = Integer.parseInt(indexReader.getIndexCommit().getUserData().get(VERSION_ID), 16);\n        IndexSearcher searcher = new IndexSearcher(indexReader);\n        FacetsCollector fc = new FacetsCollector();\n        searcher.search(new MatchAllDocsQuery(), fc);\n        Facets facets = new FastTaxonomyFacetCounts(taxoReader, config, fc);\n        assertEquals(1, facets.getSpecificValue(\"A\", Integer.toString(id, 16)).intValue());\n        \n        DrillDownQuery drillDown = new DrillDownQuery(config);\n        drillDown.add(\"A\", Integer.toString(id, 16));\n        TopDocs docs = searcher.search(drillDown, 10);\n        assertEquals(1, docs.totalHits);\n      }\n      return null;\n    }\n\n","sourceOld":"    @Override\n    public Boolean call() throws Exception {\n      if (indexReader == null) {\n        indexReader = DirectoryReader.open(indexDir);\n        lastIndexGeneration = indexReader.getIndexCommit().getGeneration();\n        taxoReader = new DirectoryTaxonomyReader(taxoDir);\n      } else {\n        // verify search index\n        DirectoryReader newReader = DirectoryReader.openIfChanged(indexReader);\n        assertNotNull(\"should not have reached here if no changes were made to the index\", newReader);\n        long newGeneration = newReader.getIndexCommit().getGeneration();\n        assertTrue(\"expected newer generation; current=\" + lastIndexGeneration + \" new=\" + newGeneration, newGeneration > lastIndexGeneration);\n        indexReader.close();\n        indexReader = newReader;\n        lastIndexGeneration = newGeneration;\n        _TestUtil.checkIndex(indexDir);\n        \n        // verify taxonomy index\n        DirectoryTaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(taxoReader);\n        if (newTaxoReader != null) {\n          taxoReader.close();\n          taxoReader = newTaxoReader;\n        }\n        _TestUtil.checkIndex(taxoDir);\n        \n        // verify faceted search\n        int id = Integer.parseInt(indexReader.getIndexCommit().getUserData().get(VERSION_ID), 16);\n        CategoryPath cp = new CategoryPath(\"A\", Integer.toString(id, 16));\n        IndexSearcher searcher = new IndexSearcher(indexReader);\n        FacetsCollector fc = FacetsCollector.create(new FacetSearchParams(new CountFacetRequest(cp, 10)), indexReader, taxoReader);\n        searcher.search(new MatchAllDocsQuery(), fc);\n        assertEquals(1, (int) fc.getFacetResults().get(0).getFacetResultNode().value);\n        \n        DrillDownQuery drillDown = new DrillDownQuery(FacetIndexingParams.DEFAULT);\n        drillDown.add(cp);\n        TopDocs docs = searcher.search(drillDown, 10);\n        assertEquals(1, docs.totalHits);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyReplicationClientTest.IndexAndTaxonomyReadyCallback#call().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyReplicationClientTest.IndexAndTaxonomyReadyCallback#call().mjava","sourceNew":"    @Override\n    public Boolean call() throws Exception {\n      if (indexReader == null) {\n        indexReader = DirectoryReader.open(indexDir);\n        lastIndexGeneration = indexReader.getIndexCommit().getGeneration();\n        taxoReader = new DirectoryTaxonomyReader(taxoDir);\n      } else {\n        // verify search index\n        DirectoryReader newReader = DirectoryReader.openIfChanged(indexReader);\n        assertNotNull(\"should not have reached here if no changes were made to the index\", newReader);\n        long newGeneration = newReader.getIndexCommit().getGeneration();\n        assertTrue(\"expected newer generation; current=\" + lastIndexGeneration + \" new=\" + newGeneration, newGeneration > lastIndexGeneration);\n        indexReader.close();\n        indexReader = newReader;\n        lastIndexGeneration = newGeneration;\n        TestUtil.checkIndex(indexDir);\n        \n        // verify taxonomy index\n        DirectoryTaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(taxoReader);\n        if (newTaxoReader != null) {\n          taxoReader.close();\n          taxoReader = newTaxoReader;\n        }\n        TestUtil.checkIndex(taxoDir);\n        \n        // verify faceted search\n        int id = Integer.parseInt(indexReader.getIndexCommit().getUserData().get(VERSION_ID), 16);\n        IndexSearcher searcher = new IndexSearcher(indexReader);\n        FacetsCollector fc = new FacetsCollector();\n        searcher.search(new MatchAllDocsQuery(), fc);\n        Facets facets = new FastTaxonomyFacetCounts(taxoReader, config, fc);\n        assertEquals(1, facets.getSpecificValue(\"A\", Integer.toString(id, 16)).intValue());\n        \n        DrillDownQuery drillDown = new DrillDownQuery(config);\n        drillDown.add(\"A\", Integer.toString(id, 16));\n        TopDocs docs = searcher.search(drillDown, 10);\n        assertEquals(1, docs.totalHits);\n      }\n      return null;\n    }\n\n","sourceOld":"    @Override\n    public Boolean call() throws Exception {\n      if (indexReader == null) {\n        indexReader = DirectoryReader.open(indexDir);\n        lastIndexGeneration = indexReader.getIndexCommit().getGeneration();\n        taxoReader = new DirectoryTaxonomyReader(taxoDir);\n      } else {\n        // verify search index\n        DirectoryReader newReader = DirectoryReader.openIfChanged(indexReader);\n        assertNotNull(\"should not have reached here if no changes were made to the index\", newReader);\n        long newGeneration = newReader.getIndexCommit().getGeneration();\n        assertTrue(\"expected newer generation; current=\" + lastIndexGeneration + \" new=\" + newGeneration, newGeneration > lastIndexGeneration);\n        indexReader.close();\n        indexReader = newReader;\n        lastIndexGeneration = newGeneration;\n        _TestUtil.checkIndex(indexDir);\n        \n        // verify taxonomy index\n        DirectoryTaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(taxoReader);\n        if (newTaxoReader != null) {\n          taxoReader.close();\n          taxoReader = newTaxoReader;\n        }\n        _TestUtil.checkIndex(taxoDir);\n        \n        // verify faceted search\n        int id = Integer.parseInt(indexReader.getIndexCommit().getUserData().get(VERSION_ID), 16);\n        IndexSearcher searcher = new IndexSearcher(indexReader);\n        FacetsCollector fc = new FacetsCollector();\n        searcher.search(new MatchAllDocsQuery(), fc);\n        Facets facets = new FastTaxonomyFacetCounts(taxoReader, config, fc);\n        assertEquals(1, facets.getSpecificValue(\"A\", Integer.toString(id, 16)).intValue());\n        \n        DrillDownQuery drillDown = new DrillDownQuery(config);\n        drillDown.add(\"A\", Integer.toString(id, 16));\n        TopDocs docs = searcher.search(drillDown, 10);\n        assertEquals(1, docs.totalHits);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyReplicationClientTest.IndexAndTaxonomyReadyCallback#call().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyReplicationClientTest.IndexAndTaxonomyReadyCallback#call().mjava","sourceNew":"    @Override\n    public Boolean call() throws Exception {\n      if (indexReader == null) {\n        indexReader = DirectoryReader.open(indexDir);\n        lastIndexGeneration = indexReader.getIndexCommit().getGeneration();\n        taxoReader = new DirectoryTaxonomyReader(taxoDir);\n      } else {\n        // verify search index\n        DirectoryReader newReader = DirectoryReader.openIfChanged(indexReader);\n        assertNotNull(\"should not have reached here if no changes were made to the index\", newReader);\n        long newGeneration = newReader.getIndexCommit().getGeneration();\n        assertTrue(\"expected newer generation; current=\" + lastIndexGeneration + \" new=\" + newGeneration, newGeneration > lastIndexGeneration);\n        indexReader.close();\n        indexReader = newReader;\n        lastIndexGeneration = newGeneration;\n        TestUtil.checkIndex(indexDir);\n        \n        // verify taxonomy index\n        DirectoryTaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(taxoReader);\n        if (newTaxoReader != null) {\n          taxoReader.close();\n          taxoReader = newTaxoReader;\n        }\n        TestUtil.checkIndex(taxoDir);\n        \n        // verify faceted search\n        int id = Integer.parseInt(indexReader.getIndexCommit().getUserData().get(VERSION_ID), 16);\n        IndexSearcher searcher = new IndexSearcher(indexReader);\n        FacetsCollector fc = new FacetsCollector();\n        searcher.search(new MatchAllDocsQuery(), fc);\n        Facets facets = new FastTaxonomyFacetCounts(taxoReader, config, fc);\n        assertEquals(1, facets.getSpecificValue(\"A\", Integer.toString(id, 16)).intValue());\n        \n        DrillDownQuery drillDown = new DrillDownQuery(config);\n        drillDown.add(\"A\", Integer.toString(id, 16));\n        TopDocs docs = searcher.search(drillDown, 10);\n        assertEquals(1, docs.totalHits.value);\n      }\n      return null;\n    }\n\n","sourceOld":"    @Override\n    public Boolean call() throws Exception {\n      if (indexReader == null) {\n        indexReader = DirectoryReader.open(indexDir);\n        lastIndexGeneration = indexReader.getIndexCommit().getGeneration();\n        taxoReader = new DirectoryTaxonomyReader(taxoDir);\n      } else {\n        // verify search index\n        DirectoryReader newReader = DirectoryReader.openIfChanged(indexReader);\n        assertNotNull(\"should not have reached here if no changes were made to the index\", newReader);\n        long newGeneration = newReader.getIndexCommit().getGeneration();\n        assertTrue(\"expected newer generation; current=\" + lastIndexGeneration + \" new=\" + newGeneration, newGeneration > lastIndexGeneration);\n        indexReader.close();\n        indexReader = newReader;\n        lastIndexGeneration = newGeneration;\n        TestUtil.checkIndex(indexDir);\n        \n        // verify taxonomy index\n        DirectoryTaxonomyReader newTaxoReader = TaxonomyReader.openIfChanged(taxoReader);\n        if (newTaxoReader != null) {\n          taxoReader.close();\n          taxoReader = newTaxoReader;\n        }\n        TestUtil.checkIndex(taxoDir);\n        \n        // verify faceted search\n        int id = Integer.parseInt(indexReader.getIndexCommit().getUserData().get(VERSION_ID), 16);\n        IndexSearcher searcher = new IndexSearcher(indexReader);\n        FacetsCollector fc = new FacetsCollector();\n        searcher.search(new MatchAllDocsQuery(), fc);\n        Facets facets = new FastTaxonomyFacetCounts(taxoReader, config, fc);\n        assertEquals(1, facets.getSpecificValue(\"A\", Integer.toString(id, 16)).intValue());\n        \n        DrillDownQuery drillDown = new DrillDownQuery(config);\n        drillDown.add(\"A\", Integer.toString(id, 16));\n        TopDocs docs = searcher.search(drillDown, 10);\n        assertEquals(1, docs.totalHits);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6613659748fe4411a7dcf85266e55db1f95f7315":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["19275ba31e621f6da1b83bf13af75233876fd3d4","21d36d0db865f7b84026b447bec653469a6e66df"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"21d36d0db865f7b84026b447bec653469a6e66df":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["6613659748fe4411a7dcf85266e55db1f95f7315"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["21d36d0db865f7b84026b447bec653469a6e66df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}