{"path":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrServer).mjava","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness,String testServerBaseUrl, CloudSolrClient cloudSolrServer) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl ==null?  getRespMap(uri,writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl+uri ,cloudSolrServer) ;\n      if(null == ConfigOverlay.getObjectByPath(m,  true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\",\"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue( \"Could not delete requestHandler  \", success);\n\n  }\n\n","sourceOld":"  public static void reqhandlertests(RestTestHarness writeHarness,String testServerBaseUrl, CloudSolrServer cloudSolrServer) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl ==null?  getRespMap(uri,writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl+uri ,cloudSolrServer) ;\n      if(null == ConfigOverlay.getObjectByPath(m,  true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\",\"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue( \"Could not delete requestHandler  \", success);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"432e578be72da02cfde62dcc7fb4fa8620bc85fd","date":1420557072,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness,String testServerBaseUrl, CloudSolrClient cloudSolrServer) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val'}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrServer,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl ==null?  getRespMap(uri,writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl+uri ,cloudSolrServer) ;\n      if(null == ConfigOverlay.getObjectByPath(m,  true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\",\"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue( \"Could not delete requestHandler  \", success);\n\n  }\n\n","sourceOld":"  public static void reqhandlertests(RestTestHarness writeHarness,String testServerBaseUrl, CloudSolrClient cloudSolrServer) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl ==null?  getRespMap(uri,writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl+uri ,cloudSolrServer) ;\n      if(null == ConfigOverlay.getObjectByPath(m,  true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\",\"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue( \"Could not delete requestHandler  \", success);\n\n  }\n\n","bugFix":null,"bugIntro":["6827268e62848e1e9e42b995c30c14f69a369389","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1","date":1423220905,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness,String testServerBaseUrl, CloudSolrClient cloudSolrServer) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val'}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrServer,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl ==null?  getRespMap(uri,writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl+uri ,cloudSolrServer) ;\n      if(null == ConfigOverlay.getObjectByPath(m,  true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\",\"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue( \"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n   //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\",\"mytrans\",\"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n  }\n\n","sourceOld":"  public static void reqhandlertests(RestTestHarness writeHarness,String testServerBaseUrl, CloudSolrClient cloudSolrServer) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val'}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrServer,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl ==null?  getRespMap(uri,writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl+uri ,cloudSolrServer) ;\n      if(null == ConfigOverlay.getObjectByPath(m,  true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\",\"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue( \"Could not delete requestHandler  \", success);\n\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae2f5be890d26585d438eba0b9cc7d3c0a9775be","date":1427387954,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrServer) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val'}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrServer,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrServer);\n      if (null == ConfigOverlay.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n    payload = \"{\\n\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map =  testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n    List l = (List) ConfigOverlay.getObjectByPath(map,false, Arrays.asList(\"config\", \"initParams\"));\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n\n\n  }\n\n","sourceOld":"  public static void reqhandlertests(RestTestHarness writeHarness,String testServerBaseUrl, CloudSolrClient cloudSolrServer) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val'}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrServer,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl ==null?  getRespMap(uri,writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl+uri ,cloudSolrServer) ;\n      if(null == ConfigOverlay.getObjectByPath(m,  true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\",\"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue( \"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n   //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\",\"mytrans\",\"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5da69d834fe035a64a0edb3884749ba5f174edb8","date":1427420348,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrServer) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val'}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrServer,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrServer);\n      if (null == ConfigOverlay.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n    payload = \"{\\n\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map =  testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n//    List l = (List) ConfigOverlay.getObjectByPath(map,false, Arrays.asList(\"config\", \"initParams\"));\n//    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n//    assertEquals( 1, l.size());\n//    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n  }\n\n","sourceOld":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrServer) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val'}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrServer,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrServer);\n      if (null == ConfigOverlay.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n    payload = \"{\\n\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map =  testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n    List l = (List) ConfigOverlay.getObjectByPath(map,false, Arrays.asList(\"config\", \"initParams\"));\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f9af40d645dbfe787d14c1131d1e753ea84e8970","date":1427478614,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrServer) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val'}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrServer,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrServer);\n      if (null == ConfigOverlay.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) ConfigOverlay.getObjectByPath(map,false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n  }\n\n","sourceOld":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrServer) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val'}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrServer,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrServer);\n      if (null == ConfigOverlay.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n    payload = \"{\\n\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map =  testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n//    List l = (List) ConfigOverlay.getObjectByPath(map,false, Arrays.asList(\"config\", \"initParams\"));\n//    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n//    assertEquals( 1, l.size());\n//    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrServer) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val'}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrServer,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrServer);\n      if (null == ConfigOverlay.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) ConfigOverlay.getObjectByPath(map,false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n  }\n\n","sourceOld":"  public static void reqhandlertests(RestTestHarness writeHarness,String testServerBaseUrl, CloudSolrClient cloudSolrServer) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val'}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrServer,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl ==null?  getRespMap(uri,writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl+uri ,cloudSolrServer) ;\n      if(null == ConfigOverlay.getObjectByPath(m,  true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\",\"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue( \"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n   //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\",\"mytrans\",\"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val'}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == ConfigOverlay.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) ConfigOverlay.getObjectByPath(map,false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n  }\n\n","sourceOld":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrServer) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val'}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrServer,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrServer);\n      if (null == ConfigOverlay.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrServer,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) ConfigOverlay.getObjectByPath(map,false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val'}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n  }\n\n","sourceOld":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val'}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == ConfigOverlay.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) ConfigOverlay.getObjectByPath(map,false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6827268e62848e1e9e42b995c30c14f69a369389","date":1439915491,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n  }\n\n","sourceOld":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val'}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n  }\n\n","bugFix":["432e578be72da02cfde62dcc7fb4fa8620bc85fd"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ba46b57f67b4eb7246bdc86cfdeb15b78306b90","date":1443533495,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\",\"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n  }\n\n","sourceOld":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93f558d9f0b5a234a28dcc95036e388fcbbadaf7","date":1446466934,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\" ),\n        \"C\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\",\"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n  }\n\n","sourceOld":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\",\"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0a9f341fe265836e64cc6182e6a0eaaacde77d1","date":1465412555,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\" ),\n        \"C\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\",\"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"requestHandler\",\"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n    map = getRespMap(\"/dump100?wt=json&json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertEquals(2, initArgs.size());\n    assertTrue(((Map)initArgs.get(0)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n    System.out.println(map);\n  }\n\n","sourceOld":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\" ),\n        \"C\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\",\"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n  }\n\n","bugFix":null,"bugIntro":["15f9a498a407241cefcbd00ca7fc84d5e7fa573e","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"15f9a498a407241cefcbd00ca7fc84d5e7fa573e","date":1470840868,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\" ),\n        \"C\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\",\"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"requestHandler\",\"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n    map = getRespMap(\"/dump100?wt=json&json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertEquals(2, initArgs.size());\n    assertTrue(((Map)initArgs.get(0)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n\n    payload = \"{\\n\" +\n        \"'add-requesthandler' : { 'name' : '/dump101', 'class': \" +\n        \"'\" + CacheTest.class.getName() + \"' \" +\n        \", 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump101\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'add-cache' : {name:'lfuCacheDecayFalse', class:'solr.search.LFUCache', size:10 ,initialSize:9 , timeDecay:false },\" +\n        \"'add-cache' : {name: 'perSegFilter', class: 'solr.search.LRUCache', size:10, initialSize:0 , autowarmCount:10}}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"cache\", \"lfuCacheDecayFalse\", \"class\"),\n        \"solr.search.LFUCache\",\n        10);\n    assertEquals(\"solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of(\"overlay\", \"cache\", \"perSegFilter\", \"class\")));\n\n    map = getRespMap(\"/dump101?cacheNames=lfuCacheDecayFalse&cacheNames=perSegFilter&wt=json\", writeHarness);\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"perSegFilter\")));\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LFUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"lfuCacheDecayFalse\")));\n\n  }\n\n","sourceOld":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\" ),\n        \"C\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\",\"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"requestHandler\",\"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n    map = getRespMap(\"/dump100?wt=json&json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertEquals(2, initArgs.size());\n    assertTrue(((Map)initArgs.get(0)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n    System.out.println(map);\n  }\n\n","bugFix":["d0a9f341fe265836e64cc6182e6a0eaaacde77d1"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\" ),\n        \"C\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\",\"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"requestHandler\",\"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n    map = getRespMap(\"/dump100?wt=json&json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertEquals(2, initArgs.size());\n    assertTrue(((Map)initArgs.get(0)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n\n    payload = \"{\\n\" +\n        \"'add-requesthandler' : { 'name' : '/dump101', 'class': \" +\n        \"'\" + CacheTest.class.getName() + \"' \" +\n        \", 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump101\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'add-cache' : {name:'lfuCacheDecayFalse', class:'solr.search.LFUCache', size:10 ,initialSize:9 , timeDecay:false },\" +\n        \"'add-cache' : {name: 'perSegFilter', class: 'solr.search.LRUCache', size:10, initialSize:0 , autowarmCount:10}}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"cache\", \"lfuCacheDecayFalse\", \"class\"),\n        \"solr.search.LFUCache\",\n        10);\n    assertEquals(\"solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of(\"overlay\", \"cache\", \"perSegFilter\", \"class\")));\n\n    map = getRespMap(\"/dump101?cacheNames=lfuCacheDecayFalse&cacheNames=perSegFilter&wt=json\", writeHarness);\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"perSegFilter\")));\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LFUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"lfuCacheDecayFalse\")));\n\n  }\n\n","sourceOld":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\" ),\n        \"C\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\",\"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"requestHandler\",\"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n    map = getRespMap(\"/dump100?wt=json&json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertEquals(2, initArgs.size());\n    assertTrue(((Map)initArgs.get(0)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n    System.out.println(map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\" ),\n        \"C\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\",\"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"requestHandler\",\"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n    map = getRespMap(\"/dump100?wt=json&json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertEquals(2, initArgs.size());\n    assertTrue(((Map)initArgs.get(0)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n\n    payload = \"{\\n\" +\n        \"'add-requesthandler' : { 'name' : '/dump101', 'class': \" +\n        \"'\" + CacheTest.class.getName() + \"' \" +\n        \", 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump101\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'add-cache' : {name:'lfuCacheDecayFalse', class:'solr.search.LFUCache', size:10 ,initialSize:9 , timeDecay:false },\" +\n        \"'add-cache' : {name: 'perSegFilter', class: 'solr.search.LRUCache', size:10, initialSize:0 , autowarmCount:10}}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"cache\", \"lfuCacheDecayFalse\", \"class\"),\n        \"solr.search.LFUCache\",\n        10);\n    assertEquals(\"solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of(\"overlay\", \"cache\", \"perSegFilter\", \"class\")));\n\n    map = getRespMap(\"/dump101?cacheNames=lfuCacheDecayFalse&cacheNames=perSegFilter&wt=json\", writeHarness);\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"perSegFilter\")));\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LFUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"lfuCacheDecayFalse\")));\n\n  }\n\n","sourceOld":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\" ),\n        \"C\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\",\"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"requestHandler\",\"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n    map = getRespMap(\"/dump100?wt=json&json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertEquals(2, initArgs.size());\n    assertTrue(((Map)initArgs.get(0)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n    System.out.println(map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\" ),\n        \"C\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\",\"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"requestHandler\",\"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n    map = getRespMap(\"/dump100?wt=json&json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertEquals(2, initArgs.size());\n    assertTrue(((Map)initArgs.get(0)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n\n    payload = \"{\\n\" +\n        \"'add-requesthandler' : { 'name' : '/dump101', 'class': \" +\n        \"'\" + CacheTest.class.getName() + \"' \" +\n        \", 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump101\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'add-cache' : {name:'lfuCacheDecayFalse', class:'solr.search.LFUCache', size:10 ,initialSize:9 , timeDecay:false },\" +\n        \"'add-cache' : {name: 'perSegFilter', class: 'solr.search.LRUCache', size:10, initialSize:0 , autowarmCount:10}}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"cache\", \"lfuCacheDecayFalse\", \"class\"),\n        \"solr.search.LFUCache\",\n        10);\n    assertEquals(\"solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of(\"overlay\", \"cache\", \"perSegFilter\", \"class\")));\n\n    map = getRespMap(\"/dump101?cacheNames=lfuCacheDecayFalse&cacheNames=perSegFilter&wt=json\", writeHarness);\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"perSegFilter\")));\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LFUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"lfuCacheDecayFalse\")));\n\n  }\n\n","sourceOld":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\" ),\n        \"C\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\",\"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\" ),\n        \"C\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\",\"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"requestHandler\",\"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n    map = getRespMap(\"/dump100?wt=json&json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertTrue(initArgs.size() >= 2);\n    assertTrue(((Map)initArgs.get(0)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n\n    payload = \"{\\n\" +\n        \"'add-requesthandler' : { 'name' : '/dump101', 'class': \" +\n        \"'\" + CacheTest.class.getName() + \"' \" +\n        \", 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump101\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'add-cache' : {name:'lfuCacheDecayFalse', class:'solr.search.LFUCache', size:10 ,initialSize:9 , timeDecay:false },\" +\n        \"'add-cache' : {name: 'perSegFilter', class: 'solr.search.LRUCache', size:10, initialSize:0 , autowarmCount:10}}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"cache\", \"lfuCacheDecayFalse\", \"class\"),\n        \"solr.search.LFUCache\",\n        10);\n    assertEquals(\"solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of(\"overlay\", \"cache\", \"perSegFilter\", \"class\")));\n\n    map = getRespMap(\"/dump101?cacheNames=lfuCacheDecayFalse&cacheNames=perSegFilter&wt=json\", writeHarness);\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"perSegFilter\")));\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LFUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"lfuCacheDecayFalse\")));\n\n  }\n\n","sourceOld":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\" ),\n        \"C\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\",\"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"requestHandler\",\"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n    map = getRespMap(\"/dump100?wt=json&json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertEquals(2, initArgs.size());\n    assertTrue(((Map)initArgs.get(0)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n\n    payload = \"{\\n\" +\n        \"'add-requesthandler' : { 'name' : '/dump101', 'class': \" +\n        \"'\" + CacheTest.class.getName() + \"' \" +\n        \", 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump101\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'add-cache' : {name:'lfuCacheDecayFalse', class:'solr.search.LFUCache', size:10 ,initialSize:9 , timeDecay:false },\" +\n        \"'add-cache' : {name: 'perSegFilter', class: 'solr.search.LRUCache', size:10, initialSize:0 , autowarmCount:10}}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"cache\", \"lfuCacheDecayFalse\", \"class\"),\n        \"solr.search.LFUCache\",\n        10);\n    assertEquals(\"solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of(\"overlay\", \"cache\", \"perSegFilter\", \"class\")));\n\n    map = getRespMap(\"/dump101?cacheNames=lfuCacheDecayFalse&cacheNames=perSegFilter&wt=json\", writeHarness);\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"perSegFilter\")));\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LFUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"lfuCacheDecayFalse\")));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb61aa13e6babcd69a824d8057631fbaff9a83ce","date":1485864644,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' ,registerPath :'/,/v2', \" +\n        \" 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\" ),\n        \"C\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\",\"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"       registerPath :'/,/v2',\"+\n    \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"requestHandler\",\"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n    map = getRespMap(\"/dump100?wt=json&json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertNotNull(initArgs);\n    assertTrue(initArgs.size() >= 2);\n    assertTrue(((Map)initArgs.get(2)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n\n    payload = \"{\\n\" +\n        \"'add-requesthandler' : { 'name' : '/dump101', 'class': \" +\n        \"'\" + CacheTest.class.getName() + \"', \" +\n        \"    registerPath :'/,/v2'\"+\n        \", 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump101\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'add-cache' : {name:'lfuCacheDecayFalse', class:'solr.search.LFUCache', size:10 ,initialSize:9 , timeDecay:false },\" +\n        \"'add-cache' : {name: 'perSegFilter', class: 'solr.search.LRUCache', size:10, initialSize:0 , autowarmCount:10}}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"cache\", \"lfuCacheDecayFalse\", \"class\"),\n        \"solr.search.LFUCache\",\n        10);\n    assertEquals(\"solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of(\"overlay\", \"cache\", \"perSegFilter\", \"class\")));\n\n    map = getRespMap(\"/dump101?cacheNames=lfuCacheDecayFalse&cacheNames=perSegFilter&wt=json\", writeHarness);\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"perSegFilter\")));\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LFUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"lfuCacheDecayFalse\")));\n\n  }\n\n","sourceOld":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\" ),\n        \"C\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\",\"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"requestHandler\",\"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n    map = getRespMap(\"/dump100?wt=json&json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertTrue(initArgs.size() >= 2);\n    assertTrue(((Map)initArgs.get(0)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n\n    payload = \"{\\n\" +\n        \"'add-requesthandler' : { 'name' : '/dump101', 'class': \" +\n        \"'\" + CacheTest.class.getName() + \"' \" +\n        \", 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump101\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'add-cache' : {name:'lfuCacheDecayFalse', class:'solr.search.LFUCache', size:10 ,initialSize:9 , timeDecay:false },\" +\n        \"'add-cache' : {name: 'perSegFilter', class: 'solr.search.LRUCache', size:10, initialSize:0 , autowarmCount:10}}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"cache\", \"lfuCacheDecayFalse\", \"class\"),\n        \"solr.search.LFUCache\",\n        10);\n    assertEquals(\"solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of(\"overlay\", \"cache\", \"perSegFilter\", \"class\")));\n\n    map = getRespMap(\"/dump101?cacheNames=lfuCacheDecayFalse&cacheNames=perSegFilter&wt=json\", writeHarness);\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"perSegFilter\")));\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LFUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"lfuCacheDecayFalse\")));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' ,registerPath :'/,/v2', \" +\n        \" 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\" ),\n        \"C\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\",\"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"       registerPath :'/,/v2',\"+\n    \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"requestHandler\",\"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n    map = getRespMap(\"/dump100?wt=json&json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertNotNull(initArgs);\n    assertTrue(initArgs.size() >= 2);\n    assertTrue(((Map)initArgs.get(2)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n\n    payload = \"{\\n\" +\n        \"'add-requesthandler' : { 'name' : '/dump101', 'class': \" +\n        \"'\" + CacheTest.class.getName() + \"', \" +\n        \"    registerPath :'/,/v2'\"+\n        \", 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump101\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'add-cache' : {name:'lfuCacheDecayFalse', class:'solr.search.LFUCache', size:10 ,initialSize:9 , timeDecay:false },\" +\n        \"'add-cache' : {name: 'perSegFilter', class: 'solr.search.LRUCache', size:10, initialSize:0 , autowarmCount:10}}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"cache\", \"lfuCacheDecayFalse\", \"class\"),\n        \"solr.search.LFUCache\",\n        10);\n    assertEquals(\"solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of(\"overlay\", \"cache\", \"perSegFilter\", \"class\")));\n\n    map = getRespMap(\"/dump101?cacheNames=lfuCacheDecayFalse&cacheNames=perSegFilter&wt=json\", writeHarness);\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"perSegFilter\")));\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LFUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"lfuCacheDecayFalse\")));\n\n  }\n\n","sourceOld":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\" ),\n        \"C\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\",\"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"requestHandler\",\"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n    map = getRespMap(\"/dump100?wt=json&json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertEquals(2, initArgs.size());\n    assertTrue(((Map)initArgs.get(0)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n\n    payload = \"{\\n\" +\n        \"'add-requesthandler' : { 'name' : '/dump101', 'class': \" +\n        \"'\" + CacheTest.class.getName() + \"' \" +\n        \", 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump101\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'add-cache' : {name:'lfuCacheDecayFalse', class:'solr.search.LFUCache', size:10 ,initialSize:9 , timeDecay:false },\" +\n        \"'add-cache' : {name: 'perSegFilter', class: 'solr.search.LRUCache', size:10, initialSize:0 , autowarmCount:10}}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"cache\", \"lfuCacheDecayFalse\", \"class\"),\n        \"solr.search.LFUCache\",\n        10);\n    assertEquals(\"solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of(\"overlay\", \"cache\", \"perSegFilter\", \"class\")));\n\n    map = getRespMap(\"/dump101?cacheNames=lfuCacheDecayFalse&cacheNames=perSegFilter&wt=json\", writeHarness);\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"perSegFilter\")));\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LFUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"lfuCacheDecayFalse\")));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ab788212d72a7c436e5ef349ca99fe3c8fc78b","date":1489203052,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' ,registerPath :'/solr,/v2', \" +\n        \" 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\" ),\n        \"C\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\",\"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"       registerPath :'/solr,/v2',\"+\n    \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"requestHandler\",\"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n    map = getRespMap(\"/dump100?wt=json&json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertNotNull(initArgs);\n    assertTrue(initArgs.size() >= 2);\n    assertTrue(((Map)initArgs.get(2)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n\n    payload = \"{\\n\" +\n        \"'add-requesthandler' : { 'name' : '/dump101', 'class': \" +\n        \"'\" + CacheTest.class.getName() + \"', \" +\n        \"    registerPath :'/solr,/v2'\"+\n        \", 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump101\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'add-cache' : {name:'lfuCacheDecayFalse', class:'solr.search.LFUCache', size:10 ,initialSize:9 , timeDecay:false },\" +\n        \"'add-cache' : {name: 'perSegFilter', class: 'solr.search.LRUCache', size:10, initialSize:0 , autowarmCount:10}}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"cache\", \"lfuCacheDecayFalse\", \"class\"),\n        \"solr.search.LFUCache\",\n        10);\n    assertEquals(\"solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of(\"overlay\", \"cache\", \"perSegFilter\", \"class\")));\n\n    map = getRespMap(\"/dump101?cacheNames=lfuCacheDecayFalse&cacheNames=perSegFilter&wt=json\", writeHarness);\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"perSegFilter\")));\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LFUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"lfuCacheDecayFalse\")));\n\n  }\n\n","sourceOld":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' ,registerPath :'/,/v2', \" +\n        \" 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\" ),\n        \"C\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\",\"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"       registerPath :'/,/v2',\"+\n    \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"requestHandler\",\"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n    map = getRespMap(\"/dump100?wt=json&json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertNotNull(initArgs);\n    assertTrue(initArgs.size() >= 2);\n    assertTrue(((Map)initArgs.get(2)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n\n    payload = \"{\\n\" +\n        \"'add-requesthandler' : { 'name' : '/dump101', 'class': \" +\n        \"'\" + CacheTest.class.getName() + \"', \" +\n        \"    registerPath :'/,/v2'\"+\n        \", 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump101\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'add-cache' : {name:'lfuCacheDecayFalse', class:'solr.search.LFUCache', size:10 ,initialSize:9 , timeDecay:false },\" +\n        \"'add-cache' : {name: 'perSegFilter', class: 'solr.search.LRUCache', size:10, initialSize:0 , autowarmCount:10}}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"cache\", \"lfuCacheDecayFalse\", \"class\"),\n        \"solr.search.LFUCache\",\n        10);\n    assertEquals(\"solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of(\"overlay\", \"cache\", \"perSegFilter\", \"class\")));\n\n    map = getRespMap(\"/dump101?cacheNames=lfuCacheDecayFalse&cacheNames=perSegFilter&wt=json\", writeHarness);\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"perSegFilter\")));\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LFUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"lfuCacheDecayFalse\")));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a144790859eb303122988cd315215ff30f449d2","date":1493938430,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' ,registerPath :'/solr,/v2', \" +\n        \" 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\" ),\n        \"C\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 2, l.size());\n    assertEquals( \"val\", ((Map)l.get(1)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\",\"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"       registerPath :'/solr,/v2',\"+\n    \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"requestHandler\",\"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n    map = getRespMap(\"/dump100?wt=json&json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertNotNull(initArgs);\n    assertTrue(initArgs.size() >= 2);\n    assertTrue(((Map)initArgs.get(2)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n\n    payload = \"{\\n\" +\n        \"'add-requesthandler' : { 'name' : '/dump101', 'class': \" +\n        \"'\" + CacheTest.class.getName() + \"', \" +\n        \"    registerPath :'/solr,/v2'\"+\n        \", 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump101\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'add-cache' : {name:'lfuCacheDecayFalse', class:'solr.search.LFUCache', size:10 ,initialSize:9 , timeDecay:false },\" +\n        \"'add-cache' : {name: 'perSegFilter', class: 'solr.search.LRUCache', size:10, initialSize:0 , autowarmCount:10}}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"cache\", \"lfuCacheDecayFalse\", \"class\"),\n        \"solr.search.LFUCache\",\n        10);\n    assertEquals(\"solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of(\"overlay\", \"cache\", \"perSegFilter\", \"class\")));\n\n    map = getRespMap(\"/dump101?cacheNames=lfuCacheDecayFalse&cacheNames=perSegFilter&wt=json\", writeHarness);\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"perSegFilter\")));\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LFUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"lfuCacheDecayFalse\")));\n\n  }\n\n","sourceOld":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' ,registerPath :'/solr,/v2', \" +\n        \" 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\" ),\n        \"C\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\",\"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"       registerPath :'/solr,/v2',\"+\n    \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"requestHandler\",\"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n    map = getRespMap(\"/dump100?wt=json&json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertNotNull(initArgs);\n    assertTrue(initArgs.size() >= 2);\n    assertTrue(((Map)initArgs.get(2)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n\n    payload = \"{\\n\" +\n        \"'add-requesthandler' : { 'name' : '/dump101', 'class': \" +\n        \"'\" + CacheTest.class.getName() + \"', \" +\n        \"    registerPath :'/solr,/v2'\"+\n        \", 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump101\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'add-cache' : {name:'lfuCacheDecayFalse', class:'solr.search.LFUCache', size:10 ,initialSize:9 , timeDecay:false },\" +\n        \"'add-cache' : {name: 'perSegFilter', class: 'solr.search.LRUCache', size:10, initialSize:0 , autowarmCount:10}}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"cache\", \"lfuCacheDecayFalse\", \"class\"),\n        \"solr.search.LFUCache\",\n        10);\n    assertEquals(\"solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of(\"overlay\", \"cache\", \"perSegFilter\", \"class\")));\n\n    map = getRespMap(\"/dump101?cacheNames=lfuCacheDecayFalse&cacheNames=perSegFilter&wt=json\", writeHarness);\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"perSegFilter\")));\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LFUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"lfuCacheDecayFalse\")));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' ,registerPath :'/solr,/v2', \" +\n        \" 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\" ),\n        \"C\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 2, l.size());\n    assertEquals( \"val\", ((Map)l.get(1)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\",\"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"       registerPath :'/solr,/v2',\"+\n    \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"requestHandler\",\"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n    map = getRespMap(\"/dump100?wt=json&json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertNotNull(initArgs);\n    assertTrue(initArgs.size() >= 2);\n    assertTrue(((Map)initArgs.get(2)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n\n    payload = \"{\\n\" +\n        \"'add-requesthandler' : { 'name' : '/dump101', 'class': \" +\n        \"'\" + CacheTest.class.getName() + \"', \" +\n        \"    registerPath :'/solr,/v2'\"+\n        \", 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump101\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'add-cache' : {name:'lfuCacheDecayFalse', class:'solr.search.LFUCache', size:10 ,initialSize:9 , timeDecay:false },\" +\n        \"'add-cache' : {name: 'perSegFilter', class: 'solr.search.LRUCache', size:10, initialSize:0 , autowarmCount:10}}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"cache\", \"lfuCacheDecayFalse\", \"class\"),\n        \"solr.search.LFUCache\",\n        10);\n    assertEquals(\"solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of(\"overlay\", \"cache\", \"perSegFilter\", \"class\")));\n\n    map = getRespMap(\"/dump101?cacheNames=lfuCacheDecayFalse&cacheNames=perSegFilter&wt=json\", writeHarness);\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"perSegFilter\")));\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LFUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"lfuCacheDecayFalse\")));\n\n  }\n\n","sourceOld":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' ,registerPath :'/solr,/v2', \" +\n        \" 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\" ),\n        \"C\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 1, l.size());\n    assertEquals( \"val\", ((Map)l.get(0)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\",\"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"       registerPath :'/solr,/v2',\"+\n    \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"requestHandler\",\"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n    map = getRespMap(\"/dump100?wt=json&json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertNotNull(initArgs);\n    assertTrue(initArgs.size() >= 2);\n    assertTrue(((Map)initArgs.get(2)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n\n    payload = \"{\\n\" +\n        \"'add-requesthandler' : { 'name' : '/dump101', 'class': \" +\n        \"'\" + CacheTest.class.getName() + \"', \" +\n        \"    registerPath :'/solr,/v2'\"+\n        \", 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump101\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'add-cache' : {name:'lfuCacheDecayFalse', class:'solr.search.LFUCache', size:10 ,initialSize:9 , timeDecay:false },\" +\n        \"'add-cache' : {name: 'perSegFilter', class: 'solr.search.LRUCache', size:10, initialSize:0 , autowarmCount:10}}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"cache\", \"lfuCacheDecayFalse\", \"class\"),\n        \"solr.search.LFUCache\",\n        10);\n    assertEquals(\"solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of(\"overlay\", \"cache\", \"perSegFilter\", \"class\")));\n\n    map = getRespMap(\"/dump101?cacheNames=lfuCacheDecayFalse&cacheNames=perSegFilter&wt=json\", writeHarness);\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"perSegFilter\")));\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LFUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"lfuCacheDecayFalse\")));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' ,registerPath :'/solr,/v2', \" +\n        \" 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\" ),\n        \"C\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 2, l.size());\n    assertEquals( \"val\", ((Map)l.get(1)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\",\"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"       registerPath :'/solr,/v2',\"+\n    \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"requestHandler\",\"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n    map = getRespMap(\"/dump100?json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertNotNull(initArgs);\n    assertTrue(initArgs.size() >= 2);\n    assertTrue(((Map)initArgs.get(2)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n\n    payload = \"{\\n\" +\n        \"'add-requesthandler' : { 'name' : '/dump101', 'class': \" +\n        \"'\" + CacheTest.class.getName() + \"', \" +\n        \"    registerPath :'/solr,/v2'\"+\n        \", 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump101\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'add-cache' : {name:'lfuCacheDecayFalse', class:'solr.search.LFUCache', size:10 ,initialSize:9 , timeDecay:false },\" +\n        \"'add-cache' : {name: 'perSegFilter', class: 'solr.search.LRUCache', size:10, initialSize:0 , autowarmCount:10}}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"cache\", \"lfuCacheDecayFalse\", \"class\"),\n        \"solr.search.LFUCache\",\n        10);\n    assertEquals(\"solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of(\"overlay\", \"cache\", \"perSegFilter\", \"class\")));\n\n    map = getRespMap(\"/dump101?cacheNames=lfuCacheDecayFalse&cacheNames=perSegFilter\", writeHarness);\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"perSegFilter\")));\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LFUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"lfuCacheDecayFalse\")));\n\n  }\n\n","sourceOld":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' ,registerPath :'/solr,/v2', \" +\n        \" 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\" ),\n        \"C\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 2, l.size());\n    assertEquals( \"val\", ((Map)l.get(1)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\",\"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"       registerPath :'/solr,/v2',\"+\n    \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"requestHandler\",\"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n    map = getRespMap(\"/dump100?wt=json&json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertNotNull(initArgs);\n    assertTrue(initArgs.size() >= 2);\n    assertTrue(((Map)initArgs.get(2)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n\n    payload = \"{\\n\" +\n        \"'add-requesthandler' : { 'name' : '/dump101', 'class': \" +\n        \"'\" + CacheTest.class.getName() + \"', \" +\n        \"    registerPath :'/solr,/v2'\"+\n        \", 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump101\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'add-cache' : {name:'lfuCacheDecayFalse', class:'solr.search.LFUCache', size:10 ,initialSize:9 , timeDecay:false },\" +\n        \"'add-cache' : {name: 'perSegFilter', class: 'solr.search.LRUCache', size:10, initialSize:0 , autowarmCount:10}}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"cache\", \"lfuCacheDecayFalse\", \"class\"),\n        \"solr.search.LFUCache\",\n        10);\n    assertEquals(\"solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of(\"overlay\", \"cache\", \"perSegFilter\", \"class\")));\n\n    map = getRespMap(\"/dump101?cacheNames=lfuCacheDecayFalse&cacheNames=perSegFilter&wt=json\", writeHarness);\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"perSegFilter\")));\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LFUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"lfuCacheDecayFalse\")));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' ,registerPath :'/solr,/v2', \" +\n        \" 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\" ),\n        \"C\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 2, l.size());\n    assertEquals( \"val\", ((Map)l.get(1)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\",\"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"       registerPath :'/solr,/v2',\"+\n    \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"requestHandler\",\"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n    map = getRespMap(\"/dump100?json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertNotNull(initArgs);\n    assertTrue(initArgs.size() >= 2);\n    assertTrue(((Map)initArgs.get(2)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n\n    payload = \"{\\n\" +\n        \"'add-requesthandler' : { 'name' : '/dump101', 'class': \" +\n        \"'\" + CacheTest.class.getName() + \"', \" +\n        \"    registerPath :'/solr,/v2'\"+\n        \", 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump101\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'add-cache' : {name:'lfuCacheDecayFalse', class:'solr.search.LFUCache', size:10 ,initialSize:9 , timeDecay:false },\" +\n        \"'add-cache' : {name: 'perSegFilter', class: 'solr.search.LRUCache', size:10, initialSize:0 , autowarmCount:10}}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"cache\", \"lfuCacheDecayFalse\", \"class\"),\n        \"solr.search.LFUCache\",\n        10);\n    assertEquals(\"solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of(\"overlay\", \"cache\", \"perSegFilter\", \"class\")));\n\n    map = getRespMap(\"/dump101?cacheNames=lfuCacheDecayFalse&cacheNames=perSegFilter\", writeHarness);\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"perSegFilter\")));\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LFUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"lfuCacheDecayFalse\")));\n\n  }\n\n","sourceOld":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' ,registerPath :'/solr,/v2', \" +\n        \" 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\" ),\n        \"C\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 2, l.size());\n    assertEquals( \"val\", ((Map)l.get(1)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\",\"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"       registerPath :'/solr,/v2',\"+\n    \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"requestHandler\",\"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n    map = getRespMap(\"/dump100?wt=json&json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertNotNull(initArgs);\n    assertTrue(initArgs.size() >= 2);\n    assertTrue(((Map)initArgs.get(2)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n\n    payload = \"{\\n\" +\n        \"'add-requesthandler' : { 'name' : '/dump101', 'class': \" +\n        \"'\" + CacheTest.class.getName() + \"', \" +\n        \"    registerPath :'/solr,/v2'\"+\n        \", 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump101\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'add-cache' : {name:'lfuCacheDecayFalse', class:'solr.search.LFUCache', size:10 ,initialSize:9 , timeDecay:false },\" +\n        \"'add-cache' : {name: 'perSegFilter', class: 'solr.search.LRUCache', size:10, initialSize:0 , autowarmCount:10}}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"cache\", \"lfuCacheDecayFalse\", \"class\"),\n        \"solr.search.LFUCache\",\n        10);\n    assertEquals(\"solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of(\"overlay\", \"cache\", \"perSegFilter\", \"class\")));\n\n    map = getRespMap(\"/dump101?cacheNames=lfuCacheDecayFalse&cacheNames=perSegFilter&wt=json\", writeHarness);\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"perSegFilter\")));\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LFUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"lfuCacheDecayFalse\")));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' ,registerPath :'/solr,/v2', \" +\n        \" 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\" ),\n        \"C\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 2, l.size());\n    assertEquals( \"val\", ((Map)l.get(1)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\",\"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"       registerPath :'/solr,/v2',\"+\n    \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"requestHandler\",\"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n    map = getRespMap(\"/dump100?json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertNotNull(initArgs);\n    assertTrue(initArgs.size() >= 2);\n    assertTrue(((Map)initArgs.get(2)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n\n    payload = \"{\\n\" +\n        \"'add-requesthandler' : { 'name' : '/dump101', 'class': \" +\n        \"'\" + CacheTest.class.getName() + \"', \" +\n        \"    registerPath :'/solr,/v2'\"+\n        \", 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump101\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'add-cache' : {name:'lfuCacheDecayFalse', class:'solr.search.LFUCache', size:10 ,initialSize:9 , timeDecay:false },\" +\n        \"'add-cache' : {name: 'perSegFilter', class: 'solr.search.LRUCache', size:10, initialSize:0 , autowarmCount:10}}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"cache\", \"lfuCacheDecayFalse\", \"class\"),\n        \"solr.search.LFUCache\",\n        10);\n    assertEquals(\"solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of(\"overlay\", \"cache\", \"perSegFilter\", \"class\")));\n\n    map = getRespMap(\"/dump101?cacheNames=lfuCacheDecayFalse&cacheNames=perSegFilter\", writeHarness);\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"perSegFilter\")));\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LFUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"lfuCacheDecayFalse\")));\n\n  }\n\n","sourceOld":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' ,registerPath :'/solr,/v2', \" +\n        \" 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\" ),\n        \"C\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?wt=json&param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay?wt=json\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 2, l.size());\n    assertEquals( \"val\", ((Map)l.get(1)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\",\"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"       registerPath :'/solr,/v2',\"+\n    \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"requestHandler\",\"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n    map = getRespMap(\"/dump100?wt=json&json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertNotNull(initArgs);\n    assertTrue(initArgs.size() >= 2);\n    assertTrue(((Map)initArgs.get(2)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n\n    payload = \"{\\n\" +\n        \"'add-requesthandler' : { 'name' : '/dump101', 'class': \" +\n        \"'\" + CacheTest.class.getName() + \"', \" +\n        \"    registerPath :'/solr,/v2'\"+\n        \", 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump101\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'add-cache' : {name:'lfuCacheDecayFalse', class:'solr.search.LFUCache', size:10 ,initialSize:9 , timeDecay:false },\" +\n        \"'add-cache' : {name: 'perSegFilter', class: 'solr.search.LRUCache', size:10, initialSize:0 , autowarmCount:10}}\";\n    runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay?wt=json\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"cache\", \"lfuCacheDecayFalse\", \"class\"),\n        \"solr.search.LFUCache\",\n        10);\n    assertEquals(\"solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of(\"overlay\", \"cache\", \"perSegFilter\", \"class\")));\n\n    map = getRespMap(\"/dump101?cacheNames=lfuCacheDecayFalse&cacheNames=perSegFilter&wt=json\", writeHarness);\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"perSegFilter\")));\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LFUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"lfuCacheDecayFalse\")));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9c9780b447ddf847479e7fa9978cb7809a15a0bf","date":1538692320,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' ,registerPath :'/solr,/v2', \" +\n        \" 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\"),\n        \"C\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?param=multival&json.nl=map\",\n        cloudSolrClient,\n        asList(\"params\", \"multival\"),\n        asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ map , l);\n    assertEquals( 2, l.size());\n    assertEquals( \"val\", ((Map)l.get(1)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"searchComponent\", \"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"       registerPath :'/solr,/v2',\"+\n    \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"requestHandler\", \"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n    map = getRespMap(\"/dump100?json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertNotNull(initArgs);\n    assertTrue(initArgs.size() >= 2);\n    assertTrue(((Map)initArgs.get(2)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n\n    payload = \"{\\n\" +\n        \"'add-requesthandler' : { 'name' : '/dump101', 'class': \" +\n        \"'\" + CacheTest.class.getName() + \"', \" +\n        \"    registerPath :'/solr,/v2'\"+\n        \", 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump101\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'add-cache' : {name:'lfuCacheDecayFalse', class:'solr.search.LFUCache', size:10 ,initialSize:9 , timeDecay:false },\" +\n        \"'add-cache' : {name: 'perSegFilter', class: 'solr.search.LRUCache', size:10, initialSize:0 , autowarmCount:10}}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"cache\", \"lfuCacheDecayFalse\", \"class\"),\n        \"solr.search.LFUCache\",\n        10);\n    assertEquals(\"solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of(\"overlay\", \"cache\", \"perSegFilter\", \"class\")));\n\n    map = getRespMap(\"/dump101?cacheNames=lfuCacheDecayFalse&cacheNames=perSegFilter\", writeHarness);\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"perSegFilter\")));\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LFUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"lfuCacheDecayFalse\")));\n\n  }\n\n","sourceOld":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' ,registerPath :'/solr,/v2', \" +\n        \" 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\" ),\n        \"C\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?param=multival&json.nl=map\",\n        cloudSolrClient,\n        Arrays.asList(\"params\", \"multival\"),\n        Arrays.asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, Arrays.asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, Arrays.asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ TestBlobHandler.getAsString(map) , l);\n    assertEquals( 2, l.size());\n    assertEquals( \"val\", ((Map)l.get(1)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"searchComponent\",\"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"       registerPath :'/solr,/v2',\"+\n    \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        Arrays.asList(\"config\", \"requestHandler\",\"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n    map = getRespMap(\"/dump100?json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertNotNull(initArgs);\n    assertTrue(initArgs.size() >= 2);\n    assertTrue(((Map)initArgs.get(2)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n\n    payload = \"{\\n\" +\n        \"'add-requesthandler' : { 'name' : '/dump101', 'class': \" +\n        \"'\" + CacheTest.class.getName() + \"', \" +\n        \"    registerPath :'/solr,/v2'\"+\n        \", 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump101\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'add-cache' : {name:'lfuCacheDecayFalse', class:'solr.search.LFUCache', size:10 ,initialSize:9 , timeDecay:false },\" +\n        \"'add-cache' : {name: 'perSegFilter', class: 'solr.search.LRUCache', size:10, initialSize:0 , autowarmCount:10}}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        Arrays.asList(\"overlay\", \"cache\", \"lfuCacheDecayFalse\", \"class\"),\n        \"solr.search.LFUCache\",\n        10);\n    assertEquals(\"solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of(\"overlay\", \"cache\", \"perSegFilter\", \"class\")));\n\n    map = getRespMap(\"/dump101?cacheNames=lfuCacheDecayFalse&cacheNames=perSegFilter\", writeHarness);\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"perSegFilter\")));\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LFUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"lfuCacheDecayFalse\")));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' ,registerPath :'/solr,/v2', \" +\n        \" 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\"),\n        \"C\",\n        TIMEOUT_S);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        TIMEOUT_S);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?param=multival&json.nl=map\",\n        cloudSolrClient,\n        asList(\"params\", \"multival\"),\n        asList(\"a\", \"b\", \"c\"),\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        TIMEOUT_S);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        TIMEOUT_S);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        TIMEOUT_S);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        TIMEOUT_S);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        TIMEOUT_S);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        TIMEOUT_S);\n\n    List l = (List) Utils.getObjectByPath(map, false, asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ map , l);\n    assertEquals( 2, l.size());\n    assertEquals( \"val\", ((Map)l.get(1)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"searchComponent\", \"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"       registerPath :'/solr,/v2',\"+\n    \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"requestHandler\", \"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        TIMEOUT_S);\n\n    map = getRespMap(\"/dump100?json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertNotNull(initArgs);\n    assertTrue(initArgs.size() >= 2);\n    assertTrue(((Map)initArgs.get(2)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n\n    payload = \"{\\n\" +\n        \"'add-requesthandler' : { 'name' : '/dump101', 'class': \" +\n        \"'\" + CacheTest.class.getName() + \"', \" +\n        \"    registerPath :'/solr,/v2'\"+\n        \", 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump101\", \"startup\"),\n        \"lazy\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'add-cache' : {name:'lfuCacheDecayFalse', class:'solr.search.LFUCache', size:10 ,initialSize:9 , timeDecay:false },\" +\n        \"'add-cache' : {name: 'perSegFilter', class: 'solr.search.LRUCache', size:10, initialSize:0 , autowarmCount:10}}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"cache\", \"lfuCacheDecayFalse\", \"class\"),\n        \"solr.search.LFUCache\",\n        TIMEOUT_S);\n    assertEquals(\"solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of(\"overlay\", \"cache\", \"perSegFilter\", \"class\")));\n\n    map = getRespMap(\"/dump101?cacheNames=lfuCacheDecayFalse&cacheNames=perSegFilter\", writeHarness);\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"perSegFilter\")));\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LFUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"lfuCacheDecayFalse\")));\n\n  }\n\n","sourceOld":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' ,registerPath :'/solr,/v2', \" +\n        \" 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\"),\n        \"C\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        10);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?param=multival&json.nl=map\",\n        cloudSolrClient,\n        asList(\"params\", \"multival\"),\n        asList(\"a\", \"b\", \"c\"),\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        10);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        10);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        10);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        10);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        10);\n\n    List l = (List) Utils.getObjectByPath(map, false, asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ map , l);\n    assertEquals( 2, l.size());\n    assertEquals( \"val\", ((Map)l.get(1)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"searchComponent\", \"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        10);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"       registerPath :'/solr,/v2',\"+\n    \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"requestHandler\", \"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        10);\n\n    map = getRespMap(\"/dump100?json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertNotNull(initArgs);\n    assertTrue(initArgs.size() >= 2);\n    assertTrue(((Map)initArgs.get(2)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n\n    payload = \"{\\n\" +\n        \"'add-requesthandler' : { 'name' : '/dump101', 'class': \" +\n        \"'\" + CacheTest.class.getName() + \"', \" +\n        \"    registerPath :'/solr,/v2'\"+\n        \", 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump101\", \"startup\"),\n        \"lazy\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'add-cache' : {name:'lfuCacheDecayFalse', class:'solr.search.LFUCache', size:10 ,initialSize:9 , timeDecay:false },\" +\n        \"'add-cache' : {name: 'perSegFilter', class: 'solr.search.LRUCache', size:10, initialSize:0 , autowarmCount:10}}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"cache\", \"lfuCacheDecayFalse\", \"class\"),\n        \"solr.search.LFUCache\",\n        10);\n    assertEquals(\"solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of(\"overlay\", \"cache\", \"perSegFilter\", \"class\")));\n\n    map = getRespMap(\"/dump101?cacheNames=lfuCacheDecayFalse&cacheNames=perSegFilter\", writeHarness);\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"perSegFilter\")));\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LFUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"lfuCacheDecayFalse\")));\n\n  }\n\n","bugFix":["c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1","d0a9f341fe265836e64cc6182e6a0eaaacde77d1","93f558d9f0b5a234a28dcc95036e388fcbbadaf7","432e578be72da02cfde62dcc7fb4fa8620bc85fd","bafca15d8e408346a67f4282ad1143b88023893b","ae2f5be890d26585d438eba0b9cc7d3c0a9775be","6827268e62848e1e9e42b995c30c14f69a369389","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","5ba46b57f67b4eb7246bdc86cfdeb15b78306b90"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' ,registerPath :'/solr,/v2', \" +\n        \" 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\"),\n        \"C\",\n        TIMEOUT_S);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        TIMEOUT_S);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?param=multival&json.nl=map\",\n        cloudSolrClient,\n        asList(\"params\", \"multival\"),\n        asList(\"a\", \"b\", \"c\"),\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        TIMEOUT_S);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        TIMEOUT_S);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        TIMEOUT_S);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        TIMEOUT_S);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        TIMEOUT_S);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        TIMEOUT_S);\n\n    List l = (List) Utils.getObjectByPath(map, false, asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ map , l);\n    assertEquals( 2, l.size());\n    assertEquals( \"val\", ((Map)l.get(1)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"searchComponent\", \"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"       registerPath :'/solr,/v2',\"+\n    \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"requestHandler\", \"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        TIMEOUT_S);\n\n    map = getRespMap(\"/dump100?json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertNotNull(initArgs);\n    assertTrue(initArgs.size() >= 2);\n    assertTrue(((Map)initArgs.get(2)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n\n    payload = \"{\\n\" +\n        \"'add-requesthandler' : { 'name' : '/dump101', 'class': \" +\n        \"'\" + CacheTest.class.getName() + \"', \" +\n        \"    registerPath :'/solr,/v2'\"+\n        \", 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump101\", \"startup\"),\n        \"lazy\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'add-cache' : {name:'lfuCacheDecayFalse', class:'solr.search.CaffeineCache', size:10 ,initialSize:9 , timeDecay:false },\" +\n        \"'add-cache' : {name: 'perSegFilter', class: 'solr.search.CaffeineCache', size:10, initialSize:0 , autowarmCount:10}}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"cache\", \"lfuCacheDecayFalse\", \"class\"),\n        \"solr.search.CaffeineCache\",\n        TIMEOUT_S);\n    assertEquals(\"solr.search.CaffeineCache\",getObjectByPath(map, true, ImmutableList.of(\"overlay\", \"cache\", \"perSegFilter\", \"class\")));\n\n    map = getRespMap(\"/dump101?cacheNames=lfuCacheDecayFalse&cacheNames=perSegFilter\", writeHarness);\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.CaffeineCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"perSegFilter\")));\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.CaffeineCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"lfuCacheDecayFalse\")));\n\n  }\n\n","sourceOld":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' ,registerPath :'/solr,/v2', \" +\n        \" 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\"),\n        \"C\",\n        TIMEOUT_S);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        TIMEOUT_S);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?param=multival&json.nl=map\",\n        cloudSolrClient,\n        asList(\"params\", \"multival\"),\n        asList(\"a\", \"b\", \"c\"),\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        TIMEOUT_S);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        TIMEOUT_S);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        TIMEOUT_S);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        TIMEOUT_S);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        TIMEOUT_S);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        TIMEOUT_S);\n\n    List l = (List) Utils.getObjectByPath(map, false, asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ map , l);\n    assertEquals( 2, l.size());\n    assertEquals( \"val\", ((Map)l.get(1)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"searchComponent\", \"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"       registerPath :'/solr,/v2',\"+\n    \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"requestHandler\", \"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        TIMEOUT_S);\n\n    map = getRespMap(\"/dump100?json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertNotNull(initArgs);\n    assertTrue(initArgs.size() >= 2);\n    assertTrue(((Map)initArgs.get(2)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n\n    payload = \"{\\n\" +\n        \"'add-requesthandler' : { 'name' : '/dump101', 'class': \" +\n        \"'\" + CacheTest.class.getName() + \"', \" +\n        \"    registerPath :'/solr,/v2'\"+\n        \", 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump101\", \"startup\"),\n        \"lazy\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'add-cache' : {name:'lfuCacheDecayFalse', class:'solr.search.LFUCache', size:10 ,initialSize:9 , timeDecay:false },\" +\n        \"'add-cache' : {name: 'perSegFilter', class: 'solr.search.LRUCache', size:10, initialSize:0 , autowarmCount:10}}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"cache\", \"lfuCacheDecayFalse\", \"class\"),\n        \"solr.search.LFUCache\",\n        TIMEOUT_S);\n    assertEquals(\"solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of(\"overlay\", \"cache\", \"perSegFilter\", \"class\")));\n\n    map = getRespMap(\"/dump101?cacheNames=lfuCacheDecayFalse&cacheNames=perSegFilter\", writeHarness);\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LRUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"perSegFilter\")));\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.LFUCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"lfuCacheDecayFalse\")));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#reqhandlertests(RestTestHarness,String,CloudSolrClient).mjava","sourceNew":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' ,registerPath :'/solr,/v2', \" +\n        \" 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\"),\n        \"C\",\n        TIMEOUT_S);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        TIMEOUT_S);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?param=multival&json.nl=map\",\n        cloudSolrClient,\n        asList(\"params\", \"multival\"),\n        asList(\"a\", \"b\", \"c\"),\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay\";\n      @SuppressWarnings({\"rawtypes\"})\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        TIMEOUT_S);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        TIMEOUT_S);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        TIMEOUT_S);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        TIMEOUT_S);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        TIMEOUT_S);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        TIMEOUT_S);\n\n    @SuppressWarnings({\"rawtypes\"})\n    List l = (List) Utils.getObjectByPath(map, false, asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ map , l);\n    assertEquals( 2, l.size());\n    assertEquals( \"val\", ((Map)l.get(1)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"searchComponent\", \"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"       registerPath :'/solr,/v2',\"+\n    \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"requestHandler\", \"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        TIMEOUT_S);\n\n    map = getRespMap(\"/dump100?json.nl=arrmap&initArgs=true\", writeHarness);\n    @SuppressWarnings({\"rawtypes\"})\n    List initArgs = (List) map.get(\"initArgs\");\n    assertNotNull(initArgs);\n    assertTrue(initArgs.size() >= 2);\n    assertTrue(((Map)initArgs.get(2)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n\n    payload = \"{\\n\" +\n        \"'add-requesthandler' : { 'name' : '/dump101', 'class': \" +\n        \"'\" + CacheTest.class.getName() + \"', \" +\n        \"    registerPath :'/solr,/v2'\"+\n        \", 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump101\", \"startup\"),\n        \"lazy\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'add-cache' : {name:'lfuCacheDecayFalse', class:'solr.search.CaffeineCache', size:10 ,initialSize:9 , timeDecay:false },\" +\n        \"'add-cache' : {name: 'perSegFilter', class: 'solr.search.CaffeineCache', size:10, initialSize:0 , autowarmCount:10}}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"cache\", \"lfuCacheDecayFalse\", \"class\"),\n        \"solr.search.CaffeineCache\",\n        TIMEOUT_S);\n    assertEquals(\"solr.search.CaffeineCache\",getObjectByPath(map, true, ImmutableList.of(\"overlay\", \"cache\", \"perSegFilter\", \"class\")));\n\n    map = getRespMap(\"/dump101?cacheNames=lfuCacheDecayFalse&cacheNames=perSegFilter\", writeHarness);\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.CaffeineCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"perSegFilter\")));\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.CaffeineCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"lfuCacheDecayFalse\")));\n\n  }\n\n","sourceOld":"  public static void reqhandlertests(RestTestHarness writeHarness, String testServerBaseUrl, CloudSolrClient cloudSolrClient) throws Exception {\n    String payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"requestHandler\", \"/x\", \"startup\"),\n        \"lazy\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' ,registerPath :'/solr,/v2', \" +\n        \" 'startup' : 'lazy' , 'a':'b' , 'defaults': {'def_a':'def A val', 'multival':['a','b','c']}}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"),\n        \"b\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', \" +\n        \"'initParams': 'a',\" +\n        \"'class': 'org.apache.solr.handler.DumpRequestHandler' ,\" +\n        \" 'defaults': {'a':'A','b':'B','c':'C'}}\\n\" +\n        \"}\";\n\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump\", \"defaults\", \"c\"),\n        \"C\",\n        TIMEOUT_S);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?getdefaults=true&json.nl=map\",\n        cloudSolrClient,\n        asList(\"getdefaults\", \"def_a\"),\n        \"def A val\",\n        TIMEOUT_S);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/x?param=multival&json.nl=map\",\n        cloudSolrClient,\n        asList(\"params\", \"multival\"),\n        asList(\"a\", \"b\", \"c\"),\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'delete-requesthandler' : '/x'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    boolean success = false;\n    long startTime = System.nanoTime();\n    int maxTimeoutSeconds = 10;\n    while (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n      String uri = \"/config/overlay\";\n      Map m = testServerBaseUrl == null ? getRespMap(uri, writeHarness) : TestSolrConfigHandlerConcurrent.getAsMap(testServerBaseUrl + uri, cloudSolrClient);\n      if (null == Utils.getObjectByPath(m, true, asList(\"overlay\", \"requestHandler\", \"/x\", \"a\"))) {\n        success = true;\n        break;\n      }\n      Thread.sleep(100);\n\n    }\n    assertTrue(\"Could not delete requestHandler  \", success);\n\n    payload = \"{\\n\" +\n        \"'create-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SpellingQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SpellingQueryConverter\",\n        TIMEOUT_S);\n    payload = \"{\\n\" +\n        \"'update-queryconverter' : { 'name' : 'qc', 'class': 'org.apache.solr.spelling.SuggestQueryConverter'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"queryConverter\", \"qc\", \"class\"),\n        \"org.apache.solr.spelling.SuggestQueryConverter\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'delete-queryconverter' : 'qc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"queryConverter\", \"qc\"),\n        null,\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'create-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermsComponent'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermsComponent\",\n        TIMEOUT_S);\n    payload = \"{\\n\" +\n        \"'update-searchcomponent' : { 'name' : 'tc', 'class': 'org.apache.solr.handler.component.TermVectorComponent' }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"searchComponent\", \"tc\", \"class\"),\n        \"org.apache.solr.handler.component.TermVectorComponent\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'delete-searchcomponent' : 'tc'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"searchComponent\", \"tc\"),\n        null,\n        TIMEOUT_S);\n    //<valueSourceParser name=\"countUsage\" class=\"org.apache.solr.core.CountUsageValueSourceParser\"/>\n    payload = \"{\\n\" +\n        \"'create-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.core.CountUsageValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.core.CountUsageValueSourceParser\",\n        TIMEOUT_S);\n    //  <valueSourceParser name=\"nvl\" class=\"org.apache.solr.search.function.NvlValueSourceParser\">\n//    <float name=\"nvlFloatValue\">0.0</float>\n//    </valueSourceParser>\n    payload = \"{\\n\" +\n        \"'update-valuesourceparser' : { 'name' : 'cu', 'class': 'org.apache.solr.search.function.NvlValueSourceParser'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"valueSourceParser\", \"cu\", \"class\"),\n        \"org.apache.solr.search.function.NvlValueSourceParser\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'delete-valuesourceparser' : 'cu'\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"valueSourceParser\", \"cu\"),\n        null,\n        TIMEOUT_S);\n//    <transformer name=\"mytrans2\" class=\"org.apache.solr.response.transform.ValueAugmenterFactory\" >\n//    <int name=\"value\">5</int>\n//    </transformer>\n    payload = \"{\\n\" +\n        \"'create-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'5'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"transformer\", \"mytrans\", \"class\"),\n        \"org.apache.solr.response.transform.ValueAugmenterFactory\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'update-transformer' : { 'name' : 'mytrans', 'class': 'org.apache.solr.response.transform.ValueAugmenterFactory', 'value':'6'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"transformer\", \"mytrans\", \"value\"),\n        \"6\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'delete-transformer' : 'mytrans',\" +\n        \"'create-initparams' : { 'name' : 'hello', 'key':'val'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    Map map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"transformer\", \"mytrans\"),\n        null,\n        TIMEOUT_S);\n\n    List l = (List) Utils.getObjectByPath(map, false, asList(\"config\", \"initParams\"));\n    assertNotNull(\"no object /config/initParams : \"+ map , l);\n    assertEquals( 2, l.size());\n    assertEquals( \"val\", ((Map)l.get(1)).get(\"key\") );\n\n\n    payload = \"{\\n\" +\n        \"    'add-searchcomponent': {\\n\" +\n        \"        'name': 'myspellcheck',\\n\" +\n        \"        'class': 'solr.SpellCheckComponent',\\n\" +\n        \"        'queryAnalyzerFieldType': 'text_general',\\n\" +\n        \"        'spellchecker': {\\n\" +\n        \"            'name': 'default',\\n\" +\n        \"            'field': '_text_',\\n\" +\n        \"            'class': 'solr.DirectSolrSpellChecker'\\n\" +\n        \"        }\\n\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"searchComponent\", \"myspellcheck\", \"spellchecker\", \"class\"),\n        \"solr.DirectSolrSpellChecker\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"    'add-requesthandler': {\\n\" +\n        \"        name : '/dump100',\\n\" +\n        \"       registerPath :'/solr,/v2',\"+\n    \"        class : 'org.apache.solr.handler.DumpRequestHandler',\" +\n        \"        suggester: [{name: s1,lookupImpl: FuzzyLookupFactory, dictionaryImpl : DocumentDictionaryFactory},\" +\n        \"                    {name: s2,lookupImpl: FuzzyLookupFactory , dictionaryImpl : DocumentExpressionDictionaryFactory}]\" +\n        \"    }\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config\",\n        cloudSolrClient,\n        asList(\"config\", \"requestHandler\", \"/dump100\", \"class\"),\n        \"org.apache.solr.handler.DumpRequestHandler\",\n        TIMEOUT_S);\n\n    map = getRespMap(\"/dump100?json.nl=arrmap&initArgs=true\", writeHarness);\n    List initArgs = (List) map.get(\"initArgs\");\n    assertNotNull(initArgs);\n    assertTrue(initArgs.size() >= 2);\n    assertTrue(((Map)initArgs.get(2)).containsKey(\"suggester\"));\n    assertTrue(((Map)initArgs.get(1)).containsKey(\"suggester\"));\n\n    payload = \"{\\n\" +\n        \"'add-requesthandler' : { 'name' : '/dump101', 'class': \" +\n        \"'\" + CacheTest.class.getName() + \"', \" +\n        \"    registerPath :'/solr,/v2'\"+\n        \", 'startup' : 'lazy'}\\n\" +\n        \"}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump101\", \"startup\"),\n        \"lazy\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'add-cache' : {name:'lfuCacheDecayFalse', class:'solr.search.CaffeineCache', size:10 ,initialSize:9 , timeDecay:false },\" +\n        \"'add-cache' : {name: 'perSegFilter', class: 'solr.search.CaffeineCache', size:10, initialSize:0 , autowarmCount:10}}\";\n    runConfigCommand(writeHarness, \"/config\", payload);\n\n    map = testForResponseElement(writeHarness,\n        testServerBaseUrl,\n        \"/config/overlay\",\n        cloudSolrClient,\n        asList(\"overlay\", \"cache\", \"lfuCacheDecayFalse\", \"class\"),\n        \"solr.search.CaffeineCache\",\n        TIMEOUT_S);\n    assertEquals(\"solr.search.CaffeineCache\",getObjectByPath(map, true, ImmutableList.of(\"overlay\", \"cache\", \"perSegFilter\", \"class\")));\n\n    map = getRespMap(\"/dump101?cacheNames=lfuCacheDecayFalse&cacheNames=perSegFilter\", writeHarness);\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.CaffeineCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"perSegFilter\")));\n    assertEquals(\"Actual output \"+ Utils.toJSONString(map), \"org.apache.solr.search.CaffeineCache\",getObjectByPath(map, true, ImmutableList.of( \"caches\", \"lfuCacheDecayFalse\")));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["9c9780b447ddf847479e7fa9978cb7809a15a0bf"],"4d7d3943904804560937e6239effeebda0f920e4":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","fb61aa13e6babcd69a824d8057631fbaff9a83ce"],"fb61aa13e6babcd69a824d8057631fbaff9a83ce":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5ba46b57f67b4eb7246bdc86cfdeb15b78306b90":["6827268e62848e1e9e42b995c30c14f69a369389"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1"],"e98520789adb1d5ad05afb4956eca0944a929688":["4d7d3943904804560937e6239effeebda0f920e4"],"6827268e62848e1e9e42b995c30c14f69a369389":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"15f9a498a407241cefcbd00ca7fc84d5e7fa573e":["d0a9f341fe265836e64cc6182e6a0eaaacde77d1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a8ab788212d72a7c436e5ef349ca99fe3c8fc78b","1a144790859eb303122988cd315215ff30f449d2"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1","f9af40d645dbfe787d14c1131d1e753ea84e8970"],"1a144790859eb303122988cd315215ff30f449d2":["a8ab788212d72a7c436e5ef349ca99fe3c8fc78b"],"432e578be72da02cfde62dcc7fb4fa8620bc85fd":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1":["432e578be72da02cfde62dcc7fb4fa8620bc85fd"],"93f558d9f0b5a234a28dcc95036e388fcbbadaf7":["5ba46b57f67b4eb7246bdc86cfdeb15b78306b90"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["1a144790859eb303122988cd315215ff30f449d2"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["d0a9f341fe265836e64cc6182e6a0eaaacde77d1","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"f9af40d645dbfe787d14c1131d1e753ea84e8970":["5da69d834fe035a64a0edb3884749ba5f174edb8"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["e9017cf144952056066919f1ebc7897ff9bd71b1","ac1e7fa558287a811ea07634d815ee7b1c541284"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"9c9780b447ddf847479e7fa9978cb7809a15a0bf":["a52341299179de5479672f7cf518bf4b173f34b3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["93f558d9f0b5a234a28dcc95036e388fcbbadaf7","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"d0a9f341fe265836e64cc6182e6a0eaaacde77d1":["93f558d9f0b5a234a28dcc95036e388fcbbadaf7"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["f9af40d645dbfe787d14c1131d1e753ea84e8970"],"a52341299179de5479672f7cf518bf4b173f34b3":["1a144790859eb303122988cd315215ff30f449d2","ac1e7fa558287a811ea07634d815ee7b1c541284"],"a8ab788212d72a7c436e5ef349ca99fe3c8fc78b":["fb61aa13e6babcd69a824d8057631fbaff9a83ce"],"5da69d834fe035a64a0edb3884749ba5f174edb8":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["d0a9f341fe265836e64cc6182e6a0eaaacde77d1","15f9a498a407241cefcbd00ca7fc84d5e7fa573e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["4d7d3943904804560937e6239effeebda0f920e4"],"4d7d3943904804560937e6239effeebda0f920e4":["e98520789adb1d5ad05afb4956eca0944a929688"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"fb61aa13e6babcd69a824d8057631fbaff9a83ce":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","a8ab788212d72a7c436e5ef349ca99fe3c8fc78b"],"bafca15d8e408346a67f4282ad1143b88023893b":["432e578be72da02cfde62dcc7fb4fa8620bc85fd"],"5ba46b57f67b4eb7246bdc86cfdeb15b78306b90":["93f558d9f0b5a234a28dcc95036e388fcbbadaf7"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["5da69d834fe035a64a0edb3884749ba5f174edb8"],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6827268e62848e1e9e42b995c30c14f69a369389":["5ba46b57f67b4eb7246bdc86cfdeb15b78306b90"],"15f9a498a407241cefcbd00ca7fc84d5e7fa573e":["3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"1a144790859eb303122988cd315215ff30f449d2":["e9017cf144952056066919f1ebc7897ff9bd71b1","ac1e7fa558287a811ea07634d815ee7b1c541284","a52341299179de5479672f7cf518bf4b173f34b3"],"432e578be72da02cfde62dcc7fb4fa8620bc85fd":["c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"93f558d9f0b5a234a28dcc95036e388fcbbadaf7":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d0a9f341fe265836e64cc6182e6a0eaaacde77d1"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["fb61aa13e6babcd69a824d8057631fbaff9a83ce"],"f9af40d645dbfe787d14c1131d1e753ea84e8970":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","86290366cefc1b9d4eced13b430858c4a4c0421d"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["6827268e62848e1e9e42b995c30c14f69a369389"],"9c9780b447ddf847479e7fa9978cb7809a15a0bf":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"d0a9f341fe265836e64cc6182e6a0eaaacde77d1":["15f9a498a407241cefcbd00ca7fc84d5e7fa573e","403d05f7f8d69b65659157eff1bc1d2717f04c66","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"a52341299179de5479672f7cf518bf4b173f34b3":["9c9780b447ddf847479e7fa9978cb7809a15a0bf"],"a8ab788212d72a7c436e5ef349ca99fe3c8fc78b":["e9017cf144952056066919f1ebc7897ff9bd71b1","1a144790859eb303122988cd315215ff30f449d2"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"5da69d834fe035a64a0edb3884749ba5f174edb8":["f9af40d645dbfe787d14c1131d1e753ea84e8970"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}