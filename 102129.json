{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilterFactory#testTokenizerFactoryArguments().mjava","commits":[{"id":"ecd7bd52bf60fcbfecf79b3d2467cf7514ae16db","date":1368552110,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilterFactory#testTokenizerFactoryArguments().mjava","pathOld":"/dev/null","sourceNew":"  /** Test that we can parse TokenierFactory's arguments */\n  public void testTokenizerFactoryArguments() throws Exception {\n    final String clazz = PatternTokenizerFactory.class.getName();\n    TokenFilterFactory factory = null;\n\n    // simple arg form\n    factory = tokenFilterFactory(\"Synonym\", \n        \"synonyms\", \"synonyms.txt\", \n        \"tokenizerFactory\", clazz,\n        \"pattern\", \"(.*)\",\n        \"group\", \"0\");\n    assertNotNull(factory);\n    // prefix\n    factory = tokenFilterFactory(\"Synonym\", \n        \"synonyms\", \"synonyms.txt\", \n        \"tokenizerFactory\", clazz,\n        \"tokenizerFactory.pattern\", \"(.*)\",\n        \"tokenizerFactory.group\", \"0\");\n    assertNotNull(factory);\n\n    // sanity check that sub-PatternTokenizerFactory fails w/o pattern\n    try {\n      factory = tokenFilterFactory(\"Synonym\", \n          \"synonyms\", \"synonyms.txt\", \n          \"tokenizerFactory\", clazz);\n      fail(\"tokenizerFactory should have complained about missing pattern arg\");\n    } catch (Exception expected) {\n      // :NOOP:\n    }\n\n    // sanity check that sub-PatternTokenizerFactory fails on unexpected\n    try {\n      factory = tokenFilterFactory(\"Synonym\", \n          \"synonyms\", \"synonyms.txt\", \n          \"tokenizerFactory\", clazz,\n          \"tokenizerFactory.pattern\", \"(.*)\",\n          \"tokenizerFactory.bogusbogusbogus\", \"bogus\",\n          \"tokenizerFactory.group\", \"0\");\n      fail(\"tokenizerFactory should have complained about missing pattern arg\");\n    } catch (Exception expected) {\n      // :NOOP:\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilterFactory#testTokenizerFactoryArguments().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilterFactory#testTokenizerFactoryArguments().mjava","sourceNew":"  /** Test that we can parse TokenierFactory's arguments */\n  public void testTokenizerFactoryArguments() throws Exception {\n    final String clazz = PatternTokenizerFactory.class.getName();\n    TokenFilterFactory factory = null;\n\n    // simple arg form\n    factory = tokenFilterFactory(\"Synonym\", \n        \"synonyms\", \"synonyms.txt\", \n        \"tokenizerFactory\", clazz,\n        \"pattern\", \"(.*)\",\n        \"group\", \"0\");\n    assertNotNull(factory);\n    // prefix\n    factory = tokenFilterFactory(\"Synonym\", \n        \"synonyms\", \"synonyms.txt\", \n        \"tokenizerFactory\", clazz,\n        \"tokenizerFactory.pattern\", \"(.*)\",\n        \"tokenizerFactory.group\", \"0\");\n    assertNotNull(factory);\n\n    // sanity check that sub-PatternTokenizerFactory fails w/o pattern\n    expectThrows(Exception.class, () -> {\n      tokenFilterFactory(\"Synonym\", \n          \"synonyms\", \"synonyms.txt\", \n          \"tokenizerFactory\", clazz);\n    });\n\n    // sanity check that sub-PatternTokenizerFactory fails on unexpected\n    expectThrows(Exception.class, () -> {\n      tokenFilterFactory(\"Synonym\", \n          \"synonyms\", \"synonyms.txt\", \n          \"tokenizerFactory\", clazz,\n          \"tokenizerFactory.pattern\", \"(.*)\",\n          \"tokenizerFactory.bogusbogusbogus\", \"bogus\",\n          \"tokenizerFactory.group\", \"0\");\n    });\n  }\n\n","sourceOld":"  /** Test that we can parse TokenierFactory's arguments */\n  public void testTokenizerFactoryArguments() throws Exception {\n    final String clazz = PatternTokenizerFactory.class.getName();\n    TokenFilterFactory factory = null;\n\n    // simple arg form\n    factory = tokenFilterFactory(\"Synonym\", \n        \"synonyms\", \"synonyms.txt\", \n        \"tokenizerFactory\", clazz,\n        \"pattern\", \"(.*)\",\n        \"group\", \"0\");\n    assertNotNull(factory);\n    // prefix\n    factory = tokenFilterFactory(\"Synonym\", \n        \"synonyms\", \"synonyms.txt\", \n        \"tokenizerFactory\", clazz,\n        \"tokenizerFactory.pattern\", \"(.*)\",\n        \"tokenizerFactory.group\", \"0\");\n    assertNotNull(factory);\n\n    // sanity check that sub-PatternTokenizerFactory fails w/o pattern\n    try {\n      factory = tokenFilterFactory(\"Synonym\", \n          \"synonyms\", \"synonyms.txt\", \n          \"tokenizerFactory\", clazz);\n      fail(\"tokenizerFactory should have complained about missing pattern arg\");\n    } catch (Exception expected) {\n      // :NOOP:\n    }\n\n    // sanity check that sub-PatternTokenizerFactory fails on unexpected\n    try {\n      factory = tokenFilterFactory(\"Synonym\", \n          \"synonyms\", \"synonyms.txt\", \n          \"tokenizerFactory\", clazz,\n          \"tokenizerFactory.pattern\", \"(.*)\",\n          \"tokenizerFactory.bogusbogusbogus\", \"bogus\",\n          \"tokenizerFactory.group\", \"0\");\n      fail(\"tokenizerFactory should have complained about missing pattern arg\");\n    } catch (Exception expected) {\n      // :NOOP:\n    }\n  }\n\n","bugFix":["ecd7bd52bf60fcbfecf79b3d2467cf7514ae16db"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ecd7bd52bf60fcbfecf79b3d2467cf7514ae16db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["ecd7bd52bf60fcbfecf79b3d2467cf7514ae16db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"ecd7bd52bf60fcbfecf79b3d2467cf7514ae16db":["05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ecd7bd52bf60fcbfecf79b3d2467cf7514ae16db"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}