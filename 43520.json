{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkBounds(BytesRef).mjava","commits":[{"id":"e93b477a465bb7b012eb16214d6fe0214003e3ab","date":1359058944,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkBounds(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  // basic value checks\n  private static void checkBounds(BytesRef b) {\n    if (b.bytes == null) {\n      throw new RuntimeException(\"bytes is null\");\n    }\n    if (b.length < 0) {\n      throw new RuntimeException(\"length is negative: \" + b.length);\n    }\n    if (b.length > b.bytes.length) {\n      throw new RuntimeException(\"length is out of bounds: \" + b.length + \", bytes.length=\" + b.bytes.length);\n    }\n    if (b.offset < 0) {\n      throw new RuntimeException(\"offset is negative: \" + b.offset);\n    }\n    if (b.offset > b.bytes.length) {\n      throw new RuntimeException(\"offset out of bounds: \" + b.offset + \", length=\" + b.length);\n    }\n    if (b.offset + b.length < 0) {\n      throw new RuntimeException(\"offset+length is negative: offset=\" + b.offset + \",length=\" + b.length);\n    }\n    if (b.offset + b.length > b.bytes.length) {\n      throw new RuntimeException(\"offset+length out of bounds: offset=\" + b.offset + \",length=\" + b.length + \",bytes.length=\" + b.bytes.length);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a240b823362f0ef40ac66b4764b0109a08b15036","date":1359059459,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkBounds(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  // basic value checks\n  private static void checkBounds(BytesRef b) {\n    if (b.bytes == null) {\n      throw new RuntimeException(\"bytes is null\");\n    }\n    if (b.length < 0) {\n      throw new RuntimeException(\"length is negative: \" + b.length);\n    }\n    if (b.length > b.bytes.length) {\n      throw new RuntimeException(\"length is out of bounds: \" + b.length + \", bytes.length=\" + b.bytes.length);\n    }\n    if (b.offset < 0) {\n      throw new RuntimeException(\"offset is negative: \" + b.offset);\n    }\n    if (b.offset > b.bytes.length) {\n      throw new RuntimeException(\"offset out of bounds: \" + b.offset + \", length=\" + b.length);\n    }\n    if (b.offset + b.length < 0) {\n      throw new RuntimeException(\"offset+length is negative: offset=\" + b.offset + \",length=\" + b.length);\n    }\n    if (b.offset + b.length > b.bytes.length) {\n      throw new RuntimeException(\"offset+length out of bounds: offset=\" + b.offset + \",length=\" + b.length + \",bytes.length=\" + b.bytes.length);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59d00acb12c9809438e21de7c24f016356973d46","date":1359349254,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkBounds(BytesRef).mjava","sourceNew":null,"sourceOld":"  // basic value checks\n  private static void checkBounds(BytesRef b) {\n    if (b.bytes == null) {\n      throw new RuntimeException(\"bytes is null\");\n    }\n    if (b.length < 0) {\n      throw new RuntimeException(\"length is negative: \" + b.length);\n    }\n    if (b.length > b.bytes.length) {\n      throw new RuntimeException(\"length is out of bounds: \" + b.length + \", bytes.length=\" + b.bytes.length);\n    }\n    if (b.offset < 0) {\n      throw new RuntimeException(\"offset is negative: \" + b.offset);\n    }\n    if (b.offset > b.bytes.length) {\n      throw new RuntimeException(\"offset out of bounds: \" + b.offset + \", length=\" + b.length);\n    }\n    if (b.offset + b.length < 0) {\n      throw new RuntimeException(\"offset+length is negative: offset=\" + b.offset + \",length=\" + b.length);\n    }\n    if (b.offset + b.length > b.bytes.length) {\n      throw new RuntimeException(\"offset+length out of bounds: offset=\" + b.offset + \",length=\" + b.length + \",bytes.length=\" + b.bytes.length);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkBounds(BytesRef).mjava","sourceNew":null,"sourceOld":"  // basic value checks\n  private static void checkBounds(BytesRef b) {\n    if (b.bytes == null) {\n      throw new RuntimeException(\"bytes is null\");\n    }\n    if (b.length < 0) {\n      throw new RuntimeException(\"length is negative: \" + b.length);\n    }\n    if (b.length > b.bytes.length) {\n      throw new RuntimeException(\"length is out of bounds: \" + b.length + \", bytes.length=\" + b.bytes.length);\n    }\n    if (b.offset < 0) {\n      throw new RuntimeException(\"offset is negative: \" + b.offset);\n    }\n    if (b.offset > b.bytes.length) {\n      throw new RuntimeException(\"offset out of bounds: \" + b.offset + \", length=\" + b.length);\n    }\n    if (b.offset + b.length < 0) {\n      throw new RuntimeException(\"offset+length is negative: offset=\" + b.offset + \",length=\" + b.length);\n    }\n    if (b.offset + b.length > b.bytes.length) {\n      throw new RuntimeException(\"offset+length out of bounds: offset=\" + b.offset + \",length=\" + b.length + \",bytes.length=\" + b.bytes.length);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59d00acb12c9809438e21de7c24f016356973d46":["e93b477a465bb7b012eb16214d6fe0214003e3ab"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a240b823362f0ef40ac66b4764b0109a08b15036","59d00acb12c9809438e21de7c24f016356973d46"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a240b823362f0ef40ac66b4764b0109a08b15036":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e93b477a465bb7b012eb16214d6fe0214003e3ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"59d00acb12c9809438e21de7c24f016356973d46":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a240b823362f0ef40ac66b4764b0109a08b15036","e93b477a465bb7b012eb16214d6fe0214003e3ab"],"e93b477a465bb7b012eb16214d6fe0214003e3ab":["59d00acb12c9809438e21de7c24f016356973d46"],"a240b823362f0ef40ac66b4764b0109a08b15036":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}