{"path":"lucene/core/src/java/org/apache/lucene/util/MultiBits#getMatchingSub(ReaderUtil.Slice).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/MultiBits#getMatchingSub(ReaderUtil.Slice).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/MultiBits#getMatchingSub(ReaderUtil.Slice).mjava","sourceNew":"  public SubResult getMatchingSub(ReaderUtil.Slice slice) {\n    int reader = ReaderUtil.subIndex(slice.start, starts);\n    assert reader != -1;\n    assert reader < subs.length: \"slice=\" + slice + \" starts[-1]=\" + starts[starts.length-1];\n    final SubResult subResult = new SubResult();\n    if (starts[reader] == slice.start && starts[1+reader] == slice.start+slice.length) {\n      subResult.matches = true;\n      subResult.result = subs[reader];\n    } else {\n      subResult.matches = false;\n    }\n    return subResult;\n  }\n\n","sourceOld":"  public SubResult getMatchingSub(ReaderUtil.Slice slice) {\n    int reader = ReaderUtil.subIndex(slice.start, starts);\n    assert reader != -1;\n    assert reader < subs.length: \"slice=\" + slice + \" starts[-1]=\" + starts[starts.length-1];\n    final SubResult subResult = new SubResult();\n    if (starts[reader] == slice.start && starts[1+reader] == slice.start+slice.length) {\n      subResult.matches = true;\n      subResult.result = subs[reader];\n    } else {\n      subResult.matches = false;\n    }\n    return subResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c02a930d0368fcdb10bd2196d59dc0a8593f738","date":1335839264,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/MultiBits#getMatchingSub(ReaderUtil.Slice).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/MultiBits#getMatchingSub(ReaderUtil.Slice).mjava","sourceNew":"  /**\n   * Returns a sub-Bits matching the provided <code>slice</code>\n   * <p>\n   * Because <code>null</code> usually has a special meaning for\n   * Bits (e.g. no deleted documents), you must check\n   * {@link SubResult#matches} instead to ensure the sub was \n   * actually found.\n   */\n  public SubResult getMatchingSub(ReaderUtil.Slice slice) {\n    int reader = ReaderUtil.subIndex(slice.start, starts);\n    assert reader != -1;\n    assert reader < subs.length: \"slice=\" + slice + \" starts[-1]=\" + starts[starts.length-1];\n    final SubResult subResult = new SubResult();\n    if (starts[reader] == slice.start && starts[1+reader] == slice.start+slice.length) {\n      subResult.matches = true;\n      subResult.result = subs[reader];\n    } else {\n      subResult.matches = false;\n    }\n    return subResult;\n  }\n\n","sourceOld":"  public SubResult getMatchingSub(ReaderUtil.Slice slice) {\n    int reader = ReaderUtil.subIndex(slice.start, starts);\n    assert reader != -1;\n    assert reader < subs.length: \"slice=\" + slice + \" starts[-1]=\" + starts[starts.length-1];\n    final SubResult subResult = new SubResult();\n    if (starts[reader] == slice.start && starts[1+reader] == slice.start+slice.length) {\n      subResult.matches = true;\n      subResult.result = subs[reader];\n    } else {\n      subResult.matches = false;\n    }\n    return subResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/MultiBits#getMatchingSub(ReaderSlice).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/MultiBits#getMatchingSub(ReaderUtil.Slice).mjava","sourceNew":"  /**\n   * Returns a sub-Bits matching the provided <code>slice</code>\n   * <p>\n   * Because <code>null</code> usually has a special meaning for\n   * Bits (e.g. no deleted documents), you must check\n   * {@link SubResult#matches} instead to ensure the sub was \n   * actually found.\n   */\n  public SubResult getMatchingSub(ReaderSlice slice) {\n    int reader = ReaderUtil.subIndex(slice.start, starts);\n    assert reader != -1;\n    assert reader < subs.length: \"slice=\" + slice + \" starts[-1]=\" + starts[starts.length-1];\n    final SubResult subResult = new SubResult();\n    if (starts[reader] == slice.start && starts[1+reader] == slice.start+slice.length) {\n      subResult.matches = true;\n      subResult.result = subs[reader];\n    } else {\n      subResult.matches = false;\n    }\n    return subResult;\n  }\n\n","sourceOld":"  /**\n   * Returns a sub-Bits matching the provided <code>slice</code>\n   * <p>\n   * Because <code>null</code> usually has a special meaning for\n   * Bits (e.g. no deleted documents), you must check\n   * {@link SubResult#matches} instead to ensure the sub was \n   * actually found.\n   */\n  public SubResult getMatchingSub(ReaderUtil.Slice slice) {\n    int reader = ReaderUtil.subIndex(slice.start, starts);\n    assert reader != -1;\n    assert reader < subs.length: \"slice=\" + slice + \" starts[-1]=\" + starts[starts.length-1];\n    final SubResult subResult = new SubResult();\n    if (starts[reader] == slice.start && starts[1+reader] == slice.start+slice.length) {\n      subResult.matches = true;\n      subResult.result = subs[reader];\n    } else {\n      subResult.matches = false;\n    }\n    return subResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["1c02a930d0368fcdb10bd2196d59dc0a8593f738"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1c02a930d0368fcdb10bd2196d59dc0a8593f738":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"]},"commit2Childs":{"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1c02a930d0368fcdb10bd2196d59dc0a8593f738"],"1c02a930d0368fcdb10bd2196d59dc0a8593f738":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}