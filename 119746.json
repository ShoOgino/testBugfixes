{"path":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#isDeterministicSlow(LightAutomaton).mjava","commits":[{"id":"a67285d1a68175d877eb9fd1624fccad3db028ff","date":1402779028,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#isDeterministicSlow(LightAutomaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#isDeterministic(LightAutomaton).mjava","sourceNew":"  // nocommit where to assert this...\n  /** Returns true if the automaton is deterministic. */\n  public static boolean isDeterministicSlow(LightAutomaton a) {\n    Transition t = new Transition();\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      int count = a.initTransition(s, t);\n      int lastMax = -1;\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (t.min <= lastMax) {\n          assert a.isDeterministic() == false;\n          return false;\n        }\n        lastMax = t.max;\n      }\n    }\n\n    assert a.isDeterministic() == true;\n    return true;\n  }\n\n","sourceOld":"  /** Returns true if the automaton is deterministic. */\n  public static boolean isDeterministic(LightAutomaton a) {\n    BitSet done = new BitSet(a.getNumStates());\n    List<Integer> queue = new ArrayList<>();\n    queue.add(0);\n    done.set(0);\n    Transition t = new Transition();\n\n    while (queue.isEmpty() == false) {\n      int state = queue.remove(queue.size()-1);\n      int count = a.initTransition(state, t);\n      int lastMax = -1;\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (t.min <= lastMax) {\n          return false;\n        }\n        lastMax = t.max;\n        if (done.get(t.dest) == false) {\n          done.set(t.dest);\n          queue.add(t.dest);\n        }\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#isDeterministicSlow(Automaton).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#isDeterministicSlow(LightAutomaton).mjava","sourceNew":"  // nocommit where to assert this...\n  /** Returns true if the automaton is deterministic. */\n  public static boolean isDeterministicSlow(Automaton a) {\n    Transition t = new Transition();\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      int count = a.initTransition(s, t);\n      int lastMax = -1;\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (t.min <= lastMax) {\n          assert a.isDeterministic() == false;\n          return false;\n        }\n        lastMax = t.max;\n      }\n    }\n\n    assert a.isDeterministic() == true;\n    return true;\n  }\n\n","sourceOld":"  // nocommit where to assert this...\n  /** Returns true if the automaton is deterministic. */\n  public static boolean isDeterministicSlow(LightAutomaton a) {\n    Transition t = new Transition();\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      int count = a.initTransition(s, t);\n      int lastMax = -1;\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (t.min <= lastMax) {\n          assert a.isDeterministic() == false;\n          return false;\n        }\n        lastMax = t.max;\n      }\n    }\n\n    assert a.isDeterministic() == true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a67285d1a68175d877eb9fd1624fccad3db028ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a67285d1a68175d877eb9fd1624fccad3db028ff":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a67285d1a68175d877eb9fd1624fccad3db028ff","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}