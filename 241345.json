{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDimensionalWriter#close().mjava","commits":[{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDimensionalWriter#close().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void close() throws IOException {\n    if (dataOut != null) {\n      SimpleTextUtil.writeChecksum(dataOut, scratch);\n      dataOut.close();\n      dataOut = null;\n\n      // Write index file\n      String fileName = IndexFileNames.segmentFileName(writeState.segmentInfo.name, writeState.segmentSuffix, SimpleTextDimensionalFormat.DIMENSIONAL_INDEX_EXTENSION);\n      try (IndexOutput indexOut = writeState.directory.createOutput(fileName, writeState.context)) {\n        int count = indexFPs.size();\n        write(indexOut, FIELD_COUNT);\n        write(indexOut, Integer.toString(count));\n        newline(indexOut);\n        for(Map.Entry<String,Long> ent : indexFPs.entrySet()) {\n          write(indexOut, FIELD_FP_NAME);\n          write(indexOut, ent.getKey());\n          newline(indexOut);\n          write(indexOut, FIELD_FP);\n          write(indexOut, Long.toString(ent.getValue()));\n          newline(indexOut);\n        }\n        SimpleTextUtil.writeChecksum(indexOut, scratch);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["85ca0e073c286ebb2c89364ada6dd2740fc18880"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPointWriter#close().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDimensionalWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    if (dataOut != null) {\n      SimpleTextUtil.writeChecksum(dataOut, scratch);\n      dataOut.close();\n      dataOut = null;\n\n      // Write index file\n      String fileName = IndexFileNames.segmentFileName(writeState.segmentInfo.name, writeState.segmentSuffix, SimpleTextPointFormat.POINT_INDEX_EXTENSION);\n      try (IndexOutput indexOut = writeState.directory.createOutput(fileName, writeState.context)) {\n        int count = indexFPs.size();\n        write(indexOut, FIELD_COUNT);\n        write(indexOut, Integer.toString(count));\n        newline(indexOut);\n        for(Map.Entry<String,Long> ent : indexFPs.entrySet()) {\n          write(indexOut, FIELD_FP_NAME);\n          write(indexOut, ent.getKey());\n          newline(indexOut);\n          write(indexOut, FIELD_FP);\n          write(indexOut, Long.toString(ent.getValue()));\n          newline(indexOut);\n        }\n        SimpleTextUtil.writeChecksum(indexOut, scratch);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    if (dataOut != null) {\n      SimpleTextUtil.writeChecksum(dataOut, scratch);\n      dataOut.close();\n      dataOut = null;\n\n      // Write index file\n      String fileName = IndexFileNames.segmentFileName(writeState.segmentInfo.name, writeState.segmentSuffix, SimpleTextDimensionalFormat.DIMENSIONAL_INDEX_EXTENSION);\n      try (IndexOutput indexOut = writeState.directory.createOutput(fileName, writeState.context)) {\n        int count = indexFPs.size();\n        write(indexOut, FIELD_COUNT);\n        write(indexOut, Integer.toString(count));\n        newline(indexOut);\n        for(Map.Entry<String,Long> ent : indexFPs.entrySet()) {\n          write(indexOut, FIELD_FP_NAME);\n          write(indexOut, ent.getKey());\n          newline(indexOut);\n          write(indexOut, FIELD_FP);\n          write(indexOut, Long.toString(ent.getValue()));\n          newline(indexOut);\n        }\n        SimpleTextUtil.writeChecksum(indexOut, scratch);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}