{"path":"src/java/org/apache/lucene/index/DocumentWriter#writePostings(Posting[],String).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentWriter#writePostings(Posting[],String).mjava","pathOld":"/dev/null","sourceNew":"  private final void writePostings(Posting[] postings, String segment)\n       throws IOException {\n    OutputStream freq = null, prox = null;\n    TermInfosWriter tis = null;\n\n    try {\n      freq = directory.createFile(segment + \".frq\");\n      prox = directory.createFile(segment + \".prx\");\n      tis = new TermInfosWriter(directory, segment, fieldInfos);\n      TermInfo ti = new TermInfo();\n\n      for (int i = 0; i < postings.length; i++) {\n\tPosting posting = postings[i];\n\n\t// add an entry to the dictionary with pointers to prox and freq files\n\tti.set(1, freq.getFilePointer(), prox.getFilePointer());\n\ttis.add(posting.term, ti);\n\t\n\t// add an entry to the freq file\n\tint f = posting.freq;\n\tif (f == 1)\t\t\t\t  // optimize freq=1\n\t  freq.writeVInt(1);\t\t\t  // set low bit of doc num.\n\telse {\n\t  freq.writeVInt(0);\t\t\t  // the document number\n\t  freq.writeVInt(f);\t\t\t  // frequency in doc\n\t}\n\t\n\tint lastPosition = 0;\t\t\t  // write positions\n\tint[] positions = posting.positions;\n\tfor (int j = 0; j < f; j++) {\t\t  // use delta-encoding\n\t  int position = positions[j];\n\t  prox.writeVInt(position - lastPosition);\n\t  lastPosition = position;\n\t}\n      }\n    }\n    finally {\n      if (freq != null) freq.close();\n      if (prox != null) prox.close();\n      if (tis  != null)  tis.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03ae70812bc33b0270c1366378b2c2da95fe86a6","date":1036648540,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentWriter#writePostings(Posting[],String).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentWriter#writePostings(Posting[],String).mjava","sourceNew":"  private final void writePostings(Posting[] postings, String segment)\n       throws IOException {\n    OutputStream freq = null, prox = null;\n    TermInfosWriter tis = null;\n\n    try {\n      freq = directory.createFile(segment + \".frq\");\n      prox = directory.createFile(segment + \".prx\");\n      tis = new TermInfosWriter(directory, segment, fieldInfos);\n      TermInfo ti = new TermInfo();\n\n      for (int i = 0; i < postings.length; i++) {\n\tPosting posting = postings[i];\n\n\t// add an entry to the dictionary with pointers to prox and freq files\n\tti.set(1, freq.getFilePointer(), prox.getFilePointer());\n\ttis.add(posting.term, ti);\n\n\t// add an entry to the freq file\n\tint f = posting.freq;\n\tif (f == 1)\t\t\t\t  // optimize freq=1\n\t  freq.writeVInt(1);\t\t\t  // set low bit of doc num.\n\telse {\n\t  freq.writeVInt(0);\t\t\t  // the document number\n\t  freq.writeVInt(f);\t\t\t  // frequency in doc\n\t}\n\n\tint lastPosition = 0;\t\t\t  // write positions\n\tint[] positions = posting.positions;\n\tfor (int j = 0; j < f; j++) {\t\t  // use delta-encoding\n\t  int position = positions[j];\n\t  prox.writeVInt(position - lastPosition);\n\t  lastPosition = position;\n\t}\n      }\n    }\n    finally {\n      if (freq != null) freq.close();\n      if (prox != null) prox.close();\n      if (tis  != null)  tis.close();\n    }\n  }\n\n","sourceOld":"  private final void writePostings(Posting[] postings, String segment)\n       throws IOException {\n    OutputStream freq = null, prox = null;\n    TermInfosWriter tis = null;\n\n    try {\n      freq = directory.createFile(segment + \".frq\");\n      prox = directory.createFile(segment + \".prx\");\n      tis = new TermInfosWriter(directory, segment, fieldInfos);\n      TermInfo ti = new TermInfo();\n\n      for (int i = 0; i < postings.length; i++) {\n\tPosting posting = postings[i];\n\n\t// add an entry to the dictionary with pointers to prox and freq files\n\tti.set(1, freq.getFilePointer(), prox.getFilePointer());\n\ttis.add(posting.term, ti);\n\t\n\t// add an entry to the freq file\n\tint f = posting.freq;\n\tif (f == 1)\t\t\t\t  // optimize freq=1\n\t  freq.writeVInt(1);\t\t\t  // set low bit of doc num.\n\telse {\n\t  freq.writeVInt(0);\t\t\t  // the document number\n\t  freq.writeVInt(f);\t\t\t  // frequency in doc\n\t}\n\t\n\tint lastPosition = 0;\t\t\t  // write positions\n\tint[] positions = posting.positions;\n\tfor (int j = 0; j < f; j++) {\t\t  // use delta-encoding\n\t  int position = positions[j];\n\t  prox.writeVInt(position - lastPosition);\n\t  lastPosition = position;\n\t}\n      }\n    }\n    finally {\n      if (freq != null) freq.close();\n      if (prox != null) prox.close();\n      if (tis  != null)  tis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66f8ac981e8707cfae011613a8168a2edeb0b6e3","date":1064079760,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentWriter#writePostings(Posting[],String).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentWriter#writePostings(Posting[],String).mjava","sourceNew":"  private final void writePostings(Posting[] postings, String segment)\n    throws IOException {\n    OutputStream freq = null, prox = null;\n    TermInfosWriter tis = null;\n\n    try {\n      freq = directory.createFile(segment + \".frq\");\n      prox = directory.createFile(segment + \".prx\");\n      tis = new TermInfosWriter(directory, segment, fieldInfos);\n      TermInfo ti = new TermInfo();\n\n      for (int i = 0; i < postings.length; i++) {\n        Posting posting = postings[i];\n\n        // add an entry to the dictionary with pointers to prox and freq files\n        ti.set(1, freq.getFilePointer(), prox.getFilePointer());\n        tis.add(posting.term, ti);\n\n        // add an entry to the freq file\n        int f = posting.freq;\n        if (f == 1)\t\t\t\t  // optimize freq=1\n          freq.writeVInt(1);\t\t\t  // set low bit of doc num.\n        else {\n          freq.writeVInt(0);\t\t\t  // the document number\n          freq.writeVInt(f);\t\t\t  // frequency in doc\n        }\n\n        int lastPosition = 0;\t\t\t  // write positions\n        int[] positions = posting.positions;\n        for (int j = 0; j < f; j++) {\t\t  // use delta-encoding\n          int position = positions[j];\n          prox.writeVInt(position - lastPosition);\n          lastPosition = position;\n        }\n      }\n    } finally {\n      if (freq != null) freq.close();\n      if (prox != null) prox.close();\n      if (tis != null) tis.close();\n    }\n  }\n\n","sourceOld":"  private final void writePostings(Posting[] postings, String segment)\n       throws IOException {\n    OutputStream freq = null, prox = null;\n    TermInfosWriter tis = null;\n\n    try {\n      freq = directory.createFile(segment + \".frq\");\n      prox = directory.createFile(segment + \".prx\");\n      tis = new TermInfosWriter(directory, segment, fieldInfos);\n      TermInfo ti = new TermInfo();\n\n      for (int i = 0; i < postings.length; i++) {\n\tPosting posting = postings[i];\n\n\t// add an entry to the dictionary with pointers to prox and freq files\n\tti.set(1, freq.getFilePointer(), prox.getFilePointer());\n\ttis.add(posting.term, ti);\n\n\t// add an entry to the freq file\n\tint f = posting.freq;\n\tif (f == 1)\t\t\t\t  // optimize freq=1\n\t  freq.writeVInt(1);\t\t\t  // set low bit of doc num.\n\telse {\n\t  freq.writeVInt(0);\t\t\t  // the document number\n\t  freq.writeVInt(f);\t\t\t  // frequency in doc\n\t}\n\n\tint lastPosition = 0;\t\t\t  // write positions\n\tint[] positions = posting.positions;\n\tfor (int j = 0; j < f; j++) {\t\t  // use delta-encoding\n\t  int position = positions[j];\n\t  prox.writeVInt(position - lastPosition);\n\t  lastPosition = position;\n\t}\n      }\n    }\n    finally {\n      if (freq != null) freq.close();\n      if (prox != null) prox.close();\n      if (tis  != null)  tis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15c469602973ef1a33c9a07367a380d278ffab20","date":1074206555,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentWriter#writePostings(Posting[],String).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentWriter#writePostings(Posting[],String).mjava","sourceNew":"  private final void writePostings(Posting[] postings, String segment)\n    throws IOException {\n    OutputStream freq = null, prox = null;\n    TermInfosWriter tis = null;\n\n    try {\n      freq = directory.createFile(segment + \".frq\");\n      prox = directory.createFile(segment + \".prx\");\n      tis = new TermInfosWriter(directory, segment, fieldInfos);\n      TermInfo ti = new TermInfo();\n\n      for (int i = 0; i < postings.length; i++) {\n        Posting posting = postings[i];\n\n        // add an entry to the dictionary with pointers to prox and freq files\n        ti.set(1, freq.getFilePointer(), prox.getFilePointer(), -1);\n        tis.add(posting.term, ti);\n\n        // add an entry to the freq file\n        int f = posting.freq;\n        if (f == 1)\t\t\t\t  // optimize freq=1\n          freq.writeVInt(1);\t\t\t  // set low bit of doc num.\n        else {\n          freq.writeVInt(0);\t\t\t  // the document number\n          freq.writeVInt(f);\t\t\t  // frequency in doc\n        }\n\n        int lastPosition = 0;\t\t\t  // write positions\n        int[] positions = posting.positions;\n        for (int j = 0; j < f; j++) {\t\t  // use delta-encoding\n          int position = positions[j];\n          prox.writeVInt(position - lastPosition);\n          lastPosition = position;\n        }\n      }\n    } finally {\n      if (freq != null) freq.close();\n      if (prox != null) prox.close();\n      if (tis != null) tis.close();\n    }\n  }\n\n","sourceOld":"  private final void writePostings(Posting[] postings, String segment)\n    throws IOException {\n    OutputStream freq = null, prox = null;\n    TermInfosWriter tis = null;\n\n    try {\n      freq = directory.createFile(segment + \".frq\");\n      prox = directory.createFile(segment + \".prx\");\n      tis = new TermInfosWriter(directory, segment, fieldInfos);\n      TermInfo ti = new TermInfo();\n\n      for (int i = 0; i < postings.length; i++) {\n        Posting posting = postings[i];\n\n        // add an entry to the dictionary with pointers to prox and freq files\n        ti.set(1, freq.getFilePointer(), prox.getFilePointer());\n        tis.add(posting.term, ti);\n\n        // add an entry to the freq file\n        int f = posting.freq;\n        if (f == 1)\t\t\t\t  // optimize freq=1\n          freq.writeVInt(1);\t\t\t  // set low bit of doc num.\n        else {\n          freq.writeVInt(0);\t\t\t  // the document number\n          freq.writeVInt(f);\t\t\t  // frequency in doc\n        }\n\n        int lastPosition = 0;\t\t\t  // write positions\n        int[] positions = posting.positions;\n        for (int j = 0; j < f; j++) {\t\t  // use delta-encoding\n          int position = positions[j];\n          prox.writeVInt(position - lastPosition);\n          lastPosition = position;\n        }\n      }\n    } finally {\n      if (freq != null) freq.close();\n      if (prox != null) prox.close();\n      if (tis != null) tis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentWriter#writePostings(Posting[],String).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentWriter#writePostings(Posting[],String).mjava","sourceNew":"  private final void writePostings(Posting[] postings, String segment)\n          throws IOException {\n    OutputStream freq = null, prox = null;\n    TermInfosWriter tis = null;\n    TermVectorsWriter termVectorWriter = null;\n    try {\n      //open files for inverse index storage\n      freq = directory.createFile(segment + \".frq\");\n      prox = directory.createFile(segment + \".prx\");\n      tis = new TermInfosWriter(directory, segment, fieldInfos);\n      TermInfo ti = new TermInfo();\n      String currentField = null;\n\n      for (int i = 0; i < postings.length; i++) {\n        Posting posting = postings[i];\n\n        // add an entry to the dictionary with pointers to prox and freq files\n        ti.set(1, freq.getFilePointer(), prox.getFilePointer(), -1);\n        tis.add(posting.term, ti);\n\n        // add an entry to the freq file\n        int postingFreq = posting.freq;\n        if (postingFreq == 1)\t\t\t\t  // optimize freq=1\n          freq.writeVInt(1);\t\t\t  // set low bit of doc num.\n        else {\n          freq.writeVInt(0);\t\t\t  // the document number\n          freq.writeVInt(postingFreq);\t\t\t  // frequency in doc\n        }\n\n        int lastPosition = 0;\t\t\t  // write positions\n        int[] positions = posting.positions;\n        for (int j = 0; j < postingFreq; j++) {\t\t  // use delta-encoding\n          int position = positions[j];\n          prox.writeVInt(position - lastPosition);\n          lastPosition = position;\n        }\n        // check to see if we switched to a new field\n        String termField = posting.term.field();\n        if (currentField != termField) {\n          // changing field - see if there is something to save\n          currentField = termField;\n          FieldInfo fi = fieldInfos.fieldInfo(currentField);\n          if (fi.storeTermVector) {\n            if (termVectorWriter == null) {\n              termVectorWriter =\n                new TermVectorsWriter(directory, segment, fieldInfos);\n              termVectorWriter.openDocument();\n            }\n            termVectorWriter.openField(currentField);\n          } else if (termVectorWriter != null) {\n            termVectorWriter.closeField();\n          }\n        }\n        if (termVectorWriter != null && termVectorWriter.isFieldOpen()) {\n          termVectorWriter.addTerm(posting.term.text(), postingFreq);\n        }\n      }\n      if (termVectorWriter != null)\n        termVectorWriter.closeDocument();\n    } finally {\n      // make an effort to close all streams we can but remember and re-throw\n      // the first exception encountered in this process\n      IOException keep = null;\n      if (freq != null) try { freq.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (prox != null) try { prox.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (tis  != null) try {  tis.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (termVectorWriter  != null) try {  termVectorWriter.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (keep != null) throw (IOException) keep.fillInStackTrace();\n    }\n  }\n\n","sourceOld":"  private final void writePostings(Posting[] postings, String segment)\n    throws IOException {\n    OutputStream freq = null, prox = null;\n    TermInfosWriter tis = null;\n\n    try {\n      freq = directory.createFile(segment + \".frq\");\n      prox = directory.createFile(segment + \".prx\");\n      tis = new TermInfosWriter(directory, segment, fieldInfos);\n      TermInfo ti = new TermInfo();\n\n      for (int i = 0; i < postings.length; i++) {\n        Posting posting = postings[i];\n\n        // add an entry to the dictionary with pointers to prox and freq files\n        ti.set(1, freq.getFilePointer(), prox.getFilePointer(), -1);\n        tis.add(posting.term, ti);\n\n        // add an entry to the freq file\n        int f = posting.freq;\n        if (f == 1)\t\t\t\t  // optimize freq=1\n          freq.writeVInt(1);\t\t\t  // set low bit of doc num.\n        else {\n          freq.writeVInt(0);\t\t\t  // the document number\n          freq.writeVInt(f);\t\t\t  // frequency in doc\n        }\n\n        int lastPosition = 0;\t\t\t  // write positions\n        int[] positions = posting.positions;\n        for (int j = 0; j < f; j++) {\t\t  // use delta-encoding\n          int position = positions[j];\n          prox.writeVInt(position - lastPosition);\n          lastPosition = position;\n        }\n      }\n    } finally {\n      if (freq != null) freq.close();\n      if (prox != null) prox.close();\n      if (tis != null) tis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dda77265180d41bf85c84c995e25eda7b8e1b74d","date":1096395352,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentWriter#writePostings(Posting[],String).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentWriter#writePostings(Posting[],String).mjava","sourceNew":"  private final void writePostings(Posting[] postings, String segment)\n          throws IOException {\n    IndexOutput freq = null, prox = null;\n    TermInfosWriter tis = null;\n    TermVectorsWriter termVectorWriter = null;\n    try {\n      //open files for inverse index storage\n      freq = directory.createOutput(segment + \".frq\");\n      prox = directory.createOutput(segment + \".prx\");\n      tis = new TermInfosWriter(directory, segment, fieldInfos);\n      TermInfo ti = new TermInfo();\n      String currentField = null;\n\n      for (int i = 0; i < postings.length; i++) {\n        Posting posting = postings[i];\n\n        // add an entry to the dictionary with pointers to prox and freq files\n        ti.set(1, freq.getFilePointer(), prox.getFilePointer(), -1);\n        tis.add(posting.term, ti);\n\n        // add an entry to the freq file\n        int postingFreq = posting.freq;\n        if (postingFreq == 1)\t\t\t\t  // optimize freq=1\n          freq.writeVInt(1);\t\t\t  // set low bit of doc num.\n        else {\n          freq.writeVInt(0);\t\t\t  // the document number\n          freq.writeVInt(postingFreq);\t\t\t  // frequency in doc\n        }\n\n        int lastPosition = 0;\t\t\t  // write positions\n        int[] positions = posting.positions;\n        for (int j = 0; j < postingFreq; j++) {\t\t  // use delta-encoding\n          int position = positions[j];\n          prox.writeVInt(position - lastPosition);\n          lastPosition = position;\n        }\n        // check to see if we switched to a new field\n        String termField = posting.term.field();\n        if (currentField != termField) {\n          // changing field - see if there is something to save\n          currentField = termField;\n          FieldInfo fi = fieldInfos.fieldInfo(currentField);\n          if (fi.storeTermVector) {\n            if (termVectorWriter == null) {\n              termVectorWriter =\n                new TermVectorsWriter(directory, segment, fieldInfos);\n              termVectorWriter.openDocument();\n            }\n            termVectorWriter.openField(currentField);\n          } else if (termVectorWriter != null) {\n            termVectorWriter.closeField();\n          }\n        }\n        if (termVectorWriter != null && termVectorWriter.isFieldOpen()) {\n          termVectorWriter.addTerm(posting.term.text(), postingFreq);\n        }\n      }\n      if (termVectorWriter != null)\n        termVectorWriter.closeDocument();\n    } finally {\n      // make an effort to close all streams we can but remember and re-throw\n      // the first exception encountered in this process\n      IOException keep = null;\n      if (freq != null) try { freq.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (prox != null) try { prox.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (tis  != null) try {  tis.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (termVectorWriter  != null) try {  termVectorWriter.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (keep != null) throw (IOException) keep.fillInStackTrace();\n    }\n  }\n\n","sourceOld":"  private final void writePostings(Posting[] postings, String segment)\n          throws IOException {\n    OutputStream freq = null, prox = null;\n    TermInfosWriter tis = null;\n    TermVectorsWriter termVectorWriter = null;\n    try {\n      //open files for inverse index storage\n      freq = directory.createFile(segment + \".frq\");\n      prox = directory.createFile(segment + \".prx\");\n      tis = new TermInfosWriter(directory, segment, fieldInfos);\n      TermInfo ti = new TermInfo();\n      String currentField = null;\n\n      for (int i = 0; i < postings.length; i++) {\n        Posting posting = postings[i];\n\n        // add an entry to the dictionary with pointers to prox and freq files\n        ti.set(1, freq.getFilePointer(), prox.getFilePointer(), -1);\n        tis.add(posting.term, ti);\n\n        // add an entry to the freq file\n        int postingFreq = posting.freq;\n        if (postingFreq == 1)\t\t\t\t  // optimize freq=1\n          freq.writeVInt(1);\t\t\t  // set low bit of doc num.\n        else {\n          freq.writeVInt(0);\t\t\t  // the document number\n          freq.writeVInt(postingFreq);\t\t\t  // frequency in doc\n        }\n\n        int lastPosition = 0;\t\t\t  // write positions\n        int[] positions = posting.positions;\n        for (int j = 0; j < postingFreq; j++) {\t\t  // use delta-encoding\n          int position = positions[j];\n          prox.writeVInt(position - lastPosition);\n          lastPosition = position;\n        }\n        // check to see if we switched to a new field\n        String termField = posting.term.field();\n        if (currentField != termField) {\n          // changing field - see if there is something to save\n          currentField = termField;\n          FieldInfo fi = fieldInfos.fieldInfo(currentField);\n          if (fi.storeTermVector) {\n            if (termVectorWriter == null) {\n              termVectorWriter =\n                new TermVectorsWriter(directory, segment, fieldInfos);\n              termVectorWriter.openDocument();\n            }\n            termVectorWriter.openField(currentField);\n          } else if (termVectorWriter != null) {\n            termVectorWriter.closeField();\n          }\n        }\n        if (termVectorWriter != null && termVectorWriter.isFieldOpen()) {\n          termVectorWriter.addTerm(posting.term.text(), postingFreq);\n        }\n      }\n      if (termVectorWriter != null)\n        termVectorWriter.closeDocument();\n    } finally {\n      // make an effort to close all streams we can but remember and re-throw\n      // the first exception encountered in this process\n      IOException keep = null;\n      if (freq != null) try { freq.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (prox != null) try { prox.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (tis  != null) try {  tis.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (termVectorWriter  != null) try {  termVectorWriter.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (keep != null) throw (IOException) keep.fillInStackTrace();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0","date":1096997448,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentWriter#writePostings(Posting[],String).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentWriter#writePostings(Posting[],String).mjava","sourceNew":"  private final void writePostings(Posting[] postings, String segment)\n          throws IOException {\n    IndexOutput freq = null, prox = null;\n    TermInfosWriter tis = null;\n    TermVectorsWriter termVectorWriter = null;\n    try {\n      //open files for inverse index storage\n      freq = directory.createOutput(segment + \".frq\");\n      prox = directory.createOutput(segment + \".prx\");\n      tis = new TermInfosWriter(directory, segment, fieldInfos);\n      TermInfo ti = new TermInfo();\n      String currentField = null;\n\n      for (int i = 0; i < postings.length; i++) {\n        Posting posting = postings[i];\n\n        // add an entry to the dictionary with pointers to prox and freq files\n        ti.set(1, freq.getFilePointer(), prox.getFilePointer(), -1);\n        tis.add(posting.term, ti);\n\n        // add an entry to the freq file\n        int postingFreq = posting.freq;\n        if (postingFreq == 1)\t\t\t\t  // optimize freq=1\n          freq.writeVInt(1);\t\t\t  // set low bit of doc num.\n        else {\n          freq.writeVInt(0);\t\t\t  // the document number\n          freq.writeVInt(postingFreq);\t\t\t  // frequency in doc\n        }\n\n        int lastPosition = 0;\t\t\t  // write positions\n        int[] positions = posting.positions;\n        for (int j = 0; j < postingFreq; j++) {\t\t  // use delta-encoding\n          int position = positions[j];\n          prox.writeVInt(position - lastPosition);\n          lastPosition = position;\n        }\n        // check to see if we switched to a new field\n        String termField = posting.term.field();\n        if (currentField != termField) {\n          // changing field - see if there is something to save\n          currentField = termField;\n          FieldInfo fi = fieldInfos.fieldInfo(currentField);\n          if (fi.storeTermVector) {\n            if (termVectorWriter == null) {\n              termVectorWriter =\n                new TermVectorsWriter(directory, segment, fieldInfos);\n              termVectorWriter.openDocument();\n            }\n            termVectorWriter.openField(currentField);\n\n          } else if (termVectorWriter != null) {\n            termVectorWriter.closeField();\n          }\n        }\n        if (termVectorWriter != null && termVectorWriter.isFieldOpen()) {\n            termVectorWriter.addTerm(posting.term.text(), postingFreq, posting.positions, posting.offsets);\n        }\n      }\n      if (termVectorWriter != null)\n        termVectorWriter.closeDocument();\n    } finally {\n      // make an effort to close all streams we can but remember and re-throw\n      // the first exception encountered in this process\n      IOException keep = null;\n      if (freq != null) try { freq.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (prox != null) try { prox.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (tis  != null) try {  tis.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (termVectorWriter  != null) try {  termVectorWriter.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (keep != null) throw (IOException) keep.fillInStackTrace();\n    }\n  }\n\n","sourceOld":"  private final void writePostings(Posting[] postings, String segment)\n          throws IOException {\n    IndexOutput freq = null, prox = null;\n    TermInfosWriter tis = null;\n    TermVectorsWriter termVectorWriter = null;\n    try {\n      //open files for inverse index storage\n      freq = directory.createOutput(segment + \".frq\");\n      prox = directory.createOutput(segment + \".prx\");\n      tis = new TermInfosWriter(directory, segment, fieldInfos);\n      TermInfo ti = new TermInfo();\n      String currentField = null;\n\n      for (int i = 0; i < postings.length; i++) {\n        Posting posting = postings[i];\n\n        // add an entry to the dictionary with pointers to prox and freq files\n        ti.set(1, freq.getFilePointer(), prox.getFilePointer(), -1);\n        tis.add(posting.term, ti);\n\n        // add an entry to the freq file\n        int postingFreq = posting.freq;\n        if (postingFreq == 1)\t\t\t\t  // optimize freq=1\n          freq.writeVInt(1);\t\t\t  // set low bit of doc num.\n        else {\n          freq.writeVInt(0);\t\t\t  // the document number\n          freq.writeVInt(postingFreq);\t\t\t  // frequency in doc\n        }\n\n        int lastPosition = 0;\t\t\t  // write positions\n        int[] positions = posting.positions;\n        for (int j = 0; j < postingFreq; j++) {\t\t  // use delta-encoding\n          int position = positions[j];\n          prox.writeVInt(position - lastPosition);\n          lastPosition = position;\n        }\n        // check to see if we switched to a new field\n        String termField = posting.term.field();\n        if (currentField != termField) {\n          // changing field - see if there is something to save\n          currentField = termField;\n          FieldInfo fi = fieldInfos.fieldInfo(currentField);\n          if (fi.storeTermVector) {\n            if (termVectorWriter == null) {\n              termVectorWriter =\n                new TermVectorsWriter(directory, segment, fieldInfos);\n              termVectorWriter.openDocument();\n            }\n            termVectorWriter.openField(currentField);\n          } else if (termVectorWriter != null) {\n            termVectorWriter.closeField();\n          }\n        }\n        if (termVectorWriter != null && termVectorWriter.isFieldOpen()) {\n          termVectorWriter.addTerm(posting.term.text(), postingFreq);\n        }\n      }\n      if (termVectorWriter != null)\n        termVectorWriter.closeDocument();\n    } finally {\n      // make an effort to close all streams we can but remember and re-throw\n      // the first exception encountered in this process\n      IOException keep = null;\n      if (freq != null) try { freq.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (prox != null) try { prox.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (tis  != null) try {  tis.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (termVectorWriter  != null) try {  termVectorWriter.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (keep != null) throw (IOException) keep.fillInStackTrace();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3afaca6e0770734b01e3bc663bec3ffa71b6f87b","date":1110394706,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentWriter#writePostings(Posting[],String).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentWriter#writePostings(Posting[],String).mjava","sourceNew":"  private final void writePostings(Posting[] postings, String segment)\n          throws IOException {\n    IndexOutput freq = null, prox = null;\n    TermInfosWriter tis = null;\n    TermVectorsWriter termVectorWriter = null;\n    try {\n      //open files for inverse index storage\n      freq = directory.createOutput(segment + \".frq\");\n      prox = directory.createOutput(segment + \".prx\");\n      tis = new TermInfosWriter(directory, segment, fieldInfos,\n                                termIndexInterval);\n      TermInfo ti = new TermInfo();\n      String currentField = null;\n\n      for (int i = 0; i < postings.length; i++) {\n        Posting posting = postings[i];\n\n        // add an entry to the dictionary with pointers to prox and freq files\n        ti.set(1, freq.getFilePointer(), prox.getFilePointer(), -1);\n        tis.add(posting.term, ti);\n\n        // add an entry to the freq file\n        int postingFreq = posting.freq;\n        if (postingFreq == 1)\t\t\t\t  // optimize freq=1\n          freq.writeVInt(1);\t\t\t  // set low bit of doc num.\n        else {\n          freq.writeVInt(0);\t\t\t  // the document number\n          freq.writeVInt(postingFreq);\t\t\t  // frequency in doc\n        }\n\n        int lastPosition = 0;\t\t\t  // write positions\n        int[] positions = posting.positions;\n        for (int j = 0; j < postingFreq; j++) {\t\t  // use delta-encoding\n          int position = positions[j];\n          prox.writeVInt(position - lastPosition);\n          lastPosition = position;\n        }\n        // check to see if we switched to a new field\n        String termField = posting.term.field();\n        if (currentField != termField) {\n          // changing field - see if there is something to save\n          currentField = termField;\n          FieldInfo fi = fieldInfos.fieldInfo(currentField);\n          if (fi.storeTermVector) {\n            if (termVectorWriter == null) {\n              termVectorWriter =\n                new TermVectorsWriter(directory, segment, fieldInfos);\n              termVectorWriter.openDocument();\n            }\n            termVectorWriter.openField(currentField);\n\n          } else if (termVectorWriter != null) {\n            termVectorWriter.closeField();\n          }\n        }\n        if (termVectorWriter != null && termVectorWriter.isFieldOpen()) {\n            termVectorWriter.addTerm(posting.term.text(), postingFreq, posting.positions, posting.offsets);\n        }\n      }\n      if (termVectorWriter != null)\n        termVectorWriter.closeDocument();\n    } finally {\n      // make an effort to close all streams we can but remember and re-throw\n      // the first exception encountered in this process\n      IOException keep = null;\n      if (freq != null) try { freq.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (prox != null) try { prox.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (tis  != null) try {  tis.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (termVectorWriter  != null) try {  termVectorWriter.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (keep != null) throw (IOException) keep.fillInStackTrace();\n    }\n  }\n\n","sourceOld":"  private final void writePostings(Posting[] postings, String segment)\n          throws IOException {\n    IndexOutput freq = null, prox = null;\n    TermInfosWriter tis = null;\n    TermVectorsWriter termVectorWriter = null;\n    try {\n      //open files for inverse index storage\n      freq = directory.createOutput(segment + \".frq\");\n      prox = directory.createOutput(segment + \".prx\");\n      tis = new TermInfosWriter(directory, segment, fieldInfos);\n      TermInfo ti = new TermInfo();\n      String currentField = null;\n\n      for (int i = 0; i < postings.length; i++) {\n        Posting posting = postings[i];\n\n        // add an entry to the dictionary with pointers to prox and freq files\n        ti.set(1, freq.getFilePointer(), prox.getFilePointer(), -1);\n        tis.add(posting.term, ti);\n\n        // add an entry to the freq file\n        int postingFreq = posting.freq;\n        if (postingFreq == 1)\t\t\t\t  // optimize freq=1\n          freq.writeVInt(1);\t\t\t  // set low bit of doc num.\n        else {\n          freq.writeVInt(0);\t\t\t  // the document number\n          freq.writeVInt(postingFreq);\t\t\t  // frequency in doc\n        }\n\n        int lastPosition = 0;\t\t\t  // write positions\n        int[] positions = posting.positions;\n        for (int j = 0; j < postingFreq; j++) {\t\t  // use delta-encoding\n          int position = positions[j];\n          prox.writeVInt(position - lastPosition);\n          lastPosition = position;\n        }\n        // check to see if we switched to a new field\n        String termField = posting.term.field();\n        if (currentField != termField) {\n          // changing field - see if there is something to save\n          currentField = termField;\n          FieldInfo fi = fieldInfos.fieldInfo(currentField);\n          if (fi.storeTermVector) {\n            if (termVectorWriter == null) {\n              termVectorWriter =\n                new TermVectorsWriter(directory, segment, fieldInfos);\n              termVectorWriter.openDocument();\n            }\n            termVectorWriter.openField(currentField);\n\n          } else if (termVectorWriter != null) {\n            termVectorWriter.closeField();\n          }\n        }\n        if (termVectorWriter != null && termVectorWriter.isFieldOpen()) {\n            termVectorWriter.addTerm(posting.term.text(), postingFreq, posting.positions, posting.offsets);\n        }\n      }\n      if (termVectorWriter != null)\n        termVectorWriter.closeDocument();\n    } finally {\n      // make an effort to close all streams we can but remember and re-throw\n      // the first exception encountered in this process\n      IOException keep = null;\n      if (freq != null) try { freq.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (prox != null) try { prox.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (tis  != null) try {  tis.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (termVectorWriter  != null) try {  termVectorWriter.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (keep != null) throw (IOException) keep.fillInStackTrace();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentWriter#writePostings(Posting[],String).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentWriter#writePostings(Posting[],String).mjava","sourceNew":"  private final void writePostings(Posting[] postings, String segment)\n          throws CorruptIndexException, IOException {\n    IndexOutput freq = null, prox = null;\n    TermInfosWriter tis = null;\n    TermVectorsWriter termVectorWriter = null;\n    try {\n      //open files for inverse index storage\n      freq = directory.createOutput(segment + \".frq\");\n      prox = directory.createOutput(segment + \".prx\");\n      tis = new TermInfosWriter(directory, segment, fieldInfos,\n                                termIndexInterval);\n      TermInfo ti = new TermInfo();\n      String currentField = null;\n\n      for (int i = 0; i < postings.length; i++) {\n        Posting posting = postings[i];\n\n        // add an entry to the dictionary with pointers to prox and freq files\n        ti.set(1, freq.getFilePointer(), prox.getFilePointer(), -1);\n        tis.add(posting.term, ti);\n\n        // add an entry to the freq file\n        int postingFreq = posting.freq;\n        if (postingFreq == 1)\t\t\t\t  // optimize freq=1\n          freq.writeVInt(1);\t\t\t  // set low bit of doc num.\n        else {\n          freq.writeVInt(0);\t\t\t  // the document number\n          freq.writeVInt(postingFreq);\t\t\t  // frequency in doc\n        }\n\n        int lastPosition = 0;\t\t\t  // write positions\n        int[] positions = posting.positions;\n        for (int j = 0; j < postingFreq; j++) {\t\t  // use delta-encoding\n          int position = positions[j];\n          prox.writeVInt(position - lastPosition);\n          lastPosition = position;\n        }\n        // check to see if we switched to a new field\n        String termField = posting.term.field();\n        if (currentField != termField) {\n          // changing field - see if there is something to save\n          currentField = termField;\n          FieldInfo fi = fieldInfos.fieldInfo(currentField);\n          if (fi.storeTermVector) {\n            if (termVectorWriter == null) {\n              termVectorWriter =\n                new TermVectorsWriter(directory, segment, fieldInfos);\n              termVectorWriter.openDocument();\n            }\n            termVectorWriter.openField(currentField);\n\n          } else if (termVectorWriter != null) {\n            termVectorWriter.closeField();\n          }\n        }\n        if (termVectorWriter != null && termVectorWriter.isFieldOpen()) {\n            termVectorWriter.addTerm(posting.term.text(), postingFreq, posting.positions, posting.offsets);\n        }\n      }\n      if (termVectorWriter != null)\n        termVectorWriter.closeDocument();\n    } finally {\n      // make an effort to close all streams we can but remember and re-throw\n      // the first exception encountered in this process\n      IOException keep = null;\n      if (freq != null) try { freq.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (prox != null) try { prox.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (tis  != null) try {  tis.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (termVectorWriter  != null) try {  termVectorWriter.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (keep != null) throw (IOException) keep.fillInStackTrace();\n    }\n  }\n\n","sourceOld":"  private final void writePostings(Posting[] postings, String segment)\n          throws IOException {\n    IndexOutput freq = null, prox = null;\n    TermInfosWriter tis = null;\n    TermVectorsWriter termVectorWriter = null;\n    try {\n      //open files for inverse index storage\n      freq = directory.createOutput(segment + \".frq\");\n      prox = directory.createOutput(segment + \".prx\");\n      tis = new TermInfosWriter(directory, segment, fieldInfos,\n                                termIndexInterval);\n      TermInfo ti = new TermInfo();\n      String currentField = null;\n\n      for (int i = 0; i < postings.length; i++) {\n        Posting posting = postings[i];\n\n        // add an entry to the dictionary with pointers to prox and freq files\n        ti.set(1, freq.getFilePointer(), prox.getFilePointer(), -1);\n        tis.add(posting.term, ti);\n\n        // add an entry to the freq file\n        int postingFreq = posting.freq;\n        if (postingFreq == 1)\t\t\t\t  // optimize freq=1\n          freq.writeVInt(1);\t\t\t  // set low bit of doc num.\n        else {\n          freq.writeVInt(0);\t\t\t  // the document number\n          freq.writeVInt(postingFreq);\t\t\t  // frequency in doc\n        }\n\n        int lastPosition = 0;\t\t\t  // write positions\n        int[] positions = posting.positions;\n        for (int j = 0; j < postingFreq; j++) {\t\t  // use delta-encoding\n          int position = positions[j];\n          prox.writeVInt(position - lastPosition);\n          lastPosition = position;\n        }\n        // check to see if we switched to a new field\n        String termField = posting.term.field();\n        if (currentField != termField) {\n          // changing field - see if there is something to save\n          currentField = termField;\n          FieldInfo fi = fieldInfos.fieldInfo(currentField);\n          if (fi.storeTermVector) {\n            if (termVectorWriter == null) {\n              termVectorWriter =\n                new TermVectorsWriter(directory, segment, fieldInfos);\n              termVectorWriter.openDocument();\n            }\n            termVectorWriter.openField(currentField);\n\n          } else if (termVectorWriter != null) {\n            termVectorWriter.closeField();\n          }\n        }\n        if (termVectorWriter != null && termVectorWriter.isFieldOpen()) {\n            termVectorWriter.addTerm(posting.term.text(), postingFreq, posting.positions, posting.offsets);\n        }\n      }\n      if (termVectorWriter != null)\n        termVectorWriter.closeDocument();\n    } finally {\n      // make an effort to close all streams we can but remember and re-throw\n      // the first exception encountered in this process\n      IOException keep = null;\n      if (freq != null) try { freq.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (prox != null) try { prox.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (tis  != null) try {  tis.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (termVectorWriter  != null) try {  termVectorWriter.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (keep != null) throw (IOException) keep.fillInStackTrace();\n    }\n  }\n\n","bugFix":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8522ae207a56c6db28ca06fe6cc33e70911c3600","date":1173935743,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentWriter#writePostings(Posting[],String).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentWriter#writePostings(Posting[],String).mjava","sourceNew":"  private final void writePostings(Posting[] postings, String segment)\n          throws CorruptIndexException, IOException {\n    IndexOutput freq = null, prox = null;\n    TermInfosWriter tis = null;\n    TermVectorsWriter termVectorWriter = null;\n    try {\n      //open files for inverse index storage\n      freq = directory.createOutput(segment + \".frq\");\n      prox = directory.createOutput(segment + \".prx\");\n      tis = new TermInfosWriter(directory, segment, fieldInfos,\n                                termIndexInterval);\n      TermInfo ti = new TermInfo();\n      String currentField = null;\n      boolean currentFieldHasPayloads = false;\n      \n      for (int i = 0; i < postings.length; i++) {\n        Posting posting = postings[i];\n\n        // check to see if we switched to a new field\n        String termField = posting.term.field();\n        if (currentField != termField) {\n          // changing field - see if there is something to save\n          currentField = termField;\n          FieldInfo fi = fieldInfos.fieldInfo(currentField);\n          currentFieldHasPayloads = fi.storePayloads;\n          if (fi.storeTermVector) {\n            if (termVectorWriter == null) {\n              termVectorWriter =\n                new TermVectorsWriter(directory, segment, fieldInfos);\n              termVectorWriter.openDocument();\n            }\n            termVectorWriter.openField(currentField);\n\n          } else if (termVectorWriter != null) {\n            termVectorWriter.closeField();\n          }\n        }\n        \n        // add an entry to the dictionary with pointers to prox and freq files\n        ti.set(1, freq.getFilePointer(), prox.getFilePointer(), -1);\n        tis.add(posting.term, ti);\n\n        // add an entry to the freq file\n        int postingFreq = posting.freq;\n        if (postingFreq == 1)\t\t\t\t  // optimize freq=1\n          freq.writeVInt(1);\t\t\t  // set low bit of doc num.\n        else {\n          freq.writeVInt(0);\t\t\t  // the document number\n          freq.writeVInt(postingFreq);\t\t\t  // frequency in doc\n        }\n\n        int lastPosition = 0;\t\t\t  // write positions\n        int[] positions = posting.positions;\n        Payload[] payloads = posting.payloads;\n        int lastPayloadLength = -1;\n        \n        \n        // The following encoding is being used for positions and payloads:\n        // Case 1: current field does not store payloads\n        //           Positions     -> <PositionDelta>^freq\n        //           PositionDelta -> VInt\n        //         The PositionDelta is the difference between the current\n        //         and the previous position\n        // Case 2: current field stores payloads\n        //           Positions     -> <PositionDelta, Payload>^freq\n        //           Payload       ->  <PayloadLength?, PayloadData>\n        //           PositionDelta -> VInt\n        //           PayloadLength -> VInt\n        //           PayloadData   -> byte^PayloadLength\n        //         In this case PositionDelta/2 is the difference between\n        //         the current and the previous position. If PositionDelta\n        //         is odd, then a PayloadLength encoded as VInt follows,\n        //         if PositionDelta is even, then it is assumed that the\n        //         length of the current Payload equals the length of the\n        //         previous Payload.        \n        for (int j = 0; j < postingFreq; j++) {\t\t  // use delta-encoding\n          int position = positions[j];\n          int delta = position - lastPosition;\n          if (currentFieldHasPayloads) {\n            int payloadLength = 0;\n            Payload payload = null;\n            if (payloads != null) {\n              payload = payloads[j];\n              if (payload != null) {\n                payloadLength = payload.length;\n              }\n            }\n            if (payloadLength == lastPayloadLength) {\n            \t// the length of the current payload equals the length\n            \t// of the previous one. So we do not have to store the length\n            \t// again and we only shift the position delta by one bit\n              prox.writeVInt(delta * 2);\n            } else {\n            \t// the length of the current payload is different from the\n            \t// previous one. We shift the position delta, set the lowest\n            \t// bit and store the current payload length as VInt.\n              prox.writeVInt(delta * 2 + 1);\n              prox.writeVInt(payloadLength);\n              lastPayloadLength = payloadLength;\n            }\n            if (payloadLength > 0) {\n            \t// write current payload\n              prox.writeBytes(payload.data, payload.offset, payload.length);\n            }\n          } else {\n          \t// field does not store payloads, just write position delta as VInt\n            prox.writeVInt(delta);\n          }\n          lastPosition = position;\n        }\n        if (termVectorWriter != null && termVectorWriter.isFieldOpen()) {\n            termVectorWriter.addTerm(posting.term.text(), postingFreq, posting.positions, posting.offsets);\n        }\n      }\n      if (termVectorWriter != null)\n        termVectorWriter.closeDocument();\n    } finally {\n      // make an effort to close all streams we can but remember and re-throw\n      // the first exception encountered in this process\n      IOException keep = null;\n      if (freq != null) try { freq.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (prox != null) try { prox.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (tis  != null) try {  tis.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (termVectorWriter  != null) try {  termVectorWriter.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (keep != null) throw (IOException) keep.fillInStackTrace();\n    }\n  }\n\n","sourceOld":"  private final void writePostings(Posting[] postings, String segment)\n          throws CorruptIndexException, IOException {\n    IndexOutput freq = null, prox = null;\n    TermInfosWriter tis = null;\n    TermVectorsWriter termVectorWriter = null;\n    try {\n      //open files for inverse index storage\n      freq = directory.createOutput(segment + \".frq\");\n      prox = directory.createOutput(segment + \".prx\");\n      tis = new TermInfosWriter(directory, segment, fieldInfos,\n                                termIndexInterval);\n      TermInfo ti = new TermInfo();\n      String currentField = null;\n\n      for (int i = 0; i < postings.length; i++) {\n        Posting posting = postings[i];\n\n        // add an entry to the dictionary with pointers to prox and freq files\n        ti.set(1, freq.getFilePointer(), prox.getFilePointer(), -1);\n        tis.add(posting.term, ti);\n\n        // add an entry to the freq file\n        int postingFreq = posting.freq;\n        if (postingFreq == 1)\t\t\t\t  // optimize freq=1\n          freq.writeVInt(1);\t\t\t  // set low bit of doc num.\n        else {\n          freq.writeVInt(0);\t\t\t  // the document number\n          freq.writeVInt(postingFreq);\t\t\t  // frequency in doc\n        }\n\n        int lastPosition = 0;\t\t\t  // write positions\n        int[] positions = posting.positions;\n        for (int j = 0; j < postingFreq; j++) {\t\t  // use delta-encoding\n          int position = positions[j];\n          prox.writeVInt(position - lastPosition);\n          lastPosition = position;\n        }\n        // check to see if we switched to a new field\n        String termField = posting.term.field();\n        if (currentField != termField) {\n          // changing field - see if there is something to save\n          currentField = termField;\n          FieldInfo fi = fieldInfos.fieldInfo(currentField);\n          if (fi.storeTermVector) {\n            if (termVectorWriter == null) {\n              termVectorWriter =\n                new TermVectorsWriter(directory, segment, fieldInfos);\n              termVectorWriter.openDocument();\n            }\n            termVectorWriter.openField(currentField);\n\n          } else if (termVectorWriter != null) {\n            termVectorWriter.closeField();\n          }\n        }\n        if (termVectorWriter != null && termVectorWriter.isFieldOpen()) {\n            termVectorWriter.addTerm(posting.term.text(), postingFreq, posting.positions, posting.offsets);\n        }\n      }\n      if (termVectorWriter != null)\n        termVectorWriter.closeDocument();\n    } finally {\n      // make an effort to close all streams we can but remember and re-throw\n      // the first exception encountered in this process\n      IOException keep = null;\n      if (freq != null) try { freq.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (prox != null) try { prox.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (tis  != null) try {  tis.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (termVectorWriter  != null) try {  termVectorWriter.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (keep != null) throw (IOException) keep.fillInStackTrace();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0","date":1185569419,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/DocumentWriter#writePostings(Posting[],String).mjava","sourceNew":null,"sourceOld":"  private final void writePostings(Posting[] postings, String segment)\n          throws CorruptIndexException, IOException {\n    IndexOutput freq = null, prox = null;\n    TermInfosWriter tis = null;\n    TermVectorsWriter termVectorWriter = null;\n    try {\n      //open files for inverse index storage\n      freq = directory.createOutput(segment + \".frq\");\n      prox = directory.createOutput(segment + \".prx\");\n      tis = new TermInfosWriter(directory, segment, fieldInfos,\n                                termIndexInterval);\n      TermInfo ti = new TermInfo();\n      String currentField = null;\n      boolean currentFieldHasPayloads = false;\n      \n      for (int i = 0; i < postings.length; i++) {\n        Posting posting = postings[i];\n\n        // check to see if we switched to a new field\n        String termField = posting.term.field();\n        if (currentField != termField) {\n          // changing field - see if there is something to save\n          currentField = termField;\n          FieldInfo fi = fieldInfos.fieldInfo(currentField);\n          currentFieldHasPayloads = fi.storePayloads;\n          if (fi.storeTermVector) {\n            if (termVectorWriter == null) {\n              termVectorWriter =\n                new TermVectorsWriter(directory, segment, fieldInfos);\n              termVectorWriter.openDocument();\n            }\n            termVectorWriter.openField(currentField);\n\n          } else if (termVectorWriter != null) {\n            termVectorWriter.closeField();\n          }\n        }\n        \n        // add an entry to the dictionary with pointers to prox and freq files\n        ti.set(1, freq.getFilePointer(), prox.getFilePointer(), -1);\n        tis.add(posting.term, ti);\n\n        // add an entry to the freq file\n        int postingFreq = posting.freq;\n        if (postingFreq == 1)\t\t\t\t  // optimize freq=1\n          freq.writeVInt(1);\t\t\t  // set low bit of doc num.\n        else {\n          freq.writeVInt(0);\t\t\t  // the document number\n          freq.writeVInt(postingFreq);\t\t\t  // frequency in doc\n        }\n\n        int lastPosition = 0;\t\t\t  // write positions\n        int[] positions = posting.positions;\n        Payload[] payloads = posting.payloads;\n        int lastPayloadLength = -1;\n        \n        \n        // The following encoding is being used for positions and payloads:\n        // Case 1: current field does not store payloads\n        //           Positions     -> <PositionDelta>^freq\n        //           PositionDelta -> VInt\n        //         The PositionDelta is the difference between the current\n        //         and the previous position\n        // Case 2: current field stores payloads\n        //           Positions     -> <PositionDelta, Payload>^freq\n        //           Payload       ->  <PayloadLength?, PayloadData>\n        //           PositionDelta -> VInt\n        //           PayloadLength -> VInt\n        //           PayloadData   -> byte^PayloadLength\n        //         In this case PositionDelta/2 is the difference between\n        //         the current and the previous position. If PositionDelta\n        //         is odd, then a PayloadLength encoded as VInt follows,\n        //         if PositionDelta is even, then it is assumed that the\n        //         length of the current Payload equals the length of the\n        //         previous Payload.        \n        for (int j = 0; j < postingFreq; j++) {\t\t  // use delta-encoding\n          int position = positions[j];\n          int delta = position - lastPosition;\n          if (currentFieldHasPayloads) {\n            int payloadLength = 0;\n            Payload payload = null;\n            if (payloads != null) {\n              payload = payloads[j];\n              if (payload != null) {\n                payloadLength = payload.length;\n              }\n            }\n            if (payloadLength == lastPayloadLength) {\n            \t// the length of the current payload equals the length\n            \t// of the previous one. So we do not have to store the length\n            \t// again and we only shift the position delta by one bit\n              prox.writeVInt(delta * 2);\n            } else {\n            \t// the length of the current payload is different from the\n            \t// previous one. We shift the position delta, set the lowest\n            \t// bit and store the current payload length as VInt.\n              prox.writeVInt(delta * 2 + 1);\n              prox.writeVInt(payloadLength);\n              lastPayloadLength = payloadLength;\n            }\n            if (payloadLength > 0) {\n            \t// write current payload\n              prox.writeBytes(payload.data, payload.offset, payload.length);\n            }\n          } else {\n          \t// field does not store payloads, just write position delta as VInt\n            prox.writeVInt(delta);\n          }\n          lastPosition = position;\n        }\n        if (termVectorWriter != null && termVectorWriter.isFieldOpen()) {\n            termVectorWriter.addTerm(posting.term.text(), postingFreq, posting.positions, posting.offsets);\n        }\n      }\n      if (termVectorWriter != null)\n        termVectorWriter.closeDocument();\n    } finally {\n      // make an effort to close all streams we can but remember and re-throw\n      // the first exception encountered in this process\n      IOException keep = null;\n      if (freq != null) try { freq.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (prox != null) try { prox.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (tis  != null) try {  tis.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (termVectorWriter  != null) try {  termVectorWriter.close(); } catch (IOException e) { if (keep == null) keep = e; }\n      if (keep != null) throw (IOException) keep.fillInStackTrace();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8522ae207a56c6db28ca06fe6cc33e70911c3600":["1b54a9bc667895a2095a886184bf69a3179e63df"],"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0":["8522ae207a56c6db28ca06fe6cc33e70911c3600"],"1b54a9bc667895a2095a886184bf69a3179e63df":["3afaca6e0770734b01e3bc663bec3ffa71b6f87b"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["dda77265180d41bf85c84c995e25eda7b8e1b74d"],"770281b8a8459cafcdd2354b6a06078fea2d83c9":["15c469602973ef1a33c9a07367a380d278ffab20"],"dda77265180d41bf85c84c995e25eda7b8e1b74d":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"03ae70812bc33b0270c1366378b2c2da95fe86a6":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"66f8ac981e8707cfae011613a8168a2edeb0b6e3":["03ae70812bc33b0270c1366378b2c2da95fe86a6"],"3afaca6e0770734b01e3bc663bec3ffa71b6f87b":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"],"15c469602973ef1a33c9a07367a380d278ffab20":["66f8ac981e8707cfae011613a8168a2edeb0b6e3"]},"commit2Childs":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["03ae70812bc33b0270c1366378b2c2da95fe86a6"],"8522ae207a56c6db28ca06fe6cc33e70911c3600":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"],"1b54a9bc667895a2095a886184bf69a3179e63df":["8522ae207a56c6db28ca06fe6cc33e70911c3600"],"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["3afaca6e0770734b01e3bc663bec3ffa71b6f87b"],"770281b8a8459cafcdd2354b6a06078fea2d83c9":["dda77265180d41bf85c84c995e25eda7b8e1b74d"],"dda77265180d41bf85c84c995e25eda7b8e1b74d":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"03ae70812bc33b0270c1366378b2c2da95fe86a6":["66f8ac981e8707cfae011613a8168a2edeb0b6e3"],"66f8ac981e8707cfae011613a8168a2edeb0b6e3":["15c469602973ef1a33c9a07367a380d278ffab20"],"3afaca6e0770734b01e3bc663bec3ffa71b6f87b":["1b54a9bc667895a2095a886184bf69a3179e63df"],"15c469602973ef1a33c9a07367a380d278ffab20":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}