{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testAllUnicodeChars().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testAllUnicodeChars().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testAllUnicodeChars().mjava","sourceNew":"  // LUCENE-510\n  public void testAllUnicodeChars() throws Throwable {\n\n    BytesRef utf8 = new BytesRef(10);\n    CharsRef utf16 = new CharsRef(10);\n    char[] chars = new char[2];\n    for(int ch=0;ch<0x0010FFFF;ch++) {\n\n      if (ch == 0xd800)\n        // Skip invalid code points\n        ch = 0xe000;\n\n      int len = 0;\n      if (ch <= 0xffff) {\n        chars[len++] = (char) ch;\n      } else {\n        chars[len++] = (char) (((ch-0x0010000) >> 10) + UnicodeUtil.UNI_SUR_HIGH_START);\n        chars[len++] = (char) (((ch-0x0010000) & 0x3FFL) + UnicodeUtil.UNI_SUR_LOW_START);\n      }\n\n      UnicodeUtil.UTF16toUTF8(chars, 0, len, utf8);\n\n      String s1 = new String(chars, 0, len);\n      String s2 = new String(utf8.bytes, 0, utf8.length, \"UTF-8\");\n      assertEquals(\"codepoint \" + ch, s1, s2);\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(\"codepoint \" + ch, s1, new String(utf16.chars, 0, utf16.length));\n\n      byte[] b = s1.getBytes(\"UTF-8\");\n      assertEquals(utf8.length, b.length);\n      for(int j=0;j<utf8.length;j++)\n        assertEquals(utf8.bytes[j], b[j]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testAllUnicodeChars() throws Throwable {\n\n    BytesRef utf8 = new BytesRef(10);\n    CharsRef utf16 = new CharsRef(10);\n    char[] chars = new char[2];\n    for(int ch=0;ch<0x0010FFFF;ch++) {\n\n      if (ch == 0xd800)\n        // Skip invalid code points\n        ch = 0xe000;\n\n      int len = 0;\n      if (ch <= 0xffff) {\n        chars[len++] = (char) ch;\n      } else {\n        chars[len++] = (char) (((ch-0x0010000) >> 10) + UnicodeUtil.UNI_SUR_HIGH_START);\n        chars[len++] = (char) (((ch-0x0010000) & 0x3FFL) + UnicodeUtil.UNI_SUR_LOW_START);\n      }\n\n      UnicodeUtil.UTF16toUTF8(chars, 0, len, utf8);\n\n      String s1 = new String(chars, 0, len);\n      String s2 = new String(utf8.bytes, 0, utf8.length, \"UTF-8\");\n      assertEquals(\"codepoint \" + ch, s1, s2);\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(\"codepoint \" + ch, s1, new String(utf16.chars, 0, utf16.length));\n\n      byte[] b = s1.getBytes(\"UTF-8\");\n      assertEquals(utf8.length, b.length);\n      for(int j=0;j<utf8.length;j++)\n        assertEquals(utf8.bytes[j], b[j]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testAllUnicodeChars().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testAllUnicodeChars().mjava","sourceNew":"  // LUCENE-510\n  public void testAllUnicodeChars() throws Throwable {\n\n    BytesRef utf8 = new BytesRef(10);\n    CharsRef utf16 = new CharsRef(10);\n    char[] chars = new char[2];\n    for(int ch=0;ch<0x0010FFFF;ch++) {\n\n      if (ch == 0xd800)\n        // Skip invalid code points\n        ch = 0xe000;\n\n      int len = 0;\n      if (ch <= 0xffff) {\n        chars[len++] = (char) ch;\n      } else {\n        chars[len++] = (char) (((ch-0x0010000) >> 10) + UnicodeUtil.UNI_SUR_HIGH_START);\n        chars[len++] = (char) (((ch-0x0010000) & 0x3FFL) + UnicodeUtil.UNI_SUR_LOW_START);\n      }\n\n      UnicodeUtil.UTF16toUTF8(chars, 0, len, utf8);\n\n      String s1 = new String(chars, 0, len);\n      String s2 = new String(utf8.bytes, 0, utf8.length, StandardCharsets.UTF_8);\n      assertEquals(\"codepoint \" + ch, s1, s2);\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(\"codepoint \" + ch, s1, new String(utf16.chars, 0, utf16.length));\n\n      byte[] b = s1.getBytes(StandardCharsets.UTF_8);\n      assertEquals(utf8.length, b.length);\n      for(int j=0;j<utf8.length;j++)\n        assertEquals(utf8.bytes[j], b[j]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testAllUnicodeChars() throws Throwable {\n\n    BytesRef utf8 = new BytesRef(10);\n    CharsRef utf16 = new CharsRef(10);\n    char[] chars = new char[2];\n    for(int ch=0;ch<0x0010FFFF;ch++) {\n\n      if (ch == 0xd800)\n        // Skip invalid code points\n        ch = 0xe000;\n\n      int len = 0;\n      if (ch <= 0xffff) {\n        chars[len++] = (char) ch;\n      } else {\n        chars[len++] = (char) (((ch-0x0010000) >> 10) + UnicodeUtil.UNI_SUR_HIGH_START);\n        chars[len++] = (char) (((ch-0x0010000) & 0x3FFL) + UnicodeUtil.UNI_SUR_LOW_START);\n      }\n\n      UnicodeUtil.UTF16toUTF8(chars, 0, len, utf8);\n\n      String s1 = new String(chars, 0, len);\n      String s2 = new String(utf8.bytes, 0, utf8.length, \"UTF-8\");\n      assertEquals(\"codepoint \" + ch, s1, s2);\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(\"codepoint \" + ch, s1, new String(utf16.chars, 0, utf16.length));\n\n      byte[] b = s1.getBytes(\"UTF-8\");\n      assertEquals(utf8.length, b.length);\n      for(int j=0;j<utf8.length;j++)\n        assertEquals(utf8.bytes[j], b[j]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testAllUnicodeChars().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testAllUnicodeChars().mjava","sourceNew":"  // LUCENE-510\n  public void testAllUnicodeChars() throws Throwable {\n\n    BytesRef utf8 = new BytesRef(10);\n    CharsRef utf16 = new CharsRef(10);\n    char[] chars = new char[2];\n    for(int ch=0;ch<0x0010FFFF;ch++) {\n\n      if (ch == 0xd800)\n        // Skip invalid code points\n        ch = 0xe000;\n\n      int len = 0;\n      if (ch <= 0xffff) {\n        chars[len++] = (char) ch;\n      } else {\n        chars[len++] = (char) (((ch-0x0010000) >> 10) + UnicodeUtil.UNI_SUR_HIGH_START);\n        chars[len++] = (char) (((ch-0x0010000) & 0x3FFL) + UnicodeUtil.UNI_SUR_LOW_START);\n      }\n\n      UnicodeUtil.UTF16toUTF8(chars, 0, len, utf8);\n\n      String s1 = new String(chars, 0, len);\n      String s2 = new String(utf8.bytes, 0, utf8.length, StandardCharsets.UTF_8);\n      assertEquals(\"codepoint \" + ch, s1, s2);\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(\"codepoint \" + ch, s1, new String(utf16.chars, 0, utf16.length));\n\n      byte[] b = s1.getBytes(StandardCharsets.UTF_8);\n      assertEquals(utf8.length, b.length);\n      for(int j=0;j<utf8.length;j++)\n        assertEquals(utf8.bytes[j], b[j]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testAllUnicodeChars() throws Throwable {\n\n    BytesRef utf8 = new BytesRef(10);\n    CharsRef utf16 = new CharsRef(10);\n    char[] chars = new char[2];\n    for(int ch=0;ch<0x0010FFFF;ch++) {\n\n      if (ch == 0xd800)\n        // Skip invalid code points\n        ch = 0xe000;\n\n      int len = 0;\n      if (ch <= 0xffff) {\n        chars[len++] = (char) ch;\n      } else {\n        chars[len++] = (char) (((ch-0x0010000) >> 10) + UnicodeUtil.UNI_SUR_HIGH_START);\n        chars[len++] = (char) (((ch-0x0010000) & 0x3FFL) + UnicodeUtil.UNI_SUR_LOW_START);\n      }\n\n      UnicodeUtil.UTF16toUTF8(chars, 0, len, utf8);\n\n      String s1 = new String(chars, 0, len);\n      String s2 = new String(utf8.bytes, 0, utf8.length, \"UTF-8\");\n      assertEquals(\"codepoint \" + ch, s1, s2);\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(\"codepoint \" + ch, s1, new String(utf16.chars, 0, utf16.length));\n\n      byte[] b = s1.getBytes(\"UTF-8\");\n      assertEquals(utf8.length, b.length);\n      for(int j=0;j<utf8.length;j++)\n        assertEquals(utf8.bytes[j], b[j]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testAllUnicodeChars().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testAllUnicodeChars().mjava","sourceNew":"  // LUCENE-510\n  public void testAllUnicodeChars() throws Throwable {\n\n    CharsRefBuilder utf16 = new CharsRefBuilder();\n    char[] chars = new char[2];\n    for(int ch=0;ch<0x0010FFFF;ch++) {\n\n      if (ch == 0xd800)\n        // Skip invalid code points\n        ch = 0xe000;\n\n      int len = 0;\n      if (ch <= 0xffff) {\n        chars[len++] = (char) ch;\n      } else {\n        chars[len++] = (char) (((ch-0x0010000) >> 10) + UnicodeUtil.UNI_SUR_HIGH_START);\n        chars[len++] = (char) (((ch-0x0010000) & 0x3FFL) + UnicodeUtil.UNI_SUR_LOW_START);\n      }\n\n      BytesRef utf8 = new BytesRef(CharBuffer.wrap(chars, 0, len));\n\n      String s1 = new String(chars, 0, len);\n      String s2 = new String(utf8.bytes, 0, utf8.length, StandardCharsets.UTF_8);\n      assertEquals(\"codepoint \" + ch, s1, s2);\n\n      utf16.copyUTF8Bytes(utf8.bytes, 0, utf8.length);\n      assertEquals(\"codepoint \" + ch, s1, utf16.toString());\n\n      byte[] b = s1.getBytes(StandardCharsets.UTF_8);\n      assertEquals(utf8.length, b.length);\n      for(int j=0;j<utf8.length;j++)\n        assertEquals(utf8.bytes[j], b[j]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testAllUnicodeChars() throws Throwable {\n\n    BytesRef utf8 = new BytesRef(10);\n    CharsRef utf16 = new CharsRef(10);\n    char[] chars = new char[2];\n    for(int ch=0;ch<0x0010FFFF;ch++) {\n\n      if (ch == 0xd800)\n        // Skip invalid code points\n        ch = 0xe000;\n\n      int len = 0;\n      if (ch <= 0xffff) {\n        chars[len++] = (char) ch;\n      } else {\n        chars[len++] = (char) (((ch-0x0010000) >> 10) + UnicodeUtil.UNI_SUR_HIGH_START);\n        chars[len++] = (char) (((ch-0x0010000) & 0x3FFL) + UnicodeUtil.UNI_SUR_LOW_START);\n      }\n\n      UnicodeUtil.UTF16toUTF8(chars, 0, len, utf8);\n\n      String s1 = new String(chars, 0, len);\n      String s2 = new String(utf8.bytes, 0, utf8.length, StandardCharsets.UTF_8);\n      assertEquals(\"codepoint \" + ch, s1, s2);\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(\"codepoint \" + ch, s1, new String(utf16.chars, 0, utf16.length));\n\n      byte[] b = s1.getBytes(StandardCharsets.UTF_8);\n      assertEquals(utf8.length, b.length);\n      for(int j=0;j<utf8.length;j++)\n        assertEquals(utf8.bytes[j], b[j]);\n    }\n  }\n\n","bugFix":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4","955c32f886db6f6356c9fcdea6b1f1cb4effda24","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7d89d7e4e5101347833eea558851bf4209218619"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["7d89d7e4e5101347833eea558851bf4209218619"],"7d89d7e4e5101347833eea558851bf4209218619":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}