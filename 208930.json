{"path":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrRequestHandlerTest#testCheckpointActions().mjava","commits":[{"id":"e7da9d8536c11576df10e348efa79d2739170936","date":1509475399,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrRequestHandlerTest#testCheckpointActions().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrRequestHandlerTest#testCheckpointActions().mjava","sourceNew":"  // check the checkpoint API\n  @Test\n  @ShardsFixed(num = 2)\n  public void testCheckpointActions() throws Exception {\n    // initial request on an empty index, must return -1\n    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"a\")); // shard 2\n\n    // only one document indexed in shard 2, the checkpoint must be still -1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"b\")); // shard 1\n\n    // a second document indexed in shard 1, the checkpoint must come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint1 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    long expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint1);\n\n    index(SOURCE_COLLECTION, getDoc(id, \"c\")); // shard 1\n\n    // a third document indexed in shard 1, the checkpoint must still come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(checkpoint1, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"d\")); // shard 2\n\n    // a fourth document indexed in shard 2, the checkpoint must come from shard 1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint2 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint2);\n\n    // send a delete by query\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n\n    // all the checkpoints must come from the DBQ\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint3 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint3 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint3 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n\n    // replication never started, lastProcessedVersion should be -1 for both shards\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    long lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n  }\n\n","sourceOld":"  // check the checkpoint API\n  @Test\n  @ShardsFixed(num = 2)\n  public void testCheckpointActions() throws Exception {\n    // initial request on an empty index, must return -1\n    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"a\")); // shard 2\n\n    // only one document indexed in shard 2, the checkpoint must be still -1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"b\")); // shard 1\n\n    // a second document indexed in shard 1, the checkpoint must come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint1 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    long expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint1);\n\n    index(SOURCE_COLLECTION, getDoc(id, \"c\")); // shard 1\n\n    // a third document indexed in shard 1, the checkpoint must still come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(checkpoint1, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"d\")); // shard 2\n\n    // a fourth document indexed in shard 2, the checkpoint must come from shard 1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint2 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint2);\n\n    // send a delete by query\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n\n    // all the checkpoints must come from the DBQ\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint3 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint3 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint3 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n\n    // replication never started, lastProcessedVersion should be -1 for both shards\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    long lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","date":1509475828,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrRequestHandlerTest#testCheckpointActions().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrRequestHandlerTest#testCheckpointActions().mjava","sourceNew":"  // check the checkpoint API\n  @Test\n  @ShardsFixed(num = 2)\n  public void testCheckpointActions() throws Exception {\n    // initial request on an empty index, must return -1\n    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"a\")); // shard 2\n\n    // only one document indexed in shard 2, the checkpoint must be still -1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"b\")); // shard 1\n\n    // a second document indexed in shard 1, the checkpoint must come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint1 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    long expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint1);\n\n    index(SOURCE_COLLECTION, getDoc(id, \"c\")); // shard 1\n\n    // a third document indexed in shard 1, the checkpoint must still come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(checkpoint1, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"d\")); // shard 2\n\n    // a fourth document indexed in shard 2, the checkpoint must come from shard 1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint2 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint2);\n\n    // send a delete by query\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n\n    // all the checkpoints must come from the DBQ\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint3 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint3 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint3 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n\n    // replication never started, lastProcessedVersion should be -1 for both shards\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    long lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n  }\n\n","sourceOld":"  // check the checkpoint API\n  @Test\n  @ShardsFixed(num = 2)\n  public void testCheckpointActions() throws Exception {\n    // initial request on an empty index, must return -1\n    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"a\")); // shard 2\n\n    // only one document indexed in shard 2, the checkpoint must be still -1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"b\")); // shard 1\n\n    // a second document indexed in shard 1, the checkpoint must come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint1 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    long expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint1);\n\n    index(SOURCE_COLLECTION, getDoc(id, \"c\")); // shard 1\n\n    // a third document indexed in shard 1, the checkpoint must still come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(checkpoint1, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"d\")); // shard 2\n\n    // a fourth document indexed in shard 2, the checkpoint must come from shard 1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint2 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint2);\n\n    // send a delete by query\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n\n    // all the checkpoints must come from the DBQ\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint3 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint3 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint3 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n\n    // replication never started, lastProcessedVersion should be -1 for both shards\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    long lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","date":1509748659,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrRequestHandlerTest#testCheckpointActions().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrRequestHandlerTest#testCheckpointActions().mjava","sourceNew":"  // check the checkpoint API\n  @Test\n  @ShardsFixed(num = 2)\n  public void testCheckpointActions() throws Exception {\n    // initial request on an empty index, must return -1\n    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"a\")); // shard 2\n\n    // only one document indexed in shard 2, the checkpoint must be still -1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"b\")); // shard 1\n\n    // a second document indexed in shard 1, the checkpoint must come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint1 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    long expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint1);\n\n    index(SOURCE_COLLECTION, getDoc(id, \"c\")); // shard 1\n\n    // a third document indexed in shard 1, the checkpoint must still come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(checkpoint1, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"d\")); // shard 2\n\n    // a fourth document indexed in shard 2, the checkpoint must come from shard 1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint2 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint2);\n\n    // send a delete by query\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n\n    // all the checkpoints must come from the DBQ\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint3 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint3 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint3 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n\n    // replication never started, lastProcessedVersion should be -1 for both shards\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    long lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n  }\n\n","sourceOld":"  // check the checkpoint API\n  @Test\n  @ShardsFixed(num = 2)\n  public void testCheckpointActions() throws Exception {\n    // initial request on an empty index, must return -1\n    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"a\")); // shard 2\n\n    // only one document indexed in shard 2, the checkpoint must be still -1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"b\")); // shard 1\n\n    // a second document indexed in shard 1, the checkpoint must come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint1 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    long expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint1);\n\n    index(SOURCE_COLLECTION, getDoc(id, \"c\")); // shard 1\n\n    // a third document indexed in shard 1, the checkpoint must still come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(checkpoint1, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"d\")); // shard 2\n\n    // a fourth document indexed in shard 2, the checkpoint must come from shard 1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint2 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint2);\n\n    // send a delete by query\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n\n    // all the checkpoints must come from the DBQ\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint3 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint3 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint3 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n\n    // replication never started, lastProcessedVersion should be -1 for both shards\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    long lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrRequestHandlerTest#testCheckpointActions().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrRequestHandlerTest#testCheckpointActions().mjava","sourceNew":"  // check the checkpoint API\n  @Test\n  @ShardsFixed(num = 2)\n  public void testCheckpointActions() throws Exception {\n    // initial request on an empty index, must return -1\n    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"a\")); // shard 2\n\n    // only one document indexed in shard 2, the checkpoint must be still -1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"b\")); // shard 1\n\n    // a second document indexed in shard 1, the checkpoint must come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint1 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    long expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint1);\n\n    index(SOURCE_COLLECTION, getDoc(id, \"c\")); // shard 1\n\n    // a third document indexed in shard 1, the checkpoint must still come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(checkpoint1, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"d\")); // shard 2\n\n    // a fourth document indexed in shard 2, the checkpoint must come from shard 1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint2 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint2);\n\n    // send a delete by query\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n\n    // all the checkpoints must come from the DBQ\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint3 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint3 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint3 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n\n    // replication never started, lastProcessedVersion should be -1 for both shards\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    long lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n  }\n\n","sourceOld":"  // check the checkpoint API\n  @Test\n  @ShardsFixed(num = 2)\n  public void testCheckpointActions() throws Exception {\n    // initial request on an empty index, must return -1\n    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"a\")); // shard 2\n\n    // only one document indexed in shard 2, the checkpoint must be still -1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"b\")); // shard 1\n\n    // a second document indexed in shard 1, the checkpoint must come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint1 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    long expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint1);\n\n    index(SOURCE_COLLECTION, getDoc(id, \"c\")); // shard 1\n\n    // a third document indexed in shard 1, the checkpoint must still come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(checkpoint1, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"d\")); // shard 2\n\n    // a fourth document indexed in shard 2, the checkpoint must come from shard 1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint2 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint2);\n\n    // send a delete by query\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n\n    // all the checkpoints must come from the DBQ\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint3 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint3 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint3 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n\n    // replication never started, lastProcessedVersion should be -1 for both shards\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    long lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d030a7298c5397ab744a356c18ccda17f76f77f7","date":1521234228,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrRequestHandlerTest#testCheckpointActions().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrRequestHandlerTest#testCheckpointActions().mjava","sourceNew":"  // check the checkpoint API\n  @Test\n  @ShardsFixed(num = 2)\n  public void testCheckpointActions() throws Exception {\n    // initial request on an empty index, must return -1\n    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"a\",\"test_i_dvo\",10)); // shard 2\n\n    // only one document indexed in shard 2, the checkpoint must be still -1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"b\")); // shard 1\n\n    // a second document indexed in shard 1, the checkpoint must come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint1 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    long expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint1);\n\n    index(SOURCE_COLLECTION, getDoc(id, \"c\")); // shard 1\n\n    // a third document indexed in shard 1, the checkpoint must still come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(checkpoint1, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"d\")); // shard 2\n\n    // a fourth document indexed in shard 2, the checkpoint must come from shard 1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint2 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint2);\n\n    // send a delete by id\n    long pre_op = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    deleteById(SOURCE_COLLECTION, Arrays.asList(new String[]{\"c\"})); //shard1\n    // document deleted in shard1, checkpoint should come from shard2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint3 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(pre_op, expected);\n    assertEquals(expected, checkpoint3);\n\n    // send a in-place update\n    SolrInputDocument in_place_doc = new SolrInputDocument();\n    in_place_doc.setField(id, \"a\");\n    in_place_doc.setField(\"test_i_dvo\", ImmutableMap.of(\"inc\", 10)); //shard2\n    index(SOURCE_COLLECTION, in_place_doc);\n    // document updated in shard2, checkpoint should come from shard1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint4 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint4);\n\n    // send a delete by query\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n\n    // all the checkpoints must come from the DBQ\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint5= (Long) rsp.get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint5 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint5 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint5 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint5 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint5 > 0); // ensure that checkpoints from deletes are in absolute form\n\n\n    // replication never started, lastProcessedVersion should be -1 for both shards\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    long lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n  }\n\n","sourceOld":"  // check the checkpoint API\n  @Test\n  @ShardsFixed(num = 2)\n  public void testCheckpointActions() throws Exception {\n    // initial request on an empty index, must return -1\n    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"a\")); // shard 2\n\n    // only one document indexed in shard 2, the checkpoint must be still -1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"b\")); // shard 1\n\n    // a second document indexed in shard 1, the checkpoint must come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint1 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    long expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint1);\n\n    index(SOURCE_COLLECTION, getDoc(id, \"c\")); // shard 1\n\n    // a third document indexed in shard 1, the checkpoint must still come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(checkpoint1, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"d\")); // shard 2\n\n    // a fourth document indexed in shard 2, the checkpoint must come from shard 1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint2 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint2);\n\n    // send a delete by query\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n\n    // all the checkpoints must come from the DBQ\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint3 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint3 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint3 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n\n    // replication never started, lastProcessedVersion should be -1 for both shards\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    long lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n  }\n\n","bugFix":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"203e3fcf513c02ee2c07015f2ce277e26dc60907","date":1521404157,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrRequestHandlerTest#testCheckpointActions().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrRequestHandlerTest#testCheckpointActions().mjava","sourceNew":"  // check the checkpoint API\n  @Test\n  @ShardsFixed(num = 2)\n  public void testCheckpointActions() throws Exception {\n    // initial request on an empty index, must return -1\n    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"a\",\"test_i_dvo\",10)); // shard 2\n\n    // only one document indexed in shard 2, the checkpoint must be still -1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"b\")); // shard 1\n\n    // a second document indexed in shard 1, the checkpoint must come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint1 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    long expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint1);\n\n    index(SOURCE_COLLECTION, getDoc(id, \"c\")); // shard 1\n\n    // a third document indexed in shard 1, the checkpoint must still come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(checkpoint1, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"d\")); // shard 2\n\n    // a fourth document indexed in shard 2, the checkpoint must come from shard 1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint2 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint2);\n\n    // send a delete by id\n    long pre_op = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    deleteById(SOURCE_COLLECTION, Arrays.asList(new String[]{\"c\"})); //shard1\n    // document deleted in shard1, checkpoint should come from shard2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint3 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(pre_op, expected);\n    assertEquals(expected, checkpoint3);\n\n    // send a in-place update\n    SolrInputDocument in_place_doc = new SolrInputDocument();\n    in_place_doc.setField(id, \"a\");\n    in_place_doc.setField(\"test_i_dvo\", ImmutableMap.of(\"inc\", 10)); //shard2\n    index(SOURCE_COLLECTION, in_place_doc);\n    // document updated in shard2, checkpoint should come from shard1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint4 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint4);\n\n    // send a delete by query\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n\n    // all the checkpoints must come from the DBQ\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint5= (Long) rsp.get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint5 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint5 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint5 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint5 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint5 > 0); // ensure that checkpoints from deletes are in absolute form\n\n\n    // replication never started, lastProcessedVersion should be -1 for both shards\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    long lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n  }\n\n","sourceOld":"  // check the checkpoint API\n  @Test\n  @ShardsFixed(num = 2)\n  public void testCheckpointActions() throws Exception {\n    // initial request on an empty index, must return -1\n    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"a\")); // shard 2\n\n    // only one document indexed in shard 2, the checkpoint must be still -1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"b\")); // shard 1\n\n    // a second document indexed in shard 1, the checkpoint must come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint1 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    long expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint1);\n\n    index(SOURCE_COLLECTION, getDoc(id, \"c\")); // shard 1\n\n    // a third document indexed in shard 1, the checkpoint must still come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(checkpoint1, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"d\")); // shard 2\n\n    // a fourth document indexed in shard 2, the checkpoint must come from shard 1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint2 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint2);\n\n    // send a delete by query\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n\n    // all the checkpoints must come from the DBQ\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint3 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint3 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint3 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n\n    // replication never started, lastProcessedVersion should be -1 for both shards\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    long lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrRequestHandlerTest#testCheckpointActions().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrRequestHandlerTest#testCheckpointActions().mjava","sourceNew":"  // check the checkpoint API\n  @Test\n  @ShardsFixed(num = 2)\n  public void testCheckpointActions() throws Exception {\n    // initial request on an empty index, must return -1\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"a\",\"test_i_dvo\",10)); // shard 2\n\n    // only one document indexed in shard 2, the checkpoint must be still -1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"b\")); // shard 1\n\n    // a second document indexed in shard 1, the checkpoint must come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint1 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    long expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint1);\n\n    index(SOURCE_COLLECTION, getDoc(id, \"c\")); // shard 1\n\n    // a third document indexed in shard 1, the checkpoint must still come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(checkpoint1, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"d\")); // shard 2\n\n    // a fourth document indexed in shard 2, the checkpoint must come from shard 1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint2 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint2);\n\n    // send a delete by id\n    long pre_op = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    deleteById(SOURCE_COLLECTION, Arrays.asList(new String[]{\"c\"})); //shard1\n    // document deleted in shard1, checkpoint should come from shard2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint3 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(pre_op, expected);\n    assertEquals(expected, checkpoint3);\n\n    // send a in-place update\n    SolrInputDocument in_place_doc = new SolrInputDocument();\n    in_place_doc.setField(id, \"a\");\n    in_place_doc.setField(\"test_i_dvo\", ImmutableMap.of(\"inc\", 10)); //shard2\n    index(SOURCE_COLLECTION, in_place_doc);\n    // document updated in shard2, checkpoint should come from shard1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint4 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint4);\n\n    // send a delete by query\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n\n    // all the checkpoints must come from the DBQ\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint5= (Long) rsp.get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint5 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint5 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint5 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint5 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint5 > 0); // ensure that checkpoints from deletes are in absolute form\n\n\n    // replication never started, lastProcessedVersion should be -1 for both shards\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    long lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n  }\n\n","sourceOld":"  // check the checkpoint API\n  @Test\n  @ShardsFixed(num = 2)\n  public void testCheckpointActions() throws Exception {\n    // initial request on an empty index, must return -1\n    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"a\",\"test_i_dvo\",10)); // shard 2\n\n    // only one document indexed in shard 2, the checkpoint must be still -1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"b\")); // shard 1\n\n    // a second document indexed in shard 1, the checkpoint must come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint1 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    long expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint1);\n\n    index(SOURCE_COLLECTION, getDoc(id, \"c\")); // shard 1\n\n    // a third document indexed in shard 1, the checkpoint must still come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(checkpoint1, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"d\")); // shard 2\n\n    // a fourth document indexed in shard 2, the checkpoint must come from shard 1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint2 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint2);\n\n    // send a delete by id\n    long pre_op = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    deleteById(SOURCE_COLLECTION, Arrays.asList(new String[]{\"c\"})); //shard1\n    // document deleted in shard1, checkpoint should come from shard2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint3 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(pre_op, expected);\n    assertEquals(expected, checkpoint3);\n\n    // send a in-place update\n    SolrInputDocument in_place_doc = new SolrInputDocument();\n    in_place_doc.setField(id, \"a\");\n    in_place_doc.setField(\"test_i_dvo\", ImmutableMap.of(\"inc\", 10)); //shard2\n    index(SOURCE_COLLECTION, in_place_doc);\n    // document updated in shard2, checkpoint should come from shard1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint4 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint4);\n\n    // send a delete by query\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n\n    // all the checkpoints must come from the DBQ\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint5= (Long) rsp.get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint5 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint5 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint5 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint5 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint5 > 0); // ensure that checkpoints from deletes are in absolute form\n\n\n    // replication never started, lastProcessedVersion should be -1 for both shards\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    long lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrRequestHandlerTest#testCheckpointActions().mjava","sourceNew":null,"sourceOld":"  // check the checkpoint API\n  @Test\n  @ShardsFixed(num = 2)\n  public void testCheckpointActions() throws Exception {\n    // initial request on an empty index, must return -1\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"a\",\"test_i_dvo\",10)); // shard 2\n\n    // only one document indexed in shard 2, the checkpoint must be still -1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"b\")); // shard 1\n\n    // a second document indexed in shard 1, the checkpoint must come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint1 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    long expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint1);\n\n    index(SOURCE_COLLECTION, getDoc(id, \"c\")); // shard 1\n\n    // a third document indexed in shard 1, the checkpoint must still come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(checkpoint1, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"d\")); // shard 2\n\n    // a fourth document indexed in shard 2, the checkpoint must come from shard 1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint2 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint2);\n\n    // send a delete by id\n    long pre_op = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    deleteById(SOURCE_COLLECTION, Arrays.asList(new String[]{\"c\"})); //shard1\n    // document deleted in shard1, checkpoint should come from shard2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint3 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(pre_op, expected);\n    assertEquals(expected, checkpoint3);\n\n    // send a in-place update\n    SolrInputDocument in_place_doc = new SolrInputDocument();\n    in_place_doc.setField(id, \"a\");\n    in_place_doc.setField(\"test_i_dvo\", ImmutableMap.of(\"inc\", 10)); //shard2\n    index(SOURCE_COLLECTION, in_place_doc);\n    // document updated in shard2, checkpoint should come from shard1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint4 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint4);\n\n    // send a delete by query\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n\n    // all the checkpoints must come from the DBQ\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint5= (Long) rsp.get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint5 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint5 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint5 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint5 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint5 > 0); // ensure that checkpoints from deletes are in absolute form\n\n\n    // replication never started, lastProcessedVersion should be -1 for both shards\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    long lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["203e3fcf513c02ee2c07015f2ce277e26dc60907"],"e7da9d8536c11576df10e348efa79d2739170936":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d030a7298c5397ab744a356c18ccda17f76f77f7":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","d030a7298c5397ab744a356c18ccda17f76f77f7"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["e7da9d8536c11576df10e348efa79d2739170936"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"e7da9d8536c11576df10e348efa79d2739170936":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"d030a7298c5397ab744a356c18ccda17f76f77f7":["203e3fcf513c02ee2c07015f2ce277e26dc60907"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["d030a7298c5397ab744a356c18ccda17f76f77f7","203e3fcf513c02ee2c07015f2ce277e26dc60907"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7da9d8536c11576df10e348efa79d2739170936"],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}