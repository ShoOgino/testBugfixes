{"path":"src/java/org/apache/solr/util/BitSetIterator#next(int).mjava","commits":[{"id":"21400778a0bf704d187a4848279049f5d90276c8","date":1149955512,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/BitSetIterator#next(int).mjava","pathOld":"/dev/null","sourceNew":"  int next(int fromIndex) {\n    indexArray=0;\n    i = fromIndex >> 6;\n    if (i>=words) {\n      word =0; // setup so next() will also return -1\n      return -1;\n    }\n    wordShift = fromIndex & 0x3f;\n    word = arr[i] >>> wordShift;\n    if (word !=0) {\n      wordShift--; // compensate for 1 based arrIndex\n    } else {\n      while (word ==0) {\n        if (++i >= words) return -1;\n        word = arr[i];\n      }\n      wordShift =-1;\n    }\n\n    shift();\n\n    int bitIndex = (indexArray & 0x0f) + wordShift;\n    indexArray >>>= 4;\n    // should i<<6 be cached as a separate variable?\n    // it would only save one cycle in the best circumstances.\n    return (i<<6) + bitIndex;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9942803b58a4f5248a4a669472bafe1b558cc1f6","date":1157469798,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/BitSetIterator#next(int).mjava","pathOld":"src/java/org/apache/solr/util/BitSetIterator#next(int).mjava","sourceNew":"  public int next(int fromIndex) {\n    indexArray=0;\n    i = fromIndex >> 6;\n    if (i>=words) {\n      word =0; // setup so next() will also return -1\n      return -1;\n    }\n    wordShift = fromIndex & 0x3f;\n    word = arr[i] >>> wordShift;\n    if (word !=0) {\n      wordShift--; // compensate for 1 based arrIndex\n    } else {\n      while (word ==0) {\n        if (++i >= words) return -1;\n        word = arr[i];\n      }\n      wordShift =-1;\n    }\n\n    shift();\n\n    int bitIndex = (indexArray & 0x0f) + wordShift;\n    indexArray >>>= 4;\n    // should i<<6 be cached as a separate variable?\n    // it would only save one cycle in the best circumstances.\n    return (i<<6) + bitIndex;\n  }\n\n","sourceOld":"  int next(int fromIndex) {\n    indexArray=0;\n    i = fromIndex >> 6;\n    if (i>=words) {\n      word =0; // setup so next() will also return -1\n      return -1;\n    }\n    wordShift = fromIndex & 0x3f;\n    word = arr[i] >>> wordShift;\n    if (word !=0) {\n      wordShift--; // compensate for 1 based arrIndex\n    } else {\n      while (word ==0) {\n        if (++i >= words) return -1;\n        word = arr[i];\n      }\n      wordShift =-1;\n    }\n\n    shift();\n\n    int bitIndex = (indexArray & 0x0f) + wordShift;\n    indexArray >>>= 4;\n    // should i<<6 be cached as a separate variable?\n    // it would only save one cycle in the best circumstances.\n    return (i<<6) + bitIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/BitSetIterator#next(int).mjava","pathOld":"src/java/org/apache/solr/util/BitSetIterator#next(int).mjava","sourceNew":"  public int next(int fromIndex) {\n    indexArray=0;\n    i = fromIndex >> 6;\n    if (i>=words) {\n      word =0; // setup so next() will also return -1\n      return -1;\n    }\n    wordShift = fromIndex & 0x3f;\n    word = arr[i] >>> wordShift;\n    if (word !=0) {\n      wordShift--; // compensate for 1 based arrIndex\n    } else {\n      while (word ==0) {\n        if (++i >= words) return -1;\n        word = arr[i];\n      }\n      wordShift =-1;\n    }\n\n    shift();\n\n    int bitIndex = (indexArray & 0x0f) + wordShift;\n    indexArray >>>= 4;\n    // should i<<6 be cached as a separate variable?\n    // it would only save one cycle in the best circumstances.\n    return (i<<6) + bitIndex;\n  }\n\n","sourceOld":"  public int next(int fromIndex) {\n    indexArray=0;\n    i = fromIndex >> 6;\n    if (i>=words) {\n      word =0; // setup so next() will also return -1\n      return -1;\n    }\n    wordShift = fromIndex & 0x3f;\n    word = arr[i] >>> wordShift;\n    if (word !=0) {\n      wordShift--; // compensate for 1 based arrIndex\n    } else {\n      while (word ==0) {\n        if (++i >= words) return -1;\n        word = arr[i];\n      }\n      wordShift =-1;\n    }\n\n    shift();\n\n    int bitIndex = (indexArray & 0x0f) + wordShift;\n    indexArray >>>= 4;\n    // should i<<6 be cached as a separate variable?\n    // it would only save one cycle in the best circumstances.\n    return (i<<6) + bitIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9942803b58a4f5248a4a669472bafe1b558cc1f6":["21400778a0bf704d187a4848279049f5d90276c8"],"21400778a0bf704d187a4848279049f5d90276c8":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["9942803b58a4f5248a4a669472bafe1b558cc1f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9942803b58a4f5248a4a669472bafe1b558cc1f6":["ad94625fb8d088209f46650c8097196fec67f00c"],"21400778a0bf704d187a4848279049f5d90276c8":["9942803b58a4f5248a4a669472bafe1b558cc1f6"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["21400778a0bf704d187a4848279049f5d90276c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}