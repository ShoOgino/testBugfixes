{"path":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String,float).mjava","commits":[{"id":"232d48b2fd10ac5189a0ac4480ace7421be9de93","date":1334848212,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String,float).mjava","pathOld":"/dev/null","sourceNew":"  public IndexableField fromString(SchemaField field, String val, float boost) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(new StringReader(val), parser);\n    Field f = (Field)super.createField(field, val, boost);\n    if (parse.getStringValue() != null) {\n      f.setStringValue(parse.getStringValue());\n    } else if (parse.getBinaryValue() != null) {\n      f.setBytesValue(parse.getBinaryValue());\n    } else {\n      f.fieldType().setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      f.fieldType().setIndexed(true);\n      f.fieldType().setTokenized(true);\n      f.setTokenStream(parse);\n    }\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6c7ac188e4a03a976c95993dc3cd292df966faa4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"409324b31a1419d7c05a38211168cf317e39be77","date":1344866765,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String,float).mjava","sourceNew":"  public StorableField fromString(SchemaField field, String val, float boost) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(new StringReader(val), parser);\n    Field f = (Field)super.createField(field, val, boost);\n    if (parse.getStringValue() != null) {\n      f.setStringValue(parse.getStringValue());\n    } else if (parse.getBinaryValue() != null) {\n      f.setBytesValue(parse.getBinaryValue());\n    } else {\n      f.fieldType().setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      f.fieldType().setIndexed(true);\n      f.fieldType().setTokenized(true);\n      f.setTokenStream(parse);\n    }\n    return f;\n  }\n\n","sourceOld":"  public IndexableField fromString(SchemaField field, String val, float boost) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(new StringReader(val), parser);\n    Field f = (Field)super.createField(field, val, boost);\n    if (parse.getStringValue() != null) {\n      f.setStringValue(parse.getStringValue());\n    } else if (parse.getBinaryValue() != null) {\n      f.setBytesValue(parse.getBinaryValue());\n    } else {\n      f.fieldType().setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      f.fieldType().setIndexed(true);\n      f.fieldType().setTokenized(true);\n      f.setTokenStream(parse);\n    }\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c1b87b155748a27fbed84a0ffb3f8799177451e","date":1346349018,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String,float).mjava","sourceNew":"  public IndexableField fromString(SchemaField field, String val, float boost) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(new StringReader(val), parser);\n    parse.reset(); // consume\n    Field f = (Field)super.createField(field, val, boost);\n    if (parse.getStringValue() != null) {\n      f.setStringValue(parse.getStringValue());\n    } else if (parse.getBinaryValue() != null) {\n      f.setBytesValue(parse.getBinaryValue());\n    } else {\n      f.fieldType().setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      f.fieldType().setIndexed(true);\n      f.fieldType().setTokenized(true);\n      f.setTokenStream(parse);\n    }\n    return f;\n  }\n\n","sourceOld":"  public IndexableField fromString(SchemaField field, String val, float boost) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(new StringReader(val), parser);\n    Field f = (Field)super.createField(field, val, boost);\n    if (parse.getStringValue() != null) {\n      f.setStringValue(parse.getStringValue());\n    } else if (parse.getBinaryValue() != null) {\n      f.setBytesValue(parse.getBinaryValue());\n    } else {\n      f.fieldType().setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      f.fieldType().setIndexed(true);\n      f.fieldType().setTokenized(true);\n      f.setTokenStream(parse);\n    }\n    return f;\n  }\n\n","bugFix":null,"bugIntro":["90092e3ad74adf68ec9507e7046fe5a39039964c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String,float).mjava","sourceNew":"  public StorableField fromString(SchemaField field, String val, float boost) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(new StringReader(val), parser);\n    parse.reset(); // consume\n    Field f = (Field)super.createField(field, val, boost);\n    if (parse.getStringValue() != null) {\n      f.setStringValue(parse.getStringValue());\n    } else if (parse.getBinaryValue() != null) {\n      f.setBytesValue(parse.getBinaryValue());\n    } else {\n      f.fieldType().setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      f.fieldType().setIndexed(true);\n      f.fieldType().setTokenized(true);\n      f.setTokenStream(parse);\n    }\n    return f;\n  }\n\n","sourceOld":"  public StorableField fromString(SchemaField field, String val, float boost) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(new StringReader(val), parser);\n    Field f = (Field)super.createField(field, val, boost);\n    if (parse.getStringValue() != null) {\n      f.setStringValue(parse.getStringValue());\n    } else if (parse.getBinaryValue() != null) {\n      f.setBytesValue(parse.getBinaryValue());\n    } else {\n      f.fieldType().setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      f.fieldType().setIndexed(true);\n      f.fieldType().setTokenized(true);\n      f.setTokenStream(parse);\n    }\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String,float).mjava","sourceNew":"  public StorableField fromString(SchemaField field, String val, float boost) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(new StringReader(val), parser);\n    parse.reset(); // consume\n    Field f = (Field)super.createField(field, val, boost);\n    if (parse.getStringValue() != null) {\n      f.setStringValue(parse.getStringValue());\n    } else if (parse.getBinaryValue() != null) {\n      f.setBytesValue(parse.getBinaryValue());\n    } else {\n      f.fieldType().setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      f.fieldType().setIndexed(true);\n      f.fieldType().setTokenized(true);\n      f.setTokenStream(parse);\n    }\n    return f;\n  }\n\n","sourceOld":"  public IndexableField fromString(SchemaField field, String val, float boost) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(new StringReader(val), parser);\n    parse.reset(); // consume\n    Field f = (Field)super.createField(field, val, boost);\n    if (parse.getStringValue() != null) {\n      f.setStringValue(parse.getStringValue());\n    } else if (parse.getBinaryValue() != null) {\n      f.setBytesValue(parse.getBinaryValue());\n    } else {\n      f.fieldType().setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      f.fieldType().setIndexed(true);\n      f.fieldType().setTokenized(true);\n      f.setTokenStream(parse);\n    }\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c7ac188e4a03a976c95993dc3cd292df966faa4","date":1365151572,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String,float).mjava","sourceNew":"  public StorableField fromString(SchemaField field, String val, float boost) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(new StringReader(val), parser);\n    parse.reset(); // consume\n    org.apache.lucene.document.FieldType type = createFieldType(field);\n    if (type == null) {\n      parse.close();\n      return null;\n    }\n    Field f = null;\n    if (parse.getStringValue() != null) {\n      if (field.stored()) {\n        f = new Field(field.getName(), parse.getStringValue(), type);\n      } else {\n        type.setStored(false);\n      }\n    } else if (parse.getBinaryValue() != null) {\n      if (field.isBinary()) {\n        f = new Field(field.getName(), parse.getBinaryValue(), type);\n      }\n    } else {\n      type.setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      if (field.indexed()) {\n        type.setIndexed(true);\n        type.setTokenized(true);\n        if (f != null) {\n          f.setTokenStream(parse);\n        } else {\n          f = new Field(field.getName(), parse, type);\n        }\n      } else {\n        if (f != null) {\n          f.fieldType().setIndexed(false);\n          f.fieldType().setTokenized(false);\n        }\n      }\n    }\n    if (f != null) {\n      f.setBoost(boost);\n    }\n    return f;\n  }\n\n","sourceOld":"  public StorableField fromString(SchemaField field, String val, float boost) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(new StringReader(val), parser);\n    parse.reset(); // consume\n    Field f = (Field)super.createField(field, val, boost);\n    if (parse.getStringValue() != null) {\n      f.setStringValue(parse.getStringValue());\n    } else if (parse.getBinaryValue() != null) {\n      f.setBytesValue(parse.getBinaryValue());\n    } else {\n      f.fieldType().setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      f.fieldType().setIndexed(true);\n      f.fieldType().setTokenized(true);\n      f.setTokenStream(parse);\n    }\n    return f;\n  }\n\n","bugFix":["232d48b2fd10ac5189a0ac4480ace7421be9de93"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String,float).mjava","sourceNew":"  public StorableField fromString(SchemaField field, String val, float boost) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(parser);\n    parse.setReader(new StringReader(val));\n    parse.reset(); // consume\n    org.apache.lucene.document.FieldType type = createFieldType(field);\n    if (type == null) {\n      parse.close();\n      return null;\n    }\n    Field f = null;\n    if (parse.getStringValue() != null) {\n      if (field.stored()) {\n        f = new Field(field.getName(), parse.getStringValue(), type);\n      } else {\n        type.setStored(false);\n      }\n    } else if (parse.getBinaryValue() != null) {\n      if (field.isBinary()) {\n        f = new Field(field.getName(), parse.getBinaryValue(), type);\n      }\n    } else {\n      type.setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      if (field.indexed()) {\n        type.setIndexed(true);\n        type.setTokenized(true);\n        if (f != null) {\n          f.setTokenStream(parse);\n        } else {\n          f = new Field(field.getName(), parse, type);\n        }\n      } else {\n        if (f != null) {\n          f.fieldType().setIndexed(false);\n          f.fieldType().setTokenized(false);\n        }\n      }\n    }\n    if (f != null) {\n      f.setBoost(boost);\n    }\n    return f;\n  }\n\n","sourceOld":"  public StorableField fromString(SchemaField field, String val, float boost) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(new StringReader(val), parser);\n    parse.reset(); // consume\n    org.apache.lucene.document.FieldType type = createFieldType(field);\n    if (type == null) {\n      parse.close();\n      return null;\n    }\n    Field f = null;\n    if (parse.getStringValue() != null) {\n      if (field.stored()) {\n        f = new Field(field.getName(), parse.getStringValue(), type);\n      } else {\n        type.setStored(false);\n      }\n    } else if (parse.getBinaryValue() != null) {\n      if (field.isBinary()) {\n        f = new Field(field.getName(), parse.getBinaryValue(), type);\n      }\n    } else {\n      type.setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      if (field.indexed()) {\n        type.setIndexed(true);\n        type.setTokenized(true);\n        if (f != null) {\n          f.setTokenStream(parse);\n        } else {\n          f = new Field(field.getName(), parse, type);\n        }\n      } else {\n        if (f != null) {\n          f.fieldType().setIndexed(false);\n          f.fieldType().setTokenized(false);\n        }\n      }\n    }\n    if (f != null) {\n      f.setBoost(boost);\n    }\n    return f;\n  }\n\n","bugFix":null,"bugIntro":["90092e3ad74adf68ec9507e7046fe5a39039964c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String,float).mjava","sourceNew":"  public StorableField fromString(SchemaField field, String val, float boost) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(parser);\n    parse.setReader(new StringReader(val));\n    parse.reset(); // consume\n    org.apache.lucene.document.FieldType type = createFieldType(field);\n    if (type == null) {\n      parse.close();\n      return null;\n    }\n    Field f = null;\n    if (parse.getStringValue() != null) {\n      if (field.stored()) {\n        f = new Field(field.getName(), parse.getStringValue(), type);\n      } else {\n        type.setStored(false);\n      }\n    } else if (parse.getBinaryValue() != null) {\n      if (field.isBinary()) {\n        f = new Field(field.getName(), parse.getBinaryValue(), type);\n      }\n    } else {\n      type.setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      if (field.indexed()) {\n        type.setTokenized(true);\n        if (f != null) {\n          f.setTokenStream(parse);\n        } else {\n          f = new Field(field.getName(), parse, type);\n        }\n      } else {\n        if (f != null) {\n          f.fieldType().setIndexOptions(null);\n          f.fieldType().setTokenized(false);\n        }\n      }\n    }\n    if (f != null) {\n      f.setBoost(boost);\n    }\n    return f;\n  }\n\n","sourceOld":"  public StorableField fromString(SchemaField field, String val, float boost) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(parser);\n    parse.setReader(new StringReader(val));\n    parse.reset(); // consume\n    org.apache.lucene.document.FieldType type = createFieldType(field);\n    if (type == null) {\n      parse.close();\n      return null;\n    }\n    Field f = null;\n    if (parse.getStringValue() != null) {\n      if (field.stored()) {\n        f = new Field(field.getName(), parse.getStringValue(), type);\n      } else {\n        type.setStored(false);\n      }\n    } else if (parse.getBinaryValue() != null) {\n      if (field.isBinary()) {\n        f = new Field(field.getName(), parse.getBinaryValue(), type);\n      }\n    } else {\n      type.setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      if (field.indexed()) {\n        type.setIndexed(true);\n        type.setTokenized(true);\n        if (f != null) {\n          f.setTokenStream(parse);\n        } else {\n          f = new Field(field.getName(), parse, type);\n        }\n      } else {\n        if (f != null) {\n          f.fieldType().setIndexed(false);\n          f.fieldType().setTokenized(false);\n        }\n      }\n    }\n    if (f != null) {\n      f.setBoost(boost);\n    }\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String,float).mjava","sourceNew":"  public StorableField fromString(SchemaField field, String val, float boost) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(parser);\n    parse.setReader(new StringReader(val));\n    parse.reset(); // consume\n    org.apache.lucene.document.FieldType type = createFieldType(field);\n    if (type == null) {\n      parse.close();\n      return null;\n    }\n    Field f = null;\n    if (parse.getStringValue() != null) {\n      if (field.stored()) {\n        f = new Field(field.getName(), parse.getStringValue(), type);\n      } else {\n        type.setStored(false);\n      }\n    } else if (parse.getBinaryValue() != null) {\n      if (field.isBinary()) {\n        f = new Field(field.getName(), parse.getBinaryValue(), type);\n      }\n    } else {\n      type.setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      if (field.indexed()) {\n        type.setTokenized(true);\n        if (f != null) {\n          f.setTokenStream(parse);\n        } else {\n          f = new Field(field.getName(), parse, type);\n        }\n      } else {\n        if (f != null) {\n          f.fieldType().setIndexOptions(null);\n          f.fieldType().setTokenized(false);\n        }\n      }\n    }\n    if (f != null) {\n      f.setBoost(boost);\n    }\n    return f;\n  }\n\n","sourceOld":"  public StorableField fromString(SchemaField field, String val, float boost) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(parser);\n    parse.setReader(new StringReader(val));\n    parse.reset(); // consume\n    org.apache.lucene.document.FieldType type = createFieldType(field);\n    if (type == null) {\n      parse.close();\n      return null;\n    }\n    Field f = null;\n    if (parse.getStringValue() != null) {\n      if (field.stored()) {\n        f = new Field(field.getName(), parse.getStringValue(), type);\n      } else {\n        type.setStored(false);\n      }\n    } else if (parse.getBinaryValue() != null) {\n      if (field.isBinary()) {\n        f = new Field(field.getName(), parse.getBinaryValue(), type);\n      }\n    } else {\n      type.setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      if (field.indexed()) {\n        type.setIndexed(true);\n        type.setTokenized(true);\n        if (f != null) {\n          f.setTokenStream(parse);\n        } else {\n          f = new Field(field.getName(), parse, type);\n        }\n      } else {\n        if (f != null) {\n          f.fieldType().setIndexed(false);\n          f.fieldType().setTokenized(false);\n        }\n      }\n    }\n    if (f != null) {\n      f.setBoost(boost);\n    }\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String,float).mjava","sourceNew":"  public StorableField fromString(SchemaField field, String val, float boost) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(parser);\n    parse.setReader(new StringReader(val));\n    parse.reset(); // consume\n    org.apache.lucene.document.FieldType type = createFieldType(field);\n    if (type == null) {\n      parse.close();\n      return null;\n    }\n    Field f = null;\n    if (parse.getStringValue() != null) {\n      if (field.stored()) {\n        f = new Field(field.getName(), parse.getStringValue(), type);\n      } else {\n        type.setStored(false);\n      }\n    } else if (parse.getBinaryValue() != null) {\n      if (field.isBinary()) {\n        f = new Field(field.getName(), parse.getBinaryValue(), type);\n      }\n    } else {\n      type.setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      if (field.indexed()) {\n        type.setTokenized(true);\n        if (f != null) {\n          f.setTokenStream(parse);\n        } else {\n          f = new Field(field.getName(), parse, type);\n        }\n      } else {\n        if (f != null) {\n          f.fieldType().setIndexOptions(IndexOptions.NO);\n          f.fieldType().setTokenized(false);\n        }\n      }\n    }\n    if (f != null) {\n      f.setBoost(boost);\n    }\n    return f;\n  }\n\n","sourceOld":"  public StorableField fromString(SchemaField field, String val, float boost) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(parser);\n    parse.setReader(new StringReader(val));\n    parse.reset(); // consume\n    org.apache.lucene.document.FieldType type = createFieldType(field);\n    if (type == null) {\n      parse.close();\n      return null;\n    }\n    Field f = null;\n    if (parse.getStringValue() != null) {\n      if (field.stored()) {\n        f = new Field(field.getName(), parse.getStringValue(), type);\n      } else {\n        type.setStored(false);\n      }\n    } else if (parse.getBinaryValue() != null) {\n      if (field.isBinary()) {\n        f = new Field(field.getName(), parse.getBinaryValue(), type);\n      }\n    } else {\n      type.setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      if (field.indexed()) {\n        type.setTokenized(true);\n        if (f != null) {\n          f.setTokenStream(parse);\n        } else {\n          f = new Field(field.getName(), parse, type);\n        }\n      } else {\n        if (f != null) {\n          f.fieldType().setIndexOptions(null);\n          f.fieldType().setTokenized(false);\n        }\n      }\n    }\n    if (f != null) {\n      f.setBoost(boost);\n    }\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f95ce1375367b92d411a06175eab3915fe93c6bc","date":1414788502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String,float).mjava","sourceNew":"  public StorableField fromString(SchemaField field, String val, float boost) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(parser);\n    parse.setReader(new StringReader(val));\n    parse.reset(); // consume\n    org.apache.lucene.document.FieldType type = createFieldType(field);\n    if (type == null) {\n      parse.close();\n      return null;\n    }\n    Field f = null;\n    if (parse.getStringValue() != null) {\n      if (field.stored()) {\n        f = new Field(field.getName(), parse.getStringValue(), type);\n      } else {\n        type.setStored(false);\n      }\n    } else if (parse.getBinaryValue() != null) {\n      if (field.isBinary()) {\n        f = new Field(field.getName(), parse.getBinaryValue(), type);\n      }\n    } else {\n      type.setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      if (field.indexed()) {\n        type.setTokenized(true);\n        if (f != null) {\n          f.setTokenStream(parse);\n        } else {\n          f = new Field(field.getName(), parse, type);\n        }\n      } else {\n        if (f != null) {\n          f.fieldType().setIndexOptions(IndexOptions.NONE);\n          f.fieldType().setTokenized(false);\n        }\n      }\n    }\n    if (f != null) {\n      f.setBoost(boost);\n    }\n    return f;\n  }\n\n","sourceOld":"  public StorableField fromString(SchemaField field, String val, float boost) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(parser);\n    parse.setReader(new StringReader(val));\n    parse.reset(); // consume\n    org.apache.lucene.document.FieldType type = createFieldType(field);\n    if (type == null) {\n      parse.close();\n      return null;\n    }\n    Field f = null;\n    if (parse.getStringValue() != null) {\n      if (field.stored()) {\n        f = new Field(field.getName(), parse.getStringValue(), type);\n      } else {\n        type.setStored(false);\n      }\n    } else if (parse.getBinaryValue() != null) {\n      if (field.isBinary()) {\n        f = new Field(field.getName(), parse.getBinaryValue(), type);\n      }\n    } else {\n      type.setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      if (field.indexed()) {\n        type.setTokenized(true);\n        if (f != null) {\n          f.setTokenStream(parse);\n        } else {\n          f = new Field(field.getName(), parse, type);\n        }\n      } else {\n        if (f != null) {\n          f.fieldType().setIndexOptions(IndexOptions.NO);\n          f.fieldType().setTokenized(false);\n        }\n      }\n    }\n    if (f != null) {\n      f.setBoost(boost);\n    }\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String,float).mjava","sourceNew":"  public IndexableField fromString(SchemaField field, String val, float boost) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(parser);\n    parse.setReader(new StringReader(val));\n    parse.reset(); // consume\n    org.apache.lucene.document.FieldType type = createFieldType(field);\n    if (type == null) {\n      parse.close();\n      return null;\n    }\n    Field f = null;\n    if (parse.getStringValue() != null) {\n      if (field.stored()) {\n        f = new Field(field.getName(), parse.getStringValue(), type);\n      } else {\n        type.setStored(false);\n      }\n    } else if (parse.getBinaryValue() != null) {\n      if (field.isBinary()) {\n        f = new Field(field.getName(), parse.getBinaryValue(), type);\n      }\n    } else {\n      type.setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      if (field.indexed()) {\n        type.setTokenized(true);\n        if (f != null) {\n          f.setTokenStream(parse);\n        } else {\n          f = new Field(field.getName(), parse, type);\n        }\n      } else {\n        if (f != null) {\n          f.fieldType().setIndexOptions(IndexOptions.NONE);\n          f.fieldType().setTokenized(false);\n        }\n      }\n    }\n    if (f != null) {\n      f.setBoost(boost);\n    }\n    return f;\n  }\n\n","sourceOld":"  public StorableField fromString(SchemaField field, String val, float boost) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(parser);\n    parse.setReader(new StringReader(val));\n    parse.reset(); // consume\n    org.apache.lucene.document.FieldType type = createFieldType(field);\n    if (type == null) {\n      parse.close();\n      return null;\n    }\n    Field f = null;\n    if (parse.getStringValue() != null) {\n      if (field.stored()) {\n        f = new Field(field.getName(), parse.getStringValue(), type);\n      } else {\n        type.setStored(false);\n      }\n    } else if (parse.getBinaryValue() != null) {\n      if (field.isBinary()) {\n        f = new Field(field.getName(), parse.getBinaryValue(), type);\n      }\n    } else {\n      type.setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      if (field.indexed()) {\n        type.setTokenized(true);\n        if (f != null) {\n          f.setTokenStream(parse);\n        } else {\n          f = new Field(field.getName(), parse, type);\n        }\n      } else {\n        if (f != null) {\n          f.fieldType().setIndexOptions(IndexOptions.NONE);\n          f.fieldType().setTokenized(false);\n        }\n      }\n    }\n    if (f != null) {\n      f.setBoost(boost);\n    }\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90092e3ad74adf68ec9507e7046fe5a39039964c","date":1453355496,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String,float).mjava","sourceNew":"  public IndexableField fromString(SchemaField field, String val, float boost) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(parser);\n    Reader reader = new StringReader(val);\n    parse.setReader(reader);\n    parse.decodeInput(reader); // consume\n    parse.reset();\n    org.apache.lucene.document.FieldType type = createFieldType(field);\n    if (type == null) {\n      parse.close();\n      return null;\n    }\n    Field f = null;\n    if (parse.getStringValue() != null) {\n      if (field.stored()) {\n        f = new Field(field.getName(), parse.getStringValue(), type);\n      } else {\n        type.setStored(false);\n      }\n    } else if (parse.getBinaryValue() != null) {\n      if (field.isBinary()) {\n        f = new Field(field.getName(), parse.getBinaryValue(), type);\n      }\n    } else {\n      type.setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      if (field.indexed()) {\n        type.setTokenized(true);\n        if (f != null) {\n          f.setTokenStream(parse);\n        } else {\n          f = new Field(field.getName(), parse, type);\n        }\n      } else {\n        if (f != null) {\n          f.fieldType().setIndexOptions(IndexOptions.NONE);\n          f.fieldType().setTokenized(false);\n        }\n      }\n    }\n    if (f != null) {\n      f.setBoost(boost);\n    }\n    return f;\n  }\n\n","sourceOld":"  public IndexableField fromString(SchemaField field, String val, float boost) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(parser);\n    parse.setReader(new StringReader(val));\n    parse.reset(); // consume\n    org.apache.lucene.document.FieldType type = createFieldType(field);\n    if (type == null) {\n      parse.close();\n      return null;\n    }\n    Field f = null;\n    if (parse.getStringValue() != null) {\n      if (field.stored()) {\n        f = new Field(field.getName(), parse.getStringValue(), type);\n      } else {\n        type.setStored(false);\n      }\n    } else if (parse.getBinaryValue() != null) {\n      if (field.isBinary()) {\n        f = new Field(field.getName(), parse.getBinaryValue(), type);\n      }\n    } else {\n      type.setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      if (field.indexed()) {\n        type.setTokenized(true);\n        if (f != null) {\n          f.setTokenStream(parse);\n        } else {\n          f = new Field(field.getName(), parse, type);\n        }\n      } else {\n        if (f != null) {\n          f.fieldType().setIndexOptions(IndexOptions.NONE);\n          f.fieldType().setTokenized(false);\n        }\n      }\n    }\n    if (f != null) {\n      f.setBoost(boost);\n    }\n    return f;\n  }\n\n","bugFix":["4c1b87b155748a27fbed84a0ffb3f8799177451e","ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeea025b4a7a8e8f70426ac4527ef481b3a86b72","date":1476199075,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String,float).mjava","sourceNew":"  public IndexableField fromString(SchemaField field, String val, float boost) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(parser);\n    Reader reader = new StringReader(val);\n    parse.setReader(reader);\n    parse.decodeInput(reader); // consume\n    parse.reset();\n    org.apache.lucene.document.FieldType type = createFieldType(field);\n    if (type == null) {\n      parse.close();\n      return null;\n    }\n    Field f = null;\n    if (parse.getStringValue() != null) {\n      if (field.stored()) {\n        f = new Field(field.getName(), parse.getStringValue(), type);\n      } else {\n        type.setStored(false);\n      }\n    } else if (parse.getBinaryValue() != null) {\n      if (field.isBinary()) {\n        f = new Field(field.getName(), parse.getBinaryValue(), type);\n      }\n    } else {\n      type.setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      if (field.indexed()) {\n        type.setTokenized(true);\n        if (f != null) {\n          f.setTokenStream(parse);\n        } else {\n          f = new Field(field.getName(), parse, type);\n        }\n      } else {\n        if (f != null) {\n          type.setIndexOptions(IndexOptions.NONE);\n          type.setTokenized(false);\n        }\n      }\n    }\n    if (f != null) {\n      f.setBoost(boost);\n    }\n    return f;\n  }\n\n","sourceOld":"  public IndexableField fromString(SchemaField field, String val, float boost) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(parser);\n    Reader reader = new StringReader(val);\n    parse.setReader(reader);\n    parse.decodeInput(reader); // consume\n    parse.reset();\n    org.apache.lucene.document.FieldType type = createFieldType(field);\n    if (type == null) {\n      parse.close();\n      return null;\n    }\n    Field f = null;\n    if (parse.getStringValue() != null) {\n      if (field.stored()) {\n        f = new Field(field.getName(), parse.getStringValue(), type);\n      } else {\n        type.setStored(false);\n      }\n    } else if (parse.getBinaryValue() != null) {\n      if (field.isBinary()) {\n        f = new Field(field.getName(), parse.getBinaryValue(), type);\n      }\n    } else {\n      type.setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      if (field.indexed()) {\n        type.setTokenized(true);\n        if (f != null) {\n          f.setTokenStream(parse);\n        } else {\n          f = new Field(field.getName(), parse, type);\n        }\n      } else {\n        if (f != null) {\n          f.fieldType().setIndexOptions(IndexOptions.NONE);\n          f.fieldType().setTokenized(false);\n        }\n      }\n    }\n    if (f != null) {\n      f.setBoost(boost);\n    }\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String,float).mjava","sourceNew":"  public IndexableField fromString(SchemaField field, String val, float boost) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(parser);\n    Reader reader = new StringReader(val);\n    parse.setReader(reader);\n    parse.decodeInput(reader); // consume\n    parse.reset();\n    org.apache.lucene.document.FieldType type = createFieldType(field);\n    if (type == null) {\n      parse.close();\n      return null;\n    }\n    Field f = null;\n    if (parse.getStringValue() != null) {\n      if (field.stored()) {\n        f = new Field(field.getName(), parse.getStringValue(), type);\n      } else {\n        type.setStored(false);\n      }\n    } else if (parse.getBinaryValue() != null) {\n      if (field.isBinary()) {\n        f = new Field(field.getName(), parse.getBinaryValue(), type);\n      }\n    } else {\n      type.setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      if (field.indexed()) {\n        type.setTokenized(true);\n        if (f != null) {\n          f.setTokenStream(parse);\n        } else {\n          f = new Field(field.getName(), parse, type);\n        }\n      } else {\n        if (f != null) {\n          type.setIndexOptions(IndexOptions.NONE);\n          type.setTokenized(false);\n        }\n      }\n    }\n    if (f != null) {\n      f.setBoost(boost);\n    }\n    return f;\n  }\n\n","sourceOld":"  public IndexableField fromString(SchemaField field, String val, float boost) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(parser);\n    Reader reader = new StringReader(val);\n    parse.setReader(reader);\n    parse.decodeInput(reader); // consume\n    parse.reset();\n    org.apache.lucene.document.FieldType type = createFieldType(field);\n    if (type == null) {\n      parse.close();\n      return null;\n    }\n    Field f = null;\n    if (parse.getStringValue() != null) {\n      if (field.stored()) {\n        f = new Field(field.getName(), parse.getStringValue(), type);\n      } else {\n        type.setStored(false);\n      }\n    } else if (parse.getBinaryValue() != null) {\n      if (field.isBinary()) {\n        f = new Field(field.getName(), parse.getBinaryValue(), type);\n      }\n    } else {\n      type.setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      if (field.indexed()) {\n        type.setTokenized(true);\n        if (f != null) {\n          f.setTokenStream(parse);\n        } else {\n          f = new Field(field.getName(), parse, type);\n        }\n      } else {\n        if (f != null) {\n          f.fieldType().setIndexOptions(IndexOptions.NONE);\n          f.fieldType().setTokenized(false);\n        }\n      }\n    }\n    if (f != null) {\n      f.setBoost(boost);\n    }\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#fromString(SchemaField,String,float).mjava","sourceNew":"  public IndexableField fromString(SchemaField field, String val) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(parser);\n    Reader reader = new StringReader(val);\n    parse.setReader(reader);\n    parse.decodeInput(reader); // consume\n    parse.reset();\n    org.apache.lucene.document.FieldType type = createFieldType(field);\n    if (type == null) {\n      parse.close();\n      return null;\n    }\n    Field f = null;\n    if (parse.getStringValue() != null) {\n      if (field.stored()) {\n        f = new Field(field.getName(), parse.getStringValue(), type);\n      } else {\n        type.setStored(false);\n      }\n    } else if (parse.getBinaryValue() != null) {\n      if (field.isBinary()) {\n        f = new Field(field.getName(), parse.getBinaryValue(), type);\n      }\n    } else {\n      type.setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      if (field.indexed()) {\n        type.setTokenized(true);\n        if (f != null) {\n          f.setTokenStream(parse);\n        } else {\n          f = new Field(field.getName(), parse, type);\n        }\n      } else {\n        if (f != null) {\n          type.setIndexOptions(IndexOptions.NONE);\n          type.setTokenized(false);\n        }\n      }\n    }\n    return f;\n  }\n\n","sourceOld":"  public IndexableField fromString(SchemaField field, String val, float boost) throws Exception {\n    if (val == null || val.trim().length() == 0) {\n      return null;\n    }\n    PreAnalyzedTokenizer parse = new PreAnalyzedTokenizer(parser);\n    Reader reader = new StringReader(val);\n    parse.setReader(reader);\n    parse.decodeInput(reader); // consume\n    parse.reset();\n    org.apache.lucene.document.FieldType type = createFieldType(field);\n    if (type == null) {\n      parse.close();\n      return null;\n    }\n    Field f = null;\n    if (parse.getStringValue() != null) {\n      if (field.stored()) {\n        f = new Field(field.getName(), parse.getStringValue(), type);\n      } else {\n        type.setStored(false);\n      }\n    } else if (parse.getBinaryValue() != null) {\n      if (field.isBinary()) {\n        f = new Field(field.getName(), parse.getBinaryValue(), type);\n      }\n    } else {\n      type.setStored(false);\n    }\n    \n    if (parse.hasTokenStream()) {\n      if (field.indexed()) {\n        type.setTokenized(true);\n        if (f != null) {\n          f.setTokenStream(parse);\n        } else {\n          f = new Field(field.getName(), parse, type);\n        }\n      } else {\n        if (f != null) {\n          type.setIndexOptions(IndexOptions.NONE);\n          type.setTokenized(false);\n        }\n      }\n    }\n    if (f != null) {\n      f.setBoost(boost);\n    }\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c1b87b155748a27fbed84a0ffb3f8799177451e":["232d48b2fd10ac5189a0ac4480ace7421be9de93"],"409324b31a1419d7c05a38211168cf317e39be77":["232d48b2fd10ac5189a0ac4480ace7421be9de93"],"eeea025b4a7a8e8f70426ac4527ef481b3a86b72":["90092e3ad74adf68ec9507e7046fe5a39039964c"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["6c7ac188e4a03a976c95993dc3cd292df966faa4"],"90092e3ad74adf68ec9507e7046fe5a39039964c":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["3184874f7f3aca850248483485b4995343066875"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["409324b31a1419d7c05a38211168cf317e39be77","4c1b87b155748a27fbed84a0ffb3f8799177451e"],"6c7ac188e4a03a976c95993dc3cd292df966faa4":["1d028314cced5858683a1bb4741423d0f934257b"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"3184874f7f3aca850248483485b4995343066875":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["90092e3ad74adf68ec9507e7046fe5a39039964c","eeea025b4a7a8e8f70426ac4527ef481b3a86b72"],"1d028314cced5858683a1bb4741423d0f934257b":["4c1b87b155748a27fbed84a0ffb3f8799177451e","05a14b2611ead08655a2b2bdc61632eb31316e57"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","3184874f7f3aca850248483485b4995343066875"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"232d48b2fd10ac5189a0ac4480ace7421be9de93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"acd9883560fd89e6448b2b447302fe543040cd4f":["eeea025b4a7a8e8f70426ac4527ef481b3a86b72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acd9883560fd89e6448b2b447302fe543040cd4f"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["f95ce1375367b92d411a06175eab3915fe93c6bc"]},"commit2Childs":{"4c1b87b155748a27fbed84a0ffb3f8799177451e":["05a14b2611ead08655a2b2bdc61632eb31316e57","1d028314cced5858683a1bb4741423d0f934257b"],"409324b31a1419d7c05a38211168cf317e39be77":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"eeea025b4a7a8e8f70426ac4527ef481b3a86b72":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","acd9883560fd89e6448b2b447302fe543040cd4f"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["3184874f7f3aca850248483485b4995343066875","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"90092e3ad74adf68ec9507e7046fe5a39039964c":["eeea025b4a7a8e8f70426ac4527ef481b3a86b72","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["1d028314cced5858683a1bb4741423d0f934257b"],"6c7ac188e4a03a976c95993dc3cd292df966faa4":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"3184874f7f3aca850248483485b4995343066875":["2bb2842e561df4e8e9ad89010605fc86ac265465","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"1d028314cced5858683a1bb4741423d0f934257b":["6c7ac188e4a03a976c95993dc3cd292df966faa4"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["232d48b2fd10ac5189a0ac4480ace7421be9de93"],"232d48b2fd10ac5189a0ac4480ace7421be9de93":["4c1b87b155748a27fbed84a0ffb3f8799177451e","409324b31a1419d7c05a38211168cf317e39be77"],"acd9883560fd89e6448b2b447302fe543040cd4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["90092e3ad74adf68ec9507e7046fe5a39039964c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}