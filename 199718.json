{"path":"solr/core/src/java/org/apache/solr/handler/admin/AdminHandlersProxy#maybeProxyToNodes(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","commits":[{"id":"750239682d222924398443d581163940f48d68fc","date":1533297311,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/AdminHandlersProxy#maybeProxyToNodes(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","pathOld":"/dev/null","sourceNew":"  // Proxy this request to a different remote node if 'node' parameter is provided\n  public static boolean maybeProxyToNodes(SolrQueryRequest req, SolrQueryResponse rsp, CoreContainer container)\n      throws IOException, SolrServerException, InterruptedException {\n    String nodeNames = req.getParams().get(PARAM_NODES);\n    if (nodeNames == null || nodeNames.isEmpty()) {\n      return false; // local request\n    }\n\n    if (!container.isZooKeeperAware()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Parameter \" + PARAM_NODES + \" only supported in Cloud mode\");\n    }\n    \n    Set<String> nodes;\n    String pathStr = req.getPath();\n    \n    Map<String,String> paramsMap = req.getParams().toMap(new HashMap<>());\n    paramsMap.remove(PARAM_NODES);\n    SolrParams params = new MapSolrParams(paramsMap);\n    Set<String> liveNodes = container.getZkController().zkStateReader.getClusterState().getLiveNodes();\n    \n    if (nodeNames.equals(\"all\")) {\n      nodes = liveNodes;\n      log.debug(\"All live nodes requested\");\n    } else {\n      nodes = new HashSet<>(Arrays.asList(nodeNames.split(\",\")));\n      for (String nodeName : nodes) {\n        if (!nodeName.matches(\"^[^/:]+:\\\\d+_[\\\\w/]+$\")) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Parameter \" + PARAM_NODES + \" has wrong format\");\n        }\n\n        if (!liveNodes.contains(nodeName)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Requested node \" + nodeName + \" is not part of cluster\");\n        }\n      }       \n      log.debug(\"Nodes requested: {}\", nodes);\n    }\n    log.debug(PARAM_NODES + \" parameter {} specified on {} request\", nodeNames, pathStr);\n    \n    Map<String, Pair<Future<NamedList<Object>>, SolrClient>> responses = new HashMap<>();\n    for (String node : nodes) {\n      responses.put(node, callRemoteNode(node, pathStr, params, container.getZkController()));\n    }\n    \n    for (Map.Entry<String, Pair<Future<NamedList<Object>>, SolrClient>> entry : responses.entrySet()) {\n      try {\n        NamedList<Object> resp = entry.getValue().first().get(10, TimeUnit.SECONDS);\n        entry.getValue().second().close();\n        rsp.add(entry.getKey(), resp);\n      } catch (ExecutionException ee) {\n        log.warn(\"Exception when fetching result from node {}\", entry.getKey(), ee);\n      } catch (TimeoutException te) {\n        log.warn(\"Timeout when fetching result from node {}\", entry.getKey(), te);\n      }\n    }\n    log.info(\"Fetched response from {} nodes: {}\", responses.keySet().size(), responses.keySet());\n    return true;\n  } \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/AdminHandlersProxy#maybeProxyToNodes(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/AdminHandlersProxy#maybeProxyToNodes(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","sourceNew":"  // Proxy this request to a different remote node if 'node' parameter is provided\n  public static boolean maybeProxyToNodes(SolrQueryRequest req, SolrQueryResponse rsp, CoreContainer container)\n      throws IOException, SolrServerException, InterruptedException {\n    String nodeNames = req.getParams().get(PARAM_NODES);\n    if (nodeNames == null || nodeNames.isEmpty()) {\n      return false; // local request\n    }\n\n    if (!container.isZooKeeperAware()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Parameter \" + PARAM_NODES + \" only supported in Cloud mode\");\n    }\n    \n    Set<String> nodes;\n    String pathStr = req.getPath();\n    \n    Map<String,String> paramsMap = req.getParams().toMap(new HashMap<>());\n    paramsMap.remove(PARAM_NODES);\n    SolrParams params = new MapSolrParams(paramsMap);\n    Set<String> liveNodes = container.getZkController().zkStateReader.getClusterState().getLiveNodes();\n    \n    if (nodeNames.equals(\"all\")) {\n      nodes = liveNodes;\n      log.debug(\"All live nodes requested\");\n    } else {\n      nodes = new HashSet<>(Arrays.asList(nodeNames.split(\",\")));\n      for (String nodeName : nodes) {\n        if (!nodeName.matches(\"^[^/:]+:\\\\d+_[\\\\w/]+$\")) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Parameter \" + PARAM_NODES + \" has wrong format\");\n        }\n\n        if (!liveNodes.contains(nodeName)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Requested node \" + nodeName + \" is not part of cluster\");\n        }\n      }       \n      log.debug(\"Nodes requested: {}\", nodes);\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"{} parameter {} specified on {} request\", PARAM_NODES, nodeNames, pathStr);\n    }\n    \n    Map<String, Pair<Future<NamedList<Object>>, SolrClient>> responses = new HashMap<>();\n    for (String node : nodes) {\n      responses.put(node, callRemoteNode(node, pathStr, params, container.getZkController()));\n    }\n    \n    for (Map.Entry<String, Pair<Future<NamedList<Object>>, SolrClient>> entry : responses.entrySet()) {\n      try {\n        NamedList<Object> resp = entry.getValue().first().get(10, TimeUnit.SECONDS);\n        entry.getValue().second().close();\n        rsp.add(entry.getKey(), resp);\n      } catch (ExecutionException ee) {\n        log.warn(\"Exception when fetching result from node {}\", entry.getKey(), ee);\n      } catch (TimeoutException te) {\n        log.warn(\"Timeout when fetching result from node {}\", entry.getKey(), te);\n      }\n    }\n    if (log.isInfoEnabled()) {\n      log.info(\"Fetched response from {} nodes: {}\", responses.keySet().size(), responses.keySet());\n    }\n    return true;\n  } \n\n","sourceOld":"  // Proxy this request to a different remote node if 'node' parameter is provided\n  public static boolean maybeProxyToNodes(SolrQueryRequest req, SolrQueryResponse rsp, CoreContainer container)\n      throws IOException, SolrServerException, InterruptedException {\n    String nodeNames = req.getParams().get(PARAM_NODES);\n    if (nodeNames == null || nodeNames.isEmpty()) {\n      return false; // local request\n    }\n\n    if (!container.isZooKeeperAware()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Parameter \" + PARAM_NODES + \" only supported in Cloud mode\");\n    }\n    \n    Set<String> nodes;\n    String pathStr = req.getPath();\n    \n    Map<String,String> paramsMap = req.getParams().toMap(new HashMap<>());\n    paramsMap.remove(PARAM_NODES);\n    SolrParams params = new MapSolrParams(paramsMap);\n    Set<String> liveNodes = container.getZkController().zkStateReader.getClusterState().getLiveNodes();\n    \n    if (nodeNames.equals(\"all\")) {\n      nodes = liveNodes;\n      log.debug(\"All live nodes requested\");\n    } else {\n      nodes = new HashSet<>(Arrays.asList(nodeNames.split(\",\")));\n      for (String nodeName : nodes) {\n        if (!nodeName.matches(\"^[^/:]+:\\\\d+_[\\\\w/]+$\")) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Parameter \" + PARAM_NODES + \" has wrong format\");\n        }\n\n        if (!liveNodes.contains(nodeName)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Requested node \" + nodeName + \" is not part of cluster\");\n        }\n      }       \n      log.debug(\"Nodes requested: {}\", nodes);\n    }\n    log.debug(PARAM_NODES + \" parameter {} specified on {} request\", nodeNames, pathStr);\n    \n    Map<String, Pair<Future<NamedList<Object>>, SolrClient>> responses = new HashMap<>();\n    for (String node : nodes) {\n      responses.put(node, callRemoteNode(node, pathStr, params, container.getZkController()));\n    }\n    \n    for (Map.Entry<String, Pair<Future<NamedList<Object>>, SolrClient>> entry : responses.entrySet()) {\n      try {\n        NamedList<Object> resp = entry.getValue().first().get(10, TimeUnit.SECONDS);\n        entry.getValue().second().close();\n        rsp.add(entry.getKey(), resp);\n      } catch (ExecutionException ee) {\n        log.warn(\"Exception when fetching result from node {}\", entry.getKey(), ee);\n      } catch (TimeoutException te) {\n        log.warn(\"Timeout when fetching result from node {}\", entry.getKey(), te);\n      }\n    }\n    log.info(\"Fetched response from {} nodes: {}\", responses.keySet().size(), responses.keySet());\n    return true;\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/AdminHandlersProxy#maybeProxyToNodes(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/AdminHandlersProxy#maybeProxyToNodes(SolrQueryRequest,SolrQueryResponse,CoreContainer).mjava","sourceNew":"  // Proxy this request to a different remote node if 'node' parameter is provided\n  public static boolean maybeProxyToNodes(SolrQueryRequest req, SolrQueryResponse rsp, CoreContainer container)\n      throws IOException, SolrServerException, InterruptedException {\n    String nodeNames = req.getParams().get(PARAM_NODES);\n    if (nodeNames == null || nodeNames.isEmpty()) {\n      return false; // local request\n    }\n\n    if (!container.isZooKeeperAware()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Parameter \" + PARAM_NODES + \" only supported in Cloud mode\");\n    }\n    \n    Set<String> nodes;\n    String pathStr = req.getPath();\n    \n    @SuppressWarnings({\"unchecked\"})\n    Map<String,String> paramsMap = req.getParams().toMap(new HashMap<>());\n    paramsMap.remove(PARAM_NODES);\n    SolrParams params = new MapSolrParams(paramsMap);\n    Set<String> liveNodes = container.getZkController().zkStateReader.getClusterState().getLiveNodes();\n    \n    if (nodeNames.equals(\"all\")) {\n      nodes = liveNodes;\n      log.debug(\"All live nodes requested\");\n    } else {\n      nodes = new HashSet<>(Arrays.asList(nodeNames.split(\",\")));\n      for (String nodeName : nodes) {\n        if (!nodeName.matches(\"^[^/:]+:\\\\d+_[\\\\w/]+$\")) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Parameter \" + PARAM_NODES + \" has wrong format\");\n        }\n\n        if (!liveNodes.contains(nodeName)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Requested node \" + nodeName + \" is not part of cluster\");\n        }\n      }       \n      log.debug(\"Nodes requested: {}\", nodes);\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"{} parameter {} specified on {} request\", PARAM_NODES, nodeNames, pathStr);\n    }\n    \n    Map<String, Pair<Future<NamedList<Object>>, SolrClient>> responses = new HashMap<>();\n    for (String node : nodes) {\n      responses.put(node, callRemoteNode(node, pathStr, params, container.getZkController()));\n    }\n    \n    for (Map.Entry<String, Pair<Future<NamedList<Object>>, SolrClient>> entry : responses.entrySet()) {\n      try {\n        NamedList<Object> resp = entry.getValue().first().get(10, TimeUnit.SECONDS);\n        entry.getValue().second().close();\n        rsp.add(entry.getKey(), resp);\n      } catch (ExecutionException ee) {\n        log.warn(\"Exception when fetching result from node {}\", entry.getKey(), ee);\n      } catch (TimeoutException te) {\n        log.warn(\"Timeout when fetching result from node {}\", entry.getKey(), te);\n      }\n    }\n    if (log.isInfoEnabled()) {\n      log.info(\"Fetched response from {} nodes: {}\", responses.keySet().size(), responses.keySet());\n    }\n    return true;\n  } \n\n","sourceOld":"  // Proxy this request to a different remote node if 'node' parameter is provided\n  public static boolean maybeProxyToNodes(SolrQueryRequest req, SolrQueryResponse rsp, CoreContainer container)\n      throws IOException, SolrServerException, InterruptedException {\n    String nodeNames = req.getParams().get(PARAM_NODES);\n    if (nodeNames == null || nodeNames.isEmpty()) {\n      return false; // local request\n    }\n\n    if (!container.isZooKeeperAware()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Parameter \" + PARAM_NODES + \" only supported in Cloud mode\");\n    }\n    \n    Set<String> nodes;\n    String pathStr = req.getPath();\n    \n    Map<String,String> paramsMap = req.getParams().toMap(new HashMap<>());\n    paramsMap.remove(PARAM_NODES);\n    SolrParams params = new MapSolrParams(paramsMap);\n    Set<String> liveNodes = container.getZkController().zkStateReader.getClusterState().getLiveNodes();\n    \n    if (nodeNames.equals(\"all\")) {\n      nodes = liveNodes;\n      log.debug(\"All live nodes requested\");\n    } else {\n      nodes = new HashSet<>(Arrays.asList(nodeNames.split(\",\")));\n      for (String nodeName : nodes) {\n        if (!nodeName.matches(\"^[^/:]+:\\\\d+_[\\\\w/]+$\")) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Parameter \" + PARAM_NODES + \" has wrong format\");\n        }\n\n        if (!liveNodes.contains(nodeName)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Requested node \" + nodeName + \" is not part of cluster\");\n        }\n      }       \n      log.debug(\"Nodes requested: {}\", nodes);\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"{} parameter {} specified on {} request\", PARAM_NODES, nodeNames, pathStr);\n    }\n    \n    Map<String, Pair<Future<NamedList<Object>>, SolrClient>> responses = new HashMap<>();\n    for (String node : nodes) {\n      responses.put(node, callRemoteNode(node, pathStr, params, container.getZkController()));\n    }\n    \n    for (Map.Entry<String, Pair<Future<NamedList<Object>>, SolrClient>> entry : responses.entrySet()) {\n      try {\n        NamedList<Object> resp = entry.getValue().first().get(10, TimeUnit.SECONDS);\n        entry.getValue().second().close();\n        rsp.add(entry.getKey(), resp);\n      } catch (ExecutionException ee) {\n        log.warn(\"Exception when fetching result from node {}\", entry.getKey(), ee);\n      } catch (TimeoutException te) {\n        log.warn(\"Timeout when fetching result from node {}\", entry.getKey(), te);\n      }\n    }\n    if (log.isInfoEnabled()) {\n      log.info(\"Fetched response from {} nodes: {}\", responses.keySet().size(), responses.keySet());\n    }\n    return true;\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba055e19afc289adcb5bedaf68513793a7254012":["575e66bd4b2349209027f6801184da7fc3cba13f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["750239682d222924398443d581163940f48d68fc"],"750239682d222924398443d581163940f48d68fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba055e19afc289adcb5bedaf68513793a7254012"]},"commit2Childs":{"ba055e19afc289adcb5bedaf68513793a7254012":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["750239682d222924398443d581163940f48d68fc"],"575e66bd4b2349209027f6801184da7fc3cba13f":["ba055e19afc289adcb5bedaf68513793a7254012"],"750239682d222924398443d581163940f48d68fc":["575e66bd4b2349209027f6801184da7fc3cba13f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}