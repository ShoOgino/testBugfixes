{"path":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","commits":[{"id":"1c001b73abaf2c7481f219514cc5e9e953c760b4","date":1256724383,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 2500 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    IndexReader r = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    StringIndex idx = FieldCache.DEFAULT.getStringIndex(r, \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(10000, maxDoc);\n    for(int i=0;i<10000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.lookup[idx.order[i]]);\n    }\n    r.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90cb6b3f4e5652555b614adc90204287fbebd27c","date":1259494272,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","sourceNew":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    IndexReader r = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    StringIndex idx = FieldCache.DEFAULT.getStringIndex(r, \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.lookup[idx.order[i]]);\n    }\n    r.close();\n  }\n\n","sourceOld":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 2500 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    IndexReader r = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    StringIndex idx = FieldCache.DEFAULT.getStringIndex(r, \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(10000, maxDoc);\n    for(int i=0;i<10000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.lookup[idx.order[i]]);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testDocMakerThreadSafety().mjava","sourceNew":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    IndexReader r = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    StringIndex idx = FieldCache.DEFAULT.getStringIndex(r, \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.lookup[idx.order[i]]);\n    }\n    r.close();\n  }\n\n","sourceOld":"  // LUCENE-1994: test thread safety of SortableSingleDocMaker\n  public void testDocMakerThreadSafety() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource\",\n        \"doc.term.vector=false\",\n        \"log.step.AddDoc=10000\",\n        \"content.source.forever=true\",\n        \"directory=RAMDirectory\",\n        \"doc.reuse.fields=false\",\n        \"doc.stored=false\",\n        \"doc.tokenized=false\",\n        \"doc.index.props=true\",\n        \"# ----- alg \",\n        \"CreateIndex\",\n        \"[ { AddDoc > : 250 ] : 4\",\n        \"CloseIndex\",\n    };\n    \n    // 2. we test this value later\n    CountingSearchTestTask.numSearches = 0;\n    \n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    IndexReader r = IndexReader.open(benchmark.getRunData().getDirectory(), true);\n    StringIndex idx = FieldCache.DEFAULT.getStringIndex(r, \"country\");\n    final int maxDoc = r.maxDoc();\n    assertEquals(1000, maxDoc);\n    for(int i=0;i<1000;i++) {\n      assertNotNull(\"doc \" + i + \" has null country\", idx.lookup[idx.order[i]]);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90cb6b3f4e5652555b614adc90204287fbebd27c":["1c001b73abaf2c7481f219514cc5e9e953c760b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1c001b73abaf2c7481f219514cc5e9e953c760b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90cb6b3f4e5652555b614adc90204287fbebd27c"]},"commit2Childs":{"90cb6b3f4e5652555b614adc90204287fbebd27c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1c001b73abaf2c7481f219514cc5e9e953c760b4"],"1c001b73abaf2c7481f219514cc5e9e953c760b4":["90cb6b3f4e5652555b614adc90204287fbebd27c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}