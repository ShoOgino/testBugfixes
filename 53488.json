{"path":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowWithEmpty().mjava","commits":[{"id":"044244fb346dc6965d217fce709880d0e3bc2e9f","date":1343347260,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowWithEmpty().mjava","pathOld":"/dev/null","sourceNew":"  public void testFlowWithEmpty() throws Exception {\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n    \n    init(\"empty_flow\");\n\n    // solr.xml\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, EMPTY_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // ----\n    // init the CoreContainer\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (Exception e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getMessage(),\n                 0 < e.getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n    // let the test end here, with some recorded failures, and let cleanUp()\n    // verify that there is no problem shuting down CoreContainer with known \n    // SolrCore failures\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowWithEmpty().mjava","pathOld":"/dev/null","sourceNew":"  public void testFlowWithEmpty() throws Exception {\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n    \n    init(\"empty_flow\");\n\n    // solr.xml\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, EMPTY_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // ----\n    // init the CoreContainer\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (Exception e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getMessage(),\n                 0 < e.getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n    // let the test end here, with some recorded failures, and let cleanUp()\n    // verify that there is no problem shuting down CoreContainer with known \n    // SolrCore failures\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowWithEmpty().mjava","pathOld":"/dev/null","sourceNew":"  public void testFlowWithEmpty() throws Exception {\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n    \n    init(\"empty_flow\");\n\n    // solr.xml\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, EMPTY_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // ----\n    // init the CoreContainer\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (Exception e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getMessage(),\n                 0 < e.getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n    // let the test end here, with some recorded failures, and let cleanUp()\n    // verify that there is no problem shuting down CoreContainer with known \n    // SolrCore failures\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4d5fc8284faca306256427bbbb86017a32002cf","date":1347055110,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowWithEmpty().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowWithEmpty().mjava","sourceNew":"  public void testFlowWithEmpty() throws Exception {\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n    \n    init(\"empty_flow\");\n\n    // solr.xml\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, EMPTY_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // ----\n    // init the CoreContainer\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (Exception e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getMessage(),\n                 0 < e.getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n    // let the test end here, with some recorded failures, and let cleanUp()\n    // verify that there is no problem shuting down CoreContainer with known \n    // SolrCore failures\n  }\n\n","sourceOld":"  public void testFlowWithEmpty() throws Exception {\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n    \n    init(\"empty_flow\");\n\n    // solr.xml\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, EMPTY_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // ----\n    // init the CoreContainer\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (Exception e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getMessage(),\n                 0 < e.getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n    // let the test end here, with some recorded failures, and let cleanUp()\n    // verify that there is no problem shuting down CoreContainer with known \n    // SolrCore failures\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b374d78db8148ec6796fdf37148b33897ab40a8c","date":1351606544,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowWithEmpty().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowWithEmpty().mjava","sourceNew":"  public void testFlowWithEmpty() throws Exception {\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n    \n    init(\"empty_flow\");\n\n    // solr.xml\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, EMPTY_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // ----\n    // init the CoreContainer\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // let the test end here, with some recorded failures, and let cleanUp()\n    // verify that there is no problem shuting down CoreContainer with known \n    // SolrCore failures\n  }\n\n","sourceOld":"  public void testFlowWithEmpty() throws Exception {\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n    \n    init(\"empty_flow\");\n\n    // solr.xml\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, EMPTY_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // ----\n    // init the CoreContainer\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (Exception e) {\n      // :TODO: should really tighten up the exceptions CoreContainer throws (ie: just SolrException)\n      \n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getMessage(),\n                 0 < e.getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n    // let the test end here, with some recorded failures, and let cleanUp()\n    // verify that there is no problem shuting down CoreContainer with known \n    // SolrCore failures\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab17cf116fd02ca93b83a5e65b242da418ec1181","date":1365450976,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowWithEmpty().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowWithEmpty().mjava","sourceNew":"  public void testFlowWithEmpty() throws Exception {\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n    \n    init(\"empty_flow\");\n\n    // solr.xml\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, EMPTY_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // ----\n    // init the CoreContainer\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n      \n    }\n\n    // let the test end here, with some recorded failures, and let cleanUp()\n    // verify that there is no problem shuting down CoreContainer with known \n    // SolrCore failures\n  }\n\n","sourceOld":"  public void testFlowWithEmpty() throws Exception {\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n    \n    init(\"empty_flow\");\n\n    // solr.xml\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, EMPTY_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // ----\n    // init the CoreContainer\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // let the test end here, with some recorded failures, and let cleanUp()\n    // verify that there is no problem shuting down CoreContainer with known \n    // SolrCore failures\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d264f386d864b5751209060e8886ca9845f70469","date":1372172126,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowWithEmpty().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowWithEmpty().mjava","sourceNew":"  public void testFlowWithEmpty() throws Exception {\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"empty_flow\");\n\n    // solr.xml\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, EMPTY_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // ----\n    // init the CoreContainer\n    cc = new CoreContainer(solrHome.getAbsolutePath());\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n      \n    }\n\n    // let the test end here, with some recorded failures, and let cleanUp()\n    // verify that there is no problem shuting down CoreContainer with known \n    // SolrCore failures\n  }\n\n","sourceOld":"  public void testFlowWithEmpty() throws Exception {\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n    \n    init(\"empty_flow\");\n\n    // solr.xml\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, EMPTY_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // ----\n    // init the CoreContainer\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n      \n    }\n\n    // let the test end here, with some recorded failures, and let cleanUp()\n    // verify that there is no problem shuting down CoreContainer with known \n    // SolrCore failures\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"354983dcdf70c800bf2573d10b54a7391b1dc167","date":1372183171,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowWithEmpty().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowWithEmpty().mjava","sourceNew":"  public void testFlowWithEmpty() throws Exception {\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n    \n    init(\"empty_flow\");\n\n    // solr.xml\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, EMPTY_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // ----\n    // init the CoreContainer\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n      \n    }\n\n    // let the test end here, with some recorded failures, and let cleanUp()\n    // verify that there is no problem shuting down CoreContainer with known \n    // SolrCore failures\n  }\n\n","sourceOld":"  public void testFlowWithEmpty() throws Exception {\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"empty_flow\");\n\n    // solr.xml\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, EMPTY_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // ----\n    // init the CoreContainer\n    cc = new CoreContainer(solrHome.getAbsolutePath());\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n      \n    }\n\n    // let the test end here, with some recorded failures, and let cleanUp()\n    // verify that there is no problem shuting down CoreContainer with known \n    // SolrCore failures\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7116474e2e390259937401cf928323e0cbc75e60","date":1372780249,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowWithEmpty().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowWithEmpty().mjava","sourceNew":"  public void testFlowWithEmpty() throws Exception {\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"empty_flow\");\n\n    // solr.xml\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, EMPTY_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // ----\n    // init the CoreContainer\n    cc = new CoreContainer(solrHome.getAbsolutePath());\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n      \n    }\n\n    // let the test end here, with some recorded failures, and let cleanUp()\n    // verify that there is no problem shuting down CoreContainer with known \n    // SolrCore failures\n  }\n\n","sourceOld":"  public void testFlowWithEmpty() throws Exception {\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n    \n    init(\"empty_flow\");\n\n    // solr.xml\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, EMPTY_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // ----\n    // init the CoreContainer\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n      \n    }\n\n    // let the test end here, with some recorded failures, and let cleanUp()\n    // verify that there is no problem shuting down CoreContainer with known \n    // SolrCore failures\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowWithEmpty().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowWithEmpty().mjava","sourceNew":"  public void testFlowWithEmpty() throws Exception {\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"empty_flow\");\n\n    // solr.xml\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, EMPTY_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // ----\n    // init the CoreContainer\n    cc = new CoreContainer(solrHome.getAbsolutePath());\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n      \n    }\n\n    // let the test end here, with some recorded failures, and let cleanUp()\n    // verify that there is no problem shuting down CoreContainer with known \n    // SolrCore failures\n  }\n\n","sourceOld":"  public void testFlowWithEmpty() throws Exception {\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n    \n    init(\"empty_flow\");\n\n    // solr.xml\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, EMPTY_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // ----\n    // init the CoreContainer\n    cc.load(solrHome.getAbsolutePath(), solrXml);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n      \n    }\n\n    // let the test end here, with some recorded failures, and let cleanUp()\n    // verify that there is no problem shuting down CoreContainer with known \n    // SolrCore failures\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowWithEmpty().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowWithEmpty().mjava","sourceNew":"  public void testFlowWithEmpty() throws Exception {\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"empty_flow\");\n\n    // solr.xml\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, EMPTY_SOLR_XML, IOUtils.UTF_8);\n\n    // ----\n    // init the CoreContainer\n    cc = new CoreContainer(solrHome.getAbsolutePath());\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n      \n    }\n\n    // let the test end here, with some recorded failures, and let cleanUp()\n    // verify that there is no problem shuting down CoreContainer with known \n    // SolrCore failures\n  }\n\n","sourceOld":"  public void testFlowWithEmpty() throws Exception {\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"empty_flow\");\n\n    // solr.xml\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, EMPTY_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // ----\n    // init the CoreContainer\n    cc = new CoreContainer(solrHome.getAbsolutePath());\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n      \n    }\n\n    // let the test end here, with some recorded failures, and let cleanUp()\n    // verify that there is no problem shuting down CoreContainer with known \n    // SolrCore failures\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowWithEmpty().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowWithEmpty().mjava","sourceNew":"  public void testFlowWithEmpty() throws Exception {\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"empty_flow\");\n\n    // solr.xml\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, EMPTY_SOLR_XML, IOUtils.UTF_8);\n\n    // ----\n    // init the CoreContainer\n    cc = new CoreContainer(solrHome.getAbsolutePath());\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n      \n    }\n\n    // let the test end here, with some recorded failures, and let cleanUp()\n    // verify that there is no problem shuting down CoreContainer with known \n    // SolrCore failures\n  }\n\n","sourceOld":"  public void testFlowWithEmpty() throws Exception {\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"empty_flow\");\n\n    // solr.xml\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, EMPTY_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n\n    // ----\n    // init the CoreContainer\n    cc = new CoreContainer(solrHome.getAbsolutePath());\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n      \n    }\n\n    // let the test end here, with some recorded failures, and let cleanUp()\n    // verify that there is no problem shuting down CoreContainer with known \n    // SolrCore failures\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d629ca62e3b8ab6e29a127aebe213163d490413","date":1405524223,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowWithEmpty().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowWithEmpty().mjava","sourceNew":"  public void testFlowWithEmpty() throws Exception {\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"empty_flow\");\n\n    // solr.xml\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, EMPTY_SOLR_XML, IOUtils.UTF_8);\n\n    // ----\n    // init the CoreContainer\n    cc = new CoreContainer(solrHome.getAbsolutePath());\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n      \n    }\n\n    // let the test end here, with some recorded failures, and let cleanUp()\n    // verify that there is no problem shuting down CoreContainer with known \n    // SolrCore failures\n  }\n\n","sourceOld":"  public void testFlowWithEmpty() throws Exception {\n    // reused state\n    Map<String,Exception> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"empty_flow\");\n\n    // solr.xml\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, EMPTY_SOLR_XML, IOUtils.UTF_8);\n\n    // ----\n    // init the CoreContainer\n    cc = new CoreContainer(solrHome.getAbsolutePath());\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\");\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n      \n    }\n\n    // let the test end here, with some recorded failures, and let cleanUp()\n    // verify that there is no problem shuting down CoreContainer with known \n    // SolrCore failures\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresFromEmptyContainer().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowWithEmpty().mjava","sourceNew":"  @Test\n  public void testCoreInitFailuresFromEmptyContainer() throws Exception {\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    // ----\n    // init the CoreContainer\n    CoreContainer cc = init(CONFIGSETS_SOLR_XML);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n          0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n\n    }\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n        0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"bogus_path\"));\n\n    }\n\n    cc.shutdown();\n  }\n\n","sourceOld":"  public void testFlowWithEmpty() throws Exception {\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"empty_flow\");\n\n    // solr.xml\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, EMPTY_SOLR_XML, IOUtils.UTF_8);\n\n    // ----\n    // init the CoreContainer\n    cc = new CoreContainer(solrHome.getAbsolutePath());\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 0, cores.size());\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n      \n    }\n\n    // let the test end here, with some recorded failures, and let cleanUp()\n    // verify that there is no problem shuting down CoreContainer with known \n    // SolrCore failures\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["7116474e2e390259937401cf928323e0cbc75e60","7d89d7e4e5101347833eea558851bf4209218619"],"7116474e2e390259937401cf928323e0cbc75e60":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["ab17cf116fd02ca93b83a5e65b242da418ec1181","7116474e2e390259937401cf928323e0cbc75e60"],"354983dcdf70c800bf2573d10b54a7391b1dc167":["d264f386d864b5751209060e8886ca9845f70469"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["2d629ca62e3b8ab6e29a127aebe213163d490413"],"d264f386d864b5751209060e8886ca9845f70469":["ab17cf116fd02ca93b83a5e65b242da418ec1181"],"7d89d7e4e5101347833eea558851bf4209218619":["7116474e2e390259937401cf928323e0cbc75e60"],"044244fb346dc6965d217fce709880d0e3bc2e9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e4d5fc8284faca306256427bbbb86017a32002cf":["044244fb346dc6965d217fce709880d0e3bc2e9f"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","044244fb346dc6965d217fce709880d0e3bc2e9f"],"ab17cf116fd02ca93b83a5e65b242da418ec1181":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","044244fb346dc6965d217fce709880d0e3bc2e9f"],"2d629ca62e3b8ab6e29a127aebe213163d490413":["7d89d7e4e5101347833eea558851bf4209218619"],"b374d78db8148ec6796fdf37148b33897ab40a8c":["e4d5fc8284faca306256427bbbb86017a32002cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"7116474e2e390259937401cf928323e0cbc75e60":["5eb2511ababf862ea11e10761c70ee560cd84510","37a0f60745e53927c4c876cfe5b5a58170f0646c","7d89d7e4e5101347833eea558851bf4209218619"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"354983dcdf70c800bf2573d10b54a7391b1dc167":["7116474e2e390259937401cf928323e0cbc75e60"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d264f386d864b5751209060e8886ca9845f70469":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","2d629ca62e3b8ab6e29a127aebe213163d490413"],"044244fb346dc6965d217fce709880d0e3bc2e9f":["e4d5fc8284faca306256427bbbb86017a32002cf","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"e4d5fc8284faca306256427bbbb86017a32002cf":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"ab17cf116fd02ca93b83a5e65b242da418ec1181":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d264f386d864b5751209060e8886ca9845f70469"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["044244fb346dc6965d217fce709880d0e3bc2e9f","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"2d629ca62e3b8ab6e29a127aebe213163d490413":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"b374d78db8148ec6796fdf37148b33897ab40a8c":["ab17cf116fd02ca93b83a5e65b242da418ec1181"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","37a0f60745e53927c4c876cfe5b5a58170f0646c","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}