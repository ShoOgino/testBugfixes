{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testSortedTermsEnum().mjava","commits":[{"id":"5c2b6033d1fc841b41dbf56c765ce3dc053ecba6","date":1363054647,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testSortedTermsEnum().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"hello\")));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"world\")));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"beer\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    SortedDocValues dv = getOnlySegmentReader(ireader).getSortedDocValues(\"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\"), true));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\"), true));\n    assertEquals(Codec.getDefault().toString(), \"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\"), true));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\"), true));\n\n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testSortedTermsEnum().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"hello\")));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"world\")));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"beer\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    SortedDocValues dv = getOnlySegmentReader(ireader).getSortedDocValues(\"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(Codec.getDefault().toString(), \"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n\n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"hello\")));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"world\")));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"beer\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    SortedDocValues dv = getOnlySegmentReader(ireader).getSortedDocValues(\"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\"), true));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\"), true));\n    assertEquals(Codec.getDefault().toString(), \"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\"), true));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\"), true));\n\n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testSortedTermsEnum().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"hello\")));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"world\")));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"beer\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    SortedDocValues dv = getOnlySegmentReader(ireader).getSortedDocValues(\"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(Codec.getDefault().toString(), \"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n\n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"hello\")));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"world\")));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"beer\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    SortedDocValues dv = getOnlySegmentReader(ireader).getSortedDocValues(\"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\"), true));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\"), true));\n    assertEquals(Codec.getDefault().toString(), \"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\"), true));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\"), true));\n\n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testSortedTermsEnum().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"hello\")));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"world\")));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"beer\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.shutdown();\n\n    SortedDocValues dv = getOnlySegmentReader(ireader).getSortedDocValues(\"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(Codec.getDefault().toString(), \"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n\n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"hello\")));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"world\")));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"beer\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    SortedDocValues dv = getOnlySegmentReader(ireader).getSortedDocValues(\"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(Codec.getDefault().toString(), \"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n\n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testSortedTermsEnum().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"hello\")));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"world\")));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"beer\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.shutdown();\n\n    SortedDocValues dv = getOnlySegmentReader(ireader).getSortedDocValues(\"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(Codec.getDefault().toString(), \"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n\n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"hello\")));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"world\")));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"beer\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.shutdown();\n\n    SortedDocValues dv = getOnlySegmentReader(ireader).getSortedDocValues(\"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(Codec.getDefault().toString(), \"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n\n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testSortedTermsEnum().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"hello\")));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"world\")));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"beer\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    SortedDocValues dv = getOnlySegmentReader(ireader).getSortedDocValues(\"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(Codec.getDefault().toString(), \"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n\n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"hello\")));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"world\")));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"beer\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.shutdown();\n\n    SortedDocValues dv = getOnlySegmentReader(ireader).getSortedDocValues(\"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(Codec.getDefault().toString(), \"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n\n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","date":1408030244,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testSortedTermsEnum().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"hello\")));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"world\")));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"beer\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    SortedDocValues dv = getOnlySegmentReader(ireader).getSortedDocValues(\"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"aba\")));\n    assertEquals(0, termsEnum.ord());\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(Codec.getDefault().toString(), \"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n\n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"hello\")));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"world\")));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"beer\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    SortedDocValues dv = getOnlySegmentReader(ireader).getSortedDocValues(\"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(Codec.getDefault().toString(), \"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n\n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testSortedTermsEnum().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"hello\")));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"world\")));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"beer\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    SortedDocValues dv = getOnlyLeafReader(ireader).getSortedDocValues(\"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"aba\")));\n    assertEquals(0, termsEnum.ord());\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(Codec.getDefault().toString(), \"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n\n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"hello\")));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"world\")));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"beer\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    SortedDocValues dv = getOnlySegmentReader(ireader).getSortedDocValues(\"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"aba\")));\n    assertEquals(0, termsEnum.ord());\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(Codec.getDefault().toString(), \"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n\n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":["5c2b6033d1fc841b41dbf56c765ce3dc053ecba6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a572f3e71817a604c36596e322a5406bc93667cd","date":1484386819,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testSortedTermsEnum().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"hello\")));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"world\")));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"beer\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    SortedDocValues dv = getOnlyLeafReader(ireader).getSortedDocValues(\"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"aba\")));\n    assertEquals(0, termsEnum.ord());\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(Codec.getDefault().toString(), \"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n\n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n\n    // NORMAL automaton\n    termsEnum = dv.intersect(new CompiledAutomaton(new RegExp(\".*l.*\").toAutomaton()));\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertNull(termsEnum.next());\n\n    // SINGLE automaton\n    termsEnum = dv.intersect(new CompiledAutomaton(new RegExp(\"hello\").toAutomaton()));\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertNull(termsEnum.next());\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"hello\")));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"world\")));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"beer\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    SortedDocValues dv = getOnlyLeafReader(ireader).getSortedDocValues(\"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"aba\")));\n    assertEquals(0, termsEnum.ord());\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(Codec.getDefault().toString(), \"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n\n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"507e7decdf00981d09a74632ea30299a4ce6ba72","date":1484600874,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testSortedTermsEnum().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testSortedTermsEnum().mjava","sourceNew":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"hello\")));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"world\")));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"beer\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    SortedDocValues dv = getOnlyLeafReader(ireader).getSortedDocValues(\"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"aba\")));\n    assertEquals(0, termsEnum.ord());\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(Codec.getDefault().toString(), \"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n\n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n\n    // NORMAL automaton\n    termsEnum = dv.intersect(new CompiledAutomaton(new RegExp(\".*l.*\").toAutomaton()));\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertNull(termsEnum.next());\n\n    // SINGLE automaton\n    termsEnum = dv.intersect(new CompiledAutomaton(new RegExp(\"hello\").toAutomaton()));\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertNull(termsEnum.next());\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSortedTermsEnum() throws IOException {\n    Directory directory = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);\n    iwconfig.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);\n    \n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"hello\")));\n    iwriter.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"world\")));\n    iwriter.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"field\", new BytesRef(\"beer\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    \n    DirectoryReader ireader = iwriter.getReader();\n    iwriter.close();\n\n    SortedDocValues dv = getOnlyLeafReader(ireader).getSortedDocValues(\"field\");\n    assertEquals(3, dv.getValueCount());\n    \n    TermsEnum termsEnum = dv.termsEnum();\n    \n    // next()\n    assertEquals(\"beer\", termsEnum.next().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(\"hello\", termsEnum.next().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(\"world\", termsEnum.next().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    \n    // seekCeil()\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"ha!\")));\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertEquals(SeekStatus.END, termsEnum.seekCeil(new BytesRef(\"zzz\")));\n    assertEquals(SeekStatus.NOT_FOUND, termsEnum.seekCeil(new BytesRef(\"aba\")));\n    assertEquals(0, termsEnum.ord());\n    \n    // seekExact()\n    assertTrue(termsEnum.seekExact(new BytesRef(\"beer\")));\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"hello\")));\n    assertEquals(Codec.getDefault().toString(), \"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    assertTrue(termsEnum.seekExact(new BytesRef(\"world\")));\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    assertFalse(termsEnum.seekExact(new BytesRef(\"bogus\")));\n\n    // seek(ord)\n    termsEnum.seekExact(0);\n    assertEquals(\"beer\", termsEnum.term().utf8ToString());\n    assertEquals(0, termsEnum.ord());\n    termsEnum.seekExact(1);\n    assertEquals(\"hello\", termsEnum.term().utf8ToString());\n    assertEquals(1, termsEnum.ord());\n    termsEnum.seekExact(2);\n    assertEquals(\"world\", termsEnum.term().utf8ToString());\n    assertEquals(2, termsEnum.ord());\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"5c2b6033d1fc841b41dbf56c765ce3dc053ecba6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a572f3e71817a604c36596e322a5406bc93667cd":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["5c2b6033d1fc841b41dbf56c765ce3dc053ecba6"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"507e7decdf00981d09a74632ea30299a4ce6ba72":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","a572f3e71817a604c36596e322a5406bc93667cd"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["5c2b6033d1fc841b41dbf56c765ce3dc053ecba6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a572f3e71817a604c36596e322a5406bc93667cd"]},"commit2Childs":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["a572f3e71817a604c36596e322a5406bc93667cd","507e7decdf00981d09a74632ea30299a4ce6ba72"],"5c2b6033d1fc841b41dbf56c765ce3dc053ecba6":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a572f3e71817a604c36596e322a5406bc93667cd":["507e7decdf00981d09a74632ea30299a4ce6ba72","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5c2b6033d1fc841b41dbf56c765ce3dc053ecba6"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"507e7decdf00981d09a74632ea30299a4ce6ba72":[],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","507e7decdf00981d09a74632ea30299a4ce6ba72","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}