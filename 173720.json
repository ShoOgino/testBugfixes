{"path":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie.Node#lookup(List[String],int,Map[String,String],Set[String]).mjava","commits":[{"id":"5174b677b2536f97776e6b67e8c10ae5c66e6fa2","date":1496916595,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie.Node#lookup(List[String],int,Map[String,String],Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/PathTrie.Node#lookup(List[String],int,Map[String,String],Set[String]).mjava","sourceNew":"    /**\n     *\n     * @param pathSegments pieces in the url /a/b/c has pieces as 'a' , 'b' , 'c'\n     * @param index current index of the pieces that we are looking at in /a/b/c 0='a' and 1='b'\n     * @param templateVariables The mapping of template variable to its value\n     * @param availableSubPaths If not null , available sub paths will be returned in this set\n     */\n    public T lookup(List<String> pathSegments, int index, Map<String, String> templateVariables, Set<String> availableSubPaths) {\n      if (templateName != null) templateVariables.put(templateName, pathSegments.get(index - 1));\n      if (pathSegments.size() < index + 1) {\n        findAvailableChildren(\"\", availableSubPaths);\n        return obj;\n      }\n      String piece = pathSegments.get(index);\n      if (children == null) return null;\n      Node n = children.get(piece);\n      if (n == null && !reserved.contains(piece)) n = children.get(\"\");\n      if (n == null) return null;\n      return n.lookup(pathSegments, index + 1, templateVariables, availableSubPaths);\n    }\n\n","sourceOld":"    /**\n     *\n     * @param pathSegments pieces in the url /a/b/c has pieces as 'a' , 'b' , 'c'\n     * @param index current index of the pieces that we are looking at in /a/b/c 0='a' and 1='b'\n     * @param templateVariables The mapping of template variable to its value\n     * @param availableSubPaths If not null , available sub paths will be returned in this set\n     */\n    public T lookup(List<String> pathSegments, int index, Map<String, String> templateVariables, Set<String> availableSubPaths) {\n      if (templateName != null) templateVariables.put(templateName, pathSegments.get(index - 1));\n      if (pathSegments.size() < index + 1) {\n        findAvailableChildren(\"\", availableSubPaths);\n        return obj;\n      }\n      String piece = pathSegments.get(index);\n      if (children == null) return null;\n      Node n = children.get(piece);\n      if (n == null && !reserved.contains(piece)) n = children.get(\"\");\n      if (n == null) return null;\n      return n.lookup(pathSegments, index + 1, templateVariables, availableSubPaths);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie.Node#lookup(List[String],int,Map[String,String],Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/PathTrie.Node#lookup(List[String],int,Map[String,String],Set[String]).mjava","sourceNew":"    /**\n     *\n     * @param pathSegments pieces in the url /a/b/c has pieces as 'a' , 'b' , 'c'\n     * @param index current index of the pieces that we are looking at in /a/b/c 0='a' and 1='b'\n     * @param templateVariables The mapping of template variable to its value\n     * @param availableSubPaths If not null , available sub paths will be returned in this set\n     */\n    public T lookup(List<String> pathSegments, int index, Map<String, String> templateVariables, Set<String> availableSubPaths) {\n      if (templateName != null) templateVariables.put(templateName, pathSegments.get(index - 1));\n      if (pathSegments.size() < index + 1) {\n        findAvailableChildren(\"\", availableSubPaths);\n        return obj;\n      }\n      String piece = pathSegments.get(index);\n      if (children == null) return null;\n      Node n = children.get(piece);\n      if (n == null && !reserved.contains(piece)) n = children.get(\"\");\n      if (n == null) return null;\n      return n.lookup(pathSegments, index + 1, templateVariables, availableSubPaths);\n    }\n\n","sourceOld":"    /**\n     *\n     * @param pathSegments pieces in the url /a/b/c has pieces as 'a' , 'b' , 'c'\n     * @param index current index of the pieces that we are looking at in /a/b/c 0='a' and 1='b'\n     * @param templateVariables The mapping of template variable to its value\n     * @param availableSubPaths If not null , available sub paths will be returned in this set\n     */\n    public T lookup(List<String> pathSegments, int index, Map<String, String> templateVariables, Set<String> availableSubPaths) {\n      if (templateName != null) templateVariables.put(templateName, pathSegments.get(index - 1));\n      if (pathSegments.size() < index + 1) {\n        findAvailableChildren(\"\", availableSubPaths);\n        return obj;\n      }\n      String piece = pathSegments.get(index);\n      if (children == null) return null;\n      Node n = children.get(piece);\n      if (n == null && !reserved.contains(piece)) n = children.get(\"\");\n      if (n == null) return null;\n      return n.lookup(pathSegments, index + 1, templateVariables, availableSubPaths);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie.Node#lookup(List[String],int,Map[String,String],Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/PathTrie.Node#lookup(List[String],int,Map[String,String],Set[String]).mjava","sourceNew":"    /**\n     *\n     * @param pathSegments pieces in the url /a/b/c has pieces as 'a' , 'b' , 'c'\n     * @param index current index of the pieces that we are looking at in /a/b/c 0='a' and 1='b'\n     * @param templateVariables The mapping of template variable to its value\n     * @param availableSubPaths If not null , available sub paths will be returned in this set\n     */\n    public T lookup(List<String> pathSegments, int index, Map<String, String> templateVariables, Set<String> availableSubPaths) {\n      if (templateName != null) templateVariables.put(templateName, pathSegments.get(index - 1));\n      if (pathSegments.size() < index + 1) {\n        findAvailableChildren(\"\", availableSubPaths);\n        return obj;\n      }\n      String piece = pathSegments.get(index);\n      if (children == null) return null;\n      Node n = children.get(piece);\n      if (n == null && !reserved.contains(piece)) n = children.get(\"\");\n      if (n == null) return null;\n      return n.lookup(pathSegments, index + 1, templateVariables, availableSubPaths);\n    }\n\n","sourceOld":"    /**\n     *\n     * @param pathSegments pieces in the url /a/b/c has pieces as 'a' , 'b' , 'c'\n     * @param index current index of the pieces that we are looking at in /a/b/c 0='a' and 1='b'\n     * @param templateVariables The mapping of template variable to its value\n     * @param availableSubPaths If not null , available sub paths will be returned in this set\n     */\n    public T lookup(List<String> pathSegments, int index, Map<String, String> templateVariables, Set<String> availableSubPaths) {\n      if (templateName != null) templateVariables.put(templateName, pathSegments.get(index - 1));\n      if (pathSegments.size() < index + 1) {\n        findAvailableChildren(\"\", availableSubPaths);\n        return obj;\n      }\n      String piece = pathSegments.get(index);\n      if (children == null) return null;\n      Node n = children.get(piece);\n      if (n == null && !reserved.contains(piece)) n = children.get(\"\");\n      if (n == null) return null;\n      return n.lookup(pathSegments, index + 1, templateVariables, availableSubPaths);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ba409fa7dec3437c7631ef2582c2ad91a8368b1","date":1570400397,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie.Node#lookup(List[String],int,Map[String,String],Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie.Node#lookup(List[String],int,Map[String,String],Set[String]).mjava","sourceNew":"    /**\n     * @param pathSegments      pieces in the url /a/b/c has pieces as 'a' , 'b' , 'c'\n     * @param index             current index of the pieces that we are looking at in /a/b/c 0='a' and 1='b'\n     * @param templateVariables The mapping of template variable to its value\n     * @param availableSubPaths If not null , available sub paths will be returned in this set\n     */\n    public T lookup(List<String> pathSegments, int index, Map<String, String> templateVariables, Set<String> availableSubPaths) {\n      if (templateName != null) templateVariables.put(templateName, pathSegments.get(index - 1));\n      if (pathSegments.size() < index + 1) {\n        findAvailableChildren(\"\", availableSubPaths);\n        if (obj == null) {//this is not a leaf node\n          Node n = children.get(\"*\");\n          if (n != null) {\n            return n.obj;\n          }\n\n        }\n        return obj;\n      }\n      String piece = pathSegments.get(index);\n      if (children == null) {\n        return null;\n      }\n      Node n = children.get(piece);\n      if (n == null && !reserved.contains(piece)) n = children.get(\"\");\n      if (n == null) {\n        n = children.get(\"*\");\n        if (n != null) {\n          StringBuffer sb = new StringBuffer();\n          for (int i = index; i < pathSegments.size(); i++) {\n            sb.append(\"/\").append(pathSegments.get(i));\n          }\n          templateVariables.put(\"*\", sb.toString());\n          return n.obj;\n\n        }\n      }\n      if (n == null) {\n        return null;\n      }\n      return n.lookup(pathSegments, index + 1, templateVariables, availableSubPaths);\n    }\n\n","sourceOld":"    /**\n     *\n     * @param pathSegments pieces in the url /a/b/c has pieces as 'a' , 'b' , 'c'\n     * @param index current index of the pieces that we are looking at in /a/b/c 0='a' and 1='b'\n     * @param templateVariables The mapping of template variable to its value\n     * @param availableSubPaths If not null , available sub paths will be returned in this set\n     */\n    public T lookup(List<String> pathSegments, int index, Map<String, String> templateVariables, Set<String> availableSubPaths) {\n      if (templateName != null) templateVariables.put(templateName, pathSegments.get(index - 1));\n      if (pathSegments.size() < index + 1) {\n        findAvailableChildren(\"\", availableSubPaths);\n        return obj;\n      }\n      String piece = pathSegments.get(index);\n      if (children == null) return null;\n      Node n = children.get(piece);\n      if (n == null && !reserved.contains(piece)) n = children.get(\"\");\n      if (n == null) return null;\n      return n.lookup(pathSegments, index + 1, templateVariables, availableSubPaths);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie.Node#lookup(List[String],int,Map[String,String],Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie.Node#lookup(List[String],int,Map[String,String],Set[String]).mjava","sourceNew":"    /**\n     * @param pathSegments      pieces in the url /a/b/c has pieces as 'a' , 'b' , 'c'\n     * @param index             current index of the pieces that we are looking at in /a/b/c 0='a' and 1='b'\n     * @param templateVariables The mapping of template variable to its value\n     * @param availableSubPaths If not null , available sub paths will be returned in this set\n     */\n    public T lookup(List<String> pathSegments, int index, Map<String, String> templateVariables, Set<String> availableSubPaths) {\n      if (templateName != null) templateVariables.put(templateName, pathSegments.get(index - 1));\n      if (pathSegments.size() < index + 1) {\n        findAvailableChildren(\"\", availableSubPaths);\n        if (obj == null) {//this is not a leaf node\n          Node n = children.get(\"*\");\n          if (n != null) {\n            return n.obj;\n          }\n\n        }\n        return obj;\n      }\n      String piece = pathSegments.get(index);\n      if (children == null) {\n        return null;\n      }\n      Node n = children.get(piece);\n      if (n == null && !reserved.contains(piece)) n = children.get(\"\");\n      if (n == null) {\n        n = children.get(\"*\");\n        if (n != null) {\n          StringBuffer sb = new StringBuffer();\n          for (int i = index; i < pathSegments.size(); i++) {\n            sb.append(\"/\").append(pathSegments.get(i));\n          }\n          templateVariables.put(\"*\", sb.toString());\n          return n.obj;\n\n        }\n      }\n      if (n == null) {\n        return null;\n      }\n      return n.lookup(pathSegments, index + 1, templateVariables, availableSubPaths);\n    }\n\n","sourceOld":"    /**\n     *\n     * @param pathSegments pieces in the url /a/b/c has pieces as 'a' , 'b' , 'c'\n     * @param index current index of the pieces that we are looking at in /a/b/c 0='a' and 1='b'\n     * @param templateVariables The mapping of template variable to its value\n     * @param availableSubPaths If not null , available sub paths will be returned in this set\n     */\n    public T lookup(List<String> pathSegments, int index, Map<String, String> templateVariables, Set<String> availableSubPaths) {\n      if (templateName != null) templateVariables.put(templateName, pathSegments.get(index - 1));\n      if (pathSegments.size() < index + 1) {\n        findAvailableChildren(\"\", availableSubPaths);\n        return obj;\n      }\n      String piece = pathSegments.get(index);\n      if (children == null) return null;\n      Node n = children.get(piece);\n      if (n == null && !reserved.contains(piece)) n = children.get(\"\");\n      if (n == null) return null;\n      return n.lookup(pathSegments, index + 1, templateVariables, availableSubPaths);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"650b520f2a4daa4b0712e2393dc29ae7f21f10ac","date":1593054531,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie.Node#lookup(List[String],int,Map[String,String],Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie.Node#lookup(List[String],int,Map[String,String],Set[String]).mjava","sourceNew":"    /**\n     * @param pathSegments      pieces in the url /a/b/c has pieces as 'a' , 'b' , 'c'\n     * @param index             current index of the pieces that we are looking at in /a/b/c 0='a' and 1='b'\n     * @param templateVariables The mapping of template variable to its value\n     * @param availableSubPaths If not null , available sub paths will be returned in this set\n     */\n    public T lookup(List<String> pathSegments, int index, Map<String, String> templateVariables, Set<String> availableSubPaths) {\n      Node node = lookupNode(pathSegments, index, templateVariables, availableSubPaths);\n      return node == null ? null : node.obj;\n    }\n\n","sourceOld":"    /**\n     * @param pathSegments      pieces in the url /a/b/c has pieces as 'a' , 'b' , 'c'\n     * @param index             current index of the pieces that we are looking at in /a/b/c 0='a' and 1='b'\n     * @param templateVariables The mapping of template variable to its value\n     * @param availableSubPaths If not null , available sub paths will be returned in this set\n     */\n    public T lookup(List<String> pathSegments, int index, Map<String, String> templateVariables, Set<String> availableSubPaths) {\n      if (templateName != null) templateVariables.put(templateName, pathSegments.get(index - 1));\n      if (pathSegments.size() < index + 1) {\n        findAvailableChildren(\"\", availableSubPaths);\n        if (obj == null) {//this is not a leaf node\n          Node n = children.get(\"*\");\n          if (n != null) {\n            return n.obj;\n          }\n\n        }\n        return obj;\n      }\n      String piece = pathSegments.get(index);\n      if (children == null) {\n        return null;\n      }\n      Node n = children.get(piece);\n      if (n == null && !reserved.contains(piece)) n = children.get(\"\");\n      if (n == null) {\n        n = children.get(\"*\");\n        if (n != null) {\n          StringBuffer sb = new StringBuffer();\n          for (int i = index; i < pathSegments.size(); i++) {\n            sb.append(\"/\").append(pathSegments.get(i));\n          }\n          templateVariables.put(\"*\", sb.toString());\n          return n.obj;\n\n        }\n      }\n      if (n == null) {\n        return null;\n      }\n      return n.lookup(pathSegments, index + 1, templateVariables, availableSubPaths);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"650b520f2a4daa4b0712e2393dc29ae7f21f10ac":["6ba409fa7dec3437c7631ef2582c2ad91a8368b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ba409fa7dec3437c7631ef2582c2ad91a8368b1":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5174b677b2536f97776e6b67e8c10ae5c66e6fa2"],"5174b677b2536f97776e6b67e8c10ae5c66e6fa2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5174b677b2536f97776e6b67e8c10ae5c66e6fa2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["650b520f2a4daa4b0712e2393dc29ae7f21f10ac"],"b0b597c65628ca9e73913a07e81691f8229bae35":["28288370235ed02234a64753cdbf0c6ec096304a","6ba409fa7dec3437c7631ef2582c2ad91a8368b1"]},"commit2Childs":{"650b520f2a4daa4b0712e2393dc29ae7f21f10ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["28288370235ed02234a64753cdbf0c6ec096304a","5174b677b2536f97776e6b67e8c10ae5c66e6fa2","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"6ba409fa7dec3437c7631ef2582c2ad91a8368b1":["650b520f2a4daa4b0712e2393dc29ae7f21f10ac","b0b597c65628ca9e73913a07e81691f8229bae35"],"28288370235ed02234a64753cdbf0c6ec096304a":["6ba409fa7dec3437c7631ef2582c2ad91a8368b1","b0b597c65628ca9e73913a07e81691f8229bae35"],"5174b677b2536f97776e6b67e8c10ae5c66e6fa2":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}