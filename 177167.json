{"path":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#clone().mjava","commits":[{"id":"f58d67a8f4d66d0872915c9bb14606874988efc3","date":1132166857,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#clone().mjava","pathOld":"/dev/null","sourceNew":"  /** Create a shallow copy of us -- used in rewriting if necessary\r\n   * @return a copy of us (but reuse, don't copy, our subqueries) */\r\n  public Object clone() {\r\n    DisjunctionMaxQuery clone = (DisjunctionMaxQuery)super.clone();\r\n    clone.disjuncts = (ArrayList)this.disjuncts.clone();\r\n    return clone;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#clone().mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#clone().mjava","sourceNew":"  /** Create a shallow copy of us -- used in rewriting if necessary\n   * @return a copy of us (but reuse, don't copy, our subqueries) */\n  public Object clone() {\n    DisjunctionMaxQuery clone = (DisjunctionMaxQuery)super.clone();\n    clone.disjuncts = (ArrayList)this.disjuncts.clone();\n    return clone;\n  }\n\n","sourceOld":"  /** Create a shallow copy of us -- used in rewriting if necessary\r\n   * @return a copy of us (but reuse, don't copy, our subqueries) */\r\n  public Object clone() {\r\n    DisjunctionMaxQuery clone = (DisjunctionMaxQuery)super.clone();\r\n    clone.disjuncts = (ArrayList)this.disjuncts.clone();\r\n    return clone;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0d3ac29cb12b76130b702427d6bcd355e68d126","date":1255699234,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#clone().mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#clone().mjava","sourceNew":"  /** Create a shallow copy of us -- used in rewriting if necessary\n   * @return a copy of us (but reuse, don't copy, our subqueries) */\n  @Override\n  public Object clone() {\n    DisjunctionMaxQuery clone = (DisjunctionMaxQuery)super.clone();\n    clone.disjuncts = (ArrayList)this.disjuncts.clone();\n    return clone;\n  }\n\n","sourceOld":"  /** Create a shallow copy of us -- used in rewriting if necessary\n   * @return a copy of us (but reuse, don't copy, our subqueries) */\n  public Object clone() {\n    DisjunctionMaxQuery clone = (DisjunctionMaxQuery)super.clone();\n    clone.disjuncts = (ArrayList)this.disjuncts.clone();\n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc","date":1255773182,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#clone().mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#clone().mjava","sourceNew":"  /** Create a shallow copy of us -- used in rewriting if necessary\n   * @return a copy of us (but reuse, don't copy, our subqueries) */\n  @Override\n  public Object clone() {\n    DisjunctionMaxQuery clone = (DisjunctionMaxQuery)super.clone();\n    clone.disjuncts = (ArrayList<Query>)this.disjuncts.clone();\n    return clone;\n  }\n\n","sourceOld":"  /** Create a shallow copy of us -- used in rewriting if necessary\n   * @return a copy of us (but reuse, don't copy, our subqueries) */\n  @Override\n  public Object clone() {\n    DisjunctionMaxQuery clone = (DisjunctionMaxQuery)super.clone();\n    clone.disjuncts = (ArrayList)this.disjuncts.clone();\n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f63c5771d883c45d43e7d5ac11344582906f7d17","date":1256132259,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#clone().mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#clone().mjava","sourceNew":"  /** Create a shallow copy of us -- used in rewriting if necessary\n   * @return a copy of us (but reuse, don't copy, our subqueries) */\n  @Override @SuppressWarnings(\"unchecked\")\n  public Object clone() {\n    DisjunctionMaxQuery clone = (DisjunctionMaxQuery)super.clone();\n    clone.disjuncts = (ArrayList<Query>) this.disjuncts.clone();\n    return clone;\n  }\n\n","sourceOld":"  /** Create a shallow copy of us -- used in rewriting if necessary\n   * @return a copy of us (but reuse, don't copy, our subqueries) */\n  @Override\n  public Object clone() {\n    DisjunctionMaxQuery clone = (DisjunctionMaxQuery)super.clone();\n    clone.disjuncts = (ArrayList<Query>)this.disjuncts.clone();\n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery#clone().mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#clone().mjava","sourceNew":"  /** Create a shallow copy of us -- used in rewriting if necessary\n   * @return a copy of us (but reuse, don't copy, our subqueries) */\n  @Override @SuppressWarnings(\"unchecked\")\n  public Object clone() {\n    DisjunctionMaxQuery clone = (DisjunctionMaxQuery)super.clone();\n    clone.disjuncts = (ArrayList<Query>) this.disjuncts.clone();\n    return clone;\n  }\n\n","sourceOld":"  /** Create a shallow copy of us -- used in rewriting if necessary\n   * @return a copy of us (but reuse, don't copy, our subqueries) */\n  @Override @SuppressWarnings(\"unchecked\")\n  public Object clone() {\n    DisjunctionMaxQuery clone = (DisjunctionMaxQuery)super.clone();\n    clone.disjuncts = (ArrayList<Query>) this.disjuncts.clone();\n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f58d67a8f4d66d0872915c9bb14606874988efc3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e0d3ac29cb12b76130b702427d6bcd355e68d126":["2123bddbd65dea198cac380540636ce43a880403"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["e0d3ac29cb12b76130b702427d6bcd355e68d126"],"2123bddbd65dea198cac380540636ce43a880403":["f58d67a8f4d66d0872915c9bb14606874988efc3"],"f63c5771d883c45d43e7d5ac11344582906f7d17":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f63c5771d883c45d43e7d5ac11344582906f7d17"]},"commit2Childs":{"f58d67a8f4d66d0872915c9bb14606874988efc3":["2123bddbd65dea198cac380540636ce43a880403"],"e0d3ac29cb12b76130b702427d6bcd355e68d126":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f58d67a8f4d66d0872915c9bb14606874988efc3"],"2123bddbd65dea198cac380540636ce43a880403":["e0d3ac29cb12b76130b702427d6bcd355e68d126"],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["f63c5771d883c45d43e7d5ac11344582906f7d17"],"f63c5771d883c45d43e7d5ac11344582906f7d17":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}