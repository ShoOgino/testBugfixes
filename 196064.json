{"path":"src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","commits":[{"id":"a924e8b2b6557c341c7bce03c5355159059dd7fa","date":1233683626,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","pathOld":"/dev/null","sourceNew":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        // @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid=-1;\n            //@Override\n            public int doc() {\n              return docid;\n            }\n\n            //@Override\n            public boolean next() throws IOException {\n              docid++;\n              return (docid<maxdoc);\n            }\n\n            //@Override\n            public boolean skipTo(int target) throws IOException {\n              do {\n                if (!next()) {\n                  return false;\n                }\n              } while (target > doc());\n\n              return true;\n            }\n          };\n        } \n      };\n\t  \n\t\t\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        // @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\t\n      };\n\t  \n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList/*<Integer>*/ list = new ArrayList/*<Integer>*/();\n    if (iter.skipTo(3)) {\n      list.add(new Integer(iter.doc()));\n      while(iter.next()) {\n        list.add(new Integer(iter.doc()));\n      }\n    }\n\t  \n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator/*<Integer>*/ intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = ((Integer) intIter.next()).intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \"+Arrays.toString(answer));\n      System.out.println(\"gotten: \"+Arrays.toString(docs));\n      fail();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"450f1a35b72759406232311bd2621441d6ebbe58","date":1236131427,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","pathOld":"src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","sourceNew":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        // @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid=-1;\n            //@Override\n            public int doc() {\n              return docid;\n            }\n\n            //@Override\n            public boolean next() throws IOException {\n              docid++;\n              return (docid<maxdoc);\n            }\n\n            //@Override\n            public boolean skipTo(int target) throws IOException {\n              do {\n                if (!next()) {\n                  return false;\n                }\n              } while (target > doc());\n\n              return true;\n            }\n          };\n        } \n      };\n\t  \n\t\t\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        // @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\t\n      };\n\t  \n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList/*<Integer>*/ list = new ArrayList/*<Integer>*/();\n    if (iter.skipTo(3)) {\n      list.add(new Integer(iter.doc()));\n      while(iter.next()) {\n        list.add(new Integer(iter.doc()));\n      }\n    }\n\t  \n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator/*<Integer>*/ intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = ((Integer) intIter.next()).intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \"+_TestUtil.arrayToString(answer));\n      System.out.println(\"gotten: \"+_TestUtil.arrayToString(docs));\n      fail();\n    }\n  }\n\n","sourceOld":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        // @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid=-1;\n            //@Override\n            public int doc() {\n              return docid;\n            }\n\n            //@Override\n            public boolean next() throws IOException {\n              docid++;\n              return (docid<maxdoc);\n            }\n\n            //@Override\n            public boolean skipTo(int target) throws IOException {\n              do {\n                if (!next()) {\n                  return false;\n                }\n              } while (target > doc());\n\n              return true;\n            }\n          };\n        } \n      };\n\t  \n\t\t\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        // @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\t\n      };\n\t  \n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList/*<Integer>*/ list = new ArrayList/*<Integer>*/();\n    if (iter.skipTo(3)) {\n      list.add(new Integer(iter.doc()));\n      while(iter.next()) {\n        list.add(new Integer(iter.doc()));\n      }\n    }\n\t  \n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator/*<Integer>*/ intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = ((Integer) intIter.next()).intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \"+Arrays.toString(answer));\n      System.out.println(\"gotten: \"+Arrays.toString(docs));\n      fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","pathOld":"src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","sourceNew":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        // @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            /** @deprecated use {@link #docID()} instead. */\n            public int doc() {\n              return docid;\n            }\n\n            public int docID() {\n              return docid;\n            }\n            \n            /** @deprecated use {@link #nextDoc()} instead. */\n            public boolean next() throws IOException {\n              return nextDoc() != NO_MORE_DOCS;\n            }\n\n            //@Override\n            public int nextDoc() throws IOException {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            /** @deprecated use {@link #advance(int)} instead. */\n            public boolean skipTo(int target) throws IOException {\n              return advance(target) != NO_MORE_DOCS;\n            }\n            \n            //@Override\n            public int advance(int target) throws IOException {\n              while (nextDoc() < target) {}\n              return docid;\n            }\n          };\n        } \n      };\n\t  \n\t\t\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        // @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\t\n      };\n\t  \n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList/*<Integer>*/ list = new ArrayList/*<Integer>*/();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\t  \n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator/*<Integer>*/ intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = ((Integer) intIter.next()).intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \"+_TestUtil.arrayToString(answer));\n      System.out.println(\"gotten: \"+_TestUtil.arrayToString(docs));\n      fail();\n    }\n  }\n\n","sourceOld":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        // @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid=-1;\n            //@Override\n            public int doc() {\n              return docid;\n            }\n\n            //@Override\n            public boolean next() throws IOException {\n              docid++;\n              return (docid<maxdoc);\n            }\n\n            //@Override\n            public boolean skipTo(int target) throws IOException {\n              do {\n                if (!next()) {\n                  return false;\n                }\n              } while (target > doc());\n\n              return true;\n            }\n          };\n        } \n      };\n\t  \n\t\t\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        // @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\t\n      };\n\t  \n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList/*<Integer>*/ list = new ArrayList/*<Integer>*/();\n    if (iter.skipTo(3)) {\n      list.add(new Integer(iter.doc()));\n      while(iter.next()) {\n        list.add(new Integer(iter.doc()));\n      }\n    }\n\t  \n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator/*<Integer>*/ intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = ((Integer) intIter.next()).intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \"+_TestUtil.arrayToString(answer));\n      System.out.println(\"gotten: \"+_TestUtil.arrayToString(docs));\n      fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":["fe43a17fb193c95257604ee5486e9f6e2a392c28","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c010e11aaace76d27994f3eb30436385b80600c2","date":1244826019,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","pathOld":"src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","sourceNew":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        // @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            /** @deprecated use {@link #docID()} instead. */\n            public int doc() {\n              return docid;\n            }\n\n            public int docID() {\n              return docid;\n            }\n            \n            /** @deprecated use {@link #nextDoc()} instead. */\n            public boolean next() throws IOException {\n              return nextDoc() != NO_MORE_DOCS;\n            }\n\n            //@Override\n            public int nextDoc() throws IOException {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            /** @deprecated use {@link #advance(int)} instead. */\n            public boolean skipTo(int target) throws IOException {\n              return advance(target) != NO_MORE_DOCS;\n            }\n            \n            //@Override\n            public int advance(int target) throws IOException {\n              while (nextDoc() < target) {}\n              return docid;\n            }\n          };\n        } \n      };\n\t  \n\t\t\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        // @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\t\n      };\n\t  \n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList/*<Integer>*/ list = new ArrayList/*<Integer>*/();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(new Integer(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(new Integer(doc));\n      }\n    }\n\t  \n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator/*<Integer>*/ intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = ((Integer) intIter.next()).intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \"+_TestUtil.arrayToString(answer));\n      System.out.println(\"gotten: \"+_TestUtil.arrayToString(docs));\n      fail();\n    }\n  }\n\n","sourceOld":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        // @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            /** @deprecated use {@link #docID()} instead. */\n            public int doc() {\n              return docid;\n            }\n\n            public int docID() {\n              return docid;\n            }\n            \n            /** @deprecated use {@link #nextDoc()} instead. */\n            public boolean next() throws IOException {\n              return nextDoc() != NO_MORE_DOCS;\n            }\n\n            //@Override\n            public int nextDoc() throws IOException {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            /** @deprecated use {@link #advance(int)} instead. */\n            public boolean skipTo(int target) throws IOException {\n              return advance(target) != NO_MORE_DOCS;\n            }\n            \n            //@Override\n            public int advance(int target) throws IOException {\n              while (nextDoc() < target) {}\n              return docid;\n            }\n          };\n        } \n      };\n\t  \n\t\t\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        // @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\t\n      };\n\t  \n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList/*<Integer>*/ list = new ArrayList/*<Integer>*/();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\t  \n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator/*<Integer>*/ intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = ((Integer) intIter.next()).intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \"+_TestUtil.arrayToString(answer));\n      System.out.println(\"gotten: \"+_TestUtil.arrayToString(docs));\n      fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","pathOld":"src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","sourceNew":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        // @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            /** @deprecated use {@link #docID()} instead. */\n            public int doc() {\n              return docid;\n            }\n\n            public int docID() {\n              return docid;\n            }\n            \n            /** @deprecated use {@link #nextDoc()} instead. */\n            public boolean next() throws IOException {\n              return nextDoc() != NO_MORE_DOCS;\n            }\n\n            //@Override\n            public int nextDoc() throws IOException {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            /** @deprecated use {@link #advance(int)} instead. */\n            public boolean skipTo(int target) throws IOException {\n              return advance(target) != NO_MORE_DOCS;\n            }\n            \n            //@Override\n            public int advance(int target) throws IOException {\n              while (nextDoc() < target) {}\n              return docid;\n            }\n          };\n        } \n      };\n\t  \n\t\t\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        // @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\t\n      };\n\t  \n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList/*<Integer>*/ list = new ArrayList/*<Integer>*/();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\t  \n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator/*<Integer>*/ intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = ((Integer) intIter.next()).intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \"+_TestUtil.arrayToString(answer));\n      System.out.println(\"gotten: \"+_TestUtil.arrayToString(docs));\n      fail();\n    }\n  }\n\n","sourceOld":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        // @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            /** @deprecated use {@link #docID()} instead. */\n            public int doc() {\n              return docid;\n            }\n\n            public int docID() {\n              return docid;\n            }\n            \n            /** @deprecated use {@link #nextDoc()} instead. */\n            public boolean next() throws IOException {\n              return nextDoc() != NO_MORE_DOCS;\n            }\n\n            //@Override\n            public int nextDoc() throws IOException {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            /** @deprecated use {@link #advance(int)} instead. */\n            public boolean skipTo(int target) throws IOException {\n              return advance(target) != NO_MORE_DOCS;\n            }\n            \n            //@Override\n            public int advance(int target) throws IOException {\n              while (nextDoc() < target) {}\n              return docid;\n            }\n          };\n        } \n      };\n\t  \n\t\t\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        // @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\t\n      };\n\t  \n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList/*<Integer>*/ list = new ArrayList/*<Integer>*/();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(new Integer(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(new Integer(doc));\n      }\n    }\n\t  \n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator/*<Integer>*/ intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = ((Integer) intIter.next()).intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \"+_TestUtil.arrayToString(answer));\n      System.out.println(\"gotten: \"+_TestUtil.arrayToString(docs));\n      fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"438aef2dc00a23f2716882753fe225fbce4cfbfc","date":1255281460,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","pathOld":"src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","sourceNew":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        // @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            public int docID() {\n              return docid;\n            }\n            \n            //@Override\n            public int nextDoc() throws IOException {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            //@Override\n            public int advance(int target) throws IOException {\n              while (nextDoc() < target) {}\n              return docid;\n            }\n          };\n        } \n      };\n\t  \n\t\t\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        // @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\t\n      };\n\t  \n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList/*<Integer>*/ list = new ArrayList/*<Integer>*/();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\t  \n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator/*<Integer>*/ intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = ((Integer) intIter.next()).intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \"+_TestUtil.arrayToString(answer));\n      System.out.println(\"gotten: \"+_TestUtil.arrayToString(docs));\n      fail();\n    }\n  }\n\n","sourceOld":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        // @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            /** @deprecated use {@link #docID()} instead. */\n            public int doc() {\n              return docid;\n            }\n\n            public int docID() {\n              return docid;\n            }\n            \n            /** @deprecated use {@link #nextDoc()} instead. */\n            public boolean next() throws IOException {\n              return nextDoc() != NO_MORE_DOCS;\n            }\n\n            //@Override\n            public int nextDoc() throws IOException {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            /** @deprecated use {@link #advance(int)} instead. */\n            public boolean skipTo(int target) throws IOException {\n              return advance(target) != NO_MORE_DOCS;\n            }\n            \n            //@Override\n            public int advance(int target) throws IOException {\n              while (nextDoc() < target) {}\n              return docid;\n            }\n          };\n        } \n      };\n\t  \n\t\t\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        // @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\t\n      };\n\t  \n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList/*<Integer>*/ list = new ArrayList/*<Integer>*/();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\t  \n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator/*<Integer>*/ intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = ((Integer) intIter.next()).intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \"+_TestUtil.arrayToString(answer));\n      System.out.println(\"gotten: \"+_TestUtil.arrayToString(docs));\n      fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d62b1ed69b2d54a65df6f993499b39562d1dc1f9","date":1255700561,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","pathOld":"src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","sourceNew":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() throws IOException {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              while (nextDoc() < target) {}\n              return docid;\n            }\n          };\n        } \n      };\n\t  \n\t\t\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\t\n      };\n\t  \n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList/*<Integer>*/ list = new ArrayList/*<Integer>*/();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\t  \n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator/*<Integer>*/ intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = ((Integer) intIter.next()).intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \"+_TestUtil.arrayToString(answer));\n      System.out.println(\"gotten: \"+_TestUtil.arrayToString(docs));\n      fail();\n    }\n  }\n\n","sourceOld":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        // @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            public int docID() {\n              return docid;\n            }\n            \n            //@Override\n            public int nextDoc() throws IOException {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            //@Override\n            public int advance(int target) throws IOException {\n              while (nextDoc() < target) {}\n              return docid;\n            }\n          };\n        } \n      };\n\t  \n\t\t\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        // @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\t\n      };\n\t  \n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList/*<Integer>*/ list = new ArrayList/*<Integer>*/();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\t  \n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator/*<Integer>*/ intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = ((Integer) intIter.next()).intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \"+_TestUtil.arrayToString(answer));\n      System.out.println(\"gotten: \"+_TestUtil.arrayToString(docs));\n      fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","pathOld":"src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","sourceNew":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            @Override\n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() throws IOException {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              while (nextDoc() < target) {}\n              return docid;\n            }\n          };\n        } \n      };\n\t  \n\t\t\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\t\n      };\n\t  \n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList/*<Integer>*/ list = new ArrayList/*<Integer>*/();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\t  \n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator/*<Integer>*/ intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = ((Integer) intIter.next()).intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \"+_TestUtil.arrayToString(answer));\n      System.out.println(\"gotten: \"+_TestUtil.arrayToString(docs));\n      fail();\n    }\n  }\n\n","sourceOld":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() throws IOException {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              while (nextDoc() < target) {}\n              return docid;\n            }\n          };\n        } \n      };\n\t  \n\t\t\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\t\n      };\n\t  \n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList/*<Integer>*/ list = new ArrayList/*<Integer>*/();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\t  \n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator/*<Integer>*/ intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = ((Integer) intIter.next()).intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \"+_TestUtil.arrayToString(answer));\n      System.out.println(\"gotten: \"+_TestUtil.arrayToString(docs));\n      fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","pathOld":"src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","sourceNew":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            @Override\n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() throws IOException {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              while (nextDoc() < target) {}\n              return docid;\n            }\n          };\n        } \n      };\n\t  \n\t\t\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\t\n      };\n\t  \n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList<Integer> list = new ArrayList<Integer>();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\t  \n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator<Integer> intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = intIter.next().intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \"+_TestUtil.arrayToString(answer));\n      System.out.println(\"gotten: \"+_TestUtil.arrayToString(docs));\n      fail();\n    }\n  }\n\n","sourceOld":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            @Override\n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() throws IOException {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              while (nextDoc() < target) {}\n              return docid;\n            }\n          };\n        } \n      };\n\t  \n\t\t\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\t\n      };\n\t  \n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList/*<Integer>*/ list = new ArrayList/*<Integer>*/();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\t  \n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator/*<Integer>*/ intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = ((Integer) intIter.next()).intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \"+_TestUtil.arrayToString(answer));\n      System.out.println(\"gotten: \"+_TestUtil.arrayToString(docs));\n      fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","pathOld":"src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","sourceNew":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            @Override\n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() throws IOException {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              while (nextDoc() < target) {}\n              return docid;\n            }\n          };\n        } \n      };\n\t  \n\t\t\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\t\n      };\n\t  \n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList<Integer> list = new ArrayList<Integer>();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\t  \n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator<Integer> intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = intIter.next().intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \" + Arrays.toString(answer));\n      System.out.println(\"gotten: \" + Arrays.toString(docs));\n      fail();\n    }\n  }\n\n","sourceOld":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            @Override\n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() throws IOException {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              while (nextDoc() < target) {}\n              return docid;\n            }\n          };\n        } \n      };\n\t  \n\t\t\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\t\n      };\n\t  \n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList<Integer> list = new ArrayList<Integer>();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\t  \n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator<Integer> intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = intIter.next().intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \"+_TestUtil.arrayToString(answer));\n      System.out.println(\"gotten: \"+_TestUtil.arrayToString(docs));\n      fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","pathOld":"src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","sourceNew":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            @Override\n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() throws IOException {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              while (nextDoc() < target) {}\n              return docid;\n            }\n          };\n        } \n      };\n\t  \n\t\t\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\t\n      };\n\t  \n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList<Integer> list = new ArrayList<Integer>();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\t  \n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator<Integer> intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = intIter.next().intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \" + Arrays.toString(answer));\n      System.out.println(\"gotten: \" + Arrays.toString(docs));\n      fail();\n    }\n  }\n\n","sourceOld":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            @Override\n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() throws IOException {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              while (nextDoc() < target) {}\n              return docid;\n            }\n          };\n        } \n      };\n\t  \n\t\t\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\t\n      };\n\t  \n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList<Integer> list = new ArrayList<Integer>();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\t  \n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator<Integer> intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = intIter.next().intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \" + Arrays.toString(answer));\n      System.out.println(\"gotten: \" + Arrays.toString(docs));\n      fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6bcde5e3f23911110baa101ed062b544162825b5":["c010e11aaace76d27994f3eb30436385b80600c2"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["d62b1ed69b2d54a65df6f993499b39562d1dc1f9"],"d62b1ed69b2d54a65df6f993499b39562d1dc1f9":["438aef2dc00a23f2716882753fe225fbce4cfbfc"],"30a558487f2298c2c19ceca9103c1b6865d64708":["450f1a35b72759406232311bd2621441d6ebbe58"],"438aef2dc00a23f2716882753fe225fbce4cfbfc":["6bcde5e3f23911110baa101ed062b544162825b5"],"450f1a35b72759406232311bd2621441d6ebbe58":["a924e8b2b6557c341c7bce03c5355159059dd7fa"],"c010e11aaace76d27994f3eb30436385b80600c2":["30a558487f2298c2c19ceca9103c1b6865d64708"],"a924e8b2b6557c341c7bce03c5355159059dd7fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"6bcde5e3f23911110baa101ed062b544162825b5":["438aef2dc00a23f2716882753fe225fbce4cfbfc"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"d62b1ed69b2d54a65df6f993499b39562d1dc1f9":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"30a558487f2298c2c19ceca9103c1b6865d64708":["c010e11aaace76d27994f3eb30436385b80600c2"],"438aef2dc00a23f2716882753fe225fbce4cfbfc":["d62b1ed69b2d54a65df6f993499b39562d1dc1f9"],"450f1a35b72759406232311bd2621441d6ebbe58":["30a558487f2298c2c19ceca9103c1b6865d64708"],"c010e11aaace76d27994f3eb30436385b80600c2":["6bcde5e3f23911110baa101ed062b544162825b5"],"a924e8b2b6557c341c7bce03c5355159059dd7fa":["450f1a35b72759406232311bd2621441d6ebbe58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a924e8b2b6557c341c7bce03c5355159059dd7fa"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}