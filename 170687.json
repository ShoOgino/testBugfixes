{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/CollectionProperties#setCollectionProperty(String,String,String).mjava","commits":[{"id":"de3459a54b4c8751d9ef19b035577e2418064be7","date":1520297996,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CollectionProperties#setCollectionProperty(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method sets a collection property.\n   *\n   * @param collection    The property name to be set.\n   * @param propertyName  The property name to be set.\n   * @param propertyValue The value of the property.\n   * @throws IOException if there is an error writing data to zookeeper\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void setCollectionProperty(String collection, String propertyName, String propertyValue) throws IOException {\n    String znodePath = ZkStateReader.getCollectionPropsPath(collection);\n\n    while (true) {\n      Stat s = new Stat();\n      try {\n        if (client.exists(znodePath, true)) {\n          Map<String, String> properties = (Map<String, String>) Utils.fromJSON(client.getData(znodePath, null, s, true));\n          if (propertyValue == null) {\n            if (properties.remove(propertyName) != null) { // Don't update ZK unless absolutely necessary.\n              client.setData(znodePath, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          } else {\n            if (!propertyValue.equals(properties.put(propertyName, propertyValue))) { // Don't update ZK unless absolutely necessary.\n              client.setData(znodePath, Utils.toJSON(properties), s.getVersion(), true);\n            }\n          }\n        } else {\n          Map<String, String> properties = new LinkedHashMap<>();\n          properties.put(propertyName, propertyValue);\n          client.create(znodePath, Utils.toJSON(properties), CreateMode.PERSISTENT, true);\n        }\n      } catch (KeeperException.BadVersionException | KeeperException.NodeExistsException e) {\n        //race condition\n        continue;\n      } catch (InterruptedException | KeeperException e) {\n        throw new IOException(\"Error setting property for collection \" + collection, SolrZkClient.checkInterrupted(e));\n      }\n      break;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"de3459a54b4c8751d9ef19b035577e2418064be7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["de3459a54b4c8751d9ef19b035577e2418064be7"]},"commit2Childs":{"de3459a54b4c8751d9ef19b035577e2418064be7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["de3459a54b4c8751d9ef19b035577e2418064be7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}