{"path":"lucene/src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","sourceNew":"  public void doTest(int[] docs) throws Exception {\n    Directory dir = makeIndex();\n    IndexReader reader = IndexReader.open(dir, true);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      d.get(MAGIC_FIELD);\n      \n      List<Fieldable> fields = d.getFields();\n      for (Iterator<Fieldable> fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f =  fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {        \n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void doTest(int[] docs) throws Exception {\n    Directory dir = makeIndex();\n    IndexReader reader = IndexReader.open(dir, true);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      d.get(MAGIC_FIELD);\n      \n      List<Fieldable> fields = d.getFields();\n      for (Iterator<Fieldable> fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f =  fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {        \n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","sourceNew":"  public void doTest(int[] docs) throws Exception {\n    Directory dir = makeIndex();\n    IndexReader reader = IndexReader.open(dir, true);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      d.get(MAGIC_FIELD);\n      \n      List<Fieldable> fields = d.getFields();\n      for (Iterator<Fieldable> fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f =  fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {        \n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void doTest(int[] docs) throws Exception {\n    Directory dir = makeIndex();\n    IndexReader reader = IndexReader.open(dir, true);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      d.get(MAGIC_FIELD);\n      \n      List<Fieldable> fields = d.getFields();\n      for (Iterator<Fieldable> fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f =  fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {        \n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","sourceNew":"  public void doTest(int[] docs) throws Exception {\n    Directory dir = makeIndex();\n    IndexReader reader = IndexReader.open(dir, true);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      d.get(MAGIC_FIELD);\n\n      List<Fieldable> fields = d.getFields();\n      for (Iterator<Fieldable> fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f =  fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {\n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void doTest(int[] docs) throws Exception {\n    Directory dir = makeIndex();\n    IndexReader reader = IndexReader.open(dir, true);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      d.get(MAGIC_FIELD);\n      \n      List<Fieldable> fields = d.getFields();\n      for (Iterator<Fieldable> fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f =  fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {        \n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","sourceNew":"  public void doTest(int[] docs) throws Exception {\n    Directory dir = makeIndex();\n    IndexReader reader = IndexReader.open(dir, true);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      d.get(MAGIC_FIELD);\n\n      List<Fieldable> fields = d.getFields();\n      for (Iterator<Fieldable> fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f =  fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {\n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void doTest(int[] docs) throws Exception {\n    Directory dir = makeIndex();\n    IndexReader reader = IndexReader.open(dir, true);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      d.get(MAGIC_FIELD);\n      \n      List<Fieldable> fields = d.getFields();\n      for (Iterator<Fieldable> fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f =  fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {        \n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","sourceNew":"  public void doTest(int[] docs) throws Exception {\n    Directory dir = makeIndex();\n    IndexReader reader = IndexReader.open(dir, true);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      d.get(MAGIC_FIELD);\n\n      List<Fieldable> fields = d.getFields();\n      for (Iterator<Fieldable> fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f =  fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {\n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void doTest(int[] docs) throws Exception {\n    Directory dir = makeIndex();\n    IndexReader reader = IndexReader.open(dir, true);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      d.get(MAGIC_FIELD);\n      \n      List<Fieldable> fields = d.getFields();\n      for (Iterator<Fieldable> fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f =  fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {        \n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","sourceNew":"  public void doTest(int[] docs) throws Exception {\n    Directory dir = makeIndex();\n    IndexReader reader = IndexReader.open(dir, true);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      d.get(MAGIC_FIELD);\n\n      List<Fieldable> fields = d.getFields();\n      for (Iterator<Fieldable> fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f =  fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {\n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void doTest(int[] docs) throws Exception {\n    Directory dir = makeIndex();\n    IndexReader reader = IndexReader.open(dir, true);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      d.get(MAGIC_FIELD);\n      \n      List<Fieldable> fields = d.getFields();\n      for (Iterator<Fieldable> fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f =  fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {        \n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","sourceNew":"  public void doTest(int[] docs) throws Exception {\n    IndexReader reader = IndexReader.open(directory, true);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      d.get(MAGIC_FIELD);\n\n      List<Fieldable> fields = d.getFields();\n      for (Iterator<Fieldable> fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f =  fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {\n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void doTest(int[] docs) throws Exception {\n    Directory dir = makeIndex();\n    IndexReader reader = IndexReader.open(dir, true);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      d.get(MAGIC_FIELD);\n\n      List<Fieldable> fields = d.getFields();\n      for (Iterator<Fieldable> fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f =  fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {\n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","sourceNew":"  public void doTest(int[] docs) throws Exception {\n    IndexReader reader = IndexReader.open(directory, true);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      d.get(MAGIC_FIELD);\n\n      List<Fieldable> fields = d.getFields();\n      for (Iterator<Fieldable> fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f =  fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {\n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void doTest(int[] docs) throws Exception {\n    Directory dir = makeIndex();\n    IndexReader reader = IndexReader.open(dir, true);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      d.get(MAGIC_FIELD);\n\n      List<Fieldable> fields = d.getFields();\n      for (Iterator<Fieldable> fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f =  fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {\n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","sourceNew":"  public void doTest(int[] docs) throws Exception {\n    IndexReader reader = IndexReader.open(directory, true);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      d.get(MAGIC_FIELD);\n\n      List<Fieldable> fields = d.getFields();\n      for (Iterator<Fieldable> fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f =  fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {\n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void doTest(int[] docs) throws Exception {\n    Directory dir = makeIndex();\n    IndexReader reader = IndexReader.open(dir, true);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      d.get(MAGIC_FIELD);\n\n      List<Fieldable> fields = d.getFields();\n      for (Iterator<Fieldable> fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f =  fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {\n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#doTest(int[]).mjava","sourceNew":"  public void doTest(int[] docs) throws Exception {\n    IndexReader reader = IndexReader.open(directory, true);\n    for (int i = 0; i < docs.length; i++) {\n      final FieldSelectorVisitor visitor = new FieldSelectorVisitor(SELECTOR);\n      reader.document(docs[i], visitor);\n      Document d = visitor.getDocument();\n      d.get(MAGIC_FIELD);\n\n      List<IndexableField> fields = d.getFields();\n      for (Iterator<IndexableField> fi = fields.iterator(); fi.hasNext(); ) {\n        IndexableField f=null;\n        try {\n          f =  fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {\n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void doTest(int[] docs) throws Exception {\n    IndexReader reader = IndexReader.open(directory, true);\n    for (int i = 0; i < docs.length; i++) {\n      Document d = reader.document(docs[i], SELECTOR);\n      d.get(MAGIC_FIELD);\n\n      List<Fieldable> fields = d.getFields();\n      for (Iterator<Fieldable> fi = fields.iterator(); fi.hasNext(); ) {\n        Fieldable f=null;\n        try {\n          f =  fi.next();\n          String fname = f.name();\n          String fval = f.stringValue();\n          assertNotNull(docs[i]+\" FIELD: \"+fname, fval);\n          String[] vals = fval.split(\"#\");\n          if (!dataset.contains(vals[0]) || !dataset.contains(vals[1])) {\n            fail(\"FIELD:\"+fname+\",VAL:\"+fval);\n          }\n        } catch (Exception e) {\n          throw new Exception(docs[i]+\" WTF: \"+f.name(), e);\n        }\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"a3776dccca01c11e7046323cfad46a3b4a471233":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}