{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Map[String,DocCollection]).mjava","commits":[{"id":"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f","date":1467384467,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Map[String,DocCollection]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState().mjava","sourceNew":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   *\n   * @param changedCollections collections that have changed since the last call,\n   *                           and that should fire notifications\n   */\n  private void constructState(Map<String, DocCollection> changedCollections) {\n\n    Set<String> liveNodes = this.liveNodes; // volatile read\n\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n\n    LOG.debug(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        legacyCollectionStates.keySet().size(),\n        collectionWatches.keySet().size(),\n        watchedCollectionStates.keySet().size(),\n        lazyCollectionStates.keySet().size(),\n        clusterState.getCollectionStates().size());\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet(),\n          collectionWatches.keySet(),\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n\n    for (Map.Entry<String, DocCollection> entry : changedCollections.entrySet()) {\n      notifyStateWatchers(liveNodes, entry.getKey(), entry.getValue());\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   */\n  private void constructState() {\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n    LOG.debug(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        legacyCollectionStates.keySet().size(),\n        collectionWatches.keySet().size(),\n        watchedCollectionStates.keySet().size(),\n        lazyCollectionStates.keySet().size(),\n        clusterState.getCollectionStates().size());\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet(),\n          collectionWatches.keySet(),\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f54f0eff6955cf57610f6b93dbbba3a2bf540619","date":1467968491,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Map[String,DocCollection]).mjava","sourceNew":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   *\n   * @param changedCollections collections that have changed since the last call,\n   *                           and that should fire notifications\n   */\n  private void constructState(Set<String> changedCollections) {\n\n    Set<String> liveNodes = this.liveNodes; // volatile read\n\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n\n    LOG.debug(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        legacyCollectionStates.keySet().size(),\n        collectionWatches.keySet().size(),\n        watchedCollectionStates.keySet().size(),\n        lazyCollectionStates.keySet().size(),\n        clusterState.getCollectionStates().size());\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet(),\n          collectionWatches.keySet(),\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n\n    for (String collection : changedCollections) {\n      notifyStateWatchers(liveNodes, collection, clusterState.getCollectionOrNull(collection));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   *\n   * @param changedCollections collections that have changed since the last call,\n   *                           and that should fire notifications\n   */\n  private void constructState(Map<String, DocCollection> changedCollections) {\n\n    Set<String> liveNodes = this.liveNodes; // volatile read\n\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n\n    LOG.debug(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        legacyCollectionStates.keySet().size(),\n        collectionWatches.keySet().size(),\n        watchedCollectionStates.keySet().size(),\n        lazyCollectionStates.keySet().size(),\n        clusterState.getCollectionStates().size());\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet(),\n          collectionWatches.keySet(),\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n\n    for (Map.Entry<String, DocCollection> entry : changedCollections.entrySet()) {\n      notifyStateWatchers(liveNodes, entry.getKey(), entry.getValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f54f0eff6955cf57610f6b93dbbba3a2bf540619":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f54f0eff6955cf57610f6b93dbbba3a2bf540619"]},"commit2Childs":{"f54f0eff6955cf57610f6b93dbbba3a2bf540619":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f":["f54f0eff6955cf57610f6b93dbbba3a2bf540619"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}