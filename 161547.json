{"path":"solr/core/src/java/org/apache/solr/update/CdcrTransactionLog#writeDelete(DeleteUpdateCommand).mjava","commits":[{"id":"1455c941cc4ce652efc776fc23471b0e499246f6","date":1528086751,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/CdcrTransactionLog#writeDelete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/CdcrTransactionLog#writeDelete(DeleteUpdateCommand,int).mjava","sourceNew":"  @Override\n  public long writeDelete(DeleteUpdateCommand cmd) {\n    LogCodec codec = new LogCodec(resolver);\n\n    try {\n      checkWriteHeader(codec, null);\n\n      BytesRef br = cmd.getIndexedId();\n\n      MemOutputStream out = new MemOutputStream(new byte[20 + br.length]);\n      codec.init(out);\n      codec.writeTag(JavaBinCodec.ARR, 4);\n      codec.writeInt(UpdateLog.DELETE);  // should just take one byte\n      codec.writeLong(cmd.getVersion());\n      codec.writeByteArray(br.bytes, br.offset, br.length);\n      if (cmd.getReq().getParamString().contains(CdcrUpdateProcessor.CDCR_UPDATE)) {\n        // if the update is received via cdcr source; add extra boolean entry\n        // CdcrReplicator.isTargetCluster() checks that particular boolean to accept or discard the update\n        // to forward to its own target cluster\n        codec.writePrimitive(true);\n      } else {\n        codec.writePrimitive(false);\n      }\n\n      synchronized (this) {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n        assert pos != 0;\n        out.writeAll(fos);\n        endRecord(pos);\n        // fos.flushBuffer();  // flush later\n        return pos;\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public long writeDelete(DeleteUpdateCommand cmd, int flags) {\n    LogCodec codec = new LogCodec(resolver);\n\n    try {\n      checkWriteHeader(codec, null);\n\n      BytesRef br = cmd.getIndexedId();\n\n      MemOutputStream out = new MemOutputStream(new byte[20 + br.length]);\n      codec.init(out);\n      codec.writeTag(JavaBinCodec.ARR, 4);\n      codec.writeInt(UpdateLog.DELETE | flags);  // should just take one byte\n      codec.writeLong(cmd.getVersion());\n      codec.writeByteArray(br.bytes, br.offset, br.length);\n      if (cmd.getReq().getParamString().contains(CdcrUpdateProcessor.CDCR_UPDATE)) {\n        // if the update is received via cdcr source; add extra boolean entry\n        // CdcrReplicator.isTargetCluster() checks that particular boolean to accept or discard the update\n        // to forward to its own target cluster\n        codec.writePrimitive(true);\n      } else {\n        codec.writePrimitive(false);\n      }\n\n      synchronized (this) {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n        assert pos != 0;\n        out.writeAll(fos);\n        endRecord(pos);\n        // fos.flushBuffer();  // flush later\n        return pos;\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":1,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/CdcrTransactionLog#writeDelete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/CdcrTransactionLog#writeDelete(DeleteUpdateCommand,int).mjava","sourceNew":"  @Override\n  public long writeDelete(DeleteUpdateCommand cmd) {\n    LogCodec codec = new LogCodec(resolver);\n\n    try {\n      checkWriteHeader(codec, null);\n\n      BytesRef br = cmd.getIndexedId();\n\n      MemOutputStream out = new MemOutputStream(new byte[20 + br.length]);\n      codec.init(out);\n      codec.writeTag(JavaBinCodec.ARR, 4);\n      codec.writeInt(UpdateLog.DELETE);  // should just take one byte\n      codec.writeLong(cmd.getVersion());\n      codec.writeByteArray(br.bytes, br.offset, br.length);\n      if (cmd.getReq().getParamString().contains(CdcrUpdateProcessor.CDCR_UPDATE)) {\n        // if the update is received via cdcr source; add extra boolean entry\n        // CdcrReplicator.isTargetCluster() checks that particular boolean to accept or discard the update\n        // to forward to its own target cluster\n        codec.writePrimitive(true);\n      } else {\n        codec.writePrimitive(false);\n      }\n\n      synchronized (this) {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n        assert pos != 0;\n        out.writeAll(fos);\n        endRecord(pos);\n        // fos.flushBuffer();  // flush later\n        return pos;\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public long writeDelete(DeleteUpdateCommand cmd, int flags) {\n    LogCodec codec = new LogCodec(resolver);\n\n    try {\n      checkWriteHeader(codec, null);\n\n      BytesRef br = cmd.getIndexedId();\n\n      MemOutputStream out = new MemOutputStream(new byte[20 + br.length]);\n      codec.init(out);\n      codec.writeTag(JavaBinCodec.ARR, 4);\n      codec.writeInt(UpdateLog.DELETE | flags);  // should just take one byte\n      codec.writeLong(cmd.getVersion());\n      codec.writeByteArray(br.bytes, br.offset, br.length);\n      if (cmd.getReq().getParamString().contains(CdcrUpdateProcessor.CDCR_UPDATE)) {\n        // if the update is received via cdcr source; add extra boolean entry\n        // CdcrReplicator.isTargetCluster() checks that particular boolean to accept or discard the update\n        // to forward to its own target cluster\n        codec.writePrimitive(true);\n      } else {\n        codec.writePrimitive(false);\n      }\n\n      synchronized (this) {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n        assert pos != 0;\n        out.writeAll(fos);\n        endRecord(pos);\n        // fos.flushBuffer();  // flush later\n        return pos;\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":1,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/CdcrTransactionLog#writeDelete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/CdcrTransactionLog#writeDelete(DeleteUpdateCommand,int).mjava","sourceNew":"  @Override\n  public long writeDelete(DeleteUpdateCommand cmd) {\n    LogCodec codec = new LogCodec(resolver);\n\n    try {\n      checkWriteHeader(codec, null);\n\n      BytesRef br = cmd.getIndexedId();\n\n      MemOutputStream out = new MemOutputStream(new byte[20 + br.length]);\n      codec.init(out);\n      codec.writeTag(JavaBinCodec.ARR, 4);\n      codec.writeInt(UpdateLog.DELETE);  // should just take one byte\n      codec.writeLong(cmd.getVersion());\n      codec.writeByteArray(br.bytes, br.offset, br.length);\n      if (cmd.getReq().getParamString().contains(CdcrUpdateProcessor.CDCR_UPDATE)) {\n        // if the update is received via cdcr source; add extra boolean entry\n        // CdcrReplicator.isTargetCluster() checks that particular boolean to accept or discard the update\n        // to forward to its own target cluster\n        codec.writePrimitive(true);\n      } else {\n        codec.writePrimitive(false);\n      }\n\n      synchronized (this) {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n        assert pos != 0;\n        out.writeAll(fos);\n        endRecord(pos);\n        // fos.flushBuffer();  // flush later\n        return pos;\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public long writeDelete(DeleteUpdateCommand cmd, int flags) {\n    LogCodec codec = new LogCodec(resolver);\n\n    try {\n      checkWriteHeader(codec, null);\n\n      BytesRef br = cmd.getIndexedId();\n\n      MemOutputStream out = new MemOutputStream(new byte[20 + br.length]);\n      codec.init(out);\n      codec.writeTag(JavaBinCodec.ARR, 4);\n      codec.writeInt(UpdateLog.DELETE | flags);  // should just take one byte\n      codec.writeLong(cmd.getVersion());\n      codec.writeByteArray(br.bytes, br.offset, br.length);\n      if (cmd.getReq().getParamString().contains(CdcrUpdateProcessor.CDCR_UPDATE)) {\n        // if the update is received via cdcr source; add extra boolean entry\n        // CdcrReplicator.isTargetCluster() checks that particular boolean to accept or discard the update\n        // to forward to its own target cluster\n        codec.writePrimitive(true);\n      } else {\n        codec.writePrimitive(false);\n      }\n\n      synchronized (this) {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n        assert pos != 0;\n        out.writeAll(fos);\n        endRecord(pos);\n        // fos.flushBuffer();  // flush later\n        return pos;\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/CdcrTransactionLog#writeDelete(DeleteUpdateCommand).mjava","sourceNew":null,"sourceOld":"  @Override\n  public long writeDelete(DeleteUpdateCommand cmd) {\n    LogCodec codec = new LogCodec(resolver);\n\n    try {\n      checkWriteHeader(codec, null);\n\n      BytesRef br = cmd.getIndexedId();\n\n      MemOutputStream out = new MemOutputStream(new byte[20 + br.length]);\n      codec.init(out);\n      codec.writeTag(JavaBinCodec.ARR, 4);\n      codec.writeInt(UpdateLog.DELETE);  // should just take one byte\n      codec.writeLong(cmd.getVersion());\n      codec.writeByteArray(br.bytes, br.offset, br.length);\n      if (cmd.getReq().getParamString().contains(CdcrUpdateProcessor.CDCR_UPDATE)) {\n        // if the update is received via cdcr source; add extra boolean entry\n        // CdcrReplicator.isTargetCluster() checks that particular boolean to accept or discard the update\n        // to forward to its own target cluster\n        codec.writePrimitive(true);\n      } else {\n        codec.writePrimitive(false);\n      }\n\n      synchronized (this) {\n        long pos = fos.size();   // if we had flushed, this should be equal to channel.position()\n        assert pos != 0;\n        out.writeAll(fos);\n        endRecord(pos);\n        // fos.flushBuffer();  // flush later\n        return pos;\n      }\n\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1455c941cc4ce652efc776fc23471b0e499246f6"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["1455c941cc4ce652efc776fc23471b0e499246f6"],"f592209545c71895260367152601e9200399776d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1455c941cc4ce652efc776fc23471b0e499246f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"1455c941cc4ce652efc776fc23471b0e499246f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","1455c941cc4ce652efc776fc23471b0e499246f6"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f592209545c71895260367152601e9200399776d":[],"1455c941cc4ce652efc776fc23471b0e499246f6":["b70042a8a492f7054d480ccdd2be9796510d4327","23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","f592209545c71895260367152601e9200399776d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}