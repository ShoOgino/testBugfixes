{"path":"solr/src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddCollections()\n  {\n    final List<String> c0 = new ArrayList<String>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    c0.add( \"ddd\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    assertEquals( c0.get(0), doc.getFirstValue( \"v\" ) );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    // try the same thing with 'setField'\n    doc.setField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    \n    doc.clear();\n    assertEquals( 0, doc.getFieldNames().size() );\n    \n    Iterable iter = new Iterable() {\n      public Iterator iterator() {\n        return c0.iterator();\n      }\n    };\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    // do it again to get twice the size...\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size()*2, doc.getFieldValues(\"v\").size() );\n    \n    // An empty list:\n    doc.setField( \"empty\", new ArrayList<String>() );\n    assertNull( doc.getFirstValue( \"empty\" ) );\n\n    // Try the JSTL accessor functions...\n    assertFalse( doc.getFieldValueMap().isEmpty() );\n    assertFalse( doc.getFieldValuesMap().isEmpty() );\n    assertEquals( 2, doc.getFieldValueMap().size() );\n    assertEquals( 2, doc.getFieldValuesMap().size() );\n    assertTrue( doc.getFieldValueMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValueMap().keySet().contains( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().keySet().contains( \"v\" ) );\n    assertFalse( doc.getFieldValueMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValueMap().keySet().contains( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().keySet().contains( \"g\" ) );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","sourceNew":null,"sourceOld":"  public void testAddCollections()\n  {\n    final List<String> c0 = new ArrayList<String>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    c0.add( \"ddd\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    assertEquals( c0.get(0), doc.getFirstValue( \"v\" ) );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    // try the same thing with 'setField'\n    doc.setField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    \n    doc.clear();\n    assertEquals( 0, doc.getFieldNames().size() );\n    \n    Iterable iter = new Iterable() {\n      public Iterator iterator() {\n        return c0.iterator();\n      }\n    };\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    // do it again to get twice the size...\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size()*2, doc.getFieldValues(\"v\").size() );\n    \n    // An empty list:\n    doc.setField( \"empty\", new ArrayList<String>() );\n    assertNull( doc.getFirstValue( \"empty\" ) );\n\n    // Try the JSTL accessor functions...\n    assertFalse( doc.getFieldValueMap().isEmpty() );\n    assertFalse( doc.getFieldValuesMap().isEmpty() );\n    assertEquals( 2, doc.getFieldValueMap().size() );\n    assertEquals( 2, doc.getFieldValuesMap().size() );\n    assertTrue( doc.getFieldValueMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValueMap().keySet().contains( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().keySet().contains( \"v\" ) );\n    assertFalse( doc.getFieldValueMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValueMap().keySet().contains( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().keySet().contains( \"g\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","pathOld":"src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","sourceNew":"  public void testAddCollections()\n  {\n    final List<String> c0 = new ArrayList<String>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    c0.add( \"ddd\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    assertEquals( c0.get(0), doc.getFirstValue( \"v\" ) );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    // try the same thing with 'setField'\n    doc.setField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    \n    doc.clear();\n    assertEquals( 0, doc.getFieldNames().size() );\n    \n    Iterable iter = new Iterable() {\n      public Iterator iterator() {\n        return c0.iterator();\n      }\n    };\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    // do it again to get twice the size...\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size()*2, doc.getFieldValues(\"v\").size() );\n    \n    // An empty list:\n    doc.setField( \"empty\", new ArrayList<String>() );\n    assertNull( doc.getFirstValue( \"empty\" ) );\n\n    // Try the JSTL accessor functions...\n    assertFalse( doc.getFieldValueMap().isEmpty() );\n    assertFalse( doc.getFieldValuesMap().isEmpty() );\n    assertEquals( 2, doc.getFieldValueMap().size() );\n    assertEquals( 2, doc.getFieldValuesMap().size() );\n    assertTrue( doc.getFieldValueMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValueMap().keySet().contains( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().keySet().contains( \"v\" ) );\n    assertFalse( doc.getFieldValueMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValueMap().keySet().contains( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().keySet().contains( \"g\" ) );\n  }\n\n","sourceOld":"  public void testAddCollections()\n  {\n    final List<String> c0 = new ArrayList<String>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    c0.add( \"ddd\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    assertEquals( c0.get(0), doc.getFirstValue( \"v\" ) );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    // try the same thing with 'setField'\n    doc.setField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    \n    doc.clear();\n    assertEquals( 0, doc.getFieldNames().size() );\n    \n    Iterable iter = new Iterable() {\n      public Iterator iterator() {\n        return c0.iterator();\n      }\n    };\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    // do it again to get twice the size...\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size()*2, doc.getFieldValues(\"v\").size() );\n    \n    // An empty list:\n    doc.setField( \"empty\", new ArrayList<String>() );\n    assertNull( doc.getFirstValue( \"empty\" ) );\n\n    // Try the JSTL accessor functions...\n    assertFalse( doc.getFieldValueMap().isEmpty() );\n    assertFalse( doc.getFieldValuesMap().isEmpty() );\n    assertEquals( 2, doc.getFieldValueMap().size() );\n    assertEquals( 2, doc.getFieldValuesMap().size() );\n    assertTrue( doc.getFieldValueMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValueMap().keySet().contains( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().keySet().contains( \"v\" ) );\n    assertFalse( doc.getFieldValueMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValueMap().keySet().contains( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().keySet().contains( \"g\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddCollections()\n  {\n    final List<String> c0 = new ArrayList<String>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    c0.add( \"ddd\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    assertEquals( c0.get(0), doc.getFirstValue( \"v\" ) );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    // try the same thing with 'setField'\n    doc.setField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    \n    doc.clear();\n    assertEquals( 0, doc.getFieldNames().size() );\n    \n    Iterable iter = new Iterable() {\n      public Iterator iterator() {\n        return c0.iterator();\n      }\n    };\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    // do it again to get twice the size...\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size()*2, doc.getFieldValues(\"v\").size() );\n    \n    // An empty list:\n    doc.setField( \"empty\", new ArrayList<String>() );\n    assertNull( doc.getFirstValue( \"empty\" ) );\n\n    // Try the JSTL accessor functions...\n    assertFalse( doc.getFieldValueMap().isEmpty() );\n    assertFalse( doc.getFieldValuesMap().isEmpty() );\n    assertEquals( 2, doc.getFieldValueMap().size() );\n    assertEquals( 2, doc.getFieldValuesMap().size() );\n    assertTrue( doc.getFieldValueMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValueMap().keySet().contains( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().keySet().contains( \"v\" ) );\n    assertFalse( doc.getFieldValueMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValueMap().keySet().contains( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().keySet().contains( \"g\" ) );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","pathOld":"solr/src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","sourceNew":"  public void testAddCollections()\n  {\n    final List<String> c0 = new ArrayList<String>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    c0.add( \"ddd\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    assertEquals( c0.get(0), doc.getFirstValue( \"v\" ) );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    // try the same thing with 'setField'\n    doc.setField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    \n    doc.clear();\n    assertEquals( 0, doc.getFieldNames().size() );\n    \n    Iterable iter = new Iterable() {\n      public Iterator iterator() {\n        return c0.iterator();\n      }\n    };\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    // do it again to get twice the size...\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size()*2, doc.getFieldValues(\"v\").size() );\n    \n    // An empty list:\n    doc.setField( \"empty\", new ArrayList<String>() );\n    assertNull( doc.getFirstValue( \"empty\" ) );\n\n    // Try the JSTL accessor functions...\n    assertFalse( doc.getFieldValueMap().isEmpty() );\n    assertFalse( doc.getFieldValuesMap().isEmpty() );\n    assertEquals( 2, doc.getFieldValueMap().size() );\n    assertEquals( 2, doc.getFieldValuesMap().size() );\n    assertTrue( doc.getFieldValueMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValueMap().keySet().contains( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().keySet().contains( \"v\" ) );\n    assertFalse( doc.getFieldValueMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValueMap().keySet().contains( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().keySet().contains( \"g\" ) );\n  }\n\n","sourceOld":"  public void testAddCollections()\n  {\n    final List<String> c0 = new ArrayList<String>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    c0.add( \"ddd\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    assertEquals( c0.get(0), doc.getFirstValue( \"v\" ) );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    // try the same thing with 'setField'\n    doc.setField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    \n    doc.clear();\n    assertEquals( 0, doc.getFieldNames().size() );\n    \n    Iterable iter = new Iterable() {\n      public Iterator iterator() {\n        return c0.iterator();\n      }\n    };\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    // do it again to get twice the size...\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size()*2, doc.getFieldValues(\"v\").size() );\n    \n    // An empty list:\n    doc.setField( \"empty\", new ArrayList<String>() );\n    assertNull( doc.getFirstValue( \"empty\" ) );\n\n    // Try the JSTL accessor functions...\n    assertFalse( doc.getFieldValueMap().isEmpty() );\n    assertFalse( doc.getFieldValuesMap().isEmpty() );\n    assertEquals( 2, doc.getFieldValueMap().size() );\n    assertEquals( 2, doc.getFieldValuesMap().size() );\n    assertTrue( doc.getFieldValueMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValueMap().keySet().contains( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().keySet().contains( \"v\" ) );\n    assertFalse( doc.getFieldValueMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValueMap().keySet().contains( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().keySet().contains( \"g\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","pathOld":"solr/src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","sourceNew":"  public void testAddCollections()\n  {\n    final List<String> c0 = new ArrayList<String>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    c0.add( \"ddd\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    assertEquals( c0.get(0), doc.getFirstValue( \"v\" ) );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    // try the same thing with 'setField'\n    doc.setField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    \n    doc.clear();\n    assertEquals( 0, doc.getFieldNames().size() );\n    \n    Iterable iter = new Iterable() {\n      public Iterator iterator() {\n        return c0.iterator();\n      }\n    };\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    // do it again to get twice the size...\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size()*2, doc.getFieldValues(\"v\").size() );\n    \n    // An empty list:\n    doc.setField( \"empty\", new ArrayList<String>() );\n    assertNull( doc.getFirstValue( \"empty\" ) );\n\n    // Try the JSTL accessor functions...\n    assertFalse( doc.getFieldValueMap().isEmpty() );\n    assertFalse( doc.getFieldValuesMap().isEmpty() );\n    assertEquals( 2, doc.getFieldValueMap().size() );\n    assertEquals( 2, doc.getFieldValuesMap().size() );\n    assertTrue( doc.getFieldValueMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValueMap().keySet().contains( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().keySet().contains( \"v\" ) );\n    assertFalse( doc.getFieldValueMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValueMap().keySet().contains( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().keySet().contains( \"g\" ) );\n  }\n\n","sourceOld":"  public void testAddCollections()\n  {\n    final List<String> c0 = new ArrayList<String>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    c0.add( \"ddd\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    assertEquals( c0.get(0), doc.getFirstValue( \"v\" ) );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    // try the same thing with 'setField'\n    doc.setField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    \n    doc.clear();\n    assertEquals( 0, doc.getFieldNames().size() );\n    \n    Iterable iter = new Iterable() {\n      public Iterator iterator() {\n        return c0.iterator();\n      }\n    };\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    // do it again to get twice the size...\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size()*2, doc.getFieldValues(\"v\").size() );\n    \n    // An empty list:\n    doc.setField( \"empty\", new ArrayList<String>() );\n    assertNull( doc.getFirstValue( \"empty\" ) );\n\n    // Try the JSTL accessor functions...\n    assertFalse( doc.getFieldValueMap().isEmpty() );\n    assertFalse( doc.getFieldValuesMap().isEmpty() );\n    assertEquals( 2, doc.getFieldValueMap().size() );\n    assertEquals( 2, doc.getFieldValuesMap().size() );\n    assertTrue( doc.getFieldValueMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValueMap().keySet().contains( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().keySet().contains( \"v\" ) );\n    assertFalse( doc.getFieldValueMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValueMap().keySet().contains( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().keySet().contains( \"g\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","pathOld":"solr/src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","sourceNew":"  public void testAddCollections()\n  {\n    final List<String> c0 = new ArrayList<String>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    c0.add( \"ddd\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    assertEquals( c0.get(0), doc.getFirstValue( \"v\" ) );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    // try the same thing with 'setField'\n    doc.setField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    \n    doc.clear();\n    assertEquals( 0, doc.getFieldNames().size() );\n    \n    Iterable iter = new Iterable() {\n      public Iterator iterator() {\n        return c0.iterator();\n      }\n    };\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    // do it again to get twice the size...\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size()*2, doc.getFieldValues(\"v\").size() );\n    \n    // An empty list:\n    doc.setField( \"empty\", new ArrayList<String>() );\n    assertNull( doc.getFirstValue( \"empty\" ) );\n\n    // Try the JSTL accessor functions...\n    assertFalse( doc.getFieldValueMap().isEmpty() );\n    assertFalse( doc.getFieldValuesMap().isEmpty() );\n    assertEquals( 2, doc.getFieldValueMap().size() );\n    assertEquals( 2, doc.getFieldValuesMap().size() );\n    assertTrue( doc.getFieldValueMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValueMap().keySet().contains( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().keySet().contains( \"v\" ) );\n    assertFalse( doc.getFieldValueMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValueMap().keySet().contains( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().keySet().contains( \"g\" ) );\n  }\n\n","sourceOld":"  public void testAddCollections()\n  {\n    final List<String> c0 = new ArrayList<String>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    c0.add( \"ddd\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    assertEquals( c0.get(0), doc.getFirstValue( \"v\" ) );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    // try the same thing with 'setField'\n    doc.setField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    \n    doc.clear();\n    assertEquals( 0, doc.getFieldNames().size() );\n    \n    Iterable iter = new Iterable() {\n      public Iterator iterator() {\n        return c0.iterator();\n      }\n    };\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    // do it again to get twice the size...\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size()*2, doc.getFieldValues(\"v\").size() );\n    \n    // An empty list:\n    doc.setField( \"empty\", new ArrayList<String>() );\n    assertNull( doc.getFirstValue( \"empty\" ) );\n\n    // Try the JSTL accessor functions...\n    assertFalse( doc.getFieldValueMap().isEmpty() );\n    assertFalse( doc.getFieldValuesMap().isEmpty() );\n    assertEquals( 2, doc.getFieldValueMap().size() );\n    assertEquals( 2, doc.getFieldValuesMap().size() );\n    assertTrue( doc.getFieldValueMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValueMap().keySet().contains( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().keySet().contains( \"v\" ) );\n    assertFalse( doc.getFieldValueMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValueMap().keySet().contains( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().keySet().contains( \"g\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}