{"path":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#fromJSON(String).mjava","commits":[{"id":"fb32b2f58e1f02551c5abe6c272b58a970e0bf29","date":1476220416,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#fromJSON(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Use SimpleOrderedMap rather than Map to match responses from shards */\n  public static Object fromJSON(String json) throws IOException {\n    JSONParser parser = new JSONParser(json);\n    ObjectBuilder ob = new ObjectBuilder(parser) {\n      @Override\n      public Object newObject() throws IOException {\n        return new SimpleOrderedMap();\n      }\n\n      @Override\n      public void addKeyVal(Object map, Object key, Object val) throws IOException {\n        ((SimpleOrderedMap)map).add(key.toString(), val);\n      }\n    };\n\n    return ob.getObject();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#fromJSON(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Use SimpleOrderedMap rather than Map to match responses from shards */\n  public static Object fromJSON(String json) throws IOException {\n    JSONParser parser = new JSONParser(json);\n    ObjectBuilder ob = new ObjectBuilder(parser) {\n      @Override\n      public Object newObject() throws IOException {\n        return new SimpleOrderedMap();\n      }\n\n      @Override\n      public void addKeyVal(Object map, Object key, Object val) throws IOException {\n        ((SimpleOrderedMap)map).add(key.toString(), val);\n      }\n    };\n\n    return ob.getObject();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39fdbc59d893f5a211736e861fe145798a40b9ff","date":1498161919,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#fromJSON(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#fromJSON(String).mjava","sourceNew":"  /**\n   * Use SimpleOrderedMap rather than Map to match responses from shards\n   */\n  public static Object fromJSON(String json) throws IOException {\n    JSONParser parser = new JSONParser(json);\n    ObjectBuilder ob = new ObjectBuilder(parser) {\n      @Override\n      public Object newObject() throws IOException {\n        return new SimpleOrderedMap();\n      }\n\n      @Override\n      public void addKeyVal(Object map, Object key, Object val) throws IOException {\n        ((SimpleOrderedMap) map).add(key.toString(), val);\n      }\n    };\n\n    return ob.getObject();\n  }\n\n","sourceOld":"  /** Use SimpleOrderedMap rather than Map to match responses from shards */\n  public static Object fromJSON(String json) throws IOException {\n    JSONParser parser = new JSONParser(json);\n    ObjectBuilder ob = new ObjectBuilder(parser) {\n      @Override\n      public Object newObject() throws IOException {\n        return new SimpleOrderedMap();\n      }\n\n      @Override\n      public void addKeyVal(Object map, Object key, Object val) throws IOException {\n        ((SimpleOrderedMap)map).add(key.toString(), val);\n      }\n    };\n\n    return ob.getObject();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#fromJSON(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#fromJSON(String).mjava","sourceNew":"  /**\n   * Use SimpleOrderedMap rather than Map to match responses from shards\n   */\n  public static Object fromJSON(String json) throws IOException {\n    JSONParser parser = new JSONParser(json);\n    ObjectBuilder ob = new ObjectBuilder(parser) {\n      @Override\n      public Object newObject() throws IOException {\n        return new SimpleOrderedMap();\n      }\n\n      @Override\n      public void addKeyVal(Object map, Object key, Object val) throws IOException {\n        ((SimpleOrderedMap) map).add(key.toString(), val);\n      }\n    };\n\n    return ob.getObject();\n  }\n\n","sourceOld":"  /** Use SimpleOrderedMap rather than Map to match responses from shards */\n  public static Object fromJSON(String json) throws IOException {\n    JSONParser parser = new JSONParser(json);\n    ObjectBuilder ob = new ObjectBuilder(parser) {\n      @Override\n      public Object newObject() throws IOException {\n        return new SimpleOrderedMap();\n      }\n\n      @Override\n      public void addKeyVal(Object map, Object key, Object val) throws IOException {\n        ((SimpleOrderedMap)map).add(key.toString(), val);\n      }\n    };\n\n    return ob.getObject();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#fromJSON(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#fromJSON(String).mjava","sourceNew":"  /**\n   * Use SimpleOrderedMap rather than Map to match responses from shards\n   */\n  public static Object fromJSON(String json) throws IOException {\n    JSONParser parser = new JSONParser(json);\n    ObjectBuilder ob = new ObjectBuilder(parser) {\n      @Override\n      public Object newObject() throws IOException {\n        return new SimpleOrderedMap();\n      }\n\n      @Override\n      public void addKeyVal(Object map, Object key, Object val) throws IOException {\n        ((SimpleOrderedMap) map).add(key.toString(), val);\n      }\n    };\n\n    return ob.getObject();\n  }\n\n","sourceOld":"  /** Use SimpleOrderedMap rather than Map to match responses from shards */\n  public static Object fromJSON(String json) throws IOException {\n    JSONParser parser = new JSONParser(json);\n    ObjectBuilder ob = new ObjectBuilder(parser) {\n      @Override\n      public Object newObject() throws IOException {\n        return new SimpleOrderedMap();\n      }\n\n      @Override\n      public void addKeyVal(Object map, Object key, Object val) throws IOException {\n        ((SimpleOrderedMap)map).add(key.toString(), val);\n      }\n    };\n\n    return ob.getObject();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#fromJSON(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#fromJSON(String).mjava","sourceNew":"  /**\n   * Use SimpleOrderedMap rather than Map to match responses from shards\n   */\n  public static Object fromJSON(String json) throws IOException {\n    JSONParser parser = new JSONParser(json);\n    ObjectBuilder ob = new ObjectBuilder(parser) {\n      @Override\n      @SuppressWarnings({\"rawtypes\"})\n      public Object newObject() throws IOException {\n        return new SimpleOrderedMap();\n      }\n\n      @Override\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      public void addKeyVal(Object map, Object key, Object val) throws IOException {\n        ((SimpleOrderedMap) map).add(key.toString(), val);\n      }\n    };\n\n    return ob.getObject();\n  }\n\n","sourceOld":"  /**\n   * Use SimpleOrderedMap rather than Map to match responses from shards\n   */\n  public static Object fromJSON(String json) throws IOException {\n    JSONParser parser = new JSONParser(json);\n    ObjectBuilder ob = new ObjectBuilder(parser) {\n      @Override\n      public Object newObject() throws IOException {\n        return new SimpleOrderedMap();\n      }\n\n      @Override\n      public void addKeyVal(Object map, Object key, Object val) throws IOException {\n        ((SimpleOrderedMap) map).add(key.toString(), val);\n      }\n    };\n\n    return ob.getObject();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"39fdbc59d893f5a211736e861fe145798a40b9ff":["fb32b2f58e1f02551c5abe6c272b58a970e0bf29"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["fb32b2f58e1f02551c5abe6c272b58a970e0bf29","39fdbc59d893f5a211736e861fe145798a40b9ff"],"28288370235ed02234a64753cdbf0c6ec096304a":["fb32b2f58e1f02551c5abe6c272b58a970e0bf29","39fdbc59d893f5a211736e861fe145798a40b9ff"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fb32b2f58e1f02551c5abe6c272b58a970e0bf29"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["28288370235ed02234a64753cdbf0c6ec096304a"],"fb32b2f58e1f02551c5abe6c272b58a970e0bf29":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","fb32b2f58e1f02551c5abe6c272b58a970e0bf29"],"39fdbc59d893f5a211736e861fe145798a40b9ff":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["e98520789adb1d5ad05afb4956eca0944a929688"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"fb32b2f58e1f02551c5abe6c272b58a970e0bf29":["39fdbc59d893f5a211736e861fe145798a40b9ff","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}