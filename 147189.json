{"path":"lucene/src/test-framework/java/org/apache/lucene/analysis/MockTokenizer#end().mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/analysis/MockTokenizer#end().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/analysis/MockTokenizer#end().mjava","sourceNew":"  @Override\n  public void end() throws IOException {\n    int finalOffset = correctOffset(off);\n    offsetAtt.setOffset(finalOffset, finalOffset);\n    // some tokenizers, such as limiting tokenizers, call end() before incrementToken() returns false.\n    // these tests should disable this check (in general you should consume the entire stream)\n    assert !enableChecks || streamState == State.INCREMENT_FALSE : \"end() called before incrementToken() returned false!\";\n    streamState = State.END;\n  }\n\n","sourceOld":"  @Override\n  public void end() throws IOException {\n    int finalOffset = correctOffset(off);\n    offsetAtt.setOffset(finalOffset, finalOffset);\n    // some tokenizers, such as limiting tokenizers, call end() before incrementToken() returns false.\n    // these tests should disable this check (in general you should consume the entire stream)\n    assert !enableChecks || streamState == State.INCREMENT_FALSE : \"end() called before incrementToken() returned false!\";\n    streamState = State.END;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenizer#end().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/analysis/MockTokenizer#end().mjava","sourceNew":"  @Override\n  public void end() throws IOException {\n    int finalOffset = correctOffset(off);\n    offsetAtt.setOffset(finalOffset, finalOffset);\n    // some tokenizers, such as limiting tokenizers, call end() before incrementToken() returns false.\n    // these tests should disable this check (in general you should consume the entire stream)\n    assert !enableChecks || streamState == State.INCREMENT_FALSE : \"end() called before incrementToken() returned false!\";\n    streamState = State.END;\n  }\n\n","sourceOld":"  @Override\n  public void end() throws IOException {\n    int finalOffset = correctOffset(off);\n    offsetAtt.setOffset(finalOffset, finalOffset);\n    // some tokenizers, such as limiting tokenizers, call end() before incrementToken() returns false.\n    // these tests should disable this check (in general you should consume the entire stream)\n    assert !enableChecks || streamState == State.INCREMENT_FALSE : \"end() called before incrementToken() returned false!\";\n    streamState = State.END;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}