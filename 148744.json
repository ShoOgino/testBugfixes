{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers(SolrZkClient).mjava","commits":[{"id":"464244264804e3f981bf1fb4b732516d8d62dbc2","date":1495736161,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers().mjava","sourceNew":"  public ScheduledTriggers(SolrZkClient zkClient) {\n    // todo make the core pool size configurable\n    // it is important to use more than one because a time taking trigger can starve other scheduled triggers\n    // ideally we should have as many core threads as the number of triggers but firstly, we don't know beforehand\n    // how many triggers we have and secondly, that many threads will always be instantiated and kept around idle\n    // so it is wasteful as well. Hopefully 4 is a good compromise.\n    scheduledThreadPoolExecutor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(4,\n        new DefaultSolrThreadFactory(\"ScheduledTrigger\"));\n    scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);\n    scheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    actionExecutor = ExecutorUtil.newMDCAwareSingleThreadExecutor(new DefaultSolrThreadFactory(\"AutoscalingActionExecutor\"));\n    // todo make the wait time configurable\n    actionThrottle = new ActionThrottle(\"action\", DEFAULT_MIN_MS_BETWEEN_ACTIONS);\n    this.zkClient = zkClient;\n    queueStats = new Overseer.Stats();\n  }\n\n","sourceOld":"  public ScheduledTriggers() {\n    // todo make the core pool size configurable\n    // it is important to use more than one because a time taking trigger can starve other scheduled triggers\n    // ideally we should have as many core threads as the number of triggers but firstly, we don't know beforehand\n    // how many triggers we have and secondly, that many threads will always be instantiated and kept around idle\n    // so it is wasteful as well. Hopefully 4 is a good compromise.\n    scheduledThreadPoolExecutor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(4,\n        new DefaultSolrThreadFactory(\"ScheduledTrigger\"));\n    scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);\n    scheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    actionExecutor = ExecutorUtil.newMDCAwareSingleThreadExecutor(new DefaultSolrThreadFactory(\"AutoscalingActionExecutor\"));\n    // todo make the wait time configurable\n    actionThrottle = new ActionThrottle(\"action\", DEFAULT_MIN_MS_BETWEEN_ACTIONS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5531f16a602ef350b6c9adfb08ebaa13a60fe3db","date":1495756318,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers().mjava","sourceNew":"  public ScheduledTriggers(SolrZkClient zkClient) {\n    // todo make the core pool size configurable\n    // it is important to use more than one because a time taking trigger can starve other scheduled triggers\n    // ideally we should have as many core threads as the number of triggers but firstly, we don't know beforehand\n    // how many triggers we have and secondly, that many threads will always be instantiated and kept around idle\n    // so it is wasteful as well. Hopefully 4 is a good compromise.\n    scheduledThreadPoolExecutor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(4,\n        new DefaultSolrThreadFactory(\"ScheduledTrigger\"));\n    scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);\n    scheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    actionExecutor = ExecutorUtil.newMDCAwareSingleThreadExecutor(new DefaultSolrThreadFactory(\"AutoscalingActionExecutor\"));\n    // todo make the wait time configurable\n    actionThrottle = new ActionThrottle(\"action\", DEFAULT_MIN_MS_BETWEEN_ACTIONS);\n    this.zkClient = zkClient;\n    queueStats = new Overseer.Stats();\n  }\n\n","sourceOld":"  public ScheduledTriggers() {\n    // todo make the core pool size configurable\n    // it is important to use more than one because a time taking trigger can starve other scheduled triggers\n    // ideally we should have as many core threads as the number of triggers but firstly, we don't know beforehand\n    // how many triggers we have and secondly, that many threads will always be instantiated and kept around idle\n    // so it is wasteful as well. Hopefully 4 is a good compromise.\n    scheduledThreadPoolExecutor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(4,\n        new DefaultSolrThreadFactory(\"ScheduledTrigger\"));\n    scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);\n    scheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    actionExecutor = ExecutorUtil.newMDCAwareSingleThreadExecutor(new DefaultSolrThreadFactory(\"AutoscalingActionExecutor\"));\n    // todo make the wait time configurable\n    actionThrottle = new ActionThrottle(\"action\", DEFAULT_MIN_MS_BETWEEN_ACTIONS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f6b20dc453cee198956989b90aa24bef0232bcf","date":1498221066,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers(ZkController).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#ScheduledTriggers(SolrZkClient).mjava","sourceNew":"  public ScheduledTriggers(ZkController zkController) {\n    // todo make the core pool size configurable\n    // it is important to use more than one because a time taking trigger can starve other scheduled triggers\n    // ideally we should have as many core threads as the number of triggers but firstly, we don't know beforehand\n    // how many triggers we have and secondly, that many threads will always be instantiated and kept around idle\n    // so it is wasteful as well. Hopefully 4 is a good compromise.\n    scheduledThreadPoolExecutor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(4,\n        new DefaultSolrThreadFactory(\"ScheduledTrigger\"));\n    scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);\n    scheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    actionExecutor = ExecutorUtil.newMDCAwareSingleThreadExecutor(new DefaultSolrThreadFactory(\"AutoscalingActionExecutor\"));\n    // todo make the wait time configurable\n    actionThrottle = new ActionThrottle(\"action\", DEFAULT_MIN_MS_BETWEEN_ACTIONS);\n    this.coreContainer = zkController.getCoreContainer();\n    this.zkClient = zkController.getZkClient();\n    queueStats = new Overseer.Stats();\n  }\n\n","sourceOld":"  public ScheduledTriggers(SolrZkClient zkClient) {\n    // todo make the core pool size configurable\n    // it is important to use more than one because a time taking trigger can starve other scheduled triggers\n    // ideally we should have as many core threads as the number of triggers but firstly, we don't know beforehand\n    // how many triggers we have and secondly, that many threads will always be instantiated and kept around idle\n    // so it is wasteful as well. Hopefully 4 is a good compromise.\n    scheduledThreadPoolExecutor = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(4,\n        new DefaultSolrThreadFactory(\"ScheduledTrigger\"));\n    scheduledThreadPoolExecutor.setRemoveOnCancelPolicy(true);\n    scheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    actionExecutor = ExecutorUtil.newMDCAwareSingleThreadExecutor(new DefaultSolrThreadFactory(\"AutoscalingActionExecutor\"));\n    // todo make the wait time configurable\n    actionThrottle = new ActionThrottle(\"action\", DEFAULT_MIN_MS_BETWEEN_ACTIONS);\n    this.zkClient = zkClient;\n    queueStats = new Overseer.Stats();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","464244264804e3f981bf1fb4b732516d8d62dbc2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"464244264804e3f981bf1fb4b732516d8d62dbc2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1f6b20dc453cee198956989b90aa24bef0232bcf":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["1f6b20dc453cee198956989b90aa24bef0232bcf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db","464244264804e3f981bf1fb4b732516d8d62dbc2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"464244264804e3f981bf1fb4b732516d8d62dbc2":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"1f6b20dc453cee198956989b90aa24bef0232bcf":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1f6b20dc453cee198956989b90aa24bef0232bcf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}