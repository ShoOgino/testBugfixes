{"path":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery#BlendedTermQuery(Term[],float[],TermContext[],RewriteMethod).mjava","commits":[{"id":"f2e0b693f44c4d48acb66e289f04ec7309118a1a","date":1437989791,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery#BlendedTermQuery(Term[],float[],TermContext[],RewriteMethod).mjava","pathOld":"/dev/null","sourceNew":"  private BlendedTermQuery(Term[] terms, float[] boosts, TermContext[] contexts,\n      RewriteMethod rewriteMethod) {\n    assert terms.length == boosts.length;\n    assert terms.length == contexts.length;\n    this.terms = terms;\n    this.boosts = boosts;\n    this.contexts = contexts;\n    this.rewriteMethod = rewriteMethod;\n\n    // we sort terms so that equals/hashcode does not rely on the order\n    new InPlaceMergeSorter() {\n\n      @Override\n      protected void swap(int i, int j) {\n        Term tmpTerm = terms[i];\n        terms[i] = terms[j];\n        terms[j] = tmpTerm;\n\n        TermContext tmpContext = contexts[i];\n        contexts[i] = contexts[j];\n        contexts[j] = tmpContext;\n\n        float tmpBoost = boosts[i];\n        boosts[i] = boosts[j];\n        boosts[j] = tmpBoost;\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        return terms[i].compareTo(terms[j]);\n      }\n    }.sort(0, terms.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery#BlendedTermQuery(Term[],float[],TermStates[],RewriteMethod).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery#BlendedTermQuery(Term[],float[],TermContext[],RewriteMethod).mjava","sourceNew":"  private BlendedTermQuery(Term[] terms, float[] boosts, TermStates[] contexts,\n      RewriteMethod rewriteMethod) {\n    assert terms.length == boosts.length;\n    assert terms.length == contexts.length;\n    this.terms = terms;\n    this.boosts = boosts;\n    this.contexts = contexts;\n    this.rewriteMethod = rewriteMethod;\n\n    // we sort terms so that equals/hashcode does not rely on the order\n    new InPlaceMergeSorter() {\n\n      @Override\n      protected void swap(int i, int j) {\n        Term tmpTerm = terms[i];\n        terms[i] = terms[j];\n        terms[j] = tmpTerm;\n\n        TermStates tmpContext = contexts[i];\n        contexts[i] = contexts[j];\n        contexts[j] = tmpContext;\n\n        float tmpBoost = boosts[i];\n        boosts[i] = boosts[j];\n        boosts[j] = tmpBoost;\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        return terms[i].compareTo(terms[j]);\n      }\n    }.sort(0, terms.length);\n  }\n\n","sourceOld":"  private BlendedTermQuery(Term[] terms, float[] boosts, TermContext[] contexts,\n      RewriteMethod rewriteMethod) {\n    assert terms.length == boosts.length;\n    assert terms.length == contexts.length;\n    this.terms = terms;\n    this.boosts = boosts;\n    this.contexts = contexts;\n    this.rewriteMethod = rewriteMethod;\n\n    // we sort terms so that equals/hashcode does not rely on the order\n    new InPlaceMergeSorter() {\n\n      @Override\n      protected void swap(int i, int j) {\n        Term tmpTerm = terms[i];\n        terms[i] = terms[j];\n        terms[j] = tmpTerm;\n\n        TermContext tmpContext = contexts[i];\n        contexts[i] = contexts[j];\n        contexts[j] = tmpContext;\n\n        float tmpBoost = boosts[i];\n        boosts[i] = boosts[j];\n        boosts[j] = tmpBoost;\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        return terms[i].compareTo(terms[j]);\n      }\n    }.sort(0, terms.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery#BlendedTermQuery(Term[],float[],TermContext[],RewriteMethod).mjava","sourceNew":null,"sourceOld":"  private BlendedTermQuery(Term[] terms, float[] boosts, TermContext[] contexts,\n      RewriteMethod rewriteMethod) {\n    assert terms.length == boosts.length;\n    assert terms.length == contexts.length;\n    this.terms = terms;\n    this.boosts = boosts;\n    this.contexts = contexts;\n    this.rewriteMethod = rewriteMethod;\n\n    // we sort terms so that equals/hashcode does not rely on the order\n    new InPlaceMergeSorter() {\n\n      @Override\n      protected void swap(int i, int j) {\n        Term tmpTerm = terms[i];\n        terms[i] = terms[j];\n        terms[j] = tmpTerm;\n\n        TermContext tmpContext = contexts[i];\n        contexts[i] = contexts[j];\n        contexts[j] = tmpContext;\n\n        float tmpBoost = boosts[i];\n        boosts[i] = boosts[j];\n        boosts[j] = tmpBoost;\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        return terms[i].compareTo(terms[j]);\n      }\n    }.sort(0, terms.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["f2e0b693f44c4d48acb66e289f04ec7309118a1a","a6e9f769521480a623f897c0d59089b919fa4239"],"a6e9f769521480a623f897c0d59089b919fa4239":["f2e0b693f44c4d48acb66e289f04ec7309118a1a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f2e0b693f44c4d48acb66e289f04ec7309118a1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f2e0b693f44c4d48acb66e289f04ec7309118a1a"],"f2e0b693f44c4d48acb66e289f04ec7309118a1a":["b94236357aaa22b76c10629851fe4e376e0cea82","a6e9f769521480a623f897c0d59089b919fa4239"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}