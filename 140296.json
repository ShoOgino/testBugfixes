{"path":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getPrecision(String).mjava","commits":[{"id":"c1c1ca1e9ab1271a360852c85d18bcb52157d087","date":1445615344,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getPrecision(String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * calculate precision on the given class\n     *\n     * @param klass the class to calculate the precision for\n     * @return the precision for the given class\n     */\n    public double getPrecision(String klass) {\n      Map<String, Long> classifications = linearizedMatrix.get(klass);\n      double tp = 0;\n      double fp = 0;\n      for (Map.Entry<String, Long> entry : classifications.entrySet()) {\n        if (klass.equals(entry.getKey())) {\n          tp += entry.getValue();\n        }\n      }\n      for (Map<String, Long> values : linearizedMatrix.values()) {\n        if (values.containsKey(klass)) {\n          fp += values.get(klass);\n        }\n      }\n      return tp / (tp + fp);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dce777c41006be1f71018e7565152f6dbc67140","date":1445869278,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getPrecision(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getPrecision(String).mjava","sourceNew":"    /**\n     * calculate precision on the given class\n     *\n     * @param klass the class to calculate the precision for\n     * @return the precision for the given class\n     */\n    public double getPrecision(String klass) {\n      Map<String, Long> classifications = linearizedMatrix.get(klass);\n      double tp = 0;\n      double fp = 0;\n      if (classifications != null) {\n        for (Map.Entry<String, Long> entry : classifications.entrySet()) {\n          if (klass.equals(entry.getKey())) {\n            tp += entry.getValue();\n          }\n        }\n        for (Map<String, Long> values : linearizedMatrix.values()) {\n          if (values.containsKey(klass)) {\n            fp += values.get(klass);\n          }\n        }\n      }\n      return tp + fp > 0 ? tp / (tp + fp) : 0;\n    }\n\n","sourceOld":"    /**\n     * calculate precision on the given class\n     *\n     * @param klass the class to calculate the precision for\n     * @return the precision for the given class\n     */\n    public double getPrecision(String klass) {\n      Map<String, Long> classifications = linearizedMatrix.get(klass);\n      double tp = 0;\n      double fp = 0;\n      for (Map.Entry<String, Long> entry : classifications.entrySet()) {\n        if (klass.equals(entry.getKey())) {\n          tp += entry.getValue();\n        }\n      }\n      for (Map<String, Long> values : linearizedMatrix.values()) {\n        if (values.containsKey(klass)) {\n          fp += values.get(klass);\n        }\n      }\n      return tp / (tp + fp);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af434a00d10f0c45fcdb813ee70ba31baf83b155","date":1452271788,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getPrecision(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getPrecision(String).mjava","sourceNew":"    /**\n     * calculate precision on the given class\n     *\n     * @param klass the class to calculate the precision for\n     * @return the precision for the given class\n     */\n    public double getPrecision(String klass) {\n      Map<String, Long> classifications = linearizedMatrix.get(klass);\n      double tp = 0;\n      double fp = -1;\n      if (classifications != null) {\n        for (Map.Entry<String, Long> entry : classifications.entrySet()) {\n          if (klass.equals(entry.getKey())) {\n            tp += entry.getValue();\n          }\n        }\n        for (Map<String, Long> values : linearizedMatrix.values()) {\n          if (values.containsKey(klass)) {\n            fp += values.get(klass);\n          }\n        }\n      }\n      return tp + fp > 0 ? tp / (tp + fp) : 0;\n    }\n\n","sourceOld":"    /**\n     * calculate precision on the given class\n     *\n     * @param klass the class to calculate the precision for\n     * @return the precision for the given class\n     */\n    public double getPrecision(String klass) {\n      Map<String, Long> classifications = linearizedMatrix.get(klass);\n      double tp = 0;\n      double fp = 0;\n      if (classifications != null) {\n        for (Map.Entry<String, Long> entry : classifications.entrySet()) {\n          if (klass.equals(entry.getKey())) {\n            tp += entry.getValue();\n          }\n        }\n        for (Map<String, Long> values : linearizedMatrix.values()) {\n          if (values.containsKey(klass)) {\n            fp += values.get(klass);\n          }\n        }\n      }\n      return tp + fp > 0 ? tp / (tp + fp) : 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eff5db4d2f0dea2783c3351ff4b5b9e63e0b5299","date":1460106403,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getPrecision(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getPrecision(String).mjava","sourceNew":"    /**\n     * calculate precision on the given class\n     *\n     * @param klass the class to calculate the precision for\n     * @return the precision for the given class\n     */\n    public double getPrecision(String klass) {\n      Map<String, Long> classifications = linearizedMatrix.get(klass);\n      double tp = 0;\n      double fp = 0;\n      if (classifications != null) {\n        for (Map.Entry<String, Long> entry : classifications.entrySet()) {\n          if (klass.equals(entry.getKey())) {\n            tp += entry.getValue();\n          }\n        }\n        for (Map<String, Long> values : linearizedMatrix.values()) {\n          if (values.containsKey(klass)) {\n            fp += values.get(klass);\n          }\n        }\n      }\n      return tp > 0 ? tp / (tp + fp) : 0;\n    }\n\n","sourceOld":"    /**\n     * calculate precision on the given class\n     *\n     * @param klass the class to calculate the precision for\n     * @return the precision for the given class\n     */\n    public double getPrecision(String klass) {\n      Map<String, Long> classifications = linearizedMatrix.get(klass);\n      double tp = 0;\n      double fp = -1;\n      if (classifications != null) {\n        for (Map.Entry<String, Long> entry : classifications.entrySet()) {\n          if (klass.equals(entry.getKey())) {\n            tp += entry.getValue();\n          }\n        }\n        for (Map<String, Long> values : linearizedMatrix.values()) {\n          if (values.containsKey(klass)) {\n            fp += values.get(klass);\n          }\n        }\n      }\n      return tp + fp > 0 ? tp / (tp + fp) : 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getPrecision(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getPrecision(String).mjava","sourceNew":"    /**\n     * calculate precision on the given class\n     *\n     * @param klass the class to calculate the precision for\n     * @return the precision for the given class\n     */\n    public double getPrecision(String klass) {\n      Map<String, Long> classifications = linearizedMatrix.get(klass);\n      double tp = 0;\n      double fp = 0;\n      if (classifications != null) {\n        for (Map.Entry<String, Long> entry : classifications.entrySet()) {\n          if (klass.equals(entry.getKey())) {\n            tp += entry.getValue();\n          }\n        }\n        for (Map<String, Long> values : linearizedMatrix.values()) {\n          if (values.containsKey(klass)) {\n            fp += values.get(klass);\n          }\n        }\n      }\n      return tp > 0 ? tp / (tp + fp) : 0;\n    }\n\n","sourceOld":"    /**\n     * calculate precision on the given class\n     *\n     * @param klass the class to calculate the precision for\n     * @return the precision for the given class\n     */\n    public double getPrecision(String klass) {\n      Map<String, Long> classifications = linearizedMatrix.get(klass);\n      double tp = 0;\n      double fp = -1;\n      if (classifications != null) {\n        for (Map.Entry<String, Long> entry : classifications.entrySet()) {\n          if (klass.equals(entry.getKey())) {\n            tp += entry.getValue();\n          }\n        }\n        for (Map<String, Long> values : linearizedMatrix.values()) {\n          if (values.containsKey(klass)) {\n            fp += values.get(klass);\n          }\n        }\n      }\n      return tp + fp > 0 ? tp / (tp + fp) : 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8bcd3226dfcc329379dc50da67a963739f6cb65","date":1464272038,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getPrecision(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getPrecision(String).mjava","sourceNew":"    /**\n     * calculate precision on the given class\n     *\n     * @param klass the class to calculate the precision for\n     * @return the precision for the given class\n     */\n    public double getPrecision(String klass) {\n      Map<String, Long> classifications = linearizedMatrix.get(klass);\n      double tp = 0;\n      double den = 0; // tp + fp\n      if (classifications != null) {\n        for (Map.Entry<String, Long> entry : classifications.entrySet()) {\n          if (klass.equals(entry.getKey())) {\n            tp += entry.getValue();\n          }\n        }\n        for (Map<String, Long> values : linearizedMatrix.values()) {\n          if (values.containsKey(klass)) {\n            den += values.get(klass);\n          }\n        }\n      }\n      return tp > 0 ? tp / den : 0;\n    }\n\n","sourceOld":"    /**\n     * calculate precision on the given class\n     *\n     * @param klass the class to calculate the precision for\n     * @return the precision for the given class\n     */\n    public double getPrecision(String klass) {\n      Map<String, Long> classifications = linearizedMatrix.get(klass);\n      double tp = 0;\n      double fp = 0;\n      if (classifications != null) {\n        for (Map.Entry<String, Long> entry : classifications.entrySet()) {\n          if (klass.equals(entry.getKey())) {\n            tp += entry.getValue();\n          }\n        }\n        for (Map<String, Long> values : linearizedMatrix.values()) {\n          if (values.containsKey(klass)) {\n            fp += values.get(klass);\n          }\n        }\n      }\n      return tp > 0 ? tp / (tp + fp) : 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getPrecision(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getPrecision(String).mjava","sourceNew":"    /**\n     * calculate precision on the given class\n     *\n     * @param klass the class to calculate the precision for\n     * @return the precision for the given class\n     */\n    public double getPrecision(String klass) {\n      Map<String, Long> classifications = linearizedMatrix.get(klass);\n      double tp = 0;\n      double den = 0; // tp + fp\n      if (classifications != null) {\n        for (Map.Entry<String, Long> entry : classifications.entrySet()) {\n          if (klass.equals(entry.getKey())) {\n            tp += entry.getValue();\n          }\n        }\n        for (Map<String, Long> values : linearizedMatrix.values()) {\n          if (values.containsKey(klass)) {\n            den += values.get(klass);\n          }\n        }\n      }\n      return tp > 0 ? tp / den : 0;\n    }\n\n","sourceOld":"    /**\n     * calculate precision on the given class\n     *\n     * @param klass the class to calculate the precision for\n     * @return the precision for the given class\n     */\n    public double getPrecision(String klass) {\n      Map<String, Long> classifications = linearizedMatrix.get(klass);\n      double tp = 0;\n      double fp = 0;\n      if (classifications != null) {\n        for (Map.Entry<String, Long> entry : classifications.entrySet()) {\n          if (klass.equals(entry.getKey())) {\n            tp += entry.getValue();\n          }\n        }\n        for (Map<String, Long> values : linearizedMatrix.values()) {\n          if (values.containsKey(klass)) {\n            fp += values.get(klass);\n          }\n        }\n      }\n      return tp > 0 ? tp / (tp + fp) : 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getPrecision(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getPrecision(String).mjava","sourceNew":"    /**\n     * calculate precision on the given class\n     *\n     * @param klass the class to calculate the precision for\n     * @return the precision for the given class\n     */\n    public double getPrecision(String klass) {\n      Map<String, Long> classifications = linearizedMatrix.get(klass);\n      double tp = 0;\n      double den = 0; // tp + fp\n      if (classifications != null) {\n        for (Map.Entry<String, Long> entry : classifications.entrySet()) {\n          if (klass.equals(entry.getKey())) {\n            tp += entry.getValue();\n          }\n        }\n        for (Map<String, Long> values : linearizedMatrix.values()) {\n          if (values.containsKey(klass)) {\n            den += values.get(klass);\n          }\n        }\n      }\n      return tp > 0 ? tp / den : 0;\n    }\n\n","sourceOld":"    /**\n     * calculate precision on the given class\n     *\n     * @param klass the class to calculate the precision for\n     * @return the precision for the given class\n     */\n    public double getPrecision(String klass) {\n      Map<String, Long> classifications = linearizedMatrix.get(klass);\n      double tp = 0;\n      double fp = 0;\n      if (classifications != null) {\n        for (Map.Entry<String, Long> entry : classifications.entrySet()) {\n          if (klass.equals(entry.getKey())) {\n            tp += entry.getValue();\n          }\n        }\n        for (Map<String, Long> values : linearizedMatrix.values()) {\n          if (values.containsKey(klass)) {\n            fp += values.get(klass);\n          }\n        }\n      }\n      return tp > 0 ? tp / (tp + fp) : 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f8bcd3226dfcc329379dc50da67a963739f6cb65":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"af434a00d10f0c45fcdb813ee70ba31baf83b155":["9dce777c41006be1f71018e7565152f6dbc67140"],"eff5db4d2f0dea2783c3351ff4b5b9e63e0b5299":["af434a00d10f0c45fcdb813ee70ba31baf83b155"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9dce777c41006be1f71018e7565152f6dbc67140":["c1c1ca1e9ab1271a360852c85d18bcb52157d087"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["af434a00d10f0c45fcdb813ee70ba31baf83b155","eff5db4d2f0dea2783c3351ff4b5b9e63e0b5299"],"83870855d82aba6819217abeff5a40779dbb28b4":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","f8bcd3226dfcc329379dc50da67a963739f6cb65"],"c1c1ca1e9ab1271a360852c85d18bcb52157d087":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","f8bcd3226dfcc329379dc50da67a963739f6cb65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8bcd3226dfcc329379dc50da67a963739f6cb65"]},"commit2Childs":{"f8bcd3226dfcc329379dc50da67a963739f6cb65":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"af434a00d10f0c45fcdb813ee70ba31baf83b155":["eff5db4d2f0dea2783c3351ff4b5b9e63e0b5299","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"eff5db4d2f0dea2783c3351ff4b5b9e63e0b5299":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c1c1ca1e9ab1271a360852c85d18bcb52157d087"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["f8bcd3226dfcc329379dc50da67a963739f6cb65","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9dce777c41006be1f71018e7565152f6dbc67140":["af434a00d10f0c45fcdb813ee70ba31baf83b155"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"c1c1ca1e9ab1271a360852c85d18bcb52157d087":["9dce777c41006be1f71018e7565152f6dbc67140"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}