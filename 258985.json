{"path":"solr/core/src/java/org/apache/solr/update/UpdateLog#trackDeleteByQuery(String,long).mjava","commits":[{"id":"fb999ed3fc6e419b9104de9ebfe62ace27f31d5f","date":1341327930,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#trackDeleteByQuery(String,long).mjava","pathOld":"/dev/null","sourceNew":"  void trackDeleteByQuery(String q, long version) {\n    version = Math.abs(version);\n    DBQ dbq = new DBQ();\n    dbq.q = q;\n    dbq.version = version;\n\n    synchronized (this) {\n      if (deleteByQueries.isEmpty() || deleteByQueries.getFirst().version < version) {\n        // common non-reordered case\n        deleteByQueries.addFirst(dbq);\n      } else {\n        // find correct insertion point\n        ListIterator<DBQ> iter = deleteByQueries.listIterator();\n        iter.next();  // we already checked the first element in the previous \"if\" clause\n        while (iter.hasNext()) {\n          DBQ oldDBQ = iter.next();\n          if (oldDBQ.version < version) {\n            iter.previous();\n            break;\n          } else if (oldDBQ.version == version && oldDBQ.q.equals(q)) {\n            // a duplicate\n            return;\n          }\n        }\n        iter.add(dbq);  // this also handles the case of adding at the end when hasNext() == false\n      }\n\n      if (deleteByQueries.size() > numDeletesByQueryToKeep) {\n        deleteByQueries.removeLast();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#trackDeleteByQuery(String,long).mjava","pathOld":"/dev/null","sourceNew":"  void trackDeleteByQuery(String q, long version) {\n    version = Math.abs(version);\n    DBQ dbq = new DBQ();\n    dbq.q = q;\n    dbq.version = version;\n\n    synchronized (this) {\n      if (deleteByQueries.isEmpty() || deleteByQueries.getFirst().version < version) {\n        // common non-reordered case\n        deleteByQueries.addFirst(dbq);\n      } else {\n        // find correct insertion point\n        ListIterator<DBQ> iter = deleteByQueries.listIterator();\n        iter.next();  // we already checked the first element in the previous \"if\" clause\n        while (iter.hasNext()) {\n          DBQ oldDBQ = iter.next();\n          if (oldDBQ.version < version) {\n            iter.previous();\n            break;\n          } else if (oldDBQ.version == version && oldDBQ.q.equals(q)) {\n            // a duplicate\n            return;\n          }\n        }\n        iter.add(dbq);  // this also handles the case of adding at the end when hasNext() == false\n      }\n\n      if (deleteByQueries.size() > numDeletesByQueryToKeep) {\n        deleteByQueries.removeLast();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb999ed3fc6e419b9104de9ebfe62ace27f31d5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fb999ed3fc6e419b9104de9ebfe62ace27f31d5f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb999ed3fc6e419b9104de9ebfe62ace27f31d5f"]},"commit2Childs":{"fb999ed3fc6e419b9104de9ebfe62ace27f31d5f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb999ed3fc6e419b9104de9ebfe62ace27f31d5f","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}