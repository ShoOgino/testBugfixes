{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#printLayout(String,int,StringBuilder).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#printLayout(String,int,StringBuilder).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/SolrZkClient#printLayout(String,int,StringBuilder).mjava","sourceNew":"  /**\n   * Fills string with printout of current ZooKeeper layout.\n   * \n   * @param path\n   * @param indent\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void printLayout(String path, int indent, StringBuilder string)\n      throws KeeperException, InterruptedException {\n    byte[] data = getData(path, null, null);\n    List<String> children = getChildren(path, null);\n    StringBuilder dent = new StringBuilder();\n    for (int i = 0; i < indent; i++) {\n      dent.append(\" \");\n    }\n    string.append(dent + path + \" (\" + children.size() + \")\" + NEWL);\n    if (data != null) {\n      try {\n        String dataString = new String(data, \"UTF-8\");\n        if (!path.endsWith(\".txt\") && !path.endsWith(\".xml\")) {\n          string.append(dent + \"DATA:\\n\" + dent + \"    \"\n              + dataString.replaceAll(\"\\n\", \"\\n\" + dent + \"    \") + NEWL);\n        } else {\n          string.append(dent + \"DATA: ...supressed...\" + NEWL);\n        }\n      } catch (UnsupportedEncodingException e) {\n        // can't happen - UTF-8\n        throw new RuntimeException(e);\n      }\n    }\n\n    for (String child : children) {\n      if (!child.equals(\"quota\")) {\n        printLayout(path + (path.equals(\"/\") ? \"\" : \"/\") + child, indent + 1,\n            string);\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Fills string with printout of current ZooKeeper layout.\n   * \n   * @param path\n   * @param indent\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void printLayout(String path, int indent, StringBuilder string)\n      throws KeeperException, InterruptedException {\n    byte[] data = getData(path, null, null);\n    List<String> children = getChildren(path, null);\n    StringBuilder dent = new StringBuilder();\n    for (int i = 0; i < indent; i++) {\n      dent.append(\" \");\n    }\n    string.append(dent + path + \" (\" + children.size() + \")\" + NEWL);\n    if (data != null) {\n      try {\n        String dataString = new String(data, \"UTF-8\");\n        if (!path.endsWith(\".txt\") && !path.endsWith(\".xml\")) {\n          string.append(dent + \"DATA:\\n\" + dent + \"    \"\n              + dataString.replaceAll(\"\\n\", \"\\n\" + dent + \"    \") + NEWL);\n        } else {\n          string.append(dent + \"DATA: ...supressed...\" + NEWL);\n        }\n      } catch (UnsupportedEncodingException e) {\n        // can't happen - UTF-8\n        throw new RuntimeException(e);\n      }\n    }\n\n    for (String child : children) {\n      if (!child.equals(\"quota\")) {\n        printLayout(path + (path.equals(\"/\") ? \"\" : \"/\") + child, indent + 1,\n            string);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#printLayout(String,int,StringBuilder).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/SolrZkClient#printLayout(String,int,StringBuilder).mjava","sourceNew":"  /**\n   * Fills string with printout of current ZooKeeper layout.\n   * \n   * @param path\n   * @param indent\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void printLayout(String path, int indent, StringBuilder string)\n      throws KeeperException, InterruptedException {\n    byte[] data = getData(path, null, null);\n    List<String> children = getChildren(path, null);\n    StringBuilder dent = new StringBuilder();\n    for (int i = 0; i < indent; i++) {\n      dent.append(\" \");\n    }\n    string.append(dent + path + \" (\" + children.size() + \")\" + NEWL);\n    if (data != null) {\n      try {\n        String dataString = new String(data, \"UTF-8\");\n        if (!path.endsWith(\".txt\") && !path.endsWith(\".xml\")) {\n          string.append(dent + \"DATA:\\n\" + dent + \"    \"\n              + dataString.replaceAll(\"\\n\", \"\\n\" + dent + \"    \") + NEWL);\n        } else {\n          string.append(dent + \"DATA: ...supressed...\" + NEWL);\n        }\n      } catch (UnsupportedEncodingException e) {\n        // can't happen - UTF-8\n        throw new RuntimeException(e);\n      }\n    }\n\n    for (String child : children) {\n      if (!child.equals(\"quota\")) {\n        printLayout(path + (path.equals(\"/\") ? \"\" : \"/\") + child, indent + 1,\n            string);\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Fills string with printout of current ZooKeeper layout.\n   * \n   * @param path\n   * @param indent\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void printLayout(String path, int indent, StringBuilder string)\n      throws KeeperException, InterruptedException {\n    byte[] data = getData(path, null, null);\n    List<String> children = getChildren(path, null);\n    StringBuilder dent = new StringBuilder();\n    for (int i = 0; i < indent; i++) {\n      dent.append(\" \");\n    }\n    string.append(dent + path + \" (\" + children.size() + \")\" + NEWL);\n    if (data != null) {\n      try {\n        String dataString = new String(data, \"UTF-8\");\n        if (!path.endsWith(\".txt\") && !path.endsWith(\".xml\")) {\n          string.append(dent + \"DATA:\\n\" + dent + \"    \"\n              + dataString.replaceAll(\"\\n\", \"\\n\" + dent + \"    \") + NEWL);\n        } else {\n          string.append(dent + \"DATA: ...supressed...\" + NEWL);\n        }\n      } catch (UnsupportedEncodingException e) {\n        // can't happen - UTF-8\n        throw new RuntimeException(e);\n      }\n    }\n\n    for (String child : children) {\n      if (!child.equals(\"quota\")) {\n        printLayout(path + (path.equals(\"/\") ? \"\" : \"/\") + child, indent + 1,\n            string);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#printLayout(String,int,StringBuilder).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/SolrZkClient#printLayout(String,int,StringBuilder).mjava","sourceNew":"  /**\n   * Fills string with printout of current ZooKeeper layout.\n   * \n   * @param path\n   * @param indent\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void printLayout(String path, int indent, StringBuilder string)\n      throws KeeperException, InterruptedException {\n    byte[] data = getData(path, null, null);\n    List<String> children = getChildren(path, null);\n    StringBuilder dent = new StringBuilder();\n    for (int i = 0; i < indent; i++) {\n      dent.append(\" \");\n    }\n    string.append(dent + path + \" (\" + children.size() + \")\" + NEWL);\n    if (data != null) {\n      try {\n        String dataString = new String(data, \"UTF-8\");\n        if (!path.endsWith(\".txt\") && !path.endsWith(\".xml\")) {\n          string.append(dent + \"DATA:\\n\" + dent + \"    \"\n              + dataString.replaceAll(\"\\n\", \"\\n\" + dent + \"    \") + NEWL);\n        } else {\n          string.append(dent + \"DATA: ...supressed...\" + NEWL);\n        }\n      } catch (UnsupportedEncodingException e) {\n        // can't happen - UTF-8\n        throw new RuntimeException(e);\n      }\n    }\n\n    for (String child : children) {\n      if (!child.equals(\"quota\")) {\n        printLayout(path + (path.equals(\"/\") ? \"\" : \"/\") + child, indent + 1,\n            string);\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Fills string with printout of current ZooKeeper layout.\n   * \n   * @param path\n   * @param indent\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void printLayout(String path, int indent, StringBuilder string)\n      throws KeeperException, InterruptedException {\n    byte[] data = getData(path, null, null);\n    List<String> children = getChildren(path, null);\n    StringBuilder dent = new StringBuilder();\n    for (int i = 0; i < indent; i++) {\n      dent.append(\" \");\n    }\n    string.append(dent + path + \" (\" + children.size() + \")\" + NEWL);\n    if (data != null) {\n      try {\n        String dataString = new String(data, \"UTF-8\");\n        if (!path.endsWith(\".txt\") && !path.endsWith(\".xml\")) {\n          string.append(dent + \"DATA:\\n\" + dent + \"    \"\n              + dataString.replaceAll(\"\\n\", \"\\n\" + dent + \"    \") + NEWL);\n        } else {\n          string.append(dent + \"DATA: ...supressed...\" + NEWL);\n        }\n      } catch (UnsupportedEncodingException e) {\n        // can't happen - UTF-8\n        throw new RuntimeException(e);\n      }\n    }\n\n    for (String child : children) {\n      if (!child.equals(\"quota\")) {\n        printLayout(path + (path.equals(\"/\") ? \"\" : \"/\") + child, indent + 1,\n            string);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#printLayout(String,int,StringBuilder).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#printLayout(String,int,StringBuilder).mjava","sourceNew":"  /**\n   * Fills string with printout of current ZooKeeper layout.\n   * \n   * @param path\n   * @param indent\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void printLayout(String path, int indent, StringBuilder string)\n      throws KeeperException, InterruptedException {\n    byte[] data = getData(path, null, null, true);\n    List<String> children = getChildren(path, null, true);\n    StringBuilder dent = new StringBuilder();\n    for (int i = 0; i < indent; i++) {\n      dent.append(\" \");\n    }\n    string.append(dent + path + \" (\" + children.size() + \")\" + NEWL);\n    if (data != null) {\n      try {\n        String dataString = new String(data, \"UTF-8\");\n        if ((!path.endsWith(\".txt\") && !path.endsWith(\".xml\")) || path.endsWith(ZkStateReader.CLUSTER_STATE)) {\n          if (path.endsWith(\".xml\")) {\n            // this is the cluster state in xml format - lets pretty print\n            dataString = prettyPrint(dataString);\n          }\n          \n          string.append(dent + \"DATA:\\n\" + dent + \"    \"\n              + dataString.replaceAll(\"\\n\", \"\\n\" + dent + \"    \") + NEWL);\n        } else {\n          string.append(dent + \"DATA: ...supressed...\" + NEWL);\n        }\n      } catch (UnsupportedEncodingException e) {\n        // can't happen - UTF-8\n        throw new RuntimeException(e);\n      }\n    }\n\n    for (String child : children) {\n      if (!child.equals(\"quota\")) {\n        try {\n          printLayout(path + (path.equals(\"/\") ? \"\" : \"/\") + child, indent + 1,\n              string);\n        } catch (NoNodeException e) {\n          // must have gone away\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Fills string with printout of current ZooKeeper layout.\n   * \n   * @param path\n   * @param indent\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void printLayout(String path, int indent, StringBuilder string)\n      throws KeeperException, InterruptedException {\n    byte[] data = getData(path, null, null);\n    List<String> children = getChildren(path, null);\n    StringBuilder dent = new StringBuilder();\n    for (int i = 0; i < indent; i++) {\n      dent.append(\" \");\n    }\n    string.append(dent + path + \" (\" + children.size() + \")\" + NEWL);\n    if (data != null) {\n      try {\n        String dataString = new String(data, \"UTF-8\");\n        if (!path.endsWith(\".txt\") && !path.endsWith(\".xml\")) {\n          string.append(dent + \"DATA:\\n\" + dent + \"    \"\n              + dataString.replaceAll(\"\\n\", \"\\n\" + dent + \"    \") + NEWL);\n        } else {\n          string.append(dent + \"DATA: ...supressed...\" + NEWL);\n        }\n      } catch (UnsupportedEncodingException e) {\n        // can't happen - UTF-8\n        throw new RuntimeException(e);\n      }\n    }\n\n    for (String child : children) {\n      if (!child.equals(\"quota\")) {\n        printLayout(path + (path.equals(\"/\") ? \"\" : \"/\") + child, indent + 1,\n            string);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#printLayout(String,int,StringBuilder).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#printLayout(String,int,StringBuilder).mjava","sourceNew":"  /**\n   * Fills string with printout of current ZooKeeper layout.\n   * \n   * @param path\n   * @param indent\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void printLayout(String path, int indent, StringBuilder string)\n      throws KeeperException, InterruptedException {\n    byte[] data = getData(path, null, null, true);\n    List<String> children = getChildren(path, null, true);\n    StringBuilder dent = new StringBuilder();\n    for (int i = 0; i < indent; i++) {\n      dent.append(\" \");\n    }\n    string.append(dent + path + \" (\" + children.size() + \")\" + NEWL);\n    if (data != null) {\n      try {\n        String dataString = new String(data, \"UTF-8\");\n        if ((!path.endsWith(\".txt\") && !path.endsWith(\".xml\")) || path.endsWith(ZkStateReader.CLUSTER_STATE)) {\n          if (path.endsWith(\".xml\")) {\n            // this is the cluster state in xml format - lets pretty print\n            dataString = prettyPrint(dataString);\n          }\n          \n          string.append(dent + \"DATA:\\n\" + dent + \"    \"\n              + dataString.replaceAll(\"\\n\", \"\\n\" + dent + \"    \") + NEWL);\n        } else {\n          string.append(dent + \"DATA: ...supressed...\" + NEWL);\n        }\n      } catch (UnsupportedEncodingException e) {\n        // can't happen - UTF-8\n        throw new RuntimeException(e);\n      }\n    }\n\n    for (String child : children) {\n      if (!child.equals(\"quota\")) {\n        try {\n          printLayout(path + (path.equals(\"/\") ? \"\" : \"/\") + child, indent + 1,\n              string);\n        } catch (NoNodeException e) {\n          // must have gone away\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Fills string with printout of current ZooKeeper layout.\n   * \n   * @param path\n   * @param indent\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void printLayout(String path, int indent, StringBuilder string)\n      throws KeeperException, InterruptedException {\n    byte[] data = getData(path, null, null);\n    List<String> children = getChildren(path, null);\n    StringBuilder dent = new StringBuilder();\n    for (int i = 0; i < indent; i++) {\n      dent.append(\" \");\n    }\n    string.append(dent + path + \" (\" + children.size() + \")\" + NEWL);\n    if (data != null) {\n      try {\n        String dataString = new String(data, \"UTF-8\");\n        if (!path.endsWith(\".txt\") && !path.endsWith(\".xml\")) {\n          string.append(dent + \"DATA:\\n\" + dent + \"    \"\n              + dataString.replaceAll(\"\\n\", \"\\n\" + dent + \"    \") + NEWL);\n        } else {\n          string.append(dent + \"DATA: ...supressed...\" + NEWL);\n        }\n      } catch (UnsupportedEncodingException e) {\n        // can't happen - UTF-8\n        throw new RuntimeException(e);\n      }\n    }\n\n    for (String child : children) {\n      if (!child.equals(\"quota\")) {\n        printLayout(path + (path.equals(\"/\") ? \"\" : \"/\") + child, indent + 1,\n            string);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#printLayout(String,int,StringBuilder).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#printLayout(String,int,StringBuilder).mjava","sourceNew":"  /**\n   * Fills string with printout of current ZooKeeper layout.\n   * \n   * @param path\n   * @param indent\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void printLayout(String path, int indent, StringBuilder string)\n      throws KeeperException, InterruptedException {\n    byte[] data = getData(path, null, null, true);\n    List<String> children = getChildren(path, null, true);\n    StringBuilder dent = new StringBuilder();\n    for (int i = 0; i < indent; i++) {\n      dent.append(\" \");\n    }\n    string.append(dent + path + \" (\" + children.size() + \")\" + NEWL);\n    if (data != null) {\n      try {\n        String dataString = new String(data, \"UTF-8\");\n        if ((!path.endsWith(\".txt\") && !path.endsWith(\".xml\")) || path.endsWith(ZkStateReader.CLUSTER_STATE)) {\n          if (path.endsWith(\".xml\")) {\n            // this is the cluster state in xml format - lets pretty print\n            dataString = prettyPrint(dataString);\n          }\n          \n          string.append(dent + \"DATA:\\n\" + dent + \"    \"\n              + dataString.replaceAll(\"\\n\", \"\\n\" + dent + \"    \") + NEWL);\n        } else {\n          string.append(dent + \"DATA: ...supressed...\" + NEWL);\n        }\n      } catch (UnsupportedEncodingException e) {\n        // can't happen - UTF-8\n        throw new RuntimeException(e);\n      }\n    }\n\n    for (String child : children) {\n      if (!child.equals(\"quota\")) {\n        try {\n          printLayout(path + (path.equals(\"/\") ? \"\" : \"/\") + child, indent + 1,\n              string);\n        } catch (NoNodeException e) {\n          // must have gone away\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Fills string with printout of current ZooKeeper layout.\n   * \n   * @param path\n   * @param indent\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void printLayout(String path, int indent, StringBuilder string)\n      throws KeeperException, InterruptedException {\n    byte[] data = getData(path, null, null);\n    List<String> children = getChildren(path, null);\n    StringBuilder dent = new StringBuilder();\n    for (int i = 0; i < indent; i++) {\n      dent.append(\" \");\n    }\n    string.append(dent + path + \" (\" + children.size() + \")\" + NEWL);\n    if (data != null) {\n      try {\n        String dataString = new String(data, \"UTF-8\");\n        if (!path.endsWith(\".txt\") && !path.endsWith(\".xml\")) {\n          string.append(dent + \"DATA:\\n\" + dent + \"    \"\n              + dataString.replaceAll(\"\\n\", \"\\n\" + dent + \"    \") + NEWL);\n        } else {\n          string.append(dent + \"DATA: ...supressed...\" + NEWL);\n        }\n      } catch (UnsupportedEncodingException e) {\n        // can't happen - UTF-8\n        throw new RuntimeException(e);\n      }\n    }\n\n    for (String child : children) {\n      if (!child.equals(\"quota\")) {\n        printLayout(path + (path.equals(\"/\") ? \"\" : \"/\") + child, indent + 1,\n            string);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#printLayout(String,int,StringBuilder).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#printLayout(String,int,StringBuilder).mjava","sourceNew":"  /**\n   * Fills string with printout of current ZooKeeper layout.\n   */\n  public void printLayout(String path, int indent, StringBuilder string)\n      throws KeeperException, InterruptedException {\n    byte[] data = getData(path, null, null, true);\n    List<String> children = getChildren(path, null, true);\n    StringBuilder dent = new StringBuilder();\n    for (int i = 0; i < indent; i++) {\n      dent.append(\" \");\n    }\n    string.append(dent + path + \" (\" + children.size() + \")\" + NEWL);\n    if (data != null) {\n      try {\n        String dataString = new String(data, \"UTF-8\");\n        if ((!path.endsWith(\".txt\") && !path.endsWith(\".xml\")) || path.endsWith(ZkStateReader.CLUSTER_STATE)) {\n          if (path.endsWith(\".xml\")) {\n            // this is the cluster state in xml format - lets pretty print\n            dataString = prettyPrint(dataString);\n          }\n          \n          string.append(dent + \"DATA:\\n\" + dent + \"    \"\n              + dataString.replaceAll(\"\\n\", \"\\n\" + dent + \"    \") + NEWL);\n        } else {\n          string.append(dent + \"DATA: ...supressed...\" + NEWL);\n        }\n      } catch (UnsupportedEncodingException e) {\n        // can't happen - UTF-8\n        throw new RuntimeException(e);\n      }\n    }\n\n    for (String child : children) {\n      if (!child.equals(\"quota\")) {\n        try {\n          printLayout(path + (path.equals(\"/\") ? \"\" : \"/\") + child, indent + 1,\n              string);\n        } catch (NoNodeException e) {\n          // must have gone away\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Fills string with printout of current ZooKeeper layout.\n   * \n   * @param path\n   * @param indent\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void printLayout(String path, int indent, StringBuilder string)\n      throws KeeperException, InterruptedException {\n    byte[] data = getData(path, null, null, true);\n    List<String> children = getChildren(path, null, true);\n    StringBuilder dent = new StringBuilder();\n    for (int i = 0; i < indent; i++) {\n      dent.append(\" \");\n    }\n    string.append(dent + path + \" (\" + children.size() + \")\" + NEWL);\n    if (data != null) {\n      try {\n        String dataString = new String(data, \"UTF-8\");\n        if ((!path.endsWith(\".txt\") && !path.endsWith(\".xml\")) || path.endsWith(ZkStateReader.CLUSTER_STATE)) {\n          if (path.endsWith(\".xml\")) {\n            // this is the cluster state in xml format - lets pretty print\n            dataString = prettyPrint(dataString);\n          }\n          \n          string.append(dent + \"DATA:\\n\" + dent + \"    \"\n              + dataString.replaceAll(\"\\n\", \"\\n\" + dent + \"    \") + NEWL);\n        } else {\n          string.append(dent + \"DATA: ...supressed...\" + NEWL);\n        }\n      } catch (UnsupportedEncodingException e) {\n        // can't happen - UTF-8\n        throw new RuntimeException(e);\n      }\n    }\n\n    for (String child : children) {\n      if (!child.equals(\"quota\")) {\n        try {\n          printLayout(path + (path.equals(\"/\") ? \"\" : \"/\") + child, indent + 1,\n              string);\n        } catch (NoNodeException e) {\n          // must have gone away\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#printLayout(String,int,StringBuilder).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#printLayout(String,int,StringBuilder).mjava","sourceNew":"  /**\n   * Fills string with printout of current ZooKeeper layout.\n   */\n  public void printLayout(String path, int indent, StringBuilder string)\n      throws KeeperException, InterruptedException {\n    byte[] data = getData(path, null, null, true);\n    List<String> children = getChildren(path, null, true);\n    StringBuilder dent = new StringBuilder();\n    for (int i = 0; i < indent; i++) {\n      dent.append(\" \");\n    }\n    string.append(dent + path + \" (\" + children.size() + \")\" + NEWL);\n    if (data != null) {\n      String dataString = new String(data, StandardCharsets.UTF_8);\n      if ((!path.endsWith(\".txt\") && !path.endsWith(\".xml\")) || path.endsWith(ZkStateReader.CLUSTER_STATE)) {\n        if (path.endsWith(\".xml\")) {\n          // this is the cluster state in xml format - lets pretty print\n          dataString = prettyPrint(dataString);\n        }\n        \n        string.append(dent + \"DATA:\\n\" + dent + \"    \"\n            + dataString.replaceAll(\"\\n\", \"\\n\" + dent + \"    \") + NEWL);\n      } else {\n        string.append(dent + \"DATA: ...supressed...\" + NEWL);\n      }\n    }\n\n    for (String child : children) {\n      if (!child.equals(\"quota\")) {\n        try {\n          printLayout(path + (path.equals(\"/\") ? \"\" : \"/\") + child, indent + 1,\n              string);\n        } catch (NoNodeException e) {\n          // must have gone away\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Fills string with printout of current ZooKeeper layout.\n   */\n  public void printLayout(String path, int indent, StringBuilder string)\n      throws KeeperException, InterruptedException {\n    byte[] data = getData(path, null, null, true);\n    List<String> children = getChildren(path, null, true);\n    StringBuilder dent = new StringBuilder();\n    for (int i = 0; i < indent; i++) {\n      dent.append(\" \");\n    }\n    string.append(dent + path + \" (\" + children.size() + \")\" + NEWL);\n    if (data != null) {\n      try {\n        String dataString = new String(data, \"UTF-8\");\n        if ((!path.endsWith(\".txt\") && !path.endsWith(\".xml\")) || path.endsWith(ZkStateReader.CLUSTER_STATE)) {\n          if (path.endsWith(\".xml\")) {\n            // this is the cluster state in xml format - lets pretty print\n            dataString = prettyPrint(dataString);\n          }\n          \n          string.append(dent + \"DATA:\\n\" + dent + \"    \"\n              + dataString.replaceAll(\"\\n\", \"\\n\" + dent + \"    \") + NEWL);\n        } else {\n          string.append(dent + \"DATA: ...supressed...\" + NEWL);\n        }\n      } catch (UnsupportedEncodingException e) {\n        // can't happen - UTF-8\n        throw new RuntimeException(e);\n      }\n    }\n\n    for (String child : children) {\n      if (!child.equals(\"quota\")) {\n        try {\n          printLayout(path + (path.equals(\"/\") ? \"\" : \"/\") + child, indent + 1,\n              string);\n        } catch (NoNodeException e) {\n          // must have gone away\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#printLayout(String,int,StringBuilder).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#printLayout(String,int,StringBuilder).mjava","sourceNew":"  /**\n   * Fills string with printout of current ZooKeeper layout.\n   */\n  public void printLayout(String path, int indent, StringBuilder string)\n      throws KeeperException, InterruptedException {\n    byte[] data = getData(path, null, null, true);\n    List<String> children = getChildren(path, null, true);\n    StringBuilder dent = new StringBuilder();\n    for (int i = 0; i < indent; i++) {\n      dent.append(\" \");\n    }\n    string.append(dent + path + \" (\" + children.size() + \")\" + NEWL);\n    if (data != null) {\n      String dataString = new String(data, StandardCharsets.UTF_8);\n      if ((!path.endsWith(\".txt\") && !path.endsWith(\".xml\")) || path.endsWith(ZkStateReader.CLUSTER_STATE)) {\n        if (path.endsWith(\".xml\")) {\n          // this is the cluster state in xml format - lets pretty print\n          dataString = prettyPrint(dataString);\n        }\n        \n        string.append(dent + \"DATA:\\n\" + dent + \"    \"\n            + dataString.replaceAll(\"\\n\", \"\\n\" + dent + \"    \") + NEWL);\n      } else {\n        string.append(dent + \"DATA: ...supressed...\" + NEWL);\n      }\n    }\n\n    for (String child : children) {\n      if (!child.equals(\"quota\")) {\n        try {\n          printLayout(path + (path.equals(\"/\") ? \"\" : \"/\") + child, indent + 1,\n              string);\n        } catch (NoNodeException e) {\n          // must have gone away\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Fills string with printout of current ZooKeeper layout.\n   */\n  public void printLayout(String path, int indent, StringBuilder string)\n      throws KeeperException, InterruptedException {\n    byte[] data = getData(path, null, null, true);\n    List<String> children = getChildren(path, null, true);\n    StringBuilder dent = new StringBuilder();\n    for (int i = 0; i < indent; i++) {\n      dent.append(\" \");\n    }\n    string.append(dent + path + \" (\" + children.size() + \")\" + NEWL);\n    if (data != null) {\n      try {\n        String dataString = new String(data, \"UTF-8\");\n        if ((!path.endsWith(\".txt\") && !path.endsWith(\".xml\")) || path.endsWith(ZkStateReader.CLUSTER_STATE)) {\n          if (path.endsWith(\".xml\")) {\n            // this is the cluster state in xml format - lets pretty print\n            dataString = prettyPrint(dataString);\n          }\n          \n          string.append(dent + \"DATA:\\n\" + dent + \"    \"\n              + dataString.replaceAll(\"\\n\", \"\\n\" + dent + \"    \") + NEWL);\n        } else {\n          string.append(dent + \"DATA: ...supressed...\" + NEWL);\n        }\n      } catch (UnsupportedEncodingException e) {\n        // can't happen - UTF-8\n        throw new RuntimeException(e);\n      }\n    }\n\n    for (String child : children) {\n      if (!child.equals(\"quota\")) {\n        try {\n          printLayout(path + (path.equals(\"/\") ? \"\" : \"/\") + child, indent + 1,\n              string);\n        } catch (NoNodeException e) {\n          // must have gone away\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#printLayout(String,int,StringBuilder).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#printLayout(String,int,StringBuilder).mjava","sourceNew":"  /**\n   * Fills string with printout of current ZooKeeper layout.\n   */\n  public void printLayout(String path, int indent, StringBuilder string)\n      throws KeeperException, InterruptedException {\n    byte[] data = getData(path, null, null, true);\n    List<String> children = getChildren(path, null, true);\n    StringBuilder dent = new StringBuilder();\n    for (int i = 0; i < indent; i++) {\n      dent.append(\" \");\n    }\n    string.append(dent + path + \" (\" + children.size() + \")\" + NEWL);\n    if (data != null) {\n      String dataString = new String(data, StandardCharsets.UTF_8);\n      if ((!path.endsWith(\".txt\") && !path.endsWith(\".xml\")) || path.endsWith(ZkStateReader.CLUSTER_STATE)) {\n        if (path.endsWith(\".xml\")) {\n          // this is the cluster state in xml format - lets pretty print\n          dataString = prettyPrint(dataString);\n        }\n\n        string.append(dent + \"DATA:\\n\" + dent + \"    \"\n            + dataString.replaceAll(\"\\n\", \"\\n\" + dent + \"    \") + NEWL);\n      } else {\n        string.append(dent + \"DATA: ...supressed...\" + NEWL);\n      }\n    }\n\n    for (String child : children) {\n      if (!child.equals(\"quota\")) {\n        try {\n          printLayout(path + (path.equals(\"/\") ? \"\" : \"/\") + child, indent + 1,\n              string);\n        } catch (NoNodeException e) {\n          // must have gone away\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Fills string with printout of current ZooKeeper layout.\n   */\n  public void printLayout(String path, int indent, StringBuilder string)\n      throws KeeperException, InterruptedException {\n    byte[] data = getData(path, null, null, true);\n    List<String> children = getChildren(path, null, true);\n    StringBuilder dent = new StringBuilder();\n    for (int i = 0; i < indent; i++) {\n      dent.append(\" \");\n    }\n    string.append(dent + path + \" (\" + children.size() + \")\" + NEWL);\n    if (data != null) {\n      String dataString = new String(data, StandardCharsets.UTF_8);\n      if ((!path.endsWith(\".txt\") && !path.endsWith(\".xml\")) || path.endsWith(ZkStateReader.CLUSTER_STATE)) {\n        if (path.endsWith(\".xml\")) {\n          // this is the cluster state in xml format - lets pretty print\n          dataString = prettyPrint(dataString);\n        }\n        \n        string.append(dent + \"DATA:\\n\" + dent + \"    \"\n            + dataString.replaceAll(\"\\n\", \"\\n\" + dent + \"    \") + NEWL);\n      } else {\n        string.append(dent + \"DATA: ...supressed...\" + NEWL);\n      }\n    }\n\n    for (String child : children) {\n      if (!child.equals(\"quota\")) {\n        try {\n          printLayout(path + (path.equals(\"/\") ? \"\" : \"/\") + child, indent + 1,\n              string);\n        } catch (NoNodeException e) {\n          // must have gone away\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ffe681f212e5073c69955b4ad22946794c84940","date":1560182863,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#printLayout(String,int,StringBuilder).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#printLayout(String,int,StringBuilder).mjava","sourceNew":"  /**\n   * Fills string with printout of current ZooKeeper layout.\n   */\n  public void printLayout(String path, int indent, StringBuilder string)\n      throws KeeperException, InterruptedException {\n    byte[] data = getData(path, null, null, true);\n    List<String> children = getChildren(path, null, true);\n    StringBuilder dent = new StringBuilder();\n    for (int i = 0; i < indent; i++) {\n      dent.append(\" \");\n    }\n    string.append(dent).append(path).append(\" (\").append(children.size()).append(\")\").append(NEWL);\n    if (data != null) {\n      String dataString = new String(data, StandardCharsets.UTF_8);\n      if ((!path.endsWith(\".txt\") && !path.endsWith(\".xml\")) || path.endsWith(ZkStateReader.CLUSTER_STATE)) {\n        if (path.endsWith(\".xml\")) {\n          // this is the cluster state in xml format - lets pretty print\n          dataString = prettyPrint(dataString);\n        }\n\n        string.append(dent).append(\"DATA:\\n\").append(dent).append(\"    \").append(dataString.replaceAll(\"\\n\", \"\\n\" + dent + \"    \")).append(NEWL);\n      } else {\n        string.append(dent).append(\"DATA: ...supressed...\").append(NEWL);\n      }\n    }\n\n    for (String child : children) {\n      if (!child.equals(\"quota\")) {\n        try {\n          printLayout(path + (path.equals(\"/\") ? \"\" : \"/\") + child, indent + 1,\n              string);\n        } catch (NoNodeException e) {\n          // must have gone away\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Fills string with printout of current ZooKeeper layout.\n   */\n  public void printLayout(String path, int indent, StringBuilder string)\n      throws KeeperException, InterruptedException {\n    byte[] data = getData(path, null, null, true);\n    List<String> children = getChildren(path, null, true);\n    StringBuilder dent = new StringBuilder();\n    for (int i = 0; i < indent; i++) {\n      dent.append(\" \");\n    }\n    string.append(dent + path + \" (\" + children.size() + \")\" + NEWL);\n    if (data != null) {\n      String dataString = new String(data, StandardCharsets.UTF_8);\n      if ((!path.endsWith(\".txt\") && !path.endsWith(\".xml\")) || path.endsWith(ZkStateReader.CLUSTER_STATE)) {\n        if (path.endsWith(\".xml\")) {\n          // this is the cluster state in xml format - lets pretty print\n          dataString = prettyPrint(dataString);\n        }\n\n        string.append(dent + \"DATA:\\n\" + dent + \"    \"\n            + dataString.replaceAll(\"\\n\", \"\\n\" + dent + \"    \") + NEWL);\n      } else {\n        string.append(dent + \"DATA: ...supressed...\" + NEWL);\n      }\n    }\n\n    for (String child : children) {\n      if (!child.equals(\"quota\")) {\n        try {\n          printLayout(path + (path.equals(\"/\") ? \"\" : \"/\") + child, indent + 1,\n              string);\n        } catch (NoNodeException e) {\n          // must have gone away\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#printLayout(String,int,StringBuilder).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#printLayout(String,int,StringBuilder).mjava","sourceNew":"  /**\n   * Fills string with printout of current ZooKeeper layout.\n   */\n  public void printLayout(String path, int indent, StringBuilder string)\n      throws KeeperException, InterruptedException {\n    byte[] data = getData(path, null, null, true);\n    List<String> children = getChildren(path, null, true);\n    StringBuilder dent = new StringBuilder();\n    for (int i = 0; i < indent; i++) {\n      dent.append(\" \");\n    }\n    string.append(dent).append(path).append(\" (\").append(children.size()).append(\")\").append(NEWL);\n    if (data != null) {\n      String dataString = new String(data, StandardCharsets.UTF_8);\n      if (!path.endsWith(\".txt\") && !path.endsWith(\".xml\")) {\n        string.append(dent).append(\"DATA:\\n\").append(dent).append(\"    \").append(dataString.replaceAll(\"\\n\", \"\\n\" + dent + \"    \")).append(NEWL);\n      } else {\n        string.append(dent).append(\"DATA: ...supressed...\").append(NEWL);\n      }\n    }\n\n    for (String child : children) {\n      if (!child.equals(\"quota\")) {\n        try {\n          printLayout(path + (path.equals(\"/\") ? \"\" : \"/\") + child, indent + 1,\n              string);\n        } catch (NoNodeException e) {\n          // must have gone away\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Fills string with printout of current ZooKeeper layout.\n   */\n  public void printLayout(String path, int indent, StringBuilder string)\n      throws KeeperException, InterruptedException {\n    byte[] data = getData(path, null, null, true);\n    List<String> children = getChildren(path, null, true);\n    StringBuilder dent = new StringBuilder();\n    for (int i = 0; i < indent; i++) {\n      dent.append(\" \");\n    }\n    string.append(dent).append(path).append(\" (\").append(children.size()).append(\")\").append(NEWL);\n    if (data != null) {\n      String dataString = new String(data, StandardCharsets.UTF_8);\n      if ((!path.endsWith(\".txt\") && !path.endsWith(\".xml\")) || path.endsWith(ZkStateReader.CLUSTER_STATE)) {\n        if (path.endsWith(\".xml\")) {\n          // this is the cluster state in xml format - lets pretty print\n          dataString = prettyPrint(dataString);\n        }\n\n        string.append(dent).append(\"DATA:\\n\").append(dent).append(\"    \").append(dataString.replaceAll(\"\\n\", \"\\n\" + dent + \"    \")).append(NEWL);\n      } else {\n        string.append(dent).append(\"DATA: ...supressed...\").append(NEWL);\n      }\n    }\n\n    for (String child : children) {\n      if (!child.equals(\"quota\")) {\n        try {\n          printLayout(path + (path.equals(\"/\") ? \"\" : \"/\") + child, indent + 1,\n              string);\n        } catch (NoNodeException e) {\n          // must have gone away\n        }\n      }\n    }\n\n  }\n\n","bugFix":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","86290366cefc1b9d4eced13b430858c4a4c0421d","7d89d7e4e5101347833eea558851bf4209218619"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"5eb2511ababf862ea11e10761c70ee560cd84510":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","7d89d7e4e5101347833eea558851bf4209218619"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["2ffe681f212e5073c69955b4ad22946794c84940"],"2ffe681f212e5073c69955b4ad22946794c84940":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"7d89d7e4e5101347833eea558851bf4209218619":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["7d89d7e4e5101347833eea558851bf4209218619"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2ffe681f212e5073c69955b4ad22946794c84940":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"c26f00b574427b55127e869b935845554afde1fa":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","86290366cefc1b9d4eced13b430858c4a4c0421d"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["2ffe681f212e5073c69955b4ad22946794c84940"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}