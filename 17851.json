{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestPrefixCompletionQuery#testMostlyFilteredOutDocuments().mjava","commits":[{"id":"8c33f6677a2078739058f81eca1df69d12cd62b0","date":1432799589,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestPrefixCompletionQuery#testMostlyFilteredOutDocuments().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/SuggestFieldTest#testSuggestOnMostlyFilteredOutDocuments().mjava","sourceNew":"  @Test\n  public void testMostlyFilteredOutDocuments() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    int num = Math.min(1000, atLeast(10));\n    Document document = new Document();\n    for (int i = 0; i < num; i++) {\n      document.add(new SuggestField(\"suggest_field\", \"abc_\" + i, i));\n      document.add(new IntField(\"filter_int_fld\", i, Field.Store.NO));\n      iw.addDocument(document);\n      document.clear();\n\n      if (usually()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n\n    int topScore = num/2;\n    QueryWrapperFilter filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, topScore, true, true));\n    Filter filter = randomAccessFilter(filterWrapper);\n    PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if at most half of the top scoring documents have been filtered out\n    // the search should be admissible for a single segment\n    TopSuggestDocs suggest = indexSearcher.suggest(query, num);\n    assertTrue(suggest.totalHits >= 1);\n    assertThat(suggest.scoreLookupDocs()[0].key.toString(), equalTo(\"abc_\" + topScore));\n    assertThat(suggest.scoreLookupDocs()[0].score, equalTo((float) topScore));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, 0, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if more than half of the top scoring documents have been filtered out\n    // search is not admissible, so # of suggestions requested is num instead of 1\n    suggest = indexSearcher.suggest(query, num);\n    assertSuggestions(suggest, new Entry(\"abc_0\", 0));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", num - 1, num - 1, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if only lower scoring documents are filtered out\n    // search is admissible\n    suggest = indexSearcher.suggest(query, 1);\n    assertSuggestions(suggest, new Entry(\"abc_\" + (num - 1), num - 1));\n\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSuggestOnMostlyFilteredOutDocuments() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    int num = Math.min(1000, atLeast(10));\n    Document document = new Document();\n    for (int i = 0; i < num; i++) {\n      document.add(newSuggestField(\"suggest_field\", \"abc_\" + i, i));\n      document.add(new IntField(\"filter_int_fld\", i, Field.Store.NO));\n      iw.addDocument(document);\n      document.clear();\n\n      if (usually()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader, analyzer);\n\n    int topScore = num/2;\n    QueryWrapperFilter filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, topScore, true, true));\n    Filter filter = randomAccessFilter(filterWrapper);\n    // if at most half of the top scoring documents have been filtered out\n    // the search should be admissible for a single segment\n    TopSuggestDocs suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", num, filter);\n    assertTrue(suggest.totalHits >= 1);\n    assertThat(suggest.scoreLookupDocs()[0].key.toString(), equalTo(\"abc_\" + topScore));\n    assertThat(suggest.scoreLookupDocs()[0].score, equalTo((float) topScore));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, 0, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    // if more than half of the top scoring documents have been filtered out\n    // search is not admissible, so # of suggestions requested is num instead of 1\n    suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", num, filter);\n    assertSuggestions(suggest, new Entry(\"abc_0\", 0));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", num - 1, num - 1, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    // if only lower scoring documents are filtered out\n    // search is admissible\n    suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", 1, filter);\n    assertSuggestions(suggest, new Entry(\"abc_\" + (num - 1), num - 1));\n\n    reader.close();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e919be7c57e6b5ae11c5beaa2b528f092f7687c4","date":1432802319,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestPrefixCompletionQuery#testMostlyFilteredOutDocuments().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestPrefixCompletionQuery#testMostlyFilteredOutDocuments().mjava","sourceNew":"  @Test\n  public void testMostlyFilteredOutDocuments() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    int num = Math.min(1000, atLeast(10));\n    for (int i = 0; i < num; i++) {\n      Document document = new Document();\n      document.add(new SuggestField(\"suggest_field\", \"abc_\" + i, i));\n      document.add(new IntField(\"filter_int_fld\", i, Field.Store.NO));\n      iw.addDocument(document);\n\n      if (usually()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n\n    int topScore = num/2;\n    QueryWrapperFilter filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, topScore, true, true));\n    Filter filter = randomAccessFilter(filterWrapper);\n    PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if at most half of the top scoring documents have been filtered out\n    // the search should be admissible for a single segment\n    TopSuggestDocs suggest = indexSearcher.suggest(query, num);\n    assertTrue(suggest.totalHits >= 1);\n    assertThat(suggest.scoreLookupDocs()[0].key.toString(), equalTo(\"abc_\" + topScore));\n    assertThat(suggest.scoreLookupDocs()[0].score, equalTo((float) topScore));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, 0, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if more than half of the top scoring documents have been filtered out\n    // search is not admissible, so # of suggestions requested is num instead of 1\n    suggest = indexSearcher.suggest(query, num);\n    assertSuggestions(suggest, new Entry(\"abc_0\", 0));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", num - 1, num - 1, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if only lower scoring documents are filtered out\n    // search is admissible\n    suggest = indexSearcher.suggest(query, 1);\n    assertSuggestions(suggest, new Entry(\"abc_\" + (num - 1), num - 1));\n\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMostlyFilteredOutDocuments() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    int num = Math.min(1000, atLeast(10));\n    Document document = new Document();\n    for (int i = 0; i < num; i++) {\n      document.add(new SuggestField(\"suggest_field\", \"abc_\" + i, i));\n      document.add(new IntField(\"filter_int_fld\", i, Field.Store.NO));\n      iw.addDocument(document);\n      document.clear();\n\n      if (usually()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n\n    int topScore = num/2;\n    QueryWrapperFilter filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, topScore, true, true));\n    Filter filter = randomAccessFilter(filterWrapper);\n    PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if at most half of the top scoring documents have been filtered out\n    // the search should be admissible for a single segment\n    TopSuggestDocs suggest = indexSearcher.suggest(query, num);\n    assertTrue(suggest.totalHits >= 1);\n    assertThat(suggest.scoreLookupDocs()[0].key.toString(), equalTo(\"abc_\" + topScore));\n    assertThat(suggest.scoreLookupDocs()[0].score, equalTo((float) topScore));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, 0, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if more than half of the top scoring documents have been filtered out\n    // search is not admissible, so # of suggestions requested is num instead of 1\n    suggest = indexSearcher.suggest(query, num);\n    assertSuggestions(suggest, new Entry(\"abc_0\", 0));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", num - 1, num - 1, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if only lower scoring documents are filtered out\n    // search is admissible\n    suggest = indexSearcher.suggest(query, 1);\n    assertSuggestions(suggest, new Entry(\"abc_\" + (num - 1), num - 1));\n\n    reader.close();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8cd299e7a00489961ab0877977e0f1b9f48a4c15","date":1435768484,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestPrefixCompletionQuery#testMostlyFilteredOutDocuments().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestPrefixCompletionQuery#testMostlyFilteredOutDocuments().mjava","sourceNew":"  @Test\n  public void testMostlyFilteredOutDocuments() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    int num = Math.min(1000, atLeast(10));\n    for (int i = 0; i < num; i++) {\n      Document document = new Document();\n      document.add(new SuggestField(\"suggest_field\", \"abc_\" + i, i));\n      document.add(new NumericDocValuesField(\"filter_int_fld\", i));\n      iw.addDocument(document);\n\n      if (usually()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n\n    int topScore = num/2;\n    BitsProducer filter = new NumericRangeBitsProducer(\"filter_int_fld\", 0, topScore);\n    PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if at most half of the top scoring documents have been filtered out\n    // the search should be admissible for a single segment\n    TopSuggestDocs suggest = indexSearcher.suggest(query, num);\n    assertTrue(suggest.totalHits >= 1);\n    assertThat(suggest.scoreLookupDocs()[0].key.toString(), equalTo(\"abc_\" + topScore));\n    assertThat(suggest.scoreLookupDocs()[0].score, equalTo((float) topScore));\n\n    filter = new NumericRangeBitsProducer(\"filter_int_fld\", 0, 0);\n    query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if more than half of the top scoring documents have been filtered out\n    // search is not admissible, so # of suggestions requested is num instead of 1\n    suggest = indexSearcher.suggest(query, num);\n    assertSuggestions(suggest, new Entry(\"abc_0\", 0));\n\n    filter = new NumericRangeBitsProducer(\"filter_int_fld\", num - 1, num - 1);\n    query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if only lower scoring documents are filtered out\n    // search is admissible\n    suggest = indexSearcher.suggest(query, 1);\n    assertSuggestions(suggest, new Entry(\"abc_\" + (num - 1), num - 1));\n\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMostlyFilteredOutDocuments() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    int num = Math.min(1000, atLeast(10));\n    for (int i = 0; i < num; i++) {\n      Document document = new Document();\n      document.add(new SuggestField(\"suggest_field\", \"abc_\" + i, i));\n      document.add(new IntField(\"filter_int_fld\", i, Field.Store.NO));\n      iw.addDocument(document);\n\n      if (usually()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n\n    int topScore = num/2;\n    QueryWrapperFilter filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, topScore, true, true));\n    Filter filter = randomAccessFilter(filterWrapper);\n    PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if at most half of the top scoring documents have been filtered out\n    // the search should be admissible for a single segment\n    TopSuggestDocs suggest = indexSearcher.suggest(query, num);\n    assertTrue(suggest.totalHits >= 1);\n    assertThat(suggest.scoreLookupDocs()[0].key.toString(), equalTo(\"abc_\" + topScore));\n    assertThat(suggest.scoreLookupDocs()[0].score, equalTo((float) topScore));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, 0, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if more than half of the top scoring documents have been filtered out\n    // search is not admissible, so # of suggestions requested is num instead of 1\n    suggest = indexSearcher.suggest(query, num);\n    assertSuggestions(suggest, new Entry(\"abc_0\", 0));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", num - 1, num - 1, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if only lower scoring documents are filtered out\n    // search is admissible\n    suggest = indexSearcher.suggest(query, 1);\n    assertSuggestions(suggest, new Entry(\"abc_\" + (num - 1), num - 1));\n\n    reader.close();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b25391c4edacd53174760022f46a27be00ef52b3","date":1479290030,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestPrefixCompletionQuery#testMostlyFilteredOutDocuments().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestPrefixCompletionQuery#testMostlyFilteredOutDocuments().mjava","sourceNew":"  public void testMostlyFilteredOutDocuments() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    int num = Math.min(1000, atLeast(10));\n    for (int i = 0; i < num; i++) {\n      Document document = new Document();\n      document.add(new SuggestField(\"suggest_field\", \"abc_\" + i, i));\n      document.add(new NumericDocValuesField(\"filter_int_fld\", i));\n      iw.addDocument(document);\n\n      if (usually()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n\n    int topScore = num/2;\n    BitsProducer filter = new NumericRangeBitsProducer(\"filter_int_fld\", 0, topScore);\n    PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if at most half of the top scoring documents have been filtered out\n    // the search should be admissible for a single segment\n    TopSuggestDocs suggest = indexSearcher.suggest(query, num);\n    assertTrue(suggest.totalHits >= 1);\n    assertThat(suggest.scoreLookupDocs()[0].key.toString(), equalTo(\"abc_\" + topScore));\n    assertThat(suggest.scoreLookupDocs()[0].score, equalTo((float) topScore));\n\n    filter = new NumericRangeBitsProducer(\"filter_int_fld\", 0, 0);\n    query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if more than half of the top scoring documents have been filtered out\n    // search is not admissible, so # of suggestions requested is num instead of 1\n    suggest = indexSearcher.suggest(query, num);\n    assertSuggestions(suggest, new Entry(\"abc_0\", 0));\n\n    filter = new NumericRangeBitsProducer(\"filter_int_fld\", num - 1, num - 1);\n    query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if only lower scoring documents are filtered out\n    // search is admissible\n    suggest = indexSearcher.suggest(query, 1);\n    assertSuggestions(suggest, new Entry(\"abc_\" + (num - 1), num - 1));\n\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMostlyFilteredOutDocuments() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    int num = Math.min(1000, atLeast(10));\n    for (int i = 0; i < num; i++) {\n      Document document = new Document();\n      document.add(new SuggestField(\"suggest_field\", \"abc_\" + i, i));\n      document.add(new NumericDocValuesField(\"filter_int_fld\", i));\n      iw.addDocument(document);\n\n      if (usually()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n\n    int topScore = num/2;\n    BitsProducer filter = new NumericRangeBitsProducer(\"filter_int_fld\", 0, topScore);\n    PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if at most half of the top scoring documents have been filtered out\n    // the search should be admissible for a single segment\n    TopSuggestDocs suggest = indexSearcher.suggest(query, num);\n    assertTrue(suggest.totalHits >= 1);\n    assertThat(suggest.scoreLookupDocs()[0].key.toString(), equalTo(\"abc_\" + topScore));\n    assertThat(suggest.scoreLookupDocs()[0].score, equalTo((float) topScore));\n\n    filter = new NumericRangeBitsProducer(\"filter_int_fld\", 0, 0);\n    query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if more than half of the top scoring documents have been filtered out\n    // search is not admissible, so # of suggestions requested is num instead of 1\n    suggest = indexSearcher.suggest(query, num);\n    assertSuggestions(suggest, new Entry(\"abc_0\", 0));\n\n    filter = new NumericRangeBitsProducer(\"filter_int_fld\", num - 1, num - 1);\n    query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if only lower scoring documents are filtered out\n    // search is admissible\n    suggest = indexSearcher.suggest(query, 1);\n    assertSuggestions(suggest, new Entry(\"abc_\" + (num - 1), num - 1));\n\n    reader.close();\n    iw.close();\n  }\n\n","bugFix":["07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e859e664a65796dadf8aaf65db6f66f3a885368","date":1479487334,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestPrefixCompletionQuery#testMostlyFilteredOutDocuments().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestPrefixCompletionQuery#testMostlyFilteredOutDocuments().mjava","sourceNew":"  public void testMostlyFilteredOutDocuments() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    int num = Math.min(1000, atLeast(10));\n    for (int i = 0; i < num; i++) {\n      Document document = new Document();\n      document.add(new SuggestField(\"suggest_field\", \"abc_\" + i, i));\n      document.add(new NumericDocValuesField(\"filter_int_fld\", i));\n      iw.addDocument(document);\n\n      if (usually()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n\n    int topScore = num/2;\n    BitsProducer filter = new NumericRangeBitsProducer(\"filter_int_fld\", 0, topScore);\n    PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if at most half of the top scoring documents have been filtered out\n    // the search should be admissible for a single segment\n    TopSuggestDocs suggest = indexSearcher.suggest(query, num);\n    assertTrue(suggest.totalHits >= 1);\n    assertThat(suggest.scoreLookupDocs()[0].key.toString(), equalTo(\"abc_\" + topScore));\n    assertThat(suggest.scoreLookupDocs()[0].score, equalTo((float) topScore));\n\n    filter = new NumericRangeBitsProducer(\"filter_int_fld\", 0, 0);\n    query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if more than half of the top scoring documents have been filtered out\n    // search is not admissible, so # of suggestions requested is num instead of 1\n    suggest = indexSearcher.suggest(query, num);\n    assertSuggestions(suggest, new Entry(\"abc_0\", 0));\n\n    filter = new NumericRangeBitsProducer(\"filter_int_fld\", num - 1, num - 1);\n    query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if only lower scoring documents are filtered out\n    // search is admissible\n    suggest = indexSearcher.suggest(query, 1);\n    assertSuggestions(suggest, new Entry(\"abc_\" + (num - 1), num - 1));\n\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMostlyFilteredOutDocuments() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    int num = Math.min(1000, atLeast(10));\n    for (int i = 0; i < num; i++) {\n      Document document = new Document();\n      document.add(new SuggestField(\"suggest_field\", \"abc_\" + i, i));\n      document.add(new NumericDocValuesField(\"filter_int_fld\", i));\n      iw.addDocument(document);\n\n      if (usually()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n\n    int topScore = num/2;\n    BitsProducer filter = new NumericRangeBitsProducer(\"filter_int_fld\", 0, topScore);\n    PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if at most half of the top scoring documents have been filtered out\n    // the search should be admissible for a single segment\n    TopSuggestDocs suggest = indexSearcher.suggest(query, num);\n    assertTrue(suggest.totalHits >= 1);\n    assertThat(suggest.scoreLookupDocs()[0].key.toString(), equalTo(\"abc_\" + topScore));\n    assertThat(suggest.scoreLookupDocs()[0].score, equalTo((float) topScore));\n\n    filter = new NumericRangeBitsProducer(\"filter_int_fld\", 0, 0);\n    query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if more than half of the top scoring documents have been filtered out\n    // search is not admissible, so # of suggestions requested is num instead of 1\n    suggest = indexSearcher.suggest(query, num);\n    assertSuggestions(suggest, new Entry(\"abc_0\", 0));\n\n    filter = new NumericRangeBitsProducer(\"filter_int_fld\", num - 1, num - 1);\n    query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if only lower scoring documents are filtered out\n    // search is admissible\n    suggest = indexSearcher.suggest(query, 1);\n    assertSuggestions(suggest, new Entry(\"abc_\" + (num - 1), num - 1));\n\n    reader.close();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"902a92b60648a8925bfd9bb53a78669cd2ea98fd","date":1487797466,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestPrefixCompletionQuery#testMostlyFilteredOutDocuments().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestPrefixCompletionQuery#testMostlyFilteredOutDocuments().mjava","sourceNew":"  public void testMostlyFilteredOutDocuments() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    int num = Math.min(1000, atLeast(10));\n    for (int i = 0; i < num; i++) {\n      Document document = new Document();\n      document.add(new SuggestField(\"suggest_field\", \"abc_\" + i, i));\n      document.add(new NumericDocValuesField(\"filter_int_fld\", i));\n      iw.addDocument(document);\n\n      if (usually()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n\n    int topScore = num/2;\n    BitsProducer filter = new NumericRangeBitsProducer(\"filter_int_fld\", 0, topScore);\n    PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if at most half of the top scoring documents have been filtered out\n    // the search should be admissible for a single segment\n    TopSuggestDocs suggest = indexSearcher.suggest(query, num, false);\n    assertTrue(suggest.totalHits >= 1);\n    assertThat(suggest.scoreLookupDocs()[0].key.toString(), equalTo(\"abc_\" + topScore));\n    assertThat(suggest.scoreLookupDocs()[0].score, equalTo((float) topScore));\n\n    filter = new NumericRangeBitsProducer(\"filter_int_fld\", 0, 0);\n    query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if more than half of the top scoring documents have been filtered out\n    // search is not admissible, so # of suggestions requested is num instead of 1\n    suggest = indexSearcher.suggest(query, num, false);\n    assertSuggestions(suggest, new Entry(\"abc_0\", 0));\n\n    filter = new NumericRangeBitsProducer(\"filter_int_fld\", num - 1, num - 1);\n    query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if only lower scoring documents are filtered out\n    // search is admissible\n    suggest = indexSearcher.suggest(query, 1, false);\n    assertSuggestions(suggest, new Entry(\"abc_\" + (num - 1), num - 1));\n\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":"  public void testMostlyFilteredOutDocuments() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    int num = Math.min(1000, atLeast(10));\n    for (int i = 0; i < num; i++) {\n      Document document = new Document();\n      document.add(new SuggestField(\"suggest_field\", \"abc_\" + i, i));\n      document.add(new NumericDocValuesField(\"filter_int_fld\", i));\n      iw.addDocument(document);\n\n      if (usually()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n\n    int topScore = num/2;\n    BitsProducer filter = new NumericRangeBitsProducer(\"filter_int_fld\", 0, topScore);\n    PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if at most half of the top scoring documents have been filtered out\n    // the search should be admissible for a single segment\n    TopSuggestDocs suggest = indexSearcher.suggest(query, num);\n    assertTrue(suggest.totalHits >= 1);\n    assertThat(suggest.scoreLookupDocs()[0].key.toString(), equalTo(\"abc_\" + topScore));\n    assertThat(suggest.scoreLookupDocs()[0].score, equalTo((float) topScore));\n\n    filter = new NumericRangeBitsProducer(\"filter_int_fld\", 0, 0);\n    query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if more than half of the top scoring documents have been filtered out\n    // search is not admissible, so # of suggestions requested is num instead of 1\n    suggest = indexSearcher.suggest(query, num);\n    assertSuggestions(suggest, new Entry(\"abc_0\", 0));\n\n    filter = new NumericRangeBitsProducer(\"filter_int_fld\", num - 1, num - 1);\n    query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if only lower scoring documents are filtered out\n    // search is admissible\n    suggest = indexSearcher.suggest(query, 1);\n    assertSuggestions(suggest, new Entry(\"abc_\" + (num - 1), num - 1));\n\n    reader.close();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestPrefixCompletionQuery#testMostlyFilteredOutDocuments().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestPrefixCompletionQuery#testMostlyFilteredOutDocuments().mjava","sourceNew":"  public void testMostlyFilteredOutDocuments() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    int num = Math.min(1000, atLeast(10));\n    for (int i = 0; i < num; i++) {\n      Document document = new Document();\n      document.add(new SuggestField(\"suggest_field\", \"abc_\" + i, i));\n      document.add(new NumericDocValuesField(\"filter_int_fld\", i));\n      iw.addDocument(document);\n\n      if (usually()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n\n    int topScore = num/2;\n    BitsProducer filter = new NumericRangeBitsProducer(\"filter_int_fld\", 0, topScore);\n    PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if at most half of the top scoring documents have been filtered out\n    // the search should be admissible for a single segment\n    TopSuggestDocs suggest = indexSearcher.suggest(query, num, false);\n    assertTrue(suggest.totalHits.value >= 1);\n    assertThat(suggest.scoreLookupDocs()[0].key.toString(), equalTo(\"abc_\" + topScore));\n    assertThat(suggest.scoreLookupDocs()[0].score, equalTo((float) topScore));\n\n    filter = new NumericRangeBitsProducer(\"filter_int_fld\", 0, 0);\n    query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if more than half of the top scoring documents have been filtered out\n    // search is not admissible, so # of suggestions requested is num instead of 1\n    suggest = indexSearcher.suggest(query, num, false);\n    assertSuggestions(suggest, new Entry(\"abc_0\", 0));\n\n    filter = new NumericRangeBitsProducer(\"filter_int_fld\", num - 1, num - 1);\n    query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if only lower scoring documents are filtered out\n    // search is admissible\n    suggest = indexSearcher.suggest(query, 1, false);\n    assertSuggestions(suggest, new Entry(\"abc_\" + (num - 1), num - 1));\n\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":"  public void testMostlyFilteredOutDocuments() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    int num = Math.min(1000, atLeast(10));\n    for (int i = 0; i < num; i++) {\n      Document document = new Document();\n      document.add(new SuggestField(\"suggest_field\", \"abc_\" + i, i));\n      document.add(new NumericDocValuesField(\"filter_int_fld\", i));\n      iw.addDocument(document);\n\n      if (usually()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n\n    int topScore = num/2;\n    BitsProducer filter = new NumericRangeBitsProducer(\"filter_int_fld\", 0, topScore);\n    PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if at most half of the top scoring documents have been filtered out\n    // the search should be admissible for a single segment\n    TopSuggestDocs suggest = indexSearcher.suggest(query, num, false);\n    assertTrue(suggest.totalHits >= 1);\n    assertThat(suggest.scoreLookupDocs()[0].key.toString(), equalTo(\"abc_\" + topScore));\n    assertThat(suggest.scoreLookupDocs()[0].score, equalTo((float) topScore));\n\n    filter = new NumericRangeBitsProducer(\"filter_int_fld\", 0, 0);\n    query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if more than half of the top scoring documents have been filtered out\n    // search is not admissible, so # of suggestions requested is num instead of 1\n    suggest = indexSearcher.suggest(query, num, false);\n    assertSuggestions(suggest, new Entry(\"abc_0\", 0));\n\n    filter = new NumericRangeBitsProducer(\"filter_int_fld\", num - 1, num - 1);\n    query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if only lower scoring documents are filtered out\n    // search is admissible\n    suggest = indexSearcher.suggest(query, 1, false);\n    assertSuggestions(suggest, new Entry(\"abc_\" + (num - 1), num - 1));\n\n    reader.close();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8cd299e7a00489961ab0877977e0f1b9f48a4c15":["e919be7c57e6b5ae11c5beaa2b528f092f7687c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e919be7c57e6b5ae11c5beaa2b528f092f7687c4":["8c33f6677a2078739058f81eca1df69d12cd62b0"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["902a92b60648a8925bfd9bb53a78669cd2ea98fd"],"8c33f6677a2078739058f81eca1df69d12cd62b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e859e664a65796dadf8aaf65db6f66f3a885368":["8cd299e7a00489961ab0877977e0f1b9f48a4c15","b25391c4edacd53174760022f46a27be00ef52b3"],"b25391c4edacd53174760022f46a27be00ef52b3":["8cd299e7a00489961ab0877977e0f1b9f48a4c15"],"902a92b60648a8925bfd9bb53a78669cd2ea98fd":["b25391c4edacd53174760022f46a27be00ef52b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"8cd299e7a00489961ab0877977e0f1b9f48a4c15":["2e859e664a65796dadf8aaf65db6f66f3a885368","b25391c4edacd53174760022f46a27be00ef52b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c33f6677a2078739058f81eca1df69d12cd62b0"],"e919be7c57e6b5ae11c5beaa2b528f092f7687c4":["8cd299e7a00489961ab0877977e0f1b9f48a4c15"],"8c33f6677a2078739058f81eca1df69d12cd62b0":["e919be7c57e6b5ae11c5beaa2b528f092f7687c4"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2e859e664a65796dadf8aaf65db6f66f3a885368":[],"b25391c4edacd53174760022f46a27be00ef52b3":["2e859e664a65796dadf8aaf65db6f66f3a885368","902a92b60648a8925bfd9bb53a78669cd2ea98fd"],"902a92b60648a8925bfd9bb53a78669cd2ea98fd":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2e859e664a65796dadf8aaf65db6f66f3a885368","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}