{"path":"lucene/core/src/java/org/apache/lucene/index/MultiTerms#getTerms(IndexReader,String).mjava","commits":[{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTerms#getTerms(IndexReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTerms(IndexReader,String).mjava","sourceNew":"  /** This method may return null if the field does not exist or if it has no terms. */\n  public static Terms getTerms(IndexReader r, String field) throws IOException {\n    final List<LeafReaderContext> leaves = r.leaves();\n    if (leaves.size() == 1) {\n      return leaves.get(0).reader().terms(field);\n    }\n\n    final List<Terms> termsPerLeaf = new ArrayList<>(leaves.size());\n    final List<ReaderSlice> slicePerLeaf = new ArrayList<>(leaves.size());\n\n    for (int leafIdx = 0; leafIdx < leaves.size(); leafIdx++) {\n      LeafReaderContext ctx = leaves.get(leafIdx);\n      Terms subTerms = ctx.reader().terms(field);\n      if (subTerms != null) {\n        termsPerLeaf.add(subTerms);\n        slicePerLeaf.add(new ReaderSlice(ctx.docBase, r.maxDoc(), leafIdx));\n      }\n    }\n\n    if (termsPerLeaf.size() == 0) {\n      return null;\n    } else {\n      return new MultiTerms(termsPerLeaf.toArray(EMPTY_ARRAY),\n          slicePerLeaf.toArray(ReaderSlice.EMPTY_ARRAY));\n    }\n  }\n\n","sourceOld":"  /** This method may return null if the field does not exist or if it has no terms. */\n  public static Terms getTerms(IndexReader r, String field) throws IOException {\n    final List<LeafReaderContext> leaves = r.leaves();\n    if (leaves.size() == 1) {\n      return leaves.get(0).reader().terms(field);\n    }\n\n    final List<Terms> termsPerLeaf = new ArrayList<>(leaves.size());\n    final List<ReaderSlice> slicePerLeaf = new ArrayList<>(leaves.size());\n\n    for (int leafIdx = 0; leafIdx < leaves.size(); leafIdx++) {\n      LeafReaderContext ctx = leaves.get(leafIdx);\n      Terms subTerms = ctx.reader().terms(field);\n      if (subTerms != null) {\n        termsPerLeaf.add(subTerms);\n        slicePerLeaf.add(new ReaderSlice(ctx.docBase, r.maxDoc(), leafIdx));\n      }\n    }\n\n    if (termsPerLeaf.size() == 0) {\n      return null;\n    } else {\n      return new MultiTerms(termsPerLeaf.toArray(Terms.EMPTY_ARRAY),\n          slicePerLeaf.toArray(ReaderSlice.EMPTY_ARRAY));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}