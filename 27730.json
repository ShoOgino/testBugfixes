{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#createHttpClient(Builder).mjava","commits":[{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#createHttpClient(Builder).mjava","pathOld":"/dev/null","sourceNew":"  private HttpClient createHttpClient(Builder builder) {\n    HttpClient httpClient;\n\n    BlockingArrayQueue<Runnable> queue = new BlockingArrayQueue<>(256, 256);\n    ThreadPoolExecutor httpClientExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(32,\n        256, 60, TimeUnit.SECONDS, queue, new SolrjNamedThreadFactory(\"h2sc\"));\n\n    SslContextFactory sslContextFactory;\n    boolean ssl;\n    if (builder.sslConfig == null) {\n      sslContextFactory = getDefaultSslContextFactory();\n      ssl = sslContextFactory.getTrustStore() != null || sslContextFactory.getTrustStorePath() != null;\n    } else {\n      sslContextFactory = builder.sslConfig.createContextFactory();\n      ssl = true;\n    }\n\n    boolean sslOnJava8OrLower = ssl && !Constants.JRE_IS_MINIMUM_JAVA9;\n    HttpClientTransport transport;\n    if (builder.useHttp1_1 || sslOnJava8OrLower) {\n      if (sslOnJava8OrLower && !builder.useHttp1_1) {\n        log.warn(\"Create Http2SolrClient with HTTP/1.1 transport since Java 8 or lower versions does not support SSL + HTTP/2\");\n      } else {\n        log.debug(\"Create Http2SolrClient with HTTP/1.1 transport\");\n      }\n      transport = new HttpClientTransportOverHTTP(2);\n      httpClient = new HttpClient(transport, sslContextFactory);\n      if (builder.maxConnectionsPerHost != null) httpClient.setMaxConnectionsPerDestination(builder.maxConnectionsPerHost);\n    } else {\n      log.debug(\"Create Http2SolrClient with HTTP/2 transport\");\n      HTTP2Client http2client = new HTTP2Client();\n      transport = new HttpClientTransportOverHTTP2(http2client);\n      httpClient = new HttpClient(transport, sslContextFactory);\n      httpClient.setMaxConnectionsPerDestination(4);\n    }\n\n    httpClient.setExecutor(httpClientExecutor);\n    httpClient.setStrictEventOrdering(false);\n    httpClient.setConnectBlocking(true);\n    httpClient.setFollowRedirects(false);\n    httpClient.setMaxRequestsQueuedPerDestination(asyncTracker.getMaxRequestsQueuedPerDestination());\n    httpClient.setUserAgentField(new HttpField(HttpHeader.USER_AGENT, AGENT));\n\n    if (builder.idleTimeout != null) httpClient.setIdleTimeout(builder.idleTimeout);\n    if (builder.connectionTimeout != null) httpClient.setConnectTimeout(builder.connectionTimeout);\n    return httpClient;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ea0f43f20834b3c8930e074b144aba27a935fee8","e58d986bd494d977efeae8ed9795f508e8325cb4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#createHttpClient(Builder).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#createHttpClient(Builder).mjava","sourceNew":"  private HttpClient createHttpClient(Builder builder) {\n    HttpClient httpClient;\n\n    BlockingArrayQueue<Runnable> queue = new BlockingArrayQueue<>(256, 256);\n    ThreadPoolExecutor httpClientExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(32,\n        256, 60, TimeUnit.SECONDS, queue, new SolrjNamedThreadFactory(\"h2sc\"));\n\n    SslContextFactory sslContextFactory;\n    boolean ssl;\n    if (builder.sslConfig == null) {\n      sslContextFactory = getDefaultSslContextFactory();\n      ssl = sslContextFactory.getTrustStore() != null || sslContextFactory.getTrustStorePath() != null;\n    } else {\n      sslContextFactory = builder.sslConfig.createContextFactory();\n      ssl = true;\n    }\n\n    boolean sslOnJava8OrLower = ssl && !Constants.JRE_IS_MINIMUM_JAVA9;\n    HttpClientTransport transport;\n    if (builder.useHttp1_1 || sslOnJava8OrLower) {\n      if (sslOnJava8OrLower && !builder.useHttp1_1) {\n        log.warn(\"Create Http2SolrClient with HTTP/1.1 transport since Java 8 or lower versions does not support SSL + HTTP/2\");\n      } else {\n        log.debug(\"Create Http2SolrClient with HTTP/1.1 transport\");\n      }\n      transport = new HttpClientTransportOverHTTP(2);\n      httpClient = new HttpClient(transport, sslContextFactory);\n      if (builder.maxConnectionsPerHost != null) httpClient.setMaxConnectionsPerDestination(builder.maxConnectionsPerHost);\n    } else {\n      log.debug(\"Create Http2SolrClient with HTTP/2 transport\");\n      HTTP2Client http2client = new HTTP2Client();\n      transport = new HttpClientTransportOverHTTP2(http2client);\n      httpClient = new HttpClient(transport, sslContextFactory);\n      httpClient.setMaxConnectionsPerDestination(4);\n    }\n\n    httpClient.setExecutor(httpClientExecutor);\n    httpClient.setStrictEventOrdering(false);\n    httpClient.setConnectBlocking(true);\n    httpClient.setFollowRedirects(false);\n    httpClient.setMaxRequestsQueuedPerDestination(asyncTracker.getMaxRequestsQueuedPerDestination());\n    httpClient.setUserAgentField(new HttpField(HttpHeader.USER_AGENT, AGENT));\n\n    if (builder.idleTimeout != null) httpClient.setIdleTimeout(builder.idleTimeout);\n    if (builder.connectionTimeout != null) httpClient.setConnectTimeout(builder.connectionTimeout);\n    try {\n      httpClient.start();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return httpClient;\n  }\n\n","sourceOld":"  private HttpClient createHttpClient(Builder builder) {\n    HttpClient httpClient;\n\n    BlockingArrayQueue<Runnable> queue = new BlockingArrayQueue<>(256, 256);\n    ThreadPoolExecutor httpClientExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(32,\n        256, 60, TimeUnit.SECONDS, queue, new SolrjNamedThreadFactory(\"h2sc\"));\n\n    SslContextFactory sslContextFactory;\n    boolean ssl;\n    if (builder.sslConfig == null) {\n      sslContextFactory = getDefaultSslContextFactory();\n      ssl = sslContextFactory.getTrustStore() != null || sslContextFactory.getTrustStorePath() != null;\n    } else {\n      sslContextFactory = builder.sslConfig.createContextFactory();\n      ssl = true;\n    }\n\n    boolean sslOnJava8OrLower = ssl && !Constants.JRE_IS_MINIMUM_JAVA9;\n    HttpClientTransport transport;\n    if (builder.useHttp1_1 || sslOnJava8OrLower) {\n      if (sslOnJava8OrLower && !builder.useHttp1_1) {\n        log.warn(\"Create Http2SolrClient with HTTP/1.1 transport since Java 8 or lower versions does not support SSL + HTTP/2\");\n      } else {\n        log.debug(\"Create Http2SolrClient with HTTP/1.1 transport\");\n      }\n      transport = new HttpClientTransportOverHTTP(2);\n      httpClient = new HttpClient(transport, sslContextFactory);\n      if (builder.maxConnectionsPerHost != null) httpClient.setMaxConnectionsPerDestination(builder.maxConnectionsPerHost);\n    } else {\n      log.debug(\"Create Http2SolrClient with HTTP/2 transport\");\n      HTTP2Client http2client = new HTTP2Client();\n      transport = new HttpClientTransportOverHTTP2(http2client);\n      httpClient = new HttpClient(transport, sslContextFactory);\n      httpClient.setMaxConnectionsPerDestination(4);\n    }\n\n    httpClient.setExecutor(httpClientExecutor);\n    httpClient.setStrictEventOrdering(false);\n    httpClient.setConnectBlocking(true);\n    httpClient.setFollowRedirects(false);\n    httpClient.setMaxRequestsQueuedPerDestination(asyncTracker.getMaxRequestsQueuedPerDestination());\n    httpClient.setUserAgentField(new HttpField(HttpHeader.USER_AGENT, AGENT));\n\n    if (builder.idleTimeout != null) httpClient.setIdleTimeout(builder.idleTimeout);\n    if (builder.connectionTimeout != null) httpClient.setConnectTimeout(builder.connectionTimeout);\n    return httpClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ea0f43f20834b3c8930e074b144aba27a935fee8","date":1576814747,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#createHttpClient(Builder).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#createHttpClient(Builder).mjava","sourceNew":"  private HttpClient createHttpClient(Builder builder) {\n    HttpClient httpClient;\n\n    BlockingArrayQueue<Runnable> queue = new BlockingArrayQueue<>(256, 256);\n    ThreadPoolExecutor httpClientExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(32,\n        256, 60, TimeUnit.SECONDS, queue, new SolrjNamedThreadFactory(\"h2sc\"));\n\n    SslContextFactory.Client sslContextFactory;\n    boolean ssl;\n    if (builder.sslConfig == null) {\n      sslContextFactory = getDefaultSslContextFactory();\n      ssl = sslContextFactory.getTrustStore() != null || sslContextFactory.getTrustStorePath() != null;\n    } else {\n      sslContextFactory = builder.sslConfig.createClientContextFactory();\n      ssl = true;\n    }\n\n    boolean sslOnJava8OrLower = ssl && !Constants.JRE_IS_MINIMUM_JAVA9;\n    HttpClientTransport transport;\n    if (builder.useHttp1_1 || sslOnJava8OrLower) {\n      if (sslOnJava8OrLower && !builder.useHttp1_1) {\n        log.warn(\"Create Http2SolrClient with HTTP/1.1 transport since Java 8 or lower versions does not support SSL + HTTP/2\");\n      } else {\n        log.debug(\"Create Http2SolrClient with HTTP/1.1 transport\");\n      }\n      transport = new HttpClientTransportOverHTTP(2);\n      httpClient = new HttpClient(transport, sslContextFactory);\n      if (builder.maxConnectionsPerHost != null) httpClient.setMaxConnectionsPerDestination(builder.maxConnectionsPerHost);\n    } else {\n      log.debug(\"Create Http2SolrClient with HTTP/2 transport\");\n      HTTP2Client http2client = new HTTP2Client();\n      transport = new HttpClientTransportOverHTTP2(http2client);\n      httpClient = new HttpClient(transport, sslContextFactory);\n      httpClient.setMaxConnectionsPerDestination(4);\n    }\n\n    httpClient.setExecutor(httpClientExecutor);\n    httpClient.setStrictEventOrdering(false);\n    httpClient.setConnectBlocking(true);\n    httpClient.setFollowRedirects(false);\n    httpClient.setMaxRequestsQueuedPerDestination(asyncTracker.getMaxRequestsQueuedPerDestination());\n    httpClient.setUserAgentField(new HttpField(HttpHeader.USER_AGENT, AGENT));\n\n    if (builder.idleTimeout != null) httpClient.setIdleTimeout(builder.idleTimeout);\n    if (builder.connectionTimeout != null) httpClient.setConnectTimeout(builder.connectionTimeout);\n    try {\n      httpClient.start();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return httpClient;\n  }\n\n","sourceOld":"  private HttpClient createHttpClient(Builder builder) {\n    HttpClient httpClient;\n\n    BlockingArrayQueue<Runnable> queue = new BlockingArrayQueue<>(256, 256);\n    ThreadPoolExecutor httpClientExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(32,\n        256, 60, TimeUnit.SECONDS, queue, new SolrjNamedThreadFactory(\"h2sc\"));\n\n    SslContextFactory sslContextFactory;\n    boolean ssl;\n    if (builder.sslConfig == null) {\n      sslContextFactory = getDefaultSslContextFactory();\n      ssl = sslContextFactory.getTrustStore() != null || sslContextFactory.getTrustStorePath() != null;\n    } else {\n      sslContextFactory = builder.sslConfig.createContextFactory();\n      ssl = true;\n    }\n\n    boolean sslOnJava8OrLower = ssl && !Constants.JRE_IS_MINIMUM_JAVA9;\n    HttpClientTransport transport;\n    if (builder.useHttp1_1 || sslOnJava8OrLower) {\n      if (sslOnJava8OrLower && !builder.useHttp1_1) {\n        log.warn(\"Create Http2SolrClient with HTTP/1.1 transport since Java 8 or lower versions does not support SSL + HTTP/2\");\n      } else {\n        log.debug(\"Create Http2SolrClient with HTTP/1.1 transport\");\n      }\n      transport = new HttpClientTransportOverHTTP(2);\n      httpClient = new HttpClient(transport, sslContextFactory);\n      if (builder.maxConnectionsPerHost != null) httpClient.setMaxConnectionsPerDestination(builder.maxConnectionsPerHost);\n    } else {\n      log.debug(\"Create Http2SolrClient with HTTP/2 transport\");\n      HTTP2Client http2client = new HTTP2Client();\n      transport = new HttpClientTransportOverHTTP2(http2client);\n      httpClient = new HttpClient(transport, sslContextFactory);\n      httpClient.setMaxConnectionsPerDestination(4);\n    }\n\n    httpClient.setExecutor(httpClientExecutor);\n    httpClient.setStrictEventOrdering(false);\n    httpClient.setConnectBlocking(true);\n    httpClient.setFollowRedirects(false);\n    httpClient.setMaxRequestsQueuedPerDestination(asyncTracker.getMaxRequestsQueuedPerDestination());\n    httpClient.setUserAgentField(new HttpField(HttpHeader.USER_AGENT, AGENT));\n\n    if (builder.idleTimeout != null) httpClient.setIdleTimeout(builder.idleTimeout);\n    if (builder.connectionTimeout != null) httpClient.setConnectTimeout(builder.connectionTimeout);\n    try {\n      httpClient.start();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return httpClient;\n  }\n\n","bugFix":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c66470e527299cc148ad0b3441d08dfb7cb9e03","date":1576859740,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#createHttpClient(Builder).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#createHttpClient(Builder).mjava","sourceNew":"  private HttpClient createHttpClient(Builder builder) {\n    HttpClient httpClient;\n\n    BlockingArrayQueue<Runnable> queue = new BlockingArrayQueue<>(256, 256);\n    ThreadPoolExecutor httpClientExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(32,\n        256, 60, TimeUnit.SECONDS, queue, new SolrjNamedThreadFactory(\"h2sc\"));\n\n    SslContextFactory.Client sslContextFactory;\n    boolean ssl;\n    if (builder.sslConfig == null) {\n      sslContextFactory = getDefaultSslContextFactory();\n      ssl = sslContextFactory.getTrustStore() != null || sslContextFactory.getTrustStorePath() != null;\n    } else {\n      sslContextFactory = builder.sslConfig.createClientContextFactory();\n      ssl = true;\n    }\n\n    boolean sslOnJava8OrLower = ssl && !Constants.JRE_IS_MINIMUM_JAVA9;\n    HttpClientTransport transport;\n    if (builder.useHttp1_1 || sslOnJava8OrLower) {\n      if (sslOnJava8OrLower && !builder.useHttp1_1) {\n        log.warn(\"Create Http2SolrClient with HTTP/1.1 transport since Java 8 or lower versions does not support SSL + HTTP/2\");\n      } else {\n        log.debug(\"Create Http2SolrClient with HTTP/1.1 transport\");\n      }\n      transport = new HttpClientTransportOverHTTP(2);\n      httpClient = new HttpClient(transport, sslContextFactory);\n      if (builder.maxConnectionsPerHost != null) httpClient.setMaxConnectionsPerDestination(builder.maxConnectionsPerHost);\n    } else {\n      log.debug(\"Create Http2SolrClient with HTTP/2 transport\");\n      HTTP2Client http2client = new HTTP2Client();\n      transport = new HttpClientTransportOverHTTP2(http2client);\n      httpClient = new HttpClient(transport, sslContextFactory);\n      httpClient.setMaxConnectionsPerDestination(4);\n    }\n\n    httpClient.setExecutor(httpClientExecutor);\n    httpClient.setStrictEventOrdering(false);\n    httpClient.setConnectBlocking(true);\n    httpClient.setFollowRedirects(false);\n    httpClient.setMaxRequestsQueuedPerDestination(asyncTracker.getMaxRequestsQueuedPerDestination());\n    httpClient.setUserAgentField(new HttpField(HttpHeader.USER_AGENT, AGENT));\n\n    if (builder.idleTimeout != null) httpClient.setIdleTimeout(builder.idleTimeout);\n    if (builder.connectionTimeout != null) httpClient.setConnectTimeout(builder.connectionTimeout);\n    try {\n      httpClient.start();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return httpClient;\n  }\n\n","sourceOld":"  private HttpClient createHttpClient(Builder builder) {\n    HttpClient httpClient;\n\n    BlockingArrayQueue<Runnable> queue = new BlockingArrayQueue<>(256, 256);\n    ThreadPoolExecutor httpClientExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(32,\n        256, 60, TimeUnit.SECONDS, queue, new SolrjNamedThreadFactory(\"h2sc\"));\n\n    SslContextFactory sslContextFactory;\n    boolean ssl;\n    if (builder.sslConfig == null) {\n      sslContextFactory = getDefaultSslContextFactory();\n      ssl = sslContextFactory.getTrustStore() != null || sslContextFactory.getTrustStorePath() != null;\n    } else {\n      sslContextFactory = builder.sslConfig.createContextFactory();\n      ssl = true;\n    }\n\n    boolean sslOnJava8OrLower = ssl && !Constants.JRE_IS_MINIMUM_JAVA9;\n    HttpClientTransport transport;\n    if (builder.useHttp1_1 || sslOnJava8OrLower) {\n      if (sslOnJava8OrLower && !builder.useHttp1_1) {\n        log.warn(\"Create Http2SolrClient with HTTP/1.1 transport since Java 8 or lower versions does not support SSL + HTTP/2\");\n      } else {\n        log.debug(\"Create Http2SolrClient with HTTP/1.1 transport\");\n      }\n      transport = new HttpClientTransportOverHTTP(2);\n      httpClient = new HttpClient(transport, sslContextFactory);\n      if (builder.maxConnectionsPerHost != null) httpClient.setMaxConnectionsPerDestination(builder.maxConnectionsPerHost);\n    } else {\n      log.debug(\"Create Http2SolrClient with HTTP/2 transport\");\n      HTTP2Client http2client = new HTTP2Client();\n      transport = new HttpClientTransportOverHTTP2(http2client);\n      httpClient = new HttpClient(transport, sslContextFactory);\n      httpClient.setMaxConnectionsPerDestination(4);\n    }\n\n    httpClient.setExecutor(httpClientExecutor);\n    httpClient.setStrictEventOrdering(false);\n    httpClient.setConnectBlocking(true);\n    httpClient.setFollowRedirects(false);\n    httpClient.setMaxRequestsQueuedPerDestination(asyncTracker.getMaxRequestsQueuedPerDestination());\n    httpClient.setUserAgentField(new HttpField(HttpHeader.USER_AGENT, AGENT));\n\n    if (builder.idleTimeout != null) httpClient.setIdleTimeout(builder.idleTimeout);\n    if (builder.connectionTimeout != null) httpClient.setConnectTimeout(builder.connectionTimeout);\n    try {\n      httpClient.start();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return httpClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e58d986bd494d977efeae8ed9795f508e8325cb4","date":1580930137,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#createHttpClient(Builder).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#createHttpClient(Builder).mjava","sourceNew":"  private HttpClient createHttpClient(Builder builder) {\n    HttpClient httpClient;\n\n    BlockingArrayQueue<Runnable> queue = new BlockingArrayQueue<>(256, 256);\n    ThreadPoolExecutor httpClientExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(32,\n        256, 60, TimeUnit.SECONDS, queue, new SolrjNamedThreadFactory(\"h2sc\"));\n\n    SslContextFactory.Client sslContextFactory;\n    boolean ssl;\n    if (builder.sslConfig == null) {\n      sslContextFactory = getDefaultSslContextFactory();\n      ssl = sslContextFactory.getTrustStore() != null || sslContextFactory.getTrustStorePath() != null;\n    } else {\n      sslContextFactory = builder.sslConfig.createClientContextFactory();\n      ssl = true;\n    }\n\n    boolean sslOnJava8OrLower = ssl && !Constants.JRE_IS_MINIMUM_JAVA9;\n    HttpClientTransport transport;\n    if (builder.useHttp1_1 || sslOnJava8OrLower) {\n      if (sslOnJava8OrLower && !builder.useHttp1_1) {\n        log.warn(\"Create Http2SolrClient with HTTP/1.1 transport since Java 8 or lower versions does not support SSL + HTTP/2\");\n      } else {\n        log.debug(\"Create Http2SolrClient with HTTP/1.1 transport\");\n      }\n      transport = new HttpClientTransportOverHTTP(2);\n      httpClient = new HttpClient(transport, sslContextFactory);\n      if (builder.maxConnectionsPerHost != null) httpClient.setMaxConnectionsPerDestination(builder.maxConnectionsPerHost);\n    } else {\n      log.debug(\"Create Http2SolrClient with HTTP/2 transport\");\n      HTTP2Client http2client = new HTTP2Client();\n      transport = new HttpClientTransportOverHTTP2(http2client);\n      httpClient = new HttpClient(transport, sslContextFactory);\n      httpClient.setMaxConnectionsPerDestination(4);\n    }\n\n    httpClient.setExecutor(httpClientExecutor);\n    httpClient.setStrictEventOrdering(false);\n    httpClient.setConnectBlocking(true);\n    httpClient.setFollowRedirects(false);\n    httpClient.setMaxRequestsQueuedPerDestination(asyncTracker.getMaxRequestsQueuedPerDestination());\n    httpClient.setUserAgentField(new HttpField(HttpHeader.USER_AGENT, AGENT));\n\n    httpClient.setIdleTimeout(idleTimeout);\n    if (builder.connectionTimeout != null) httpClient.setConnectTimeout(builder.connectionTimeout);\n    try {\n      httpClient.start();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return httpClient;\n  }\n\n","sourceOld":"  private HttpClient createHttpClient(Builder builder) {\n    HttpClient httpClient;\n\n    BlockingArrayQueue<Runnable> queue = new BlockingArrayQueue<>(256, 256);\n    ThreadPoolExecutor httpClientExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(32,\n        256, 60, TimeUnit.SECONDS, queue, new SolrjNamedThreadFactory(\"h2sc\"));\n\n    SslContextFactory.Client sslContextFactory;\n    boolean ssl;\n    if (builder.sslConfig == null) {\n      sslContextFactory = getDefaultSslContextFactory();\n      ssl = sslContextFactory.getTrustStore() != null || sslContextFactory.getTrustStorePath() != null;\n    } else {\n      sslContextFactory = builder.sslConfig.createClientContextFactory();\n      ssl = true;\n    }\n\n    boolean sslOnJava8OrLower = ssl && !Constants.JRE_IS_MINIMUM_JAVA9;\n    HttpClientTransport transport;\n    if (builder.useHttp1_1 || sslOnJava8OrLower) {\n      if (sslOnJava8OrLower && !builder.useHttp1_1) {\n        log.warn(\"Create Http2SolrClient with HTTP/1.1 transport since Java 8 or lower versions does not support SSL + HTTP/2\");\n      } else {\n        log.debug(\"Create Http2SolrClient with HTTP/1.1 transport\");\n      }\n      transport = new HttpClientTransportOverHTTP(2);\n      httpClient = new HttpClient(transport, sslContextFactory);\n      if (builder.maxConnectionsPerHost != null) httpClient.setMaxConnectionsPerDestination(builder.maxConnectionsPerHost);\n    } else {\n      log.debug(\"Create Http2SolrClient with HTTP/2 transport\");\n      HTTP2Client http2client = new HTTP2Client();\n      transport = new HttpClientTransportOverHTTP2(http2client);\n      httpClient = new HttpClient(transport, sslContextFactory);\n      httpClient.setMaxConnectionsPerDestination(4);\n    }\n\n    httpClient.setExecutor(httpClientExecutor);\n    httpClient.setStrictEventOrdering(false);\n    httpClient.setConnectBlocking(true);\n    httpClient.setFollowRedirects(false);\n    httpClient.setMaxRequestsQueuedPerDestination(asyncTracker.getMaxRequestsQueuedPerDestination());\n    httpClient.setUserAgentField(new HttpField(HttpHeader.USER_AGENT, AGENT));\n\n    if (builder.idleTimeout != null) httpClient.setIdleTimeout(builder.idleTimeout);\n    if (builder.connectionTimeout != null) httpClient.setConnectTimeout(builder.connectionTimeout);\n    try {\n      httpClient.start();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return httpClient;\n  }\n\n","bugFix":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#createHttpClient(Builder).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#createHttpClient(Builder).mjava","sourceNew":"  private HttpClient createHttpClient(Builder builder) {\n    HttpClient httpClient;\n\n    BlockingArrayQueue<Runnable> queue = new BlockingArrayQueue<>(256, 256);\n    ThreadPoolExecutor httpClientExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(32,\n        256, 60, TimeUnit.SECONDS, queue, new SolrNamedThreadFactory(\"h2sc\"));\n\n    SslContextFactory.Client sslContextFactory;\n    boolean ssl;\n    if (builder.sslConfig == null) {\n      sslContextFactory = getDefaultSslContextFactory();\n      ssl = sslContextFactory.getTrustStore() != null || sslContextFactory.getTrustStorePath() != null;\n    } else {\n      sslContextFactory = builder.sslConfig.createClientContextFactory();\n      ssl = true;\n    }\n\n    boolean sslOnJava8OrLower = ssl && !Constants.JRE_IS_MINIMUM_JAVA9;\n    HttpClientTransport transport;\n    if (builder.useHttp1_1 || sslOnJava8OrLower) {\n      if (sslOnJava8OrLower && !builder.useHttp1_1) {\n        log.warn(\"Create Http2SolrClient with HTTP/1.1 transport since Java 8 or lower versions does not support SSL + HTTP/2\");\n      } else {\n        log.debug(\"Create Http2SolrClient with HTTP/1.1 transport\");\n      }\n      transport = new HttpClientTransportOverHTTP(2);\n      httpClient = new HttpClient(transport, sslContextFactory);\n      if (builder.maxConnectionsPerHost != null) httpClient.setMaxConnectionsPerDestination(builder.maxConnectionsPerHost);\n    } else {\n      log.debug(\"Create Http2SolrClient with HTTP/2 transport\");\n      HTTP2Client http2client = new HTTP2Client();\n      transport = new HttpClientTransportOverHTTP2(http2client);\n      httpClient = new HttpClient(transport, sslContextFactory);\n      httpClient.setMaxConnectionsPerDestination(4);\n    }\n\n    httpClient.setExecutor(httpClientExecutor);\n    httpClient.setStrictEventOrdering(false);\n    httpClient.setConnectBlocking(true);\n    httpClient.setFollowRedirects(false);\n    httpClient.setMaxRequestsQueuedPerDestination(asyncTracker.getMaxRequestsQueuedPerDestination());\n    httpClient.setUserAgentField(new HttpField(HttpHeader.USER_AGENT, AGENT));\n\n    httpClient.setIdleTimeout(idleTimeout);\n    if (builder.connectionTimeout != null) httpClient.setConnectTimeout(builder.connectionTimeout);\n    try {\n      httpClient.start();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return httpClient;\n  }\n\n","sourceOld":"  private HttpClient createHttpClient(Builder builder) {\n    HttpClient httpClient;\n\n    BlockingArrayQueue<Runnable> queue = new BlockingArrayQueue<>(256, 256);\n    ThreadPoolExecutor httpClientExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(32,\n        256, 60, TimeUnit.SECONDS, queue, new SolrjNamedThreadFactory(\"h2sc\"));\n\n    SslContextFactory.Client sslContextFactory;\n    boolean ssl;\n    if (builder.sslConfig == null) {\n      sslContextFactory = getDefaultSslContextFactory();\n      ssl = sslContextFactory.getTrustStore() != null || sslContextFactory.getTrustStorePath() != null;\n    } else {\n      sslContextFactory = builder.sslConfig.createClientContextFactory();\n      ssl = true;\n    }\n\n    boolean sslOnJava8OrLower = ssl && !Constants.JRE_IS_MINIMUM_JAVA9;\n    HttpClientTransport transport;\n    if (builder.useHttp1_1 || sslOnJava8OrLower) {\n      if (sslOnJava8OrLower && !builder.useHttp1_1) {\n        log.warn(\"Create Http2SolrClient with HTTP/1.1 transport since Java 8 or lower versions does not support SSL + HTTP/2\");\n      } else {\n        log.debug(\"Create Http2SolrClient with HTTP/1.1 transport\");\n      }\n      transport = new HttpClientTransportOverHTTP(2);\n      httpClient = new HttpClient(transport, sslContextFactory);\n      if (builder.maxConnectionsPerHost != null) httpClient.setMaxConnectionsPerDestination(builder.maxConnectionsPerHost);\n    } else {\n      log.debug(\"Create Http2SolrClient with HTTP/2 transport\");\n      HTTP2Client http2client = new HTTP2Client();\n      transport = new HttpClientTransportOverHTTP2(http2client);\n      httpClient = new HttpClient(transport, sslContextFactory);\n      httpClient.setMaxConnectionsPerDestination(4);\n    }\n\n    httpClient.setExecutor(httpClientExecutor);\n    httpClient.setStrictEventOrdering(false);\n    httpClient.setConnectBlocking(true);\n    httpClient.setFollowRedirects(false);\n    httpClient.setMaxRequestsQueuedPerDestination(asyncTracker.getMaxRequestsQueuedPerDestination());\n    httpClient.setUserAgentField(new HttpField(HttpHeader.USER_AGENT, AGENT));\n\n    httpClient.setIdleTimeout(idleTimeout);\n    if (builder.connectionTimeout != null) httpClient.setConnectTimeout(builder.connectionTimeout);\n    try {\n      httpClient.start();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return httpClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1964c059f45ae1de1877f9f0fe3ca327ea4218e8","date":1594088246,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#createHttpClient(Builder).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#createHttpClient(Builder).mjava","sourceNew":"  private HttpClient createHttpClient(Builder builder) {\n    HttpClient httpClient;\n\n    BlockingArrayQueue<Runnable> queue = new BlockingArrayQueue<>(256, 256);\n    executor = builder.executor;\n    if (executor == null) {\n      this.executor = new ExecutorUtil.MDCAwareThreadPoolExecutor(32,\n          256, 60, TimeUnit.SECONDS, queue, new SolrNamedThreadFactory(\"h2sc\"));\n      shutdownExecutor = true;\n    } else {\n      shutdownExecutor = false;\n    }\n\n    SslContextFactory.Client sslContextFactory;\n    boolean ssl;\n    if (builder.sslConfig == null) {\n      sslContextFactory = getDefaultSslContextFactory();\n      ssl = sslContextFactory.getTrustStore() != null || sslContextFactory.getTrustStorePath() != null;\n    } else {\n      sslContextFactory = builder.sslConfig.createClientContextFactory();\n      ssl = true;\n    }\n\n    boolean sslOnJava8OrLower = ssl && !Constants.JRE_IS_MINIMUM_JAVA9;\n    HttpClientTransport transport;\n    if (builder.useHttp1_1 || sslOnJava8OrLower) {\n      if (sslOnJava8OrLower && !builder.useHttp1_1) {\n        log.warn(\"Create Http2SolrClient with HTTP/1.1 transport since Java 8 or lower versions does not support SSL + HTTP/2\");\n      } else {\n        log.debug(\"Create Http2SolrClient with HTTP/1.1 transport\");\n      }\n      transport = new HttpClientTransportOverHTTP(2);\n      httpClient = new HttpClient(transport, sslContextFactory);\n      if (builder.maxConnectionsPerHost != null) httpClient.setMaxConnectionsPerDestination(builder.maxConnectionsPerHost);\n    } else {\n      log.debug(\"Create Http2SolrClient with HTTP/2 transport\");\n      HTTP2Client http2client = new HTTP2Client();\n      transport = new HttpClientTransportOverHTTP2(http2client);\n      httpClient = new HttpClient(transport, sslContextFactory);\n      httpClient.setMaxConnectionsPerDestination(4);\n    }\n\n    httpClient.setExecutor(this.executor);\n    httpClient.setStrictEventOrdering(false);\n    httpClient.setConnectBlocking(true);\n    httpClient.setFollowRedirects(false);\n    httpClient.setMaxRequestsQueuedPerDestination(asyncTracker.getMaxRequestsQueuedPerDestination());\n    httpClient.setUserAgentField(new HttpField(HttpHeader.USER_AGENT, AGENT));\n\n    httpClient.setIdleTimeout(idleTimeout);\n    if (builder.connectionTimeout != null) httpClient.setConnectTimeout(builder.connectionTimeout);\n    try {\n      httpClient.start();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return httpClient;\n  }\n\n","sourceOld":"  private HttpClient createHttpClient(Builder builder) {\n    HttpClient httpClient;\n\n    BlockingArrayQueue<Runnable> queue = new BlockingArrayQueue<>(256, 256);\n    ThreadPoolExecutor httpClientExecutor = new ExecutorUtil.MDCAwareThreadPoolExecutor(32,\n        256, 60, TimeUnit.SECONDS, queue, new SolrNamedThreadFactory(\"h2sc\"));\n\n    SslContextFactory.Client sslContextFactory;\n    boolean ssl;\n    if (builder.sslConfig == null) {\n      sslContextFactory = getDefaultSslContextFactory();\n      ssl = sslContextFactory.getTrustStore() != null || sslContextFactory.getTrustStorePath() != null;\n    } else {\n      sslContextFactory = builder.sslConfig.createClientContextFactory();\n      ssl = true;\n    }\n\n    boolean sslOnJava8OrLower = ssl && !Constants.JRE_IS_MINIMUM_JAVA9;\n    HttpClientTransport transport;\n    if (builder.useHttp1_1 || sslOnJava8OrLower) {\n      if (sslOnJava8OrLower && !builder.useHttp1_1) {\n        log.warn(\"Create Http2SolrClient with HTTP/1.1 transport since Java 8 or lower versions does not support SSL + HTTP/2\");\n      } else {\n        log.debug(\"Create Http2SolrClient with HTTP/1.1 transport\");\n      }\n      transport = new HttpClientTransportOverHTTP(2);\n      httpClient = new HttpClient(transport, sslContextFactory);\n      if (builder.maxConnectionsPerHost != null) httpClient.setMaxConnectionsPerDestination(builder.maxConnectionsPerHost);\n    } else {\n      log.debug(\"Create Http2SolrClient with HTTP/2 transport\");\n      HTTP2Client http2client = new HTTP2Client();\n      transport = new HttpClientTransportOverHTTP2(http2client);\n      httpClient = new HttpClient(transport, sslContextFactory);\n      httpClient.setMaxConnectionsPerDestination(4);\n    }\n\n    httpClient.setExecutor(httpClientExecutor);\n    httpClient.setStrictEventOrdering(false);\n    httpClient.setConnectBlocking(true);\n    httpClient.setFollowRedirects(false);\n    httpClient.setMaxRequestsQueuedPerDestination(asyncTracker.getMaxRequestsQueuedPerDestination());\n    httpClient.setUserAgentField(new HttpField(HttpHeader.USER_AGENT, AGENT));\n\n    httpClient.setIdleTimeout(idleTimeout);\n    if (builder.connectionTimeout != null) httpClient.setConnectTimeout(builder.connectionTimeout);\n    try {\n      httpClient.start();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return httpClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"ea0f43f20834b3c8930e074b144aba27a935fee8":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["e58d986bd494d977efeae8ed9795f508e8325cb4"],"e58d986bd494d977efeae8ed9795f508e8325cb4":["ea0f43f20834b3c8930e074b144aba27a935fee8"],"4c66470e527299cc148ad0b3441d08dfb7cb9e03":["0544142c22eb88b6d8b3817f2e1190156aa4f9af","ea0f43f20834b3c8930e074b144aba27a935fee8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"]},"commit2Childs":{"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["ea0f43f20834b3c8930e074b144aba27a935fee8","4c66470e527299cc148ad0b3441d08dfb7cb9e03"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"ea0f43f20834b3c8930e074b144aba27a935fee8":["e58d986bd494d977efeae8ed9795f508e8325cb4","4c66470e527299cc148ad0b3441d08dfb7cb9e03"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"],"e58d986bd494d977efeae8ed9795f508e8325cb4":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"4c66470e527299cc148ad0b3441d08dfb7cb9e03":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4c66470e527299cc148ad0b3441d08dfb7cb9e03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}