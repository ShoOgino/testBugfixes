{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillDownQuery#add(FacetLabel...).mjava","commits":[{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillDownQuery#add(FacetLabel...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillDownQuery#add(CategoryPath...).mjava","sourceNew":"  /**\n   * Adds one dimension of drill downs; if you pass multiple values they are\n   * OR'd, and then the entire dimension is AND'd against the base query.\n   */\n  public void add(FacetLabel... paths) {\n    Query q;\n    if (paths[0].length == 0) {\n      throw new IllegalArgumentException(\"all CategoryPaths must have length > 0\");\n    }\n    String dim = paths[0].components[0];\n    if (drillDownDims.containsKey(dim)) {\n      throw new IllegalArgumentException(\"dimension '\" + dim + \"' was already added\");\n    }\n    if (paths.length == 1) {\n      q = new TermQuery(term(fip, paths[0]));\n    } else {\n      BooleanQuery bq = new BooleanQuery(true); // disable coord\n      for (FacetLabel cp : paths) {\n        if (cp.length == 0) {\n          throw new IllegalArgumentException(\"all CategoryPaths must have length > 0\");\n        }\n        if (!cp.components[0].equals(dim)) {\n          throw new IllegalArgumentException(\"multiple (OR'd) drill-down paths must be under same dimension; got '\" \n              + dim + \"' and '\" + cp.components[0] + \"'\");\n        }\n        bq.add(new TermQuery(term(fip, cp)), Occur.SHOULD);\n      }\n      q = bq;\n    }\n\n    add(dim, q);\n  }\n\n","sourceOld":"  /**\n   * Adds one dimension of drill downs; if you pass multiple values they are\n   * OR'd, and then the entire dimension is AND'd against the base query.\n   */\n  public void add(CategoryPath... paths) {\n    Query q;\n    if (paths[0].length == 0) {\n      throw new IllegalArgumentException(\"all CategoryPaths must have length > 0\");\n    }\n    String dim = paths[0].components[0];\n    if (drillDownDims.containsKey(dim)) {\n      throw new IllegalArgumentException(\"dimension '\" + dim + \"' was already added\");\n    }\n    if (paths.length == 1) {\n      q = new TermQuery(term(fip, paths[0]));\n    } else {\n      BooleanQuery bq = new BooleanQuery(true); // disable coord\n      for (CategoryPath cp : paths) {\n        if (cp.length == 0) {\n          throw new IllegalArgumentException(\"all CategoryPaths must have length > 0\");\n        }\n        if (!cp.components[0].equals(dim)) {\n          throw new IllegalArgumentException(\"multiple (OR'd) drill-down paths must be under same dimension; got '\" \n              + dim + \"' and '\" + cp.components[0] + \"'\");\n        }\n        bq.add(new TermQuery(term(fip, cp)), Occur.SHOULD);\n      }\n      q = bq;\n    }\n\n    add(dim, q);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillDownQuery#add(FacetLabel...).mjava","sourceNew":null,"sourceOld":"  /**\n   * Adds one dimension of drill downs; if you pass multiple values they are\n   * OR'd, and then the entire dimension is AND'd against the base query.\n   */\n  public void add(FacetLabel... paths) {\n    Query q;\n    if (paths[0].length == 0) {\n      throw new IllegalArgumentException(\"all CategoryPaths must have length > 0\");\n    }\n    String dim = paths[0].components[0];\n    if (drillDownDims.containsKey(dim)) {\n      throw new IllegalArgumentException(\"dimension '\" + dim + \"' was already added\");\n    }\n    if (paths.length == 1) {\n      q = new TermQuery(term(fip, paths[0]));\n    } else {\n      BooleanQuery bq = new BooleanQuery(true); // disable coord\n      for (FacetLabel cp : paths) {\n        if (cp.length == 0) {\n          throw new IllegalArgumentException(\"all CategoryPaths must have length > 0\");\n        }\n        if (!cp.components[0].equals(dim)) {\n          throw new IllegalArgumentException(\"multiple (OR'd) drill-down paths must be under same dimension; got '\" \n              + dim + \"' and '\" + cp.components[0] + \"'\");\n        }\n        bq.add(new TermQuery(term(fip, cp)), Occur.SHOULD);\n      }\n      q = bq;\n    }\n\n    add(dim, q);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d33e19a97046248623a7591aeaa6547233fd15e2":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d33e19a97046248623a7591aeaa6547233fd15e2":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d33e19a97046248623a7591aeaa6547233fd15e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}