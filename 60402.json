{"path":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","commits":[{"id":"0bba396c158346d92cdd5ff662e97ac6166a2147","date":1443059349,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","pathOld":"/dev/null","sourceNew":"  private void testAggregatesWithoutGrouping() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    Map params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"sql\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, params);\n\n\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n\n    // Test where clause hits\n\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"sql\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(sumf.doubleValue() == 2.0D);\n    assertTrue(mini == 2);\n    assertTrue(minf == 2);\n    assertTrue(maxi == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgi.doubleValue() == 2.0D);\n    assertTrue(avgf.doubleValue() == 2.0);\n    assertTrue(count.doubleValue() == 1);\n\n\n    // Test zero hits\n\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"sql\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 0);\n    assertTrue(sumf.doubleValue() == 0.0D);\n    assertTrue(mini == null);\n    assertTrue(minf == null);\n    assertTrue(maxi == null);\n    assertTrue(maxf == null);\n    assertTrue(Double.isNaN(avgi));\n    assertTrue(Double.isNaN(avgf));\n    assertTrue(count.doubleValue() == 0);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ec71d4701edbd96cfea97384101d13611393552","date":1444686705,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","sourceNew":"  private void testAggregatesWithoutGrouping() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    Map params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, params);\n\n\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n\n    // Test where clause hits\n\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(sumf.doubleValue() == 2.0D);\n    assertTrue(mini == 2);\n    assertTrue(minf == 2);\n    assertTrue(maxi == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgi.doubleValue() == 2.0D);\n    assertTrue(avgf.doubleValue() == 2.0);\n    assertTrue(count.doubleValue() == 1);\n\n\n    // Test zero hits\n\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 0);\n    assertTrue(sumf.doubleValue() == 0.0D);\n    assertTrue(mini == null);\n    assertTrue(minf == null);\n    assertTrue(maxi == null);\n    assertTrue(maxf == null);\n    assertTrue(Double.isNaN(avgi));\n    assertTrue(Double.isNaN(avgf));\n    assertTrue(count.doubleValue() == 0);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testAggregatesWithoutGrouping() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    Map params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"sql\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, params);\n\n\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n\n    // Test where clause hits\n\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"sql\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(sumf.doubleValue() == 2.0D);\n    assertTrue(mini == 2);\n    assertTrue(minf == 2);\n    assertTrue(maxi == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgi.doubleValue() == 2.0D);\n    assertTrue(avgf.doubleValue() == 2.0);\n    assertTrue(count.doubleValue() == 1);\n\n\n    // Test zero hits\n\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"sql\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 0);\n    assertTrue(sumf.doubleValue() == 0.0D);\n    assertTrue(mini == null);\n    assertTrue(minf == null);\n    assertTrue(maxi == null);\n    assertTrue(maxf == null);\n    assertTrue(Double.isNaN(avgi));\n    assertTrue(Double.isNaN(avgf));\n    assertTrue(count.doubleValue() == 0);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7","date":1452631653,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","sourceNew":"  private void testAggregatesWithoutGrouping() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    Map params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, params);\n\n\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n\n\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*) as count, sum(a_i) as sum, min(a_i) as min, max(a_i) as max, avg(a_i) as avg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n\n\n\n    // Test where clause hits\n\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(sumf.doubleValue() == 2.0D);\n    assertTrue(mini == 2);\n    assertTrue(minf == 2);\n    assertTrue(maxi == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgi.doubleValue() == 2.0D);\n    assertTrue(avgf.doubleValue() == 2.0);\n    assertTrue(count.doubleValue() == 1);\n\n\n    // Test zero hits\n\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 0);\n    assertTrue(sumf.doubleValue() == 0.0D);\n    assertTrue(mini == null);\n    assertTrue(minf == null);\n    assertTrue(maxi == null);\n    assertTrue(maxf == null);\n    assertTrue(Double.isNaN(avgi));\n    assertTrue(Double.isNaN(avgf));\n    assertTrue(count.doubleValue() == 0);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testAggregatesWithoutGrouping() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    Map params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, params);\n\n\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n\n    // Test where clause hits\n\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(sumf.doubleValue() == 2.0D);\n    assertTrue(mini == 2);\n    assertTrue(minf == 2);\n    assertTrue(maxi == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgi.doubleValue() == 2.0D);\n    assertTrue(avgf.doubleValue() == 2.0);\n    assertTrue(count.doubleValue() == 1);\n\n\n    // Test zero hits\n\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 0);\n    assertTrue(sumf.doubleValue() == 0.0D);\n    assertTrue(mini == null);\n    assertTrue(minf == null);\n    assertTrue(maxi == null);\n    assertTrue(maxf == null);\n    assertTrue(Double.isNaN(avgi));\n    assertTrue(Double.isNaN(avgf));\n    assertTrue(count.doubleValue() == 0);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ea75dee47a56cd5d6997df5198d96cdba08574","date":1461870891,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","sourceNew":"  private void testAggregatesWithoutGrouping() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    Map params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, params);\n\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    Double sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    Double mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    Double maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    Double avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    Double sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    Double minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    Double maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    Double avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(sumi == 70);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, avg(a_i) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test where clause hits\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 1);\n    assertTrue(sumi == 2);\n    assertTrue(mini == 2);\n    assertTrue(maxi == 2);\n    assertTrue(avgi == 2.0D);\n    assertTrue(sumf == 2.0D);\n    assertTrue(minf == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgf == 2.0);\n\n\n    // Test zero hits\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 0);\n    assertTrue(sumi == null);\n    assertTrue(mini == null);\n    assertTrue(maxi == null);\n    assertTrue(avgi == null);\n    assertTrue(sumf == null);\n    assertTrue(minf == null);\n    assertTrue(maxf == null);\n    assertTrue(avgf == null);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testAggregatesWithoutGrouping() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    Map params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, params);\n\n\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n\n\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*) as count, sum(a_i) as sum, min(a_i) as min, max(a_i) as max, avg(a_i) as avg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n\n\n\n    // Test where clause hits\n\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(sumf.doubleValue() == 2.0D);\n    assertTrue(mini == 2);\n    assertTrue(minf == 2);\n    assertTrue(maxi == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgi.doubleValue() == 2.0D);\n    assertTrue(avgf.doubleValue() == 2.0);\n    assertTrue(count.doubleValue() == 1);\n\n\n    // Test zero hits\n\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 0);\n    assertTrue(sumf.doubleValue() == 0.0D);\n    assertTrue(mini == null);\n    assertTrue(minf == null);\n    assertTrue(maxi == null);\n    assertTrue(maxf == null);\n    assertTrue(Double.isNaN(avgi));\n    assertTrue(Double.isNaN(avgf));\n    assertTrue(count.doubleValue() == 0);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b67f9cce921a1f94ec0a28c4eb85bcd887c8aa4","date":1461940050,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","sourceNew":"  private void testAggregatesWithoutGrouping() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    Map params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n        \"min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, params);\n\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    Double sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    Double mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    Double maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    Double avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    Double sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    Double minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    Double maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    Double avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(sumi == 70);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n        \"cast(avg(1.0 * a_i) as float) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test where clause hits\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n        \"min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 1);\n    assertTrue(sumi == 2);\n    assertTrue(mini == 2);\n    assertTrue(maxi == 2);\n    assertTrue(avgi == 2.0D);\n    assertTrue(sumf == 2.0D);\n    assertTrue(minf == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgf == 2.0);\n\n\n    // Test zero hits\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n        \"min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 0);\n    assertTrue(sumi == null);\n    assertTrue(mini == null);\n    assertTrue(maxi == null);\n    assertTrue(avgi == null);\n    assertTrue(sumf == null);\n    assertTrue(minf == null);\n    assertTrue(maxf == null);\n    assertTrue(avgf == null);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testAggregatesWithoutGrouping() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    Map params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, params);\n\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    Double sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    Double mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    Double maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    Double avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    Double sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    Double minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    Double maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    Double avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(sumi == 70);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, avg(a_i) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test where clause hits\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 1);\n    assertTrue(sumi == 2);\n    assertTrue(mini == 2);\n    assertTrue(maxi == 2);\n    assertTrue(avgi == 2.0D);\n    assertTrue(sumf == 2.0D);\n    assertTrue(minf == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgf == 2.0);\n\n\n    // Test zero hits\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 0);\n    assertTrue(sumi == null);\n    assertTrue(mini == null);\n    assertTrue(maxi == null);\n    assertTrue(avgi == null);\n    assertTrue(sumf == null);\n    assertTrue(minf == null);\n    assertTrue(maxf == null);\n    assertTrue(avgf == null);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","sourceNew":"  private void testAggregatesWithoutGrouping() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n\n\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n      \"stmt\", \"select count(*) as count, sum(a_i) as sum, min(a_i) as min, max(a_i) as max, avg(a_i) as avg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n\n\n\n    // Test where clause hits\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n      \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(sumf.doubleValue() == 2.0D);\n    assertTrue(mini == 2);\n    assertTrue(minf == 2);\n    assertTrue(maxi == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgi.doubleValue() == 2.0D);\n    assertTrue(avgf.doubleValue() == 2.0);\n    assertTrue(count.doubleValue() == 1);\n\n\n    // Test zero hits\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n      \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 0);\n    assertTrue(sumf.doubleValue() == 0.0D);\n    assertTrue(mini == null);\n    assertTrue(minf == null);\n    assertTrue(maxi == null);\n    assertTrue(maxf == null);\n    assertTrue(Double.isNaN(avgi));\n    assertTrue(Double.isNaN(avgf));\n    assertTrue(count.doubleValue() == 0);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testAggregatesWithoutGrouping() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    Map params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, params);\n\n\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n\n\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*) as count, sum(a_i) as sum, min(a_i) as min, max(a_i) as max, avg(a_i) as avg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n\n\n\n    // Test where clause hits\n\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(sumf.doubleValue() == 2.0D);\n    assertTrue(mini == 2);\n    assertTrue(minf == 2);\n    assertTrue(maxi == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgi.doubleValue() == 2.0D);\n    assertTrue(avgf.doubleValue() == 2.0);\n    assertTrue(count.doubleValue() == 1);\n\n\n    // Test zero hits\n\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 0);\n    assertTrue(sumf.doubleValue() == 0.0D);\n    assertTrue(mini == null);\n    assertTrue(minf == null);\n    assertTrue(maxi == null);\n    assertTrue(maxf == null);\n    assertTrue(Double.isNaN(avgi));\n    assertTrue(Double.isNaN(avgf));\n    assertTrue(count.doubleValue() == 0);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","sourceNew":"  private void testAggregatesWithoutGrouping() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n\n\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n      \"stmt\", \"select count(*) as count, sum(a_i) as sum, min(a_i) as min, max(a_i) as max, avg(a_i) as avg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n\n\n\n    // Test where clause hits\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n      \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(sumf.doubleValue() == 2.0D);\n    assertTrue(mini == 2);\n    assertTrue(minf == 2);\n    assertTrue(maxi == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgi.doubleValue() == 2.0D);\n    assertTrue(avgf.doubleValue() == 2.0);\n    assertTrue(count.doubleValue() == 1);\n\n\n    // Test zero hits\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n      \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 0);\n    assertTrue(sumf.doubleValue() == 0.0D);\n    assertTrue(mini == null);\n    assertTrue(minf == null);\n    assertTrue(maxi == null);\n    assertTrue(maxf == null);\n    assertTrue(Double.isNaN(avgi));\n    assertTrue(Double.isNaN(avgf));\n    assertTrue(count.doubleValue() == 0);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testAggregatesWithoutGrouping() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    Map params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, params);\n\n\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n\n\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*) as count, sum(a_i) as sum, min(a_i) as min, max(a_i) as max, avg(a_i) as avg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n\n\n\n    // Test where clause hits\n\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(sumf.doubleValue() == 2.0D);\n    assertTrue(mini == 2);\n    assertTrue(minf == 2);\n    assertTrue(maxi == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgi.doubleValue() == 2.0D);\n    assertTrue(avgf.doubleValue() == 2.0);\n    assertTrue(count.doubleValue() == 1);\n\n\n    // Test zero hits\n\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 0);\n    assertTrue(sumf.doubleValue() == 0.0D);\n    assertTrue(mini == null);\n    assertTrue(minf == null);\n    assertTrue(maxi == null);\n    assertTrue(maxf == null);\n    assertTrue(Double.isNaN(avgi));\n    assertTrue(Double.isNaN(avgf));\n    assertTrue(count.doubleValue() == 0);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","sourceNew":"  private void testAggregatesWithoutGrouping() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n\n\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n      \"stmt\", \"select count(*) as count, sum(a_i) as sum, min(a_i) as min, max(a_i) as max, avg(a_i) as avg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n\n\n\n    // Test where clause hits\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n      \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(sumf.doubleValue() == 2.0D);\n    assertTrue(mini == 2);\n    assertTrue(minf == 2);\n    assertTrue(maxi == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgi.doubleValue() == 2.0D);\n    assertTrue(avgf.doubleValue() == 2.0);\n    assertTrue(count.doubleValue() == 1);\n\n\n    // Test zero hits\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n      \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 0);\n    assertTrue(sumf.doubleValue() == 0.0D);\n    assertTrue(mini == null);\n    assertTrue(minf == null);\n    assertTrue(maxi == null);\n    assertTrue(maxf == null);\n    assertTrue(Double.isNaN(avgi));\n    assertTrue(Double.isNaN(avgf));\n    assertTrue(count.doubleValue() == 0);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testAggregatesWithoutGrouping() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    Map params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, params);\n\n\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n\n\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*) as count, sum(a_i) as sum, min(a_i) as min, max(a_i) as max, avg(a_i) as avg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n\n\n\n    // Test where clause hits\n\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(sumf.doubleValue() == 2.0D);\n    assertTrue(mini == 2);\n    assertTrue(minf == 2);\n    assertTrue(maxi == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgi.doubleValue() == 2.0D);\n    assertTrue(avgf.doubleValue() == 2.0);\n    assertTrue(count.doubleValue() == 1);\n\n\n    // Test zero hits\n\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 0);\n    assertTrue(sumf.doubleValue() == 0.0D);\n    assertTrue(mini == null);\n    assertTrue(minf == null);\n    assertTrue(maxi == null);\n    assertTrue(maxf == null);\n    assertTrue(Double.isNaN(avgi));\n    assertTrue(Double.isNaN(avgf));\n    assertTrue(count.doubleValue() == 0);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","sourceNew":"  private void testAggregatesWithoutGrouping() throws Exception {\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n        \"min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    Double sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    Double mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    Double maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    Double avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    Double sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    Double minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    Double maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    Double avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(sumi == 70);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n        \"cast(avg(1.0 * a_i) as float) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test where clause hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n        \"min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 1);\n    assertTrue(sumi == 2);\n    assertTrue(mini == 2);\n    assertTrue(maxi == 2);\n    assertTrue(avgi == 2.0D);\n    assertTrue(sumf == 2.0D);\n    assertTrue(minf == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgf == 2.0);\n\n\n    // Test zero hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n        \"min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 0);\n    assertTrue(sumi == null);\n    assertTrue(mini == null);\n    assertTrue(maxi == null);\n    assertTrue(avgi == null);\n    assertTrue(sumf == null);\n    assertTrue(minf == null);\n    assertTrue(maxf == null);\n    assertTrue(avgf == null);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testAggregatesWithoutGrouping() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    Map params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n        \"min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, params);\n\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    Double sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    Double mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    Double maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    Double avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    Double sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    Double minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    Double maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    Double avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(sumi == 70);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n        \"cast(avg(1.0 * a_i) as float) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test where clause hits\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n        \"min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 1);\n    assertTrue(sumi == 2);\n    assertTrue(mini == 2);\n    assertTrue(maxi == 2);\n    assertTrue(avgi == 2.0D);\n    assertTrue(sumf == 2.0D);\n    assertTrue(minf == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgf == 2.0);\n\n\n    // Test zero hits\n    params = new HashMap();\n    params.put(CommonParams.QT, \"/sql\");\n    params.put(\"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n        \"min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n    solrStream = new SolrStream(jetty.url, params);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 0);\n    assertTrue(sumi == null);\n    assertTrue(mini == null);\n    assertTrue(maxi == null);\n    assertTrue(avgi == null);\n    assertTrue(sumf == null);\n    assertTrue(minf == null);\n    assertTrue(maxf == null);\n    assertTrue(avgf == null);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":3,"author":"Joel Bernstein","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","sourceNew":"  private void testAggregatesWithoutGrouping() throws Exception {\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n        \"min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    Double sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    Double mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    Double maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    Double avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    Double sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    Double minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    Double maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    Double avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(sumi == 70);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n        \"cast(avg(1.0 * a_i) as float) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test where clause hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n        \"min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 1);\n    assertTrue(sumi == 2);\n    assertTrue(mini == 2);\n    assertTrue(maxi == 2);\n    assertTrue(avgi == 2.0D);\n    assertTrue(sumf == 2.0D);\n    assertTrue(minf == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgf == 2.0);\n\n\n    // Test zero hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n        \"min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 0);\n    assertTrue(sumi == null);\n    assertTrue(mini == null);\n    assertTrue(maxi == null);\n    assertTrue(avgi == null);\n    assertTrue(sumf == null);\n    assertTrue(minf == null);\n    assertTrue(maxf == null);\n    assertTrue(avgf == null);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testAggregatesWithoutGrouping() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n\n\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n      \"stmt\", \"select count(*) as count, sum(a_i) as sum, min(a_i) as min, max(a_i) as max, avg(a_i) as avg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count\");\n\n    assertTrue(sumi.longValue() == 70);\n    assertTrue(sumf.doubleValue() == 55.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 7.0D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 10);\n\n\n\n\n    // Test where clause hits\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n      \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(sumf.doubleValue() == 2.0D);\n    assertTrue(mini == 2);\n    assertTrue(minf == 2);\n    assertTrue(maxi == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgi.doubleValue() == 2.0D);\n    assertTrue(avgf.doubleValue() == 2.0);\n    assertTrue(count.doubleValue() == 1);\n\n\n    // Test zero hits\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n      \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), avg(a_i), sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(sumi.longValue() == 0);\n    assertTrue(sumf.doubleValue() == 0.0D);\n    assertTrue(mini == null);\n    assertTrue(minf == null);\n    assertTrue(maxi == null);\n    assertTrue(maxf == null);\n    assertTrue(Double.isNaN(avgi));\n    assertTrue(Double.isNaN(avgf));\n    assertTrue(count.doubleValue() == 0);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9fe3175bbaa122d67f736a75c2984617c502cc0","date":1490722938,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","sourceNew":"  private void testAggregatesWithoutGrouping() throws Exception {\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n        \"min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    Double sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    Double mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    Double maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    Double avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    Double sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    Double minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    Double maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    Double avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(sumi == 70);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n        \"cast(avg(1.0 * a_i) as float) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n\n    //Test without cast on average int field\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n            \"avg(a_i) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    assertTrue(tuple.get(\"myAvg\") instanceof Long);\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n\n\n    // Test where clause hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n        \"min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 1);\n    assertTrue(sumi == 2);\n    assertTrue(mini == 2);\n    assertTrue(maxi == 2);\n    assertTrue(avgi == 2.0D);\n    assertTrue(sumf == 2.0D);\n    assertTrue(minf == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgf == 2.0);\n\n\n    // Test zero hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n        \"min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 0);\n    assertTrue(sumi == null);\n    assertTrue(mini == null);\n    assertTrue(maxi == null);\n    assertTrue(avgi == null);\n    assertTrue(sumf == null);\n    assertTrue(minf == null);\n    assertTrue(maxf == null);\n    assertTrue(avgf == null);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testAggregatesWithoutGrouping() throws Exception {\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n        \"min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    Double sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    Double mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    Double maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    Double avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    Double sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    Double minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    Double maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    Double avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(sumi == 70);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n        \"cast(avg(1.0 * a_i) as float) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test where clause hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n        \"min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 1);\n    assertTrue(sumi == 2);\n    assertTrue(mini == 2);\n    assertTrue(maxi == 2);\n    assertTrue(avgi == 2.0D);\n    assertTrue(sumf == 2.0D);\n    assertTrue(minf == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgf == 2.0);\n\n\n    // Test zero hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n        \"min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 0);\n    assertTrue(sumi == null);\n    assertTrue(mini == null);\n    assertTrue(maxi == null);\n    assertTrue(avgi == null);\n    assertTrue(sumf == null);\n    assertTrue(minf == null);\n    assertTrue(maxf == null);\n    assertTrue(avgf == null);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b741b54c163686a5fd077895a797daa9b0b95f","date":1490873946,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","sourceNew":"  private void testAggregatesWithoutGrouping() throws Exception {\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n        \"min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    Double sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    Double mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    Double maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    Double avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    Double sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    Double minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    Double maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    Double avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(sumi == 70);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n        \"cast(avg(1.0 * a_i) as float) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n\n    //Test without cast on average int field\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n            \"avg(a_i) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    assertTrue(tuple.get(\"myAvg\") instanceof Long);\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n\n\n    // Test where clause hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n        \"min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 1);\n    assertTrue(sumi == 2);\n    assertTrue(mini == 2);\n    assertTrue(maxi == 2);\n    assertTrue(avgi == 2.0D);\n    assertTrue(sumf == 2.0D);\n    assertTrue(minf == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgf == 2.0);\n\n\n    // Test zero hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n        \"min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 0);\n    assertTrue(sumi == null);\n    assertTrue(mini == null);\n    assertTrue(maxi == null);\n    assertTrue(avgi == null);\n    assertTrue(sumf == null);\n    assertTrue(minf == null);\n    assertTrue(maxf == null);\n    assertTrue(avgf == null);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testAggregatesWithoutGrouping() throws Exception {\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n        \"min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    Double sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    Double mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    Double maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    Double avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    Double sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    Double minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    Double maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    Double avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(sumi == 70);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n        \"cast(avg(1.0 * a_i) as float) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test where clause hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n        \"min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 1);\n    assertTrue(sumi == 2);\n    assertTrue(mini == 2);\n    assertTrue(maxi == 2);\n    assertTrue(avgi == 2.0D);\n    assertTrue(sumf == 2.0D);\n    assertTrue(minf == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgf == 2.0);\n\n\n    // Test zero hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n        \"min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 0);\n    assertTrue(sumi == null);\n    assertTrue(mini == null);\n    assertTrue(maxi == null);\n    assertTrue(avgi == null);\n    assertTrue(sumf == null);\n    assertTrue(minf == null);\n    assertTrue(maxf == null);\n    assertTrue(avgf == null);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c58a62203315881cce5089ef67ffee6b8a988a75","date":1544601986,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","sourceNew":"  private void testAggregatesWithoutGrouping() throws Exception {\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    Double sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    Double mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    Double maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    Double avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    Double sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    Double minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    Double maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    Double avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(sumi == 70);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n            \"cast(avg(1.0 * a_i) as float) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test without cast on average int field\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n            \"avg(a_i) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    assertTrue(tuple.get(\"myAvg\") instanceof Long);\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test where clause hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 1);\n    assertTrue(sumi == 2);\n    assertTrue(mini == 2);\n    assertTrue(maxi == 2);\n    assertTrue(avgi == 2.0D);\n    assertTrue(sumf == 2.0D);\n    assertTrue(minf == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgf == 2.0);\n\n    // Test zero hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 0);\n    assertTrue(sumi == null);\n    assertTrue(mini == null);\n    assertTrue(maxi == null);\n    assertTrue(avgi == null);\n    assertTrue(sumf == null);\n    assertTrue(minf == null);\n    assertTrue(maxf == null);\n    assertTrue(avgf == null);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testAggregatesWithoutGrouping() throws Exception {\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n        \"min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    Double sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    Double mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    Double maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    Double avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    Double sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    Double minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    Double maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    Double avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(sumi == 70);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n        \"cast(avg(1.0 * a_i) as float) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n\n    //Test without cast on average int field\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n            \"avg(a_i) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    //Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    assertTrue(tuple.get(\"myAvg\") instanceof Long);\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n\n\n    // Test where clause hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n        \"min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 1);\n    assertTrue(sumi == 2);\n    assertTrue(mini == 2);\n    assertTrue(maxi == 2);\n    assertTrue(avgi == 2.0D);\n    assertTrue(sumf == 2.0D);\n    assertTrue(minf == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgf == 2.0);\n\n\n    // Test zero hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n        \"min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert(tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); //count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); //sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); //min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); //max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); //avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); //sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); //min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); //max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); //avg(a_f)\n\n    assertTrue(count == 0);\n    assertTrue(sumi == null);\n    assertTrue(mini == null);\n    assertTrue(maxi == null);\n    assertTrue(avgi == null);\n    assertTrue(sumf == null);\n    assertTrue(minf == null);\n    assertTrue(maxf == null);\n    assertTrue(avgf == null);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"600937be95b5a041815220371fa7882e73031d56","date":1551734162,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","sourceNew":"  private void testAggregatesWithoutGrouping() throws Exception {\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    \n    List<Tuple> tuples = getTuples(sParams);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    Double sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    Double mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    Double maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    Double avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    Double sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    Double minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    Double maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    Double avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(sumi == 70);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n            \"cast(avg(1.0 * a_i) as float) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    \n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test without cast on average int field\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n            \"avg(a_i) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    \n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    assertTrue(tuple.get(\"myAvg\") instanceof Long);\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test where clause hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n    \n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 1);\n    assertTrue(sumi == 2);\n    assertTrue(mini == 2);\n    assertTrue(maxi == 2);\n    assertTrue(avgi == 2.0D);\n    assertTrue(sumf == 2.0D);\n    assertTrue(minf == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgf == 2.0);\n\n    // Test zero hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n    \n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 0);\n    assertTrue(sumi == null);\n    assertTrue(mini == null);\n    assertTrue(maxi == null);\n    assertTrue(avgi == null);\n    assertTrue(sumf == null);\n    assertTrue(minf == null);\n    assertTrue(maxf == null);\n    assertTrue(avgf == null);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testAggregatesWithoutGrouping() throws Exception {\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    Double sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    Double mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    Double maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    Double avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    Double sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    Double minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    Double maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    Double avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(sumi == 70);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n            \"cast(avg(1.0 * a_i) as float) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test without cast on average int field\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n            \"avg(a_i) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    assertTrue(tuple.get(\"myAvg\") instanceof Long);\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test where clause hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 1);\n    assertTrue(sumi == 2);\n    assertTrue(mini == 2);\n    assertTrue(maxi == 2);\n    assertTrue(avgi == 2.0D);\n    assertTrue(sumf == 2.0D);\n    assertTrue(minf == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgf == 2.0);\n\n    // Test zero hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 0);\n    assertTrue(sumi == null);\n    assertTrue(mini == null);\n    assertTrue(maxi == null);\n    assertTrue(avgi == null);\n    assertTrue(sumf == null);\n    assertTrue(minf == null);\n    assertTrue(maxf == null);\n    assertTrue(avgf == null);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22191e72f6c40dec88c9b94f9bb55c7527772a47","date":1553715407,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler2[TestSQLHandler]#testAggregatesWithoutGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","sourceNew":"  @Test\n  public void testAggregatesWithoutGrouping() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1\");\n\n\n    List<Tuple> tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    Double sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    Double mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    Double maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    Double avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    Double sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    Double minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    Double maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    Double avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(sumi == 70);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n            \"cast(avg(1.0 * a_i) as float) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test without cast on average int field\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n            \"avg(a_i) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    assertTrue(tuple.get(\"myAvg\") instanceof Long);\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test where clause hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 1);\n    assertTrue(sumi == 2);\n    assertTrue(mini == 2);\n    assertTrue(maxi == 2);\n    assertTrue(avgi == 2.0D);\n    assertTrue(sumf == 2.0D);\n    assertTrue(minf == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgf == 2.0);\n\n    // Test zero hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 0);\n    assertTrue(sumi == null);\n    assertTrue(mini == null);\n    assertTrue(maxi == null);\n    assertTrue(avgi == null);\n    assertTrue(sumf == null);\n    assertTrue(minf == null);\n    assertTrue(maxf == null);\n    assertTrue(avgf == null);\n\n  }\n\n","sourceOld":"  private void testAggregatesWithoutGrouping() throws Exception {\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    \n    List<Tuple> tuples = getTuples(sParams);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    Double sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    Double mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    Double maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    Double avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    Double sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    Double minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    Double maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    Double avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(sumi == 70);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n            \"cast(avg(1.0 * a_i) as float) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    \n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test without cast on average int field\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n            \"avg(a_i) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    \n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    assertTrue(tuple.get(\"myAvg\") instanceof Long);\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test where clause hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n    \n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 1);\n    assertTrue(sumi == 2);\n    assertTrue(mini == 2);\n    assertTrue(maxi == 2);\n    assertTrue(avgi == 2.0D);\n    assertTrue(sumf == 2.0D);\n    assertTrue(minf == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgf == 2.0);\n\n    // Test zero hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n    \n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 0);\n    assertTrue(sumi == null);\n    assertTrue(mini == null);\n    assertTrue(maxi == null);\n    assertTrue(avgi == null);\n    assertTrue(sumf == null);\n    assertTrue(minf == null);\n    assertTrue(maxf == null);\n    assertTrue(avgf == null);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94e31112925a65b1d36f9064772080e25b5ef373","date":1553715407,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler2[TestSQLHandler]#testAggregatesWithoutGrouping().mjava","sourceNew":"  @Test\n  public void testAggregatesWithoutGrouping() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1\");\n\n\n    List<Tuple> tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    Double sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    Double mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    Double maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    Double avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    Double sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    Double minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    Double maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    Double avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(sumi == 70);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n            \"cast(avg(1.0 * a_i) as float) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test without cast on average int field\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n            \"avg(a_i) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    assertTrue(tuple.get(\"myAvg\") instanceof Long);\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test where clause hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 1);\n    assertTrue(sumi == 2);\n    assertTrue(mini == 2);\n    assertTrue(maxi == 2);\n    assertTrue(avgi == 2.0D);\n    assertTrue(sumf == 2.0D);\n    assertTrue(minf == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgf == 2.0);\n\n    // Test zero hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 0);\n    assertTrue(sumi == null);\n    assertTrue(mini == null);\n    assertTrue(maxi == null);\n    assertTrue(avgi == null);\n    assertTrue(sumf == null);\n    assertTrue(minf == null);\n    assertTrue(maxf == null);\n    assertTrue(avgf == null);\n\n  }\n\n","sourceOld":"  @Test\n  public void testAggregatesWithoutGrouping() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1\");\n\n\n    List<Tuple> tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    Double sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    Double mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    Double maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    Double avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    Double sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    Double minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    Double maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    Double avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(sumi == 70);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n            \"cast(avg(1.0 * a_i) as float) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test without cast on average int field\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n            \"avg(a_i) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    assertTrue(tuple.get(\"myAvg\") instanceof Long);\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test where clause hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 1);\n    assertTrue(sumi == 2);\n    assertTrue(mini == 2);\n    assertTrue(maxi == 2);\n    assertTrue(avgi == 2.0D);\n    assertTrue(sumf == 2.0D);\n    assertTrue(minf == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgf == 2.0);\n\n    // Test zero hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 0);\n    assertTrue(sumi == null);\n    assertTrue(mini == null);\n    assertTrue(maxi == null);\n    assertTrue(avgi == null);\n    assertTrue(sumf == null);\n    assertTrue(minf == null);\n    assertTrue(maxf == null);\n    assertTrue(avgf == null);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"570664407cd3123a8039f1b4f2f6c6693bdaee31","date":1589893823,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","sourceNew":"  @Test\n  public void testAggregatesWithoutGrouping() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1\");\n\n\n    List<Tuple> tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    Double sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    Double mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    Double maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    Double avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    Double sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    Double minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    Double maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    Double avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(sumi == 70);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n            \"cast(avg(1.0 * a_i) as float) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test without cast on average int field\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n            \"avg(a_i) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    assertTrue(tuple.get(\"myAvg\") instanceof Long);\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test where clause hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 1);\n    assertTrue(sumi == 2);\n    assertTrue(mini == 2);\n    assertTrue(maxi == 2);\n    assertTrue(avgi == 2.0D);\n    assertTrue(sumf == 2.0D);\n    assertTrue(minf == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgf == 2.0);\n\n    // Test zero hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n         \"min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 0);\n    assertTrue(sumi == null);\n    assertTrue(mini == null);\n    assertTrue(maxi == null);\n    assertTrue(avgi == null);\n    assertTrue(sumf == null);\n    assertTrue(minf == null);\n    assertTrue(maxf == null);\n    assertTrue(avgf == null);\n\n  }\n\n","sourceOld":"  @Test\n  public void testAggregatesWithoutGrouping() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1\");\n\n\n    List<Tuple> tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    Double sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    Double mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    Double maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    Double avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    Double sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    Double minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    Double maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    Double avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(sumi == 70);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n            \"cast(avg(1.0 * a_i) as float) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test without cast on average int field\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n            \"avg(a_i) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    assertTrue(tuple.get(\"myAvg\") instanceof Long);\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test where clause hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 1);\n    assertTrue(sumi == 2);\n    assertTrue(mini == 2);\n    assertTrue(maxi == 2);\n    assertTrue(avgi == 2.0D);\n    assertTrue(sumf == 2.0D);\n    assertTrue(minf == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgf == 2.0);\n\n    // Test zero hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 0);\n    assertTrue(sumi == null);\n    assertTrue(mini == null);\n    assertTrue(maxi == null);\n    assertTrue(avgi == null);\n    assertTrue(sumf == null);\n    assertTrue(minf == null);\n    assertTrue(maxf == null);\n    assertTrue(avgf == null);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22191e72f6c40dec88c9b94f9bb55c7527772a47":["600937be95b5a041815220371fa7882e73031d56"],"29ea75dee47a56cd5d6997df5198d96cdba08574":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7"],"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7":["3ec71d4701edbd96cfea97384101d13611393552"],"0bba396c158346d92cdd5ff662e97ac6166a2147":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7b67f9cce921a1f94ec0a28c4eb85bcd887c8aa4","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"3ec71d4701edbd96cfea97384101d13611393552":["0bba396c158346d92cdd5ff662e97ac6166a2147"],"a9b741b54c163686a5fd077895a797daa9b0b95f":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"7b67f9cce921a1f94ec0a28c4eb85bcd887c8aa4":["29ea75dee47a56cd5d6997df5198d96cdba08574"],"600937be95b5a041815220371fa7882e73031d56":["c58a62203315881cce5089ef67ffee6b8a988a75"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["d470c8182e92b264680e34081b75e70a9f2b3c89","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d9fe3175bbaa122d67f736a75c2984617c502cc0":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c58a62203315881cce5089ef67ffee6b8a988a75":["d9fe3175bbaa122d67f736a75c2984617c502cc0"],"570664407cd3123a8039f1b4f2f6c6693bdaee31":["94e31112925a65b1d36f9064772080e25b5ef373"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["570664407cd3123a8039f1b4f2f6c6693bdaee31"],"94e31112925a65b1d36f9064772080e25b5ef373":["22191e72f6c40dec88c9b94f9bb55c7527772a47"]},"commit2Childs":{"22191e72f6c40dec88c9b94f9bb55c7527772a47":["94e31112925a65b1d36f9064772080e25b5ef373"],"29ea75dee47a56cd5d6997df5198d96cdba08574":["7b67f9cce921a1f94ec0a28c4eb85bcd887c8aa4"],"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7":["29ea75dee47a56cd5d6997df5198d96cdba08574","826d15444ddf61716dc768c229cd54b2c2ccce1c","d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"0bba396c158346d92cdd5ff662e97ac6166a2147":["3ec71d4701edbd96cfea97384101d13611393552"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"3ec71d4701edbd96cfea97384101d13611393552":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7"],"a9b741b54c163686a5fd077895a797daa9b0b95f":[],"7b67f9cce921a1f94ec0a28c4eb85bcd887c8aa4":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"600937be95b5a041815220371fa7882e73031d56":["22191e72f6c40dec88c9b94f9bb55c7527772a47"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["a9b741b54c163686a5fd077895a797daa9b0b95f","d9fe3175bbaa122d67f736a75c2984617c502cc0"],"d9fe3175bbaa122d67f736a75c2984617c502cc0":["c58a62203315881cce5089ef67ffee6b8a988a75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0bba396c158346d92cdd5ff662e97ac6166a2147"],"c58a62203315881cce5089ef67ffee6b8a988a75":["600937be95b5a041815220371fa7882e73031d56"],"570664407cd3123a8039f1b4f2f6c6693bdaee31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"94e31112925a65b1d36f9064772080e25b5ef373":["570664407cd3123a8039f1b4f2f6c6693bdaee31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a9b741b54c163686a5fd077895a797daa9b0b95f","e66a459d38c1c4a2f97128433dab546f683a9fed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}