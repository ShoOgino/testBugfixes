{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#setFromSerialized(CharSequence,int).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#setFromSerialized(CharSequence,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set a CategoryPath from a character-sequence representation written by\n   * {@link #serializeAppendTo(Appendable)}.\n   * <P>\n   * Reading starts at the given offset into the given character sequence, and\n   * the offset right after the end of this path is returned.\n   */\n  public int setFromSerialized(CharSequence buffer, int offset) {\n    ncomponents = (short) buffer.charAt(offset++);\n    if (ncomponents == 0) {\n      return offset;\n    }\n\n    if (ncomponents >= ends.length) {\n      ends = new short[Math.max(ends.length * 2, ncomponents)];\n    }\n    for (int i = 0; i < ncomponents; i++) {\n      ends[i] = (short) buffer.charAt(offset++);\n    }\n\n    int usedchars = ends[ncomponents - 1];\n    if (usedchars > chars.length) {\n      chars = new char[Math.max(chars.length * 2, usedchars)];\n    }\n    for (int i = 0; i < usedchars; i++) {\n      chars[i] = buffer.charAt(offset++);\n    }\n\n    return offset;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#setFromSerialized(CharSequence,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set a CategoryPath from a character-sequence representation written by\n   * {@link #serializeAppendTo(Appendable)}.\n   * <P>\n   * Reading starts at the given offset into the given character sequence, and\n   * the offset right after the end of this path is returned.\n   */\n  public int setFromSerialized(CharSequence buffer, int offset) {\n    ncomponents = (short) buffer.charAt(offset++);\n    if (ncomponents == 0) {\n      return offset;\n    }\n\n    if (ncomponents >= ends.length) {\n      ends = new short[Math.max(ends.length * 2, ncomponents)];\n    }\n    for (int i = 0; i < ncomponents; i++) {\n      ends[i] = (short) buffer.charAt(offset++);\n    }\n\n    int usedchars = ends[ncomponents - 1];\n    if (usedchars > chars.length) {\n      chars = new char[Math.max(chars.length * 2, usedchars)];\n    }\n    for (int i = 0; i < usedchars; i++) {\n      chars[i] = buffer.charAt(offset++);\n    }\n\n    return offset;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#setFromSerialized(CharSequence,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set a CategoryPath from a character-sequence representation written by\n   * {@link #serializeAppendTo(Appendable)}.\n   * <P>\n   * Reading starts at the given offset into the given character sequence, and\n   * the offset right after the end of this path is returned.\n   */\n  public int setFromSerialized(CharSequence buffer, int offset) {\n    ncomponents = (short) buffer.charAt(offset++);\n    if (ncomponents == 0) {\n      return offset;\n    }\n\n    if (ncomponents >= ends.length) {\n      ends = new short[Math.max(ends.length * 2, ncomponents)];\n    }\n    for (int i = 0; i < ncomponents; i++) {\n      ends[i] = (short) buffer.charAt(offset++);\n    }\n\n    int usedchars = ends[ncomponents - 1];\n    if (usedchars > chars.length) {\n      chars = new char[Math.max(chars.length * 2, usedchars)];\n    }\n    for (int i = 0; i < usedchars; i++) {\n      chars[i] = buffer.charAt(offset++);\n    }\n\n    return offset;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#setFromSerialized(CharSequence,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#setFromSerialized(CharSequence,int).mjava","sourceNew":"  /**\n   * Set a CategoryPath from a character-sequence representation written by\n   * {@link #serializeAppendTo(Appendable)}.\n   * <P>\n   * Reading starts at the given offset into the given character sequence, and\n   * the offset right after the end of this path is returned.\n   */\n  public int setFromSerialized(CharSequence buffer, int offset) {\n    ncomponents = (short) buffer.charAt(offset++);\n    if (ncomponents == 0) {\n      return offset;\n    }\n\n    if (ncomponents >= ends.length) {\n      ends = new short[Math.max(ends.length * 2, ncomponents)];\n    }\n    for (int i = 0; i < ncomponents; i++) {\n      ends[i] = (short) buffer.charAt(offset++);\n    }\n\n    int usedchars = ends[ncomponents - 1];\n    if (usedchars > chars.length) {\n      chars = new char[Math.max(chars.length * 2, usedchars)];\n    }\n    for (int i = 0; i < usedchars; i++) {\n      chars[i] = buffer.charAt(offset++);\n    }\n\n    return offset;\n  }\n\n","sourceOld":"  /**\n   * Set a CategoryPath from a character-sequence representation written by\n   * {@link #serializeAppendTo(Appendable)}.\n   * <P>\n   * Reading starts at the given offset into the given character sequence, and\n   * the offset right after the end of this path is returned.\n   */\n  public int setFromSerialized(CharSequence buffer, int offset) {\n    ncomponents = (short) buffer.charAt(offset++);\n    if (ncomponents == 0) {\n      return offset;\n    }\n\n    if (ncomponents >= ends.length) {\n      ends = new short[Math.max(ends.length * 2, ncomponents)];\n    }\n    for (int i = 0; i < ncomponents; i++) {\n      ends[i] = (short) buffer.charAt(offset++);\n    }\n\n    int usedchars = ends[ncomponents - 1];\n    if (usedchars > chars.length) {\n      chars = new char[Math.max(chars.length * 2, usedchars)];\n    }\n    for (int i = 0; i < usedchars; i++) {\n      chars[i] = buffer.charAt(offset++);\n    }\n\n    return offset;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}