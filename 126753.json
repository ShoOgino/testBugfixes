{"path":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#startDoc(int,int).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriter#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    assert docID >= 0: \"got docID=\" + docID;\n\n    /*\n    if (termID != -1) {\n      if (docID == 0) {\n        baseDocID = termID;\n      } else if (baseDocID + docID != termID) {\n        throw new RuntimeException(\"WRITE: baseDocID=\" + baseDocID + \" docID=\" + docID + \" termID=\" + termID);\n      }\n    }\n    */\n\n    if (DEBUG) System.out.println(\"PW     doc=\" + docID);\n\n    if (pendingCount == pending.length) {\n      push();\n      if (DEBUG) System.out.println(\"PW: wrapped.finishDoc\");\n      wrappedPostingsWriter.finishDoc();\n    }\n\n    if (pendingCount != -1) {\n      assert pendingCount < pending.length;\n      currentDoc = pending[pendingCount];\n      currentDoc.docID = docID;\n      if (indexOptions == IndexOptions.DOCS_ONLY) {\n        pendingCount++;\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) { \n        pendingCount++;\n        currentDoc.termFreq = termDocFreq;\n      } else {\n        currentDoc.termFreq = termDocFreq;\n      }\n    } else {\n      // We've already seen too many docs for this term --\n      // just forward to our fallback writer\n      wrappedPostingsWriter.startDoc(docID, termDocFreq);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    assert docID >= 0: \"got docID=\" + docID;\n\n    /*\n    if (termID != -1) {\n      if (docID == 0) {\n        baseDocID = termID;\n      } else if (baseDocID + docID != termID) {\n        throw new RuntimeException(\"WRITE: baseDocID=\" + baseDocID + \" docID=\" + docID + \" termID=\" + termID);\n      }\n    }\n    */\n\n    if (DEBUG) System.out.println(\"PW     doc=\" + docID);\n\n    if (pendingCount == pending.length) {\n      push();\n      if (DEBUG) System.out.println(\"PW: wrapped.finishDoc\");\n      wrappedPostingsWriter.finishDoc();\n    }\n\n    if (pendingCount != -1) {\n      assert pendingCount < pending.length;\n      currentDoc = pending[pendingCount];\n      currentDoc.docID = docID;\n      if (indexOptions == IndexOptions.DOCS_ONLY) {\n        pendingCount++;\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) { \n        pendingCount++;\n        currentDoc.termFreq = termDocFreq;\n      } else {\n        currentDoc.termFreq = termDocFreq;\n      }\n    } else {\n      // We've already seen too many docs for this term --\n      // just forward to our fallback writer\n      wrappedPostingsWriter.startDoc(docID, termDocFreq);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    assert docID >= 0: \"got docID=\" + docID;\n\n    /*\n    if (termID != -1) {\n      if (docID == 0) {\n        baseDocID = termID;\n      } else if (baseDocID + docID != termID) {\n        throw new RuntimeException(\"WRITE: baseDocID=\" + baseDocID + \" docID=\" + docID + \" termID=\" + termID);\n      }\n    }\n    */\n\n    if (DEBUG) System.out.println(\"PW     doc=\" + docID);\n\n    if (pendingCount == pending.length) {\n      push();\n      if (DEBUG) System.out.println(\"PW: wrapped.finishDoc\");\n      wrappedPostingsWriter.finishDoc();\n    }\n\n    if (pendingCount != -1) {\n      assert pendingCount < pending.length;\n      currentDoc = pending[pendingCount];\n      currentDoc.docID = docID;\n      if (indexOptions == IndexOptions.DOCS_ONLY) {\n        pendingCount++;\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) { \n        pendingCount++;\n        currentDoc.termFreq = termDocFreq;\n      } else {\n        currentDoc.termFreq = termDocFreq;\n      }\n    } else {\n      // We've already seen too many docs for this term --\n      // just forward to our fallback writer\n      wrappedPostingsWriter.startDoc(docID, termDocFreq);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    assert docID >= 0: \"got docID=\" + docID;\n\n    /*\n    if (termID != -1) {\n      if (docID == 0) {\n        baseDocID = termID;\n      } else if (baseDocID + docID != termID) {\n        throw new RuntimeException(\"WRITE: baseDocID=\" + baseDocID + \" docID=\" + docID + \" termID=\" + termID);\n      }\n    }\n    */\n\n    if (DEBUG) System.out.println(\"PW     doc=\" + docID);\n\n    if (pendingCount == pending.length) {\n      push();\n      if (DEBUG) System.out.println(\"PW: wrapped.finishDoc\");\n      wrappedPostingsWriter.finishDoc();\n    }\n\n    if (pendingCount != -1) {\n      assert pendingCount < pending.length;\n      currentDoc = pending[pendingCount];\n      currentDoc.docID = docID;\n      if (indexOptions == IndexOptions.DOCS_ONLY) {\n        pendingCount++;\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) { \n        pendingCount++;\n        currentDoc.termFreq = termDocFreq;\n      } else {\n        currentDoc.termFreq = termDocFreq;\n      }\n    } else {\n      // We've already seen too many docs for this term --\n      // just forward to our fallback writer\n      wrappedPostingsWriter.startDoc(docID, termDocFreq);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}