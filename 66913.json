{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#fetchCollectionState(String,Watcher).mjava","commits":[{"id":"1072b8e47b50f1c4fb039e1f54a736f381d6f809","date":1438956441,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#fetchCollectionState(String,Watcher).mjava","pathOld":"/dev/null","sourceNew":"  private DocCollection fetchCollectionState(String coll, Watcher watcher) throws KeeperException, InterruptedException {\n    String collectionPath = getCollectionPath(coll);\n    try {\n      Stat stat = new Stat();\n      byte[] data = zkClient.getData(collectionPath, watcher, stat, true);\n      ClusterState state = ClusterState.load(stat.getVersion(), data,\n              Collections.<String>emptySet(), collectionPath);\n      ClusterState.CollectionRef collectionRef = state.getCollectionStates().get(coll);\n      return collectionRef == null ? null : collectionRef.get();\n    } catch (KeeperException.NoNodeException e) {\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["727701119ba83331e2715512702367dc549a0d4f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"727701119ba83331e2715512702367dc549a0d4f","date":1461113194,"type":3,"author":"Scott Blum","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#fetchCollectionState(String,Watcher).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#fetchCollectionState(String,Watcher).mjava","sourceNew":"  private DocCollection fetchCollectionState(String coll, Watcher watcher) throws KeeperException, InterruptedException {\n    String collectionPath = getCollectionPath(coll);\n    while (true) {\n      try {\n        Stat stat = new Stat();\n        byte[] data = zkClient.getData(collectionPath, watcher, stat, true);\n        ClusterState state = ClusterState.load(stat.getVersion(), data,\n            Collections.<String>emptySet(), collectionPath);\n        ClusterState.CollectionRef collectionRef = state.getCollectionStates().get(coll);\n        return collectionRef == null ? null : collectionRef.get();\n      } catch (KeeperException.NoNodeException e) {\n        if (watcher != null) {\n          // Leave an exists watch in place in case a state.json is created later.\n          Stat exists = zkClient.exists(collectionPath, watcher, true);\n          if (exists != null) {\n            // Rare race condition, we tried to fetch the data and couldn't find it, then we found it exists.\n            // Loop and try again.\n            continue;\n          }\n        }\n        return null;\n      }\n    }\n  }\n\n","sourceOld":"  private DocCollection fetchCollectionState(String coll, Watcher watcher) throws KeeperException, InterruptedException {\n    String collectionPath = getCollectionPath(coll);\n    try {\n      Stat stat = new Stat();\n      byte[] data = zkClient.getData(collectionPath, watcher, stat, true);\n      ClusterState state = ClusterState.load(stat.getVersion(), data,\n              Collections.<String>emptySet(), collectionPath);\n      ClusterState.CollectionRef collectionRef = state.getCollectionStates().get(coll);\n      return collectionRef == null ? null : collectionRef.get();\n    } catch (KeeperException.NoNodeException e) {\n      return null;\n    }\n  }\n\n","bugFix":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9b701e0fcef214f86bab1daf107adce0b0131212","date":1461241874,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#fetchCollectionState(String,Watcher).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#fetchCollectionState(String,Watcher).mjava","sourceNew":"  private DocCollection fetchCollectionState(String coll, Watcher watcher) throws KeeperException, InterruptedException {\n    String collectionPath = getCollectionPath(coll);\n    while (true) {\n      try {\n        Stat stat = new Stat();\n        byte[] data = zkClient.getData(collectionPath, watcher, stat, true);\n        ClusterState state = ClusterState.load(stat.getVersion(), data,\n            Collections.<String>emptySet(), collectionPath);\n        ClusterState.CollectionRef collectionRef = state.getCollectionStates().get(coll);\n        return collectionRef == null ? null : collectionRef.get();\n      } catch (KeeperException.NoNodeException e) {\n        if (watcher != null) {\n          // Leave an exists watch in place in case a state.json is created later.\n          Stat exists = zkClient.exists(collectionPath, watcher, true);\n          if (exists != null) {\n            // Rare race condition, we tried to fetch the data and couldn't find it, then we found it exists.\n            // Loop and try again.\n            continue;\n          }\n        }\n        return null;\n      }\n    }\n  }\n\n","sourceOld":"  private DocCollection fetchCollectionState(String coll, Watcher watcher) throws KeeperException, InterruptedException {\n    String collectionPath = getCollectionPath(coll);\n    try {\n      Stat stat = new Stat();\n      byte[] data = zkClient.getData(collectionPath, watcher, stat, true);\n      ClusterState state = ClusterState.load(stat.getVersion(), data,\n              Collections.<String>emptySet(), collectionPath);\n      ClusterState.CollectionRef collectionRef = state.getCollectionStates().get(coll);\n      return collectionRef == null ? null : collectionRef.get();\n    } catch (KeeperException.NoNodeException e) {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#fetchCollectionState(String,Watcher).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#fetchCollectionState(String,Watcher).mjava","sourceNew":"  private DocCollection fetchCollectionState(String coll, Watcher watcher) throws KeeperException, InterruptedException {\n    String collectionPath = getCollectionPath(coll);\n    while (true) {\n      try {\n        Stat stat = new Stat();\n        byte[] data = zkClient.getData(collectionPath, watcher, stat, true);\n        ClusterState state = ClusterState.createFromJson(stat.getVersion(), data, Collections.emptySet());\n        ClusterState.CollectionRef collectionRef = state.getCollectionStates().get(coll);\n        return collectionRef == null ? null : collectionRef.get();\n      } catch (KeeperException.NoNodeException e) {\n        if (watcher != null) {\n          // Leave an exists watch in place in case a state.json is created later.\n          Stat exists = zkClient.exists(collectionPath, watcher, true);\n          if (exists != null) {\n            // Rare race condition, we tried to fetch the data and couldn't find it, then we found it exists.\n            // Loop and try again.\n            continue;\n          }\n        }\n        return null;\n      }\n    }\n  }\n\n","sourceOld":"  private DocCollection fetchCollectionState(String coll, Watcher watcher) throws KeeperException, InterruptedException {\n    String collectionPath = getCollectionPath(coll);\n    while (true) {\n      try {\n        Stat stat = new Stat();\n        byte[] data = zkClient.getData(collectionPath, watcher, stat, true);\n        ClusterState state = ClusterState.load(stat.getVersion(), data,\n            Collections.<String>emptySet(), collectionPath);\n        ClusterState.CollectionRef collectionRef = state.getCollectionStates().get(coll);\n        return collectionRef == null ? null : collectionRef.get();\n      } catch (KeeperException.NoNodeException e) {\n        if (watcher != null) {\n          // Leave an exists watch in place in case a state.json is created later.\n          Stat exists = zkClient.exists(collectionPath, watcher, true);\n          if (exists != null) {\n            // Rare race condition, we tried to fetch the data and couldn't find it, then we found it exists.\n            // Loop and try again.\n            continue;\n          }\n        }\n        return null;\n      }\n    }\n  }\n\n","bugFix":["727701119ba83331e2715512702367dc549a0d4f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"727701119ba83331e2715512702367dc549a0d4f":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"9b701e0fcef214f86bab1daf107adce0b0131212":["1072b8e47b50f1c4fb039e1f54a736f381d6f809","727701119ba83331e2715512702367dc549a0d4f"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["9b701e0fcef214f86bab1daf107adce0b0131212"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"727701119ba83331e2715512702367dc549a0d4f":["9b701e0fcef214f86bab1daf107adce0b0131212"],"9b701e0fcef214f86bab1daf107adce0b0131212":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["727701119ba83331e2715512702367dc549a0d4f","9b701e0fcef214f86bab1daf107adce0b0131212"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}