{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#testNonRetryableRequests().mjava","commits":[{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#testNonRetryableRequests().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNonRetryableRequests() throws Exception {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n      // important to have one replica on each node\n      RequestStatusState state = CollectionAdminRequest.createCollection(\"foo\", \"conf\", 1, NODE_COUNT).processAndWait(client, 60);\n      if (state == RequestStatusState.COMPLETED) {\n        cluster.waitForActiveCollection(\"foo\", 1, NODE_COUNT);\n        client.setDefaultCollection(\"foo\");\n\n        Map<String, String> adminPathToMbean = new HashMap<>(CommonParams.ADMIN_PATHS.size());\n        adminPathToMbean.put(CommonParams.COLLECTIONS_HANDLER_PATH, CollectionsHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CORES_HANDLER_PATH, CoreAdminHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CONFIGSETS_HANDLER_PATH, ConfigSetsHandler.class.getName());\n        // we do not add the authc/authz handlers because they do not currently expose any mbeans\n\n        for (String adminPath : adminPathToMbean.keySet()) {\n          long errorsBefore = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"ADMIN\", adminPathToMbean.get(adminPath), adminPath, true);\n            errorsBefore += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(\"qt\", adminPath);\n          params.set(\"action\", \"foobar\"); // this should cause an error\n          QueryRequest req = new QueryRequest(params);\n          try {\n            NamedList<Object> resp = client.request(req);\n            fail(\"call to foo for admin path \" + adminPath + \" should have failed\");\n          } catch (Exception e) {\n            // expected\n          }\n          long errorsAfter = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"ADMIN\", adminPathToMbean.get(adminPath), adminPath, true);\n            errorsAfter += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n          assertEquals(errorsBefore + 1, errorsAfter);\n        }\n      } else {\n        fail(\"Collection could not be created within 60 seconds\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#testNonRetryableRequests().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#testNonRetryableRequests().mjava","sourceNew":"  @Test\n  public void testNonRetryableRequests() throws Exception {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n      // important to have one replica on each node\n      RequestStatusState state = CollectionAdminRequest.createCollection(\"foo\", \"conf\", 1, NODE_COUNT).processAndWait(client, 60);\n      if (state == RequestStatusState.COMPLETED) {\n        cluster.waitForActiveCollection(\"foo\", 1, NODE_COUNT);\n        client.setDefaultCollection(\"foo\");\n\n        Map<String, String> adminPathToMbean = new HashMap<>(CommonParams.ADMIN_PATHS.size());\n        adminPathToMbean.put(CommonParams.COLLECTIONS_HANDLER_PATH, CollectionsHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CORES_HANDLER_PATH, CoreAdminHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CONFIGSETS_HANDLER_PATH, ConfigSetsHandler.class.getName());\n        // we do not add the authc/authz handlers because they do not currently expose any mbeans\n\n        for (String adminPath : adminPathToMbean.keySet()) {\n          long errorsBefore = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"ADMIN\", adminPathToMbean.get(adminPath), adminPath, true);\n            errorsBefore += numRequests;\n            if (log.isInfoEnabled()) {\n              log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n            }\n          }\n\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(\"qt\", adminPath);\n          params.set(\"action\", \"foobar\"); // this should cause an error\n          QueryRequest req = new QueryRequest(params);\n          try {\n            NamedList<Object> resp = client.request(req);\n            fail(\"call to foo for admin path \" + adminPath + \" should have failed\");\n          } catch (Exception e) {\n            // expected\n          }\n          long errorsAfter = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"ADMIN\", adminPathToMbean.get(adminPath), adminPath, true);\n            errorsAfter += numRequests;\n            if (log.isInfoEnabled()) {\n              log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n            }\n          }\n          assertEquals(errorsBefore + 1, errorsAfter);\n        }\n      } else {\n        fail(\"Collection could not be created within 60 seconds\");\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNonRetryableRequests() throws Exception {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n      // important to have one replica on each node\n      RequestStatusState state = CollectionAdminRequest.createCollection(\"foo\", \"conf\", 1, NODE_COUNT).processAndWait(client, 60);\n      if (state == RequestStatusState.COMPLETED) {\n        cluster.waitForActiveCollection(\"foo\", 1, NODE_COUNT);\n        client.setDefaultCollection(\"foo\");\n\n        Map<String, String> adminPathToMbean = new HashMap<>(CommonParams.ADMIN_PATHS.size());\n        adminPathToMbean.put(CommonParams.COLLECTIONS_HANDLER_PATH, CollectionsHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CORES_HANDLER_PATH, CoreAdminHandler.class.getName());\n        adminPathToMbean.put(CommonParams.CONFIGSETS_HANDLER_PATH, ConfigSetsHandler.class.getName());\n        // we do not add the authc/authz handlers because they do not currently expose any mbeans\n\n        for (String adminPath : adminPathToMbean.keySet()) {\n          long errorsBefore = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"ADMIN\", adminPathToMbean.get(adminPath), adminPath, true);\n            errorsBefore += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(\"qt\", adminPath);\n          params.set(\"action\", \"foobar\"); // this should cause an error\n          QueryRequest req = new QueryRequest(params);\n          try {\n            NamedList<Object> resp = client.request(req);\n            fail(\"call to foo for admin path \" + adminPath + \" should have failed\");\n          } catch (Exception e) {\n            // expected\n          }\n          long errorsAfter = 0;\n          for (JettySolrRunner runner : cluster.getJettySolrRunners()) {\n            Long numRequests = getNumRequests(runner.getBaseUrl().toString(), \"foo\", \"ADMIN\", adminPathToMbean.get(adminPath), adminPath, true);\n            errorsAfter += numRequests;\n            log.info(\"Found {} requests to {} on {}\", numRequests, adminPath, runner.getBaseUrl());\n          }\n          assertEquals(errorsBefore + 1, errorsAfter);\n        }\n      } else {\n        fail(\"Collection could not be created within 60 seconds\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dc613ed6f75d1988140301ee8de8fdb056fa337"]},"commit2Childs":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}