{"path":"solr/src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","pathOld":"/dev/null","sourceNew":"  public Query parse() throws ParseException {\n    String qstr = getString();\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    // these could either be checked & set here, or in the SolrQueryParser constructor\n    String opParam = getParam(QueryParsing.OP);\n    if (opParam != null) {\n      lparser.setDefaultOperator(\"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n    } else {\n      // try to get default operator from schema\n      QueryParser.Operator operator = getReq().getSchema().getSolrQueryParser(null).getDefaultOperator();\n      lparser.setDefaultOperator(null == operator ? QueryParser.Operator.OR : operator);\n    }\n\n    return lparser.parse(qstr);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","sourceNew":null,"sourceOld":"  public Query parse() throws ParseException {\n    String qstr = getString();\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    // these could either be checked & set here, or in the SolrQueryParser constructor\n    String opParam = getParam(QueryParsing.OP);\n    if (opParam != null) {\n      lparser.setDefaultOperator(\"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n    } else {\n      // try to get default operator from schema\n      QueryParser.Operator operator = getReq().getSchema().getSolrQueryParser(null).getDefaultOperator();\n      lparser.setDefaultOperator(null == operator ? QueryParser.Operator.OR : operator);\n    }\n\n    return lparser.parse(qstr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","pathOld":"src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","sourceNew":"  public Query parse() throws ParseException {\n    String qstr = getString();\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    // these could either be checked & set here, or in the SolrQueryParser constructor\n    String opParam = getParam(QueryParsing.OP);\n    if (opParam != null) {\n      lparser.setDefaultOperator(\"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n    } else {\n      // try to get default operator from schema\n      QueryParser.Operator operator = getReq().getSchema().getSolrQueryParser(null).getDefaultOperator();\n      lparser.setDefaultOperator(null == operator ? QueryParser.Operator.OR : operator);\n    }\n\n    return lparser.parse(qstr);\n  }\n\n","sourceOld":"  public Query parse() throws ParseException {\n    String qstr = getString();\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    // these could either be checked & set here, or in the SolrQueryParser constructor\n    String opParam = getParam(QueryParsing.OP);\n    if (opParam != null) {\n      lparser.setDefaultOperator(\"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n    } else {\n      // try to get default operator from schema\n      QueryParser.Operator operator = getReq().getSchema().getSolrQueryParser(null).getDefaultOperator();\n      lparser.setDefaultOperator(null == operator ? QueryParser.Operator.OR : operator);\n    }\n\n    return lparser.parse(qstr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","pathOld":"/dev/null","sourceNew":"  public Query parse() throws ParseException {\n    String qstr = getString();\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    // these could either be checked & set here, or in the SolrQueryParser constructor\n    String opParam = getParam(QueryParsing.OP);\n    if (opParam != null) {\n      lparser.setDefaultOperator(\"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n    } else {\n      // try to get default operator from schema\n      QueryParser.Operator operator = getReq().getSchema().getSolrQueryParser(null).getDefaultOperator();\n      lparser.setDefaultOperator(null == operator ? QueryParser.Operator.OR : operator);\n    }\n\n    return lparser.parse(qstr);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec3ba1d2792d1ffb27f73257ac395fb32728705e","date":1275503651,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","pathOld":"solr/src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","sourceNew":"  public Query parse() throws ParseException {\n    String qstr = getString();\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    lparser.setDefaultOperator\n      (QueryParsing.getQueryParserDefaultOperator(getReq().getSchema(), \n                                                  getParam(QueryParsing.OP)));\n\n    return lparser.parse(qstr);\n  }\n\n","sourceOld":"  public Query parse() throws ParseException {\n    String qstr = getString();\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    // these could either be checked & set here, or in the SolrQueryParser constructor\n    String opParam = getParam(QueryParsing.OP);\n    if (opParam != null) {\n      lparser.setDefaultOperator(\"AND\".equals(opParam) ? QueryParser.Operator.AND : QueryParser.Operator.OR);\n    } else {\n      // try to get default operator from schema\n      QueryParser.Operator operator = getReq().getSchema().getSolrQueryParser(null).getDefaultOperator();\n      lparser.setDefaultOperator(null == operator ? QueryParser.Operator.OR : operator);\n    }\n\n    return lparser.parse(qstr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5f3a3bdd2298a698af763bc4a4e6510f0b3549f","date":1284226094,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","pathOld":"solr/src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","sourceNew":"  public Query parse() throws ParseException {\n    String qstr = getString();\n    if (qstr == null) return null;\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    lparser.setDefaultOperator\n      (QueryParsing.getQueryParserDefaultOperator(getReq().getSchema(), \n                                                  getParam(QueryParsing.OP)));\n\n    return lparser.parse(qstr);\n  }\n\n","sourceOld":"  public Query parse() throws ParseException {\n    String qstr = getString();\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    lparser.setDefaultOperator\n      (QueryParsing.getQueryParserDefaultOperator(getReq().getSchema(), \n                                                  getParam(QueryParsing.OP)));\n\n    return lparser.parse(qstr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","pathOld":"solr/src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","sourceNew":"  public Query parse() throws ParseException {\n    String qstr = getString();\n    if (qstr == null) return null;\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    lparser.setDefaultOperator\n      (QueryParsing.getQueryParserDefaultOperator(getReq().getSchema(), \n                                                  getParam(QueryParsing.OP)));\n\n    return lparser.parse(qstr);\n  }\n\n","sourceOld":"  public Query parse() throws ParseException {\n    String qstr = getString();\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    lparser.setDefaultOperator\n      (QueryParsing.getQueryParserDefaultOperator(getReq().getSchema(), \n                                                  getParam(QueryParsing.OP)));\n\n    return lparser.parse(qstr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","pathOld":"solr/src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws ParseException {\n    String qstr = getString();\n    if (qstr == null) return null;\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    lparser.setDefaultOperator\n      (QueryParsing.getQueryParserDefaultOperator(getReq().getSchema(), \n                                                  getParam(QueryParsing.OP)));\n\n    return lparser.parse(qstr);\n  }\n\n","sourceOld":"  public Query parse() throws ParseException {\n    String qstr = getString();\n    if (qstr == null) return null;\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    lparser.setDefaultOperator\n      (QueryParsing.getQueryParserDefaultOperator(getReq().getSchema(), \n                                                  getParam(QueryParsing.OP)));\n\n    return lparser.parse(qstr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","pathOld":"solr/src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws ParseException {\n    String qstr = getString();\n    if (qstr == null) return null;\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    lparser.setDefaultOperator\n      (QueryParsing.getQueryParserDefaultOperator(getReq().getSchema(), \n                                                  getParam(QueryParsing.OP)));\n\n    return lparser.parse(qstr);\n  }\n\n","sourceOld":"  public Query parse() throws ParseException {\n    String qstr = getString();\n    if (qstr == null) return null;\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    lparser.setDefaultOperator\n      (QueryParsing.getQueryParserDefaultOperator(getReq().getSchema(), \n                                                  getParam(QueryParsing.OP)));\n\n    return lparser.parse(qstr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","pathOld":"solr/src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws ParseException {\n    String qstr = getString();\n    if (qstr == null) return null;\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    lparser.setDefaultOperator\n      (QueryParsing.getQueryParserDefaultOperator(getReq().getSchema(), \n                                                  getParam(QueryParsing.OP)));\n\n    return lparser.parse(qstr);\n  }\n\n","sourceOld":"  public Query parse() throws ParseException {\n    String qstr = getString();\n    if (qstr == null) return null;\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    lparser.setDefaultOperator\n      (QueryParsing.getQueryParserDefaultOperator(getReq().getSchema(), \n                                                  getParam(QueryParsing.OP)));\n\n    return lparser.parse(qstr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","pathOld":"solr/src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws ParseException {\n    String qstr = getString();\n    if (qstr == null) return null;\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    lparser.setDefaultOperator\n      (QueryParsing.getQueryParserDefaultOperator(getReq().getSchema(), \n                                                  getParam(QueryParsing.OP)));\n\n    return lparser.parse(qstr);\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws ParseException {\n    String qstr = getString();\n    if (qstr == null) return null;\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    lparser.setDefaultOperator\n      (QueryParsing.getQueryParserDefaultOperator(getReq().getSchema(), \n                                                  getParam(QueryParsing.OP)));\n\n    return lparser.parse(qstr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","pathOld":"solr/src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws ParseException {\n    String qstr = getString();\n    if (qstr == null) return null;\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    lparser.setDefaultOperator\n      (QueryParsing.getQueryParserDefaultOperator(getReq().getSchema(), \n                                                  getParam(QueryParsing.OP)));\n\n    return lparser.parse(qstr);\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws ParseException {\n    String qstr = getString();\n    if (qstr == null) return null;\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    lparser.setDefaultOperator\n      (QueryParsing.getQueryParserDefaultOperator(getReq().getSchema(), \n                                                  getParam(QueryParsing.OP)));\n\n    return lparser.parse(qstr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","pathOld":"solr/src/java/org/apache/solr/search/LuceneQParser[LuceneQParserPlugin]#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws ParseException {\n    String qstr = getString();\n    if (qstr == null) return null;\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    lparser.setDefaultOperator\n      (QueryParsing.getQueryParserDefaultOperator(getReq().getSchema(), \n                                                  getParam(QueryParsing.OP)));\n\n    return lparser.parse(qstr);\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws ParseException {\n    String qstr = getString();\n    if (qstr == null) return null;\n\n    String defaultField = getParam(CommonParams.DF);\n    if (defaultField==null) {\n      defaultField = getReq().getSchema().getDefaultSearchFieldName();\n    }\n    lparser = new SolrQueryParser(this, defaultField);\n\n    lparser.setDefaultOperator\n      (QueryParsing.getQueryParserDefaultOperator(getReq().getSchema(), \n                                                  getParam(QueryParsing.OP)));\n\n    return lparser.parse(qstr);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["d5f3a3bdd2298a698af763bc4a4e6510f0b3549f"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["ec3ba1d2792d1ffb27f73257ac395fb32728705e","d5f3a3bdd2298a698af763bc4a4e6510f0b3549f"],"ec3ba1d2792d1ffb27f73257ac395fb32728705e":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d5f3a3bdd2298a698af763bc4a4e6510f0b3549f","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"d5f3a3bdd2298a698af763bc4a4e6510f0b3549f":["ec3ba1d2792d1ffb27f73257ac395fb32728705e"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"ec3ba1d2792d1ffb27f73257ac395fb32728705e":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d5f3a3bdd2298a698af763bc4a4e6510f0b3549f"],"1da8d55113b689b06716246649de6f62430f15c0":["ec3ba1d2792d1ffb27f73257ac395fb32728705e"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"d5f3a3bdd2298a698af763bc4a4e6510f0b3549f":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}