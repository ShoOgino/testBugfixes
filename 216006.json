{"path":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermDistinctValuesCollector#collect(int).mjava","commits":[{"id":"166661dd25a09458b128e5c0b86e3b762a6ded68","date":1332333666,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermDistinctValuesCollector#collect(int).mjava","pathOld":"/dev/null","sourceNew":"  public void collect(int doc) throws IOException {\n    int slot = ordSet.find(groupFieldTermIndex.getOrd(doc));\n    if (slot < 0) {\n      return;\n    }\n\n    GroupCount gc = groupCounts[slot];\n    int countOrd = countFieldTermIndex.getOrd(doc);\n    if (doesNotContainsOrd(countOrd, gc.ords)) {\n      if (countOrd == 0) {\n        gc.uniqueValues.add(null);\n      } else {\n        gc.uniqueValues.add(countFieldTermIndex.lookup(countOrd, new BytesRef()));\n      }\n\n      gc.ords = Arrays.copyOf(gc.ords, gc.ords.length + 1);\n      gc.ords[gc.ords.length - 1] = countOrd;\n      if (gc.ords.length > 1) {\n        Arrays.sort(gc.ords);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermDistinctValuesCollector#collect(int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermDistinctValuesCollector#collect(int).mjava","sourceNew":"  public void collect(int doc) throws IOException {\n    int slot = ordSet.find(groupFieldTermIndex.getOrd(doc));\n    if (slot < 0) {\n      return;\n    }\n\n    GroupCount gc = groupCounts[slot];\n    int countOrd = countFieldTermIndex.getOrd(doc);\n    if (doesNotContainsOrd(countOrd, gc.ords)) {\n      if (countOrd == 0) {\n        gc.uniqueValues.add(null);\n      } else {\n        gc.uniqueValues.add(countFieldTermIndex.lookup(countOrd, new BytesRef()));\n      }\n\n      gc.ords = Arrays.copyOf(gc.ords, gc.ords.length + 1);\n      gc.ords[gc.ords.length - 1] = countOrd;\n      if (gc.ords.length > 1) {\n        Arrays.sort(gc.ords);\n      }\n    }\n  }\n\n","sourceOld":"  public void collect(int doc) throws IOException {\n    int slot = ordSet.find(groupFieldTermIndex.getOrd(doc));\n    if (slot < 0) {\n      return;\n    }\n\n    GroupCount gc = groupCounts[slot];\n    int countOrd = countFieldTermIndex.getOrd(doc);\n    if (doesNotContainsOrd(countOrd, gc.ords)) {\n      if (countOrd == 0) {\n        gc.uniqueValues.add(null);\n      } else {\n        gc.uniqueValues.add(countFieldTermIndex.lookup(countOrd, new BytesRef()));\n      }\n\n      gc.ords = Arrays.copyOf(gc.ords, gc.ords.length + 1);\n      gc.ords[gc.ords.length - 1] = countOrd;\n      if (gc.ords.length > 1) {\n        Arrays.sort(gc.ords);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["166661dd25a09458b128e5c0b86e3b762a6ded68"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"166661dd25a09458b128e5c0b86e3b762a6ded68":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["166661dd25a09458b128e5c0b86e3b762a6ded68"],"166661dd25a09458b128e5c0b86e3b762a6ded68":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}