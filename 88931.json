{"path":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,String,ZkStateReader).mjava","commits":[{"id":"d118ef896fa37a21d831f7e8ffcb8c44b9afc13b","date":1496237185,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,String,ZkStateReader).mjava","pathOld":"/dev/null","sourceNew":"  public static Map<ReplicaAssigner.Position, String> getPositionsUsingPolicy(String collName, List<String> shardNames, int numReplicas,\n                                                                              String policyName, ZkStateReader zkStateReader) throws KeeperException, InterruptedException {\n    try (CloudSolrClient csc = new CloudSolrClient.Builder()\n        .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n        .build()) {\n      SolrClientDataProvider clientDataProvider = new SolrClientDataProvider(csc);\n      Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(collName,\n          zkStateReader.getZkClient().getJson(SOLR_AUTOSCALING_CONF_PATH, true),\n          clientDataProvider, singletonMap(collName, policyName), shardNames, numReplicas);\n      Map<ReplicaAssigner.Position, String> result = new HashMap<>();\n      for (Map.Entry<String, List<String>> e : locations.entrySet()) {\n        List<String> value = e.getValue();\n        for (int i = 0; i < value.size(); i++) {\n          result.put(new ReplicaAssigner.Position(e.getKey(), i, Replica.Type.NRT), value.get(i));\n        }\n      }\n      return result;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4328dc3f7309b4c82d12f9e9420a487a1b9945dd","date":1496650286,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,String,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,String,ZkStateReader).mjava","sourceNew":"  public static Map<ReplicaAssigner.Position, String> getPositionsUsingPolicy(String collName, List<String> shardNames, int numReplicas,\n                                                                              String policyName, ZkStateReader zkStateReader) throws KeeperException, InterruptedException {\n    try (CloudSolrClient csc = new CloudSolrClient.Builder()\n        .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n        .build()) {\n      SolrClientDataProvider clientDataProvider = new SolrClientDataProvider(csc);\n      Map<String, Object> autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n      Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(collName,\n          autoScalingJson,\n          clientDataProvider, singletonMap(collName, policyName), shardNames, numReplicas);\n      Map<ReplicaAssigner.Position, String> result = new HashMap<>();\n      for (Map.Entry<String, List<String>> e : locations.entrySet()) {\n        List<String> value = e.getValue();\n        for (int i = 0; i < value.size(); i++) {\n          result.put(new ReplicaAssigner.Position(e.getKey(), i, Replica.Type.NRT), value.get(i));\n        }\n      }\n      return result;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    }\n  }\n\n","sourceOld":"  public static Map<ReplicaAssigner.Position, String> getPositionsUsingPolicy(String collName, List<String> shardNames, int numReplicas,\n                                                                              String policyName, ZkStateReader zkStateReader) throws KeeperException, InterruptedException {\n    try (CloudSolrClient csc = new CloudSolrClient.Builder()\n        .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n        .build()) {\n      SolrClientDataProvider clientDataProvider = new SolrClientDataProvider(csc);\n      Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(collName,\n          zkStateReader.getZkClient().getJson(SOLR_AUTOSCALING_CONF_PATH, true),\n          clientDataProvider, singletonMap(collName, policyName), shardNames, numReplicas);\n      Map<ReplicaAssigner.Position, String> result = new HashMap<>();\n      for (Map.Entry<String, List<String>> e : locations.entrySet()) {\n        List<String> value = e.getValue();\n        for (int i = 0; i < value.size(); i++) {\n          result.put(new ReplicaAssigner.Position(e.getKey(), i, Replica.Type.NRT), value.get(i));\n        }\n      }\n      return result;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25e4a4cddd699db6cce60282e747c7705897e821","date":1496721158,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,String,ZkStateReader,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,String,ZkStateReader).mjava","sourceNew":"  public static Map<ReplicaAssigner.Position, String> getPositionsUsingPolicy(String collName, List<String> shardNames, int numReplicas,\n                                                                              String policyName, ZkStateReader zkStateReader,\n                                                                              List<String> nodesList) throws KeeperException, InterruptedException {\n    try (CloudSolrClient csc = new CloudSolrClient.Builder()\n        .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n        .build()) {\n      SolrClientDataProvider clientDataProvider = new SolrClientDataProvider(csc);\n      Map<String, Object> autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n      Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(collName,\n          autoScalingJson,\n          clientDataProvider, singletonMap(collName, policyName), shardNames, numReplicas, nodesList);\n      Map<ReplicaAssigner.Position, String> result = new HashMap<>();\n      for (Map.Entry<String, List<String>> e : locations.entrySet()) {\n        List<String> value = e.getValue();\n        for (int i = 0; i < value.size(); i++) {\n          result.put(new ReplicaAssigner.Position(e.getKey(), i, Replica.Type.NRT), value.get(i));\n        }\n      }\n      return result;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    }\n  }\n\n","sourceOld":"  public static Map<ReplicaAssigner.Position, String> getPositionsUsingPolicy(String collName, List<String> shardNames, int numReplicas,\n                                                                              String policyName, ZkStateReader zkStateReader) throws KeeperException, InterruptedException {\n    try (CloudSolrClient csc = new CloudSolrClient.Builder()\n        .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n        .build()) {\n      SolrClientDataProvider clientDataProvider = new SolrClientDataProvider(csc);\n      Map<String, Object> autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n      Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(collName,\n          autoScalingJson,\n          clientDataProvider, singletonMap(collName, policyName), shardNames, numReplicas);\n      Map<ReplicaAssigner.Position, String> result = new HashMap<>();\n      for (Map.Entry<String, List<String>> e : locations.entrySet()) {\n        List<String> value = e.getValue();\n        for (int i = 0; i < value.size(); i++) {\n          result.put(new ReplicaAssigner.Position(e.getKey(), i, Replica.Type.NRT), value.get(i));\n        }\n      }\n      return result;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"25e4a4cddd699db6cce60282e747c7705897e821":["4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d118ef896fa37a21d831f7e8ffcb8c44b9afc13b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["d118ef896fa37a21d831f7e8ffcb8c44b9afc13b"]},"commit2Childs":{"25e4a4cddd699db6cce60282e747c7705897e821":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d118ef896fa37a21d831f7e8ffcb8c44b9afc13b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d118ef896fa37a21d831f7e8ffcb8c44b9afc13b":["4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["25e4a4cddd699db6cce60282e747c7705897e821"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["25e4a4cddd699db6cce60282e747c7705897e821","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}