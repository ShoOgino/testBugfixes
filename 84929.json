{"path":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetSumValueSource#testSumScoreAggregator().mjava","commits":[{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetSumValueSource#testSumScoreAggregator().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetSumValueSource#testSumScoreAggregator().mjava","sourceNew":"  public void testSumScoreAggregator() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetsConfig config = new FacetsConfig(taxoWriter);\n\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) { // don't match all documents\n        doc.add(new StringField(\"f\", \"v\", Field.Store.NO));\n      }\n      doc.add(new FacetField(\"dim\", \"a\"));\n      iw.addDocument(config.build(doc));\n    }\n    \n    DirectoryReader r = DirectoryReader.open(iw, true);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    \n    FacetsCollector fc = new FacetsCollector(true);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    ConstantScoreQuery csq = new ConstantScoreQuery(new MatchAllDocsQuery());\n    csq.setBoost(2.0f);\n    \n    newSearcher(r).search(csq, MultiCollector.wrap(fc, topDocs));\n\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, new TaxonomyFacetSumValueSource.ScoreValueSource());\n    \n    TopDocs td = topDocs.topDocs();\n    int expected = (int) (td.getMaxScore() * td.totalHits);\n    assertEquals(expected, facets.getSpecificValue(\"dim\", \"a\").intValue());\n    \n    IOUtils.close(iw, taxoWriter, taxoReader, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  public void testSumScoreAggregator() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetsConfig config = new FacetsConfig(taxoWriter);\n\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) { // don't match all documents\n        doc.add(new StringField(\"f\", \"v\", Field.Store.NO));\n      }\n      doc.add(new FacetField(\"dim\", \"a\"));\n      iw.addDocument(config.build(doc));\n    }\n    \n    DirectoryReader r = DirectoryReader.open(iw, true);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    \n    SimpleFacetsCollector fc = new SimpleFacetsCollector(true);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    ConstantScoreQuery csq = new ConstantScoreQuery(new MatchAllDocsQuery());\n    csq.setBoost(2.0f);\n    \n    newSearcher(r).search(csq, MultiCollector.wrap(fc, topDocs));\n\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, new TaxonomyFacetSumValueSource.ScoreValueSource());\n    \n    TopDocs td = topDocs.topDocs();\n    int expected = (int) (td.getMaxScore() * td.totalHits);\n    assertEquals(expected, facets.getSpecificValue(\"dim\", \"a\").intValue());\n    \n    IOUtils.close(iw, taxoWriter, taxoReader, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78522aad83283ca58fae08fd89406b65429d0229","date":1385573562,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetSumValueSource#testSumScoreAggregator().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetSumValueSource#testSumScoreAggregator().mjava","sourceNew":"  public void testSumScoreAggregator() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetsConfig config = new FacetsConfig(taxoWriter);\n\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) { // don't match all documents\n        doc.add(new StringField(\"f\", \"v\", Field.Store.NO));\n      }\n      doc.add(new FacetField(\"dim\", \"a\"));\n      iw.addDocument(config.build(doc));\n    }\n    \n    DirectoryReader r = DirectoryReader.open(iw, true);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    \n    FacetsCollector fc = new FacetsCollector(true);\n    ConstantScoreQuery csq = new ConstantScoreQuery(new MatchAllDocsQuery());\n    csq.setBoost(2.0f);\n    \n    TopDocs td = Facets.search(newSearcher(r), csq, 10, fc);\n\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, new TaxonomyFacetSumValueSource.ScoreValueSource());\n    \n    int expected = (int) (td.getMaxScore() * td.totalHits);\n    assertEquals(expected, facets.getSpecificValue(\"dim\", \"a\").intValue());\n    \n    IOUtils.close(iw, taxoWriter, taxoReader, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  public void testSumScoreAggregator() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetsConfig config = new FacetsConfig(taxoWriter);\n\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) { // don't match all documents\n        doc.add(new StringField(\"f\", \"v\", Field.Store.NO));\n      }\n      doc.add(new FacetField(\"dim\", \"a\"));\n      iw.addDocument(config.build(doc));\n    }\n    \n    DirectoryReader r = DirectoryReader.open(iw, true);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    \n    FacetsCollector fc = new FacetsCollector(true);\n    TopScoreDocCollector topDocs = TopScoreDocCollector.create(10, false);\n    ConstantScoreQuery csq = new ConstantScoreQuery(new MatchAllDocsQuery());\n    csq.setBoost(2.0f);\n    \n    newSearcher(r).search(csq, MultiCollector.wrap(fc, topDocs));\n\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, new TaxonomyFacetSumValueSource.ScoreValueSource());\n    \n    TopDocs td = topDocs.topDocs();\n    int expected = (int) (td.getMaxScore() * td.totalHits);\n    assertEquals(expected, facets.getSpecificValue(\"dim\", \"a\").intValue());\n    \n    IOUtils.close(iw, taxoWriter, taxoReader, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd83550e4b0bdd36e7d9dca9273264100782440b","date":1385761753,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetSumValueSource#testSumScoreAggregator().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetSumValueSource#testSumScoreAggregator().mjava","sourceNew":"  public void testSumScoreAggregator() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetsConfig config = new FacetsConfig();\n\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) { // don't match all documents\n        doc.add(new StringField(\"f\", \"v\", Field.Store.NO));\n      }\n      doc.add(new FacetField(\"dim\", \"a\"));\n      iw.addDocument(config.build(taxoWriter, doc));\n    }\n    \n    DirectoryReader r = DirectoryReader.open(iw, true);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    \n    FacetsCollector fc = new FacetsCollector(true);\n    ConstantScoreQuery csq = new ConstantScoreQuery(new MatchAllDocsQuery());\n    csq.setBoost(2.0f);\n    \n    TopDocs td = FacetsCollector.search(newSearcher(r), csq, 10, fc);\n\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, new TaxonomyFacetSumValueSource.ScoreValueSource());\n    \n    int expected = (int) (td.getMaxScore() * td.totalHits);\n    assertEquals(expected, facets.getSpecificValue(\"dim\", \"a\").intValue());\n    \n    IOUtils.close(iw, taxoWriter, taxoReader, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  public void testSumScoreAggregator() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetsConfig config = new FacetsConfig(taxoWriter);\n\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) { // don't match all documents\n        doc.add(new StringField(\"f\", \"v\", Field.Store.NO));\n      }\n      doc.add(new FacetField(\"dim\", \"a\"));\n      iw.addDocument(config.build(doc));\n    }\n    \n    DirectoryReader r = DirectoryReader.open(iw, true);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    \n    FacetsCollector fc = new FacetsCollector(true);\n    ConstantScoreQuery csq = new ConstantScoreQuery(new MatchAllDocsQuery());\n    csq.setBoost(2.0f);\n    \n    TopDocs td = Facets.search(newSearcher(r), csq, 10, fc);\n\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, new TaxonomyFacetSumValueSource.ScoreValueSource());\n    \n    int expected = (int) (td.getMaxScore() * td.totalHits);\n    assertEquals(expected, facets.getSpecificValue(\"dim\", \"a\").intValue());\n    \n    IOUtils.close(iw, taxoWriter, taxoReader, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4edc984f0f4ac77c37e48ace2932f780f888453c","date":1388475218,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetSumValueSource#testSumScoreAggregator().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetSumValueSource#testSumScoreAggregator().mjava","sourceNew":"  public void testSumScoreAggregator() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetsConfig config = new FacetsConfig();\n\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) { // don't match all documents\n        doc.add(new StringField(\"f\", \"v\", Field.Store.NO));\n      }\n      doc.add(new FacetField(\"dim\", \"a\"));\n      iw.addDocument(config.build(taxoWriter, doc));\n    }\n    \n    DirectoryReader r = DirectoryReader.open(iw, true);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    \n    FacetsCollector fc = new FacetsCollector(true);\n    ConstantScoreQuery csq = new ConstantScoreQuery(new MatchAllDocsQuery());\n    csq.setBoost(2.0f);\n    \n    TopDocs td = FacetsCollector.search(newSearcher(r), csq, 10, fc);\n\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, new TaxonomyFacetSumValueSource.ScoreValueSource());\n    \n    int expected = (int) (td.getMaxScore() * td.totalHits);\n    assertEquals(expected, facets.getSpecificValue(\"dim\", \"a\").intValue());\n    \n    IOUtils.close(iw, taxoWriter, taxoReader, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  public void testSumScoreAggregator() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    FacetsConfig config = new FacetsConfig();\n\n    for(int i = atLeast(30); i > 0; --i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) { // don't match all documents\n        doc.add(new StringField(\"f\", \"v\", Field.Store.NO));\n      }\n      doc.add(new FacetField(\"dim\", \"a\"));\n      iw.addDocument(config.build(taxoWriter, doc));\n    }\n    \n    DirectoryReader r = DirectoryReader.open(iw, true);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    \n    FacetsCollector fc = new FacetsCollector(true);\n    ConstantScoreQuery csq = new ConstantScoreQuery(new MatchAllDocsQuery());\n    csq.setBoost(2.0f);\n    \n    TopDocs td = FacetsCollector.search(newSearcher(r), csq, 10, fc);\n\n    Facets facets = new TaxonomyFacetSumValueSource(taxoReader, config, fc, new TaxonomyFacetSumValueSource.ScoreValueSource());\n    \n    int expected = (int) (td.getMaxScore() * td.totalHits);\n    assertEquals(expected, facets.getSpecificValue(\"dim\", \"a\").intValue());\n    \n    IOUtils.close(iw, taxoWriter, taxoReader, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4edc984f0f4ac77c37e48ace2932f780f888453c":["fd83550e4b0bdd36e7d9dca9273264100782440b"],"21d36d0db865f7b84026b447bec653469a6e66df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["78522aad83283ca58fae08fd89406b65429d0229"],"78522aad83283ca58fae08fd89406b65429d0229":["21d36d0db865f7b84026b447bec653469a6e66df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4edc984f0f4ac77c37e48ace2932f780f888453c":[],"21d36d0db865f7b84026b447bec653469a6e66df":["78522aad83283ca58fae08fd89406b65429d0229"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["4edc984f0f4ac77c37e48ace2932f780f888453c"],"78522aad83283ca58fae08fd89406b65429d0229":["fd83550e4b0bdd36e7d9dca9273264100782440b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4edc984f0f4ac77c37e48ace2932f780f888453c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}