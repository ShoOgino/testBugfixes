{"path":"lucene/src/java/org/apache/lucene/util/BitVector#isSparse().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BitVector#isSparse().mjava","pathOld":"src/java/org/apache/lucene/util/BitVector#isSparse().mjava","sourceNew":"  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or dense, and should be saved as a bit set. */\n  private boolean isSparse() {\n    // note: order of comparisons below set to favor smaller values (no binary range search.)\n    // note: adding 4 because we start with ((int) -1) to indicate d-gaps format.\n    // note: we write the d-gap for the byte number, and the byte (bits[i]) itself, therefore\n    //       multiplying count by (8+8) or (8+16) or (8+24) etc.:\n    //       - first 8 for writing bits[i] (1 byte vs. 1 bit), and \n    //       - second part for writing the byte-number d-gap as vint. \n    // note: factor is for read/write of byte-arrays being faster than vints.  \n    int factor = 10;  \n    if (bits.length < (1<< 7)) return factor * (4 + (8+ 8)*count()) < size();\n    if (bits.length < (1<<14)) return factor * (4 + (8+16)*count()) < size();\n    if (bits.length < (1<<21)) return factor * (4 + (8+24)*count()) < size();\n    if (bits.length < (1<<28)) return factor * (4 + (8+32)*count()) < size();\n    return                            factor * (4 + (8+40)*count()) < size();\n  }\n\n","sourceOld":"  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or dense, and should be saved as a bit set. */\n  private boolean isSparse() {\n    // note: order of comparisons below set to favor smaller values (no binary range search.)\n    // note: adding 4 because we start with ((int) -1) to indicate d-gaps format.\n    // note: we write the d-gap for the byte number, and the byte (bits[i]) itself, therefore\n    //       multiplying count by (8+8) or (8+16) or (8+24) etc.:\n    //       - first 8 for writing bits[i] (1 byte vs. 1 bit), and \n    //       - second part for writing the byte-number d-gap as vint. \n    // note: factor is for read/write of byte-arrays being faster than vints.  \n    int factor = 10;  \n    if (bits.length < (1<< 7)) return factor * (4 + (8+ 8)*count()) < size();\n    if (bits.length < (1<<14)) return factor * (4 + (8+16)*count()) < size();\n    if (bits.length < (1<<21)) return factor * (4 + (8+24)*count()) < size();\n    if (bits.length < (1<<28)) return factor * (4 + (8+32)*count()) < size();\n    return                            factor * (4 + (8+40)*count()) < size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffa56322f560268d9e8c21373d8a84a9bbbbb7e2","date":1309279617,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BitVector#isSparse().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#isSparse().mjava","sourceNew":"  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or dense, and should be saved as a bit set. */\n  private boolean isSparse() {\n\n    final int setCount = count();\n    if (setCount == 0) {\n      return true;\n    }\n\n    final int avgGapLength = bits.length / setCount;\n\n    // expected number of bytes for vInt encoding of each gap\n    final int expectedDGapBytes;\n    if (avgGapLength <= (1<< 7)) {\n      expectedDGapBytes = 1;\n    } else if (avgGapLength <= (1<<14)) {\n      expectedDGapBytes = 2;\n    } else if (avgGapLength <= (1<<21)) {\n      expectedDGapBytes = 3;\n    } else if (avgGapLength <= (1<<28)) {\n      expectedDGapBytes = 4;\n    } else {\n      expectedDGapBytes = 5;\n    }\n\n    // +1 because we write the byte itself that contains the\n    // set bit\n    final int bytesPerSetBit = expectedDGapBytes + 1;\n    \n    // note: adding 32 because we start with ((int) -1) to indicate d-gaps format.\n    final long expectedBits = 32 + 8 * bytesPerSetBit * count();\n\n    // note: factor is for read/write of byte-arrays being faster than vints.  \n    final long factor = 10;  \n    return factor * expectedBits < size();\n  }\n\n","sourceOld":"  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or dense, and should be saved as a bit set. */\n  private boolean isSparse() {\n    // note: order of comparisons below set to favor smaller values (no binary range search.)\n    // note: adding 4 because we start with ((int) -1) to indicate d-gaps format.\n    // note: we write the d-gap for the byte number, and the byte (bits[i]) itself, therefore\n    //       multiplying count by (8+8) or (8+16) or (8+24) etc.:\n    //       - first 8 for writing bits[i] (1 byte vs. 1 bit), and \n    //       - second part for writing the byte-number d-gap as vint. \n    // note: factor is for read/write of byte-arrays being faster than vints.  \n    int factor = 10;  \n    if (bits.length < (1<< 7)) return factor * (4 + (8+ 8)*count()) < size();\n    if (bits.length < (1<<14)) return factor * (4 + (8+16)*count()) < size();\n    if (bits.length < (1<<21)) return factor * (4 + (8+24)*count()) < size();\n    if (bits.length < (1<<28)) return factor * (4 + (8+32)*count()) < size();\n    return                            factor * (4 + (8+40)*count()) < size();\n  }\n\n","bugFix":["5e9c92541487f346938eae718677aac806afcdab"],"bugIntro":["f0f277693790b6ff2e44509d1b5a1ca5a18f16de"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/BitVector#isSparse().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#isSparse().mjava","sourceNew":"  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or dense, and should be saved as a bit set. */\n  private boolean isSparse() {\n\n    final int setCount = count();\n    if (setCount == 0) {\n      return true;\n    }\n\n    final int avgGapLength = bits.length / setCount;\n\n    // expected number of bytes for vInt encoding of each gap\n    final int expectedDGapBytes;\n    if (avgGapLength <= (1<< 7)) {\n      expectedDGapBytes = 1;\n    } else if (avgGapLength <= (1<<14)) {\n      expectedDGapBytes = 2;\n    } else if (avgGapLength <= (1<<21)) {\n      expectedDGapBytes = 3;\n    } else if (avgGapLength <= (1<<28)) {\n      expectedDGapBytes = 4;\n    } else {\n      expectedDGapBytes = 5;\n    }\n\n    // +1 because we write the byte itself that contains the\n    // set bit\n    final int bytesPerSetBit = expectedDGapBytes + 1;\n    \n    // note: adding 32 because we start with ((int) -1) to indicate d-gaps format.\n    final long expectedBits = 32 + 8 * bytesPerSetBit * count();\n\n    // note: factor is for read/write of byte-arrays being faster than vints.  \n    final long factor = 10;  \n    return factor * expectedBits < size();\n  }\n\n","sourceOld":"  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or dense, and should be saved as a bit set. */\n  private boolean isSparse() {\n    // note: order of comparisons below set to favor smaller values (no binary range search.)\n    // note: adding 4 because we start with ((int) -1) to indicate d-gaps format.\n    // note: we write the d-gap for the byte number, and the byte (bits[i]) itself, therefore\n    //       multiplying count by (8+8) or (8+16) or (8+24) etc.:\n    //       - first 8 for writing bits[i] (1 byte vs. 1 bit), and \n    //       - second part for writing the byte-number d-gap as vint. \n    // note: factor is for read/write of byte-arrays being faster than vints.  \n    int factor = 10;  \n    if (bits.length < (1<< 7)) return factor * (4 + (8+ 8)*count()) < size();\n    if (bits.length < (1<<14)) return factor * (4 + (8+16)*count()) < size();\n    if (bits.length < (1<<21)) return factor * (4 + (8+24)*count()) < size();\n    if (bits.length < (1<<28)) return factor * (4 + (8+32)*count()) < size();\n    return                            factor * (4 + (8+40)*count()) < size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BitVector#isSparse().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#isSparse().mjava","sourceNew":"  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or dense, and should be saved as a bit set. */\n  private boolean isSparse() {\n\n    final int clearedCount = size() - count();\n    if (clearedCount == 0) {\n      return true;\n    }\n\n    final int avgGapLength = bits.length / clearedCount;\n\n    // expected number of bytes for vInt encoding of each gap\n    final int expectedDGapBytes;\n    if (avgGapLength <= (1<< 7)) {\n      expectedDGapBytes = 1;\n    } else if (avgGapLength <= (1<<14)) {\n      expectedDGapBytes = 2;\n    } else if (avgGapLength <= (1<<21)) {\n      expectedDGapBytes = 3;\n    } else if (avgGapLength <= (1<<28)) {\n      expectedDGapBytes = 4;\n    } else {\n      expectedDGapBytes = 5;\n    }\n\n    // +1 because we write the byte itself that contains the\n    // set bit\n    final int bytesPerSetBit = expectedDGapBytes + 1;\n    \n    // note: adding 32 because we start with ((int) -1) to indicate d-gaps format.\n    final long expectedBits = 32 + 8 * bytesPerSetBit * count();\n\n    // note: factor is for read/write of byte-arrays being faster than vints.  \n    final long factor = 10;  \n    return factor * expectedBits < size();\n  }\n\n","sourceOld":"  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or dense, and should be saved as a bit set. */\n  private boolean isSparse() {\n\n    final int setCount = count();\n    if (setCount == 0) {\n      return true;\n    }\n\n    final int avgGapLength = bits.length / setCount;\n\n    // expected number of bytes for vInt encoding of each gap\n    final int expectedDGapBytes;\n    if (avgGapLength <= (1<< 7)) {\n      expectedDGapBytes = 1;\n    } else if (avgGapLength <= (1<<14)) {\n      expectedDGapBytes = 2;\n    } else if (avgGapLength <= (1<<21)) {\n      expectedDGapBytes = 3;\n    } else if (avgGapLength <= (1<<28)) {\n      expectedDGapBytes = 4;\n    } else {\n      expectedDGapBytes = 5;\n    }\n\n    // +1 because we write the byte itself that contains the\n    // set bit\n    final int bytesPerSetBit = expectedDGapBytes + 1;\n    \n    // note: adding 32 because we start with ((int) -1) to indicate d-gaps format.\n    final long expectedBits = 32 + 8 * bytesPerSetBit * count();\n\n    // note: factor is for read/write of byte-arrays being faster than vints.  \n    final long factor = 10;  \n    return factor * expectedBits < size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/BitVector#isSparse().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#isSparse().mjava","sourceNew":"  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or dense, and should be saved as a bit set. */\n  private boolean isSparse() {\n\n    final int clearedCount = size() - count();\n    if (clearedCount == 0) {\n      return true;\n    }\n\n    final int avgGapLength = bits.length / clearedCount;\n\n    // expected number of bytes for vInt encoding of each gap\n    final int expectedDGapBytes;\n    if (avgGapLength <= (1<< 7)) {\n      expectedDGapBytes = 1;\n    } else if (avgGapLength <= (1<<14)) {\n      expectedDGapBytes = 2;\n    } else if (avgGapLength <= (1<<21)) {\n      expectedDGapBytes = 3;\n    } else if (avgGapLength <= (1<<28)) {\n      expectedDGapBytes = 4;\n    } else {\n      expectedDGapBytes = 5;\n    }\n\n    // +1 because we write the byte itself that contains the\n    // set bit\n    final int bytesPerSetBit = expectedDGapBytes + 1;\n    \n    // note: adding 32 because we start with ((int) -1) to indicate d-gaps format.\n    final long expectedBits = 32 + 8 * bytesPerSetBit * count();\n\n    // note: factor is for read/write of byte-arrays being faster than vints.  \n    final long factor = 10;  \n    return factor * expectedBits < size();\n  }\n\n","sourceOld":"  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or dense, and should be saved as a bit set. */\n  private boolean isSparse() {\n\n    final int setCount = count();\n    if (setCount == 0) {\n      return true;\n    }\n\n    final int avgGapLength = bits.length / setCount;\n\n    // expected number of bytes for vInt encoding of each gap\n    final int expectedDGapBytes;\n    if (avgGapLength <= (1<< 7)) {\n      expectedDGapBytes = 1;\n    } else if (avgGapLength <= (1<<14)) {\n      expectedDGapBytes = 2;\n    } else if (avgGapLength <= (1<<21)) {\n      expectedDGapBytes = 3;\n    } else if (avgGapLength <= (1<<28)) {\n      expectedDGapBytes = 4;\n    } else {\n      expectedDGapBytes = 5;\n    }\n\n    // +1 because we write the byte itself that contains the\n    // set bit\n    final int bytesPerSetBit = expectedDGapBytes + 1;\n    \n    // note: adding 32 because we start with ((int) -1) to indicate d-gaps format.\n    final long expectedBits = 32 + 8 * bytesPerSetBit * count();\n\n    // note: factor is for read/write of byte-arrays being faster than vints.  \n    final long factor = 10;  \n    return factor * expectedBits < size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/BitVector#isSparse().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#isSparse().mjava","sourceNew":"  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or dense, and should be saved as a bit set. */\n  private boolean isSparse() {\n\n    final int clearedCount = size() - count();\n    if (clearedCount == 0) {\n      return true;\n    }\n\n    final int avgGapLength = bits.length / clearedCount;\n\n    // expected number of bytes for vInt encoding of each gap\n    final int expectedDGapBytes;\n    if (avgGapLength <= (1<< 7)) {\n      expectedDGapBytes = 1;\n    } else if (avgGapLength <= (1<<14)) {\n      expectedDGapBytes = 2;\n    } else if (avgGapLength <= (1<<21)) {\n      expectedDGapBytes = 3;\n    } else if (avgGapLength <= (1<<28)) {\n      expectedDGapBytes = 4;\n    } else {\n      expectedDGapBytes = 5;\n    }\n\n    // +1 because we write the byte itself that contains the\n    // set bit\n    final int bytesPerSetBit = expectedDGapBytes + 1;\n    \n    // note: adding 32 because we start with ((int) -1) to indicate d-gaps format.\n    final long expectedBits = 32 + 8 * bytesPerSetBit * count();\n\n    // note: factor is for read/write of byte-arrays being faster than vints.  \n    final long factor = 10;  \n    return factor * expectedBits < size();\n  }\n\n","sourceOld":"  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or dense, and should be saved as a bit set. */\n  private boolean isSparse() {\n    // note: order of comparisons below set to favor smaller values (no binary range search.)\n    // note: adding 4 because we start with ((int) -1) to indicate d-gaps format.\n    // note: we write the d-gap for the byte number, and the byte (bits[i]) itself, therefore\n    //       multiplying count by (8+8) or (8+16) or (8+24) etc.:\n    //       - first 8 for writing bits[i] (1 byte vs. 1 bit), and \n    //       - second part for writing the byte-number d-gap as vint. \n    // note: factor is for read/write of byte-arrays being faster than vints.  \n    int factor = 10;  \n    if (bits.length < (1<< 7)) return factor * (4 + (8+ 8)*count()) < size();\n    if (bits.length < (1<<14)) return factor * (4 + (8+16)*count()) < size();\n    if (bits.length < (1<<21)) return factor * (4 + (8+24)*count()) < size();\n    if (bits.length < (1<<28)) return factor * (4 + (8+32)*count()) < size();\n    return                            factor * (4 + (8+40)*count()) < size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0f277693790b6ff2e44509d1b5a1ca5a18f16de","date":1310325911,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BitVector#isSparse().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#isSparse().mjava","sourceNew":"  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or dense, and should be saved as a bit set. */\n  private boolean isSparse() {\n\n    final int clearedCount = size() - count();\n    if (clearedCount == 0) {\n      return true;\n    }\n\n    final int avgGapLength = bits.length / clearedCount;\n\n    // expected number of bytes for vInt encoding of each gap\n    final int expectedDGapBytes;\n    if (avgGapLength <= (1<< 7)) {\n      expectedDGapBytes = 1;\n    } else if (avgGapLength <= (1<<14)) {\n      expectedDGapBytes = 2;\n    } else if (avgGapLength <= (1<<21)) {\n      expectedDGapBytes = 3;\n    } else if (avgGapLength <= (1<<28)) {\n      expectedDGapBytes = 4;\n    } else {\n      expectedDGapBytes = 5;\n    }\n\n    // +1 because we write the byte itself that contains the\n    // set bit\n    final int bytesPerSetBit = expectedDGapBytes + 1;\n    \n    // note: adding 32 because we start with ((int) -1) to indicate d-gaps format.\n    final long expectedBits = 32 + 8 * bytesPerSetBit * clearedCount;\n\n    // note: factor is for read/write of byte-arrays being faster than vints.  \n    final long factor = 10;  \n    return factor * expectedBits < size();\n  }\n\n","sourceOld":"  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or dense, and should be saved as a bit set. */\n  private boolean isSparse() {\n\n    final int clearedCount = size() - count();\n    if (clearedCount == 0) {\n      return true;\n    }\n\n    final int avgGapLength = bits.length / clearedCount;\n\n    // expected number of bytes for vInt encoding of each gap\n    final int expectedDGapBytes;\n    if (avgGapLength <= (1<< 7)) {\n      expectedDGapBytes = 1;\n    } else if (avgGapLength <= (1<<14)) {\n      expectedDGapBytes = 2;\n    } else if (avgGapLength <= (1<<21)) {\n      expectedDGapBytes = 3;\n    } else if (avgGapLength <= (1<<28)) {\n      expectedDGapBytes = 4;\n    } else {\n      expectedDGapBytes = 5;\n    }\n\n    // +1 because we write the byte itself that contains the\n    // set bit\n    final int bytesPerSetBit = expectedDGapBytes + 1;\n    \n    // note: adding 32 because we start with ((int) -1) to indicate d-gaps format.\n    final long expectedBits = 32 + 8 * bytesPerSetBit * count();\n\n    // note: factor is for read/write of byte-arrays being faster than vints.  \n    final long factor = 10;  \n    return factor * expectedBits < size();\n  }\n\n","bugFix":["ffa56322f560268d9e8c21373d8a84a9bbbbb7e2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3a73b15d807e41306466aec106b4cb85b8d5335","date":1326993385,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/BitVector#isSparse().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#isSparse().mjava","sourceNew":"  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or dense, and should be saved as a bit set. */\n  private boolean isSparse() {\n\n    final int clearedCount = size() - count();\n    if (clearedCount == 0) {\n      return true;\n    }\n\n    final int avgGapLength = bits.length / clearedCount;\n\n    // expected number of bytes for vInt encoding of each gap\n    final int expectedDGapBytes;\n    if (avgGapLength <= (1<< 7)) {\n      expectedDGapBytes = 1;\n    } else if (avgGapLength <= (1<<14)) {\n      expectedDGapBytes = 2;\n    } else if (avgGapLength <= (1<<21)) {\n      expectedDGapBytes = 3;\n    } else if (avgGapLength <= (1<<28)) {\n      expectedDGapBytes = 4;\n    } else {\n      expectedDGapBytes = 5;\n    }\n\n    // +1 because we write the byte itself that contains the\n    // set bit\n    final int bytesPerSetBit = expectedDGapBytes + 1;\n    \n    // note: adding 32 because we start with ((int) -1) to indicate d-gaps format.\n    final long expectedBits = 32 + 8 * bytesPerSetBit * clearedCount;\n\n    // note: factor is for read/write of byte-arrays being faster than vints.  \n    final long factor = 10;  \n    return factor * expectedBits < size();\n  }\n\n","sourceOld":"  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or dense, and should be saved as a bit set. */\n  private boolean isSparse() {\n\n    final int clearedCount = size() - count();\n    if (clearedCount == 0) {\n      return true;\n    }\n\n    final int avgGapLength = bits.length / clearedCount;\n\n    // expected number of bytes for vInt encoding of each gap\n    final int expectedDGapBytes;\n    if (avgGapLength <= (1<< 7)) {\n      expectedDGapBytes = 1;\n    } else if (avgGapLength <= (1<<14)) {\n      expectedDGapBytes = 2;\n    } else if (avgGapLength <= (1<<21)) {\n      expectedDGapBytes = 3;\n    } else if (avgGapLength <= (1<<28)) {\n      expectedDGapBytes = 4;\n    } else {\n      expectedDGapBytes = 5;\n    }\n\n    // +1 because we write the byte itself that contains the\n    // set bit\n    final int bytesPerSetBit = expectedDGapBytes + 1;\n    \n    // note: adding 32 because we start with ((int) -1) to indicate d-gaps format.\n    final long expectedBits = 32 + 8 * bytesPerSetBit * clearedCount;\n\n    // note: factor is for read/write of byte-arrays being faster than vints.  \n    final long factor = 10;  \n    return factor * expectedBits < size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","date":1327836826,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/BitVector#isSparse().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#isSparse().mjava","sourceNew":"  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or dense, and should be saved as a bit set. */\n  private boolean isSparse() {\n\n    final int clearedCount = size() - count();\n    if (clearedCount == 0) {\n      return true;\n    }\n\n    final int avgGapLength = bits.length / clearedCount;\n\n    // expected number of bytes for vInt encoding of each gap\n    final int expectedDGapBytes;\n    if (avgGapLength <= (1<< 7)) {\n      expectedDGapBytes = 1;\n    } else if (avgGapLength <= (1<<14)) {\n      expectedDGapBytes = 2;\n    } else if (avgGapLength <= (1<<21)) {\n      expectedDGapBytes = 3;\n    } else if (avgGapLength <= (1<<28)) {\n      expectedDGapBytes = 4;\n    } else {\n      expectedDGapBytes = 5;\n    }\n\n    // +1 because we write the byte itself that contains the\n    // set bit\n    final int bytesPerSetBit = expectedDGapBytes + 1;\n    \n    // note: adding 32 because we start with ((int) -1) to indicate d-gaps format.\n    final long expectedBits = 32 + 8 * bytesPerSetBit * clearedCount;\n\n    // note: factor is for read/write of byte-arrays being faster than vints.  \n    final long factor = 10;  \n    return factor * expectedBits < size();\n  }\n\n","sourceOld":"  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or dense, and should be saved as a bit set. */\n  private boolean isSparse() {\n\n    final int clearedCount = size() - count();\n    if (clearedCount == 0) {\n      return true;\n    }\n\n    final int avgGapLength = bits.length / clearedCount;\n\n    // expected number of bytes for vInt encoding of each gap\n    final int expectedDGapBytes;\n    if (avgGapLength <= (1<< 7)) {\n      expectedDGapBytes = 1;\n    } else if (avgGapLength <= (1<<14)) {\n      expectedDGapBytes = 2;\n    } else if (avgGapLength <= (1<<21)) {\n      expectedDGapBytes = 3;\n    } else if (avgGapLength <= (1<<28)) {\n      expectedDGapBytes = 4;\n    } else {\n      expectedDGapBytes = 5;\n    }\n\n    // +1 because we write the byte itself that contains the\n    // set bit\n    final int bytesPerSetBit = expectedDGapBytes + 1;\n    \n    // note: adding 32 because we start with ((int) -1) to indicate d-gaps format.\n    final long expectedBits = 32 + 8 * bytesPerSetBit * clearedCount;\n\n    // note: factor is for read/write of byte-arrays being faster than vints.  \n    final long factor = 10;  \n    return factor * expectedBits < size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/BitVector#isSparse().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#isSparse().mjava","sourceNew":"  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or dense, and should be saved as a bit set. */\n  private boolean isSparse() {\n\n    final int clearedCount = size() - count();\n    if (clearedCount == 0) {\n      return true;\n    }\n\n    final int avgGapLength = bits.length / clearedCount;\n\n    // expected number of bytes for vInt encoding of each gap\n    final int expectedDGapBytes;\n    if (avgGapLength <= (1<< 7)) {\n      expectedDGapBytes = 1;\n    } else if (avgGapLength <= (1<<14)) {\n      expectedDGapBytes = 2;\n    } else if (avgGapLength <= (1<<21)) {\n      expectedDGapBytes = 3;\n    } else if (avgGapLength <= (1<<28)) {\n      expectedDGapBytes = 4;\n    } else {\n      expectedDGapBytes = 5;\n    }\n\n    // +1 because we write the byte itself that contains the\n    // set bit\n    final int bytesPerSetBit = expectedDGapBytes + 1;\n    \n    // note: adding 32 because we start with ((int) -1) to indicate d-gaps format.\n    final long expectedBits = 32 + 8 * bytesPerSetBit * clearedCount;\n\n    // note: factor is for read/write of byte-arrays being faster than vints.  \n    final long factor = 10;  \n    return factor * expectedBits < size();\n  }\n\n","sourceOld":"  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or dense, and should be saved as a bit set. */\n  private boolean isSparse() {\n\n    final int clearedCount = size() - count();\n    if (clearedCount == 0) {\n      return true;\n    }\n\n    final int avgGapLength = bits.length / clearedCount;\n\n    // expected number of bytes for vInt encoding of each gap\n    final int expectedDGapBytes;\n    if (avgGapLength <= (1<< 7)) {\n      expectedDGapBytes = 1;\n    } else if (avgGapLength <= (1<<14)) {\n      expectedDGapBytes = 2;\n    } else if (avgGapLength <= (1<<21)) {\n      expectedDGapBytes = 3;\n    } else if (avgGapLength <= (1<<28)) {\n      expectedDGapBytes = 4;\n    } else {\n      expectedDGapBytes = 5;\n    }\n\n    // +1 because we write the byte itself that contains the\n    // set bit\n    final int bytesPerSetBit = expectedDGapBytes + 1;\n    \n    // note: adding 32 because we start with ((int) -1) to indicate d-gaps format.\n    final long expectedBits = 32 + 8 * bytesPerSetBit * clearedCount;\n\n    // note: factor is for read/write of byte-arrays being faster than vints.  \n    final long factor = 10;  \n    return factor * expectedBits < size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f0f277693790b6ff2e44509d1b5a1ca5a18f16de":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"e3a73b15d807e41306466aec106b4cb85b8d5335":["f0f277693790b6ff2e44509d1b5a1ca5a18f16de"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["ffa56322f560268d9e8c21373d8a84a9bbbbb7e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":["f0f277693790b6ff2e44509d1b5a1ca5a18f16de","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["f0f277693790b6ff2e44509d1b5a1ca5a18f16de","e3a73b15d807e41306466aec106b4cb85b8d5335"],"2553b00f699380c64959ccb27991289aae87be2e":["9454a6510e2db155fb01faa5c049b06ece95fab9","ffa56322f560268d9e8c21373d8a84a9bbbbb7e2"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["9454a6510e2db155fb01faa5c049b06ece95fab9","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"ffa56322f560268d9e8c21373d8a84a9bbbbb7e2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["2553b00f699380c64959ccb27991289aae87be2e","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f0f277693790b6ff2e44509d1b5a1ca5a18f16de":["e3a73b15d807e41306466aec106b4cb85b8d5335","fd92b8bcc88e969302510acf77bd6970da3994c4","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"e3a73b15d807e41306466aec106b4cb85b8d5335":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["f0f277693790b6ff2e44509d1b5a1ca5a18f16de","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2553b00f699380c64959ccb27991289aae87be2e":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"ffa56322f560268d9e8c21373d8a84a9bbbbb7e2":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","2553b00f699380c64959ccb27991289aae87be2e"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","ffa56322f560268d9e8c21373d8a84a9bbbbb7e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd92b8bcc88e969302510acf77bd6970da3994c4","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}