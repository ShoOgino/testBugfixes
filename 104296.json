{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DatePartEvaluator#evaluate(Tuple).mjava","commits":[{"id":"40b789607c421011dabf36a935528a74fb8b2032","date":1492023606,"type":0,"author":"Gethin James","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DatePartEvaluator#evaluate(Tuple).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Number evaluate(Tuple tuple) throws IOException {\n\n    try {\n      Object fieldValue = tuple.get(fieldName);\n      Instant instant = null;\n      LocalDateTime date = null;\n\n      if (fieldValue == null) return null;\n\n      if (fieldValue instanceof String) {\n        instant = getInstant((String)fieldValue);\n      } else if (fieldValue instanceof Instant) {\n        instant = (Instant) fieldValue;\n      } else if (fieldValue instanceof Date) {\n        instant = ((Date) fieldValue).toInstant();\n      } else if (fieldValue instanceof LocalDateTime) {\n        date = ((LocalDateTime) fieldValue);\n      }\n\n      if (instant != null) {\n        if (function.equals(FUNCTION.epoch)) return instant.toEpochMilli();\n        date = LocalDateTime.ofInstant(instant, ZoneOffset.UTC);\n      }\n\n      if (date != null) {\n        return evaluate(date);\n      }\n\n    } catch (DateTimeParseException e) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid field %s - The field must be a string formatted in the ISO_INSTANT date format.\",fieldName));\n    }\n\n    throw new IOException(String.format(Locale.ROOT,\"Invalid field %s - The field must be a string formatted ISO_INSTANT or of type Instant,Date or LocalDateTime.\",fieldName));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b70b3ba150f93fa94768c7b0f2098a039ab59c5","date":1492023606,"type":3,"author":"Gethin James","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DatePartEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DatePartEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Number evaluate(Tuple tuple) throws IOException {\n\n    Instant instant = null;\n    LocalDateTime date = null;\n\n    //First evaluate the parameter\n    StreamEvaluator streamEvaluator = subEvaluators.get(0);\n    Object tupleValue = streamEvaluator.evaluate(tuple);\n\n    if (tupleValue == null) return null;\n\n    if (tupleValue instanceof String) {\n      instant = getInstant((String) tupleValue);\n    } else if (tupleValue instanceof Instant) {\n      instant = (Instant) tupleValue;\n    } else if (tupleValue instanceof Date) {\n      instant = ((Date) tupleValue).toInstant();\n    } else if (tupleValue instanceof LocalDateTime) {\n      date = ((LocalDateTime) tupleValue);\n    }\n\n    if (instant != null) {\n      if (function.equals(FUNCTION.epoch)) return instant.toEpochMilli();\n      date = LocalDateTime.ofInstant(instant, ZoneOffset.UTC);\n    }\n\n    if (date != null) {\n      return evaluate(date);\n    }\n\n    throw new IOException(String.format(Locale.ROOT, \"Invalid parameter %s - The parameter must be a string formatted ISO_INSTANT or of type Instant,Date or LocalDateTime.\", String.valueOf(tupleValue)));\n  }\n\n","sourceOld":"  @Override\n  public Number evaluate(Tuple tuple) throws IOException {\n\n    try {\n      Object fieldValue = tuple.get(fieldName);\n      Instant instant = null;\n      LocalDateTime date = null;\n\n      if (fieldValue == null) return null;\n\n      if (fieldValue instanceof String) {\n        instant = getInstant((String)fieldValue);\n      } else if (fieldValue instanceof Instant) {\n        instant = (Instant) fieldValue;\n      } else if (fieldValue instanceof Date) {\n        instant = ((Date) fieldValue).toInstant();\n      } else if (fieldValue instanceof LocalDateTime) {\n        date = ((LocalDateTime) fieldValue);\n      }\n\n      if (instant != null) {\n        if (function.equals(FUNCTION.epoch)) return instant.toEpochMilli();\n        date = LocalDateTime.ofInstant(instant, ZoneOffset.UTC);\n      }\n\n      if (date != null) {\n        return evaluate(date);\n      }\n\n    } catch (DateTimeParseException e) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid field %s - The field must be a string formatted in the ISO_INSTANT date format.\",fieldName));\n    }\n\n    throw new IOException(String.format(Locale.ROOT,\"Invalid field %s - The field must be a string formatted ISO_INSTANT or of type Instant,Date or LocalDateTime.\",fieldName));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33835f41305f4d46c2a650da7c564ac99f485ab1","date":1492023606,"type":3,"author":"Gethin James","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DatePartEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DatePartEvaluator#evaluate(Tuple).mjava","sourceNew":"  @Override\n  public Number evaluate(Tuple tuple) throws IOException {\n\n    Instant instant = null;\n    TemporalAccessor date = null;\n\n    //First evaluate the parameter\n    StreamEvaluator streamEvaluator = subEvaluators.get(0);\n    Object tupleValue = streamEvaluator.evaluate(tuple);\n\n    if (tupleValue == null) return null;\n\n    if (tupleValue instanceof String) {\n      instant = getInstant((String) tupleValue);\n    } else if (tupleValue instanceof Instant) {\n      instant = (Instant) tupleValue;\n    } else if (tupleValue instanceof Date) {\n      instant = ((Date) tupleValue).toInstant();\n    } else if (tupleValue instanceof TemporalAccessor) {\n      date = ((TemporalAccessor) tupleValue);\n    }\n\n    if (instant != null) {\n      if (function.equals(FUNCTION.epoch)) return instant.toEpochMilli();\n      date = LocalDateTime.ofInstant(instant, ZoneOffset.UTC);\n    }\n\n    if (date != null) {\n      return evaluate(date);\n    }\n\n    throw new IOException(String.format(Locale.ROOT, \"Invalid parameter %s - The parameter must be a string formatted ISO_INSTANT or of type Instant,Date or LocalDateTime.\", String.valueOf(tupleValue)));\n  }\n\n","sourceOld":"  @Override\n  public Number evaluate(Tuple tuple) throws IOException {\n\n    Instant instant = null;\n    LocalDateTime date = null;\n\n    //First evaluate the parameter\n    StreamEvaluator streamEvaluator = subEvaluators.get(0);\n    Object tupleValue = streamEvaluator.evaluate(tuple);\n\n    if (tupleValue == null) return null;\n\n    if (tupleValue instanceof String) {\n      instant = getInstant((String) tupleValue);\n    } else if (tupleValue instanceof Instant) {\n      instant = (Instant) tupleValue;\n    } else if (tupleValue instanceof Date) {\n      instant = ((Date) tupleValue).toInstant();\n    } else if (tupleValue instanceof LocalDateTime) {\n      date = ((LocalDateTime) tupleValue);\n    }\n\n    if (instant != null) {\n      if (function.equals(FUNCTION.epoch)) return instant.toEpochMilli();\n      date = LocalDateTime.ofInstant(instant, ZoneOffset.UTC);\n    }\n\n    if (date != null) {\n      return evaluate(date);\n    }\n\n    throw new IOException(String.format(Locale.ROOT, \"Invalid parameter %s - The parameter must be a string formatted ISO_INSTANT or of type Instant,Date or LocalDateTime.\", String.valueOf(tupleValue)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26c62f13499437ce6143905f35f30ab19f3adf6","date":1492023891,"type":4,"author":"Gethin James","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DatePartEvaluator#evaluate(Tuple).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Number evaluate(Tuple tuple) throws IOException {\n\n    Instant instant = null;\n    TemporalAccessor date = null;\n\n    //First evaluate the parameter\n    StreamEvaluator streamEvaluator = subEvaluators.get(0);\n    Object tupleValue = streamEvaluator.evaluate(tuple);\n\n    if (tupleValue == null) return null;\n\n    if (tupleValue instanceof String) {\n      instant = getInstant((String) tupleValue);\n    } else if (tupleValue instanceof Instant) {\n      instant = (Instant) tupleValue;\n    } else if (tupleValue instanceof Date) {\n      instant = ((Date) tupleValue).toInstant();\n    } else if (tupleValue instanceof TemporalAccessor) {\n      date = ((TemporalAccessor) tupleValue);\n    }\n\n    if (instant != null) {\n      if (function.equals(FUNCTION.epoch)) return instant.toEpochMilli();\n      date = LocalDateTime.ofInstant(instant, ZoneOffset.UTC);\n    }\n\n    if (date != null) {\n      return evaluate(date);\n    }\n\n    throw new IOException(String.format(Locale.ROOT, \"Invalid parameter %s - The parameter must be a string formatted ISO_INSTANT or of type Instant,Date or LocalDateTime.\", String.valueOf(tupleValue)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"33835f41305f4d46c2a650da7c564ac99f485ab1":["1b70b3ba150f93fa94768c7b0f2098a039ab59c5"],"1b70b3ba150f93fa94768c7b0f2098a039ab59c5":["40b789607c421011dabf36a935528a74fb8b2032"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c26c62f13499437ce6143905f35f30ab19f3adf6":["33835f41305f4d46c2a650da7c564ac99f485ab1"],"40b789607c421011dabf36a935528a74fb8b2032":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26c62f13499437ce6143905f35f30ab19f3adf6"]},"commit2Childs":{"33835f41305f4d46c2a650da7c564ac99f485ab1":["c26c62f13499437ce6143905f35f30ab19f3adf6"],"1b70b3ba150f93fa94768c7b0f2098a039ab59c5":["33835f41305f4d46c2a650da7c564ac99f485ab1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["40b789607c421011dabf36a935528a74fb8b2032"],"c26c62f13499437ce6143905f35f30ab19f3adf6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"40b789607c421011dabf36a935528a74fb8b2032":["1b70b3ba150f93fa94768c7b0f2098a039ab59c5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}