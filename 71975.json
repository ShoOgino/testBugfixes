{"path":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/server/registry/configuration/TestPropertyInjector#testInjectProperties().mjava","commits":[{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/server/registry/configuration/TestPropertyInjector#testInjectProperties().mjava","pathOld":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/server/registry/configuration/TestPropertyInjector#testInjectProperties().mjava","sourceNew":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.server.registry.configuration.PropertyInjector.injectProperties(ConfigurationBean)'\n     */\n    public void testInjectProperties() throws Exception {\n        ComponentConfiguration bean = new ComponentConfiguration();\n        bean.set(\"someValue\",\"bla\");\n        try{\n            this.injector.injectProperties(bean);\n            fail(\"target is not set\");\n            }catch (IllegalStateException e) {\n          \n            }\n        TestBean testBean = new TestBean();\n        this.injector.setTargetObject(testBean);\n        try{\n            this.injector.injectProperties(null);\n            fail(\"object is null\");\n            }catch (IllegalArgumentException e) {\n          \n            }\n        try{\n        this.injector.injectProperties(bean);\n        fail(\"requiered Property is not available in config bean\");\n        }catch (InjectionException e) {\n          \n        }\n        \n        bean.set(\"test\",\"fooBar\");\n        bean.set(\"testClass\",\"java.lang.Object\");\n        this.injector.injectProperties(bean);\n        \n        assertEquals(\"fooBar\",testBean.getTest());\n        assertEquals(Object.class,testBean.getTestClass());\n        \n        \n        \n        this.injector = new PropertyInjector();\n        SubTestBean subTestBean = new SubTestBean();\n        this.injector.setTargetObject(subTestBean);\n        bean.set(\"number\",\"333\");\n        this.injector.injectProperties(bean);\n        \n        assertEquals(\"fooBar\",subTestBean.getTest());\n        assertEquals(Object.class,subTestBean.getTestClass());\n        assertEquals(333,subTestBean.getNumber());\n        \n        bean = new ComponentConfiguration();\n        bean.set(\"test\",\"fooBar\");\n        bean.set(\"number\",\"333\");\n        bean.set(\"wrapper\",\"1.2\");\n       \n        subTestBean = new SubTestBean();\n        this.injector.setTargetObject(subTestBean);\n        this.injector.injectProperties(bean);\n        \n        assertEquals(\"fooBar\",subTestBean.getTest());\n        assertEquals(333,subTestBean.getNumber());\n        assertEquals(new Float(1.2),subTestBean.getWrapper());\n    \n\n    }\n\n","sourceOld":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.server.registry.configuration.PropertyInjector.injectProperties(ConfigurationBean)'\n     */\n    public void testInjectProperties() throws Exception {\n        ComponentConfiguration bean = new ComponentConfiguration();\n        bean.set(\"someValue\",\"bla\");\n        try{\n            this.injector.injectProperties(bean);\n            fail(\"target is not set\");\n            }catch (IllegalStateException e) {\n          \n            }\n        TestBean testBean = new TestBean();\n        this.injector.setTargetObject(testBean);\n        try{\n            this.injector.injectProperties(null);\n            fail(\"object is null\");\n            }catch (IllegalArgumentException e) {\n          \n            }\n        try{\n        this.injector.injectProperties(bean);\n        fail(\"requiered Property is not available in config bean\");\n        }catch (InjectionException e) {\n          \n        }\n        \n        bean.set(\"test\",\"fooBar\");\n        bean.set(\"testClass\",\"java.lang.Object\");\n        this.injector.injectProperties(bean);\n        \n        assertEquals(\"fooBar\",testBean.getTest());\n        assertEquals(Object.class,testBean.getTestClass());\n        \n        \n        \n        this.injector = new PropertyInjector();\n        SubTestBean subTestBean = new SubTestBean();\n        this.injector.setTargetObject(subTestBean);\n        bean.set(\"number\",\"333\");\n        this.injector.injectProperties(bean);\n        \n        assertEquals(\"fooBar\",subTestBean.getTest());\n        assertEquals(Object.class,subTestBean.getTestClass());\n        assertEquals(333,subTestBean.getNumber());\n        \n        bean = new ComponentConfiguration();\n        bean.set(\"test\",\"fooBar\");\n        bean.set(\"number\",\"333\");\n        bean.set(\"wrapper\",\"1.2\");\n       \n        subTestBean = new SubTestBean();\n        this.injector.setTargetObject(subTestBean);\n        this.injector.injectProperties(bean);\n        \n        assertEquals(\"fooBar\",subTestBean.getTest());\n        assertEquals(333,subTestBean.getNumber());\n        assertEquals(new Float(1.2),subTestBean.getWrapper());\n    \n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe","date":1195519587,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/server/registry/configuration/TestPropertyInjector#testInjectProperties().mjava","sourceNew":null,"sourceOld":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.server.registry.configuration.PropertyInjector.injectProperties(ConfigurationBean)'\n     */\n    public void testInjectProperties() throws Exception {\n        ComponentConfiguration bean = new ComponentConfiguration();\n        bean.set(\"someValue\",\"bla\");\n        try{\n            this.injector.injectProperties(bean);\n            fail(\"target is not set\");\n            }catch (IllegalStateException e) {\n          \n            }\n        TestBean testBean = new TestBean();\n        this.injector.setTargetObject(testBean);\n        try{\n            this.injector.injectProperties(null);\n            fail(\"object is null\");\n            }catch (IllegalArgumentException e) {\n          \n            }\n        try{\n        this.injector.injectProperties(bean);\n        fail(\"requiered Property is not available in config bean\");\n        }catch (InjectionException e) {\n          \n        }\n        \n        bean.set(\"test\",\"fooBar\");\n        bean.set(\"testClass\",\"java.lang.Object\");\n        this.injector.injectProperties(bean);\n        \n        assertEquals(\"fooBar\",testBean.getTest());\n        assertEquals(Object.class,testBean.getTestClass());\n        \n        \n        \n        this.injector = new PropertyInjector();\n        SubTestBean subTestBean = new SubTestBean();\n        this.injector.setTargetObject(subTestBean);\n        bean.set(\"number\",\"333\");\n        this.injector.injectProperties(bean);\n        \n        assertEquals(\"fooBar\",subTestBean.getTest());\n        assertEquals(Object.class,subTestBean.getTestClass());\n        assertEquals(333,subTestBean.getNumber());\n        \n        bean = new ComponentConfiguration();\n        bean.set(\"test\",\"fooBar\");\n        bean.set(\"number\",\"333\");\n        bean.set(\"wrapper\",\"1.2\");\n       \n        subTestBean = new SubTestBean();\n        this.injector.setTargetObject(subTestBean);\n        this.injector.injectProperties(bean);\n        \n        assertEquals(\"fooBar\",subTestBean.getTest());\n        assertEquals(333,subTestBean.getNumber());\n        assertEquals(new Float(1.2),subTestBean.getWrapper());\n    \n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}