{"path":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testSchemaBasics().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testSchemaBasics().mjava","pathOld":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testSchemaBasics().mjava","sourceNew":"  @Test\n  public void testSchemaBasics() throws Exception {\n    IndexSchema schema = h.getCore().getSchema();\n\n\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n\n    SchemaField[] dynFields = schema.getDynamicFieldPrototypes();\n    boolean seen = false;\n    for (SchemaField dynField : dynFields) {\n      if (dynField.getName().equals(\"*\" + FieldType.POLY_FIELD_SEPARATOR + \"double\")) {\n        seen = true;\n      }\n    }\n    assertTrue(\"Didn't find the expected dynamic field\", seen);\n    FieldType homeFT = schema.getFieldType(\"home\");\n    assertEquals(home.getType(), homeFT);\n    FieldType xy = schema.getFieldTypeByName(\"xy\");\n    assertNotNull(xy);\n    assertTrue(xy instanceof PointType);\n    assertTrue(xy.isPolyField());\n    home = schema.getFieldOrNull(\"home_0\" + FieldType.POLY_FIELD_SEPARATOR + \"double\");\n    assertNotNull(home);\n    home = schema.getField(\"home\");\n    assertNotNull(home);\n\n    home = schema.getField(\"homed\");//sub field suffix\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n  }\n\n","sourceOld":"  @Test\n  public void testSchemaBasics() throws Exception {\n    IndexSchema schema = h.getCore().getSchema();\n\n\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n\n    SchemaField[] dynFields = schema.getDynamicFieldPrototypes();\n    boolean seen = false;\n    for (SchemaField dynField : dynFields) {\n      if (dynField.getName().equals(\"*\" + FieldType.POLY_FIELD_SEPARATOR + \"double\")) {\n        seen = true;\n      }\n    }\n    assertTrue(\"Didn't find the expected dynamic field\", seen);\n    FieldType homeFT = schema.getFieldType(\"home\");\n    assertEquals(home.getType(), homeFT);\n    FieldType xy = schema.getFieldTypeByName(\"xy\");\n    assertNotNull(xy);\n    assertTrue(xy instanceof PointType);\n    assertTrue(xy.isPolyField());\n    home = schema.getFieldOrNull(\"home_0\" + FieldType.POLY_FIELD_SEPARATOR + \"double\");\n    assertNotNull(home);\n    home = schema.getField(\"home\");\n    assertNotNull(home);\n\n    home = schema.getField(\"homed\");//sub field suffix\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testSchemaBasics().mjava","pathOld":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testSchemaBasics().mjava","sourceNew":"  @Test\n  public void testSchemaBasics() throws Exception {\n    IndexSchema schema = h.getCore().getSchema();\n\n\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n\n    SchemaField[] dynFields = schema.getDynamicFieldPrototypes();\n    boolean seen = false;\n    for (SchemaField dynField : dynFields) {\n      if (dynField.getName().equals(\"*\" + FieldType.POLY_FIELD_SEPARATOR + \"double\")) {\n        seen = true;\n      }\n    }\n    assertTrue(\"Didn't find the expected dynamic field\", seen);\n    FieldType homeFT = schema.getFieldType(\"home\");\n    assertEquals(home.getType(), homeFT);\n    FieldType xy = schema.getFieldTypeByName(\"xy\");\n    assertNotNull(xy);\n    assertTrue(xy instanceof PointType);\n    assertTrue(xy.isPolyField());\n    home = schema.getFieldOrNull(\"home_0\" + FieldType.POLY_FIELD_SEPARATOR + \"double\");\n    assertNotNull(home);\n    home = schema.getField(\"home\");\n    assertNotNull(home);\n\n    home = schema.getField(\"homed\");//sub field suffix\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n  }\n\n","sourceOld":"  @Test\n  public void testSchemaBasics() throws Exception {\n    IndexSchema schema = h.getCore().getSchema();\n\n\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n\n    SchemaField[] dynFields = schema.getDynamicFieldPrototypes();\n    boolean seen = false;\n    for (SchemaField dynField : dynFields) {\n      if (dynField.getName().equals(\"*\" + FieldType.POLY_FIELD_SEPARATOR + \"double\")) {\n        seen = true;\n      }\n    }\n    assertTrue(\"Didn't find the expected dynamic field\", seen);\n    FieldType homeFT = schema.getFieldType(\"home\");\n    assertEquals(home.getType(), homeFT);\n    FieldType xy = schema.getFieldTypeByName(\"xy\");\n    assertNotNull(xy);\n    assertTrue(xy instanceof PointType);\n    assertTrue(xy.isPolyField());\n    home = schema.getFieldOrNull(\"home_0\" + FieldType.POLY_FIELD_SEPARATOR + \"double\");\n    assertNotNull(home);\n    home = schema.getField(\"home\");\n    assertNotNull(home);\n\n    home = schema.getField(\"homed\");//sub field suffix\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testSchemaBasics().mjava","pathOld":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testSchemaBasics().mjava","sourceNew":"  @Test\n  public void testSchemaBasics() throws Exception {\n    IndexSchema schema = h.getCore().getSchema();\n\n\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n\n    SchemaField[] dynFields = schema.getDynamicFieldPrototypes();\n    boolean seen = false;\n    for (SchemaField dynField : dynFields) {\n      if (dynField.getName().equals(\"*\" + FieldType.POLY_FIELD_SEPARATOR + \"double\")) {\n        seen = true;\n      }\n    }\n    assertTrue(\"Didn't find the expected dynamic field\", seen);\n    FieldType homeFT = schema.getFieldType(\"home\");\n    assertEquals(home.getType(), homeFT);\n    FieldType xy = schema.getFieldTypeByName(\"xy\");\n    assertNotNull(xy);\n    assertTrue(xy instanceof PointType);\n    assertTrue(xy.isPolyField());\n    home = schema.getFieldOrNull(\"home_0\" + FieldType.POLY_FIELD_SEPARATOR + \"double\");\n    assertNotNull(home);\n    home = schema.getField(\"home\");\n    assertNotNull(home);\n\n    home = schema.getField(\"homed\");//sub field suffix\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n  }\n\n","sourceOld":"  @Test\n  public void testSchemaBasics() throws Exception {\n    IndexSchema schema = h.getCore().getSchema();\n\n\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n\n    SchemaField[] dynFields = schema.getDynamicFieldPrototypes();\n    boolean seen = false;\n    for (SchemaField dynField : dynFields) {\n      if (dynField.getName().equals(\"*\" + FieldType.POLY_FIELD_SEPARATOR + \"double\")) {\n        seen = true;\n      }\n    }\n    assertTrue(\"Didn't find the expected dynamic field\", seen);\n    FieldType homeFT = schema.getFieldType(\"home\");\n    assertEquals(home.getType(), homeFT);\n    FieldType xy = schema.getFieldTypeByName(\"xy\");\n    assertNotNull(xy);\n    assertTrue(xy instanceof PointType);\n    assertTrue(xy.isPolyField());\n    home = schema.getFieldOrNull(\"home_0\" + FieldType.POLY_FIELD_SEPARATOR + \"double\");\n    assertNotNull(home);\n    home = schema.getField(\"home\");\n    assertNotNull(home);\n\n    home = schema.getField(\"homed\");//sub field suffix\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testSchemaBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testSchemaBasics().mjava","sourceNew":"  @Test\n  public void testSchemaBasics() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n\n\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n\n    SchemaField[] dynFields = schema.getDynamicFieldPrototypes();\n    boolean seen = false;\n    for (SchemaField dynField : dynFields) {\n      if (dynField.getName().equals(\"*\" + FieldType.POLY_FIELD_SEPARATOR + \"double\")) {\n        seen = true;\n      }\n    }\n    assertTrue(\"Didn't find the expected dynamic field\", seen);\n    FieldType homeFT = schema.getFieldType(\"home\");\n    assertEquals(home.getType(), homeFT);\n    FieldType xy = schema.getFieldTypeByName(\"xy\");\n    assertNotNull(xy);\n    assertTrue(xy instanceof PointType);\n    assertTrue(xy.isPolyField());\n    home = schema.getFieldOrNull(\"home_0\" + FieldType.POLY_FIELD_SEPARATOR + \"double\");\n    assertNotNull(home);\n    home = schema.getField(\"home\");\n    assertNotNull(home);\n\n    home = schema.getField(\"homed\");//sub field suffix\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n  }\n\n","sourceOld":"  @Test\n  public void testSchemaBasics() throws Exception {\n    IndexSchema schema = h.getCore().getSchema();\n\n\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n\n    SchemaField[] dynFields = schema.getDynamicFieldPrototypes();\n    boolean seen = false;\n    for (SchemaField dynField : dynFields) {\n      if (dynField.getName().equals(\"*\" + FieldType.POLY_FIELD_SEPARATOR + \"double\")) {\n        seen = true;\n      }\n    }\n    assertTrue(\"Didn't find the expected dynamic field\", seen);\n    FieldType homeFT = schema.getFieldType(\"home\");\n    assertEquals(home.getType(), homeFT);\n    FieldType xy = schema.getFieldTypeByName(\"xy\");\n    assertNotNull(xy);\n    assertTrue(xy instanceof PointType);\n    assertTrue(xy.isPolyField());\n    home = schema.getFieldOrNull(\"home_0\" + FieldType.POLY_FIELD_SEPARATOR + \"double\");\n    assertNotNull(home);\n    home = schema.getField(\"home\");\n    assertNotNull(home);\n\n    home = schema.getField(\"homed\");//sub field suffix\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a7bf782535cdb8bcd80741225832314d5c2380c","date":1489776915,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testSchemaBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testSchemaBasics().mjava","sourceNew":"  @Test\n  public void testSchemaBasics() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n\n\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n    \n    String subFieldType = \"double\";\n    if (usingPointFields()) {\n      subFieldType = \"pdouble\";\n    }\n\n    SchemaField[] dynFields = schema.getDynamicFieldPrototypes();\n    boolean seen = false;\n    for (SchemaField dynField : dynFields) {\n      if (dynField.getName().equals(\"*\" + FieldType.POLY_FIELD_SEPARATOR + subFieldType)) {\n        seen = true;\n      }\n    }\n    assertTrue(\"Didn't find the expected dynamic field\", seen);\n    FieldType homeFT = schema.getFieldType(\"home\");\n    assertEquals(home.getType(), homeFT);\n    FieldType xy = schema.getFieldTypeByName(\"xy\");\n    assertNotNull(xy);\n    assertTrue(xy instanceof PointType);\n    assertTrue(xy.isPolyField());\n    home = schema.getFieldOrNull(\"home_0\" + FieldType.POLY_FIELD_SEPARATOR + subFieldType);\n    assertNotNull(home);\n    home = schema.getField(\"home\");\n    assertNotNull(home);\n\n    home = schema.getField(\"homed\");//sub field suffix\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n  }\n\n","sourceOld":"  @Test\n  public void testSchemaBasics() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n\n\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n\n    SchemaField[] dynFields = schema.getDynamicFieldPrototypes();\n    boolean seen = false;\n    for (SchemaField dynField : dynFields) {\n      if (dynField.getName().equals(\"*\" + FieldType.POLY_FIELD_SEPARATOR + \"double\")) {\n        seen = true;\n      }\n    }\n    assertTrue(\"Didn't find the expected dynamic field\", seen);\n    FieldType homeFT = schema.getFieldType(\"home\");\n    assertEquals(home.getType(), homeFT);\n    FieldType xy = schema.getFieldTypeByName(\"xy\");\n    assertNotNull(xy);\n    assertTrue(xy instanceof PointType);\n    assertTrue(xy.isPolyField());\n    home = schema.getFieldOrNull(\"home_0\" + FieldType.POLY_FIELD_SEPARATOR + \"double\");\n    assertNotNull(home);\n    home = schema.getField(\"home\");\n    assertNotNull(home);\n\n    home = schema.getField(\"homed\");//sub field suffix\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"378c6150f20ef79f184ab9cd89a056771fc918c7","date":1490280011,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testSchemaBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testSchemaBasics().mjava","sourceNew":"  @Test\n  public void testSchemaBasics() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n\n\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n    \n    String subFieldType = \"double\";\n    if (usingPointFields()) {\n      subFieldType = \"pdouble\";\n    }\n\n    SchemaField[] dynFields = schema.getDynamicFieldPrototypes();\n    boolean seen = false;\n    for (SchemaField dynField : dynFields) {\n      if (dynField.getName().equals(\"*\" + FieldType.POLY_FIELD_SEPARATOR + subFieldType)) {\n        seen = true;\n      }\n    }\n    assertTrue(\"Didn't find the expected dynamic field\", seen);\n    FieldType homeFT = schema.getFieldType(\"home\");\n    assertEquals(home.getType(), homeFT);\n    FieldType xy = schema.getFieldTypeByName(\"xy\");\n    assertNotNull(xy);\n    assertTrue(xy instanceof PointType);\n    assertTrue(xy.isPolyField());\n    home = schema.getFieldOrNull(\"home_0\" + FieldType.POLY_FIELD_SEPARATOR + subFieldType);\n    assertNotNull(home);\n    home = schema.getField(\"home\");\n    assertNotNull(home);\n\n    home = schema.getField(\"homed\");//sub field suffix\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n  }\n\n","sourceOld":"  @Test\n  public void testSchemaBasics() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n\n\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n\n    SchemaField[] dynFields = schema.getDynamicFieldPrototypes();\n    boolean seen = false;\n    for (SchemaField dynField : dynFields) {\n      if (dynField.getName().equals(\"*\" + FieldType.POLY_FIELD_SEPARATOR + \"double\")) {\n        seen = true;\n      }\n    }\n    assertTrue(\"Didn't find the expected dynamic field\", seen);\n    FieldType homeFT = schema.getFieldType(\"home\");\n    assertEquals(home.getType(), homeFT);\n    FieldType xy = schema.getFieldTypeByName(\"xy\");\n    assertNotNull(xy);\n    assertTrue(xy instanceof PointType);\n    assertTrue(xy.isPolyField());\n    home = schema.getFieldOrNull(\"home_0\" + FieldType.POLY_FIELD_SEPARATOR + \"double\");\n    assertNotNull(home);\n    home = schema.getField(\"home\");\n    assertNotNull(home);\n\n    home = schema.getField(\"homed\");//sub field suffix\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n  }\n\n","bugFix":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"351efe6fdecf9af62134d37ec2582e4a0331a4dc","date":1498149096,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testSchemaBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testSchemaBasics().mjava","sourceNew":"  @Test\n  public void testSchemaBasics() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n\n\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n    \n    String subFieldType = \"double\";\n    SchemaField[] dynFields = schema.getDynamicFieldPrototypes();\n    boolean seen = false;\n    for (SchemaField dynField : dynFields) {\n      if (dynField.getName().equals(\"*\" + FieldType.POLY_FIELD_SEPARATOR + subFieldType)) {\n        seen = true;\n      }\n    }\n    assertTrue(\"Didn't find the expected dynamic field\", seen);\n    FieldType homeFT = schema.getFieldType(\"home\");\n    assertEquals(home.getType(), homeFT);\n    FieldType xy = schema.getFieldTypeByName(\"xy\");\n    assertNotNull(xy);\n    assertTrue(xy instanceof PointType);\n    assertTrue(xy.isPolyField());\n    home = schema.getFieldOrNull(\"home_0\" + FieldType.POLY_FIELD_SEPARATOR + subFieldType);\n    assertNotNull(home);\n    home = schema.getField(\"home\");\n    assertNotNull(home);\n\n    home = schema.getField(\"homed\");//sub field suffix\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n  }\n\n","sourceOld":"  @Test\n  public void testSchemaBasics() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n\n\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n    \n    String subFieldType = \"double\";\n    if (usingPointFields()) {\n      subFieldType = \"pdouble\";\n    }\n\n    SchemaField[] dynFields = schema.getDynamicFieldPrototypes();\n    boolean seen = false;\n    for (SchemaField dynField : dynFields) {\n      if (dynField.getName().equals(\"*\" + FieldType.POLY_FIELD_SEPARATOR + subFieldType)) {\n        seen = true;\n      }\n    }\n    assertTrue(\"Didn't find the expected dynamic field\", seen);\n    FieldType homeFT = schema.getFieldType(\"home\");\n    assertEquals(home.getType(), homeFT);\n    FieldType xy = schema.getFieldTypeByName(\"xy\");\n    assertNotNull(xy);\n    assertTrue(xy instanceof PointType);\n    assertTrue(xy.isPolyField());\n    home = schema.getFieldOrNull(\"home_0\" + FieldType.POLY_FIELD_SEPARATOR + subFieldType);\n    assertNotNull(home);\n    home = schema.getField(\"home\");\n    assertNotNull(home);\n\n    home = schema.getField(\"homed\");//sub field suffix\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testSchemaBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testSchemaBasics().mjava","sourceNew":"  @Test\n  public void testSchemaBasics() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n\n\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n    \n    String subFieldType = \"double\";\n    SchemaField[] dynFields = schema.getDynamicFieldPrototypes();\n    boolean seen = false;\n    for (SchemaField dynField : dynFields) {\n      if (dynField.getName().equals(\"*\" + FieldType.POLY_FIELD_SEPARATOR + subFieldType)) {\n        seen = true;\n      }\n    }\n    assertTrue(\"Didn't find the expected dynamic field\", seen);\n    FieldType homeFT = schema.getFieldType(\"home\");\n    assertEquals(home.getType(), homeFT);\n    FieldType xy = schema.getFieldTypeByName(\"xy\");\n    assertNotNull(xy);\n    assertTrue(xy instanceof PointType);\n    assertTrue(xy.isPolyField());\n    home = schema.getFieldOrNull(\"home_0\" + FieldType.POLY_FIELD_SEPARATOR + subFieldType);\n    assertNotNull(home);\n    home = schema.getField(\"home\");\n    assertNotNull(home);\n\n    home = schema.getField(\"homed\");//sub field suffix\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n  }\n\n","sourceOld":"  @Test\n  public void testSchemaBasics() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n\n\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n    \n    String subFieldType = \"double\";\n    if (usingPointFields()) {\n      subFieldType = \"pdouble\";\n    }\n\n    SchemaField[] dynFields = schema.getDynamicFieldPrototypes();\n    boolean seen = false;\n    for (SchemaField dynField : dynFields) {\n      if (dynField.getName().equals(\"*\" + FieldType.POLY_FIELD_SEPARATOR + subFieldType)) {\n        seen = true;\n      }\n    }\n    assertTrue(\"Didn't find the expected dynamic field\", seen);\n    FieldType homeFT = schema.getFieldType(\"home\");\n    assertEquals(home.getType(), homeFT);\n    FieldType xy = schema.getFieldTypeByName(\"xy\");\n    assertNotNull(xy);\n    assertTrue(xy instanceof PointType);\n    assertTrue(xy.isPolyField());\n    home = schema.getFieldOrNull(\"home_0\" + FieldType.POLY_FIELD_SEPARATOR + subFieldType);\n    assertNotNull(home);\n    home = schema.getField(\"home\");\n    assertNotNull(home);\n\n    home = schema.getField(\"homed\");//sub field suffix\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testSchemaBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/PolyFieldTest#testSchemaBasics().mjava","sourceNew":"  @Test\n  public void testSchemaBasics() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n\n\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n    \n    String subFieldType = \"double\";\n    SchemaField[] dynFields = schema.getDynamicFieldPrototypes();\n    boolean seen = false;\n    for (SchemaField dynField : dynFields) {\n      if (dynField.getName().equals(\"*\" + FieldType.POLY_FIELD_SEPARATOR + subFieldType)) {\n        seen = true;\n      }\n    }\n    assertTrue(\"Didn't find the expected dynamic field\", seen);\n    FieldType homeFT = schema.getFieldType(\"home\");\n    assertEquals(home.getType(), homeFT);\n    FieldType xy = schema.getFieldTypeByName(\"xy\");\n    assertNotNull(xy);\n    assertTrue(xy instanceof PointType);\n    assertTrue(xy.isPolyField());\n    home = schema.getFieldOrNull(\"home_0\" + FieldType.POLY_FIELD_SEPARATOR + subFieldType);\n    assertNotNull(home);\n    home = schema.getField(\"home\");\n    assertNotNull(home);\n\n    home = schema.getField(\"homed\");//sub field suffix\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n  }\n\n","sourceOld":"  @Test\n  public void testSchemaBasics() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n\n\n    SchemaField home = schema.getField(\"home\");\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n    \n    String subFieldType = \"double\";\n    if (usingPointFields()) {\n      subFieldType = \"pdouble\";\n    }\n\n    SchemaField[] dynFields = schema.getDynamicFieldPrototypes();\n    boolean seen = false;\n    for (SchemaField dynField : dynFields) {\n      if (dynField.getName().equals(\"*\" + FieldType.POLY_FIELD_SEPARATOR + subFieldType)) {\n        seen = true;\n      }\n    }\n    assertTrue(\"Didn't find the expected dynamic field\", seen);\n    FieldType homeFT = schema.getFieldType(\"home\");\n    assertEquals(home.getType(), homeFT);\n    FieldType xy = schema.getFieldTypeByName(\"xy\");\n    assertNotNull(xy);\n    assertTrue(xy instanceof PointType);\n    assertTrue(xy.isPolyField());\n    home = schema.getFieldOrNull(\"home_0\" + FieldType.POLY_FIELD_SEPARATOR + subFieldType);\n    assertNotNull(home);\n    home = schema.getField(\"home\");\n    assertNotNull(home);\n\n    home = schema.getField(\"homed\");//sub field suffix\n    assertNotNull(home);\n    assertTrue(home.isPolyField());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"351efe6fdecf9af62134d37ec2582e4a0331a4dc":["9a7bf782535cdb8bcd80741225832314d5c2380c"],"9a7bf782535cdb8bcd80741225832314d5c2380c":["08970e5b8411182a29412c177eff67ec1110095b"],"378c6150f20ef79f184ab9cd89a056771fc918c7":["08970e5b8411182a29412c177eff67ec1110095b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["378c6150f20ef79f184ab9cd89a056771fc918c7","351efe6fdecf9af62134d37ec2582e4a0331a4dc"],"28288370235ed02234a64753cdbf0c6ec096304a":["9a7bf782535cdb8bcd80741225832314d5c2380c","351efe6fdecf9af62134d37ec2582e4a0331a4dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"08970e5b8411182a29412c177eff67ec1110095b":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"351efe6fdecf9af62134d37ec2582e4a0331a4dc":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"9a7bf782535cdb8bcd80741225832314d5c2380c":["351efe6fdecf9af62134d37ec2582e4a0331a4dc","28288370235ed02234a64753cdbf0c6ec096304a"],"378c6150f20ef79f184ab9cd89a056771fc918c7":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["08970e5b8411182a29412c177eff67ec1110095b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"08970e5b8411182a29412c177eff67ec1110095b":["9a7bf782535cdb8bcd80741225832314d5c2380c","378c6150f20ef79f184ab9cd89a056771fc918c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}