{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundFormat#write(Directory,SegmentInfo,Collection[String],IOContext).mjava","commits":[{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundFormat#write(Directory,SegmentInfo,Collection[String],IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundFormat#write(Directory,SegmentInfo,Collection[String],CheckAbort,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, Collection<String> files, IOContext context) throws IOException {\n    String dataFile = IndexFileNames.segmentFileName(si.name, \"\", DATA_EXTENSION);\n    String entriesFile = IndexFileNames.segmentFileName(si.name, \"\", ENTRIES_EXTENSION);\n    \n    try (IndexOutput data =    dir.createOutput(dataFile, context);\n         IndexOutput entries = dir.createOutput(entriesFile, context)) {\n      CodecUtil.writeIndexHeader(data,    DATA_CODEC, VERSION_CURRENT, si.getId(), \"\");\n      CodecUtil.writeIndexHeader(entries, ENTRY_CODEC, VERSION_CURRENT, si.getId(), \"\");\n      \n      // write number of files\n      entries.writeVInt(files.size());\n      for (String file : files) {\n        \n        // write bytes for file\n        long startOffset = data.getFilePointer();\n        try (IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n          data.copyBytes(in, in.length());\n        }\n        long endOffset = data.getFilePointer();\n        \n        long length = endOffset - startOffset;\n        \n        // write entry for file\n        entries.writeString(IndexFileNames.stripSegmentName(file));\n        entries.writeLong(startOffset);\n        entries.writeLong(length);\n      }\n      \n      CodecUtil.writeFooter(data);\n      CodecUtil.writeFooter(entries);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, Collection<String> files, CheckAbort checkAbort, IOContext context) throws IOException {\n    String dataFile = IndexFileNames.segmentFileName(si.name, \"\", DATA_EXTENSION);\n    String entriesFile = IndexFileNames.segmentFileName(si.name, \"\", ENTRIES_EXTENSION);\n    \n    try (IndexOutput data =    dir.createOutput(dataFile, context);\n         IndexOutput entries = dir.createOutput(entriesFile, context)) {\n      CodecUtil.writeIndexHeader(data,    DATA_CODEC, VERSION_CURRENT, si.getId(), \"\");\n      CodecUtil.writeIndexHeader(entries, ENTRY_CODEC, VERSION_CURRENT, si.getId(), \"\");\n      \n      // write number of files\n      entries.writeVInt(files.size());\n      for (String file : files) {\n        \n        // write bytes for file\n        long startOffset = data.getFilePointer();\n        try (IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n          data.copyBytes(in, in.length());\n        }\n        long endOffset = data.getFilePointer();\n        \n        long length = endOffset - startOffset;\n        \n        // write entry for file\n        entries.writeString(IndexFileNames.stripSegmentName(file));\n        entries.writeLong(startOffset);\n        entries.writeLong(length);\n        \n        checkAbort.work(length);\n      }\n      \n      CodecUtil.writeFooter(data);\n      CodecUtil.writeFooter(entries);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75d243fa001c0783996918dbbe60b55cbaeeff46","date":1422502815,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundFormat#write(Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundFormat#write(Directory,SegmentInfo,Collection[String],IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, IOContext context) throws IOException {\n    String dataFile = IndexFileNames.segmentFileName(si.name, \"\", DATA_EXTENSION);\n    String entriesFile = IndexFileNames.segmentFileName(si.name, \"\", ENTRIES_EXTENSION);\n    \n    try (IndexOutput data =    dir.createOutput(dataFile, context);\n         IndexOutput entries = dir.createOutput(entriesFile, context)) {\n      CodecUtil.writeIndexHeader(data,    DATA_CODEC, VERSION_CURRENT, si.getId(), \"\");\n      CodecUtil.writeIndexHeader(entries, ENTRY_CODEC, VERSION_CURRENT, si.getId(), \"\");\n      \n      // write number of files\n      entries.writeVInt(si.files().size());\n      for (String file : si.files()) {\n        \n        // write bytes for file\n        long startOffset = data.getFilePointer();\n        try (IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n          data.copyBytes(in, in.length());\n        }\n        long endOffset = data.getFilePointer();\n        \n        long length = endOffset - startOffset;\n        \n        // write entry for file\n        entries.writeString(IndexFileNames.stripSegmentName(file));\n        entries.writeLong(startOffset);\n        entries.writeLong(length);\n      }\n      \n      CodecUtil.writeFooter(data);\n      CodecUtil.writeFooter(entries);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, Collection<String> files, IOContext context) throws IOException {\n    String dataFile = IndexFileNames.segmentFileName(si.name, \"\", DATA_EXTENSION);\n    String entriesFile = IndexFileNames.segmentFileName(si.name, \"\", ENTRIES_EXTENSION);\n    \n    try (IndexOutput data =    dir.createOutput(dataFile, context);\n         IndexOutput entries = dir.createOutput(entriesFile, context)) {\n      CodecUtil.writeIndexHeader(data,    DATA_CODEC, VERSION_CURRENT, si.getId(), \"\");\n      CodecUtil.writeIndexHeader(entries, ENTRY_CODEC, VERSION_CURRENT, si.getId(), \"\");\n      \n      // write number of files\n      entries.writeVInt(files.size());\n      for (String file : files) {\n        \n        // write bytes for file\n        long startOffset = data.getFilePointer();\n        try (IndexInput in = dir.openInput(file, IOContext.READONCE)) {\n          data.copyBytes(in, in.length());\n        }\n        long endOffset = data.getFilePointer();\n        \n        long length = endOffset - startOffset;\n        \n        // write entry for file\n        entries.writeString(IndexFileNames.stripSegmentName(file));\n        entries.writeLong(startOffset);\n        entries.writeLong(length);\n      }\n      \n      CodecUtil.writeFooter(data);\n      CodecUtil.writeFooter(entries);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5faf65b6692f15cca0f87bf8666c87899afc619f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"75d243fa001c0783996918dbbe60b55cbaeeff46":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["75d243fa001c0783996918dbbe60b55cbaeeff46"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["75d243fa001c0783996918dbbe60b55cbaeeff46"],"75d243fa001c0783996918dbbe60b55cbaeeff46":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}