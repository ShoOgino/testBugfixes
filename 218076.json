{"path":"solr/core/src/test/org/apache/solr/handler/TestContainerPlugin#testApiFromPackage().mjava","commits":[{"id":"650b520f2a4daa4b0712e2393dc29ae7f21f10ac","date":1593054531,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestContainerPlugin#testApiFromPackage().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testApiFromPackage() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n            .withJettyConfig(jetty -> jetty.enableV2(true))\n            .configure();\n    String FILE1 = \"/myplugin/v1.jar\";\n    String FILE2 = \"/myplugin/v2.jar\";\n\n    String errPath = \"/error/details[0]/errorMessages[0]\";\n    try {\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      TestPackages.postFileAndWait(cluster, \"runtimecode/containerplugin.v.1.jar.bin\", FILE1,\n          \"pmrmWCDafdNpYle2rueAGnU2J6NYlcAey9mkZYbqh+5RdYo2Ln+llLF9voyRj+DDivK9GV1XdtKvD9rgCxlD7Q==\");\n     TestPackages.postFileAndWait(cluster, \"runtimecode/containerplugin.v.2.jar.bin\", FILE2,\n          \"StR3DmqaUSL7qjDOeVEiCqE+ouiZAkW99fsL48F9oWG047o7NGgwwZ36iGgzDC3S2tPaFjRAd9Zg4UK7OZLQzg==\");\n\n     // We have two versions of the plugin in 2 different jar files. they are already uploaded to the package store\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"mypkg\";\n      add.files = List.of(FILE1);\n      V2Request addPkgVersionReq = new V2Request.Builder(\"/cluster/package\")\n          .forceV2(true)\n          .withMethod(POST)\n          .withPayload(singletonMap(\"add\", add))\n          .build();\n      addPkgVersionReq.process(cluster.getSolrClient());\n\n      waitForAllNodesToSync(cluster, \"/cluster/package\", Utils.makeMap(\n              \":result:packages:mypkg[0]:version\", \"1.0\",\n              \":result:packages:mypkg[0]:files[0]\", FILE1\n      ));\n\n      // Now lets create a plugin using v1 jar file\n      PluginMeta plugin = new PluginMeta();\n      plugin.name = \"myplugin\";\n      plugin.klass = \"mypkg:org.apache.solr.handler.MyPlugin\";\n      plugin.version = add.version;\n      V2Request req1 = new V2Request.Builder(\"/cluster/plugin\")\n          .forceV2(true)\n          .withMethod(POST)\n          .withPayload(singletonMap(\"add\", plugin))\n          .build();\n      req1.process(cluster.getSolrClient());\n      //verify the plugin creation\n      TestDistribPackageStore.assertResponseValues(10,\n          () -> new V2Request.Builder(\"/cluster/plugin\").\n              withMethod(GET)\n              .build().process(cluster.getSolrClient()),\n          ImmutableMap.of(\n              \"/plugin/myplugin/class\", plugin.klass,\n              \"/plugin/myplugin/version\", plugin.version\n          ));\n      //let's test this now\n      Callable<NavigableObject> invokePlugin = () -> new V2Request.Builder(\"/plugin/my/path\")\n          .forceV2(true)\n          .withMethod(GET)\n          .build().process(cluster.getSolrClient());\n      TestDistribPackageStore.assertResponseValues(10,\n          invokePlugin,\n          ImmutableMap.of(\"/myplugin.version\", \"1.0\"));\n\n      //now let's upload the jar file for version 2.0 of the plugin\n      add.version = \"2.0\";\n      add.files = List.of(FILE2);\n      addPkgVersionReq.process(cluster.getSolrClient());\n\n      //here the plugin version is updated\n      plugin.version = add.version;\n      new V2Request.Builder(\"/cluster/plugin\")\n          .forceV2(true)\n          .withMethod(POST)\n          .withPayload(singletonMap(\"update\", plugin))\n          .build()\n      .process(cluster.getSolrClient());\n\n      //now verify if it is indeed updated\n      TestDistribPackageStore.assertResponseValues(10,\n          () -> new V2Request.Builder(\"/cluster/plugin\").\n              withMethod(GET)\n              .build().process(cluster.getSolrClient()),\n          ImmutableMap.of(\n              \"/plugin/myplugin/class\", plugin.klass,\n              \"/plugin/myplugin/version\", \"2.0\"\n          ));\n      // invoke the plugin and test thye output\n      TestDistribPackageStore.assertResponseValues(10,\n          invokePlugin,\n          ImmutableMap.of(\"/myplugin.version\", \"2.0\"));\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2c4fba12438c1407e259b55774b5bbb707046a8","date":1593319746,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestContainerPlugin#testApiFromPackage().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerPlugin#testApiFromPackage().mjava","sourceNew":"  @Test\n  public void testApiFromPackage() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n            .withJettyConfig(jetty -> jetty.enableV2(true))\n            .configure();\n    String FILE1 = \"/myplugin/v1.jar\";\n    String FILE2 = \"/myplugin/v2.jar\";\n\n    String errPath = \"/error/details[0]/errorMessages[0]\";\n    try {\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      TestPackages.postFileAndWait(cluster, \"runtimecode/containerplugin.v.1.jar.bin\", FILE1,\n          \"pmrmWCDafdNpYle2rueAGnU2J6NYlcAey9mkZYbqh+5RdYo2Ln+llLF9voyRj+DDivK9GV1XdtKvD9rgCxlD7Q==\");\n     TestPackages.postFileAndWait(cluster, \"runtimecode/containerplugin.v.2.jar.bin\", FILE2,\n          \"StR3DmqaUSL7qjDOeVEiCqE+ouiZAkW99fsL48F9oWG047o7NGgwwZ36iGgzDC3S2tPaFjRAd9Zg4UK7OZLQzg==\");\n\n     // We have two versions of the plugin in 2 different jar files. they are already uploaded to the package store\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"mypkg\";\n      add.files = List.of(FILE1);\n      V2Request addPkgVersionReq = new V2Request.Builder(\"/cluster/package\")\n          .forceV2(true)\n          .withMethod(POST)\n          .withPayload(singletonMap(\"add\", add))\n          .build();\n      addPkgVersionReq.process(cluster.getSolrClient());\n\n      waitForAllNodesToSync(cluster, \"/cluster/package\", Utils.makeMap(\n              \":result:packages:mypkg[0]:version\", \"1.0\",\n              \":result:packages:mypkg[0]:files[0]\", FILE1\n      ));\n\n      // Now lets create a plugin using v1 jar file\n      PluginMeta plugin = new PluginMeta();\n      plugin.name = \"myplugin\";\n      plugin.klass = \"mypkg:org.apache.solr.handler.MyPlugin\";\n      plugin.version = add.version;\n      final V2Request req1 = new V2Request.Builder(\"/cluster/plugin\")\n          .forceV2(true)\n          .withMethod(POST)\n          .withPayload(singletonMap(\"add\", plugin))\n          .build();\n      req1.process(cluster.getSolrClient());\n      //verify the plugin creation\n      TestDistribPackageStore.assertResponseValues(10,\n          () -> new V2Request.Builder(\"/cluster/plugin\").\n              withMethod(GET)\n              .build().process(cluster.getSolrClient()),\n          ImmutableMap.of(\n              \"/plugin/myplugin/class\", plugin.klass,\n              \"/plugin/myplugin/version\", plugin.version\n          ));\n      //let's test this now\n      Callable<NavigableObject> invokePlugin = () -> new V2Request.Builder(\"/plugin/my/path\")\n          .forceV2(true)\n          .withMethod(GET)\n          .build().process(cluster.getSolrClient());\n      TestDistribPackageStore.assertResponseValues(10,\n          invokePlugin,\n          ImmutableMap.of(\"/myplugin.version\", \"1.0\"));\n\n      //now let's upload the jar file for version 2.0 of the plugin\n      add.version = \"2.0\";\n      add.files = List.of(FILE2);\n      addPkgVersionReq.process(cluster.getSolrClient());\n\n      //here the plugin version is updated\n      plugin.version = add.version;\n      new V2Request.Builder(\"/cluster/plugin\")\n          .forceV2(true)\n          .withMethod(POST)\n          .withPayload(singletonMap(\"update\", plugin))\n          .build()\n      .process(cluster.getSolrClient());\n\n      //now verify if it is indeed updated\n      TestDistribPackageStore.assertResponseValues(10,\n          () -> new V2Request.Builder(\"/cluster/plugin\").\n              withMethod(GET)\n              .build().process(cluster.getSolrClient()),\n          ImmutableMap.of(\n              \"/plugin/myplugin/class\", plugin.klass,\n              \"/plugin/myplugin/version\", \"2.0\"\n          ));\n      // invoke the plugin and test the output\n      TestDistribPackageStore.assertResponseValues(10,\n          invokePlugin,\n          ImmutableMap.of(\"/myplugin.version\", \"2.0\"));\n\n      plugin.name = \"plugin2\";\n      plugin.klass = \"mypkg:\"+ C5.class.getName();\n      plugin.version = \"2.0\";\n      req1.process(cluster.getSolrClient());\n      assertNotNull(C5.classData);\n      assertEquals( 1452, C5.classData.limit());\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testApiFromPackage() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n            .withJettyConfig(jetty -> jetty.enableV2(true))\n            .configure();\n    String FILE1 = \"/myplugin/v1.jar\";\n    String FILE2 = \"/myplugin/v2.jar\";\n\n    String errPath = \"/error/details[0]/errorMessages[0]\";\n    try {\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      TestPackages.postFileAndWait(cluster, \"runtimecode/containerplugin.v.1.jar.bin\", FILE1,\n          \"pmrmWCDafdNpYle2rueAGnU2J6NYlcAey9mkZYbqh+5RdYo2Ln+llLF9voyRj+DDivK9GV1XdtKvD9rgCxlD7Q==\");\n     TestPackages.postFileAndWait(cluster, \"runtimecode/containerplugin.v.2.jar.bin\", FILE2,\n          \"StR3DmqaUSL7qjDOeVEiCqE+ouiZAkW99fsL48F9oWG047o7NGgwwZ36iGgzDC3S2tPaFjRAd9Zg4UK7OZLQzg==\");\n\n     // We have two versions of the plugin in 2 different jar files. they are already uploaded to the package store\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"mypkg\";\n      add.files = List.of(FILE1);\n      V2Request addPkgVersionReq = new V2Request.Builder(\"/cluster/package\")\n          .forceV2(true)\n          .withMethod(POST)\n          .withPayload(singletonMap(\"add\", add))\n          .build();\n      addPkgVersionReq.process(cluster.getSolrClient());\n\n      waitForAllNodesToSync(cluster, \"/cluster/package\", Utils.makeMap(\n              \":result:packages:mypkg[0]:version\", \"1.0\",\n              \":result:packages:mypkg[0]:files[0]\", FILE1\n      ));\n\n      // Now lets create a plugin using v1 jar file\n      PluginMeta plugin = new PluginMeta();\n      plugin.name = \"myplugin\";\n      plugin.klass = \"mypkg:org.apache.solr.handler.MyPlugin\";\n      plugin.version = add.version;\n      V2Request req1 = new V2Request.Builder(\"/cluster/plugin\")\n          .forceV2(true)\n          .withMethod(POST)\n          .withPayload(singletonMap(\"add\", plugin))\n          .build();\n      req1.process(cluster.getSolrClient());\n      //verify the plugin creation\n      TestDistribPackageStore.assertResponseValues(10,\n          () -> new V2Request.Builder(\"/cluster/plugin\").\n              withMethod(GET)\n              .build().process(cluster.getSolrClient()),\n          ImmutableMap.of(\n              \"/plugin/myplugin/class\", plugin.klass,\n              \"/plugin/myplugin/version\", plugin.version\n          ));\n      //let's test this now\n      Callable<NavigableObject> invokePlugin = () -> new V2Request.Builder(\"/plugin/my/path\")\n          .forceV2(true)\n          .withMethod(GET)\n          .build().process(cluster.getSolrClient());\n      TestDistribPackageStore.assertResponseValues(10,\n          invokePlugin,\n          ImmutableMap.of(\"/myplugin.version\", \"1.0\"));\n\n      //now let's upload the jar file for version 2.0 of the plugin\n      add.version = \"2.0\";\n      add.files = List.of(FILE2);\n      addPkgVersionReq.process(cluster.getSolrClient());\n\n      //here the plugin version is updated\n      plugin.version = add.version;\n      new V2Request.Builder(\"/cluster/plugin\")\n          .forceV2(true)\n          .withMethod(POST)\n          .withPayload(singletonMap(\"update\", plugin))\n          .build()\n      .process(cluster.getSolrClient());\n\n      //now verify if it is indeed updated\n      TestDistribPackageStore.assertResponseValues(10,\n          () -> new V2Request.Builder(\"/cluster/plugin\").\n              withMethod(GET)\n              .build().process(cluster.getSolrClient()),\n          ImmutableMap.of(\n              \"/plugin/myplugin/class\", plugin.klass,\n              \"/plugin/myplugin/version\", \"2.0\"\n          ));\n      // invoke the plugin and test thye output\n      TestDistribPackageStore.assertResponseValues(10,\n          invokePlugin,\n          ImmutableMap.of(\"/myplugin.version\", \"2.0\"));\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d460dbb60d9def83f8bd04ac4e6829effaa19ca1","date":1593321762,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestContainerPlugin#testApiFromPackage().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerPlugin#testApiFromPackage().mjava","sourceNew":"  @Test\n  public void testApiFromPackage() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n            .withJettyConfig(jetty -> jetty.enableV2(true))\n            .configure();\n    String FILE1 = \"/myplugin/v1.jar\";\n    String FILE2 = \"/myplugin/v2.jar\";\n\n    String errPath = \"/error/details[0]/errorMessages[0]\";\n    try {\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      TestPackages.postFileAndWait(cluster, \"runtimecode/containerplugin.v.1.jar.bin\", FILE1,\n          \"pmrmWCDafdNpYle2rueAGnU2J6NYlcAey9mkZYbqh+5RdYo2Ln+llLF9voyRj+DDivK9GV1XdtKvD9rgCxlD7Q==\");\n     TestPackages.postFileAndWait(cluster, \"runtimecode/containerplugin.v.2.jar.bin\", FILE2,\n          \"StR3DmqaUSL7qjDOeVEiCqE+ouiZAkW99fsL48F9oWG047o7NGgwwZ36iGgzDC3S2tPaFjRAd9Zg4UK7OZLQzg==\");\n\n     // We have two versions of the plugin in 2 different jar files. they are already uploaded to the package store\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"mypkg\";\n      add.files = singletonList(FILE1);\n      V2Request addPkgVersionReq = new V2Request.Builder(\"/cluster/package\")\n          .forceV2(true)\n          .withMethod(POST)\n          .withPayload(singletonMap(\"add\", add))\n          .build();\n      addPkgVersionReq.process(cluster.getSolrClient());\n\n      waitForAllNodesToSync(cluster, \"/cluster/package\", Utils.makeMap(\n              \":result:packages:mypkg[0]:version\", \"1.0\",\n              \":result:packages:mypkg[0]:files[0]\", FILE1\n      ));\n\n      // Now lets create a plugin using v1 jar file\n      PluginMeta plugin = new PluginMeta();\n      plugin.name = \"myplugin\";\n      plugin.klass = \"mypkg:org.apache.solr.handler.MyPlugin\";\n      plugin.version = add.version;\n      final V2Request req1 = new V2Request.Builder(\"/cluster/plugin\")\n          .forceV2(true)\n          .withMethod(POST)\n          .withPayload(singletonMap(\"add\", plugin))\n          .build();\n      req1.process(cluster.getSolrClient());\n      //verify the plugin creation\n      TestDistribPackageStore.assertResponseValues(10,\n          () -> new V2Request.Builder(\"/cluster/plugin\").\n              withMethod(GET)\n              .build().process(cluster.getSolrClient()),\n          ImmutableMap.of(\n              \"/plugin/myplugin/class\", plugin.klass,\n              \"/plugin/myplugin/version\", plugin.version\n          ));\n      //let's test this now\n      Callable<NavigableObject> invokePlugin = () -> new V2Request.Builder(\"/plugin/my/path\")\n          .forceV2(true)\n          .withMethod(GET)\n          .build().process(cluster.getSolrClient());\n      TestDistribPackageStore.assertResponseValues(10,\n          invokePlugin,\n          ImmutableMap.of(\"/myplugin.version\", \"1.0\"));\n\n      //now let's upload the jar file for version 2.0 of the plugin\n      add.version = \"2.0\";\n      add.files = singletonList(FILE2);\n      addPkgVersionReq.process(cluster.getSolrClient());\n\n      //here the plugin version is updated\n      plugin.version = add.version;\n      new V2Request.Builder(\"/cluster/plugin\")\n          .forceV2(true)\n          .withMethod(POST)\n          .withPayload(singletonMap(\"update\", plugin))\n          .build()\n      .process(cluster.getSolrClient());\n\n      //now verify if it is indeed updated\n      TestDistribPackageStore.assertResponseValues(10,\n          () -> new V2Request.Builder(\"/cluster/plugin\").\n              withMethod(GET)\n              .build().process(cluster.getSolrClient()),\n          ImmutableMap.of(\n              \"/plugin/myplugin/class\", plugin.klass,\n              \"/plugin/myplugin/version\", \"2.0\"\n          ));\n      // invoke the plugin and test thye output\n      TestDistribPackageStore.assertResponseValues(10,\n          invokePlugin,\n          ImmutableMap.of(\"/myplugin.version\", \"2.0\"));\n\n      plugin.name = \"plugin2\";\n      plugin.klass = \"mypkg:\"+ C5.class.getName();\n      plugin.version = \"2.0\";\n      req1.process(cluster.getSolrClient());\n      assertNotNull(C5.classData);\n      assertEquals( 1452, C5.classData.limit());\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testApiFromPackage() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n            .withJettyConfig(jetty -> jetty.enableV2(true))\n            .configure();\n    String FILE1 = \"/myplugin/v1.jar\";\n    String FILE2 = \"/myplugin/v2.jar\";\n\n    String errPath = \"/error/details[0]/errorMessages[0]\";\n    try {\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n      TestPackages.postFileAndWait(cluster, \"runtimecode/containerplugin.v.1.jar.bin\", FILE1,\n          \"pmrmWCDafdNpYle2rueAGnU2J6NYlcAey9mkZYbqh+5RdYo2Ln+llLF9voyRj+DDivK9GV1XdtKvD9rgCxlD7Q==\");\n     TestPackages.postFileAndWait(cluster, \"runtimecode/containerplugin.v.2.jar.bin\", FILE2,\n          \"StR3DmqaUSL7qjDOeVEiCqE+ouiZAkW99fsL48F9oWG047o7NGgwwZ36iGgzDC3S2tPaFjRAd9Zg4UK7OZLQzg==\");\n\n     // We have two versions of the plugin in 2 different jar files. they are already uploaded to the package store\n      Package.AddVersion add = new Package.AddVersion();\n      add.version = \"1.0\";\n      add.pkg = \"mypkg\";\n      add.files = List.of(FILE1);\n      V2Request addPkgVersionReq = new V2Request.Builder(\"/cluster/package\")\n          .forceV2(true)\n          .withMethod(POST)\n          .withPayload(singletonMap(\"add\", add))\n          .build();\n      addPkgVersionReq.process(cluster.getSolrClient());\n\n      waitForAllNodesToSync(cluster, \"/cluster/package\", Utils.makeMap(\n              \":result:packages:mypkg[0]:version\", \"1.0\",\n              \":result:packages:mypkg[0]:files[0]\", FILE1\n      ));\n\n      // Now lets create a plugin using v1 jar file\n      PluginMeta plugin = new PluginMeta();\n      plugin.name = \"myplugin\";\n      plugin.klass = \"mypkg:org.apache.solr.handler.MyPlugin\";\n      plugin.version = add.version;\n      final V2Request req1 = new V2Request.Builder(\"/cluster/plugin\")\n          .forceV2(true)\n          .withMethod(POST)\n          .withPayload(singletonMap(\"add\", plugin))\n          .build();\n      req1.process(cluster.getSolrClient());\n      //verify the plugin creation\n      TestDistribPackageStore.assertResponseValues(10,\n          () -> new V2Request.Builder(\"/cluster/plugin\").\n              withMethod(GET)\n              .build().process(cluster.getSolrClient()),\n          ImmutableMap.of(\n              \"/plugin/myplugin/class\", plugin.klass,\n              \"/plugin/myplugin/version\", plugin.version\n          ));\n      //let's test this now\n      Callable<NavigableObject> invokePlugin = () -> new V2Request.Builder(\"/plugin/my/path\")\n          .forceV2(true)\n          .withMethod(GET)\n          .build().process(cluster.getSolrClient());\n      TestDistribPackageStore.assertResponseValues(10,\n          invokePlugin,\n          ImmutableMap.of(\"/myplugin.version\", \"1.0\"));\n\n      //now let's upload the jar file for version 2.0 of the plugin\n      add.version = \"2.0\";\n      add.files = List.of(FILE2);\n      addPkgVersionReq.process(cluster.getSolrClient());\n\n      //here the plugin version is updated\n      plugin.version = add.version;\n      new V2Request.Builder(\"/cluster/plugin\")\n          .forceV2(true)\n          .withMethod(POST)\n          .withPayload(singletonMap(\"update\", plugin))\n          .build()\n      .process(cluster.getSolrClient());\n\n      //now verify if it is indeed updated\n      TestDistribPackageStore.assertResponseValues(10,\n          () -> new V2Request.Builder(\"/cluster/plugin\").\n              withMethod(GET)\n              .build().process(cluster.getSolrClient()),\n          ImmutableMap.of(\n              \"/plugin/myplugin/class\", plugin.klass,\n              \"/plugin/myplugin/version\", \"2.0\"\n          ));\n      // invoke the plugin and test the output\n      TestDistribPackageStore.assertResponseValues(10,\n          invokePlugin,\n          ImmutableMap.of(\"/myplugin.version\", \"2.0\"));\n\n      plugin.name = \"plugin2\";\n      plugin.klass = \"mypkg:\"+ C5.class.getName();\n      plugin.version = \"2.0\";\n      req1.process(cluster.getSolrClient());\n      assertNotNull(C5.classData);\n      assertEquals( 1452, C5.classData.limit());\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"650b520f2a4daa4b0712e2393dc29ae7f21f10ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e2c4fba12438c1407e259b55774b5bbb707046a8":["650b520f2a4daa4b0712e2393dc29ae7f21f10ac"],"d460dbb60d9def83f8bd04ac4e6829effaa19ca1":["e2c4fba12438c1407e259b55774b5bbb707046a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d460dbb60d9def83f8bd04ac4e6829effaa19ca1"]},"commit2Childs":{"650b520f2a4daa4b0712e2393dc29ae7f21f10ac":["e2c4fba12438c1407e259b55774b5bbb707046a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["650b520f2a4daa4b0712e2393dc29ae7f21f10ac"],"e2c4fba12438c1407e259b55774b5bbb707046a8":["d460dbb60d9def83f8bd04ac4e6829effaa19ca1"],"d460dbb60d9def83f8bd04ac4e6829effaa19ca1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}