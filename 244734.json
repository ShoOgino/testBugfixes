{"path":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRightOpenRange(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRightOpenRange(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRightOpenRange(int).mjava","sourceNew":"  private void testRightOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(count-1)*distance + (distance/3) +startOffset;\n    NumericRangeQuery<Long> q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, true);\n    TopDocs topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n\n    q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, false);\n    topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n  }\n\n","sourceOld":"  private void testRightOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(count-1)*distance + (distance/3) +startOffset;\n    NumericRangeQuery<Long> q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, true);\n    TopDocs topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n\n    q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, false);\n    topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRightOpenRange(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRightOpenRange(int).mjava","sourceNew":"  private void testRightOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(count-1)*distance + (distance/3) +startOffset;\n    NumericRangeQuery<Long> q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, true);\n    TopDocs topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    StoredDocument doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n\n    q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, false);\n    topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n  }\n\n","sourceOld":"  private void testRightOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(count-1)*distance + (distance/3) +startOffset;\n    NumericRangeQuery<Long> q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, true);\n    TopDocs topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n\n    q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, false);\n    topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRightOpenRange(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRightOpenRange(int).mjava","sourceNew":"  private void testRightOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(count-1)*distance + (distance/3) +startOffset;\n    NumericRangeQuery<Long> q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, true);\n    TopDocs topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    StoredDocument doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n\n    q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, false);\n    topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n  }\n\n","sourceOld":"  private void testRightOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(count-1)*distance + (distance/3) +startOffset;\n    NumericRangeQuery<Long> q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, true);\n    TopDocs topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n\n    q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, false);\n    topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRightOpenRange(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRightOpenRange(int).mjava","sourceNew":"  private void testRightOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(count-1)*distance + (distance/3) +startOffset;\n    NumericRangeQuery<Long> q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    StoredDocument doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n\n    q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, false);\n    topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n  }\n\n","sourceOld":"  private void testRightOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(count-1)*distance + (distance/3) +startOffset;\n    NumericRangeQuery<Long> q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, true);\n    TopDocs topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    StoredDocument doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n\n    q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, false);\n    topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRightOpenRange(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRightOpenRange(int).mjava","sourceNew":"  private void testRightOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(count-1)*distance + (distance/3) +startOffset;\n    LegacyNumericRangeQuery<Long> q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    StoredDocument doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n\n    q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, false);\n    topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n  }\n\n","sourceOld":"  private void testRightOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(count-1)*distance + (distance/3) +startOffset;\n    NumericRangeQuery<Long> q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    StoredDocument doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n\n    q=NumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, false);\n    topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRightOpenRange(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRightOpenRange(int).mjava","sourceNew":"  private void testRightOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(count-1)*distance + (distance/3) +startOffset;\n    LegacyNumericRangeQuery<Long> q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n\n    q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, false);\n    topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n  }\n\n","sourceOld":"  private void testRightOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(count-1)*distance + (distance/3) +startOffset;\n    LegacyNumericRangeQuery<Long> q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    StoredDocument doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n\n    q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, false);\n    topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery64#testRightOpenRange(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRightOpenRange(int).mjava","sourceNew":"  private void testRightOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(count-1)*distance + (distance/3) +startOffset;\n    LegacyNumericRangeQuery<Long> q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n\n    q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, false);\n    topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n  }\n\n","sourceOld":"  private void testRightOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(count-1)*distance + (distance/3) +startOffset;\n    LegacyNumericRangeQuery<Long> q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n\n    q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, false);\n    topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery64#testRightOpenRange(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRightOpenRange(int).mjava","sourceNew":"  private void testRightOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(count-1)*distance + (distance/3) +startOffset;\n    LegacyNumericRangeQuery<Long> q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n\n    q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, false);\n    topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n  }\n\n","sourceOld":"  private void testRightOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(count-1)*distance + (distance/3) +startOffset;\n    LegacyNumericRangeQuery<Long> q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n\n    q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, false);\n    topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery64#testRightOpenRange(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRightOpenRange(int).mjava","sourceNew":"  private void testRightOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(count-1)*distance + (distance/3) +startOffset;\n    LegacyNumericRangeQuery<Long> q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n\n    q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, false);\n    topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n  }\n\n","sourceOld":"  private void testRightOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(count-1)*distance + (distance/3) +startOffset;\n    LegacyNumericRangeQuery<Long> q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n\n    q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, false);\n    topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery64#testRightOpenRange(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRightOpenRange(int).mjava","sourceNew":"  private void testRightOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(count-1)*distance + (distance/3) +startOffset;\n    LegacyNumericRangeQuery<Long> q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n\n    q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, false);\n    topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n  }\n\n","sourceOld":"  private void testRightOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(count-1)*distance + (distance/3) +startOffset;\n    LegacyNumericRangeQuery<Long> q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n\n    q= LegacyNumericRangeQuery.newLongRange(field, precisionStep, lower, null, true, false);\n    topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", noDocs-count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", count*distance+startOffset, doc.getField(field).numericValue().longValue() );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (noDocs-1)*distance+startOffset, doc.getField(field).numericValue().longValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1d028314cced5858683a1bb4741423d0f934257b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["1d028314cced5858683a1bb4741423d0f934257b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"770342641f7b505eaa8dccdc666158bff2419109":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","1d028314cced5858683a1bb4741423d0f934257b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["770342641f7b505eaa8dccdc666158bff2419109"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"770342641f7b505eaa8dccdc666158bff2419109":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}