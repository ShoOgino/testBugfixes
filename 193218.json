{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#doRandomTest(int,int).mjava","commits":[{"id":"976a394d3766ec527a334072ea20ed791d81e330","date":1456749520,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#doRandomTest(int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    int pointsInLeaf = 2 + random().nextInt(4);\n    iwc.setCodec(new FilterCodec(\"Lucene60\", TestUtil.getDefaultCodec()) {\n      @Override\n      public PointFormat pointFormat() {\n        return new PointFormat() {\n          @Override\n          public PointWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n            return new Lucene60PointWriter(writeState, pointsInLeaf, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP);\n          }\n\n          @Override\n          public PointReader fieldsReader(SegmentReadState readState) throws IOException {\n            return new Lucene60PointReader(readState);\n          }\n        };\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int i = 0; i < numDocs; i++) {\n      double latRaw = -90 + 180.0 * random().nextDouble();\n      double lonRaw = -180 + 360.0 * random().nextDouble();\n      // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n      double lat = LatLonPoint.decodeLat(LatLonPoint.encodeLat(latRaw));\n      double lon = LatLonPoint.decodeLon(LatLonPoint.encodeLon(lonRaw));\n      Document doc = new Document();\n      doc.add(new LatLonPoint(\"field\", lat, lon));\n      doc.add(new StoredField(\"lat\", lat));\n      doc.add(new StoredField(\"lon\", lon));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n      double radius = 50000000 * random().nextDouble();\n\n      BitSet expected = new BitSet();\n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n        double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n        double distance = GeoDistanceUtils.haversin(lat, lon, docLatitude, docLongitude);\n        if (distance <= radius) {\n          expected.set(doc);\n        }\n      }\n\n      TopDocs topDocs = searcher.search(LatLonPoint.newDistanceQuery(\"field\", lat, lon, radius), reader.maxDoc(), Sort.INDEXORDER);\n      BitSet actual = new BitSet();\n      for (ScoreDoc doc : topDocs.scoreDocs) {\n        actual.set(doc.doc);\n      }\n\n      try {\n        assertEquals(expected, actual);\n      } catch (AssertionError e) {\n        for (int doc = 0; doc < reader.maxDoc(); doc++) {\n          double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n          double distance = GeoDistanceUtils.haversin(lat, lon, docLatitude, docLongitude);\n          System.out.println(\"\" + doc + \": (\" + docLatitude + \",\" + docLongitude + \"), distance=\" + distance);\n        }\n        throw e;\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ec60431d008a694828dacb4bc3cda775b6c44a9f","ec60431d008a694828dacb4bc3cda775b6c44a9f","4522ffca5a1f420c6a02198c9332d7c596a30ca5","4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#doRandomTest(int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    int pointsInLeaf = 2 + random().nextInt(4);\n    iwc.setCodec(new FilterCodec(\"Lucene60\", TestUtil.getDefaultCodec()) {\n      @Override\n      public PointFormat pointFormat() {\n        return new PointFormat() {\n          @Override\n          public PointWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n            return new Lucene60PointWriter(writeState, pointsInLeaf, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP);\n          }\n\n          @Override\n          public PointReader fieldsReader(SegmentReadState readState) throws IOException {\n            return new Lucene60PointReader(readState);\n          }\n        };\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int i = 0; i < numDocs; i++) {\n      double latRaw = -90 + 180.0 * random().nextDouble();\n      double lonRaw = -180 + 360.0 * random().nextDouble();\n      // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n      double lat = LatLonPoint.decodeLat(LatLonPoint.encodeLat(latRaw));\n      double lon = LatLonPoint.decodeLon(LatLonPoint.encodeLon(lonRaw));\n      Document doc = new Document();\n      doc.add(new LatLonPoint(\"field\", lat, lon));\n      doc.add(new StoredField(\"lat\", lat));\n      doc.add(new StoredField(\"lon\", lon));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n      double radius = 50000000 * random().nextDouble();\n\n      BitSet expected = new BitSet();\n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n        double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n        double distance = GeoDistanceUtils.haversin(lat, lon, docLatitude, docLongitude);\n        if (distance <= radius) {\n          expected.set(doc);\n        }\n      }\n\n      TopDocs topDocs = searcher.search(LatLonPoint.newDistanceQuery(\"field\", lat, lon, radius), reader.maxDoc(), Sort.INDEXORDER);\n      BitSet actual = new BitSet();\n      for (ScoreDoc doc : topDocs.scoreDocs) {\n        actual.set(doc.doc);\n      }\n\n      try {\n        assertEquals(expected, actual);\n      } catch (AssertionError e) {\n        for (int doc = 0; doc < reader.maxDoc(); doc++) {\n          double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n          double distance = GeoDistanceUtils.haversin(lat, lon, docLatitude, docLongitude);\n          System.out.println(\"\" + doc + \": (\" + docLatitude + \",\" + docLongitude + \"), distance=\" + distance);\n        }\n        throw e;\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"94ee361295fb38310ac4d53cb4773d1622423d68","date":1456833885,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceQuery#doRandomTest(int,int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#doRandomTest(int,int).mjava","sourceNew":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    int pointsInLeaf = 2 + random().nextInt(4);\n    iwc.setCodec(new FilterCodec(\"Lucene60\", TestUtil.getDefaultCodec()) {\n      @Override\n      public PointFormat pointFormat() {\n        return new PointFormat() {\n          @Override\n          public PointWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n            return new Lucene60PointWriter(writeState, pointsInLeaf, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP);\n          }\n\n          @Override\n          public PointReader fieldsReader(SegmentReadState readState) throws IOException {\n            return new Lucene60PointReader(readState);\n          }\n        };\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int i = 0; i < numDocs; i++) {\n      double latRaw = -90 + 180.0 * random().nextDouble();\n      double lonRaw = -180 + 360.0 * random().nextDouble();\n      // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n      double lat = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(latRaw));\n      double lon = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lonRaw));\n      Document doc = new Document();\n      doc.add(new LatLonPoint(\"field\", lat, lon));\n      doc.add(new StoredField(\"lat\", lat));\n      doc.add(new StoredField(\"lon\", lon));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n      double radius = 50000000 * random().nextDouble();\n\n      BitSet expected = new BitSet();\n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n        double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n        double distance = GeoDistanceUtils.haversin(lat, lon, docLatitude, docLongitude);\n        if (distance <= radius) {\n          expected.set(doc);\n        }\n      }\n\n      TopDocs topDocs = searcher.search(LatLonPoint.newDistanceQuery(\"field\", lat, lon, radius), reader.maxDoc(), Sort.INDEXORDER);\n      BitSet actual = new BitSet();\n      for (ScoreDoc doc : topDocs.scoreDocs) {\n        actual.set(doc.doc);\n      }\n\n      try {\n        assertEquals(expected, actual);\n      } catch (AssertionError e) {\n        for (int doc = 0; doc < reader.maxDoc(); doc++) {\n          double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n          double distance = GeoDistanceUtils.haversin(lat, lon, docLatitude, docLongitude);\n          System.out.println(\"\" + doc + \": (\" + docLatitude + \",\" + docLongitude + \"), distance=\" + distance);\n        }\n        throw e;\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    int pointsInLeaf = 2 + random().nextInt(4);\n    iwc.setCodec(new FilterCodec(\"Lucene60\", TestUtil.getDefaultCodec()) {\n      @Override\n      public PointFormat pointFormat() {\n        return new PointFormat() {\n          @Override\n          public PointWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n            return new Lucene60PointWriter(writeState, pointsInLeaf, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP);\n          }\n\n          @Override\n          public PointReader fieldsReader(SegmentReadState readState) throws IOException {\n            return new Lucene60PointReader(readState);\n          }\n        };\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int i = 0; i < numDocs; i++) {\n      double latRaw = -90 + 180.0 * random().nextDouble();\n      double lonRaw = -180 + 360.0 * random().nextDouble();\n      // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n      double lat = LatLonPoint.decodeLat(LatLonPoint.encodeLat(latRaw));\n      double lon = LatLonPoint.decodeLon(LatLonPoint.encodeLon(lonRaw));\n      Document doc = new Document();\n      doc.add(new LatLonPoint(\"field\", lat, lon));\n      doc.add(new StoredField(\"lat\", lat));\n      doc.add(new StoredField(\"lon\", lon));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n      double radius = 50000000 * random().nextDouble();\n\n      BitSet expected = new BitSet();\n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n        double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n        double distance = GeoDistanceUtils.haversin(lat, lon, docLatitude, docLongitude);\n        if (distance <= radius) {\n          expected.set(doc);\n        }\n      }\n\n      TopDocs topDocs = searcher.search(LatLonPoint.newDistanceQuery(\"field\", lat, lon, radius), reader.maxDoc(), Sort.INDEXORDER);\n      BitSet actual = new BitSet();\n      for (ScoreDoc doc : topDocs.scoreDocs) {\n        actual.set(doc.doc);\n      }\n\n      try {\n        assertEquals(expected, actual);\n      } catch (AssertionError e) {\n        for (int doc = 0; doc < reader.maxDoc(); doc++) {\n          double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n          double distance = GeoDistanceUtils.haversin(lat, lon, docLatitude, docLongitude);\n          System.out.println(\"\" + doc + \": (\" + docLatitude + \",\" + docLongitude + \"), distance=\" + distance);\n        }\n        throw e;\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceQuery#doRandomTest(int,int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#doRandomTest(int,int).mjava","sourceNew":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    int pointsInLeaf = 2 + random().nextInt(4);\n    iwc.setCodec(new FilterCodec(\"Lucene60\", TestUtil.getDefaultCodec()) {\n      @Override\n      public PointFormat pointFormat() {\n        return new PointFormat() {\n          @Override\n          public PointWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n            return new Lucene60PointWriter(writeState, pointsInLeaf, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP);\n          }\n\n          @Override\n          public PointReader fieldsReader(SegmentReadState readState) throws IOException {\n            return new Lucene60PointReader(readState);\n          }\n        };\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int i = 0; i < numDocs; i++) {\n      double latRaw = -90 + 180.0 * random().nextDouble();\n      double lonRaw = -180 + 360.0 * random().nextDouble();\n      // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n      double lat = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(latRaw));\n      double lon = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lonRaw));\n      Document doc = new Document();\n      doc.add(new LatLonPoint(\"field\", lat, lon));\n      doc.add(new StoredField(\"lat\", lat));\n      doc.add(new StoredField(\"lon\", lon));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n      double radius = 50000000 * random().nextDouble();\n\n      BitSet expected = new BitSet();\n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n        double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n        double distance = GeoDistanceUtils.haversin(lat, lon, docLatitude, docLongitude);\n        if (distance <= radius) {\n          expected.set(doc);\n        }\n      }\n\n      TopDocs topDocs = searcher.search(LatLonPoint.newDistanceQuery(\"field\", lat, lon, radius), reader.maxDoc(), Sort.INDEXORDER);\n      BitSet actual = new BitSet();\n      for (ScoreDoc doc : topDocs.scoreDocs) {\n        actual.set(doc.doc);\n      }\n\n      try {\n        assertEquals(expected, actual);\n      } catch (AssertionError e) {\n        for (int doc = 0; doc < reader.maxDoc(); doc++) {\n          double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n          double distance = GeoDistanceUtils.haversin(lat, lon, docLatitude, docLongitude);\n          System.out.println(\"\" + doc + \": (\" + docLatitude + \",\" + docLongitude + \"), distance=\" + distance);\n        }\n        throw e;\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    int pointsInLeaf = 2 + random().nextInt(4);\n    iwc.setCodec(new FilterCodec(\"Lucene60\", TestUtil.getDefaultCodec()) {\n      @Override\n      public PointFormat pointFormat() {\n        return new PointFormat() {\n          @Override\n          public PointWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n            return new Lucene60PointWriter(writeState, pointsInLeaf, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP);\n          }\n\n          @Override\n          public PointReader fieldsReader(SegmentReadState readState) throws IOException {\n            return new Lucene60PointReader(readState);\n          }\n        };\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int i = 0; i < numDocs; i++) {\n      double latRaw = -90 + 180.0 * random().nextDouble();\n      double lonRaw = -180 + 360.0 * random().nextDouble();\n      // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n      double lat = LatLonPoint.decodeLat(LatLonPoint.encodeLat(latRaw));\n      double lon = LatLonPoint.decodeLon(LatLonPoint.encodeLon(lonRaw));\n      Document doc = new Document();\n      doc.add(new LatLonPoint(\"field\", lat, lon));\n      doc.add(new StoredField(\"lat\", lat));\n      doc.add(new StoredField(\"lon\", lon));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n      double radius = 50000000 * random().nextDouble();\n\n      BitSet expected = new BitSet();\n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n        double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n        double distance = GeoDistanceUtils.haversin(lat, lon, docLatitude, docLongitude);\n        if (distance <= radius) {\n          expected.set(doc);\n        }\n      }\n\n      TopDocs topDocs = searcher.search(LatLonPoint.newDistanceQuery(\"field\", lat, lon, radius), reader.maxDoc(), Sort.INDEXORDER);\n      BitSet actual = new BitSet();\n      for (ScoreDoc doc : topDocs.scoreDocs) {\n        actual.set(doc.doc);\n      }\n\n      try {\n        assertEquals(expected, actual);\n      } catch (AssertionError e) {\n        for (int doc = 0; doc < reader.maxDoc(); doc++) {\n          double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n          double distance = GeoDistanceUtils.haversin(lat, lon, docLatitude, docLongitude);\n          System.out.println(\"\" + doc + \": (\" + docLatitude + \",\" + docLongitude + \"), distance=\" + distance);\n        }\n        throw e;\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","976a394d3766ec527a334072ea20ed791d81e330"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"94ee361295fb38310ac4d53cb4773d1622423d68":["976a394d3766ec527a334072ea20ed791d81e330"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["af2638813028b254a88b418ebeafb541afb49653","94ee361295fb38310ac4d53cb4773d1622423d68"],"976a394d3766ec527a334072ea20ed791d81e330":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","976a394d3766ec527a334072ea20ed791d81e330"],"94ee361295fb38310ac4d53cb4773d1622423d68":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"976a394d3766ec527a334072ea20ed791d81e330":["af2638813028b254a88b418ebeafb541afb49653","94ee361295fb38310ac4d53cb4773d1622423d68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}