{"path":"solr/core/src/test/org/apache/solr/search/TestSearchPerf#doListGen(int,Query,List[Query],boolean,boolean).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSearchPerf#doListGen(int,Query,List[Query],boolean,boolean).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSearchPerf#doListGen(int,Query,List[Query],boolean,boolean).mjava","sourceNew":"  int doListGen(int iter, Query q, List<Query> filt, boolean cacheQuery, boolean cacheFilt) throws Exception {\n    SolrQueryRequest req = lrf.makeRequest();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    long start = System.currentTimeMillis();\n\n    // These aren't public in SolrIndexSearcher\n    int NO_CHECK_QCACHE       = 0x80000000;\n    int GET_DOCSET            = 0x40000000;\n    int NO_CHECK_FILTERCACHE  = 0x20000000;\n    int GET_SCORES            = 0x01;\n\n    int ret = 0;\n    for (int i=0; i<iter; i++) {\n      DocList l = searcher.getDocList(q, filt, (Sort)null, 0, 10, (cacheQuery?0:NO_CHECK_QCACHE)|(cacheFilt?0:NO_CHECK_FILTERCACHE) );\n      ret += l.matches();\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"ret=\"+ret+ \" time=\"+(end-start)+\" throughput=\"+iter*1000/(end-start+1));\n\n    req.close();\n    assertTrue(ret>0);  // make sure we did some work\n    return ret;\n  }\n\n","sourceOld":"  int doListGen(int iter, Query q, List<Query> filt, boolean cacheQuery, boolean cacheFilt) throws Exception {\n    SolrQueryRequest req = lrf.makeRequest();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    long start = System.currentTimeMillis();\n\n    // These aren't public in SolrIndexSearcher\n    int NO_CHECK_QCACHE       = 0x80000000;\n    int GET_DOCSET            = 0x40000000;\n    int NO_CHECK_FILTERCACHE  = 0x20000000;\n    int GET_SCORES            = 0x01;\n\n    int ret = 0;\n    for (int i=0; i<iter; i++) {\n      DocList l = searcher.getDocList(q, filt, (Sort)null, 0, 10, (cacheQuery?0:NO_CHECK_QCACHE)|(cacheFilt?0:NO_CHECK_FILTERCACHE) );\n      ret += l.matches();\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"ret=\"+ret+ \" time=\"+(end-start)+\" throughput=\"+iter*1000/(end-start+1));\n\n    req.close();\n    assertTrue(ret>0);  // make sure we did some work\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSearchPerf#doListGen(int,Query,List[Query],boolean,boolean).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSearchPerf#doListGen(int,Query,List[Query],boolean,boolean).mjava","sourceNew":"  int doListGen(int iter, Query q, List<Query> filt, boolean cacheQuery, boolean cacheFilt) throws Exception {\n    SolrQueryRequest req = lrf.makeRequest();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    long start = System.currentTimeMillis();\n\n    // These aren't public in SolrIndexSearcher\n    int NO_CHECK_QCACHE       = 0x80000000;\n    int GET_DOCSET            = 0x40000000;\n    int NO_CHECK_FILTERCACHE  = 0x20000000;\n    int GET_SCORES            = 0x01;\n\n    int ret = 0;\n    for (int i=0; i<iter; i++) {\n      DocList l = searcher.getDocList(q, filt, (Sort)null, 0, 10, (cacheQuery?0:NO_CHECK_QCACHE)|(cacheFilt?0:NO_CHECK_FILTERCACHE) );\n      ret += l.matches();\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"ret=\"+ret+ \" time=\"+(end-start)+\" throughput=\"+iter*1000/(end-start+1));\n\n    req.close();\n    assertTrue(ret>0);  // make sure we did some work\n    return ret;\n  }\n\n","sourceOld":"  int doListGen(int iter, Query q, List<Query> filt, boolean cacheQuery, boolean cacheFilt) throws Exception {\n    SolrQueryRequest req = lrf.makeRequest();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    long start = System.currentTimeMillis();\n\n    // These aren't public in SolrIndexSearcher\n    int NO_CHECK_QCACHE       = 0x80000000;\n    int GET_DOCSET            = 0x40000000;\n    int NO_CHECK_FILTERCACHE  = 0x20000000;\n    int GET_SCORES            = 0x01;\n\n    int ret = 0;\n    for (int i=0; i<iter; i++) {\n      DocList l = searcher.getDocList(q, filt, (Sort)null, 0, 10, (cacheQuery?0:NO_CHECK_QCACHE)|(cacheFilt?0:NO_CHECK_FILTERCACHE) );\n      ret += l.matches();\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"ret=\"+ret+ \" time=\"+(end-start)+\" throughput=\"+iter*1000/(end-start+1));\n\n    req.close();\n    assertTrue(ret>0);  // make sure we did some work\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSearchPerf#doListGen(int,Query,List[Query],boolean,boolean).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSearchPerf#doListGen(int,Query,List[Query],boolean,boolean).mjava","sourceNew":"  int doListGen(int iter, Query q, List<Query> filt, boolean cacheQuery, boolean cacheFilt) throws Exception {\n    SolrQueryRequest req = lrf.makeRequest();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    long start = System.currentTimeMillis();\n\n    // These aren't public in SolrIndexSearcher\n    int NO_CHECK_QCACHE       = 0x80000000;\n    int GET_DOCSET            = 0x40000000;\n    int NO_CHECK_FILTERCACHE  = 0x20000000;\n    int GET_SCORES            = 0x01;\n\n    int ret = 0;\n    for (int i=0; i<iter; i++) {\n      DocList l = searcher.getDocList(q, filt, (Sort)null, 0, 10, (cacheQuery?0:NO_CHECK_QCACHE)|(cacheFilt?0:NO_CHECK_FILTERCACHE) );\n      ret += l.matches();\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"ret=\"+ret+ \" time=\"+(end-start)+\" throughput=\"+iter*1000/(end-start+1));\n\n    req.close();\n    assertTrue(ret>0);  // make sure we did some work\n    return ret;\n  }\n\n","sourceOld":"  int doListGen(int iter, Query q, List<Query> filt, boolean cacheQuery, boolean cacheFilt) throws Exception {\n    SolrQueryRequest req = lrf.makeRequest();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    long start = System.currentTimeMillis();\n\n    // These aren't public in SolrIndexSearcher\n    int NO_CHECK_QCACHE       = 0x80000000;\n    int GET_DOCSET            = 0x40000000;\n    int NO_CHECK_FILTERCACHE  = 0x20000000;\n    int GET_SCORES            = 0x01;\n\n    int ret = 0;\n    for (int i=0; i<iter; i++) {\n      DocList l = searcher.getDocList(q, filt, (Sort)null, 0, 10, (cacheQuery?0:NO_CHECK_QCACHE)|(cacheFilt?0:NO_CHECK_FILTERCACHE) );\n      ret += l.matches();\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"ret=\"+ret+ \" time=\"+(end-start)+\" throughput=\"+iter*1000/(end-start+1));\n\n    req.close();\n    assertTrue(ret>0);  // make sure we did some work\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSearchPerf#doListGen(int,Query,List[Query],boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSearchPerf#doListGen(int,Query,List[Query],boolean,boolean).mjava","sourceNew":"  int doListGen(int iter, Query q, List<Query> filt, boolean cacheQuery, boolean cacheFilt) throws Exception {\n    SolrQueryRequest req = lrf.makeRequest();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    long start = System.currentTimeMillis();\n\n    // These aren't public in SolrIndexSearcher\n    int NO_CHECK_QCACHE       = 0x80000000;\n    int GET_DOCSET            = 0x40000000;\n    int NO_CHECK_FILTERCACHE  = 0x20000000;\n    int GET_SCORES            = 0x01;\n\n    int ret = 0;\n    for (int i=0; i<iter; i++) {\n      DocList l = searcher.getDocList(q, filt, (Sort)null, 0, 10, (cacheQuery?0:NO_CHECK_QCACHE)|(cacheFilt?0:NO_CHECK_FILTERCACHE) );\n      ret += l.matches();\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"ret=\"+ret+ \" time=\"+(end-start)+\" throughput=\"+iter*1000/(end-start+1));\n\n    req.close();\n    assertTrue(ret>0);  // make sure we did some work\n    return ret;\n  }\n\n","sourceOld":"  int doListGen(int iter, Query q, List<Query> filt, boolean cacheQuery, boolean cacheFilt) throws Exception {\n    SolrQueryRequest req = lrf.makeRequest();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    long start = System.currentTimeMillis();\n\n    // These aren't public in SolrIndexSearcher\n    int NO_CHECK_QCACHE       = 0x80000000;\n    int GET_DOCSET            = 0x40000000;\n    int NO_CHECK_FILTERCACHE  = 0x20000000;\n    int GET_SCORES            = 0x01;\n\n    int ret = 0;\n    for (int i=0; i<iter; i++) {\n      DocList l = searcher.getDocList(q, filt, (Sort)null, 0, 10, (cacheQuery?0:NO_CHECK_QCACHE)|(cacheFilt?0:NO_CHECK_FILTERCACHE) );\n      ret += l.matches();\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"ret=\"+ret+ \" time=\"+(end-start)+\" throughput=\"+iter*1000/(end-start+1));\n\n    req.close();\n    assertTrue(ret>0);  // make sure we did some work\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSearchPerf#doListGen(int,Query,List[Query],boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSearchPerf#doListGen(int,Query,List[Query],boolean,boolean).mjava","sourceNew":"  int doListGen(int iter, Query q, List<Query> filt, boolean cacheQuery, boolean cacheFilt) throws Exception {\n    SolrQueryRequest req = lrf.makeRequest();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    long start = System.currentTimeMillis();\n\n    // These aren't public in SolrIndexSearcher\n    int NO_CHECK_QCACHE       = 0x80000000;\n    int GET_DOCSET            = 0x40000000;\n    int NO_CHECK_FILTERCACHE  = 0x20000000;\n    int GET_SCORES            = 0x01;\n\n    int ret = 0;\n    for (int i=0; i<iter; i++) {\n      DocList l = searcher.getDocList(q, filt, (Sort)null, 0, 10, (cacheQuery?0:NO_CHECK_QCACHE)|(cacheFilt?0:NO_CHECK_FILTERCACHE) );\n      ret += l.matches();\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"ret=\"+ret+ \" time=\"+(end-start)+\" throughput=\"+iter*1000/(end-start+1));\n\n    req.close();\n    assertTrue(ret>0);  // make sure we did some work\n    return ret;\n  }\n\n","sourceOld":"  int doListGen(int iter, Query q, List<Query> filt, boolean cacheQuery, boolean cacheFilt) throws Exception {\n    SolrQueryRequest req = lrf.makeRequest();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    long start = System.currentTimeMillis();\n\n    // These aren't public in SolrIndexSearcher\n    int NO_CHECK_QCACHE       = 0x80000000;\n    int GET_DOCSET            = 0x40000000;\n    int NO_CHECK_FILTERCACHE  = 0x20000000;\n    int GET_SCORES            = 0x01;\n\n    int ret = 0;\n    for (int i=0; i<iter; i++) {\n      DocList l = searcher.getDocList(q, filt, (Sort)null, 0, 10, (cacheQuery?0:NO_CHECK_QCACHE)|(cacheFilt?0:NO_CHECK_FILTERCACHE) );\n      ret += l.matches();\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"ret=\"+ret+ \" time=\"+(end-start)+\" throughput=\"+iter*1000/(end-start+1));\n\n    req.close();\n    assertTrue(ret>0);  // make sure we did some work\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSearchPerf#doListGen(int,Query,List[Query],boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSearchPerf#doListGen(int,Query,List[Query],boolean,boolean).mjava","sourceNew":"  int doListGen(int iter, Query q, List<Query> filt, boolean cacheQuery, boolean cacheFilt) throws Exception {\n    SolrQueryRequest req = lrf.makeRequest();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    final RTimer timer = new RTimer();\n\n    // These aren't public in SolrIndexSearcher\n    int NO_CHECK_QCACHE       = 0x80000000;\n    int GET_DOCSET            = 0x40000000;\n    int NO_CHECK_FILTERCACHE  = 0x20000000;\n    int GET_SCORES            = 0x01;\n\n    int ret = 0;\n    for (int i=0; i<iter; i++) {\n      DocList l = searcher.getDocList(q, filt, (Sort)null, 0, 10, (cacheQuery?0:NO_CHECK_QCACHE)|(cacheFilt?0:NO_CHECK_FILTERCACHE) );\n      ret += l.matches();\n    }\n\n    double elapsed = timer.getTime();\n    System.out.println(\"ret=\"+ret+ \" time=\"+elapsed+\" throughput=\"+iter*1000/(elapsed+1));\n\n    req.close();\n    assertTrue(ret>0);  // make sure we did some work\n    return ret;\n  }\n\n","sourceOld":"  int doListGen(int iter, Query q, List<Query> filt, boolean cacheQuery, boolean cacheFilt) throws Exception {\n    SolrQueryRequest req = lrf.makeRequest();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    long start = System.currentTimeMillis();\n\n    // These aren't public in SolrIndexSearcher\n    int NO_CHECK_QCACHE       = 0x80000000;\n    int GET_DOCSET            = 0x40000000;\n    int NO_CHECK_FILTERCACHE  = 0x20000000;\n    int GET_SCORES            = 0x01;\n\n    int ret = 0;\n    for (int i=0; i<iter; i++) {\n      DocList l = searcher.getDocList(q, filt, (Sort)null, 0, 10, (cacheQuery?0:NO_CHECK_QCACHE)|(cacheFilt?0:NO_CHECK_FILTERCACHE) );\n      ret += l.matches();\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"ret=\"+ret+ \" time=\"+(end-start)+\" throughput=\"+iter*1000/(end-start+1));\n\n    req.close();\n    assertTrue(ret>0);  // make sure we did some work\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9d9876b7a6935b8c6fca9e67f5548c455692a12","date":1451915408,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSearchPerf#doListGen(int,Query,List[Query],boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSearchPerf#doListGen(int,Query,List[Query],boolean,boolean).mjava","sourceNew":"  int doListGen(int iter, Query q, List<Query> filt, boolean cacheQuery, boolean cacheFilt) throws Exception {\n    SolrQueryRequest req = lrf.makeRequest();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    final RTimer timer = new RTimer();\n\n    int ret = 0;\n    for (int i=0; i<iter; i++) {\n      DocList l = searcher.getDocList(q, filt, (Sort)null, 0, 10, (cacheQuery?0:SolrIndexSearcher.NO_CHECK_QCACHE)|(cacheFilt?0:SolrIndexSearcher.NO_CHECK_FILTERCACHE) );\n      ret += l.matches();\n    }\n\n    double elapsed = timer.getTime();\n    System.out.println(\"ret=\"+ret+ \" time=\"+elapsed+\" throughput=\"+iter*1000/(elapsed+1));\n\n    req.close();\n    assertTrue(ret>0);  // make sure we did some work\n    return ret;\n  }\n\n","sourceOld":"  int doListGen(int iter, Query q, List<Query> filt, boolean cacheQuery, boolean cacheFilt) throws Exception {\n    SolrQueryRequest req = lrf.makeRequest();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    final RTimer timer = new RTimer();\n\n    // These aren't public in SolrIndexSearcher\n    int NO_CHECK_QCACHE       = 0x80000000;\n    int GET_DOCSET            = 0x40000000;\n    int NO_CHECK_FILTERCACHE  = 0x20000000;\n    int GET_SCORES            = 0x01;\n\n    int ret = 0;\n    for (int i=0; i<iter; i++) {\n      DocList l = searcher.getDocList(q, filt, (Sort)null, 0, 10, (cacheQuery?0:NO_CHECK_QCACHE)|(cacheFilt?0:NO_CHECK_FILTERCACHE) );\n      ret += l.matches();\n    }\n\n    double elapsed = timer.getTime();\n    System.out.println(\"ret=\"+ret+ \" time=\"+elapsed+\" throughput=\"+iter*1000/(elapsed+1));\n\n    req.close();\n    assertTrue(ret>0);  // make sure we did some work\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b9d9876b7a6935b8c6fca9e67f5548c455692a12":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b9d9876b7a6935b8c6fca9e67f5548c455692a12"]},"commit2Childs":{"b9d9876b7a6935b8c6fca9e67f5548c455692a12":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["b9d9876b7a6935b8c6fca9e67f5548c455692a12"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","bcf9886c8ff537aafde14de48ebf744f5673f08b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}