{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer#testMultiAnalyzerWithSubclassOfQueryParser().mjava","commits":[{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer#testMultiAnalyzerWithSubclassOfQueryParser().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiAnalyzer#testMultiAnalyzerWithSubclassOfQueryParser().mjava","sourceNew":"  public void testMultiAnalyzerWithSubclassOfQueryParser() throws ParseException {\n\n    DumbQueryParser qp = new DumbQueryParser(\"\", new MultiAnalyzer());\n    qp.setPhraseSlop(99); // modified default slop\n\n    // direct call to (super's) getFieldQuery to demonstrate differnce\n    // between phrase and multiphrase with modified default slop\n    assertEquals(\"\\\"foo bar\\\"~99\",\n                 qp.getSuperFieldQuery(\"\",\"foo bar\", true).toString());\n    assertEquals(\"\\\"(multi multi2) bar\\\"~99\",\n                 qp.getSuperFieldQuery(\"\",\"multi bar\", true).toString());\n\n    \n    // ask sublcass to parse phrase with modified default slop\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n    \n  }\n\n","sourceOld":"  public void testMultiAnalyzerWithSubclassOfQueryParser() throws ParseException {\n\n    DumbQueryParser qp = new DumbQueryParser(\"\", new MultiAnalyzer());\n    qp.setPhraseSlop(99); // modified default slop\n\n    // direct call to (super's) getFieldQuery to demonstrate differnce\n    // between phrase and multiphrase with modified default slop\n    assertEquals(\"\\\"foo bar\\\"~99\",\n                 qp.getSuperFieldQuery(\"\",\"foo bar\", true).toString());\n    assertEquals(\"\\\"(multi multi2) bar\\\"~99\",\n                 qp.getSuperFieldQuery(\"\",\"multi bar\", true).toString());\n\n    \n    // ask sublcass to parse phrase with modified default slop\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer#testMultiAnalyzerWithSubclassOfQueryParser().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiAnalyzer#testMultiAnalyzerWithSubclassOfQueryParser().mjava","sourceNew":"  public void testMultiAnalyzerWithSubclassOfQueryParser() throws ParseException {\n\n    DumbQueryParser qp = new DumbQueryParser(\"\", new MultiAnalyzer());\n    qp.setPhraseSlop(99); // modified default slop\n\n    // direct call to (super's) getFieldQuery to demonstrate differnce\n    // between phrase and multiphrase with modified default slop\n    assertEquals(\"\\\"foo bar\\\"~99\",\n                 qp.getSuperFieldQuery(\"\",\"foo bar\", true).toString());\n    assertEquals(\"\\\"(multi multi2) bar\\\"~99\",\n                 qp.getSuperFieldQuery(\"\",\"multi bar\", true).toString());\n\n    \n    // ask sublcass to parse phrase with modified default slop\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n    \n  }\n\n","sourceOld":"  public void testMultiAnalyzerWithSubclassOfQueryParser() throws ParseException {\n\n    DumbQueryParser qp = new DumbQueryParser(\"\", new MultiAnalyzer());\n    qp.setPhraseSlop(99); // modified default slop\n\n    // direct call to (super's) getFieldQuery to demonstrate differnce\n    // between phrase and multiphrase with modified default slop\n    assertEquals(\"\\\"foo bar\\\"~99\",\n                 qp.getSuperFieldQuery(\"\",\"foo bar\", true).toString());\n    assertEquals(\"\\\"(multi multi2) bar\\\"~99\",\n                 qp.getSuperFieldQuery(\"\",\"multi bar\", true).toString());\n\n    \n    // ask sublcass to parse phrase with modified default slop\n    assertEquals(\"\\\"(multi multi2) foo\\\"~99 bar\",\n                 qp.parse(\"\\\"multi foo\\\" bar\").toString());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}