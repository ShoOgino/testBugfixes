{"path":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","pathOld":"src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","sourceNew":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getDoubles(readerA, \"theDouble\");\n    cache.getDoubles(readerA, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER);\n    cache.getDoubles(readerB, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER);\n\n    cache.getInts(readerX, \"theInt\");\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestLabel() + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getDoubles(readerA, \"theDouble\");\n    cache.getDoubles(readerA, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER);\n    cache.getDoubles(readerB, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER);\n\n    cache.getInts(readerX, \"theInt\");\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestLabel() + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","sourceNew":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getDoubles(readerA, \"theDouble\", false);\n    cache.getDoubles(readerA, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n    cache.getDoubles(readerB, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n\n    cache.getInts(readerX, \"theInt\", false);\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestLabel() + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getDoubles(readerA, \"theDouble\");\n    cache.getDoubles(readerA, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER);\n    cache.getDoubles(readerB, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER);\n\n    cache.getInts(readerX, \"theInt\");\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestLabel() + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dd6ecb8250c497ed227653279d6a4f470bfbb31","date":1326814483,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","sourceNew":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getDoubles(new SlowMultiReaderWrapper(readerA), \"theDouble\", false);\n    cache.getDoubles(new SlowMultiReaderWrapper(readerA), \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n    cache.getDoubles(new SlowMultiReaderWrapper(readerB), \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n\n    cache.getInts(new SlowMultiReaderWrapper(readerX), \"theInt\", false);\n    cache.getInts(new SlowMultiReaderWrapper(readerX), \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestLabel() + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getDoubles(readerA, \"theDouble\", false);\n    cache.getDoubles(readerA, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n    cache.getDoubles(readerB, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n\n    cache.getInts(readerX, \"theInt\", false);\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestLabel() + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"386d1b0dcb065f1bfc494b1407cb41c536b95485","date":1327848512,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","sourceNew":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getDoubles(SlowCompositeReaderWrapper.wrap(readerA), \"theDouble\", false);\n    cache.getDoubles(SlowCompositeReaderWrapper.wrap(readerA), \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n    cache.getDoubles(SlowCompositeReaderWrapper.wrap(readerB), \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n\n    cache.getInts(SlowCompositeReaderWrapper.wrap(readerX), \"theInt\", false);\n    cache.getInts(SlowCompositeReaderWrapper.wrap(readerX), \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestLabel() + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getDoubles(new SlowMultiReaderWrapper(readerA), \"theDouble\", false);\n    cache.getDoubles(new SlowMultiReaderWrapper(readerA), \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n    cache.getDoubles(new SlowMultiReaderWrapper(readerB), \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n\n    cache.getInts(new SlowMultiReaderWrapper(readerX), \"theInt\", false);\n    cache.getInts(new SlowMultiReaderWrapper(readerX), \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestLabel() + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abf0f6e62f1b52e3c166ff00d766463e0da8ef96","date":1327865982,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","sourceNew":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getDoubles(readerA, \"theDouble\", false);\n    cache.getDoubles(readerA, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n    cache.getDoubles(readerB, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n\n    cache.getInts(readerX, \"theInt\", false);\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestLabel() + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getDoubles(SlowCompositeReaderWrapper.wrap(readerA), \"theDouble\", false);\n    cache.getDoubles(SlowCompositeReaderWrapper.wrap(readerA), \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n    cache.getDoubles(SlowCompositeReaderWrapper.wrap(readerB), \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n\n    cache.getInts(SlowCompositeReaderWrapper.wrap(readerX), \"theInt\", false);\n    cache.getInts(SlowCompositeReaderWrapper.wrap(readerX), \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestLabel() + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55153442ba124ec8bfc6ced0be967e411947ec3b","date":1327867200,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","sourceNew":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getDoubles(readerA, \"theDouble\", false);\n    cache.getDoubles(readerA, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n    cache.getDoubles(readerAclone, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n    cache.getDoubles(readerB, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n\n    cache.getInts(readerX, \"theInt\", false);\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestLabel() + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getDoubles(readerA, \"theDouble\", false);\n    cache.getDoubles(readerA, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n    cache.getDoubles(readerB, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n\n    cache.getInts(readerX, \"theInt\", false);\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestLabel() + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","sourceNew":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getDoubles(readerA, \"theDouble\", false);\n    cache.getDoubles(readerA, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n    cache.getDoubles(readerAclone, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n    cache.getDoubles(readerB, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n\n    cache.getInts(readerX, \"theInt\", false);\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestLabel() + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getDoubles(new SlowMultiReaderWrapper(readerA), \"theDouble\", false);\n    cache.getDoubles(new SlowMultiReaderWrapper(readerA), \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n    cache.getDoubles(new SlowMultiReaderWrapper(readerB), \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n\n    cache.getInts(new SlowMultiReaderWrapper(readerX), \"theInt\", false);\n    cache.getInts(new SlowMultiReaderWrapper(readerX), \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestLabel() + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","sourceNew":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getDoubles(readerA, \"theDouble\", false);\n    cache.getDoubles(readerA, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n    cache.getDoubles(readerAclone, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n    cache.getDoubles(readerB, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n\n    cache.getInts(readerX, \"theInt\", false);\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestLabel() + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getDoubles(readerA, \"theDouble\", false);\n    cache.getDoubles(readerA, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n    cache.getDoubles(readerAclone, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n    cache.getDoubles(readerB, \"theDouble\", FieldCache.DEFAULT_DOUBLE_PARSER, false);\n\n    cache.getInts(readerX, \"theInt\", false);\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestLabel() + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"abf0f6e62f1b52e3c166ff00d766463e0da8ef96":["386d1b0dcb065f1bfc494b1407cb41c536b95485"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"386d1b0dcb065f1bfc494b1407cb41c536b95485":["2dd6ecb8250c497ed227653279d6a4f470bfbb31"],"382fe3a6ca9745891afebda9b9a57cc158305545":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"55153442ba124ec8bfc6ced0be967e411947ec3b":["abf0f6e62f1b52e3c166ff00d766463e0da8ef96"],"2dd6ecb8250c497ed227653279d6a4f470bfbb31":["382fe3a6ca9745891afebda9b9a57cc158305545"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["2dd6ecb8250c497ed227653279d6a4f470bfbb31","55153442ba124ec8bfc6ced0be967e411947ec3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"abf0f6e62f1b52e3c166ff00d766463e0da8ef96":["55153442ba124ec8bfc6ced0be967e411947ec3b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"386d1b0dcb065f1bfc494b1407cb41c536b95485":["abf0f6e62f1b52e3c166ff00d766463e0da8ef96"],"382fe3a6ca9745891afebda9b9a57cc158305545":["2dd6ecb8250c497ed227653279d6a4f470bfbb31"],"55153442ba124ec8bfc6ced0be967e411947ec3b":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2dd6ecb8250c497ed227653279d6a4f470bfbb31":["386d1b0dcb065f1bfc494b1407cb41c536b95485","5cab9a86bd67202d20b6adc463008c8e982b070a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["382fe3a6ca9745891afebda9b9a57cc158305545"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}