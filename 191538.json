{"path":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/storage/db4o/TestDb4oStorage#testDeleteEntry().mjava","commits":[{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/storage/db4o/TestDb4oStorage#testDeleteEntry().mjava","pathOld":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/db4o/TestDb4oStorage#testDeleteEntry().mjava","sourceNew":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.deleteEntry(ServerBaseEntry)'\n     */\n    public void testDeleteEntry() throws StorageException, InterruptedException {\n        ObjectContainer container = getContainer();\n        storeServerBaseFeed();\n        Storage storage = this.controller.getStorage();\n        \n        try {\n\n            storage.deleteEntry(null);\n            fail(\"entry is null\");\n        } catch (StorageException e) {\n            //\n        }\n        ServerBaseEntry exEntry = new ServerBaseEntry();\n        exEntry.setFeedId(\"some\");\n        try {\n\n            storage.deleteEntry(exEntry);\n            fail(\"entry id is null\");\n        } catch (StorageException e) {\n            //\n        }\n        exEntry.setId(\"someID\");\n        exEntry.setFeedId(null);\n        try {\n\n            storage.storeEntry(exEntry);\n            fail(\"feed id is null\");\n        } catch (StorageException e) {\n            //\n        }\n        \n        \n        ServerBaseEntry e = createServerBaseEntry();\n        storage.storeEntry(e);\n        ServerBaseEntry e1 = createServerBaseEntry();\n        storage.storeEntry(e1);\n\n        storage.deleteEntry(e);\n\n        container.close();\n        container = getContainer();\n        Query query = container.query();\n        query.constrain(BaseEntry.class);\n        query.descend(\"id\").constrain(e.getId());\n        ObjectSet resultSet = query.execute();\n        assertEquals(0, resultSet.size());\n\n        // #### test version matching\n        ServerBaseEntry eVersion = createServerBaseEntry();\n        storage.storeEntry(eVersion);\n        eVersion.setVersion(33);\n        try {\n            storage.deleteEntry(eVersion);\n            fail(\"version does not match\");\n        } catch (Exception ex) {\n            // TODO: handle exception\n        }\n        try {\n            storage.deleteEntry(null);\n            fail(\"entry id is null\");\n        } catch (Exception ex) {\n            // TODO: handle exception\n        }\n        storage = this.controller.getStorage();\n        storage.deleteEntry(e1);\n        container.close();\n        container = getContainer();\n        query = container.query();\n        query.constrain(BaseEntry.class);\n        query.descend(\"id\").constrain(e1.getId());\n        resultSet = query.execute();\n        assertEquals(0, resultSet.size());\n\n        // ############ test concurrency\n\n        // ############ test concurrency\n        Object monitor = new Object();\n        AtomicBoolean reached = new AtomicBoolean(false);\n        MultiThreadEntryStub concuEntry = new MultiThreadEntryStub();\n        concuEntry.setId(System.currentTimeMillis() + \"\");\n        ProvidedServiceConfig conf = new ProvidedServiceConfig();\n        conf.setName(SERVICENAME);\n        concuEntry.setServiceConfig(conf);\n        concuEntry.setUpdated(DateTime.now());\n        concuEntry.setFeedId(FEEDID);\n\n        storage = this.controller.getStorage();\n\n        storage.storeEntry(concuEntry);\n        storage.close();\n        concuEntry.acceptGetVersionVisitor(getMonitorVisitor(monitor, reached));\n\n        Thread t1 = getDelThread(controller, concuEntry, false);\n\n        Thread t2 = getDelThread(controller, concuEntry, true);\n        t1.start();\n        /*\n         * Wait active -- not nice but works fine here wait until thread parked\n         */\n\n        while (true) {\n            synchronized (monitor) {\n                if (reached.get())\n                    break;\n                monitor.wait(10);\n            }\n        }\n        t2.start();\n        t2.join(800);\n        /*\n         * Wait active -- not nice but works fine here wake up the waiting\n         * thread\n         */\n        while (true) {\n            synchronized (monitor) {\n                if (!reached.get())\n                    break;\n                monitor.notifyAll();\n            }\n        }\n        t1.join(300);\n        if (fail)\n            fail(\"thread failed -- see stacktrace\");\n\n        container.close();\n\n    }\n\n","sourceOld":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.deleteEntry(ServerBaseEntry)'\n     */\n    public void testDeleteEntry() throws StorageException, InterruptedException {\n        ObjectContainer container = getContainer();\n        storeServerBaseFeed();\n        Storage storage = this.controller.getStorage();\n        \n        try {\n\n            storage.deleteEntry(null);\n            fail(\"entry is null\");\n        } catch (StorageException e) {\n            //\n        }\n        ServerBaseEntry exEntry = new ServerBaseEntry();\n        exEntry.setFeedId(\"some\");\n        try {\n\n            storage.deleteEntry(exEntry);\n            fail(\"entry id is null\");\n        } catch (StorageException e) {\n            //\n        }\n        exEntry.setId(\"someID\");\n        exEntry.setFeedId(null);\n        try {\n\n            storage.storeEntry(exEntry);\n            fail(\"feed id is null\");\n        } catch (StorageException e) {\n            //\n        }\n        \n        \n        ServerBaseEntry e = createServerBaseEntry();\n        storage.storeEntry(e);\n        ServerBaseEntry e1 = createServerBaseEntry();\n        storage.storeEntry(e1);\n\n        storage.deleteEntry(e);\n\n        container.close();\n        container = getContainer();\n        Query query = container.query();\n        query.constrain(BaseEntry.class);\n        query.descend(\"id\").constrain(e.getId());\n        ObjectSet resultSet = query.execute();\n        assertEquals(0, resultSet.size());\n\n        // #### test version matching\n        ServerBaseEntry eVersion = createServerBaseEntry();\n        storage.storeEntry(eVersion);\n        eVersion.setVersion(33);\n        try {\n            storage.deleteEntry(eVersion);\n            fail(\"version does not match\");\n        } catch (Exception ex) {\n            // TODO: handle exception\n        }\n        try {\n            storage.deleteEntry(null);\n            fail(\"entry id is null\");\n        } catch (Exception ex) {\n            // TODO: handle exception\n        }\n        storage = this.controller.getStorage();\n        storage.deleteEntry(e1);\n        container.close();\n        container = getContainer();\n        query = container.query();\n        query.constrain(BaseEntry.class);\n        query.descend(\"id\").constrain(e1.getId());\n        resultSet = query.execute();\n        assertEquals(0, resultSet.size());\n\n        // ############ test concurrency\n\n        // ############ test concurrency\n        Object monitor = new Object();\n        AtomicBoolean reached = new AtomicBoolean(false);\n        MultiThreadEntryStub concuEntry = new MultiThreadEntryStub();\n        concuEntry.setId(System.currentTimeMillis() + \"\");\n        ProvidedServiceConfig conf = new ProvidedServiceConfig();\n        conf.setName(SERVICENAME);\n        concuEntry.setServiceConfig(conf);\n        concuEntry.setUpdated(DateTime.now());\n        concuEntry.setFeedId(FEEDID);\n\n        storage = this.controller.getStorage();\n\n        storage.storeEntry(concuEntry);\n        storage.close();\n        concuEntry.acceptGetVersionVisitor(getMonitorVisitor(monitor, reached));\n\n        Thread t1 = getDelThread(controller, concuEntry, false);\n\n        Thread t2 = getDelThread(controller, concuEntry, true);\n        t1.start();\n        /*\n         * Wait active -- not nice but works fine here wait until thread parked\n         */\n\n        while (true) {\n            synchronized (monitor) {\n                if (reached.get())\n                    break;\n                monitor.wait(10);\n            }\n        }\n        t2.start();\n        t2.join(800);\n        /*\n         * Wait active -- not nice but works fine here wake up the waiting\n         * thread\n         */\n        while (true) {\n            synchronized (monitor) {\n                if (!reached.get())\n                    break;\n                monitor.notifyAll();\n            }\n        }\n        t1.join(300);\n        if (fail)\n            fail(\"thread failed -- see stacktrace\");\n\n        container.close();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe","date":1195519587,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/storage/db4o/TestDb4oStorage#testDeleteEntry().mjava","sourceNew":null,"sourceOld":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.deleteEntry(ServerBaseEntry)'\n     */\n    public void testDeleteEntry() throws StorageException, InterruptedException {\n        ObjectContainer container = getContainer();\n        storeServerBaseFeed();\n        Storage storage = this.controller.getStorage();\n        \n        try {\n\n            storage.deleteEntry(null);\n            fail(\"entry is null\");\n        } catch (StorageException e) {\n            //\n        }\n        ServerBaseEntry exEntry = new ServerBaseEntry();\n        exEntry.setFeedId(\"some\");\n        try {\n\n            storage.deleteEntry(exEntry);\n            fail(\"entry id is null\");\n        } catch (StorageException e) {\n            //\n        }\n        exEntry.setId(\"someID\");\n        exEntry.setFeedId(null);\n        try {\n\n            storage.storeEntry(exEntry);\n            fail(\"feed id is null\");\n        } catch (StorageException e) {\n            //\n        }\n        \n        \n        ServerBaseEntry e = createServerBaseEntry();\n        storage.storeEntry(e);\n        ServerBaseEntry e1 = createServerBaseEntry();\n        storage.storeEntry(e1);\n\n        storage.deleteEntry(e);\n\n        container.close();\n        container = getContainer();\n        Query query = container.query();\n        query.constrain(BaseEntry.class);\n        query.descend(\"id\").constrain(e.getId());\n        ObjectSet resultSet = query.execute();\n        assertEquals(0, resultSet.size());\n\n        // #### test version matching\n        ServerBaseEntry eVersion = createServerBaseEntry();\n        storage.storeEntry(eVersion);\n        eVersion.setVersion(33);\n        try {\n            storage.deleteEntry(eVersion);\n            fail(\"version does not match\");\n        } catch (Exception ex) {\n            // TODO: handle exception\n        }\n        try {\n            storage.deleteEntry(null);\n            fail(\"entry id is null\");\n        } catch (Exception ex) {\n            // TODO: handle exception\n        }\n        storage = this.controller.getStorage();\n        storage.deleteEntry(e1);\n        container.close();\n        container = getContainer();\n        query = container.query();\n        query.constrain(BaseEntry.class);\n        query.descend(\"id\").constrain(e1.getId());\n        resultSet = query.execute();\n        assertEquals(0, resultSet.size());\n\n        // ############ test concurrency\n\n        // ############ test concurrency\n        Object monitor = new Object();\n        AtomicBoolean reached = new AtomicBoolean(false);\n        MultiThreadEntryStub concuEntry = new MultiThreadEntryStub();\n        concuEntry.setId(System.currentTimeMillis() + \"\");\n        ProvidedServiceConfig conf = new ProvidedServiceConfig();\n        conf.setName(SERVICENAME);\n        concuEntry.setServiceConfig(conf);\n        concuEntry.setUpdated(DateTime.now());\n        concuEntry.setFeedId(FEEDID);\n\n        storage = this.controller.getStorage();\n\n        storage.storeEntry(concuEntry);\n        storage.close();\n        concuEntry.acceptGetVersionVisitor(getMonitorVisitor(monitor, reached));\n\n        Thread t1 = getDelThread(controller, concuEntry, false);\n\n        Thread t2 = getDelThread(controller, concuEntry, true);\n        t1.start();\n        /*\n         * Wait active -- not nice but works fine here wait until thread parked\n         */\n\n        while (true) {\n            synchronized (monitor) {\n                if (reached.get())\n                    break;\n                monitor.wait(10);\n            }\n        }\n        t2.start();\n        t2.join(800);\n        /*\n         * Wait active -- not nice but works fine here wake up the waiting\n         * thread\n         */\n        while (true) {\n            synchronized (monitor) {\n                if (!reached.get())\n                    break;\n                monitor.notifyAll();\n            }\n        }\n        t1.join(300);\n        if (fail)\n            fail(\"thread failed -- see stacktrace\");\n\n        container.close();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}