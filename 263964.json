{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategory(FacetLabel).mjava","commits":[{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategory(FacetLabel).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategory(CategoryPath).mjava","sourceNew":"  @Override\n  public int addCategory(FacetLabel categoryPath) throws IOException {\n    ensureOpen();\n    // check the cache outside the synchronized block. this results in better\n    // concurrency when categories are there.\n    int res = cache.get(categoryPath);\n    if (res < 0) {\n      // the category is not in the cache - following code cannot be executed in parallel.\n      synchronized (this) {\n        res = findCategory(categoryPath);\n        if (res < 0) {\n          // This is a new category, and we need to insert it into the index\n          // (and the cache). Actually, we might also need to add some of\n          // the category's ancestors before we can add the category itself\n          // (while keeping the invariant that a parent is always added to\n          // the taxonomy before its child). internalAddCategory() does all\n          // this recursively\n          res = internalAddCategory(categoryPath);\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int addCategory(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    // check the cache outside the synchronized block. this results in better\n    // concurrency when categories are there.\n    int res = cache.get(categoryPath);\n    if (res < 0) {\n      // the category is not in the cache - following code cannot be executed in parallel.\n      synchronized (this) {\n        res = findCategory(categoryPath);\n        if (res < 0) {\n          // This is a new category, and we need to insert it into the index\n          // (and the cache). Actually, we might also need to add some of\n          // the category's ancestors before we can add the category itself\n          // (while keeping the invariant that a parent is always added to\n          // the taxonomy before its child). internalAddCategory() does all\n          // this recursively\n          res = internalAddCategory(categoryPath);\n        }\n      }\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategory(FacetLabel).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int addCategory(FacetLabel categoryPath) throws IOException {\n    ensureOpen();\n    // check the cache outside the synchronized block. this results in better\n    // concurrency when categories are there.\n    int res = cache.get(categoryPath);\n    if (res < 0) {\n      // the category is not in the cache - following code cannot be executed in parallel.\n      synchronized (this) {\n        res = findCategory(categoryPath);\n        if (res < 0) {\n          // This is a new category, and we need to insert it into the index\n          // (and the cache). Actually, we might also need to add some of\n          // the category's ancestors before we can add the category itself\n          // (while keeping the invariant that a parent is always added to\n          // the taxonomy before its child). internalAddCategory() does all\n          // this recursively\n          res = internalAddCategory(categoryPath);\n        }\n      }\n    }\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}