{"path":"solr/core/src/java/org/apache/solr/uninverting/DocTermOrds#writeInt(int,byte[],int).mjava","commits":[{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/DocTermOrds#writeInt(int,byte[],int).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds#writeInt(int,byte[],int).mjava","sourceNew":"  // todo: if we know the size of the vInt already, we could do\n  // a single switch on the size\n  private static int writeInt(int x, byte[] arr, int pos) {\n    int a;\n    a = (x >>> (7*4));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*3));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*2));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*1));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    arr[pos++] = (byte)(x & 0x7f);\n    return pos;\n  }\n\n","sourceOld":"  // todo: if we know the size of the vInt already, we could do\n  // a single switch on the size\n  private static int writeInt(int x, byte[] arr, int pos) {\n    int a;\n    a = (x >>> (7*4));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*3));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*2));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*1));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    arr[pos++] = (byte)(x & 0x7f);\n    return pos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/DocTermOrds#writeInt(int,byte[],int).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds#writeInt(int,byte[],int).mjava","sourceNew":"  // todo: if we know the size of the vInt already, we could do\n  // a single switch on the size\n  private static int writeInt(int x, byte[] arr, int pos) {\n    int a;\n    a = (x >>> (7*4));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*3));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*2));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*1));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    arr[pos++] = (byte)(x & 0x7f);\n    return pos;\n  }\n\n","sourceOld":"  // todo: if we know the size of the vInt already, we could do\n  // a single switch on the size\n  private static int writeInt(int x, byte[] arr, int pos) {\n    int a;\n    a = (x >>> (7*4));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*3));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*2));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*1));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    arr[pos++] = (byte)(x & 0x7f);\n    return pos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/DocTermOrds#writeInt(int,byte[],int).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds#writeInt(int,byte[],int).mjava","sourceNew":"  // todo: if we know the size of the vInt already, we could do\n  // a single switch on the size\n  private static int writeInt(int x, byte[] arr, int pos) {\n    int a;\n    a = (x >>> (7*4));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*3));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*2));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*1));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    arr[pos++] = (byte)(x & 0x7f);\n    return pos;\n  }\n\n","sourceOld":"  // todo: if we know the size of the vInt already, we could do\n  // a single switch on the size\n  private static int writeInt(int x, byte[] arr, int pos) {\n    int a;\n    a = (x >>> (7*4));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*3));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*2));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*1));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    arr[pos++] = (byte)(x & 0x7f);\n    return pos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/DocTermOrds#writeInt(int,byte[],int).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds#writeInt(int,byte[],int).mjava","sourceNew":"  // todo: if we know the size of the vInt already, we could do\n  // a single switch on the size\n  private static int writeInt(int x, byte[] arr, int pos) {\n    int a;\n    a = (x >>> (7*4));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*3));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*2));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*1));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    arr[pos++] = (byte)(x & 0x7f);\n    return pos;\n  }\n\n","sourceOld":"  // todo: if we know the size of the vInt already, we could do\n  // a single switch on the size\n  private static int writeInt(int x, byte[] arr, int pos) {\n    int a;\n    a = (x >>> (7*4));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*3));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*2));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*1));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    arr[pos++] = (byte)(x & 0x7f);\n    return pos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac981db60ef979233b3438ec49ddae82e8cc4697","date":1503407558,"type":3,"author":"Toke Eskildsen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/DocTermOrds#writeInt(int,byte[],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/DocTermOrds#writeInt(int,byte[],int).mjava","sourceNew":"  /**\n   * Write the x value as vInt at pos in arr, returning the new endPos. This requires arr to be capable of holding the\n   * bytes needed to represent x. Array length checking should be performed beforehand.\n   * @param x   the value to write as vInt.\n   * @param arr the array holding vInt-values.\n   * @param pos the position in arr where the vInt representation of x should be written.\n   * @return the new end position after writing x at pos.\n   */\n  private static int writeInt(int x, byte[] arr, int pos) {\n    int a;\n    a = (x >>> (7*4));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*3));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*2));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*1));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    arr[pos++] = (byte)(x & 0x7f);\n    return pos;\n  }\n\n","sourceOld":"  // todo: if we know the size of the vInt already, we could do\n  // a single switch on the size\n  private static int writeInt(int x, byte[] arr, int pos) {\n    int a;\n    a = (x >>> (7*4));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*3));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*2));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*1));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    arr[pos++] = (byte)(x & 0x7f);\n    return pos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/DocTermOrds#writeInt(int,byte[],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/DocTermOrds#writeInt(int,byte[],int).mjava","sourceNew":"  /**\n   * Write the x value as vInt at pos in arr, returning the new endPos. This requires arr to be capable of holding the\n   * bytes needed to represent x. Array length checking should be performed beforehand.\n   * @param x   the value to write as vInt.\n   * @param arr the array holding vInt-values.\n   * @param pos the position in arr where the vInt representation of x should be written.\n   * @return the new end position after writing x at pos.\n   */\n  private static int writeInt(int x, byte[] arr, int pos) {\n    int a;\n    a = (x >>> (7*4));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*3));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*2));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*1));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    arr[pos++] = (byte)(x & 0x7f);\n    return pos;\n  }\n\n","sourceOld":"  // todo: if we know the size of the vInt already, we could do\n  // a single switch on the size\n  private static int writeInt(int x, byte[] arr, int pos) {\n    int a;\n    a = (x >>> (7*4));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*3));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*2));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    a = (x >>> (7*1));\n    if (a != 0) {\n      arr[pos++] = (byte)(a | 0x80);\n    }\n    arr[pos++] = (byte)(x & 0x7f);\n    return pos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["0e121d43b5a10f2df530f406f935102656e9c4e8","ac981db60ef979233b3438ec49ddae82e8cc4697"],"ac981db60ef979233b3438ec49ddae82e8cc4697":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac981db60ef979233b3438ec49ddae82e8cc4697"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","ac981db60ef979233b3438ec49ddae82e8cc4697","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"ac981db60ef979233b3438ec49ddae82e8cc4697":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}