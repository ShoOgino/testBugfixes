{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMatrixMult().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMatrixMult().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMatrixMult().mjava","sourceNew":"  @Test\n  public void testMatrixMult() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(1,2,3),\" +\n        \"               b=matrix(array(4), array(5), array(6)),\" +\n        \"               c=matrixMult(a, b),\" +\n        \"               d=matrix(array(3, 4), array(10,11), array(30, 40)),\" +\n        \"               e=matrixMult(a, d),\" +\n        \"               f=array(4,8,10),\" +\n        \"               g=matrix(a, f),\" +\n        \"               h=matrixMult(d, g),\" +\n        \"               i=matrixMult(b, a))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> matrix = (List<List<Number>>)tuples.get(0).get(\"c\");\n    assertEquals(matrix.size(), 1);\n    List<Number> row = matrix.get(0);\n    assertEquals(row.size(), 1);\n    assertEquals(row.get(0).doubleValue(), 32.0, 0.0);\n\n    matrix = (List<List<Number>>)tuples.get(0).get(\"e\");\n    assertEquals(matrix.size(), 1);\n    row = matrix.get(0);\n    assertEquals(row.size(), 2);\n    assertEquals(row.get(0).doubleValue(), 113.0, 0.0);\n    assertEquals(row.get(1).doubleValue(), 146.0, 0.0);\n\n    matrix = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(matrix.size(), 3);\n    row = matrix.get(0);\n    assertEquals(row.size(), 3);\n    assertEquals(row.get(0).doubleValue(), 19.0, 0.0);\n    assertEquals(row.get(1).doubleValue(), 38.0, 0.0);\n    assertEquals(row.get(2).doubleValue(), 49.0, 0.0);\n\n    row = matrix.get(1);\n    assertEquals(row.size(), 3);\n    assertEquals(row.get(0).doubleValue(), 54.0, 0.0);\n    assertEquals(row.get(1).doubleValue(), 108.0, 0.0);\n    assertEquals(row.get(2).doubleValue(), 140.0, 0.0);\n\n    row = matrix.get(2);\n    assertEquals(row.size(), 3);\n    assertEquals(row.get(0).doubleValue(), 190.0, 0.0);\n    assertEquals(row.get(1).doubleValue(), 380.0, 0.0);\n    assertEquals(row.get(2).doubleValue(), 490.0, 0.0);\n\n    matrix = (List<List<Number>>)tuples.get(0).get(\"i\");\n\n    assertEquals(matrix.size(), 3);\n    row = matrix.get(0);\n    assertEquals(row.size(), 3);\n    assertEquals(row.get(0).doubleValue(), 4.0, 0.0);\n    assertEquals(row.get(1).doubleValue(), 8.0, 0.0);\n    assertEquals(row.get(2).doubleValue(), 12.0, 0.0);\n\n    row = matrix.get(1);\n    assertEquals(row.size(), 3);\n    assertEquals(row.get(0).doubleValue(), 5.0, 0.0);\n    assertEquals(row.get(1).doubleValue(), 10.0, 0.0);\n    assertEquals(row.get(2).doubleValue(), 15.0, 0.0);\n\n    row = matrix.get(2);\n    assertEquals(row.size(), 3);\n    assertEquals(row.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(row.get(1).doubleValue(), 12.0, 0.0);\n    assertEquals(row.get(2).doubleValue(), 18.0, 0.0);\n  }\n\n","sourceOld":"  @Test\n  public void testMatrixMult() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(1,2,3),\" +\n        \"               b=matrix(array(4), array(5), array(6)),\" +\n        \"               c=matrixMult(a, b),\" +\n        \"               d=matrix(array(3, 4), array(10,11), array(30, 40)),\" +\n        \"               e=matrixMult(a, d),\" +\n        \"               f=array(4,8,10),\" +\n        \"               g=matrix(a, f),\" +\n        \"               h=matrixMult(d, g),\" +\n        \"               i=matrixMult(b, a))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> matrix = (List<List<Number>>)tuples.get(0).get(\"c\");\n    assertEquals(matrix.size(), 1);\n    List<Number> row = matrix.get(0);\n    assertEquals(row.size(), 1);\n    assertEquals(row.get(0).doubleValue(), 32.0, 0.0);\n\n    matrix = (List<List<Number>>)tuples.get(0).get(\"e\");\n    assertEquals(matrix.size(), 1);\n    row = matrix.get(0);\n    assertEquals(row.size(), 2);\n    assertEquals(row.get(0).doubleValue(), 113.0, 0.0);\n    assertEquals(row.get(1).doubleValue(), 146.0, 0.0);\n\n    matrix = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(matrix.size(), 3);\n    row = matrix.get(0);\n    assertEquals(row.size(), 3);\n    assertEquals(row.get(0).doubleValue(), 19.0, 0.0);\n    assertEquals(row.get(1).doubleValue(), 38.0, 0.0);\n    assertEquals(row.get(2).doubleValue(), 49.0, 0.0);\n\n    row = matrix.get(1);\n    assertEquals(row.size(), 3);\n    assertEquals(row.get(0).doubleValue(), 54.0, 0.0);\n    assertEquals(row.get(1).doubleValue(), 108.0, 0.0);\n    assertEquals(row.get(2).doubleValue(), 140.0, 0.0);\n\n    row = matrix.get(2);\n    assertEquals(row.size(), 3);\n    assertEquals(row.get(0).doubleValue(), 190.0, 0.0);\n    assertEquals(row.get(1).doubleValue(), 380.0, 0.0);\n    assertEquals(row.get(2).doubleValue(), 490.0, 0.0);\n\n    matrix = (List<List<Number>>)tuples.get(0).get(\"i\");\n\n    assertEquals(matrix.size(), 3);\n    row = matrix.get(0);\n    assertEquals(row.size(), 3);\n    assertEquals(row.get(0).doubleValue(), 4.0, 0.0);\n    assertEquals(row.get(1).doubleValue(), 8.0, 0.0);\n    assertEquals(row.get(2).doubleValue(), 12.0, 0.0);\n\n    row = matrix.get(1);\n    assertEquals(row.size(), 3);\n    assertEquals(row.get(0).doubleValue(), 5.0, 0.0);\n    assertEquals(row.get(1).doubleValue(), 10.0, 0.0);\n    assertEquals(row.get(2).doubleValue(), 15.0, 0.0);\n\n    row = matrix.get(2);\n    assertEquals(row.size(), 3);\n    assertEquals(row.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(row.get(1).doubleValue(), 12.0, 0.0);\n    assertEquals(row.get(2).doubleValue(), 18.0, 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMatrixMult().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMatrixMult().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testMatrixMult() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(1,2,3),\" +\n        \"               b=matrix(array(4), array(5), array(6)),\" +\n        \"               c=matrixMult(a, b),\" +\n        \"               d=matrix(array(3, 4), array(10,11), array(30, 40)),\" +\n        \"               e=matrixMult(a, d),\" +\n        \"               f=array(4,8,10),\" +\n        \"               g=matrix(a, f),\" +\n        \"               h=matrixMult(d, g),\" +\n        \"               i=matrixMult(b, a))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> matrix = (List<List<Number>>)tuples.get(0).get(\"c\");\n    assertEquals(matrix.size(), 1);\n    List<Number> row = matrix.get(0);\n    assertEquals(row.size(), 1);\n    assertEquals(row.get(0).doubleValue(), 32.0, 0.0);\n\n    matrix = (List<List<Number>>)tuples.get(0).get(\"e\");\n    assertEquals(matrix.size(), 1);\n    row = matrix.get(0);\n    assertEquals(row.size(), 2);\n    assertEquals(row.get(0).doubleValue(), 113.0, 0.0);\n    assertEquals(row.get(1).doubleValue(), 146.0, 0.0);\n\n    matrix = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(matrix.size(), 3);\n    row = matrix.get(0);\n    assertEquals(row.size(), 3);\n    assertEquals(row.get(0).doubleValue(), 19.0, 0.0);\n    assertEquals(row.get(1).doubleValue(), 38.0, 0.0);\n    assertEquals(row.get(2).doubleValue(), 49.0, 0.0);\n\n    row = matrix.get(1);\n    assertEquals(row.size(), 3);\n    assertEquals(row.get(0).doubleValue(), 54.0, 0.0);\n    assertEquals(row.get(1).doubleValue(), 108.0, 0.0);\n    assertEquals(row.get(2).doubleValue(), 140.0, 0.0);\n\n    row = matrix.get(2);\n    assertEquals(row.size(), 3);\n    assertEquals(row.get(0).doubleValue(), 190.0, 0.0);\n    assertEquals(row.get(1).doubleValue(), 380.0, 0.0);\n    assertEquals(row.get(2).doubleValue(), 490.0, 0.0);\n\n    matrix = (List<List<Number>>)tuples.get(0).get(\"i\");\n\n    assertEquals(matrix.size(), 3);\n    row = matrix.get(0);\n    assertEquals(row.size(), 3);\n    assertEquals(row.get(0).doubleValue(), 4.0, 0.0);\n    assertEquals(row.get(1).doubleValue(), 8.0, 0.0);\n    assertEquals(row.get(2).doubleValue(), 12.0, 0.0);\n\n    row = matrix.get(1);\n    assertEquals(row.size(), 3);\n    assertEquals(row.get(0).doubleValue(), 5.0, 0.0);\n    assertEquals(row.get(1).doubleValue(), 10.0, 0.0);\n    assertEquals(row.get(2).doubleValue(), 15.0, 0.0);\n\n    row = matrix.get(2);\n    assertEquals(row.size(), 3);\n    assertEquals(row.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(row.get(1).doubleValue(), 12.0, 0.0);\n    assertEquals(row.get(2).doubleValue(), 18.0, 0.0);\n  }\n\n","sourceOld":"  @Test\n  public void testMatrixMult() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=array(1,2,3),\" +\n        \"               b=matrix(array(4), array(5), array(6)),\" +\n        \"               c=matrixMult(a, b),\" +\n        \"               d=matrix(array(3, 4), array(10,11), array(30, 40)),\" +\n        \"               e=matrixMult(a, d),\" +\n        \"               f=array(4,8,10),\" +\n        \"               g=matrix(a, f),\" +\n        \"               h=matrixMult(d, g),\" +\n        \"               i=matrixMult(b, a))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> matrix = (List<List<Number>>)tuples.get(0).get(\"c\");\n    assertEquals(matrix.size(), 1);\n    List<Number> row = matrix.get(0);\n    assertEquals(row.size(), 1);\n    assertEquals(row.get(0).doubleValue(), 32.0, 0.0);\n\n    matrix = (List<List<Number>>)tuples.get(0).get(\"e\");\n    assertEquals(matrix.size(), 1);\n    row = matrix.get(0);\n    assertEquals(row.size(), 2);\n    assertEquals(row.get(0).doubleValue(), 113.0, 0.0);\n    assertEquals(row.get(1).doubleValue(), 146.0, 0.0);\n\n    matrix = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(matrix.size(), 3);\n    row = matrix.get(0);\n    assertEquals(row.size(), 3);\n    assertEquals(row.get(0).doubleValue(), 19.0, 0.0);\n    assertEquals(row.get(1).doubleValue(), 38.0, 0.0);\n    assertEquals(row.get(2).doubleValue(), 49.0, 0.0);\n\n    row = matrix.get(1);\n    assertEquals(row.size(), 3);\n    assertEquals(row.get(0).doubleValue(), 54.0, 0.0);\n    assertEquals(row.get(1).doubleValue(), 108.0, 0.0);\n    assertEquals(row.get(2).doubleValue(), 140.0, 0.0);\n\n    row = matrix.get(2);\n    assertEquals(row.size(), 3);\n    assertEquals(row.get(0).doubleValue(), 190.0, 0.0);\n    assertEquals(row.get(1).doubleValue(), 380.0, 0.0);\n    assertEquals(row.get(2).doubleValue(), 490.0, 0.0);\n\n    matrix = (List<List<Number>>)tuples.get(0).get(\"i\");\n\n    assertEquals(matrix.size(), 3);\n    row = matrix.get(0);\n    assertEquals(row.size(), 3);\n    assertEquals(row.get(0).doubleValue(), 4.0, 0.0);\n    assertEquals(row.get(1).doubleValue(), 8.0, 0.0);\n    assertEquals(row.get(2).doubleValue(), 12.0, 0.0);\n\n    row = matrix.get(1);\n    assertEquals(row.size(), 3);\n    assertEquals(row.get(0).doubleValue(), 5.0, 0.0);\n    assertEquals(row.get(1).doubleValue(), 10.0, 0.0);\n    assertEquals(row.get(2).doubleValue(), 15.0, 0.0);\n\n    row = matrix.get(2);\n    assertEquals(row.size(), 3);\n    assertEquals(row.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(row.get(1).doubleValue(), 12.0, 0.0);\n    assertEquals(row.get(2).doubleValue(), 18.0, 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["9ba1b632c041956c93c41aa1143d16a567014891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}