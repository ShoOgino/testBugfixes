{"path":"src/test/org/apache/lucene/index/TestTermVectorsReader#testPositionReader().mjava","commits":[{"id":"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0","date":1096997448,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermVectorsReader#testPositionReader().mjava","pathOld":"/dev/null","sourceNew":"  public void testPositionReader() {\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      TermPositionVector vector;\n      String [] terms;\n      vector = (TermPositionVector)reader.get(0, testFields[0]);\n      assertTrue(vector != null);      \n      terms = vector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));\n        int [] positions = vector.getTermPositions(i);\n        assertTrue(positions != null);\n        assertTrue(positions.length == this.positions[i].length);\n        for (int j = 0; j < positions.length; j++) {\n          int position = positions[j];\n          assertTrue(position == this.positions[i][j]);\n        }\n        TermVectorOffsetInfo [] offset = vector.getOffsets(i);\n        assertTrue(offset != null);\n        assertTrue(offset.length == this.offsets[i].length);\n        for (int j = 0; j < offset.length; j++) {\n          TermVectorOffsetInfo termVectorOffsetInfo = offset[j];\n          assertTrue(termVectorOffsetInfo.equals(offsets[i][j]));\n        }\n      }\n      \n      TermFreqVector freqVector = (TermFreqVector)reader.get(0, testFields[1]); //no pos, no offset\n      assertTrue(freqVector != null);      \n      assertTrue(freqVector instanceof TermPositionVector == false);\n      terms = freqVector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));        \n      }\n      \n      \n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n    catch (ClassCastException cce)\n    {\n      cce.printStackTrace();\n      assertTrue(false);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00be19f91a643daa4c865f21f8e62923f702af5d","date":1101649247,"type":3,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermVectorsReader#testPositionReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestTermVectorsReader#testPositionReader().mjava","sourceNew":"  public void testPositionReader() {\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      TermPositionVector vector;\n      String [] terms;\n      vector = (TermPositionVector)reader.get(0, testFields[0]);\n      assertTrue(vector != null);      \n      terms = vector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));\n        int [] positions = vector.getTermPositions(i);\n        assertTrue(positions != null);\n        assertTrue(positions.length == this.positions[i].length);\n        for (int j = 0; j < positions.length; j++) {\n          int position = positions[j];\n          assertTrue(position == this.positions[i][j]);\n        }\n        TermVectorOffsetInfo [] offset = vector.getOffsets(i);\n        assertTrue(offset != null);\n        assertTrue(offset.length == this.offsets[i].length);\n        for (int j = 0; j < offset.length; j++) {\n          TermVectorOffsetInfo termVectorOffsetInfo = offset[j];\n          assertTrue(termVectorOffsetInfo.equals(offsets[i][j]));\n        }\n      }\n      \n      TermFreqVector freqVector = reader.get(0, testFields[1]); //no pos, no offset\n      assertTrue(freqVector != null);      \n      assertTrue(freqVector instanceof TermPositionVector == false);\n      terms = freqVector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));        \n      }\n      \n      \n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n    catch (ClassCastException cce)\n    {\n      cce.printStackTrace();\n      assertTrue(false);\n    }\n  }\n\n","sourceOld":"  public void testPositionReader() {\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      TermPositionVector vector;\n      String [] terms;\n      vector = (TermPositionVector)reader.get(0, testFields[0]);\n      assertTrue(vector != null);      \n      terms = vector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));\n        int [] positions = vector.getTermPositions(i);\n        assertTrue(positions != null);\n        assertTrue(positions.length == this.positions[i].length);\n        for (int j = 0; j < positions.length; j++) {\n          int position = positions[j];\n          assertTrue(position == this.positions[i][j]);\n        }\n        TermVectorOffsetInfo [] offset = vector.getOffsets(i);\n        assertTrue(offset != null);\n        assertTrue(offset.length == this.offsets[i].length);\n        for (int j = 0; j < offset.length; j++) {\n          TermVectorOffsetInfo termVectorOffsetInfo = offset[j];\n          assertTrue(termVectorOffsetInfo.equals(offsets[i][j]));\n        }\n      }\n      \n      TermFreqVector freqVector = (TermFreqVector)reader.get(0, testFields[1]); //no pos, no offset\n      assertTrue(freqVector != null);      \n      assertTrue(freqVector instanceof TermPositionVector == false);\n      terms = freqVector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));        \n      }\n      \n      \n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n    catch (ClassCastException cce)\n    {\n      cce.printStackTrace();\n      assertTrue(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1229e4509cad6bf268c0fe18199b63a72216c66b","date":1120256033,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermVectorsReader#testPositionReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestTermVectorsReader#testPositionReader().mjava","sourceNew":"  public void testPositionReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    assertTrue(reader != null);\n    TermPositionVector vector;\n    String [] terms;\n    vector = (TermPositionVector)reader.get(0, testFields[0]);\n    assertTrue(vector != null);      \n    terms = vector.getTerms();\n    assertTrue(terms != null);\n    assertTrue(terms.length == testTerms.length);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      //System.out.println(\"Term: \" + term);\n      assertTrue(term.equals(testTerms[i]));\n      int [] positions = vector.getTermPositions(i);\n      assertTrue(positions != null);\n      assertTrue(positions.length == this.positions[i].length);\n      for (int j = 0; j < positions.length; j++) {\n        int position = positions[j];\n        assertTrue(position == this.positions[i][j]);\n      }\n      TermVectorOffsetInfo [] offset = vector.getOffsets(i);\n      assertTrue(offset != null);\n      assertTrue(offset.length == this.offsets[i].length);\n      for (int j = 0; j < offset.length; j++) {\n        TermVectorOffsetInfo termVectorOffsetInfo = offset[j];\n        assertTrue(termVectorOffsetInfo.equals(offsets[i][j]));\n      }\n    }\n    \n    TermFreqVector freqVector = reader.get(0, testFields[1]); //no pos, no offset\n    assertTrue(freqVector != null);      \n    assertTrue(freqVector instanceof TermPositionVector == false);\n    terms = freqVector.getTerms();\n    assertTrue(terms != null);\n    assertTrue(terms.length == testTerms.length);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      //System.out.println(\"Term: \" + term);\n      assertTrue(term.equals(testTerms[i]));        \n    }\n  }\n\n","sourceOld":"  public void testPositionReader() {\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      TermPositionVector vector;\n      String [] terms;\n      vector = (TermPositionVector)reader.get(0, testFields[0]);\n      assertTrue(vector != null);      \n      terms = vector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));\n        int [] positions = vector.getTermPositions(i);\n        assertTrue(positions != null);\n        assertTrue(positions.length == this.positions[i].length);\n        for (int j = 0; j < positions.length; j++) {\n          int position = positions[j];\n          assertTrue(position == this.positions[i][j]);\n        }\n        TermVectorOffsetInfo [] offset = vector.getOffsets(i);\n        assertTrue(offset != null);\n        assertTrue(offset.length == this.offsets[i].length);\n        for (int j = 0; j < offset.length; j++) {\n          TermVectorOffsetInfo termVectorOffsetInfo = offset[j];\n          assertTrue(termVectorOffsetInfo.equals(offsets[i][j]));\n        }\n      }\n      \n      TermFreqVector freqVector = reader.get(0, testFields[1]); //no pos, no offset\n      assertTrue(freqVector != null);      \n      assertTrue(freqVector instanceof TermPositionVector == false);\n      terms = freqVector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));        \n      }\n      \n      \n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n    catch (ClassCastException cce)\n    {\n      cce.printStackTrace();\n      assertTrue(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"352bfe1fae83b92d1562f01c057bfbe6f5af3ddb","date":1185160645,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermVectorsReader#testPositionReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestTermVectorsReader#testPositionReader().mjava","sourceNew":"  public void testPositionReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    assertTrue(reader != null);\n    TermPositionVector vector;\n    String[] terms;\n    vector = (TermPositionVector) reader.get(0, testFields[0]);\n    assertTrue(vector != null);\n    terms = vector.getTerms();\n    assertTrue(terms != null);\n    assertTrue(terms.length == testTerms.length);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      //System.out.println(\"Term: \" + term);\n      assertTrue(term.equals(testTerms[i]));\n      int[] positions = vector.getTermPositions(i);\n      assertTrue(positions != null);\n      assertTrue(positions.length == this.positions[i].length);\n      for (int j = 0; j < positions.length; j++) {\n        int position = positions[j];\n        assertTrue(position == this.positions[i][j]);\n      }\n      TermVectorOffsetInfo[] offset = vector.getOffsets(i);\n      assertTrue(offset != null);\n      assertTrue(offset.length == this.offsets[i].length);\n      for (int j = 0; j < offset.length; j++) {\n        TermVectorOffsetInfo termVectorOffsetInfo = offset[j];\n        assertTrue(termVectorOffsetInfo.equals(offsets[i][j]));\n      }\n    }\n\n    TermFreqVector freqVector = reader.get(0, testFields[1]); //no pos, no offset\n    assertTrue(freqVector != null);\n    assertTrue(freqVector instanceof TermPositionVector == false);\n    terms = freqVector.getTerms();\n    assertTrue(terms != null);\n    assertTrue(terms.length == testTerms.length);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      //System.out.println(\"Term: \" + term);\n      assertTrue(term.equals(testTerms[i]));\n    }\n  }\n\n","sourceOld":"  public void testPositionReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    assertTrue(reader != null);\n    TermPositionVector vector;\n    String [] terms;\n    vector = (TermPositionVector)reader.get(0, testFields[0]);\n    assertTrue(vector != null);      \n    terms = vector.getTerms();\n    assertTrue(terms != null);\n    assertTrue(terms.length == testTerms.length);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      //System.out.println(\"Term: \" + term);\n      assertTrue(term.equals(testTerms[i]));\n      int [] positions = vector.getTermPositions(i);\n      assertTrue(positions != null);\n      assertTrue(positions.length == this.positions[i].length);\n      for (int j = 0; j < positions.length; j++) {\n        int position = positions[j];\n        assertTrue(position == this.positions[i][j]);\n      }\n      TermVectorOffsetInfo [] offset = vector.getOffsets(i);\n      assertTrue(offset != null);\n      assertTrue(offset.length == this.offsets[i].length);\n      for (int j = 0; j < offset.length; j++) {\n        TermVectorOffsetInfo termVectorOffsetInfo = offset[j];\n        assertTrue(termVectorOffsetInfo.equals(offsets[i][j]));\n      }\n    }\n    \n    TermFreqVector freqVector = reader.get(0, testFields[1]); //no pos, no offset\n    assertTrue(freqVector != null);      \n    assertTrue(freqVector instanceof TermPositionVector == false);\n    terms = freqVector.getTerms();\n    assertTrue(terms != null);\n    assertTrue(terms.length == testTerms.length);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      //System.out.println(\"Term: \" + term);\n      assertTrue(term.equals(testTerms[i]));        \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermVectorsReader#testPositionReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestTermVectorsReader#testPositionReader().mjava","sourceNew":"  public void testPositionReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    TermPositionVector vector;\n    String[] terms;\n    vector = (TermPositionVector) reader.get(0, testFields[0]);\n    assertTrue(vector != null);\n    terms = vector.getTerms();\n    assertTrue(terms != null);\n    assertTrue(terms.length == testTerms.length);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      //System.out.println(\"Term: \" + term);\n      assertTrue(term.equals(testTerms[i]));\n      int[] positions = vector.getTermPositions(i);\n      assertTrue(positions != null);\n      assertTrue(positions.length == this.positions[i].length);\n      for (int j = 0; j < positions.length; j++) {\n        int position = positions[j];\n        assertTrue(position == this.positions[i][j]);\n      }\n      TermVectorOffsetInfo[] offset = vector.getOffsets(i);\n      assertTrue(offset != null);\n      assertTrue(offset.length == this.offsets[i].length);\n      for (int j = 0; j < offset.length; j++) {\n        TermVectorOffsetInfo termVectorOffsetInfo = offset[j];\n        assertTrue(termVectorOffsetInfo.equals(offsets[i][j]));\n      }\n    }\n\n    TermFreqVector freqVector = reader.get(0, testFields[1]); //no pos, no offset\n    assertTrue(freqVector != null);\n    assertTrue(freqVector instanceof TermPositionVector == false);\n    terms = freqVector.getTerms();\n    assertTrue(terms != null);\n    assertTrue(terms.length == testTerms.length);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      //System.out.println(\"Term: \" + term);\n      assertTrue(term.equals(testTerms[i]));\n    }\n  }\n\n","sourceOld":"  public void testPositionReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    assertTrue(reader != null);\n    TermPositionVector vector;\n    String[] terms;\n    vector = (TermPositionVector) reader.get(0, testFields[0]);\n    assertTrue(vector != null);\n    terms = vector.getTerms();\n    assertTrue(terms != null);\n    assertTrue(terms.length == testTerms.length);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      //System.out.println(\"Term: \" + term);\n      assertTrue(term.equals(testTerms[i]));\n      int[] positions = vector.getTermPositions(i);\n      assertTrue(positions != null);\n      assertTrue(positions.length == this.positions[i].length);\n      for (int j = 0; j < positions.length; j++) {\n        int position = positions[j];\n        assertTrue(position == this.positions[i][j]);\n      }\n      TermVectorOffsetInfo[] offset = vector.getOffsets(i);\n      assertTrue(offset != null);\n      assertTrue(offset.length == this.offsets[i].length);\n      for (int j = 0; j < offset.length; j++) {\n        TermVectorOffsetInfo termVectorOffsetInfo = offset[j];\n        assertTrue(termVectorOffsetInfo.equals(offsets[i][j]));\n      }\n    }\n\n    TermFreqVector freqVector = reader.get(0, testFields[1]); //no pos, no offset\n    assertTrue(freqVector != null);\n    assertTrue(freqVector instanceof TermPositionVector == false);\n    terms = freqVector.getTerms();\n    assertTrue(terms != null);\n    assertTrue(terms.length == testTerms.length);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      //System.out.println(\"Term: \" + term);\n      assertTrue(term.equals(testTerms[i]));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testPositionReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestTermVectorsReader#testPositionReader().mjava","sourceNew":"  public void testPositionReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    TermPositionVector vector;\n    String[] terms;\n    vector = (TermPositionVector) reader.get(0, testFields[0]);\n    assertTrue(vector != null);\n    terms = vector.getTerms();\n    assertTrue(terms != null);\n    assertTrue(terms.length == testTerms.length);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      //System.out.println(\"Term: \" + term);\n      assertTrue(term.equals(testTerms[i]));\n      int[] positions = vector.getTermPositions(i);\n      assertTrue(positions != null);\n      assertTrue(positions.length == this.positions[i].length);\n      for (int j = 0; j < positions.length; j++) {\n        int position = positions[j];\n        assertTrue(position == this.positions[i][j]);\n      }\n      TermVectorOffsetInfo[] offset = vector.getOffsets(i);\n      assertTrue(offset != null);\n      assertTrue(offset.length == this.offsets[i].length);\n      for (int j = 0; j < offset.length; j++) {\n        TermVectorOffsetInfo termVectorOffsetInfo = offset[j];\n        assertTrue(termVectorOffsetInfo.equals(offsets[i][j]));\n      }\n    }\n\n    TermFreqVector freqVector = reader.get(0, testFields[1]); //no pos, no offset\n    assertTrue(freqVector != null);\n    assertTrue(freqVector instanceof TermPositionVector == false);\n    terms = freqVector.getTerms();\n    assertTrue(terms != null);\n    assertTrue(terms.length == testTerms.length);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      //System.out.println(\"Term: \" + term);\n      assertTrue(term.equals(testTerms[i]));\n    }\n  }\n\n","sourceOld":"  public void testPositionReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    TermPositionVector vector;\n    String[] terms;\n    vector = (TermPositionVector) reader.get(0, testFields[0]);\n    assertTrue(vector != null);\n    terms = vector.getTerms();\n    assertTrue(terms != null);\n    assertTrue(terms.length == testTerms.length);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      //System.out.println(\"Term: \" + term);\n      assertTrue(term.equals(testTerms[i]));\n      int[] positions = vector.getTermPositions(i);\n      assertTrue(positions != null);\n      assertTrue(positions.length == this.positions[i].length);\n      for (int j = 0; j < positions.length; j++) {\n        int position = positions[j];\n        assertTrue(position == this.positions[i][j]);\n      }\n      TermVectorOffsetInfo[] offset = vector.getOffsets(i);\n      assertTrue(offset != null);\n      assertTrue(offset.length == this.offsets[i].length);\n      for (int j = 0; j < offset.length; j++) {\n        TermVectorOffsetInfo termVectorOffsetInfo = offset[j];\n        assertTrue(termVectorOffsetInfo.equals(offsets[i][j]));\n      }\n    }\n\n    TermFreqVector freqVector = reader.get(0, testFields[1]); //no pos, no offset\n    assertTrue(freqVector != null);\n    assertTrue(freqVector instanceof TermPositionVector == false);\n    terms = freqVector.getTerms();\n    assertTrue(terms != null);\n    assertTrue(terms.length == testTerms.length);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      //System.out.println(\"Term: \" + term);\n      assertTrue(term.equals(testTerms[i]));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"352bfe1fae83b92d1562f01c057bfbe6f5af3ddb":["1229e4509cad6bf268c0fe18199b63a72216c66b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"00be19f91a643daa4c865f21f8e62923f702af5d":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["352bfe1fae83b92d1562f01c057bfbe6f5af3ddb"],"1229e4509cad6bf268c0fe18199b63a72216c66b":["00be19f91a643daa4c865f21f8e62923f702af5d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"352bfe1fae83b92d1562f01c057bfbe6f5af3ddb":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"00be19f91a643daa4c865f21f8e62923f702af5d":["1229e4509cad6bf268c0fe18199b63a72216c66b"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["00be19f91a643daa4c865f21f8e62923f702af5d"],"1229e4509cad6bf268c0fe18199b63a72216c66b":["352bfe1fae83b92d1562f01c057bfbe6f5af3ddb"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}