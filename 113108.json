{"path":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testWithMaxLenAndMultipleWildcardMatches().mjava","commits":[{"id":"f2e9861e4a2b724d9fc51b618714c579491b78d7","date":1479244606,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testWithMaxLenAndMultipleWildcardMatches().mjava","pathOld":"/dev/null","sourceNew":"  public void testWithMaxLenAndMultipleWildcardMatches() throws IOException {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    //tests interleaving of multiple wildcard matches with the CompositePostingsEnum\n    //In this case the CompositePostingsEnum will have an underlying PostingsEnum that jumps form pos 1 to 9 for bravo\n    //and a second with position 2 for Bravado\n    body.setStringValue(\"Alpha Bravo Bravado foo foo foo. Foo foo Alpha Bravo\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);\n    highlighter.setMaxLength(32);//a little past first sentence\n\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"body\", \"alpha\")), BooleanClause.Occur.MUST)\n        .add(new PrefixQuery(new Term(\"body\", \"bra\")), BooleanClause.Occur.MUST)\n        .build();\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs, 2);//ask for 2 but we'll only get 1\n    assertArrayEquals(\n        new String[]{\"<b>Alpha</b> <b>Bravo</b> <b>Bravado</b> foo foo foo.\"}, snippets\n    );\n\n    ir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testWithMaxLenAndMultipleWildcardMatches().mjava","pathOld":"/dev/null","sourceNew":"  public void testWithMaxLenAndMultipleWildcardMatches() throws IOException {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    //tests interleaving of multiple wildcard matches with the CompositePostingsEnum\n    //In this case the CompositePostingsEnum will have an underlying PostingsEnum that jumps form pos 1 to 9 for bravo\n    //and a second with position 2 for Bravado\n    body.setStringValue(\"Alpha Bravo Bravado foo foo foo. Foo foo Alpha Bravo\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);\n    highlighter.setMaxLength(32);//a little past first sentence\n\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"body\", \"alpha\")), BooleanClause.Occur.MUST)\n        .add(new PrefixQuery(new Term(\"body\", \"bra\")), BooleanClause.Occur.MUST)\n        .build();\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs, 2);//ask for 2 but we'll only get 1\n    assertArrayEquals(\n        new String[]{\"<b>Alpha</b> <b>Bravo</b> <b>Bravado</b> foo foo foo.\"}, snippets\n    );\n\n    ir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571","date":1515642580,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testWithMaxLenAndMultipleWildcardMatches().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testWithMaxLenAndMultipleWildcardMatches().mjava","sourceNew":"  public void testWithMaxLenAndMultipleWildcardMatches() throws IOException {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    //tests interleaving of multiple wildcard matches with the CompositePostingsEnum\n    //In this case the CompositePostingsEnum will have an underlying PostingsEnum that jumps form pos 1 to 9 for bravo\n    //and a second with position 2 for Bravado\n    body.setStringValue(\"Alpha Bravo Bravado foo foo foo. Foo foo Alpha Bravo\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = randomUnifiedHighlighter(searcher, indexAnalyzer);\n    highlighter.setMaxLength(32);//a little past first sentence\n\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"body\", \"alpha\")), BooleanClause.Occur.MUST)\n        .add(new PrefixQuery(new Term(\"body\", \"bra\")), BooleanClause.Occur.MUST)\n        .build();\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs, 2);//ask for 2 but we'll only get 1\n    assertArrayEquals(\n        new String[]{\"<b>Alpha</b> <b>Bravo</b> <b>Bravado</b> foo foo foo.\"}, snippets\n    );\n\n    ir.close();\n  }\n\n","sourceOld":"  public void testWithMaxLenAndMultipleWildcardMatches() throws IOException {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    //tests interleaving of multiple wildcard matches with the CompositePostingsEnum\n    //In this case the CompositePostingsEnum will have an underlying PostingsEnum that jumps form pos 1 to 9 for bravo\n    //and a second with position 2 for Bravado\n    body.setStringValue(\"Alpha Bravo Bravado foo foo foo. Foo foo Alpha Bravo\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);\n    highlighter.setMaxLength(32);//a little past first sentence\n\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"body\", \"alpha\")), BooleanClause.Occur.MUST)\n        .add(new PrefixQuery(new Term(\"body\", \"bra\")), BooleanClause.Occur.MUST)\n        .build();\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs, 2);//ask for 2 but we'll only get 1\n    assertArrayEquals(\n        new String[]{\"<b>Alpha</b> <b>Bravo</b> <b>Bravado</b> foo foo foo.\"}, snippets\n    );\n\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testWithMaxLenAndMultipleWildcardMatches().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testWithMaxLenAndMultipleWildcardMatches().mjava","sourceNew":"  public void testWithMaxLenAndMultipleWildcardMatches() throws IOException {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    //tests interleaving of multiple wildcard matches with the CompositePostingsEnum\n    //In this case the CompositePostingsEnum will have an underlying PostingsEnum that jumps form pos 1 to 9 for bravo\n    //and a second with position 2 for Bravado\n    body.setStringValue(\"Alpha Bravo Bravado foo foo foo. Foo foo Alpha Bravo\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = randomUnifiedHighlighter(searcher, indexAnalyzer);\n    highlighter.setMaxLength(32);//a little past first sentence\n\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"body\", \"alpha\")), BooleanClause.Occur.MUST)\n        .add(new PrefixQuery(new Term(\"body\", \"bra\")), BooleanClause.Occur.MUST)\n        .build();\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs, 2);//ask for 2 but we'll only get 1\n    assertArrayEquals(\n        new String[]{\"<b>Alpha</b> <b>Bravo</b> <b>Bravado</b> foo foo foo.\"}, snippets\n    );\n\n    ir.close();\n  }\n\n","sourceOld":"  public void testWithMaxLenAndMultipleWildcardMatches() throws IOException {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    //tests interleaving of multiple wildcard matches with the CompositePostingsEnum\n    //In this case the CompositePostingsEnum will have an underlying PostingsEnum that jumps form pos 1 to 9 for bravo\n    //and a second with position 2 for Bravado\n    body.setStringValue(\"Alpha Bravo Bravado foo foo foo. Foo foo Alpha Bravo\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);\n    highlighter.setMaxLength(32);//a little past first sentence\n\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"body\", \"alpha\")), BooleanClause.Occur.MUST)\n        .add(new PrefixQuery(new Term(\"body\", \"bra\")), BooleanClause.Occur.MUST)\n        .build();\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs, 2);//ask for 2 but we'll only get 1\n    assertArrayEquals(\n        new String[]{\"<b>Alpha</b> <b>Bravo</b> <b>Bravado</b> foo foo foo.\"}, snippets\n    );\n\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["f2e9861e4a2b724d9fc51b618714c579491b78d7","eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571"],"f2e9861e4a2b724d9fc51b618714c579491b78d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f2e9861e4a2b724d9fc51b618714c579491b78d7"],"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571":["f2e9861e4a2b724d9fc51b618714c579491b78d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f2e9861e4a2b724d9fc51b618714c579491b78d7":["b94236357aaa22b76c10629851fe4e376e0cea82","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f2e9861e4a2b724d9fc51b618714c579491b78d7","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}