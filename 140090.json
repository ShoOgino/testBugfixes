{"path":"lucene/core/src/test/org/apache/lucene/util/TestPriorityQueue#testIteratorRandom().mjava","commits":[{"id":"ac8ce4febd838561b4317a75f81313066e6d91c3","date":1449851410,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestPriorityQueue#testIteratorRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testIteratorRandom() {\n    final int maxSize = TestUtil.nextInt(random(), 1, 20);\n    IntegerQueue queue = new IntegerQueue(maxSize);\n    final int iters = atLeast(100);\n    final List<Integer> expected = new ArrayList<>();\n    for (int iter = 0; iter < iters; ++iter) {\n      if (queue.size() == 0 || (queue.size() < maxSize && random().nextBoolean())) {\n        final Integer value = new Integer(random().nextInt(10));\n        queue.add(value);\n        expected.add(value);\n      } else {\n        expected.remove(queue.pop());\n      }\n      List<Integer> actual = new ArrayList<>();\n      for (Integer value : queue) {\n        actual.add(value);\n      }\n      CollectionUtil.introSort(expected);\n      CollectionUtil.introSort(actual);\n      assertEquals(expected, actual);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestPriorityQueue#testIteratorRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestPriorityQueue#testIteratorRandom().mjava","sourceNew":"  public void testIteratorRandom() {\n    final int maxSize = TestUtil.nextInt(random(), 1, 20);\n    IntegerQueue queue = new IntegerQueue(maxSize);\n    final int iters = atLeast(100);\n    final List<Integer> expected = new ArrayList<>();\n    for (int iter = 0; iter < iters; ++iter) {\n      if (queue.size() == 0 || (queue.size() < maxSize && random().nextBoolean())) {\n        final Integer value = random().nextInt(10);\n        queue.add(value);\n        expected.add(value);\n      } else {\n        expected.remove(queue.pop());\n      }\n      List<Integer> actual = new ArrayList<>();\n      for (Integer value : queue) {\n        actual.add(value);\n      }\n      CollectionUtil.introSort(expected);\n      CollectionUtil.introSort(actual);\n      assertEquals(expected, actual);\n    }\n  }\n\n","sourceOld":"  public void testIteratorRandom() {\n    final int maxSize = TestUtil.nextInt(random(), 1, 20);\n    IntegerQueue queue = new IntegerQueue(maxSize);\n    final int iters = atLeast(100);\n    final List<Integer> expected = new ArrayList<>();\n    for (int iter = 0; iter < iters; ++iter) {\n      if (queue.size() == 0 || (queue.size() < maxSize && random().nextBoolean())) {\n        final Integer value = new Integer(random().nextInt(10));\n        queue.add(value);\n        expected.add(value);\n      } else {\n        expected.remove(queue.pop());\n      }\n      List<Integer> actual = new ArrayList<>();\n      for (Integer value : queue) {\n        actual.add(value);\n      }\n      CollectionUtil.introSort(expected);\n      CollectionUtil.introSort(actual);\n      assertEquals(expected, actual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestPriorityQueue#testIteratorRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestPriorityQueue#testIteratorRandom().mjava","sourceNew":"  public void testIteratorRandom() {\n    final int maxSize = TestUtil.nextInt(random(), 1, 20);\n    IntegerQueue queue = new IntegerQueue(maxSize);\n    final int iters = atLeast(100);\n    final List<Integer> expected = new ArrayList<>();\n    for (int iter = 0; iter < iters; ++iter) {\n      if (queue.size() == 0 || (queue.size() < maxSize && random().nextBoolean())) {\n        final Integer value = random().nextInt(10);\n        queue.add(value);\n        expected.add(value);\n      } else {\n        expected.remove(queue.pop());\n      }\n      List<Integer> actual = new ArrayList<>();\n      for (Integer value : queue) {\n        actual.add(value);\n      }\n      CollectionUtil.introSort(expected);\n      CollectionUtil.introSort(actual);\n      assertEquals(expected, actual);\n    }\n  }\n\n","sourceOld":"  public void testIteratorRandom() {\n    final int maxSize = TestUtil.nextInt(random(), 1, 20);\n    IntegerQueue queue = new IntegerQueue(maxSize);\n    final int iters = atLeast(100);\n    final List<Integer> expected = new ArrayList<>();\n    for (int iter = 0; iter < iters; ++iter) {\n      if (queue.size() == 0 || (queue.size() < maxSize && random().nextBoolean())) {\n        final Integer value = new Integer(random().nextInt(10));\n        queue.add(value);\n        expected.add(value);\n      } else {\n        expected.remove(queue.pop());\n      }\n      List<Integer> actual = new ArrayList<>();\n      for (Integer value : queue) {\n        actual.add(value);\n      }\n      CollectionUtil.introSort(expected);\n      CollectionUtil.introSort(actual);\n      assertEquals(expected, actual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ba5ad3f624c48771733f47cc35676451f49a21e","date":1531744539,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestPriorityQueue#testIteratorRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestPriorityQueue#testIteratorRandom().mjava","sourceNew":"  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/LUCENE-8402\")\n  public void testIteratorRandom() {\n    final int maxSize = TestUtil.nextInt(random(), 1, 20);\n    IntegerQueue queue = new IntegerQueue(maxSize);\n    final int iters = atLeast(100);\n    final List<Integer> expected = new ArrayList<>();\n    for (int iter = 0; iter < iters; ++iter) {\n      if (queue.size() == 0 || (queue.size() < maxSize && random().nextBoolean())) {\n        final Integer value = random().nextInt(10);\n        queue.add(value);\n        expected.add(value);\n      } else {\n        expected.remove(queue.pop());\n      }\n      List<Integer> actual = new ArrayList<>();\n      for (Integer value : queue) {\n        actual.add(value);\n      }\n      CollectionUtil.introSort(expected);\n      CollectionUtil.introSort(actual);\n      assertEquals(expected, actual);\n    }\n  }\n\n","sourceOld":"  public void testIteratorRandom() {\n    final int maxSize = TestUtil.nextInt(random(), 1, 20);\n    IntegerQueue queue = new IntegerQueue(maxSize);\n    final int iters = atLeast(100);\n    final List<Integer> expected = new ArrayList<>();\n    for (int iter = 0; iter < iters; ++iter) {\n      if (queue.size() == 0 || (queue.size() < maxSize && random().nextBoolean())) {\n        final Integer value = random().nextInt(10);\n        queue.add(value);\n        expected.add(value);\n      } else {\n        expected.remove(queue.pop());\n      }\n      List<Integer> actual = new ArrayList<>();\n      for (Integer value : queue) {\n        actual.add(value);\n      }\n      CollectionUtil.introSort(expected);\n      CollectionUtil.introSort(actual);\n      assertEquals(expected, actual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestPriorityQueue#testIteratorRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestPriorityQueue#testIteratorRandom().mjava","sourceNew":"  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/LUCENE-8402\")\n  public void testIteratorRandom() {\n    final int maxSize = TestUtil.nextInt(random(), 1, 20);\n    IntegerQueue queue = new IntegerQueue(maxSize);\n    final int iters = atLeast(100);\n    final List<Integer> expected = new ArrayList<>();\n    for (int iter = 0; iter < iters; ++iter) {\n      if (queue.size() == 0 || (queue.size() < maxSize && random().nextBoolean())) {\n        final Integer value = random().nextInt(10);\n        queue.add(value);\n        expected.add(value);\n      } else {\n        expected.remove(queue.pop());\n      }\n      List<Integer> actual = new ArrayList<>();\n      for (Integer value : queue) {\n        actual.add(value);\n      }\n      CollectionUtil.introSort(expected);\n      CollectionUtil.introSort(actual);\n      assertEquals(expected, actual);\n    }\n  }\n\n","sourceOld":"  public void testIteratorRandom() {\n    final int maxSize = TestUtil.nextInt(random(), 1, 20);\n    IntegerQueue queue = new IntegerQueue(maxSize);\n    final int iters = atLeast(100);\n    final List<Integer> expected = new ArrayList<>();\n    for (int iter = 0; iter < iters; ++iter) {\n      if (queue.size() == 0 || (queue.size() < maxSize && random().nextBoolean())) {\n        final Integer value = new Integer(random().nextInt(10));\n        queue.add(value);\n        expected.add(value);\n      } else {\n        expected.remove(queue.pop());\n      }\n      List<Integer> actual = new ArrayList<>();\n      for (Integer value : queue) {\n        actual.add(value);\n      }\n      CollectionUtil.introSort(expected);\n      CollectionUtil.introSort(actual);\n      assertEquals(expected, actual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af7005974a7d7f71beef18cb9aa918b9d968d163","date":1532074399,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestPriorityQueue#testIteratorRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestPriorityQueue#testIteratorRandom().mjava","sourceNew":"  public void testIteratorRandom() {\n    final int maxSize = TestUtil.nextInt(random(), 1, 20);\n    IntegerQueue queue = new IntegerQueue(maxSize);\n    final int iters = atLeast(100);\n    final List<Integer> expected = new ArrayList<>();\n    for (int iter = 0; iter < iters; ++iter) {\n      if (queue.size() == 0 || (queue.size() < maxSize && random().nextBoolean())) {\n        final Integer value = random().nextInt(10);\n        queue.add(value);\n        expected.add(value);\n      } else {\n        expected.remove(queue.pop());\n      }\n      List<Integer> actual = new ArrayList<>();\n      for (Integer value : queue) {\n        actual.add(value);\n      }\n      CollectionUtil.introSort(expected);\n      CollectionUtil.introSort(actual);\n      assertEquals(expected, actual);\n    }\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/LUCENE-8402\")\n  public void testIteratorRandom() {\n    final int maxSize = TestUtil.nextInt(random(), 1, 20);\n    IntegerQueue queue = new IntegerQueue(maxSize);\n    final int iters = atLeast(100);\n    final List<Integer> expected = new ArrayList<>();\n    for (int iter = 0; iter < iters; ++iter) {\n      if (queue.size() == 0 || (queue.size() < maxSize && random().nextBoolean())) {\n        final Integer value = random().nextInt(10);\n        queue.add(value);\n        expected.add(value);\n      } else {\n        expected.remove(queue.pop());\n      }\n      List<Integer> actual = new ArrayList<>();\n      for (Integer value : queue) {\n        actual.add(value);\n      }\n      CollectionUtil.introSort(expected);\n      CollectionUtil.introSort(actual);\n      assertEquals(expected, actual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["ac8ce4febd838561b4317a75f81313066e6d91c3"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["ac8ce4febd838561b4317a75f81313066e6d91c3","8ba5ad3f624c48771733f47cc35676451f49a21e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac8ce4febd838561b4317a75f81313066e6d91c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["ac8ce4febd838561b4317a75f81313066e6d91c3","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af7005974a7d7f71beef18cb9aa918b9d968d163"],"af7005974a7d7f71beef18cb9aa918b9d968d163":["8ba5ad3f624c48771733f47cc35676451f49a21e"],"8ba5ad3f624c48771733f47cc35676451f49a21e":["628903f37b6c442da0d390db1c6af9a0e74d41a7"]},"commit2Childs":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac8ce4febd838561b4317a75f81313066e6d91c3"],"ac8ce4febd838561b4317a75f81313066e6d91c3":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["8ba5ad3f624c48771733f47cc35676451f49a21e"],"8ba5ad3f624c48771733f47cc35676451f49a21e":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","af7005974a7d7f71beef18cb9aa918b9d968d163"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"af7005974a7d7f71beef18cb9aa918b9d968d163":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}