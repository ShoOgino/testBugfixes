{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTerms(Terms,Terms,boolean).mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTerms(Terms,Terms,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTerms(Terms,Terms,boolean).mjava","sourceNew":"  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(leftTerms);\n      assertNull(rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n    \n    // NOTE: we don't assert hasOffsets/hasPositions/hasPayloads because they are allowed to be different\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(leftTerms);\n      assertNull(rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n    \n    // NOTE: we don't assert hasOffsets/hasPositions/hasPayloads because they are allowed to be different\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTerms(Terms,Terms,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTerms(Terms,Terms,boolean).mjava","sourceNew":"  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(leftTerms);\n      assertNull(rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n    \n    // NOTE: we don't assert hasOffsets/hasPositions/hasPayloads because they are allowed to be different\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(leftTerms);\n      assertNull(rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n    \n    // NOTE: we don't assert hasOffsets/hasPositions/hasPayloads because they are allowed to be different\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35626481458234c265343dd28af158e8b0099068","date":1427831707,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTerms(Terms,Terms,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTerms(Terms,Terms,boolean).mjava","sourceNew":"  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(leftTerms);\n      assertNull(rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n    \n    // NOTE: we don't assert hasOffsets/hasPositions/hasPayloads because they are allowed to be different\n\n    boolean bothHavePositions = leftTerms.hasPositions() && rightTerms.hasPositions();\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true, bothHavePositions);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely(), bothHavePositions);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(leftTerms);\n      assertNull(rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n    \n    // NOTE: we don't assert hasOffsets/hasPositions/hasPayloads because they are allowed to be different\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b4e3cd382d0d075a0f1725649c084bb6510c483","date":1428096423,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTerms(Terms,Terms,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTerms(Terms,Terms,boolean).mjava","sourceNew":"  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(leftTerms);\n      assertNull(rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n    \n    // NOTE: we don't assert hasOffsets/hasPositions/hasPayloads because they are allowed to be different\n\n    boolean bothHavePositions = leftTerms.hasPositions() && rightTerms.hasPositions();\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true, bothHavePositions);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely(), bothHavePositions);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(leftTerms);\n      assertNull(rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n    \n    // NOTE: we don't assert hasOffsets/hasPositions/hasPayloads because they are allowed to be different\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTerms(Terms,Terms,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTerms(Terms,Terms,boolean).mjava","sourceNew":"  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(leftTerms);\n      assertNull(rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n    \n    // NOTE: we don't assert hasOffsets/hasPositions/hasPayloads because they are allowed to be different\n\n    boolean bothHavePositions = leftTerms.hasPositions() && rightTerms.hasPositions();\n    TermsEnum leftTermsEnum = leftTerms.iterator();\n    TermsEnum rightTermsEnum = rightTerms.iterator();\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true, bothHavePositions);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely(), bothHavePositions);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(leftTerms);\n      assertNull(rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n    \n    // NOTE: we don't assert hasOffsets/hasPositions/hasPayloads because they are allowed to be different\n\n    boolean bothHavePositions = leftTerms.hasPositions() && rightTerms.hasPositions();\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true, bothHavePositions);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely(), bothHavePositions);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"086ffe31d8fba0110227db122974163709ecc1b4","date":1509678141,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTerms(Terms,Terms,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTerms(Terms,Terms,boolean).mjava","sourceNew":"  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(leftTerms);\n      assertNull(rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n    \n    // NOTE: we don't assert hasOffsets/hasPositions/hasPayloads because they are allowed to be different\n\n    boolean bothHaveFreqs = leftTerms.hasFreqs() && rightTerms.hasFreqs();\n    boolean bothHavePositions = leftTerms.hasPositions() && rightTerms.hasPositions();\n    TermsEnum leftTermsEnum = leftTerms.iterator();\n    TermsEnum rightTermsEnum = rightTerms.iterator();\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true, bothHaveFreqs, bothHavePositions);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely(), bothHaveFreqs, bothHavePositions);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(leftTerms);\n      assertNull(rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n    \n    // NOTE: we don't assert hasOffsets/hasPositions/hasPayloads because they are allowed to be different\n\n    boolean bothHavePositions = leftTerms.hasPositions() && rightTerms.hasPositions();\n    TermsEnum leftTermsEnum = leftTerms.iterator();\n    TermsEnum rightTermsEnum = rightTerms.iterator();\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true, bothHavePositions);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely(), bothHavePositions);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTerms(Terms,Terms,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTerms(Terms,Terms,boolean).mjava","sourceNew":"  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(leftTerms);\n      assertNull(rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n    \n    // NOTE: we don't assert hasOffsets/hasPositions/hasPayloads because they are allowed to be different\n\n    boolean bothHaveFreqs = leftTerms.hasFreqs() && rightTerms.hasFreqs();\n    boolean bothHavePositions = leftTerms.hasPositions() && rightTerms.hasPositions();\n    TermsEnum leftTermsEnum = leftTerms.iterator();\n    TermsEnum rightTermsEnum = rightTerms.iterator();\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true, bothHaveFreqs, bothHavePositions);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely(), bothHaveFreqs, bothHavePositions);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(leftTerms);\n      assertNull(rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n    \n    // NOTE: we don't assert hasOffsets/hasPositions/hasPayloads because they are allowed to be different\n\n    boolean bothHavePositions = leftTerms.hasPositions() && rightTerms.hasPositions();\n    TermsEnum leftTermsEnum = leftTerms.iterator();\n    TermsEnum rightTermsEnum = rightTerms.iterator();\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true, bothHavePositions);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely(), bothHavePositions);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTerms(Terms,Terms,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTerms(Terms,Terms,boolean).mjava","sourceNew":"  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(leftTerms);\n      assertNull(rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n    \n    // NOTE: we don't assert hasOffsets/hasPositions/hasPayloads because they are allowed to be different\n\n    boolean bothHaveFreqs = leftTerms.hasFreqs() && rightTerms.hasFreqs();\n    boolean bothHavePositions = leftTerms.hasPositions() && rightTerms.hasPositions();\n    TermsEnum leftTermsEnum = leftTerms.iterator();\n    TermsEnum rightTermsEnum = rightTerms.iterator();\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true, bothHaveFreqs, bothHavePositions);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely(), bothHaveFreqs, bothHavePositions);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(leftTerms);\n      assertNull(rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n    \n    // NOTE: we don't assert hasOffsets/hasPositions/hasPayloads because they are allowed to be different\n\n    boolean bothHaveFreqs = leftTerms.hasFreqs() && rightTerms.hasFreqs();\n    boolean bothHavePositions = leftTerms.hasPositions() && rightTerms.hasPositions();\n    TermsEnum leftTermsEnum = leftTerms.iterator();\n    TermsEnum rightTermsEnum = rightTerms.iterator();\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true, bothHaveFreqs, bothHavePositions);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely(), bothHaveFreqs, bothHavePositions);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"086ffe31d8fba0110227db122974163709ecc1b4":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","086ffe31d8fba0110227db122974163709ecc1b4"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","35626481458234c265343dd28af158e8b0099068"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99eb4a732d1a908f4636ace52928876136bf1896"],"35626481458234c265343dd28af158e8b0099068":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["086ffe31d8fba0110227db122974163709ecc1b4","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"086ffe31d8fba0110227db122974163709ecc1b4":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["6b4e3cd382d0d075a0f1725649c084bb6510c483","35626481458234c265343dd28af158e8b0099068"],"35626481458234c265343dd28af158e8b0099068":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}