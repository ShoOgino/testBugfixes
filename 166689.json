{"path":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#listAll(Path,Set[String]).mjava","commits":[{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#listAll(Path,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  private static String[] listAll(Path dir, Set<String> skipNames) throws IOException {\n    List<String> entries = new ArrayList<>();\n    \n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir)) {\n      for (Path path : stream) {\n        String name = path.getFileName().toString();\n        if (skipNames.contains(name) == false) {\n          entries.add(name);\n        }\n      }\n    }\n    \n    return entries.toArray(new String[entries.size()]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1","date":1454513757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#listAll(Path,Set[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#listAll(Path,Set[String]).mjava","sourceNew":"  private static String[] listAll(Path dir, Set<String> skipNames) throws IOException {\n    List<String> entries = new ArrayList<>();\n    \n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir)) {\n      for (Path path : stream) {\n        String name = path.getFileName().toString();\n        if (skipNames != null && skipNames.contains(name) == false) {\n          entries.add(name);\n        }\n      }\n    }\n    \n    return entries.toArray(new String[entries.size()]);\n  }\n\n","sourceOld":"  private static String[] listAll(Path dir, Set<String> skipNames) throws IOException {\n    List<String> entries = new ArrayList<>();\n    \n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir)) {\n      for (Path path : stream) {\n        String name = path.getFileName().toString();\n        if (skipNames.contains(name) == false) {\n          entries.add(name);\n        }\n      }\n    }\n    \n    return entries.toArray(new String[entries.size()]);\n  }\n\n","bugFix":null,"bugIntro":["859d1f935597f397e22aaebbfb0530810e4246d2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"44a0466296f4b2d9deac60e3e524628c97aa5191","date":1454532248,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#listAll(Path,Set[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#listAll(Path,Set[String]).mjava","sourceNew":"  private static String[] listAll(Path dir, Set<String> skipNames) throws IOException {\n    List<String> entries = new ArrayList<>();\n    \n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir)) {\n      for (Path path : stream) {\n        String name = path.getFileName().toString();\n        if (skipNames != null && skipNames.contains(name) == false) {\n          entries.add(name);\n        }\n      }\n    }\n    \n    String[] array = entries.toArray(new String[entries.size()]);\n\n    // Don't let filesystem specifics leak out of this abstraction:\n    Arrays.sort(array);\n\n    return array;\n  }\n\n","sourceOld":"  private static String[] listAll(Path dir, Set<String> skipNames) throws IOException {\n    List<String> entries = new ArrayList<>();\n    \n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir)) {\n      for (Path path : stream) {\n        String name = path.getFileName().toString();\n        if (skipNames != null && skipNames.contains(name) == false) {\n          entries.add(name);\n        }\n      }\n    }\n    \n    return entries.toArray(new String[entries.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"34d6426cef006e0c3625cabe7a7ec1c2b08bc501","date":1454683374,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#listAll(Path,Set[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#listAll(Path,Set[String]).mjava","sourceNew":"  private static String[] listAll(Path dir, Set<String> skipNames) throws IOException {\n    List<String> entries = new ArrayList<>();\n    \n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir)) {\n      for (Path path : stream) {\n        String name = path.getFileName().toString();\n        if (skipNames != null && skipNames.contains(name) == false) {\n          entries.add(name);\n        }\n      }\n    }\n    \n    String[] array = entries.toArray(new String[entries.size()]);\n    // Directory.listAll javadocs state that we sort the results here, so we don't let filesystem\n    // specifics leak out of this abstraction:\n    Arrays.sort(array);\n    return array;\n  }\n\n","sourceOld":"  private static String[] listAll(Path dir, Set<String> skipNames) throws IOException {\n    List<String> entries = new ArrayList<>();\n    \n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir)) {\n      for (Path path : stream) {\n        String name = path.getFileName().toString();\n        if (skipNames != null && skipNames.contains(name) == false) {\n          entries.add(name);\n        }\n      }\n    }\n    \n    String[] array = entries.toArray(new String[entries.size()]);\n\n    // Don't let filesystem specifics leak out of this abstraction:\n    Arrays.sort(array);\n\n    return array;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#listAll(Path,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  private static String[] listAll(Path dir, Set<String> skipNames) throws IOException {\n    List<String> entries = new ArrayList<>();\n    \n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir)) {\n      for (Path path : stream) {\n        String name = path.getFileName().toString();\n        if (skipNames != null && skipNames.contains(name) == false) {\n          entries.add(name);\n        }\n      }\n    }\n    \n    String[] array = entries.toArray(new String[entries.size()]);\n    // Directory.listAll javadocs state that we sort the results here, so we don't let filesystem\n    // specifics leak out of this abstraction:\n    Arrays.sort(array);\n    return array;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#listAll(Path,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  private static String[] listAll(Path dir, Set<String> skipNames) throws IOException {\n    List<String> entries = new ArrayList<>();\n    \n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir)) {\n      for (Path path : stream) {\n        String name = path.getFileName().toString();\n        if (skipNames != null && skipNames.contains(name) == false) {\n          entries.add(name);\n        }\n      }\n    }\n    \n    String[] array = entries.toArray(new String[entries.size()]);\n    // Directory.listAll javadocs state that we sort the results here, so we don't let filesystem\n    // specifics leak out of this abstraction:\n    Arrays.sort(array);\n    return array;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":0,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#listAll(Path,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  private static String[] listAll(Path dir, Set<String> skipNames) throws IOException {\n    List<String> entries = new ArrayList<>();\n    \n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir)) {\n      for (Path path : stream) {\n        String name = path.getFileName().toString();\n        if (skipNames != null && skipNames.contains(name) == false) {\n          entries.add(name);\n        }\n      }\n    }\n    \n    String[] array = entries.toArray(new String[entries.size()]);\n    // Directory.listAll javadocs state that we sort the results here, so we don't let filesystem\n    // specifics leak out of this abstraction:\n    Arrays.sort(array);\n    return array;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"859d1f935597f397e22aaebbfb0530810e4246d2","date":1492865374,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#listAll(Path,Set[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#listAll(Path,Set[String]).mjava","sourceNew":"  private static String[] listAll(Path dir, Set<String> skipNames) throws IOException {\n    List<String> entries = new ArrayList<>();\n    \n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir)) {\n      for (Path path : stream) {\n        String name = path.getFileName().toString();\n        if (skipNames == null || skipNames.contains(name) == false) {\n          entries.add(name);\n        }\n      }\n    }\n    \n    String[] array = entries.toArray(new String[entries.size()]);\n    // Directory.listAll javadocs state that we sort the results here, so we don't let filesystem\n    // specifics leak out of this abstraction:\n    Arrays.sort(array);\n    return array;\n  }\n\n","sourceOld":"  private static String[] listAll(Path dir, Set<String> skipNames) throws IOException {\n    List<String> entries = new ArrayList<>();\n    \n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir)) {\n      for (Path path : stream) {\n        String name = path.getFileName().toString();\n        if (skipNames != null && skipNames.contains(name) == false) {\n          entries.add(name);\n        }\n      }\n    }\n    \n    String[] array = entries.toArray(new String[entries.size()]);\n    // Directory.listAll javadocs state that we sort the results here, so we don't let filesystem\n    // specifics leak out of this abstraction:\n    Arrays.sort(array);\n    return array;\n  }\n\n","bugFix":["8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#listAll(Path,Set[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#listAll(Path,Set[String]).mjava","sourceNew":"  private static String[] listAll(Path dir, Set<String> skipNames) throws IOException {\n    List<String> entries = new ArrayList<>();\n    \n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir)) {\n      for (Path path : stream) {\n        String name = path.getFileName().toString();\n        if (skipNames == null || skipNames.contains(name) == false) {\n          entries.add(name);\n        }\n      }\n    }\n    \n    String[] array = entries.toArray(new String[entries.size()]);\n    // Directory.listAll javadocs state that we sort the results here, so we don't let filesystem\n    // specifics leak out of this abstraction:\n    Arrays.sort(array);\n    return array;\n  }\n\n","sourceOld":"  private static String[] listAll(Path dir, Set<String> skipNames) throws IOException {\n    List<String> entries = new ArrayList<>();\n    \n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir)) {\n      for (Path path : stream) {\n        String name = path.getFileName().toString();\n        if (skipNames != null && skipNames.contains(name) == false) {\n          entries.add(name);\n        }\n      }\n    }\n    \n    String[] array = entries.toArray(new String[entries.size()]);\n    // Directory.listAll javadocs state that we sort the results here, so we don't let filesystem\n    // specifics leak out of this abstraction:\n    Arrays.sort(array);\n    return array;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"34d6426cef006e0c3625cabe7a7ec1c2b08bc501":["44a0466296f4b2d9deac60e3e524628c97aa5191"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["5a207d19eac354d649c3f0e2cce070017c78125e","859d1f935597f397e22aaebbfb0530810e4246d2"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"5a207d19eac354d649c3f0e2cce070017c78125e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","34d6426cef006e0c3625cabe7a7ec1c2b08bc501"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b470f36a9372c97283360b1304eacbde22df6c0d"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"44a0466296f4b2d9deac60e3e524628c97aa5191":["8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["859d1f935597f397e22aaebbfb0530810e4246d2"],"859d1f935597f397e22aaebbfb0530810e4246d2":["5a207d19eac354d649c3f0e2cce070017c78125e"]},"commit2Childs":{"34d6426cef006e0c3625cabe7a7ec1c2b08bc501":["b470f36a9372c97283360b1304eacbde22df6c0d"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["44a0466296f4b2d9deac60e3e524628c97aa5191"],"5a207d19eac354d649c3f0e2cce070017c78125e":["e9017cf144952056066919f1ebc7897ff9bd71b1","859d1f935597f397e22aaebbfb0530810e4246d2"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","1e6acbaae7af722f17204ceccf0f7db5753eccf3","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"44a0466296f4b2d9deac60e3e524628c97aa5191":["34d6426cef006e0c3625cabe7a7ec1c2b08bc501"],"859d1f935597f397e22aaebbfb0530810e4246d2":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}