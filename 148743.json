{"path":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean,boolean,long).mjava","commits":[{"id":"e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb","date":1420550360,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean,boolean,long).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean,long).mjava","sourceNew":"  /**\n   * Expert: This constructor accepts an upper limit for the number of bytes that should be reused if this instance is {@link #reset()}.\n   * The payload storage, if used, is unaffected by maxReusuedBytes, however.\n   * @param storeOffsets <code>true</code> if offsets should be stored\n   * @param storePayloads <code>true</code> if payloads should be stored\n   * @param maxReusedBytes the number of bytes that should remain in the internal memory pools after {@link #reset()} is called\n   */\n  MemoryIndex(boolean storeOffsets, boolean storePayloads, long maxReusedBytes) {\n    this.storeOffsets = storeOffsets;\n    this.storePayloads = storePayloads;\n    this.bytesUsed = Counter.newCounter();\n    final int maxBufferedByteBlocks = (int)((maxReusedBytes/2) / ByteBlockPool.BYTE_BLOCK_SIZE );\n    final int maxBufferedIntBlocks = (int) ((maxReusedBytes - (maxBufferedByteBlocks*ByteBlockPool.BYTE_BLOCK_SIZE))/(IntBlockPool.INT_BLOCK_SIZE * RamUsageEstimator.NUM_BYTES_INT));\n    assert (maxBufferedByteBlocks * ByteBlockPool.BYTE_BLOCK_SIZE) + (maxBufferedIntBlocks * IntBlockPool.INT_BLOCK_SIZE * RamUsageEstimator.NUM_BYTES_INT) <= maxReusedBytes;\n    byteBlockPool = new ByteBlockPool(new RecyclingByteBlockAllocator(ByteBlockPool.BYTE_BLOCK_SIZE, maxBufferedByteBlocks, bytesUsed));\n    intBlockPool = new IntBlockPool(new RecyclingIntBlockAllocator(IntBlockPool.INT_BLOCK_SIZE, maxBufferedIntBlocks, bytesUsed));\n    postingsWriter = new SliceWriter(intBlockPool);\n    //TODO refactor BytesRefArray to allow us to apply maxReusedBytes option\n    payloadsBytesRefs = storePayloads ? new BytesRefArray(bytesUsed) : null;\n  }\n\n","sourceOld":"  /**\n   * Expert: This constructor accepts an upper limit for the number of bytes that should be reused if this instance is {@link #reset()}.\n   * @param storeOffsets <code>true</code> if offsets should be stored\n   * @param maxReusedBytes the number of bytes that should remain in the internal memory pools after {@link #reset()} is called\n   */\n  MemoryIndex(boolean storeOffsets, long maxReusedBytes) {\n    this.storeOffsets = storeOffsets;\n    this.bytesUsed = Counter.newCounter();\n    final int maxBufferedByteBlocks = (int)((maxReusedBytes/2) / ByteBlockPool.BYTE_BLOCK_SIZE );\n    final int maxBufferedIntBlocks = (int) ((maxReusedBytes - (maxBufferedByteBlocks*ByteBlockPool.BYTE_BLOCK_SIZE))/(IntBlockPool.INT_BLOCK_SIZE * RamUsageEstimator.NUM_BYTES_INT));\n    assert (maxBufferedByteBlocks * ByteBlockPool.BYTE_BLOCK_SIZE) + (maxBufferedIntBlocks * IntBlockPool.INT_BLOCK_SIZE * RamUsageEstimator.NUM_BYTES_INT) <= maxReusedBytes;\n    byteBlockPool = new ByteBlockPool(new RecyclingByteBlockAllocator(ByteBlockPool.BYTE_BLOCK_SIZE, maxBufferedByteBlocks, bytesUsed));\n    intBlockPool = new IntBlockPool(new RecyclingIntBlockAllocator(IntBlockPool.INT_BLOCK_SIZE, maxBufferedIntBlocks, bytesUsed));\n    postingsWriter = new SliceWriter(intBlockPool);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f226a8b088dd9c8f6ab287a77237c4aa00a238e5","date":1456187572,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean,boolean,long).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean,boolean,long).mjava","sourceNew":"  /**\n   * Expert: This constructor accepts an upper limit for the number of bytes that should be reused if this instance is {@link #reset()}.\n   * The payload storage, if used, is unaffected by maxReusuedBytes, however.\n   * @param storeOffsets <code>true</code> if offsets should be stored\n   * @param storePayloads <code>true</code> if payloads should be stored\n   * @param maxReusedBytes the number of bytes that should remain in the internal memory pools after {@link #reset()} is called\n   */\n  MemoryIndex(boolean storeOffsets, boolean storePayloads, long maxReusedBytes) {\n    this.storeOffsets = storeOffsets;\n    this.storePayloads = storePayloads;\n    this.bytesUsed = Counter.newCounter();\n    final int maxBufferedByteBlocks = (int)((maxReusedBytes/2) / ByteBlockPool.BYTE_BLOCK_SIZE );\n    final int maxBufferedIntBlocks = (int) ((maxReusedBytes - (maxBufferedByteBlocks*ByteBlockPool.BYTE_BLOCK_SIZE))/(IntBlockPool.INT_BLOCK_SIZE * Integer.BYTES));\n    assert (maxBufferedByteBlocks * ByteBlockPool.BYTE_BLOCK_SIZE) + (maxBufferedIntBlocks * IntBlockPool.INT_BLOCK_SIZE * Integer.BYTES) <= maxReusedBytes;\n    byteBlockPool = new ByteBlockPool(new RecyclingByteBlockAllocator(ByteBlockPool.BYTE_BLOCK_SIZE, maxBufferedByteBlocks, bytesUsed));\n    intBlockPool = new IntBlockPool(new RecyclingIntBlockAllocator(IntBlockPool.INT_BLOCK_SIZE, maxBufferedIntBlocks, bytesUsed));\n    postingsWriter = new SliceWriter(intBlockPool);\n    //TODO refactor BytesRefArray to allow us to apply maxReusedBytes option\n    payloadsBytesRefs = storePayloads ? new BytesRefArray(bytesUsed) : null;\n  }\n\n","sourceOld":"  /**\n   * Expert: This constructor accepts an upper limit for the number of bytes that should be reused if this instance is {@link #reset()}.\n   * The payload storage, if used, is unaffected by maxReusuedBytes, however.\n   * @param storeOffsets <code>true</code> if offsets should be stored\n   * @param storePayloads <code>true</code> if payloads should be stored\n   * @param maxReusedBytes the number of bytes that should remain in the internal memory pools after {@link #reset()} is called\n   */\n  MemoryIndex(boolean storeOffsets, boolean storePayloads, long maxReusedBytes) {\n    this.storeOffsets = storeOffsets;\n    this.storePayloads = storePayloads;\n    this.bytesUsed = Counter.newCounter();\n    final int maxBufferedByteBlocks = (int)((maxReusedBytes/2) / ByteBlockPool.BYTE_BLOCK_SIZE );\n    final int maxBufferedIntBlocks = (int) ((maxReusedBytes - (maxBufferedByteBlocks*ByteBlockPool.BYTE_BLOCK_SIZE))/(IntBlockPool.INT_BLOCK_SIZE * RamUsageEstimator.NUM_BYTES_INT));\n    assert (maxBufferedByteBlocks * ByteBlockPool.BYTE_BLOCK_SIZE) + (maxBufferedIntBlocks * IntBlockPool.INT_BLOCK_SIZE * RamUsageEstimator.NUM_BYTES_INT) <= maxReusedBytes;\n    byteBlockPool = new ByteBlockPool(new RecyclingByteBlockAllocator(ByteBlockPool.BYTE_BLOCK_SIZE, maxBufferedByteBlocks, bytesUsed));\n    intBlockPool = new IntBlockPool(new RecyclingIntBlockAllocator(IntBlockPool.INT_BLOCK_SIZE, maxBufferedIntBlocks, bytesUsed));\n    postingsWriter = new SliceWriter(intBlockPool);\n    //TODO refactor BytesRefArray to allow us to apply maxReusedBytes option\n    payloadsBytesRefs = storePayloads ? new BytesRefArray(bytesUsed) : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean,boolean,long).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean,boolean,long).mjava","sourceNew":"  /**\n   * Expert: This constructor accepts an upper limit for the number of bytes that should be reused if this instance is {@link #reset()}.\n   * The payload storage, if used, is unaffected by maxReusuedBytes, however.\n   * @param storeOffsets <code>true</code> if offsets should be stored\n   * @param storePayloads <code>true</code> if payloads should be stored\n   * @param maxReusedBytes the number of bytes that should remain in the internal memory pools after {@link #reset()} is called\n   */\n  MemoryIndex(boolean storeOffsets, boolean storePayloads, long maxReusedBytes) {\n    this.storeOffsets = storeOffsets;\n    this.storePayloads = storePayloads;\n    this.bytesUsed = Counter.newCounter();\n    final int maxBufferedByteBlocks = (int)((maxReusedBytes/2) / ByteBlockPool.BYTE_BLOCK_SIZE );\n    final int maxBufferedIntBlocks = (int) ((maxReusedBytes - (maxBufferedByteBlocks*ByteBlockPool.BYTE_BLOCK_SIZE))/(IntBlockPool.INT_BLOCK_SIZE * Integer.BYTES));\n    assert (maxBufferedByteBlocks * ByteBlockPool.BYTE_BLOCK_SIZE) + (maxBufferedIntBlocks * IntBlockPool.INT_BLOCK_SIZE * Integer.BYTES) <= maxReusedBytes;\n    byteBlockPool = new ByteBlockPool(new RecyclingByteBlockAllocator(ByteBlockPool.BYTE_BLOCK_SIZE, maxBufferedByteBlocks, bytesUsed));\n    intBlockPool = new IntBlockPool(new RecyclingIntBlockAllocator(IntBlockPool.INT_BLOCK_SIZE, maxBufferedIntBlocks, bytesUsed));\n    postingsWriter = new SliceWriter(intBlockPool);\n    //TODO refactor BytesRefArray to allow us to apply maxReusedBytes option\n    payloadsBytesRefs = storePayloads ? new BytesRefArray(bytesUsed) : null;\n  }\n\n","sourceOld":"  /**\n   * Expert: This constructor accepts an upper limit for the number of bytes that should be reused if this instance is {@link #reset()}.\n   * The payload storage, if used, is unaffected by maxReusuedBytes, however.\n   * @param storeOffsets <code>true</code> if offsets should be stored\n   * @param storePayloads <code>true</code> if payloads should be stored\n   * @param maxReusedBytes the number of bytes that should remain in the internal memory pools after {@link #reset()} is called\n   */\n  MemoryIndex(boolean storeOffsets, boolean storePayloads, long maxReusedBytes) {\n    this.storeOffsets = storeOffsets;\n    this.storePayloads = storePayloads;\n    this.bytesUsed = Counter.newCounter();\n    final int maxBufferedByteBlocks = (int)((maxReusedBytes/2) / ByteBlockPool.BYTE_BLOCK_SIZE );\n    final int maxBufferedIntBlocks = (int) ((maxReusedBytes - (maxBufferedByteBlocks*ByteBlockPool.BYTE_BLOCK_SIZE))/(IntBlockPool.INT_BLOCK_SIZE * RamUsageEstimator.NUM_BYTES_INT));\n    assert (maxBufferedByteBlocks * ByteBlockPool.BYTE_BLOCK_SIZE) + (maxBufferedIntBlocks * IntBlockPool.INT_BLOCK_SIZE * RamUsageEstimator.NUM_BYTES_INT) <= maxReusedBytes;\n    byteBlockPool = new ByteBlockPool(new RecyclingByteBlockAllocator(ByteBlockPool.BYTE_BLOCK_SIZE, maxBufferedByteBlocks, bytesUsed));\n    intBlockPool = new IntBlockPool(new RecyclingIntBlockAllocator(IntBlockPool.INT_BLOCK_SIZE, maxBufferedIntBlocks, bytesUsed));\n    postingsWriter = new SliceWriter(intBlockPool);\n    //TODO refactor BytesRefArray to allow us to apply maxReusedBytes option\n    payloadsBytesRefs = storePayloads ? new BytesRefArray(bytesUsed) : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89b68d01c34172936f1aa2a8b9abf0e1bc68415f","date":1486637198,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean,boolean,long).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean,boolean,long).mjava","sourceNew":"  /**\n   * Expert: This constructor accepts an upper limit for the number of bytes that should be reused if this instance is {@link #reset()}.\n   * The payload storage, if used, is unaffected by maxReusuedBytes, however.\n   * @param storeOffsets <code>true</code> if offsets should be stored\n   * @param storePayloads <code>true</code> if payloads should be stored\n   * @param maxReusedBytes the number of bytes that should remain in the internal memory pools after {@link #reset()} is called\n   */\n  MemoryIndex(boolean storeOffsets, boolean storePayloads, long maxReusedBytes) {\n    this.storeOffsets = storeOffsets;\n    this.storePayloads = storePayloads;\n    this.defaultFieldType.setIndexOptions(storeOffsets ?\n        IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    this.defaultFieldType.setStoreTermVectors(true);\n    this.bytesUsed = Counter.newCounter();\n    final int maxBufferedByteBlocks = (int)((maxReusedBytes/2) / ByteBlockPool.BYTE_BLOCK_SIZE );\n    final int maxBufferedIntBlocks = (int) ((maxReusedBytes - (maxBufferedByteBlocks*ByteBlockPool.BYTE_BLOCK_SIZE))/(IntBlockPool.INT_BLOCK_SIZE * Integer.BYTES));\n    assert (maxBufferedByteBlocks * ByteBlockPool.BYTE_BLOCK_SIZE) + (maxBufferedIntBlocks * IntBlockPool.INT_BLOCK_SIZE * Integer.BYTES) <= maxReusedBytes;\n    byteBlockPool = new ByteBlockPool(new RecyclingByteBlockAllocator(ByteBlockPool.BYTE_BLOCK_SIZE, maxBufferedByteBlocks, bytesUsed));\n    intBlockPool = new IntBlockPool(new RecyclingIntBlockAllocator(IntBlockPool.INT_BLOCK_SIZE, maxBufferedIntBlocks, bytesUsed));\n    postingsWriter = new SliceWriter(intBlockPool);\n    //TODO refactor BytesRefArray to allow us to apply maxReusedBytes option\n    payloadsBytesRefs = storePayloads ? new BytesRefArray(bytesUsed) : null;\n  }\n\n","sourceOld":"  /**\n   * Expert: This constructor accepts an upper limit for the number of bytes that should be reused if this instance is {@link #reset()}.\n   * The payload storage, if used, is unaffected by maxReusuedBytes, however.\n   * @param storeOffsets <code>true</code> if offsets should be stored\n   * @param storePayloads <code>true</code> if payloads should be stored\n   * @param maxReusedBytes the number of bytes that should remain in the internal memory pools after {@link #reset()} is called\n   */\n  MemoryIndex(boolean storeOffsets, boolean storePayloads, long maxReusedBytes) {\n    this.storeOffsets = storeOffsets;\n    this.storePayloads = storePayloads;\n    this.bytesUsed = Counter.newCounter();\n    final int maxBufferedByteBlocks = (int)((maxReusedBytes/2) / ByteBlockPool.BYTE_BLOCK_SIZE );\n    final int maxBufferedIntBlocks = (int) ((maxReusedBytes - (maxBufferedByteBlocks*ByteBlockPool.BYTE_BLOCK_SIZE))/(IntBlockPool.INT_BLOCK_SIZE * Integer.BYTES));\n    assert (maxBufferedByteBlocks * ByteBlockPool.BYTE_BLOCK_SIZE) + (maxBufferedIntBlocks * IntBlockPool.INT_BLOCK_SIZE * Integer.BYTES) <= maxReusedBytes;\n    byteBlockPool = new ByteBlockPool(new RecyclingByteBlockAllocator(ByteBlockPool.BYTE_BLOCK_SIZE, maxBufferedByteBlocks, bytesUsed));\n    intBlockPool = new IntBlockPool(new RecyclingIntBlockAllocator(IntBlockPool.INT_BLOCK_SIZE, maxBufferedIntBlocks, bytesUsed));\n    postingsWriter = new SliceWriter(intBlockPool);\n    //TODO refactor BytesRefArray to allow us to apply maxReusedBytes option\n    payloadsBytesRefs = storePayloads ? new BytesRefArray(bytesUsed) : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89b68d01c34172936f1aa2a8b9abf0e1bc68415f":["419a8f52c6635419beb951255cacbbb281044c57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"419a8f52c6635419beb951255cacbbb281044c57":["e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb"],"e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89b68d01c34172936f1aa2a8b9abf0e1bc68415f"]},"commit2Childs":{"89b68d01c34172936f1aa2a8b9abf0e1bc68415f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb"],"419a8f52c6635419beb951255cacbbb281044c57":["89b68d01c34172936f1aa2a8b9abf0e1bc68415f"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["419a8f52c6635419beb951255cacbbb281044c57"],"e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb":["419a8f52c6635419beb951255cacbbb281044c57","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}