{"path":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeGridShapeIntersectsQuery(Shape).mjava","commits":[{"id":"1b0c7ccb2caa10aef8767ac9eabaddd3cca383fd","date":1495828828,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeGridShapeIntersectsQuery(Shape).mjava","pathOld":"/dev/null","sourceNew":"  /** {@link #makeQuery(SpatialArgs)} specialized for the query being a grid square. */\n  protected Query makeGridShapeIntersectsQuery(Shape gridShape) {\n    assert isGridAlignedShape(gridShape);\n    if (isPointsOnly()) {\n      // Awesome; this will be equivalent to a TermQuery.\n      Iterator<Cell> cellIterator = grid.getTreeCellIterator(gridShape, grid.getMaxLevels());\n      // get last cell\n      Cell cell = cellIterator.next();\n      while (cellIterator.hasNext()) {\n        int prevLevel = cell.getLevel();\n        cell = cellIterator.next();\n        assert prevLevel < cell.getLevel();\n      }\n      return new TermQuery(new Term(getFieldName(), cell.getTokenBytesWithLeaf(null)));\n    } else {\n      // Well there could be parent cells. But we can reduce the \"scan level\" which will be slower for a point query.\n      // TODO: AVPTQ will still scan the bottom nonetheless; file an issue to eliminate that\n      return new IntersectsPrefixTreeQuery(\n          gridShape, getFieldName(), grid, getGrid().getMaxLevels(), getGrid().getMaxLevels() + 1);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeGridShapeIntersectsQuery(Shape).mjava","pathOld":"/dev/null","sourceNew":"  /** {@link #makeQuery(SpatialArgs)} specialized for the query being a grid square. */\n  protected Query makeGridShapeIntersectsQuery(Shape gridShape) {\n    assert isGridAlignedShape(gridShape);\n    if (isPointsOnly()) {\n      // Awesome; this will be equivalent to a TermQuery.\n      Iterator<Cell> cellIterator = grid.getTreeCellIterator(gridShape, grid.getMaxLevels());\n      // get last cell\n      Cell cell = cellIterator.next();\n      while (cellIterator.hasNext()) {\n        int prevLevel = cell.getLevel();\n        cell = cellIterator.next();\n        assert prevLevel < cell.getLevel();\n      }\n      return new TermQuery(new Term(getFieldName(), cell.getTokenBytesWithLeaf(null)));\n    } else {\n      // Well there could be parent cells. But we can reduce the \"scan level\" which will be slower for a point query.\n      // TODO: AVPTQ will still scan the bottom nonetheless; file an issue to eliminate that\n      return new IntersectsPrefixTreeQuery(\n          gridShape, getFieldName(), grid, getGrid().getMaxLevels(), getGrid().getMaxLevels() + 1);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3edde389789eabc51c24f0c7d0e6d67983751e84","date":1496681091,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeGridShapeIntersectsQuery(Shape).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeGridShapeIntersectsQuery(Shape).mjava","sourceNew":"  /** {@link #makeQuery(SpatialArgs)} specialized for the query being a grid square. */\n  protected Query makeGridShapeIntersectsQuery(Shape gridShape) {\n    assert isGridAlignedShape(gridShape);\n    if (isPointsOnly()) {\n      // Awesome; this will be equivalent to a TermQuery.\n      Iterator<Cell> cellIterator = grid.getTreeCellIterator(gridShape, grid.getMaxLevels());\n      // get last cell\n      Cell cell = cellIterator.next();\n      while (cellIterator.hasNext()) {\n        int prevLevel = cell.getLevel();\n        cell = cellIterator.next();\n        assert prevLevel < cell.getLevel();\n      }\n      assert cell.isLeaf();\n      return new TermQuery(new Term(getFieldName(), cell.getTokenBytesWithLeaf(null)));\n    } else {\n      // Well there could be parent cells. But we can reduce the \"scan level\" which will be slower for a point query.\n      // TODO: AVPTQ will still scan the bottom nonetheless; file an issue to eliminate that\n      return new IntersectsPrefixTreeQuery(\n          gridShape, getFieldName(), grid, getGrid().getMaxLevels(), getGrid().getMaxLevels() + 1);\n    }\n  }\n\n","sourceOld":"  /** {@link #makeQuery(SpatialArgs)} specialized for the query being a grid square. */\n  protected Query makeGridShapeIntersectsQuery(Shape gridShape) {\n    assert isGridAlignedShape(gridShape);\n    if (isPointsOnly()) {\n      // Awesome; this will be equivalent to a TermQuery.\n      Iterator<Cell> cellIterator = grid.getTreeCellIterator(gridShape, grid.getMaxLevels());\n      // get last cell\n      Cell cell = cellIterator.next();\n      while (cellIterator.hasNext()) {\n        int prevLevel = cell.getLevel();\n        cell = cellIterator.next();\n        assert prevLevel < cell.getLevel();\n      }\n      return new TermQuery(new Term(getFieldName(), cell.getTokenBytesWithLeaf(null)));\n    } else {\n      // Well there could be parent cells. But we can reduce the \"scan level\" which will be slower for a point query.\n      // TODO: AVPTQ will still scan the bottom nonetheless; file an issue to eliminate that\n      return new IntersectsPrefixTreeQuery(\n          gridShape, getFieldName(), grid, getGrid().getMaxLevels(), getGrid().getMaxLevels() + 1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeGridShapeIntersectsQuery(Shape).mjava","pathOld":"/dev/null","sourceNew":"  /** {@link #makeQuery(SpatialArgs)} specialized for the query being a grid square. */\n  protected Query makeGridShapeIntersectsQuery(Shape gridShape) {\n    assert isGridAlignedShape(gridShape);\n    if (isPointsOnly()) {\n      // Awesome; this will be equivalent to a TermQuery.\n      Iterator<Cell> cellIterator = grid.getTreeCellIterator(gridShape, grid.getMaxLevels());\n      // get last cell\n      Cell cell = cellIterator.next();\n      while (cellIterator.hasNext()) {\n        int prevLevel = cell.getLevel();\n        cell = cellIterator.next();\n        assert prevLevel < cell.getLevel();\n      }\n      assert cell.isLeaf();\n      return new TermQuery(new Term(getFieldName(), cell.getTokenBytesWithLeaf(null)));\n    } else {\n      // Well there could be parent cells. But we can reduce the \"scan level\" which will be slower for a point query.\n      // TODO: AVPTQ will still scan the bottom nonetheless; file an issue to eliminate that\n      return new IntersectsPrefixTreeQuery(\n          gridShape, getFieldName(), grid, getGrid().getMaxLevels(), getGrid().getMaxLevels() + 1);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeGridShapeIntersectsQuery(Shape).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/RecursivePrefixTreeStrategy#makeGridShapeIntersectsQuery(Shape).mjava","sourceNew":"  /** {@link #makeQuery(SpatialArgs)} specialized for the query being a grid square. */\n  protected Query makeGridShapeIntersectsQuery(Shape gridShape) {\n    assert isGridAlignedShape(gridShape);\n    if (isPointsOnly()) {\n      // Awesome; this will be equivalent to a TermQuery.\n      Iterator<Cell> cellIterator = grid.getTreeCellIterator(gridShape, grid.getMaxLevels());\n      // get last cell\n      Cell cell = cellIterator.next();\n      while (cellIterator.hasNext()) {\n        int prevLevel = cell.getLevel();\n        cell = cellIterator.next();\n        assert prevLevel < cell.getLevel();\n      }\n      assert cell.isLeaf();\n      return new TermQuery(new Term(getFieldName(), cell.getTokenBytesWithLeaf(null)));\n    } else {\n      // Well there could be parent cells. But we can reduce the \"scan level\" which will be slower for a point query.\n      // TODO: AVPTQ will still scan the bottom nonetheless; file an issue to eliminate that\n      return new IntersectsPrefixTreeQuery(\n          gridShape, getFieldName(), grid, getGrid().getMaxLevels(), getGrid().getMaxLevels() + 1);\n    }\n  }\n\n","sourceOld":"  /** {@link #makeQuery(SpatialArgs)} specialized for the query being a grid square. */\n  protected Query makeGridShapeIntersectsQuery(Shape gridShape) {\n    assert isGridAlignedShape(gridShape);\n    if (isPointsOnly()) {\n      // Awesome; this will be equivalent to a TermQuery.\n      Iterator<Cell> cellIterator = grid.getTreeCellIterator(gridShape, grid.getMaxLevels());\n      // get last cell\n      Cell cell = cellIterator.next();\n      while (cellIterator.hasNext()) {\n        int prevLevel = cell.getLevel();\n        cell = cellIterator.next();\n        assert prevLevel < cell.getLevel();\n      }\n      return new TermQuery(new Term(getFieldName(), cell.getTokenBytesWithLeaf(null)));\n    } else {\n      // Well there could be parent cells. But we can reduce the \"scan level\" which will be slower for a point query.\n      // TODO: AVPTQ will still scan the bottom nonetheless; file an issue to eliminate that\n      return new IntersectsPrefixTreeQuery(\n          gridShape, getFieldName(), grid, getGrid().getMaxLevels(), getGrid().getMaxLevels() + 1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3edde389789eabc51c24f0c7d0e6d67983751e84"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3edde389789eabc51c24f0c7d0e6d67983751e84":["1b0c7ccb2caa10aef8767ac9eabaddd3cca383fd"],"1b0c7ccb2caa10aef8767ac9eabaddd3cca383fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1b0c7ccb2caa10aef8767ac9eabaddd3cca383fd"],"28288370235ed02234a64753cdbf0c6ec096304a":["d1f5728f32a4a256b36cfabd7a2636452f599bb9","3edde389789eabc51c24f0c7d0e6d67983751e84"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","1b0c7ccb2caa10aef8767ac9eabaddd3cca383fd","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"3edde389789eabc51c24f0c7d0e6d67983751e84":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"1b0c7ccb2caa10aef8767ac9eabaddd3cca383fd":["3edde389789eabc51c24f0c7d0e6d67983751e84","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}