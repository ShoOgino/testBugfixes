{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#LuceneTaxonomyWriter(Directory,OpenMode,TaxonomyWriterCache).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#LuceneTaxonomyWriter(Directory,OpenMode,TaxonomyWriterCache).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Construct a Taxonomy writer.\n   * \n   * @param directory\n   *    The {@link Directory} in which to store the taxonomy. Note that\n   *    the taxonomy is written directly to that directory (not to a\n   *    subdirectory of it).\n   * @param openMode\n   *    Specifies how to open a taxonomy for writing: <code>APPEND</code>\n   *    means open an existing index for append (failing if the index does\n   *    not yet exist). <code>CREATE</code> means create a new index (first\n   *    deleting the old one if it already existed).\n   *    <code>APPEND_OR_CREATE</code> appends to an existing index if there\n   *    is one, otherwise it creates a new index.\n   * @param cache\n   *    A {@link TaxonomyWriterCache} implementation which determines\n   *    the in-memory caching policy. See for example\n   *    {@link LruTaxonomyWriterCache} and {@link Cl2oTaxonomyWriterCache}.\n   *    If null or missing, {@link #defaultTaxonomyWriterCache()} is used.\n   * @throws CorruptIndexException\n   *     if the taxonomy is corrupted.\n   * @throws LockObtainFailedException\n   *     if the taxonomy is locked by another writer. If it is known\n   *     that no other concurrent writer is active, the lock might\n   *     have been left around by an old dead process, and should be\n   *     removed using {@link #unlock(Directory)}.\n   * @throws IOException\n   *     if another error occurred.\n   */\n  public LuceneTaxonomyWriter(Directory directory, OpenMode openMode,\n                              TaxonomyWriterCache cache)\n  throws CorruptIndexException, LockObtainFailedException,\n  IOException {\n\n    openLuceneIndex(directory, openMode);\n    reader = null;\n\n    parentStreamField = new Field(Consts.FIELD_PAYLOADS, parentStream);\n    parentStreamField.setOmitNorms(true);\n    fullPathField = new Field(Consts.FULL, \"\", Store.YES, Index.NOT_ANALYZED_NO_NORMS);\n    fullPathField.setOmitTermFreqAndPositions(true);\n\n    this.nextID = indexWriter.maxDoc();\n\n    if (cache==null) {\n      cache = defaultTaxonomyWriterCache();\n    }\n    this.cache = cache;\n\n    if (nextID == 0) {\n      cacheIsComplete = true;\n      // Make sure that the taxonomy always contain the root category\n      // with category id 0.\n      addCategory(new CategoryPath());\n      refreshReader();\n    } else {\n      // There are some categories on the disk, which we have not yet\n      // read into the cache, and therefore the cache is incomplete.\n      // We chose not to read all the categories into the cache now,\n      // to avoid terrible performance when a taxonomy index is opened\n      // to add just a single category. We will do it later, after we\n      // notice a few cache misses.\n      cacheIsComplete = false;\n    }\n    cacheMisses = 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fafd23b8e49a461cdbc22b302dfdea2f2a08d953","e26e3b5080bfb6fcabdc46d0072efe441de1a21b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#LuceneTaxonomyWriter(Directory,OpenMode,TaxonomyWriterCache).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Construct a Taxonomy writer.\n   * \n   * @param directory\n   *    The {@link Directory} in which to store the taxonomy. Note that\n   *    the taxonomy is written directly to that directory (not to a\n   *    subdirectory of it).\n   * @param openMode\n   *    Specifies how to open a taxonomy for writing: <code>APPEND</code>\n   *    means open an existing index for append (failing if the index does\n   *    not yet exist). <code>CREATE</code> means create a new index (first\n   *    deleting the old one if it already existed).\n   *    <code>APPEND_OR_CREATE</code> appends to an existing index if there\n   *    is one, otherwise it creates a new index.\n   * @param cache\n   *    A {@link TaxonomyWriterCache} implementation which determines\n   *    the in-memory caching policy. See for example\n   *    {@link LruTaxonomyWriterCache} and {@link Cl2oTaxonomyWriterCache}.\n   *    If null or missing, {@link #defaultTaxonomyWriterCache()} is used.\n   * @throws CorruptIndexException\n   *     if the taxonomy is corrupted.\n   * @throws LockObtainFailedException\n   *     if the taxonomy is locked by another writer. If it is known\n   *     that no other concurrent writer is active, the lock might\n   *     have been left around by an old dead process, and should be\n   *     removed using {@link #unlock(Directory)}.\n   * @throws IOException\n   *     if another error occurred.\n   */\n  public LuceneTaxonomyWriter(Directory directory, OpenMode openMode,\n                              TaxonomyWriterCache cache)\n  throws CorruptIndexException, LockObtainFailedException,\n  IOException {\n\n    openLuceneIndex(directory, openMode);\n    reader = null;\n\n    parentStreamField = new Field(Consts.FIELD_PAYLOADS, parentStream);\n    parentStreamField.setOmitNorms(true);\n    fullPathField = new Field(Consts.FULL, \"\", Store.YES, Index.NOT_ANALYZED_NO_NORMS);\n    fullPathField.setOmitTermFreqAndPositions(true);\n\n    this.nextID = indexWriter.maxDoc();\n\n    if (cache==null) {\n      cache = defaultTaxonomyWriterCache();\n    }\n    this.cache = cache;\n\n    if (nextID == 0) {\n      cacheIsComplete = true;\n      // Make sure that the taxonomy always contain the root category\n      // with category id 0.\n      addCategory(new CategoryPath());\n      refreshReader();\n    } else {\n      // There are some categories on the disk, which we have not yet\n      // read into the cache, and therefore the cache is incomplete.\n      // We chose not to read all the categories into the cache now,\n      // to avoid terrible performance when a taxonomy index is opened\n      // to add just a single category. We will do it later, after we\n      // notice a few cache misses.\n      cacheIsComplete = false;\n    }\n    cacheMisses = 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#LuceneTaxonomyWriter(Directory,OpenMode,TaxonomyWriterCache).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Construct a Taxonomy writer.\n   * \n   * @param directory\n   *    The {@link Directory} in which to store the taxonomy. Note that\n   *    the taxonomy is written directly to that directory (not to a\n   *    subdirectory of it).\n   * @param openMode\n   *    Specifies how to open a taxonomy for writing: <code>APPEND</code>\n   *    means open an existing index for append (failing if the index does\n   *    not yet exist). <code>CREATE</code> means create a new index (first\n   *    deleting the old one if it already existed).\n   *    <code>APPEND_OR_CREATE</code> appends to an existing index if there\n   *    is one, otherwise it creates a new index.\n   * @param cache\n   *    A {@link TaxonomyWriterCache} implementation which determines\n   *    the in-memory caching policy. See for example\n   *    {@link LruTaxonomyWriterCache} and {@link Cl2oTaxonomyWriterCache}.\n   *    If null or missing, {@link #defaultTaxonomyWriterCache()} is used.\n   * @throws CorruptIndexException\n   *     if the taxonomy is corrupted.\n   * @throws LockObtainFailedException\n   *     if the taxonomy is locked by another writer. If it is known\n   *     that no other concurrent writer is active, the lock might\n   *     have been left around by an old dead process, and should be\n   *     removed using {@link #unlock(Directory)}.\n   * @throws IOException\n   *     if another error occurred.\n   */\n  public LuceneTaxonomyWriter(Directory directory, OpenMode openMode,\n                              TaxonomyWriterCache cache)\n  throws CorruptIndexException, LockObtainFailedException,\n  IOException {\n\n    openLuceneIndex(directory, openMode);\n    reader = null;\n\n    parentStreamField = new Field(Consts.FIELD_PAYLOADS, parentStream);\n    parentStreamField.setOmitNorms(true);\n    fullPathField = new Field(Consts.FULL, \"\", Store.YES, Index.NOT_ANALYZED_NO_NORMS);\n    fullPathField.setOmitTermFreqAndPositions(true);\n\n    this.nextID = indexWriter.maxDoc();\n\n    if (cache==null) {\n      cache = defaultTaxonomyWriterCache();\n    }\n    this.cache = cache;\n\n    if (nextID == 0) {\n      cacheIsComplete = true;\n      // Make sure that the taxonomy always contain the root category\n      // with category id 0.\n      addCategory(new CategoryPath());\n      refreshReader();\n    } else {\n      // There are some categories on the disk, which we have not yet\n      // read into the cache, and therefore the cache is incomplete.\n      // We chose not to read all the categories into the cache now,\n      // to avoid terrible performance when a taxonomy index is opened\n      // to add just a single category. We will do it later, after we\n      // notice a few cache misses.\n      cacheIsComplete = false;\n    }\n    cacheMisses = 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#LuceneTaxonomyWriter(Directory,OpenMode,TaxonomyWriterCache).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#LuceneTaxonomyWriter(Directory,OpenMode,TaxonomyWriterCache).mjava","sourceNew":"  /**\n   * Construct a Taxonomy writer.\n   * \n   * @param directory\n   *    The {@link Directory} in which to store the taxonomy. Note that\n   *    the taxonomy is written directly to that directory (not to a\n   *    subdirectory of it).\n   * @param openMode\n   *    Specifies how to open a taxonomy for writing: <code>APPEND</code>\n   *    means open an existing index for append (failing if the index does\n   *    not yet exist). <code>CREATE</code> means create a new index (first\n   *    deleting the old one if it already existed).\n   *    <code>APPEND_OR_CREATE</code> appends to an existing index if there\n   *    is one, otherwise it creates a new index.\n   * @param cache\n   *    A {@link TaxonomyWriterCache} implementation which determines\n   *    the in-memory caching policy. See for example\n   *    {@link LruTaxonomyWriterCache} and {@link Cl2oTaxonomyWriterCache}.\n   *    If null or missing, {@link #defaultTaxonomyWriterCache()} is used.\n   * @throws CorruptIndexException\n   *     if the taxonomy is corrupted.\n   * @throws LockObtainFailedException\n   *     if the taxonomy is locked by another writer. If it is known\n   *     that no other concurrent writer is active, the lock might\n   *     have been left around by an old dead process, and should be\n   *     removed using {@link #unlock(Directory)}.\n   * @throws IOException\n   *     if another error occurred.\n   */\n  public LuceneTaxonomyWriter(Directory directory, OpenMode openMode,\n                              TaxonomyWriterCache cache)\n  throws CorruptIndexException, LockObtainFailedException,\n  IOException {\n\n    openLuceneIndex(directory, openMode);\n    reader = null;\n\n    parentStreamField = new Field(Consts.FIELD_PAYLOADS, parentStream);\n    parentStreamField.setOmitNorms(true);\n    fullPathField = new Field(Consts.FULL, \"\", Store.YES, Index.NOT_ANALYZED_NO_NORMS);\n    fullPathField.setIndexOptions(IndexOptions.DOCS_ONLY);\n\n    this.nextID = indexWriter.maxDoc();\n\n    if (cache==null) {\n      cache = defaultTaxonomyWriterCache();\n    }\n    this.cache = cache;\n\n    if (nextID == 0) {\n      cacheIsComplete = true;\n      // Make sure that the taxonomy always contain the root category\n      // with category id 0.\n      addCategory(new CategoryPath());\n      refreshReader();\n    } else {\n      // There are some categories on the disk, which we have not yet\n      // read into the cache, and therefore the cache is incomplete.\n      // We chose not to read all the categories into the cache now,\n      // to avoid terrible performance when a taxonomy index is opened\n      // to add just a single category. We will do it later, after we\n      // notice a few cache misses.\n      cacheIsComplete = false;\n    }\n    cacheMisses = 0;\n  }\n\n","sourceOld":"  /**\n   * Construct a Taxonomy writer.\n   * \n   * @param directory\n   *    The {@link Directory} in which to store the taxonomy. Note that\n   *    the taxonomy is written directly to that directory (not to a\n   *    subdirectory of it).\n   * @param openMode\n   *    Specifies how to open a taxonomy for writing: <code>APPEND</code>\n   *    means open an existing index for append (failing if the index does\n   *    not yet exist). <code>CREATE</code> means create a new index (first\n   *    deleting the old one if it already existed).\n   *    <code>APPEND_OR_CREATE</code> appends to an existing index if there\n   *    is one, otherwise it creates a new index.\n   * @param cache\n   *    A {@link TaxonomyWriterCache} implementation which determines\n   *    the in-memory caching policy. See for example\n   *    {@link LruTaxonomyWriterCache} and {@link Cl2oTaxonomyWriterCache}.\n   *    If null or missing, {@link #defaultTaxonomyWriterCache()} is used.\n   * @throws CorruptIndexException\n   *     if the taxonomy is corrupted.\n   * @throws LockObtainFailedException\n   *     if the taxonomy is locked by another writer. If it is known\n   *     that no other concurrent writer is active, the lock might\n   *     have been left around by an old dead process, and should be\n   *     removed using {@link #unlock(Directory)}.\n   * @throws IOException\n   *     if another error occurred.\n   */\n  public LuceneTaxonomyWriter(Directory directory, OpenMode openMode,\n                              TaxonomyWriterCache cache)\n  throws CorruptIndexException, LockObtainFailedException,\n  IOException {\n\n    openLuceneIndex(directory, openMode);\n    reader = null;\n\n    parentStreamField = new Field(Consts.FIELD_PAYLOADS, parentStream);\n    parentStreamField.setOmitNorms(true);\n    fullPathField = new Field(Consts.FULL, \"\", Store.YES, Index.NOT_ANALYZED_NO_NORMS);\n    fullPathField.setOmitTermFreqAndPositions(true);\n\n    this.nextID = indexWriter.maxDoc();\n\n    if (cache==null) {\n      cache = defaultTaxonomyWriterCache();\n    }\n    this.cache = cache;\n\n    if (nextID == 0) {\n      cacheIsComplete = true;\n      // Make sure that the taxonomy always contain the root category\n      // with category id 0.\n      addCategory(new CategoryPath());\n      refreshReader();\n    } else {\n      // There are some categories on the disk, which we have not yet\n      // read into the cache, and therefore the cache is incomplete.\n      // We chose not to read all the categories into the cache now,\n      // to avoid terrible performance when a taxonomy index is opened\n      // to add just a single category. We will do it later, after we\n      // notice a few cache misses.\n      cacheIsComplete = false;\n    }\n    cacheMisses = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#LuceneTaxonomyWriter(Directory,OpenMode,TaxonomyWriterCache).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#LuceneTaxonomyWriter(Directory,OpenMode,TaxonomyWriterCache).mjava","sourceNew":"  /**\n   * Construct a Taxonomy writer.\n   * \n   * @param directory\n   *    The {@link Directory} in which to store the taxonomy. Note that\n   *    the taxonomy is written directly to that directory (not to a\n   *    subdirectory of it).\n   * @param openMode\n   *    Specifies how to open a taxonomy for writing: <code>APPEND</code>\n   *    means open an existing index for append (failing if the index does\n   *    not yet exist). <code>CREATE</code> means create a new index (first\n   *    deleting the old one if it already existed).\n   *    <code>APPEND_OR_CREATE</code> appends to an existing index if there\n   *    is one, otherwise it creates a new index.\n   * @param cache\n   *    A {@link TaxonomyWriterCache} implementation which determines\n   *    the in-memory caching policy. See for example\n   *    {@link LruTaxonomyWriterCache} and {@link Cl2oTaxonomyWriterCache}.\n   *    If null or missing, {@link #defaultTaxonomyWriterCache()} is used.\n   * @throws CorruptIndexException\n   *     if the taxonomy is corrupted.\n   * @throws LockObtainFailedException\n   *     if the taxonomy is locked by another writer. If it is known\n   *     that no other concurrent writer is active, the lock might\n   *     have been left around by an old dead process, and should be\n   *     removed using {@link #unlock(Directory)}.\n   * @throws IOException\n   *     if another error occurred.\n   */\n  public LuceneTaxonomyWriter(Directory directory, OpenMode openMode,\n                              TaxonomyWriterCache cache)\n  throws CorruptIndexException, LockObtainFailedException,\n  IOException {\n\n    openLuceneIndex(directory, openMode);\n    reader = null;\n\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setOmitNorms(true);\n    parentStreamField = new Field(Consts.FIELD_PAYLOADS, ft, parentStream);\n    fullPathField = new Field(Consts.FULL, StringField.TYPE_STORED, \"\");\n\n    this.nextID = indexWriter.maxDoc();\n\n    if (cache==null) {\n      cache = defaultTaxonomyWriterCache();\n    }\n    this.cache = cache;\n\n    if (nextID == 0) {\n      cacheIsComplete = true;\n      // Make sure that the taxonomy always contain the root category\n      // with category id 0.\n      addCategory(new CategoryPath());\n      refreshReader();\n    } else {\n      // There are some categories on the disk, which we have not yet\n      // read into the cache, and therefore the cache is incomplete.\n      // We chose not to read all the categories into the cache now,\n      // to avoid terrible performance when a taxonomy index is opened\n      // to add just a single category. We will do it later, after we\n      // notice a few cache misses.\n      cacheIsComplete = false;\n    }\n    cacheMisses = 0;\n  }\n\n","sourceOld":"  /**\n   * Construct a Taxonomy writer.\n   * \n   * @param directory\n   *    The {@link Directory} in which to store the taxonomy. Note that\n   *    the taxonomy is written directly to that directory (not to a\n   *    subdirectory of it).\n   * @param openMode\n   *    Specifies how to open a taxonomy for writing: <code>APPEND</code>\n   *    means open an existing index for append (failing if the index does\n   *    not yet exist). <code>CREATE</code> means create a new index (first\n   *    deleting the old one if it already existed).\n   *    <code>APPEND_OR_CREATE</code> appends to an existing index if there\n   *    is one, otherwise it creates a new index.\n   * @param cache\n   *    A {@link TaxonomyWriterCache} implementation which determines\n   *    the in-memory caching policy. See for example\n   *    {@link LruTaxonomyWriterCache} and {@link Cl2oTaxonomyWriterCache}.\n   *    If null or missing, {@link #defaultTaxonomyWriterCache()} is used.\n   * @throws CorruptIndexException\n   *     if the taxonomy is corrupted.\n   * @throws LockObtainFailedException\n   *     if the taxonomy is locked by another writer. If it is known\n   *     that no other concurrent writer is active, the lock might\n   *     have been left around by an old dead process, and should be\n   *     removed using {@link #unlock(Directory)}.\n   * @throws IOException\n   *     if another error occurred.\n   */\n  public LuceneTaxonomyWriter(Directory directory, OpenMode openMode,\n                              TaxonomyWriterCache cache)\n  throws CorruptIndexException, LockObtainFailedException,\n  IOException {\n\n    openLuceneIndex(directory, openMode);\n    reader = null;\n\n    parentStreamField = new Field(Consts.FIELD_PAYLOADS, parentStream);\n    parentStreamField.setOmitNorms(true);\n    fullPathField = new Field(Consts.FULL, \"\", Store.YES, Index.NOT_ANALYZED_NO_NORMS);\n    fullPathField.setIndexOptions(IndexOptions.DOCS_ONLY);\n\n    this.nextID = indexWriter.maxDoc();\n\n    if (cache==null) {\n      cache = defaultTaxonomyWriterCache();\n    }\n    this.cache = cache;\n\n    if (nextID == 0) {\n      cacheIsComplete = true;\n      // Make sure that the taxonomy always contain the root category\n      // with category id 0.\n      addCategory(new CategoryPath());\n      refreshReader();\n    } else {\n      // There are some categories on the disk, which we have not yet\n      // read into the cache, and therefore the cache is incomplete.\n      // We chose not to read all the categories into the cache now,\n      // to avoid terrible performance when a taxonomy index is opened\n      // to add just a single category. We will do it later, after we\n      // notice a few cache misses.\n      cacheIsComplete = false;\n    }\n    cacheMisses = 0;\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd","date":1317197236,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#LuceneTaxonomyWriter(Directory,OpenMode,TaxonomyWriterCache).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#LuceneTaxonomyWriter(Directory,OpenMode,TaxonomyWriterCache).mjava","sourceNew":"  /**\n   * Construct a Taxonomy writer.\n   * \n   * @param directory\n   *    The {@link Directory} in which to store the taxonomy. Note that\n   *    the taxonomy is written directly to that directory (not to a\n   *    subdirectory of it).\n   * @param openMode\n   *    Specifies how to open a taxonomy for writing: <code>APPEND</code>\n   *    means open an existing index for append (failing if the index does\n   *    not yet exist). <code>CREATE</code> means create a new index (first\n   *    deleting the old one if it already existed).\n   *    <code>APPEND_OR_CREATE</code> appends to an existing index if there\n   *    is one, otherwise it creates a new index.\n   * @param cache\n   *    A {@link TaxonomyWriterCache} implementation which determines\n   *    the in-memory caching policy. See for example\n   *    {@link LruTaxonomyWriterCache} and {@link Cl2oTaxonomyWriterCache}.\n   *    If null or missing, {@link #defaultTaxonomyWriterCache()} is used.\n   * @throws CorruptIndexException\n   *     if the taxonomy is corrupted.\n   * @throws LockObtainFailedException\n   *     if the taxonomy is locked by another writer. If it is known\n   *     that no other concurrent writer is active, the lock might\n   *     have been left around by an old dead process, and should be\n   *     removed using {@link #unlock(Directory)}.\n   * @throws IOException\n   *     if another error occurred.\n   */\n  public LuceneTaxonomyWriter(Directory directory, OpenMode openMode,\n                              TaxonomyWriterCache cache)\n  throws CorruptIndexException, LockObtainFailedException,\n  IOException {\n\n    openLuceneIndex(directory, openMode);\n    reader = null;\n\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setOmitNorms(true);\n    parentStreamField = new Field(Consts.FIELD_PAYLOADS, parentStream, ft);\n    fullPathField = new Field(Consts.FULL, \"\", StringField.TYPE_STORED);\n\n    this.nextID = indexWriter.maxDoc();\n\n    if (cache==null) {\n      cache = defaultTaxonomyWriterCache();\n    }\n    this.cache = cache;\n\n    if (nextID == 0) {\n      cacheIsComplete = true;\n      // Make sure that the taxonomy always contain the root category\n      // with category id 0.\n      addCategory(new CategoryPath());\n      refreshReader();\n    } else {\n      // There are some categories on the disk, which we have not yet\n      // read into the cache, and therefore the cache is incomplete.\n      // We chose not to read all the categories into the cache now,\n      // to avoid terrible performance when a taxonomy index is opened\n      // to add just a single category. We will do it later, after we\n      // notice a few cache misses.\n      cacheIsComplete = false;\n    }\n    cacheMisses = 0;\n  }\n\n","sourceOld":"  /**\n   * Construct a Taxonomy writer.\n   * \n   * @param directory\n   *    The {@link Directory} in which to store the taxonomy. Note that\n   *    the taxonomy is written directly to that directory (not to a\n   *    subdirectory of it).\n   * @param openMode\n   *    Specifies how to open a taxonomy for writing: <code>APPEND</code>\n   *    means open an existing index for append (failing if the index does\n   *    not yet exist). <code>CREATE</code> means create a new index (first\n   *    deleting the old one if it already existed).\n   *    <code>APPEND_OR_CREATE</code> appends to an existing index if there\n   *    is one, otherwise it creates a new index.\n   * @param cache\n   *    A {@link TaxonomyWriterCache} implementation which determines\n   *    the in-memory caching policy. See for example\n   *    {@link LruTaxonomyWriterCache} and {@link Cl2oTaxonomyWriterCache}.\n   *    If null or missing, {@link #defaultTaxonomyWriterCache()} is used.\n   * @throws CorruptIndexException\n   *     if the taxonomy is corrupted.\n   * @throws LockObtainFailedException\n   *     if the taxonomy is locked by another writer. If it is known\n   *     that no other concurrent writer is active, the lock might\n   *     have been left around by an old dead process, and should be\n   *     removed using {@link #unlock(Directory)}.\n   * @throws IOException\n   *     if another error occurred.\n   */\n  public LuceneTaxonomyWriter(Directory directory, OpenMode openMode,\n                              TaxonomyWriterCache cache)\n  throws CorruptIndexException, LockObtainFailedException,\n  IOException {\n\n    openLuceneIndex(directory, openMode);\n    reader = null;\n\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setOmitNorms(true);\n    parentStreamField = new Field(Consts.FIELD_PAYLOADS, ft, parentStream);\n    fullPathField = new Field(Consts.FULL, StringField.TYPE_STORED, \"\");\n\n    this.nextID = indexWriter.maxDoc();\n\n    if (cache==null) {\n      cache = defaultTaxonomyWriterCache();\n    }\n    this.cache = cache;\n\n    if (nextID == 0) {\n      cacheIsComplete = true;\n      // Make sure that the taxonomy always contain the root category\n      // with category id 0.\n      addCategory(new CategoryPath());\n      refreshReader();\n    } else {\n      // There are some categories on the disk, which we have not yet\n      // read into the cache, and therefore the cache is incomplete.\n      // We chose not to read all the categories into the cache now,\n      // to avoid terrible performance when a taxonomy index is opened\n      // to add just a single category. We will do it later, after we\n      // notice a few cache misses.\n      cacheIsComplete = false;\n    }\n    cacheMisses = 0;\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#DirectoryTaxonomyWriter(Directory,OpenMode,TaxonomyWriterCache).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#LuceneTaxonomyWriter(Directory,OpenMode,TaxonomyWriterCache).mjava","sourceNew":"  /**\n   * Construct a Taxonomy writer.\n   * \n   * @param directory\n   *    The {@link Directory} in which to store the taxonomy. Note that\n   *    the taxonomy is written directly to that directory (not to a\n   *    subdirectory of it).\n   * @param openMode\n   *    Specifies how to open a taxonomy for writing: <code>APPEND</code>\n   *    means open an existing index for append (failing if the index does\n   *    not yet exist). <code>CREATE</code> means create a new index (first\n   *    deleting the old one if it already existed).\n   *    <code>APPEND_OR_CREATE</code> appends to an existing index if there\n   *    is one, otherwise it creates a new index.\n   * @param cache\n   *    A {@link TaxonomyWriterCache} implementation which determines\n   *    the in-memory caching policy. See for example\n   *    {@link LruTaxonomyWriterCache} and {@link Cl2oTaxonomyWriterCache}.\n   *    If null or missing, {@link #defaultTaxonomyWriterCache()} is used.\n   * @throws CorruptIndexException\n   *     if the taxonomy is corrupted.\n   * @throws LockObtainFailedException\n   *     if the taxonomy is locked by another writer. If it is known\n   *     that no other concurrent writer is active, the lock might\n   *     have been left around by an old dead process, and should be\n   *     removed using {@link #unlock(Directory)}.\n   * @throws IOException\n   *     if another error occurred.\n   */\n  public DirectoryTaxonomyWriter(Directory directory, OpenMode openMode,\n                              TaxonomyWriterCache cache)\n  throws CorruptIndexException, LockObtainFailedException,\n  IOException {\n\n    openIndexWriter(directory, openMode);\n    reader = null;\n\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setOmitNorms(true);\n    parentStreamField = new Field(Consts.FIELD_PAYLOADS, parentStream, ft);\n    fullPathField = new Field(Consts.FULL, \"\", StringField.TYPE_STORED);\n\n    this.nextID = indexWriter.maxDoc();\n\n    if (cache==null) {\n      cache = defaultTaxonomyWriterCache();\n    }\n    this.cache = cache;\n\n    if (nextID == 0) {\n      cacheIsComplete = true;\n      // Make sure that the taxonomy always contain the root category\n      // with category id 0.\n      addCategory(new CategoryPath());\n      refreshReader();\n    } else {\n      // There are some categories on the disk, which we have not yet\n      // read into the cache, and therefore the cache is incomplete.\n      // We chose not to read all the categories into the cache now,\n      // to avoid terrible performance when a taxonomy index is opened\n      // to add just a single category. We will do it later, after we\n      // notice a few cache misses.\n      cacheIsComplete = false;\n    }\n    cacheMisses = 0;\n  }\n\n","sourceOld":"  /**\n   * Construct a Taxonomy writer.\n   * \n   * @param directory\n   *    The {@link Directory} in which to store the taxonomy. Note that\n   *    the taxonomy is written directly to that directory (not to a\n   *    subdirectory of it).\n   * @param openMode\n   *    Specifies how to open a taxonomy for writing: <code>APPEND</code>\n   *    means open an existing index for append (failing if the index does\n   *    not yet exist). <code>CREATE</code> means create a new index (first\n   *    deleting the old one if it already existed).\n   *    <code>APPEND_OR_CREATE</code> appends to an existing index if there\n   *    is one, otherwise it creates a new index.\n   * @param cache\n   *    A {@link TaxonomyWriterCache} implementation which determines\n   *    the in-memory caching policy. See for example\n   *    {@link LruTaxonomyWriterCache} and {@link Cl2oTaxonomyWriterCache}.\n   *    If null or missing, {@link #defaultTaxonomyWriterCache()} is used.\n   * @throws CorruptIndexException\n   *     if the taxonomy is corrupted.\n   * @throws LockObtainFailedException\n   *     if the taxonomy is locked by another writer. If it is known\n   *     that no other concurrent writer is active, the lock might\n   *     have been left around by an old dead process, and should be\n   *     removed using {@link #unlock(Directory)}.\n   * @throws IOException\n   *     if another error occurred.\n   */\n  public LuceneTaxonomyWriter(Directory directory, OpenMode openMode,\n                              TaxonomyWriterCache cache)\n  throws CorruptIndexException, LockObtainFailedException,\n  IOException {\n\n    openLuceneIndex(directory, openMode);\n    reader = null;\n\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setOmitNorms(true);\n    parentStreamField = new Field(Consts.FIELD_PAYLOADS, parentStream, ft);\n    fullPathField = new Field(Consts.FULL, \"\", StringField.TYPE_STORED);\n\n    this.nextID = indexWriter.maxDoc();\n\n    if (cache==null) {\n      cache = defaultTaxonomyWriterCache();\n    }\n    this.cache = cache;\n\n    if (nextID == 0) {\n      cacheIsComplete = true;\n      // Make sure that the taxonomy always contain the root category\n      // with category id 0.\n      addCategory(new CategoryPath());\n      refreshReader();\n    } else {\n      // There are some categories on the disk, which we have not yet\n      // read into the cache, and therefore the cache is incomplete.\n      // We chose not to read all the categories into the cache now,\n      // to avoid terrible performance when a taxonomy index is opened\n      // to add just a single category. We will do it later, after we\n      // notice a few cache misses.\n      cacheIsComplete = false;\n    }\n    cacheMisses = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}