{"path":"solr/src/test/org/apache/solr/client/solrj/response/DocumentAnalysisResponseTest#testSetResponse().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/response/DocumentAnalysisResponseTest#testSetResponse().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests the {@link DocumentAnalysisResponse#setResponse(org.apache.solr.common.util.NamedList)} method\n   */\n  @Test\n  public void testSetResponse() throws Exception {\n\n    // the parsing of the analysis phases is already tested in the AnalysisResponseBaseTest. So we can just fake\n    // the phases list here and use it.\n    final List<AnalysisResponseBase.AnalysisPhase> phases = new ArrayList<AnalysisResponseBase.AnalysisPhase>(1);\n    AnalysisResponseBase.AnalysisPhase expectedPhase = new AnalysisResponseBase.AnalysisPhase(\"Tokenizer\");\n    phases.add(expectedPhase);\n\n    NamedList responseNL = buildResponse();\n    DocumentAnalysisResponse response = new DocumentAnalysisResponse() {\n\n      @Override\n      protected List<AnalysisPhase> buildPhases(NamedList<Object> phaseNL) {\n        return phases;\n      }\n    };\n\n    response.setResponse(responseNL);\n\n    assertEquals(1, response.getDocumentAnalysesCount());\n\n    DocumentAnalysisResponse.DocumentAnalysis documentAnalysis = response.getDocumentAnalysis(\"1\");\n    assertEquals(\"1\", documentAnalysis.getDocumentKey());\n    assertEquals(3, documentAnalysis.getFieldAnalysesCount());\n\n    DocumentAnalysisResponse.FieldAnalysis fieldAnalysis = documentAnalysis.getFieldAnalysis(\"id\");\n    assertEquals(\"id\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    AnalysisResponseBase.AnalysisPhase phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"1\"));\n    phase = fieldAnalysis.getIndexPhases(\"1\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"name\");\n    assertEquals(\"name\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(2, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 1\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 1\").iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 2\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 2\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"text\");\n    assertEquals(\"text\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"text value\"));\n    phase = fieldAnalysis.getIndexPhases(\"text value\").iterator().next();\n    assertSame(expectedPhase, phase);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/DocumentAnalysisResponseTest#testSetResponse().mjava","sourceNew":null,"sourceOld":"  /**\n   * Tests the {@link DocumentAnalysisResponse#setResponse(org.apache.solr.common.util.NamedList)} method\n   */\n  @Test\n  public void testSetResponse() throws Exception {\n\n    // the parsing of the analysis phases is already tested in the AnalysisResponseBaseTest. So we can just fake\n    // the phases list here and use it.\n    final List<AnalysisResponseBase.AnalysisPhase> phases = new ArrayList<AnalysisResponseBase.AnalysisPhase>(1);\n    AnalysisResponseBase.AnalysisPhase expectedPhase = new AnalysisResponseBase.AnalysisPhase(\"Tokenizer\");\n    phases.add(expectedPhase);\n\n    NamedList responseNL = buildResponse();\n    DocumentAnalysisResponse response = new DocumentAnalysisResponse() {\n\n      @Override\n      protected List<AnalysisPhase> buildPhases(NamedList<Object> phaseNL) {\n        return phases;\n      }\n    };\n\n    response.setResponse(responseNL);\n\n    assertEquals(1, response.getDocumentAnalysesCount());\n\n    DocumentAnalysisResponse.DocumentAnalysis documentAnalysis = response.getDocumentAnalysis(\"1\");\n    assertEquals(\"1\", documentAnalysis.getDocumentKey());\n    assertEquals(3, documentAnalysis.getFieldAnalysesCount());\n\n    DocumentAnalysisResponse.FieldAnalysis fieldAnalysis = documentAnalysis.getFieldAnalysis(\"id\");\n    assertEquals(\"id\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    AnalysisResponseBase.AnalysisPhase phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"1\"));\n    phase = fieldAnalysis.getIndexPhases(\"1\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"name\");\n    assertEquals(\"name\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(2, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 1\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 1\").iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 2\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 2\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"text\");\n    assertEquals(\"text\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"text value\"));\n    phase = fieldAnalysis.getIndexPhases(\"text value\").iterator().next();\n    assertSame(expectedPhase, phase);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/response/DocumentAnalysisResponseTest#testSetResponse().mjava","pathOld":"src/test/org/apache/solr/client/solrj/response/DocumentAnalysisResponseTest#testSetResponse().mjava","sourceNew":"  /**\n   * Tests the {@link DocumentAnalysisResponse#setResponse(org.apache.solr.common.util.NamedList)} method\n   */\n  @Test\n  public void testSetResponse() throws Exception {\n\n    // the parsing of the analysis phases is already tested in the AnalysisResponseBaseTest. So we can just fake\n    // the phases list here and use it.\n    final List<AnalysisResponseBase.AnalysisPhase> phases = new ArrayList<AnalysisResponseBase.AnalysisPhase>(1);\n    AnalysisResponseBase.AnalysisPhase expectedPhase = new AnalysisResponseBase.AnalysisPhase(\"Tokenizer\");\n    phases.add(expectedPhase);\n\n    NamedList responseNL = buildResponse();\n    DocumentAnalysisResponse response = new DocumentAnalysisResponse() {\n\n      @Override\n      protected List<AnalysisPhase> buildPhases(NamedList<Object> phaseNL) {\n        return phases;\n      }\n    };\n\n    response.setResponse(responseNL);\n\n    assertEquals(1, response.getDocumentAnalysesCount());\n\n    DocumentAnalysisResponse.DocumentAnalysis documentAnalysis = response.getDocumentAnalysis(\"1\");\n    assertEquals(\"1\", documentAnalysis.getDocumentKey());\n    assertEquals(3, documentAnalysis.getFieldAnalysesCount());\n\n    DocumentAnalysisResponse.FieldAnalysis fieldAnalysis = documentAnalysis.getFieldAnalysis(\"id\");\n    assertEquals(\"id\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    AnalysisResponseBase.AnalysisPhase phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"1\"));\n    phase = fieldAnalysis.getIndexPhases(\"1\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"name\");\n    assertEquals(\"name\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(2, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 1\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 1\").iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 2\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 2\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"text\");\n    assertEquals(\"text\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"text value\"));\n    phase = fieldAnalysis.getIndexPhases(\"text value\").iterator().next();\n    assertSame(expectedPhase, phase);\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link DocumentAnalysisResponse#setResponse(org.apache.solr.common.util.NamedList)} method\n   */\n  @Test\n  public void testSetResponse() throws Exception {\n\n    // the parsing of the analysis phases is already tested in the AnalysisResponseBaseTest. So we can just fake\n    // the phases list here and use it.\n    final List<AnalysisResponseBase.AnalysisPhase> phases = new ArrayList<AnalysisResponseBase.AnalysisPhase>(1);\n    AnalysisResponseBase.AnalysisPhase expectedPhase = new AnalysisResponseBase.AnalysisPhase(\"Tokenizer\");\n    phases.add(expectedPhase);\n\n    NamedList responseNL = buildResponse();\n    DocumentAnalysisResponse response = new DocumentAnalysisResponse() {\n\n      @Override\n      protected List<AnalysisPhase> buildPhases(NamedList<Object> phaseNL) {\n        return phases;\n      }\n    };\n\n    response.setResponse(responseNL);\n\n    assertEquals(1, response.getDocumentAnalysesCount());\n\n    DocumentAnalysisResponse.DocumentAnalysis documentAnalysis = response.getDocumentAnalysis(\"1\");\n    assertEquals(\"1\", documentAnalysis.getDocumentKey());\n    assertEquals(3, documentAnalysis.getFieldAnalysesCount());\n\n    DocumentAnalysisResponse.FieldAnalysis fieldAnalysis = documentAnalysis.getFieldAnalysis(\"id\");\n    assertEquals(\"id\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    AnalysisResponseBase.AnalysisPhase phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"1\"));\n    phase = fieldAnalysis.getIndexPhases(\"1\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"name\");\n    assertEquals(\"name\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(2, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 1\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 1\").iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 2\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 2\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"text\");\n    assertEquals(\"text\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"text value\"));\n    phase = fieldAnalysis.getIndexPhases(\"text value\").iterator().next();\n    assertSame(expectedPhase, phase);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/response/DocumentAnalysisResponseTest#testSetResponse().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests the {@link DocumentAnalysisResponse#setResponse(org.apache.solr.common.util.NamedList)} method\n   */\n  @Test\n  public void testSetResponse() throws Exception {\n\n    // the parsing of the analysis phases is already tested in the AnalysisResponseBaseTest. So we can just fake\n    // the phases list here and use it.\n    final List<AnalysisResponseBase.AnalysisPhase> phases = new ArrayList<AnalysisResponseBase.AnalysisPhase>(1);\n    AnalysisResponseBase.AnalysisPhase expectedPhase = new AnalysisResponseBase.AnalysisPhase(\"Tokenizer\");\n    phases.add(expectedPhase);\n\n    NamedList responseNL = buildResponse();\n    DocumentAnalysisResponse response = new DocumentAnalysisResponse() {\n\n      @Override\n      protected List<AnalysisPhase> buildPhases(NamedList<Object> phaseNL) {\n        return phases;\n      }\n    };\n\n    response.setResponse(responseNL);\n\n    assertEquals(1, response.getDocumentAnalysesCount());\n\n    DocumentAnalysisResponse.DocumentAnalysis documentAnalysis = response.getDocumentAnalysis(\"1\");\n    assertEquals(\"1\", documentAnalysis.getDocumentKey());\n    assertEquals(3, documentAnalysis.getFieldAnalysesCount());\n\n    DocumentAnalysisResponse.FieldAnalysis fieldAnalysis = documentAnalysis.getFieldAnalysis(\"id\");\n    assertEquals(\"id\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    AnalysisResponseBase.AnalysisPhase phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"1\"));\n    phase = fieldAnalysis.getIndexPhases(\"1\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"name\");\n    assertEquals(\"name\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(2, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 1\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 1\").iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 2\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 2\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"text\");\n    assertEquals(\"text\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"text value\"));\n    phase = fieldAnalysis.getIndexPhases(\"text value\").iterator().next();\n    assertSame(expectedPhase, phase);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"511214d1f01046f3592f60f5e55bf7abe7a611d6","date":1294452469,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/response/DocumentAnalysisResponseTest#testSetResponse().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/DocumentAnalysisResponseTest#testSetResponse().mjava","sourceNew":"  /**\n   * Tests the {@link DocumentAnalysisResponse#setResponse(org.apache.solr.common.util.NamedList)} method\n   */\n  @Test\n  public void testSetResponse() throws Exception {\n\n    // the parsing of the analysis phases is already tested in the AnalysisResponseBaseTest. So we can just fake\n    // the phases list here and use it.\n    final List<AnalysisResponseBase.AnalysisPhase> phases = new ArrayList<AnalysisResponseBase.AnalysisPhase>(1);\n    AnalysisResponseBase.AnalysisPhase expectedPhase = new AnalysisResponseBase.AnalysisPhase(\"Tokenizer\");\n    phases.add(expectedPhase);\n\n    NamedList responseNL = buildResponse();\n    DocumentAnalysisResponse response = new DocumentAnalysisResponse() {\n\n      @Override\n      protected List<AnalysisPhase> buildPhases(NamedList<List<NamedList<Object>>> phaseNL) {\n        return phases;\n      }\n    };\n\n    response.setResponse(responseNL);\n\n    assertEquals(1, response.getDocumentAnalysesCount());\n\n    DocumentAnalysisResponse.DocumentAnalysis documentAnalysis = response.getDocumentAnalysis(\"1\");\n    assertEquals(\"1\", documentAnalysis.getDocumentKey());\n    assertEquals(3, documentAnalysis.getFieldAnalysesCount());\n\n    DocumentAnalysisResponse.FieldAnalysis fieldAnalysis = documentAnalysis.getFieldAnalysis(\"id\");\n    assertEquals(\"id\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    AnalysisResponseBase.AnalysisPhase phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"1\"));\n    phase = fieldAnalysis.getIndexPhases(\"1\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"name\");\n    assertEquals(\"name\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(2, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 1\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 1\").iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 2\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 2\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"text\");\n    assertEquals(\"text\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"text value\"));\n    phase = fieldAnalysis.getIndexPhases(\"text value\").iterator().next();\n    assertSame(expectedPhase, phase);\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link DocumentAnalysisResponse#setResponse(org.apache.solr.common.util.NamedList)} method\n   */\n  @Test\n  public void testSetResponse() throws Exception {\n\n    // the parsing of the analysis phases is already tested in the AnalysisResponseBaseTest. So we can just fake\n    // the phases list here and use it.\n    final List<AnalysisResponseBase.AnalysisPhase> phases = new ArrayList<AnalysisResponseBase.AnalysisPhase>(1);\n    AnalysisResponseBase.AnalysisPhase expectedPhase = new AnalysisResponseBase.AnalysisPhase(\"Tokenizer\");\n    phases.add(expectedPhase);\n\n    NamedList responseNL = buildResponse();\n    DocumentAnalysisResponse response = new DocumentAnalysisResponse() {\n\n      @Override\n      protected List<AnalysisPhase> buildPhases(NamedList<Object> phaseNL) {\n        return phases;\n      }\n    };\n\n    response.setResponse(responseNL);\n\n    assertEquals(1, response.getDocumentAnalysesCount());\n\n    DocumentAnalysisResponse.DocumentAnalysis documentAnalysis = response.getDocumentAnalysis(\"1\");\n    assertEquals(\"1\", documentAnalysis.getDocumentKey());\n    assertEquals(3, documentAnalysis.getFieldAnalysesCount());\n\n    DocumentAnalysisResponse.FieldAnalysis fieldAnalysis = documentAnalysis.getFieldAnalysis(\"id\");\n    assertEquals(\"id\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    AnalysisResponseBase.AnalysisPhase phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"1\"));\n    phase = fieldAnalysis.getIndexPhases(\"1\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"name\");\n    assertEquals(\"name\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(2, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 1\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 1\").iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 2\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 2\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"text\");\n    assertEquals(\"text\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"text value\"));\n    phase = fieldAnalysis.getIndexPhases(\"text value\").iterator().next();\n    assertSame(expectedPhase, phase);\n  }\n\n","bugFix":null,"bugIntro":["2bc81b8298bf74e3d0182a5f4aeffc183e92b459","2bc81b8298bf74e3d0182a5f4aeffc183e92b459","2bc81b8298bf74e3d0182a5f4aeffc183e92b459"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/response/DocumentAnalysisResponseTest#testSetResponse().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/DocumentAnalysisResponseTest#testSetResponse().mjava","sourceNew":"  /**\n   * Tests the {@link DocumentAnalysisResponse#setResponse(org.apache.solr.common.util.NamedList)} method\n   */\n  @Test\n  public void testSetResponse() throws Exception {\n\n    // the parsing of the analysis phases is already tested in the AnalysisResponseBaseTest. So we can just fake\n    // the phases list here and use it.\n    final List<AnalysisResponseBase.AnalysisPhase> phases = new ArrayList<AnalysisResponseBase.AnalysisPhase>(1);\n    AnalysisResponseBase.AnalysisPhase expectedPhase = new AnalysisResponseBase.AnalysisPhase(\"Tokenizer\");\n    phases.add(expectedPhase);\n\n    NamedList responseNL = buildResponse();\n    DocumentAnalysisResponse response = new DocumentAnalysisResponse() {\n\n      @Override\n      protected List<AnalysisPhase> buildPhases(NamedList<List<NamedList<Object>>> phaseNL) {\n        return phases;\n      }\n    };\n\n    response.setResponse(responseNL);\n\n    assertEquals(1, response.getDocumentAnalysesCount());\n\n    DocumentAnalysisResponse.DocumentAnalysis documentAnalysis = response.getDocumentAnalysis(\"1\");\n    assertEquals(\"1\", documentAnalysis.getDocumentKey());\n    assertEquals(3, documentAnalysis.getFieldAnalysesCount());\n\n    DocumentAnalysisResponse.FieldAnalysis fieldAnalysis = documentAnalysis.getFieldAnalysis(\"id\");\n    assertEquals(\"id\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    AnalysisResponseBase.AnalysisPhase phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"1\"));\n    phase = fieldAnalysis.getIndexPhases(\"1\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"name\");\n    assertEquals(\"name\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(2, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 1\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 1\").iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 2\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 2\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"text\");\n    assertEquals(\"text\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"text value\"));\n    phase = fieldAnalysis.getIndexPhases(\"text value\").iterator().next();\n    assertSame(expectedPhase, phase);\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link DocumentAnalysisResponse#setResponse(org.apache.solr.common.util.NamedList)} method\n   */\n  @Test\n  public void testSetResponse() throws Exception {\n\n    // the parsing of the analysis phases is already tested in the AnalysisResponseBaseTest. So we can just fake\n    // the phases list here and use it.\n    final List<AnalysisResponseBase.AnalysisPhase> phases = new ArrayList<AnalysisResponseBase.AnalysisPhase>(1);\n    AnalysisResponseBase.AnalysisPhase expectedPhase = new AnalysisResponseBase.AnalysisPhase(\"Tokenizer\");\n    phases.add(expectedPhase);\n\n    NamedList responseNL = buildResponse();\n    DocumentAnalysisResponse response = new DocumentAnalysisResponse() {\n\n      @Override\n      protected List<AnalysisPhase> buildPhases(NamedList<Object> phaseNL) {\n        return phases;\n      }\n    };\n\n    response.setResponse(responseNL);\n\n    assertEquals(1, response.getDocumentAnalysesCount());\n\n    DocumentAnalysisResponse.DocumentAnalysis documentAnalysis = response.getDocumentAnalysis(\"1\");\n    assertEquals(\"1\", documentAnalysis.getDocumentKey());\n    assertEquals(3, documentAnalysis.getFieldAnalysesCount());\n\n    DocumentAnalysisResponse.FieldAnalysis fieldAnalysis = documentAnalysis.getFieldAnalysis(\"id\");\n    assertEquals(\"id\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    AnalysisResponseBase.AnalysisPhase phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"1\"));\n    phase = fieldAnalysis.getIndexPhases(\"1\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"name\");\n    assertEquals(\"name\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(2, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 1\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 1\").iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 2\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 2\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"text\");\n    assertEquals(\"text\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"text value\"));\n    phase = fieldAnalysis.getIndexPhases(\"text value\").iterator().next();\n    assertSame(expectedPhase, phase);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/response/DocumentAnalysisResponseTest#testSetResponse().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/DocumentAnalysisResponseTest#testSetResponse().mjava","sourceNew":"  /**\n   * Tests the {@link DocumentAnalysisResponse#setResponse(org.apache.solr.common.util.NamedList)} method\n   */\n  @Test\n  public void testSetResponse() throws Exception {\n\n    // the parsing of the analysis phases is already tested in the AnalysisResponseBaseTest. So we can just fake\n    // the phases list here and use it.\n    final List<AnalysisResponseBase.AnalysisPhase> phases = new ArrayList<AnalysisResponseBase.AnalysisPhase>(1);\n    AnalysisResponseBase.AnalysisPhase expectedPhase = new AnalysisResponseBase.AnalysisPhase(\"Tokenizer\");\n    phases.add(expectedPhase);\n\n    NamedList responseNL = buildResponse();\n    DocumentAnalysisResponse response = new DocumentAnalysisResponse() {\n\n      @Override\n      protected List<AnalysisPhase> buildPhases(NamedList<List<NamedList<Object>>> phaseNL) {\n        return phases;\n      }\n    };\n\n    response.setResponse(responseNL);\n\n    assertEquals(1, response.getDocumentAnalysesCount());\n\n    DocumentAnalysisResponse.DocumentAnalysis documentAnalysis = response.getDocumentAnalysis(\"1\");\n    assertEquals(\"1\", documentAnalysis.getDocumentKey());\n    assertEquals(3, documentAnalysis.getFieldAnalysesCount());\n\n    DocumentAnalysisResponse.FieldAnalysis fieldAnalysis = documentAnalysis.getFieldAnalysis(\"id\");\n    assertEquals(\"id\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    AnalysisResponseBase.AnalysisPhase phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"1\"));\n    phase = fieldAnalysis.getIndexPhases(\"1\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"name\");\n    assertEquals(\"name\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(2, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 1\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 1\").iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 2\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 2\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"text\");\n    assertEquals(\"text\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"text value\"));\n    phase = fieldAnalysis.getIndexPhases(\"text value\").iterator().next();\n    assertSame(expectedPhase, phase);\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link DocumentAnalysisResponse#setResponse(org.apache.solr.common.util.NamedList)} method\n   */\n  @Test\n  public void testSetResponse() throws Exception {\n\n    // the parsing of the analysis phases is already tested in the AnalysisResponseBaseTest. So we can just fake\n    // the phases list here and use it.\n    final List<AnalysisResponseBase.AnalysisPhase> phases = new ArrayList<AnalysisResponseBase.AnalysisPhase>(1);\n    AnalysisResponseBase.AnalysisPhase expectedPhase = new AnalysisResponseBase.AnalysisPhase(\"Tokenizer\");\n    phases.add(expectedPhase);\n\n    NamedList responseNL = buildResponse();\n    DocumentAnalysisResponse response = new DocumentAnalysisResponse() {\n\n      @Override\n      protected List<AnalysisPhase> buildPhases(NamedList<Object> phaseNL) {\n        return phases;\n      }\n    };\n\n    response.setResponse(responseNL);\n\n    assertEquals(1, response.getDocumentAnalysesCount());\n\n    DocumentAnalysisResponse.DocumentAnalysis documentAnalysis = response.getDocumentAnalysis(\"1\");\n    assertEquals(\"1\", documentAnalysis.getDocumentKey());\n    assertEquals(3, documentAnalysis.getFieldAnalysesCount());\n\n    DocumentAnalysisResponse.FieldAnalysis fieldAnalysis = documentAnalysis.getFieldAnalysis(\"id\");\n    assertEquals(\"id\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    AnalysisResponseBase.AnalysisPhase phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"1\"));\n    phase = fieldAnalysis.getIndexPhases(\"1\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"name\");\n    assertEquals(\"name\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(2, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 1\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 1\").iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 2\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 2\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"text\");\n    assertEquals(\"text\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"text value\"));\n    phase = fieldAnalysis.getIndexPhases(\"text value\").iterator().next();\n    assertSame(expectedPhase, phase);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/DocumentAnalysisResponseTest#testSetResponse().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/DocumentAnalysisResponseTest#testSetResponse().mjava","sourceNew":"  /**\n   * Tests the {@link DocumentAnalysisResponse#setResponse(org.apache.solr.common.util.NamedList)} method\n   */\n  @Test\n  public void testSetResponse() throws Exception {\n\n    // the parsing of the analysis phases is already tested in the AnalysisResponseBaseTest. So we can just fake\n    // the phases list here and use it.\n    final List<AnalysisResponseBase.AnalysisPhase> phases = new ArrayList<AnalysisResponseBase.AnalysisPhase>(1);\n    AnalysisResponseBase.AnalysisPhase expectedPhase = new AnalysisResponseBase.AnalysisPhase(\"Tokenizer\");\n    phases.add(expectedPhase);\n\n    NamedList responseNL = buildResponse();\n    DocumentAnalysisResponse response = new DocumentAnalysisResponse() {\n\n      @Override\n      protected List<AnalysisPhase> buildPhases(NamedList<List<NamedList<Object>>> phaseNL) {\n        return phases;\n      }\n    };\n\n    response.setResponse(responseNL);\n\n    assertEquals(1, response.getDocumentAnalysesCount());\n\n    DocumentAnalysisResponse.DocumentAnalysis documentAnalysis = response.getDocumentAnalysis(\"1\");\n    assertEquals(\"1\", documentAnalysis.getDocumentKey());\n    assertEquals(3, documentAnalysis.getFieldAnalysesCount());\n\n    DocumentAnalysisResponse.FieldAnalysis fieldAnalysis = documentAnalysis.getFieldAnalysis(\"id\");\n    assertEquals(\"id\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    AnalysisResponseBase.AnalysisPhase phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"1\"));\n    phase = fieldAnalysis.getIndexPhases(\"1\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"name\");\n    assertEquals(\"name\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(2, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 1\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 1\").iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 2\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 2\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"text\");\n    assertEquals(\"text\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"text value\"));\n    phase = fieldAnalysis.getIndexPhases(\"text value\").iterator().next();\n    assertSame(expectedPhase, phase);\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link DocumentAnalysisResponse#setResponse(org.apache.solr.common.util.NamedList)} method\n   */\n  @Test\n  public void testSetResponse() throws Exception {\n\n    // the parsing of the analysis phases is already tested in the AnalysisResponseBaseTest. So we can just fake\n    // the phases list here and use it.\n    final List<AnalysisResponseBase.AnalysisPhase> phases = new ArrayList<AnalysisResponseBase.AnalysisPhase>(1);\n    AnalysisResponseBase.AnalysisPhase expectedPhase = new AnalysisResponseBase.AnalysisPhase(\"Tokenizer\");\n    phases.add(expectedPhase);\n\n    NamedList responseNL = buildResponse();\n    DocumentAnalysisResponse response = new DocumentAnalysisResponse() {\n\n      @Override\n      protected List<AnalysisPhase> buildPhases(NamedList<List<NamedList<Object>>> phaseNL) {\n        return phases;\n      }\n    };\n\n    response.setResponse(responseNL);\n\n    assertEquals(1, response.getDocumentAnalysesCount());\n\n    DocumentAnalysisResponse.DocumentAnalysis documentAnalysis = response.getDocumentAnalysis(\"1\");\n    assertEquals(\"1\", documentAnalysis.getDocumentKey());\n    assertEquals(3, documentAnalysis.getFieldAnalysesCount());\n\n    DocumentAnalysisResponse.FieldAnalysis fieldAnalysis = documentAnalysis.getFieldAnalysis(\"id\");\n    assertEquals(\"id\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    AnalysisResponseBase.AnalysisPhase phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"1\"));\n    phase = fieldAnalysis.getIndexPhases(\"1\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"name\");\n    assertEquals(\"name\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(2, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 1\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 1\").iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 2\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 2\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"text\");\n    assertEquals(\"text\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"text value\"));\n    phase = fieldAnalysis.getIndexPhases(\"text value\").iterator().next();\n    assertSame(expectedPhase, phase);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/DocumentAnalysisResponseTest#testSetResponse().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/DocumentAnalysisResponseTest#testSetResponse().mjava","sourceNew":"  /**\n   * Tests the {@link DocumentAnalysisResponse#setResponse(org.apache.solr.common.util.NamedList)} method\n   */\n  @Test\n  public void testSetResponse() throws Exception {\n\n    // the parsing of the analysis phases is already tested in the AnalysisResponseBaseTest. So we can just fake\n    // the phases list here and use it.\n    final List<AnalysisResponseBase.AnalysisPhase> phases = new ArrayList<AnalysisResponseBase.AnalysisPhase>(1);\n    AnalysisResponseBase.AnalysisPhase expectedPhase = new AnalysisResponseBase.AnalysisPhase(\"Tokenizer\");\n    phases.add(expectedPhase);\n\n    NamedList responseNL = buildResponse();\n    DocumentAnalysisResponse response = new DocumentAnalysisResponse() {\n\n      @Override\n      protected List<AnalysisPhase> buildPhases(NamedList<List<NamedList<Object>>> phaseNL) {\n        return phases;\n      }\n    };\n\n    response.setResponse(responseNL);\n\n    assertEquals(1, response.getDocumentAnalysesCount());\n\n    DocumentAnalysisResponse.DocumentAnalysis documentAnalysis = response.getDocumentAnalysis(\"1\");\n    assertEquals(\"1\", documentAnalysis.getDocumentKey());\n    assertEquals(3, documentAnalysis.getFieldAnalysesCount());\n\n    DocumentAnalysisResponse.FieldAnalysis fieldAnalysis = documentAnalysis.getFieldAnalysis(\"id\");\n    assertEquals(\"id\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    AnalysisResponseBase.AnalysisPhase phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"1\"));\n    phase = fieldAnalysis.getIndexPhases(\"1\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"name\");\n    assertEquals(\"name\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(2, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 1\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 1\").iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 2\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 2\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"text\");\n    assertEquals(\"text\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"text value\"));\n    phase = fieldAnalysis.getIndexPhases(\"text value\").iterator().next();\n    assertSame(expectedPhase, phase);\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link DocumentAnalysisResponse#setResponse(org.apache.solr.common.util.NamedList)} method\n   */\n  @Test\n  public void testSetResponse() throws Exception {\n\n    // the parsing of the analysis phases is already tested in the AnalysisResponseBaseTest. So we can just fake\n    // the phases list here and use it.\n    final List<AnalysisResponseBase.AnalysisPhase> phases = new ArrayList<AnalysisResponseBase.AnalysisPhase>(1);\n    AnalysisResponseBase.AnalysisPhase expectedPhase = new AnalysisResponseBase.AnalysisPhase(\"Tokenizer\");\n    phases.add(expectedPhase);\n\n    NamedList responseNL = buildResponse();\n    DocumentAnalysisResponse response = new DocumentAnalysisResponse() {\n\n      @Override\n      protected List<AnalysisPhase> buildPhases(NamedList<List<NamedList<Object>>> phaseNL) {\n        return phases;\n      }\n    };\n\n    response.setResponse(responseNL);\n\n    assertEquals(1, response.getDocumentAnalysesCount());\n\n    DocumentAnalysisResponse.DocumentAnalysis documentAnalysis = response.getDocumentAnalysis(\"1\");\n    assertEquals(\"1\", documentAnalysis.getDocumentKey());\n    assertEquals(3, documentAnalysis.getFieldAnalysesCount());\n\n    DocumentAnalysisResponse.FieldAnalysis fieldAnalysis = documentAnalysis.getFieldAnalysis(\"id\");\n    assertEquals(\"id\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    AnalysisResponseBase.AnalysisPhase phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"1\"));\n    phase = fieldAnalysis.getIndexPhases(\"1\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"name\");\n    assertEquals(\"name\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(2, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 1\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 1\").iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 2\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 2\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"text\");\n    assertEquals(\"text\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"text value\"));\n    phase = fieldAnalysis.getIndexPhases(\"text value\").iterator().next();\n    assertSame(expectedPhase, phase);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/DocumentAnalysisResponseTest#testSetResponse().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/DocumentAnalysisResponseTest#testSetResponse().mjava","sourceNew":"  /**\n   * Tests the {@link DocumentAnalysisResponse#setResponse(org.apache.solr.common.util.NamedList)} method\n   */\n  @Test\n  public void testSetResponse() throws Exception {\n\n    // the parsing of the analysis phases is already tested in the AnalysisResponseBaseTest. So we can just fake\n    // the phases list here and use it.\n    final List<AnalysisResponseBase.AnalysisPhase> phases = new ArrayList<AnalysisResponseBase.AnalysisPhase>(1);\n    AnalysisResponseBase.AnalysisPhase expectedPhase = new AnalysisResponseBase.AnalysisPhase(\"Tokenizer\");\n    phases.add(expectedPhase);\n\n    NamedList responseNL = buildResponse();\n    DocumentAnalysisResponse response = new DocumentAnalysisResponse() {\n\n      @Override\n      protected List<AnalysisPhase> buildPhases(NamedList<List<NamedList<Object>>> phaseNL) {\n        return phases;\n      }\n    };\n\n    response.setResponse(responseNL);\n\n    assertEquals(1, response.getDocumentAnalysesCount());\n\n    DocumentAnalysisResponse.DocumentAnalysis documentAnalysis = response.getDocumentAnalysis(\"1\");\n    assertEquals(\"1\", documentAnalysis.getDocumentKey());\n    assertEquals(3, documentAnalysis.getFieldAnalysesCount());\n\n    DocumentAnalysisResponse.FieldAnalysis fieldAnalysis = documentAnalysis.getFieldAnalysis(\"id\");\n    assertEquals(\"id\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    AnalysisResponseBase.AnalysisPhase phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"1\"));\n    phase = fieldAnalysis.getIndexPhases(\"1\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"name\");\n    assertEquals(\"name\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(2, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 1\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 1\").iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 2\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 2\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"text\");\n    assertEquals(\"text\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"text value\"));\n    phase = fieldAnalysis.getIndexPhases(\"text value\").iterator().next();\n    assertSame(expectedPhase, phase);\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link DocumentAnalysisResponse#setResponse(org.apache.solr.common.util.NamedList)} method\n   */\n  @Test\n  public void testSetResponse() throws Exception {\n\n    // the parsing of the analysis phases is already tested in the AnalysisResponseBaseTest. So we can just fake\n    // the phases list here and use it.\n    final List<AnalysisResponseBase.AnalysisPhase> phases = new ArrayList<AnalysisResponseBase.AnalysisPhase>(1);\n    AnalysisResponseBase.AnalysisPhase expectedPhase = new AnalysisResponseBase.AnalysisPhase(\"Tokenizer\");\n    phases.add(expectedPhase);\n\n    NamedList responseNL = buildResponse();\n    DocumentAnalysisResponse response = new DocumentAnalysisResponse() {\n\n      @Override\n      protected List<AnalysisPhase> buildPhases(NamedList<List<NamedList<Object>>> phaseNL) {\n        return phases;\n      }\n    };\n\n    response.setResponse(responseNL);\n\n    assertEquals(1, response.getDocumentAnalysesCount());\n\n    DocumentAnalysisResponse.DocumentAnalysis documentAnalysis = response.getDocumentAnalysis(\"1\");\n    assertEquals(\"1\", documentAnalysis.getDocumentKey());\n    assertEquals(3, documentAnalysis.getFieldAnalysesCount());\n\n    DocumentAnalysisResponse.FieldAnalysis fieldAnalysis = documentAnalysis.getFieldAnalysis(\"id\");\n    assertEquals(\"id\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    AnalysisResponseBase.AnalysisPhase phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"1\"));\n    phase = fieldAnalysis.getIndexPhases(\"1\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"name\");\n    assertEquals(\"name\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(2, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 1\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 1\").iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"name value 2\"));\n    phase = fieldAnalysis.getIndexPhases(\"name value 2\").iterator().next();\n    assertSame(expectedPhase, phase);\n\n    fieldAnalysis = documentAnalysis.getFieldAnalysis(\"text\");\n    assertEquals(\"text\", fieldAnalysis.getFieldName());\n    assertEquals(1, fieldAnalysis.getQueryPhasesCount());\n    phase = fieldAnalysis.getQueryPhases().iterator().next();\n    assertSame(expectedPhase, phase);\n    assertEquals(1, fieldAnalysis.getValueCount());\n    assertEquals(1, fieldAnalysis.getIndexPhasesCount(\"text value\"));\n    phase = fieldAnalysis.getIndexPhases(\"text value\").iterator().next();\n    assertSame(expectedPhase, phase);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["511214d1f01046f3592f60f5e55bf7abe7a611d6","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"511214d1f01046f3592f60f5e55bf7abe7a611d6":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["511214d1f01046f3592f60f5e55bf7abe7a611d6"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","511214d1f01046f3592f60f5e55bf7abe7a611d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["511214d1f01046f3592f60f5e55bf7abe7a611d6"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["1da8d55113b689b06716246649de6f62430f15c0","511214d1f01046f3592f60f5e55bf7abe7a611d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"511214d1f01046f3592f60f5e55bf7abe7a611d6":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["511214d1f01046f3592f60f5e55bf7abe7a611d6","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}