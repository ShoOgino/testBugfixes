{"path":"solr/core/src/test/org/apache/solr/core/TestBackupRepositoryFactory#testRepositoryConfig().mjava","commits":[{"id":"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","date":1466705968,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestBackupRepositoryFactory#testRepositoryConfig().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRepositoryConfig() {\n    PluginInfo[] plugins = new PluginInfo[1];\n\n    {\n      Map<String, Object> attrs = new HashMap<>();\n      attrs.put(CoreAdminParams.NAME, \"repo1\");\n      attrs.put(FieldType.CLASS_NAME, LocalFileSystemRepository.class.getName());\n      attrs.put(\"default\" , \"true\");\n      attrs.put(ZkStateReader.BACKUP_LOCATION, \"/tmp\");\n      plugins[0] = new PluginInfo(\"repository\", attrs);\n    }\n\n    BackupRepositoryFactory f = new BackupRepositoryFactory(plugins);\n\n    {\n      BackupRepository repo = f.newInstance(loader);\n\n      assertTrue(repo instanceof LocalFileSystemRepository);\n      assertEquals(\"/tmp\", repo.getConfigProperty(ZkStateReader.BACKUP_LOCATION));\n    }\n\n    {\n      BackupRepository repo = f.newInstance(loader, \"repo1\");\n\n      assertTrue(repo instanceof LocalFileSystemRepository);\n      assertEquals(\"/tmp\", repo.getConfigProperty(ZkStateReader.BACKUP_LOCATION));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2e0874ad402c6721aa4fd13232f38ff0be227c6b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c623a7f72be34d6c45bee682028c50327d9e4b7","date":1467791293,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestBackupRepositoryFactory#testRepositoryConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestBackupRepositoryFactory#testRepositoryConfig().mjava","sourceNew":"  @Test\n  public void testRepositoryConfig() {\n    PluginInfo[] plugins = new PluginInfo[1];\n\n    {\n      Map<String, Object> attrs = new HashMap<>();\n      attrs.put(CoreAdminParams.NAME, \"repo1\");\n      attrs.put(FieldType.CLASS_NAME, LocalFileSystemRepository.class.getName());\n      attrs.put(\"default\" , \"true\");\n      attrs.put(\"location\", \"/tmp\");\n      plugins[0] = new PluginInfo(\"repository\", attrs);\n    }\n\n    BackupRepositoryFactory f = new BackupRepositoryFactory(plugins);\n\n    {\n      BackupRepository repo = f.newInstance(loader);\n\n      assertTrue(repo instanceof LocalFileSystemRepository);\n      assertEquals(\"/tmp\", repo.getConfigProperty(\"location\"));\n    }\n\n    {\n      BackupRepository repo = f.newInstance(loader, \"repo1\");\n\n      assertTrue(repo instanceof LocalFileSystemRepository);\n      assertEquals(\"/tmp\", repo.getConfigProperty(\"location\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRepositoryConfig() {\n    PluginInfo[] plugins = new PluginInfo[1];\n\n    {\n      Map<String, Object> attrs = new HashMap<>();\n      attrs.put(CoreAdminParams.NAME, \"repo1\");\n      attrs.put(FieldType.CLASS_NAME, LocalFileSystemRepository.class.getName());\n      attrs.put(\"default\" , \"true\");\n      attrs.put(ZkStateReader.BACKUP_LOCATION, \"/tmp\");\n      plugins[0] = new PluginInfo(\"repository\", attrs);\n    }\n\n    BackupRepositoryFactory f = new BackupRepositoryFactory(plugins);\n\n    {\n      BackupRepository repo = f.newInstance(loader);\n\n      assertTrue(repo instanceof LocalFileSystemRepository);\n      assertEquals(\"/tmp\", repo.getConfigProperty(ZkStateReader.BACKUP_LOCATION));\n    }\n\n    {\n      BackupRepository repo = f.newInstance(loader, \"repo1\");\n\n      assertTrue(repo instanceof LocalFileSystemRepository);\n      assertEquals(\"/tmp\", repo.getConfigProperty(ZkStateReader.BACKUP_LOCATION));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestBackupRepositoryFactory#testRepositoryConfig().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRepositoryConfig() {\n    PluginInfo[] plugins = new PluginInfo[1];\n\n    {\n      Map<String, Object> attrs = new HashMap<>();\n      attrs.put(CoreAdminParams.NAME, \"repo1\");\n      attrs.put(FieldType.CLASS_NAME, LocalFileSystemRepository.class.getName());\n      attrs.put(\"default\" , \"true\");\n      attrs.put(\"location\", \"/tmp\");\n      plugins[0] = new PluginInfo(\"repository\", attrs);\n    }\n\n    BackupRepositoryFactory f = new BackupRepositoryFactory(plugins);\n\n    {\n      BackupRepository repo = f.newInstance(loader);\n\n      assertTrue(repo instanceof LocalFileSystemRepository);\n      assertEquals(\"/tmp\", repo.getConfigProperty(\"location\"));\n    }\n\n    {\n      BackupRepository repo = f.newInstance(loader, \"repo1\");\n\n      assertTrue(repo instanceof LocalFileSystemRepository);\n      assertEquals(\"/tmp\", repo.getConfigProperty(\"location\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e0874ad402c6721aa4fd13232f38ff0be227c6b","date":1563703488,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestBackupRepositoryFactory#testRepositoryConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestBackupRepositoryFactory#testRepositoryConfig().mjava","sourceNew":"  @Test\n  public void testRepositoryConfig() {\n    PluginInfo[] plugins = new PluginInfo[2];\n\n    {\n      Map<String, Object> attrs = new HashMap<>();\n      attrs.put(CoreAdminParams.NAME, \"repo1\");\n      attrs.put(FieldType.CLASS_NAME, LocalFileSystemRepository.class.getName());\n      attrs.put(\"default\" , \"true\");\n      attrs.put(\"location\", \"/tmp\");\n      plugins[0] = new PluginInfo(\"repository\", attrs);\n    }\n    {\n      Map<String, Object> attrs = new HashMap<>();\n      attrs.put(CoreAdminParams.NAME, \"boom\");\n      attrs.put(FieldType.CLASS_NAME, HdfsBackupRepository.class.getName());\n      attrs.put(\"location\", \"/tmp\");\n      plugins[1] = new PluginInfo(\"repository\", attrs);\n    }\n    Collections.shuffle(Arrays.asList(plugins), random());\n\n    BackupRepositoryFactory f = new BackupRepositoryFactory(plugins);\n\n    {\n      BackupRepository repo = f.newInstance(loader);\n\n      assertTrue(repo instanceof LocalFileSystemRepository);\n      assertEquals(\"/tmp\", repo.getConfigProperty(\"location\"));\n    }\n\n    {\n      BackupRepository repo = f.newInstance(loader, \"repo1\");\n\n      assertTrue(repo instanceof LocalFileSystemRepository);\n      assertEquals(\"/tmp\", repo.getConfigProperty(\"location\"));\n    }\n    \n    {\n      try {\n        BackupRepository repo = f.newInstance(loader, \"boom\");\n        fail();\n      } catch (Exception e) {\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRepositoryConfig() {\n    PluginInfo[] plugins = new PluginInfo[1];\n\n    {\n      Map<String, Object> attrs = new HashMap<>();\n      attrs.put(CoreAdminParams.NAME, \"repo1\");\n      attrs.put(FieldType.CLASS_NAME, LocalFileSystemRepository.class.getName());\n      attrs.put(\"default\" , \"true\");\n      attrs.put(\"location\", \"/tmp\");\n      plugins[0] = new PluginInfo(\"repository\", attrs);\n    }\n\n    BackupRepositoryFactory f = new BackupRepositoryFactory(plugins);\n\n    {\n      BackupRepository repo = f.newInstance(loader);\n\n      assertTrue(repo instanceof LocalFileSystemRepository);\n      assertEquals(\"/tmp\", repo.getConfigProperty(\"location\"));\n    }\n\n    {\n      BackupRepository repo = f.newInstance(loader, \"repo1\");\n\n      assertTrue(repo instanceof LocalFileSystemRepository);\n      assertEquals(\"/tmp\", repo.getConfigProperty(\"location\"));\n    }\n  }\n\n","bugFix":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c623a7f72be34d6c45bee682028c50327d9e4b7":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2e0874ad402c6721aa4fd13232f38ff0be227c6b":["4c623a7f72be34d6c45bee682028c50327d9e4b7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4c623a7f72be34d6c45bee682028c50327d9e4b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2e0874ad402c6721aa4fd13232f38ff0be227c6b"]},"commit2Childs":{"4c623a7f72be34d6c45bee682028c50327d9e4b7":["2e0874ad402c6721aa4fd13232f38ff0be227c6b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["4c623a7f72be34d6c45bee682028c50327d9e4b7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"2e0874ad402c6721aa4fd13232f38ff0be227c6b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}