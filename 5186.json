{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#getHyphenationTree(Reader).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#getHyphenationTree(Reader).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#getHyphenationTree(Reader).mjava","sourceNew":"  /**\n   * Create a hyphenator tree\n   * \n   * @param hyphenationReader the reader of the XML grammar to load from\n   * @return An object representing the hyphenation patterns\n   * @throws Exception\n   */\n  public static HyphenationTree getHyphenationTree(Reader hyphenationReader)\n      throws Exception {\n    HyphenationTree tree = new HyphenationTree();\n\n    tree.loadPatterns(new InputSource(hyphenationReader));\n\n    return tree;\n  }\n\n","sourceOld":"  /**\n   * Create a hyphenator tree\n   * \n   * @param hyphenationReader the reader of the XML grammar to load from\n   * @return An object representing the hyphenation patterns\n   * @throws Exception\n   */\n  public static HyphenationTree getHyphenationTree(Reader hyphenationReader)\n      throws Exception {\n    HyphenationTree tree = new HyphenationTree();\n\n    tree.loadPatterns(new InputSource(hyphenationReader));\n\n    return tree;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8b28a7124e9fa13cdb9b0c79da424c3d05f4217","date":1288533406,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#getHyphenationTree(Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#getHyphenationTree(Reader).mjava","sourceNew":"  /**\n   * Create a hyphenator tree\n   * \n   * @param hyphenationReader the reader of the XML grammar to load from\n   * @return An object representing the hyphenation patterns\n   * @throws Exception\n   * @deprecated Don't use Readers with fixed charset to load XML files, unless programatically created.\n   * Use {@link #getHyphenationTree(InputSource)} instead, where you can supply default charset and input\n   * stream, if you like.\n   */\n  @Deprecated\n  public static HyphenationTree getHyphenationTree(Reader hyphenationReader)\n      throws Exception {\n    final InputSource is = new InputSource(hyphenationReader);\n    // we need this to load the DTD in very old parsers (like the one in JDK 1.4).\n    // The DTD itsself is provided via EntityResolver, so it should always load, but\n    // some parsers still want to have a base URL (Crimson).\n    is.setSystemId(\"urn:java:\" + HyphenationTree.class.getName());\n    return getHyphenationTree(is);\n  }\n\n","sourceOld":"  /**\n   * Create a hyphenator tree\n   * \n   * @param hyphenationReader the reader of the XML grammar to load from\n   * @return An object representing the hyphenation patterns\n   * @throws Exception\n   */\n  public static HyphenationTree getHyphenationTree(Reader hyphenationReader)\n      throws Exception {\n    HyphenationTree tree = new HyphenationTree();\n\n    tree.loadPatterns(new InputSource(hyphenationReader));\n\n    return tree;\n  }\n\n","bugFix":["dbb53146e3651ed4ebca43f69ee26f9150c6cb5a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#getHyphenationTree(Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#getHyphenationTree(Reader).mjava","sourceNew":"  /**\n   * Create a hyphenator tree\n   * \n   * @param hyphenationReader the reader of the XML grammar to load from\n   * @return An object representing the hyphenation patterns\n   * @throws Exception\n   * @deprecated Don't use Readers with fixed charset to load XML files, unless programatically created.\n   * Use {@link #getHyphenationTree(InputSource)} instead, where you can supply default charset and input\n   * stream, if you like.\n   */\n  @Deprecated\n  public static HyphenationTree getHyphenationTree(Reader hyphenationReader)\n      throws Exception {\n    final InputSource is = new InputSource(hyphenationReader);\n    // we need this to load the DTD in very old parsers (like the one in JDK 1.4).\n    // The DTD itsself is provided via EntityResolver, so it should always load, but\n    // some parsers still want to have a base URL (Crimson).\n    is.setSystemId(\"urn:java:\" + HyphenationTree.class.getName());\n    return getHyphenationTree(is);\n  }\n\n","sourceOld":"  /**\n   * Create a hyphenator tree\n   * \n   * @param hyphenationReader the reader of the XML grammar to load from\n   * @return An object representing the hyphenation patterns\n   * @throws Exception\n   */\n  public static HyphenationTree getHyphenationTree(Reader hyphenationReader)\n      throws Exception {\n    HyphenationTree tree = new HyphenationTree();\n\n    tree.loadPatterns(new InputSource(hyphenationReader));\n\n    return tree;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#getHyphenationTree(Reader).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a hyphenator tree\n   * \n   * @param hyphenationReader the reader of the XML grammar to load from\n   * @return An object representing the hyphenation patterns\n   * @throws Exception\n   * @deprecated Don't use Readers with fixed charset to load XML files, unless programatically created.\n   * Use {@link #getHyphenationTree(InputSource)} instead, where you can supply default charset and input\n   * stream, if you like.\n   */\n  @Deprecated\n  public static HyphenationTree getHyphenationTree(Reader hyphenationReader)\n      throws Exception {\n    final InputSource is = new InputSource(hyphenationReader);\n    // we need this to load the DTD in very old parsers (like the one in JDK 1.4).\n    // The DTD itsself is provided via EntityResolver, so it should always load, but\n    // some parsers still want to have a base URL (Crimson).\n    is.setSystemId(\"urn:java:\" + HyphenationTree.class.getName());\n    return getHyphenationTree(is);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#getHyphenationTree(Reader).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a hyphenator tree\n   * \n   * @param hyphenationReader the reader of the XML grammar to load from\n   * @return An object representing the hyphenation patterns\n   * @throws Exception\n   * @deprecated Don't use Readers with fixed charset to load XML files, unless programatically created.\n   * Use {@link #getHyphenationTree(InputSource)} instead, where you can supply default charset and input\n   * stream, if you like.\n   */\n  @Deprecated\n  public static HyphenationTree getHyphenationTree(Reader hyphenationReader)\n      throws Exception {\n    final InputSource is = new InputSource(hyphenationReader);\n    // we need this to load the DTD in very old parsers (like the one in JDK 1.4).\n    // The DTD itsself is provided via EntityResolver, so it should always load, but\n    // some parsers still want to have a base URL (Crimson).\n    is.setSystemId(\"urn:java:\" + HyphenationTree.class.getName());\n    return getHyphenationTree(is);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#getHyphenationTree(Reader).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a hyphenator tree\n   * \n   * @param hyphenationReader the reader of the XML grammar to load from\n   * @return An object representing the hyphenation patterns\n   * @throws Exception\n   */\n  public static HyphenationTree getHyphenationTree(Reader hyphenationReader)\n      throws Exception {\n    HyphenationTree tree = new HyphenationTree();\n\n    tree.loadPatterns(new InputSource(hyphenationReader));\n\n    return tree;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c8b28a7124e9fa13cdb9b0c79da424c3d05f4217":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["0f080986da691a3bba7b757f43ab72cdc82b57ce","c8b28a7124e9fa13cdb9b0c79da424c3d05f4217"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["0f080986da691a3bba7b757f43ab72cdc82b57ce","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["85a883878c0af761245ab048babc63d099f835f3","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["c8b28a7124e9fa13cdb9b0c79da424c3d05f4217"]},"commit2Childs":{"c8b28a7124e9fa13cdb9b0c79da424c3d05f4217":["85a883878c0af761245ab048babc63d099f835f3","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"85a883878c0af761245ab048babc63d099f835f3":["3bb13258feba31ab676502787ab2e1779f129b7a"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["c8b28a7124e9fa13cdb9b0c79da424c3d05f4217","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}