{"path":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRange.ValueSourceQuery#createWeight(IndexSearcher,boolean,float).mjava","commits":[{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRange.ValueSourceQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRange.ValueSourceQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      final Weight fastMatchWeight = fastMatchQuery == null\n          ? null\n          : searcher.createWeight(fastMatchQuery, false, 1f);\n\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final int maxDoc = context.reader().maxDoc();\n\n          final DocIdSetIterator approximation;\n          if (fastMatchWeight == null) {\n            approximation = DocIdSetIterator.all(maxDoc);\n          } else {\n            Scorer s = fastMatchWeight.scorer(context);\n            if (s == null) {\n              return null;\n            }\n            approximation = s.iterator();\n          }\n\n          final FunctionValues values = valueSource.getValues(Collections.emptyMap(), context);\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return range.accept(values.longVal(approximation.docID()));\n            }\n\n            @Override\n            public float matchCost() {\n              return 100; // TODO: use cost of range.accept()\n            }\n          };\n          return new ConstantScoreScorer(this, score(), twoPhase);\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      final Weight fastMatchWeight = fastMatchQuery == null\n          ? null\n          : searcher.createWeight(fastMatchQuery, false);\n\n      return new ConstantScoreWeight(this) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final int maxDoc = context.reader().maxDoc();\n\n          final DocIdSetIterator approximation;\n          if (fastMatchWeight == null) {\n            approximation = DocIdSetIterator.all(maxDoc);\n          } else {\n            Scorer s = fastMatchWeight.scorer(context);\n            if (s == null) {\n              return null;\n            }\n            approximation = s.iterator();\n          }\n\n          final FunctionValues values = valueSource.getValues(Collections.emptyMap(), context);\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return range.accept(values.longVal(approximation.docID()));\n            }\n\n            @Override\n            public float matchCost() {\n              return 100; // TODO: use cost of range.accept()\n            }\n          };\n          return new ConstantScoreScorer(this, score(), twoPhase);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRange.ValueSourceQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      final Weight fastMatchWeight = fastMatchQuery == null\n          ? null\n          : searcher.createWeight(fastMatchQuery, false, 1f);\n\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final int maxDoc = context.reader().maxDoc();\n\n          final DocIdSetIterator approximation;\n          if (fastMatchWeight == null) {\n            approximation = DocIdSetIterator.all(maxDoc);\n          } else {\n            Scorer s = fastMatchWeight.scorer(context);\n            if (s == null) {\n              return null;\n            }\n            approximation = s.iterator();\n          }\n\n          final FunctionValues values = valueSource.getValues(Collections.emptyMap(), context);\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return range.accept(values.longVal(approximation.docID()));\n            }\n\n            @Override\n            public float matchCost() {\n              return 100; // TODO: use cost of range.accept()\n            }\n          };\n          return new ConstantScoreScorer(this, score(), twoPhase);\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cf250cb8fdff62f4b753866d44e5bf59bfd1616","date":1483789944,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRange.ValueSourceQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRange.ValueSourceQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      final Weight fastMatchWeight = fastMatchQuery == null\n          ? null\n          : searcher.createWeight(fastMatchQuery, false, 1f);\n\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final int maxDoc = context.reader().maxDoc();\n\n          final DocIdSetIterator approximation;\n          if (fastMatchWeight == null) {\n            approximation = DocIdSetIterator.all(maxDoc);\n          } else {\n            Scorer s = fastMatchWeight.scorer(context);\n            if (s == null) {\n              return null;\n            }\n            approximation = s.iterator();\n          }\n\n          final LongValues values = valueSource.getValues(context, null);\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return values.advanceExact(approximation.docID()) && range.accept(values.longValue());\n            }\n\n            @Override\n            public float matchCost() {\n              return 100; // TODO: use cost of range.accept()\n            }\n          };\n          return new ConstantScoreScorer(this, score(), twoPhase);\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      final Weight fastMatchWeight = fastMatchQuery == null\n          ? null\n          : searcher.createWeight(fastMatchQuery, false, 1f);\n\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final int maxDoc = context.reader().maxDoc();\n\n          final DocIdSetIterator approximation;\n          if (fastMatchWeight == null) {\n            approximation = DocIdSetIterator.all(maxDoc);\n          } else {\n            Scorer s = fastMatchWeight.scorer(context);\n            if (s == null) {\n              return null;\n            }\n            approximation = s.iterator();\n          }\n\n          final FunctionValues values = valueSource.getValues(Collections.emptyMap(), context);\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return range.accept(values.longVal(approximation.docID()));\n            }\n\n            @Override\n            public float matchCost() {\n              return 100; // TODO: use cost of range.accept()\n            }\n          };\n          return new ConstantScoreScorer(this, score(), twoPhase);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRange.ValueSourceQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRange.ValueSourceQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      final Weight fastMatchWeight = fastMatchQuery == null\n          ? null\n          : searcher.createWeight(fastMatchQuery, false, 1f);\n\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final int maxDoc = context.reader().maxDoc();\n\n          final DocIdSetIterator approximation;\n          if (fastMatchWeight == null) {\n            approximation = DocIdSetIterator.all(maxDoc);\n          } else {\n            Scorer s = fastMatchWeight.scorer(context);\n            if (s == null) {\n              return null;\n            }\n            approximation = s.iterator();\n          }\n\n          final LongValues values = valueSource.getValues(context, null);\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return values.advanceExact(approximation.docID()) && range.accept(values.longValue());\n            }\n\n            @Override\n            public float matchCost() {\n              return 100; // TODO: use cost of range.accept()\n            }\n          };\n          return new ConstantScoreScorer(this, score(), twoPhase);\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      final Weight fastMatchWeight = fastMatchQuery == null\n          ? null\n          : searcher.createWeight(fastMatchQuery, false, 1f);\n\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final int maxDoc = context.reader().maxDoc();\n\n          final DocIdSetIterator approximation;\n          if (fastMatchWeight == null) {\n            approximation = DocIdSetIterator.all(maxDoc);\n          } else {\n            Scorer s = fastMatchWeight.scorer(context);\n            if (s == null) {\n              return null;\n            }\n            approximation = s.iterator();\n          }\n\n          final FunctionValues values = valueSource.getValues(Collections.emptyMap(), context);\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return range.accept(values.longVal(approximation.docID()));\n            }\n\n            @Override\n            public float matchCost() {\n              return 100; // TODO: use cost of range.accept()\n            }\n          };\n          return new ConstantScoreScorer(this, score(), twoPhase);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"706a7a3396c030cc66dda92a0492eb492131c4c0","date":1509705614,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRange.ValueSourceQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRange.ValueSourceQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      final Weight fastMatchWeight = fastMatchQuery == null\n          ? null\n          : searcher.createWeight(fastMatchQuery, false, 1f);\n\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final int maxDoc = context.reader().maxDoc();\n\n          final DocIdSetIterator approximation;\n          if (fastMatchWeight == null) {\n            approximation = DocIdSetIterator.all(maxDoc);\n          } else {\n            Scorer s = fastMatchWeight.scorer(context);\n            if (s == null) {\n              return null;\n            }\n            approximation = s.iterator();\n          }\n\n          final LongValues values = valueSource.getValues(context, null);\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return values.advanceExact(approximation.docID()) && range.accept(values.longValue());\n            }\n\n            @Override\n            public float matchCost() {\n              return 100; // TODO: use cost of range.accept()\n            }\n          };\n          return new ConstantScoreScorer(this, score(), twoPhase);\n        }\n\n        @Override\n        public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n          return null; // TODO delegate to LongValuesSource?\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      final Weight fastMatchWeight = fastMatchQuery == null\n          ? null\n          : searcher.createWeight(fastMatchQuery, false, 1f);\n\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final int maxDoc = context.reader().maxDoc();\n\n          final DocIdSetIterator approximation;\n          if (fastMatchWeight == null) {\n            approximation = DocIdSetIterator.all(maxDoc);\n          } else {\n            Scorer s = fastMatchWeight.scorer(context);\n            if (s == null) {\n              return null;\n            }\n            approximation = s.iterator();\n          }\n\n          final LongValues values = valueSource.getValues(context, null);\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return values.advanceExact(approximation.docID()) && range.accept(values.longValue());\n            }\n\n            @Override\n            public float matchCost() {\n              return 100; // TODO: use cost of range.accept()\n            }\n          };\n          return new ConstantScoreScorer(this, score(), twoPhase);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRange.ValueSourceQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRange.ValueSourceQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      final Weight fastMatchWeight = fastMatchQuery == null\n          ? null\n          : searcher.createWeight(fastMatchQuery, false, 1f);\n\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final int maxDoc = context.reader().maxDoc();\n\n          final DocIdSetIterator approximation;\n          if (fastMatchWeight == null) {\n            approximation = DocIdSetIterator.all(maxDoc);\n          } else {\n            Scorer s = fastMatchWeight.scorer(context);\n            if (s == null) {\n              return null;\n            }\n            approximation = s.iterator();\n          }\n\n          final LongValues values = valueSource.getValues(context, null);\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return values.advanceExact(approximation.docID()) && range.accept(values.longValue());\n            }\n\n            @Override\n            public float matchCost() {\n              return 100; // TODO: use cost of range.accept()\n            }\n          };\n          return new ConstantScoreScorer(this, score(), twoPhase);\n        }\n\n        @Override\n        public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n          return null; // TODO delegate to LongValuesSource?\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      final Weight fastMatchWeight = fastMatchQuery == null\n          ? null\n          : searcher.createWeight(fastMatchQuery, false, 1f);\n\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final int maxDoc = context.reader().maxDoc();\n\n          final DocIdSetIterator approximation;\n          if (fastMatchWeight == null) {\n            approximation = DocIdSetIterator.all(maxDoc);\n          } else {\n            Scorer s = fastMatchWeight.scorer(context);\n            if (s == null) {\n              return null;\n            }\n            approximation = s.iterator();\n          }\n\n          final LongValues values = valueSource.getValues(context, null);\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return values.advanceExact(approximation.docID()) && range.accept(values.longValue());\n            }\n\n            @Override\n            public float matchCost() {\n              return 100; // TODO: use cost of range.accept()\n            }\n          };\n          return new ConstantScoreScorer(this, score(), twoPhase);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da1460d7a5dea2658e7b8e4f6e632e53ade440ac","date":1510316270,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRange.ValueSourceQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRange.ValueSourceQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      final Weight fastMatchWeight = fastMatchQuery == null\n          ? null\n          : searcher.createWeight(fastMatchQuery, false, 1f);\n\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final int maxDoc = context.reader().maxDoc();\n\n          final DocIdSetIterator approximation;\n          if (fastMatchWeight == null) {\n            approximation = DocIdSetIterator.all(maxDoc);\n          } else {\n            Scorer s = fastMatchWeight.scorer(context);\n            if (s == null) {\n              return null;\n            }\n            approximation = s.iterator();\n          }\n\n          final LongValues values = valueSource.getValues(context, null);\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return values.advanceExact(approximation.docID()) && range.accept(values.longValue());\n            }\n\n            @Override\n            public float matchCost() {\n              return 100; // TODO: use cost of range.accept()\n            }\n          };\n          return new ConstantScoreScorer(this, score(), twoPhase);\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return valueSource.isCacheable(ctx);\n        }\n\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      final Weight fastMatchWeight = fastMatchQuery == null\n          ? null\n          : searcher.createWeight(fastMatchQuery, false, 1f);\n\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final int maxDoc = context.reader().maxDoc();\n\n          final DocIdSetIterator approximation;\n          if (fastMatchWeight == null) {\n            approximation = DocIdSetIterator.all(maxDoc);\n          } else {\n            Scorer s = fastMatchWeight.scorer(context);\n            if (s == null) {\n              return null;\n            }\n            approximation = s.iterator();\n          }\n\n          final LongValues values = valueSource.getValues(context, null);\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return values.advanceExact(approximation.docID()) && range.accept(values.longValue());\n            }\n\n            @Override\n            public float matchCost() {\n              return 100; // TODO: use cost of range.accept()\n            }\n          };\n          return new ConstantScoreScorer(this, score(), twoPhase);\n        }\n\n        @Override\n        public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n          return null; // TODO delegate to LongValuesSource?\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRange.ValueSourceQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRange.ValueSourceQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      final Weight fastMatchWeight = fastMatchQuery == null\n          ? null\n          : searcher.createWeight(fastMatchQuery, ScoreMode.COMPLETE_NO_SCORES, 1f);\n\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final int maxDoc = context.reader().maxDoc();\n\n          final DocIdSetIterator approximation;\n          if (fastMatchWeight == null) {\n            approximation = DocIdSetIterator.all(maxDoc);\n          } else {\n            Scorer s = fastMatchWeight.scorer(context);\n            if (s == null) {\n              return null;\n            }\n            approximation = s.iterator();\n          }\n\n          final LongValues values = valueSource.getValues(context, null);\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return values.advanceExact(approximation.docID()) && range.accept(values.longValue());\n            }\n\n            @Override\n            public float matchCost() {\n              return 100; // TODO: use cost of range.accept()\n            }\n          };\n          return new ConstantScoreScorer(this, score(), twoPhase);\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return valueSource.isCacheable(ctx);\n        }\n\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      final Weight fastMatchWeight = fastMatchQuery == null\n          ? null\n          : searcher.createWeight(fastMatchQuery, false, 1f);\n\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final int maxDoc = context.reader().maxDoc();\n\n          final DocIdSetIterator approximation;\n          if (fastMatchWeight == null) {\n            approximation = DocIdSetIterator.all(maxDoc);\n          } else {\n            Scorer s = fastMatchWeight.scorer(context);\n            if (s == null) {\n              return null;\n            }\n            approximation = s.iterator();\n          }\n\n          final LongValues values = valueSource.getValues(context, null);\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return values.advanceExact(approximation.docID()) && range.accept(values.longValue());\n            }\n\n            @Override\n            public float matchCost() {\n              return 100; // TODO: use cost of range.accept()\n            }\n          };\n          return new ConstantScoreScorer(this, score(), twoPhase);\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return valueSource.isCacheable(ctx);\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRange.ValueSourceQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRange.ValueSourceQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      final Weight fastMatchWeight = fastMatchQuery == null\n          ? null\n          : searcher.createWeight(fastMatchQuery, ScoreMode.COMPLETE_NO_SCORES, 1f);\n\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final int maxDoc = context.reader().maxDoc();\n\n          final DocIdSetIterator approximation;\n          if (fastMatchWeight == null) {\n            approximation = DocIdSetIterator.all(maxDoc);\n          } else {\n            Scorer s = fastMatchWeight.scorer(context);\n            if (s == null) {\n              return null;\n            }\n            approximation = s.iterator();\n          }\n\n          final LongValues values = valueSource.getValues(context, null);\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return values.advanceExact(approximation.docID()) && range.accept(values.longValue());\n            }\n\n            @Override\n            public float matchCost() {\n              return 100; // TODO: use cost of range.accept()\n            }\n          };\n          return new ConstantScoreScorer(this, score(), twoPhase);\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return valueSource.isCacheable(ctx);\n        }\n\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      final Weight fastMatchWeight = fastMatchQuery == null\n          ? null\n          : searcher.createWeight(fastMatchQuery, false, 1f);\n\n      return new ConstantScoreWeight(this, boost) {\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final int maxDoc = context.reader().maxDoc();\n\n          final DocIdSetIterator approximation;\n          if (fastMatchWeight == null) {\n            approximation = DocIdSetIterator.all(maxDoc);\n          } else {\n            Scorer s = fastMatchWeight.scorer(context);\n            if (s == null) {\n              return null;\n            }\n            approximation = s.iterator();\n          }\n\n          final LongValues values = valueSource.getValues(context, null);\n          final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {\n            @Override\n            public boolean matches() throws IOException {\n              return values.advanceExact(approximation.docID()) && range.accept(values.longValue());\n            }\n\n            @Override\n            public float matchCost() {\n              return 100; // TODO: use cost of range.accept()\n            }\n          };\n          return new ConstantScoreScorer(this, score(), twoPhase);\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return valueSource.isCacheable(ctx);\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["9cf250cb8fdff62f4b753866d44e5bf59bfd1616"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["9cf250cb8fdff62f4b753866d44e5bf59bfd1616","706a7a3396c030cc66dda92a0492eb492131c4c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9cf250cb8fdff62f4b753866d44e5bf59bfd1616"],"9cf250cb8fdff62f4b753866d44e5bf59bfd1616":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["9cf250cb8fdff62f4b753866d44e5bf59bfd1616","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"9cf250cb8fdff62f4b753866d44e5bf59bfd1616":["706a7a3396c030cc66dda92a0492eb492131c4c0","d523b8189b211dd1630166aa77b8c88bb48b3fcc","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}