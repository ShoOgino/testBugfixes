{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","commits":[{"id":"5e0880984a2cac6ebebbb3f8afc9ac6de6fe519e","date":1496297191,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testCreateCollectionAddShardUsingPolicy().mjava","sourceNew":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: 'REPLACEPORT'}]}}\".replace(\"REPLACEPORT\",String.valueOf(port));\n    Utils.fromJSONString(commands);\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = cluster.getZkClient().getJson(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", null, \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(cluster.getSolrClient());\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n    cluster.getSolrClient().getZkStateReader().getZkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH,\n        \"{}\".getBytes(StandardCharsets.UTF_8), true);\n  }\n\n","sourceOld":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: 'REPLACEPORT'}]}}\".replace(\"REPLACEPORT\",String.valueOf(port));\n    Utils.fromJSONString(commands);\n    cluster.getSolrClient().request(createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = cluster.getZkClient().getJson(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", null, \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(cluster.getSolrClient());\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4328dc3f7309b4c82d12f9e9420a487a1b9945dd","date":1496650286,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","sourceNew":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", null, \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(cluster.getSolrClient());\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","sourceOld":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: 'REPLACEPORT'}]}}\".replace(\"REPLACEPORT\",String.valueOf(port));\n    Utils.fromJSONString(commands);\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = cluster.getZkClient().getJson(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", null, \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(cluster.getSolrClient());\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n    cluster.getSolrClient().getZkStateReader().getZkClient().setData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH,\n        \"{}\".getBytes(StandardCharsets.UTF_8), true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","pathOld":"/dev/null","sourceNew":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", null, \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(cluster.getSolrClient());\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","pathOld":"/dev/null","sourceNew":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", null, \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(cluster.getSolrClient());\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","sourceNew":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(cluster.getSolrClient());\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","sourceOld":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", null, \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(cluster.getSolrClient());\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","sourceNew":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(cluster.getSolrClient());\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","sourceOld":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", null, \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(cluster.getSolrClient());\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","pathOld":"/dev/null","sourceNew":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(cluster.getSolrClient());\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","sourceNew":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    cluster.getSolrClient().request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(cluster.getSolrClient());\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","sourceOld":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    cluster.getSolrClient().request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(cluster.getSolrClient());\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6ae69e36b15b227a219d4e334ccf5f58fb8affd","date":1562804219,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","sourceNew":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    cluster.getSolrClient().request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n\n    final String collectionName = \"addshard_using_policy\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(collectionName, 2, 2);\n    DocCollection coll = getCollectionState(collectionName);\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n    \n    CollectionAdminRequest.createShard(collectionName, \"s3\").process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(collectionName, 3, 3);\n\n    coll = getCollectionState(collectionName);\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","sourceOld":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    cluster.getSolrClient().request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(cluster.getSolrClient());\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","sourceNew":null,"sourceOld":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    int port = jetty.getLocalPort();\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    cluster.getSolrClient().request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n\n    final String collectionName = \"addshard_using_policy\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(collectionName, 2, 2);\n    DocCollection coll = getCollectionState(collectionName);\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n    \n    CollectionAdminRequest.createShard(collectionName, \"s3\").process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(collectionName, 3, 3);\n\n    coll = getCollectionState(collectionName);\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(jetty.getNodeName(), replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"197bbedf08450ade98a11f4a0001448059666bec":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"3f504512a03d978990cbff30db0522b354e846db":["f6ae69e36b15b227a219d4e334ccf5f58fb8affd"],"f6ae69e36b15b227a219d4e334ccf5f58fb8affd":["89948af0461fead48f44ba8fb7866f107ce83f22"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["e9017cf144952056066919f1ebc7897ff9bd71b1","197bbedf08450ade98a11f4a0001448059666bec"],"89948af0461fead48f44ba8fb7866f107ce83f22":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","197bbedf08450ade98a11f4a0001448059666bec"],"5e0880984a2cac6ebebbb3f8afc9ac6de6fe519e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["5e0880984a2cac6ebebbb3f8afc9ac6de6fe519e"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"197bbedf08450ade98a11f4a0001448059666bec":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e9017cf144952056066919f1ebc7897ff9bd71b1","197bbedf08450ade98a11f4a0001448059666bec"],"f6ae69e36b15b227a219d4e334ccf5f58fb8affd":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","74aea047dff7f7c38a2d766827bd20d356f98c6a","28288370235ed02234a64753cdbf0c6ec096304a","5e0880984a2cac6ebebbb3f8afc9ac6de6fe519e"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":[],"89948af0461fead48f44ba8fb7866f107ce83f22":["f6ae69e36b15b227a219d4e334ccf5f58fb8affd"],"28288370235ed02234a64753cdbf0c6ec096304a":["89948af0461fead48f44ba8fb7866f107ce83f22"],"5e0880984a2cac6ebebbb3f8afc9ac6de6fe519e":["4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}