{"path":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformer#testChildDoctransformerXML().mjava","commits":[{"id":"561c2351baf6dd64061addef891359954c1a7faa","date":1462788487,"type":1,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformer#testChildDoctransformerXML().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestChildDocTransformer#testChildDoctransformerXML().mjava","sourceNew":"  private void testChildDoctransformerXML() {\n    String test1[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[4]/int[@name='id']='5'\" ,\n        \"/response/result/doc[1]/doc[5]/int[@name='id']='6'\" ,\n        \"/response/result/doc[1]/doc[6]/int[@name='id']='7'\"};\n\n    String test2[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='6'\" };\n\n    String test3[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='5'\" };\n\n\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"*,[child parentFilter=\\\"subject:parentDocument\\\"]\"), test1);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:foo\\\"]\"), test2);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:bar\\\" limit=2]\"), test3);\n  }\n\n","sourceOld":"  private void testChildDoctransformerXML() {\n    String test1[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[4]/int[@name='id']='5'\" ,\n        \"/response/result/doc[1]/doc[5]/int[@name='id']='6'\" ,\n        \"/response/result/doc[1]/doc[6]/int[@name='id']='7'\"};\n\n    String test2[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='6'\" };\n\n    String test3[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='5'\" };\n\n\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"*,[child parentFilter=\\\"subject:parentDocument\\\"]\"), test1);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:foo\\\"]\"), test2);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:bar\\\" limit=2]\"), test3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformer#testChildDoctransformerXML().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestChildDocTransformer#testChildDoctransformerXML().mjava","sourceNew":"  private void testChildDoctransformerXML() {\n    String test1[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[4]/int[@name='id']='5'\" ,\n        \"/response/result/doc[1]/doc[5]/int[@name='id']='6'\" ,\n        \"/response/result/doc[1]/doc[6]/int[@name='id']='7'\"};\n\n    String test2[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='6'\" };\n\n    String test3[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='5'\" };\n\n\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"*,[child parentFilter=\\\"subject:parentDocument\\\"]\"), test1);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:foo\\\"]\"), test2);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:bar\\\" limit=2]\"), test3);\n  }\n\n","sourceOld":"  private void testChildDoctransformerXML() {\n    String test1[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[4]/int[@name='id']='5'\" ,\n        \"/response/result/doc[1]/doc[5]/int[@name='id']='6'\" ,\n        \"/response/result/doc[1]/doc[6]/int[@name='id']='7'\"};\n\n    String test2[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='6'\" };\n\n    String test3[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='5'\" };\n\n\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"*,[child parentFilter=\\\"subject:parentDocument\\\"]\"), test1);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:foo\\\"]\"), test2);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:bar\\\" limit=2]\"), test3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformer#testChildDoctransformerXML().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestChildDocTransformer#testChildDoctransformerXML().mjava","sourceNew":"  private void testChildDoctransformerXML() {\n    String test1[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[4]/int[@name='id']='5'\" ,\n        \"/response/result/doc[1]/doc[5]/int[@name='id']='6'\" ,\n        \"/response/result/doc[1]/doc[6]/int[@name='id']='7'\"};\n\n    String test2[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='6'\" };\n\n    String test3[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='5'\" };\n\n\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"*,[child parentFilter=\\\"subject:parentDocument\\\"]\"), test1);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:foo\\\"]\"), test2);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:bar\\\" limit=2]\"), test3);\n  }\n\n","sourceOld":"  private void testChildDoctransformerXML() {\n    String test1[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[4]/int[@name='id']='5'\" ,\n        \"/response/result/doc[1]/doc[5]/int[@name='id']='6'\" ,\n        \"/response/result/doc[1]/doc[6]/int[@name='id']='7'\"};\n\n    String test2[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='6'\" };\n\n    String test3[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='5'\" };\n\n\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"*,[child parentFilter=\\\"subject:parentDocument\\\"]\"), test1);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:foo\\\"]\"), test2);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:bar\\\" limit=2]\"), test3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformer#testChildDoctransformerXML().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestChildDocTransformer#testChildDoctransformerXML().mjava","sourceNew":"  private void testChildDoctransformerXML() {\n    String test1[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[4]/int[@name='id']='5'\" ,\n        \"/response/result/doc[1]/doc[5]/int[@name='id']='6'\" ,\n        \"/response/result/doc[1]/doc[6]/int[@name='id']='7'\"};\n\n    String test2[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='6'\" };\n\n    String test3[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='5'\" };\n\n\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"*,[child parentFilter=\\\"subject:parentDocument\\\"]\"), test1);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:foo\\\"]\"), test2);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:bar\\\" limit=2]\"), test3);\n  }\n\n","sourceOld":"  private void testChildDoctransformerXML() {\n    String test1[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[4]/int[@name='id']='5'\" ,\n        \"/response/result/doc[1]/doc[5]/int[@name='id']='6'\" ,\n        \"/response/result/doc[1]/doc[6]/int[@name='id']='7'\"};\n\n    String test2[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='6'\" };\n\n    String test3[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='5'\" };\n\n\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"*,[child parentFilter=\\\"subject:parentDocument\\\"]\"), test1);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:foo\\\"]\"), test2);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:bar\\\" limit=2]\"), test3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformer#testChildDoctransformerXML().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformer#testChildDoctransformerXML().mjava","sourceNew":"  private void testChildDoctransformerXML() {\n    String test1[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/str[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/str[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[3]/str[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[4]/str[@name='id']='5'\" ,\n        \"/response/result/doc[1]/doc[5]/str[@name='id']='6'\" ,\n        \"/response/result/doc[1]/doc[6]/str[@name='id']='7'\"};\n\n    String test2[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/str[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/str[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[3]/str[@name='id']='6'\" };\n\n    String test3[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/str[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[2]/str[@name='id']='5'\" };\n\n\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"*,[child parentFilter=\\\"subject:parentDocument\\\"]\"), test1);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:foo\\\"]\"), test2);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:bar\\\" limit=2]\"), test3);\n  }\n\n","sourceOld":"  private void testChildDoctransformerXML() {\n    String test1[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[4]/int[@name='id']='5'\" ,\n        \"/response/result/doc[1]/doc[5]/int[@name='id']='6'\" ,\n        \"/response/result/doc[1]/doc[6]/int[@name='id']='7'\"};\n\n    String test2[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='6'\" };\n\n    String test3[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='5'\" };\n\n\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"*,[child parentFilter=\\\"subject:parentDocument\\\"]\"), test1);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:foo\\\"]\"), test2);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:bar\\\" limit=2]\"), test3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformer#testChildDoctransformerXML().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformer#testChildDoctransformerXML().mjava","sourceNew":"  private void testChildDoctransformerXML() {\n    String test1[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/str[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/str[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[3]/str[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[4]/str[@name='id']='5'\" ,\n        \"/response/result/doc[1]/doc[5]/str[@name='id']='6'\" ,\n        \"/response/result/doc[1]/doc[6]/str[@name='id']='7'\"};\n\n    String test2[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/str[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/str[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[3]/str[@name='id']='6'\" };\n\n    String test3[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/str[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[2]/str[@name='id']='5'\" };\n\n\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"*,[child parentFilter=\\\"subject:parentDocument\\\"]\"), test1);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:foo\\\"]\"), test2);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:bar\\\" limit=2]\"), test3);\n  }\n\n","sourceOld":"  private void testChildDoctransformerXML() {\n    String test1[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[4]/int[@name='id']='5'\" ,\n        \"/response/result/doc[1]/doc[5]/int[@name='id']='6'\" ,\n        \"/response/result/doc[1]/doc[6]/int[@name='id']='7'\"};\n\n    String test2[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='6'\" };\n\n    String test3[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='5'\" };\n\n\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"*,[child parentFilter=\\\"subject:parentDocument\\\"]\"), test1);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:foo\\\"]\"), test2);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:bar\\\" limit=2]\"), test3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformer#testChildDoctransformerXML().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformer#testChildDoctransformerXML().mjava","sourceNew":"  private void testChildDoctransformerXML() {\n    String test1[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/str[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/str[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[3]/str[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[4]/str[@name='id']='5'\" ,\n        \"/response/result/doc[1]/doc[5]/str[@name='id']='6'\" ,\n        \"/response/result/doc[1]/doc[6]/str[@name='id']='7'\"};\n\n    String test2[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/str[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/str[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[3]/str[@name='id']='6'\" };\n\n    String test3[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/str[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[2]/str[@name='id']='5'\" };\n\n\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"*,[child parentFilter=\\\"subject:parentDocument\\\"]\"), test1);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:foo\\\"]\"), test2);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:bar\\\" limit=2]\"), test3);\n  }\n\n","sourceOld":"  private void testChildDoctransformerXML() {\n    String test1[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[4]/int[@name='id']='5'\" ,\n        \"/response/result/doc[1]/doc[5]/int[@name='id']='6'\" ,\n        \"/response/result/doc[1]/doc[6]/int[@name='id']='7'\"};\n\n    String test2[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[3]/int[@name='id']='6'\" };\n\n    String test3[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/int[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[2]/int[@name='id']='5'\" };\n\n\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"*,[child parentFilter=\\\"subject:parentDocument\\\"]\"), test1);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:foo\\\"]\"), test2);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:bar\\\" limit=2]\"), test3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"44e1477dd67ee1fbc72871f23fb51369bb42cadd","date":1535551329,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformer#testChildDoctransformerXML().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformer#testChildDoctransformerXML().mjava","sourceNew":"  private void testChildDoctransformerXML() throws Exception {\n    String test1[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/str[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/str[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[3]/str[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[4]/str[@name='id']='5'\" ,\n        \"/response/result/doc[1]/doc[5]/str[@name='id']='6'\" ,\n        \"/response/result/doc[1]/doc[6]/str[@name='id']='7'\"};\n\n    String test2[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/str[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/str[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[3]/str[@name='id']='6'\" };\n\n    String test3[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"count(/response/result/doc[1]/doc)=2\",\n        \"/response/result/doc[1]/doc[1]/str[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[2]/str[@name='id']='5'\"};\n\n\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"*,[child parentFilter=\\\"subject:parentDocument\\\"]\"), test1);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:foo\\\"]\"), test2);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:bar\\\" limit=2]\"), test3);\n  }\n\n","sourceOld":"  private void testChildDoctransformerXML() {\n    String test1[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/str[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/str[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[3]/str[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[4]/str[@name='id']='5'\" ,\n        \"/response/result/doc[1]/doc[5]/str[@name='id']='6'\" ,\n        \"/response/result/doc[1]/doc[6]/str[@name='id']='7'\"};\n\n    String test2[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/str[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/str[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[3]/str[@name='id']='6'\" };\n\n    String test3[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/str[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[2]/str[@name='id']='5'\" };\n\n\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"*,[child parentFilter=\\\"subject:parentDocument\\\"]\"), test1);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:foo\\\"]\"), test2);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:bar\\\" limit=2]\"), test3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"373ea6b2f051d2a56e8e78a5da11de7aa52ed399","date":1536159014,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformer#testChildDoctransformerXML().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformer#testChildDoctransformerXML().mjava","sourceNew":"  private void testChildDoctransformerXML() throws Exception {\n    String test1[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/str[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/str[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[3]/str[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[4]/str[@name='id']='5'\" ,\n        \"/response/result/doc[1]/doc[5]/str[@name='id']='6'\" ,\n        \"/response/result/doc[1]/doc[6]/str[@name='id']='7'\"};\n\n    String test2[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/str[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/str[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[3]/str[@name='id']='6'\" };\n\n    String test3[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"count(/response/result/doc[1]/doc)=2\",\n        \"/response/result/doc[1]/doc[1]/str[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[2]/str[@name='id']='5'\"};\n\n\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"*,[child parentFilter=\\\"subject:parentDocument\\\"]\"), test1);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"id, subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:foo\\\"]\"), test2);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"id, subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:bar\\\" limit=2]\"), test3);\n  }\n\n","sourceOld":"  private void testChildDoctransformerXML() throws Exception {\n    String test1[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/str[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/str[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[3]/str[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[4]/str[@name='id']='5'\" ,\n        \"/response/result/doc[1]/doc[5]/str[@name='id']='6'\" ,\n        \"/response/result/doc[1]/doc[6]/str[@name='id']='7'\"};\n\n    String test2[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/str[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/str[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[3]/str[@name='id']='6'\" };\n\n    String test3[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"count(/response/result/doc[1]/doc)=2\",\n        \"/response/result/doc[1]/doc[1]/str[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[2]/str[@name='id']='5'\"};\n\n\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"*,[child parentFilter=\\\"subject:parentDocument\\\"]\"), test1);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:foo\\\"]\"), test2);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:bar\\\" limit=2]\"), test3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ebb1536e19c5444665867a1657edcb497771adf","date":1584507748,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformer#testChildDoctransformerXML().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformer#testChildDoctransformerXML().mjava","sourceNew":"  private void testChildDoctransformerXML() throws Exception {\n    String test1[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/str[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/str[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[3]/str[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[4]/str[@name='id']='5'\" ,\n        \"/response/result/doc[1]/doc[5]/str[@name='id']='6'\" ,\n        \"/response/result/doc[1]/doc[6]/str[@name='id']='7'\"};\n\n    String test2[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/str[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/str[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[3]/str[@name='id']='6'\" };\n\n    String test3[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"count(/response/result/doc[1]/doc)=2\",\n        \"/response/result/doc[1]/doc[1]/str[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[2]/str[@name='id']='5'\"};\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"*,[child parentFilter=\\\"subject:parentDocument\\\"]\"), test1);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"id, subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:foo\\\"]\"), test2);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"id, subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:bar\\\" limit=2]\"), test3);\n\n    SolrException e = expectThrows(SolrException.class, () -> {\n      h.query(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n          \"fl\", \"id, subject,[child parentFilter=\\\"subject:bleh\\\" childFilter=\\\"title:bar\\\" limit=2]\"));\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n    assertThat(e.getMessage(),\n        containsString(\"Parent filter 'QueryBitSetProducer(subject:bleh)' doesn't match any parent documents\"));\n\n    e = expectThrows(SolrException.class, () -> {\n      h.query(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n          \"fl\", \"id, subject,[child parentFilter=e childFilter=\\\"title:bar\\\" limit=2]\"));\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n    assertThat(e.getMessage(),\n        containsString(\"Parent filter 'QueryBitSetProducer(text:e)' doesn't match any parent documents\"));\n\n    e = expectThrows(SolrException.class, () -> {\n      h.query(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n          \"fl\", \"id, subject,[child parentFilter=\\\"\\\"]\"));\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n    assertThat(e.getMessage(), containsString(\"Invalid Parent filter '', resolves to null\"));\n  }\n\n","sourceOld":"  private void testChildDoctransformerXML() throws Exception {\n    String test1[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/str[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/str[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[3]/str[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[4]/str[@name='id']='5'\" ,\n        \"/response/result/doc[1]/doc[5]/str[@name='id']='6'\" ,\n        \"/response/result/doc[1]/doc[6]/str[@name='id']='7'\"};\n\n    String test2[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"/response/result/doc[1]/doc[1]/str[@name='id']='2'\" ,\n        \"/response/result/doc[1]/doc[2]/str[@name='id']='4'\" ,\n        \"/response/result/doc[1]/doc[3]/str[@name='id']='6'\" };\n\n    String test3[] = new String[] {\n        \"//*[@numFound='1']\",\n        \"count(/response/result/doc[1]/doc)=2\",\n        \"/response/result/doc[1]/doc[1]/str[@name='id']='3'\" ,\n        \"/response/result/doc[1]/doc[2]/str[@name='id']='5'\"};\n\n\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"*,[child parentFilter=\\\"subject:parentDocument\\\"]\"), test1);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"id, subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:foo\\\"]\"), test2);\n\n    assertQ(req(\"q\", \"*:*\", \"fq\", \"subject:\\\"parentDocument\\\" \",\n        \"fl\", \"id, subject,[child parentFilter=\\\"subject:parentDocument\\\" childFilter=\\\"title:bar\\\" limit=2]\"), test3);\n  }\n\n","bugFix":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","561c2351baf6dd64061addef891359954c1a7faa"],"4ebb1536e19c5444665867a1657edcb497771adf":["373ea6b2f051d2a56e8e78a5da11de7aa52ed399"],"561c2351baf6dd64061addef891359954c1a7faa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"373ea6b2f051d2a56e8e78a5da11de7aa52ed399":["44e1477dd67ee1fbc72871f23fb51369bb42cadd"],"44e1477dd67ee1fbc72871f23fb51369bb42cadd":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["d470c8182e92b264680e34081b75e70a9f2b3c89","a71f63026529f3c1f03cfdd664910873ab2369ae"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["d470c8182e92b264680e34081b75e70a9f2b3c89","a71f63026529f3c1f03cfdd664910873ab2369ae"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4ebb1536e19c5444665867a1657edcb497771adf"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","561c2351baf6dd64061addef891359954c1a7faa"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e66a459d38c1c4a2f97128433dab546f683a9fed","561c2351baf6dd64061addef891359954c1a7faa","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"561c2351baf6dd64061addef891359954c1a7faa":["e66a459d38c1c4a2f97128433dab546f683a9fed","d470c8182e92b264680e34081b75e70a9f2b3c89"],"4ebb1536e19c5444665867a1657edcb497771adf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"373ea6b2f051d2a56e8e78a5da11de7aa52ed399":["4ebb1536e19c5444665867a1657edcb497771adf"],"44e1477dd67ee1fbc72871f23fb51369bb42cadd":["373ea6b2f051d2a56e8e78a5da11de7aa52ed399"],"28288370235ed02234a64753cdbf0c6ec096304a":["44e1477dd67ee1fbc72871f23fb51369bb42cadd"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e66a459d38c1c4a2f97128433dab546f683a9fed","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}