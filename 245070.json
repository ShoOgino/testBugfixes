{"path":"solr/solrj/src/java/org/apache/solr/common/util/DOMUtil#parsePropertyString(String,List[String],List[String]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DOMUtil#parsePropertyString(String,List[String],List[String]).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/DOMUtil#parsePropertyString(String,List[String],List[String]).mjava","sourceNew":"  /*\n   * This method borrowed from Ant's PropertyHelper.parsePropertyStringDefault:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  private static void parsePropertyString(String value, List<String> fragments, List<String> propertyRefs) {\n      int prev = 0;\n      int pos;\n      //search for the next instance of $ from the 'prev' position\n      while ((pos = value.indexOf(\"$\", prev)) >= 0) {\n\n          //if there was any text before this, add it as a fragment\n          //TODO, this check could be modified to go if pos>prev;\n          //seems like this current version could stick empty strings\n          //into the list\n          if (pos > 0) {\n              fragments.add(value.substring(prev, pos));\n          }\n          //if we are at the end of the string, we tack on a $\n          //then move past it\n          if (pos == (value.length() - 1)) {\n              fragments.add(\"$\");\n              prev = pos + 1;\n          } else if (value.charAt(pos + 1) != '{') {\n              //peek ahead to see if the next char is a property or not\n              //not a property: insert the char as a literal\n              /*\n              fragments.addElement(value.substring(pos + 1, pos + 2));\n              prev = pos + 2;\n              */\n              if (value.charAt(pos + 1) == '$') {\n                  //backwards compatibility two $ map to one mode\n                  fragments.add(\"$\");\n                  prev = pos + 2;\n              } else {\n                  //new behaviour: $X maps to $X for all values of X!='$'\n                  fragments.add(value.substring(pos, pos + 2));\n                  prev = pos + 2;\n              }\n\n          } else {\n              //property found, extract its name or bail on a typo\n              int endName = value.indexOf('}', pos);\n              if (endName < 0) {\n                throw new RuntimeException(\"Syntax error in property: \" + value);\n              }\n              String propertyName = value.substring(pos + 2, endName);\n              fragments.add(null);\n              propertyRefs.add(propertyName);\n              prev = endName + 1;\n          }\n      }\n      //no more $ signs found\n      //if there is any tail to the string, append it\n      if (prev < value.length()) {\n          fragments.add(value.substring(prev));\n      }\n  }\n\n","sourceOld":"  /*\n   * This method borrowed from Ant's PropertyHelper.parsePropertyStringDefault:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  private static void parsePropertyString(String value, List<String> fragments, List<String> propertyRefs) {\n      int prev = 0;\n      int pos;\n      //search for the next instance of $ from the 'prev' position\n      while ((pos = value.indexOf(\"$\", prev)) >= 0) {\n\n          //if there was any text before this, add it as a fragment\n          //TODO, this check could be modified to go if pos>prev;\n          //seems like this current version could stick empty strings\n          //into the list\n          if (pos > 0) {\n              fragments.add(value.substring(prev, pos));\n          }\n          //if we are at the end of the string, we tack on a $\n          //then move past it\n          if (pos == (value.length() - 1)) {\n              fragments.add(\"$\");\n              prev = pos + 1;\n          } else if (value.charAt(pos + 1) != '{') {\n              //peek ahead to see if the next char is a property or not\n              //not a property: insert the char as a literal\n              /*\n              fragments.addElement(value.substring(pos + 1, pos + 2));\n              prev = pos + 2;\n              */\n              if (value.charAt(pos + 1) == '$') {\n                  //backwards compatibility two $ map to one mode\n                  fragments.add(\"$\");\n                  prev = pos + 2;\n              } else {\n                  //new behaviour: $X maps to $X for all values of X!='$'\n                  fragments.add(value.substring(pos, pos + 2));\n                  prev = pos + 2;\n              }\n\n          } else {\n              //property found, extract its name or bail on a typo\n              int endName = value.indexOf('}', pos);\n              if (endName < 0) {\n                throw new RuntimeException(\"Syntax error in property: \" + value);\n              }\n              String propertyName = value.substring(pos + 2, endName);\n              fragments.add(null);\n              propertyRefs.add(propertyName);\n              prev = endName + 1;\n          }\n      }\n      //no more $ signs found\n      //if there is any tail to the string, append it\n      if (prev < value.length()) {\n          fragments.add(value.substring(prev));\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DOMUtil#parsePropertyString(String,List[String],List[String]).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/DOMUtil#parsePropertyString(String,List[String],List[String]).mjava","sourceNew":"  /*\n   * This method borrowed from Ant's PropertyHelper.parsePropertyStringDefault:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  private static void parsePropertyString(String value, List<String> fragments, List<String> propertyRefs) {\n      int prev = 0;\n      int pos;\n      //search for the next instance of $ from the 'prev' position\n      while ((pos = value.indexOf(\"$\", prev)) >= 0) {\n\n          //if there was any text before this, add it as a fragment\n          //TODO, this check could be modified to go if pos>prev;\n          //seems like this current version could stick empty strings\n          //into the list\n          if (pos > 0) {\n              fragments.add(value.substring(prev, pos));\n          }\n          //if we are at the end of the string, we tack on a $\n          //then move past it\n          if (pos == (value.length() - 1)) {\n              fragments.add(\"$\");\n              prev = pos + 1;\n          } else if (value.charAt(pos + 1) != '{') {\n              //peek ahead to see if the next char is a property or not\n              //not a property: insert the char as a literal\n              /*\n              fragments.addElement(value.substring(pos + 1, pos + 2));\n              prev = pos + 2;\n              */\n              if (value.charAt(pos + 1) == '$') {\n                  //backwards compatibility two $ map to one mode\n                  fragments.add(\"$\");\n                  prev = pos + 2;\n              } else {\n                  //new behaviour: $X maps to $X for all values of X!='$'\n                  fragments.add(value.substring(pos, pos + 2));\n                  prev = pos + 2;\n              }\n\n          } else {\n              //property found, extract its name or bail on a typo\n              int endName = value.indexOf('}', pos);\n              if (endName < 0) {\n                throw new RuntimeException(\"Syntax error in property: \" + value);\n              }\n              String propertyName = value.substring(pos + 2, endName);\n              fragments.add(null);\n              propertyRefs.add(propertyName);\n              prev = endName + 1;\n          }\n      }\n      //no more $ signs found\n      //if there is any tail to the string, append it\n      if (prev < value.length()) {\n          fragments.add(value.substring(prev));\n      }\n  }\n\n","sourceOld":"  /*\n   * This method borrowed from Ant's PropertyHelper.parsePropertyStringDefault:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  private static void parsePropertyString(String value, List<String> fragments, List<String> propertyRefs) {\n      int prev = 0;\n      int pos;\n      //search for the next instance of $ from the 'prev' position\n      while ((pos = value.indexOf(\"$\", prev)) >= 0) {\n\n          //if there was any text before this, add it as a fragment\n          //TODO, this check could be modified to go if pos>prev;\n          //seems like this current version could stick empty strings\n          //into the list\n          if (pos > 0) {\n              fragments.add(value.substring(prev, pos));\n          }\n          //if we are at the end of the string, we tack on a $\n          //then move past it\n          if (pos == (value.length() - 1)) {\n              fragments.add(\"$\");\n              prev = pos + 1;\n          } else if (value.charAt(pos + 1) != '{') {\n              //peek ahead to see if the next char is a property or not\n              //not a property: insert the char as a literal\n              /*\n              fragments.addElement(value.substring(pos + 1, pos + 2));\n              prev = pos + 2;\n              */\n              if (value.charAt(pos + 1) == '$') {\n                  //backwards compatibility two $ map to one mode\n                  fragments.add(\"$\");\n                  prev = pos + 2;\n              } else {\n                  //new behaviour: $X maps to $X for all values of X!='$'\n                  fragments.add(value.substring(pos, pos + 2));\n                  prev = pos + 2;\n              }\n\n          } else {\n              //property found, extract its name or bail on a typo\n              int endName = value.indexOf('}', pos);\n              if (endName < 0) {\n                throw new RuntimeException(\"Syntax error in property: \" + value);\n              }\n              String propertyName = value.substring(pos + 2, endName);\n              fragments.add(null);\n              propertyRefs.add(propertyName);\n              prev = endName + 1;\n          }\n      }\n      //no more $ signs found\n      //if there is any tail to the string, append it\n      if (prev < value.length()) {\n          fragments.add(value.substring(prev));\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DOMUtil#parsePropertyString(String,List[String],List[String]).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/DOMUtil#parsePropertyString(String,List[String],List[String]).mjava","sourceNew":"  /*\n   * This method borrowed from Ant's PropertyHelper.parsePropertyStringDefault:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  private static void parsePropertyString(String value, List<String> fragments, List<String> propertyRefs) {\n      int prev = 0;\n      int pos;\n      //search for the next instance of $ from the 'prev' position\n      while ((pos = value.indexOf(\"$\", prev)) >= 0) {\n\n          //if there was any text before this, add it as a fragment\n          //TODO, this check could be modified to go if pos>prev;\n          //seems like this current version could stick empty strings\n          //into the list\n          if (pos > 0) {\n              fragments.add(value.substring(prev, pos));\n          }\n          //if we are at the end of the string, we tack on a $\n          //then move past it\n          if (pos == (value.length() - 1)) {\n              fragments.add(\"$\");\n              prev = pos + 1;\n          } else if (value.charAt(pos + 1) != '{') {\n              //peek ahead to see if the next char is a property or not\n              //not a property: insert the char as a literal\n              /*\n              fragments.addElement(value.substring(pos + 1, pos + 2));\n              prev = pos + 2;\n              */\n              if (value.charAt(pos + 1) == '$') {\n                  //backwards compatibility two $ map to one mode\n                  fragments.add(\"$\");\n                  prev = pos + 2;\n              } else {\n                  //new behaviour: $X maps to $X for all values of X!='$'\n                  fragments.add(value.substring(pos, pos + 2));\n                  prev = pos + 2;\n              }\n\n          } else {\n              //property found, extract its name or bail on a typo\n              int endName = value.indexOf('}', pos);\n              if (endName < 0) {\n                throw new RuntimeException(\"Syntax error in property: \" + value);\n              }\n              String propertyName = value.substring(pos + 2, endName);\n              fragments.add(null);\n              propertyRefs.add(propertyName);\n              prev = endName + 1;\n          }\n      }\n      //no more $ signs found\n      //if there is any tail to the string, append it\n      if (prev < value.length()) {\n          fragments.add(value.substring(prev));\n      }\n  }\n\n","sourceOld":"  /*\n   * This method borrowed from Ant's PropertyHelper.parsePropertyStringDefault:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  private static void parsePropertyString(String value, List<String> fragments, List<String> propertyRefs) {\n      int prev = 0;\n      int pos;\n      //search for the next instance of $ from the 'prev' position\n      while ((pos = value.indexOf(\"$\", prev)) >= 0) {\n\n          //if there was any text before this, add it as a fragment\n          //TODO, this check could be modified to go if pos>prev;\n          //seems like this current version could stick empty strings\n          //into the list\n          if (pos > 0) {\n              fragments.add(value.substring(prev, pos));\n          }\n          //if we are at the end of the string, we tack on a $\n          //then move past it\n          if (pos == (value.length() - 1)) {\n              fragments.add(\"$\");\n              prev = pos + 1;\n          } else if (value.charAt(pos + 1) != '{') {\n              //peek ahead to see if the next char is a property or not\n              //not a property: insert the char as a literal\n              /*\n              fragments.addElement(value.substring(pos + 1, pos + 2));\n              prev = pos + 2;\n              */\n              if (value.charAt(pos + 1) == '$') {\n                  //backwards compatibility two $ map to one mode\n                  fragments.add(\"$\");\n                  prev = pos + 2;\n              } else {\n                  //new behaviour: $X maps to $X for all values of X!='$'\n                  fragments.add(value.substring(pos, pos + 2));\n                  prev = pos + 2;\n              }\n\n          } else {\n              //property found, extract its name or bail on a typo\n              int endName = value.indexOf('}', pos);\n              if (endName < 0) {\n                throw new RuntimeException(\"Syntax error in property: \" + value);\n              }\n              String propertyName = value.substring(pos + 2, endName);\n              fragments.add(null);\n              propertyRefs.add(propertyName);\n              prev = endName + 1;\n          }\n      }\n      //no more $ signs found\n      //if there is any tail to the string, append it\n      if (prev < value.length()) {\n          fragments.add(value.substring(prev));\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6a2315ba749856e5787b2ad962fa124bc3ed121","date":1334194349,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/DOMUtil#parsePropertyString(String,List[String],List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/DOMUtil#parsePropertyString(String,List[String],List[String]).mjava","sourceNew":"  /*\n   * This method borrowed from Ant's PropertyHelper.parsePropertyStringDefault:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  private static void parsePropertyString(String value, List<String> fragments, List<String> propertyRefs) {\n      int prev = 0;\n      int pos;\n      //search for the next instance of $ from the 'prev' position\n      while ((pos = value.indexOf(\"$\", prev)) >= 0) {\n\n          //if there was any text before this, add it as a fragment\n          //TODO, this check could be modified to go if pos>prev;\n          //seems like this current version could stick empty strings\n          //into the list\n          if (pos > 0) {\n              fragments.add(value.substring(prev, pos));\n          }\n          //if we are at the end of the string, we tack on a $\n          //then move past it\n          if (pos == (value.length() - 1)) {\n              fragments.add(\"$\");\n              prev = pos + 1;\n          } else if (value.charAt(pos + 1) != '{') {\n              //peek ahead to see if the next char is a property or not\n              //not a property: insert the char as a literal\n              /*\n              fragments.addElement(value.substring(pos + 1, pos + 2));\n              prev = pos + 2;\n              */\n              if (value.charAt(pos + 1) == '$') {\n                  //backwards compatibility two $ map to one mode\n                  fragments.add(\"$\");\n                  prev = pos + 2;\n              } else {\n                  //new behaviour: $X maps to $X for all values of X!='$'\n                  fragments.add(value.substring(pos, pos + 2));\n                  prev = pos + 2;\n              }\n\n          } else {\n              //property found, extract its name or bail on a typo\n              int endName = value.indexOf('}', pos);\n              if (endName < 0) {\n                throw new RuntimeException(\"Syntax error in property: \" + value);\n              }\n              String propertyName = value.substring(pos + 2, endName);\n              fragments.add(null);\n              propertyRefs.add(propertyName);\n              prev = endName + 1;\n          }\n      }\n      //no more $ signs found\n      //if there is any tail to the string, append it\n      if (prev < value.length()) {\n          fragments.add(value.substring(prev));\n      }\n  }\n\n","sourceOld":"  /*\n   * This method borrowed from Ant's PropertyHelper.parsePropertyStringDefault:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  private static void parsePropertyString(String value, List<String> fragments, List<String> propertyRefs) {\n      int prev = 0;\n      int pos;\n      //search for the next instance of $ from the 'prev' position\n      while ((pos = value.indexOf(\"$\", prev)) >= 0) {\n\n          //if there was any text before this, add it as a fragment\n          //TODO, this check could be modified to go if pos>prev;\n          //seems like this current version could stick empty strings\n          //into the list\n          if (pos > 0) {\n              fragments.add(value.substring(prev, pos));\n          }\n          //if we are at the end of the string, we tack on a $\n          //then move past it\n          if (pos == (value.length() - 1)) {\n              fragments.add(\"$\");\n              prev = pos + 1;\n          } else if (value.charAt(pos + 1) != '{') {\n              //peek ahead to see if the next char is a property or not\n              //not a property: insert the char as a literal\n              /*\n              fragments.addElement(value.substring(pos + 1, pos + 2));\n              prev = pos + 2;\n              */\n              if (value.charAt(pos + 1) == '$') {\n                  //backwards compatibility two $ map to one mode\n                  fragments.add(\"$\");\n                  prev = pos + 2;\n              } else {\n                  //new behaviour: $X maps to $X for all values of X!='$'\n                  fragments.add(value.substring(pos, pos + 2));\n                  prev = pos + 2;\n              }\n\n          } else {\n              //property found, extract its name or bail on a typo\n              int endName = value.indexOf('}', pos);\n              if (endName < 0) {\n                throw new RuntimeException(\"Syntax error in property: \" + value);\n              }\n              String propertyName = value.substring(pos + 2, endName);\n              fragments.add(null);\n              propertyRefs.add(propertyName);\n              prev = endName + 1;\n          }\n      }\n      //no more $ signs found\n      //if there is any tail to the string, append it\n      if (prev < value.length()) {\n          fragments.add(value.substring(prev));\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23a18981fcc2648fd6e83e9e84e8fa023eb0484b","date":1602334330,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DOMUtil#parsePropertyString(String,List[String],List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/DOMUtil#parsePropertyString(String,List[String],List[String]).mjava","sourceNew":"  /*\n   * This method borrowed from Ant's PropertyHelper.parsePropertyStringDefault:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  private static void parsePropertyString(String value, List<String> fragments, List<String> propertyRefs) {\n      int prev = 0;\n      int pos;\n      //search for the next instance of $ from the 'prev' position\n      while ((pos = value.indexOf(\"$\", prev)) >= 0) {\n\n          //if there was any text before this, add it as a fragment\n          //TODO, this check could be modified to go if pos>prev;\n          //seems like this current version could stick empty strings\n          //into the list\n          if (pos > 0) {\n              fragments.add(value.substring(prev, pos));\n          }\n          //if we are at the end of the string, we tack on a $\n          //then move past it\n          if (pos == (value.length() - 1)) {\n              fragments.add(\"$\");\n              prev = pos + 1;\n          } else if (value.charAt(pos + 1) != '{') {\n              //peek ahead to see if the next char is a property or not\n              //not a property: insert the char as a literal\n              /*\n              fragments.addElement(value.substring(pos + 1, pos + 2));\n              prev = pos + 2;\n              */\n              if (value.charAt(pos + 1) == '$') {\n                  //backwards compatibility two $ map to one mode\n                  fragments.add(\"$\");\n                  prev = pos + 2;\n              } else {\n                  //new behaviour: $X maps to $X for all values of X!='$'\n                  fragments.add(value.substring(pos, pos + 2));\n                  prev = pos + 2;\n              }\n\n          } else {\n              //property found, extract its name or bail on a typo\n              int endName = value.indexOf('}', pos);\n              if (endName < 0) {\n                throw new RuntimeException(\"Syntax error in property: \" + value);\n              }\n              String propertyName = value.substring(pos + 2, endName);\n              fragments.add(null);\n              propertyRefs.add(propertyName);\n              prev = endName + 1;\n          }\n      }\n      //no more $ signs found\n      //if there is any tail to the string, append it\n      if (prev < value.length()) {\n          fragments.add(value.substring(prev));\n      }\n  }\n\n","sourceOld":"  /*\n   * This method borrowed from Ant's PropertyHelper.parsePropertyStringDefault:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  private static void parsePropertyString(String value, List<String> fragments, List<String> propertyRefs) {\n      int prev = 0;\n      int pos;\n      //search for the next instance of $ from the 'prev' position\n      while ((pos = value.indexOf(\"$\", prev)) >= 0) {\n\n          //if there was any text before this, add it as a fragment\n          //TODO, this check could be modified to go if pos>prev;\n          //seems like this current version could stick empty strings\n          //into the list\n          if (pos > 0) {\n              fragments.add(value.substring(prev, pos));\n          }\n          //if we are at the end of the string, we tack on a $\n          //then move past it\n          if (pos == (value.length() - 1)) {\n              fragments.add(\"$\");\n              prev = pos + 1;\n          } else if (value.charAt(pos + 1) != '{') {\n              //peek ahead to see if the next char is a property or not\n              //not a property: insert the char as a literal\n              /*\n              fragments.addElement(value.substring(pos + 1, pos + 2));\n              prev = pos + 2;\n              */\n              if (value.charAt(pos + 1) == '$') {\n                  //backwards compatibility two $ map to one mode\n                  fragments.add(\"$\");\n                  prev = pos + 2;\n              } else {\n                  //new behaviour: $X maps to $X for all values of X!='$'\n                  fragments.add(value.substring(pos, pos + 2));\n                  prev = pos + 2;\n              }\n\n          } else {\n              //property found, extract its name or bail on a typo\n              int endName = value.indexOf('}', pos);\n              if (endName < 0) {\n                throw new RuntimeException(\"Syntax error in property: \" + value);\n              }\n              String propertyName = value.substring(pos + 2, endName);\n              fragments.add(null);\n              propertyRefs.add(propertyName);\n              prev = endName + 1;\n          }\n      }\n      //no more $ signs found\n      //if there is any tail to the string, append it\n      if (prev < value.length()) {\n          fragments.add(value.substring(prev));\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23a18981fcc2648fd6e83e9e84e8fa023eb0484b":["e6a2315ba749856e5787b2ad962fa124bc3ed121"],"e6a2315ba749856e5787b2ad962fa124bc3ed121":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23a18981fcc2648fd6e83e9e84e8fa023eb0484b"]},"commit2Childs":{"23a18981fcc2648fd6e83e9e84e8fa023eb0484b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6a2315ba749856e5787b2ad962fa124bc3ed121":["23a18981fcc2648fd6e83e9e84e8fa023eb0484b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["e6a2315ba749856e5787b2ad962fa124bc3ed121"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}