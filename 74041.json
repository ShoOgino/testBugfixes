{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#readBinaryEntry(IndexInput).mjava","commits":[{"id":"d6a3823714ed5de938fb4f3fc814824fe0f95e1a","date":1413422458,"type":2,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#readBinaryEntry(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#readBinaryEntry(IndexInput).mjava","sourceNew":"  static BinaryEntry readBinaryEntry(IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVLong();\n    entry.offset = meta.readLong();\n    switch(entry.format) {\n      case BINARY_FIXED_UNCOMPRESSED:\n        break;\n      case BINARY_PREFIX_COMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        entry.reverseIndexOffset = meta.readLong();\n        break;\n      case BINARY_VARIABLE_UNCOMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","sourceOld":"  static BinaryEntry readBinaryEntry(IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVLong();\n    entry.offset = meta.readLong();\n    switch(entry.format) {\n      case BINARY_FIXED_UNCOMPRESSED:\n        break;\n      case BINARY_PREFIX_COMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        entry.reverseIndexOffset = meta.readLong();\n        break;\n      case BINARY_VARIABLE_UNCOMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":2,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#readBinaryEntry(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#readBinaryEntry(IndexInput).mjava","sourceNew":"  static BinaryEntry readBinaryEntry(IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVLong();\n    entry.offset = meta.readLong();\n    switch(entry.format) {\n      case BINARY_FIXED_UNCOMPRESSED:\n        break;\n      case BINARY_PREFIX_COMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        entry.reverseIndexOffset = meta.readLong();\n        break;\n      case BINARY_VARIABLE_UNCOMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","sourceOld":"  static BinaryEntry readBinaryEntry(IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVLong();\n    entry.offset = meta.readLong();\n    switch(entry.format) {\n      case BINARY_FIXED_UNCOMPRESSED:\n        break;\n      case BINARY_PREFIX_COMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        entry.reverseIndexOffset = meta.readLong();\n        break;\n      case BINARY_VARIABLE_UNCOMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#readBinaryEntry(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#readBinaryEntry(IndexInput).mjava","sourceNew":"  static BinaryEntry readBinaryEntry(IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVLong();\n    entry.offset = meta.readLong();\n    switch(entry.format) {\n      case BINARY_FIXED_UNCOMPRESSED:\n        break;\n      case BINARY_PREFIX_COMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        entry.reverseIndexOffset = meta.readLong();\n        break;\n      case BINARY_VARIABLE_UNCOMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","sourceOld":"  static BinaryEntry readBinaryEntry(IndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    entry.minLength = meta.readVInt();\n    entry.maxLength = meta.readVInt();\n    entry.count = meta.readVLong();\n    entry.offset = meta.readLong();\n    switch(entry.format) {\n      case BINARY_FIXED_UNCOMPRESSED:\n        break;\n      case BINARY_PREFIX_COMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        entry.reverseIndexOffset = meta.readLong();\n        break;\n      case BINARY_VARIABLE_UNCOMPRESSED:\n        entry.addressesOffset = meta.readLong();\n        entry.packedIntsVersion = meta.readVInt();\n        entry.blockSize = meta.readVInt();\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"a870f9917149dc600c4ad4417d615c1795de5864":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a870f9917149dc600c4ad4417d615c1795de5864"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a870f9917149dc600c4ad4417d615c1795de5864"],"a870f9917149dc600c4ad4417d615c1795de5864":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}