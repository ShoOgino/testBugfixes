{"path":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#issueCommands().mjava","commits":[{"id":"4e6b620c271c84c0f14919eec7b90083b292ee51","date":1419461736,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#issueCommands().mjava","pathOld":"/dev/null","sourceNew":"  // It's OK not to check the return here since the subsequent tests will fail.\n  void issueCommands() throws IOException, SolrServerException, KeeperException, InterruptedException {\n\n    // Find a replica to make the preferredLeader. NOTE: may be one that's _already_ leader!\n    expected.clear();\n    for (Map.Entry<String, List<Replica>> ent : initial.entrySet()) {\n      List<Replica> replicas = ent.getValue();\n      Replica rep = replicas.get(Math.abs(random().nextInt()) % replicas.size());\n      expected.put(ent.getKey(), rep);\n      issuePreferred(ent.getKey(), rep);\n    }\n\n    if (waitForAllPreferreds() == false) {\n      fail(\"Waited for timeout for preferredLeader assignments to be made and they werent.\");\n    }\n    //fillExpectedWithCurrent();\n    // Now rebalance the leaders\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.REBALANCELEADERS.toString());\n\n    // Insure we get error returns when omitting required parameters\n    params.set(\"collection\", COLLECTION_NAME);\n    params.set(\"maxAtOnce\", \"10\");\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    cloudClient.request(request);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab35ddc72b03927b5c30bdc92e4b65bd998d65b0","date":1460574626,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#issueCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#issueCommands().mjava","sourceNew":"  // It's OK not to check the return here since the subsequent tests will fail.\n  void issueCommands() throws IOException, SolrServerException, KeeperException, InterruptedException {\n\n    // Find a replica to make the preferredLeader. NOTE: may be one that's _already_ leader!\n    expected.clear();\n    for (Map.Entry<String, List<Replica>> ent : initial.entrySet()) {\n      List<Replica> replicas = ent.getValue();\n      Replica rep = replicas.get(Math.abs(random().nextInt()) % replicas.size());\n      expected.put(ent.getKey(), rep);\n      issuePreferred(ent.getKey(), rep);\n    }\n\n    if (waitForAllPreferreds() == false) {\n      fail(\"Waited for timeout for preferredLeader assignments to be made and they werent.\");\n    }\n    //fillExpectedWithCurrent();\n    // Now rebalance the leaders randomly using SolrJ or direct call\n    if(random().nextBoolean())\n      rebalanceLeaderUsingSolrJAPI();\n    else\n      rebalanceLeaderUsingDirectCall();\n\n  }\n\n","sourceOld":"  // It's OK not to check the return here since the subsequent tests will fail.\n  void issueCommands() throws IOException, SolrServerException, KeeperException, InterruptedException {\n\n    // Find a replica to make the preferredLeader. NOTE: may be one that's _already_ leader!\n    expected.clear();\n    for (Map.Entry<String, List<Replica>> ent : initial.entrySet()) {\n      List<Replica> replicas = ent.getValue();\n      Replica rep = replicas.get(Math.abs(random().nextInt()) % replicas.size());\n      expected.put(ent.getKey(), rep);\n      issuePreferred(ent.getKey(), rep);\n    }\n\n    if (waitForAllPreferreds() == false) {\n      fail(\"Waited for timeout for preferredLeader assignments to be made and they werent.\");\n    }\n    //fillExpectedWithCurrent();\n    // Now rebalance the leaders\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.REBALANCELEADERS.toString());\n\n    // Insure we get error returns when omitting required parameters\n    params.set(\"collection\", COLLECTION_NAME);\n    params.set(\"maxAtOnce\", \"10\");\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    cloudClient.request(request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ea9249ab9a9f76eb4132ceb4631d15315721f6a","date":1460578553,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#issueCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#issueCommands().mjava","sourceNew":"  // It's OK not to check the return here since the subsequent tests will fail.\n  void issueCommands() throws IOException, SolrServerException, KeeperException, InterruptedException {\n\n    // Find a replica to make the preferredLeader. NOTE: may be one that's _already_ leader!\n    expected.clear();\n    for (Map.Entry<String, List<Replica>> ent : initial.entrySet()) {\n      List<Replica> replicas = ent.getValue();\n      Replica rep = replicas.get(Math.abs(random().nextInt()) % replicas.size());\n      expected.put(ent.getKey(), rep);\n      issuePreferred(ent.getKey(), rep);\n    }\n\n    if (waitForAllPreferreds() == false) {\n      fail(\"Waited for timeout for preferredLeader assignments to be made and they werent.\");\n    }\n    //fillExpectedWithCurrent();\n    // Now rebalance the leaders randomly using SolrJ or direct call\n    if(random().nextBoolean())\n      rebalanceLeaderUsingSolrJAPI();\n    else\n      rebalanceLeaderUsingDirectCall();\n\n  }\n\n","sourceOld":"  // It's OK not to check the return here since the subsequent tests will fail.\n  void issueCommands() throws IOException, SolrServerException, KeeperException, InterruptedException {\n\n    // Find a replica to make the preferredLeader. NOTE: may be one that's _already_ leader!\n    expected.clear();\n    for (Map.Entry<String, List<Replica>> ent : initial.entrySet()) {\n      List<Replica> replicas = ent.getValue();\n      Replica rep = replicas.get(Math.abs(random().nextInt()) % replicas.size());\n      expected.put(ent.getKey(), rep);\n      issuePreferred(ent.getKey(), rep);\n    }\n\n    if (waitForAllPreferreds() == false) {\n      fail(\"Waited for timeout for preferredLeader assignments to be made and they werent.\");\n    }\n    //fillExpectedWithCurrent();\n    // Now rebalance the leaders\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.REBALANCELEADERS.toString());\n\n    // Insure we get error returns when omitting required parameters\n    params.set(\"collection\", COLLECTION_NAME);\n    params.set(\"maxAtOnce\", \"10\");\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    cloudClient.request(request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73fd358e8ec697393d56617f4d9cedaca74dca14","date":1547954439,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#issueCommands().mjava","sourceNew":null,"sourceOld":"  // It's OK not to check the return here since the subsequent tests will fail.\n  void issueCommands() throws IOException, SolrServerException, KeeperException, InterruptedException {\n\n    // Find a replica to make the preferredLeader. NOTE: may be one that's _already_ leader!\n    expected.clear();\n    for (Map.Entry<String, List<Replica>> ent : initial.entrySet()) {\n      List<Replica> replicas = ent.getValue();\n      Replica rep = replicas.get(Math.abs(random().nextInt()) % replicas.size());\n      expected.put(ent.getKey(), rep);\n      issuePreferred(ent.getKey(), rep);\n    }\n\n    if (waitForAllPreferreds() == false) {\n      fail(\"Waited for timeout for preferredLeader assignments to be made and they werent.\");\n    }\n    //fillExpectedWithCurrent();\n    // Now rebalance the leaders randomly using SolrJ or direct call\n    if(random().nextBoolean())\n      rebalanceLeaderUsingSolrJAPI();\n    else\n      rebalanceLeaderUsingDirectCall();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":4,"author":"Tommaso Teofili","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#issueCommands().mjava","sourceNew":null,"sourceOld":"  // It's OK not to check the return here since the subsequent tests will fail.\n  void issueCommands() throws IOException, SolrServerException, KeeperException, InterruptedException {\n\n    // Find a replica to make the preferredLeader. NOTE: may be one that's _already_ leader!\n    expected.clear();\n    for (Map.Entry<String, List<Replica>> ent : initial.entrySet()) {\n      List<Replica> replicas = ent.getValue();\n      Replica rep = replicas.get(Math.abs(random().nextInt()) % replicas.size());\n      expected.put(ent.getKey(), rep);\n      issuePreferred(ent.getKey(), rep);\n    }\n\n    if (waitForAllPreferreds() == false) {\n      fail(\"Waited for timeout for preferredLeader assignments to be made and they werent.\");\n    }\n    //fillExpectedWithCurrent();\n    // Now rebalance the leaders randomly using SolrJ or direct call\n    if(random().nextBoolean())\n      rebalanceLeaderUsingSolrJAPI();\n    else\n      rebalanceLeaderUsingDirectCall();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab35ddc72b03927b5c30bdc92e4b65bd998d65b0":["4e6b620c271c84c0f14919eec7b90083b292ee51"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a","73fd358e8ec697393d56617f4d9cedaca74dca14"],"9ea9249ab9a9f76eb4132ceb4631d15315721f6a":["4e6b620c271c84c0f14919eec7b90083b292ee51","ab35ddc72b03927b5c30bdc92e4b65bd998d65b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"73fd358e8ec697393d56617f4d9cedaca74dca14":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a"],"4e6b620c271c84c0f14919eec7b90083b292ee51":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73fd358e8ec697393d56617f4d9cedaca74dca14"]},"commit2Childs":{"ab35ddc72b03927b5c30bdc92e4b65bd998d65b0":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"9ea9249ab9a9f76eb4132ceb4631d15315721f6a":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","73fd358e8ec697393d56617f4d9cedaca74dca14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e6b620c271c84c0f14919eec7b90083b292ee51"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e6b620c271c84c0f14919eec7b90083b292ee51":["ab35ddc72b03927b5c30bdc92e4b65bd998d65b0","9ea9249ab9a9f76eb4132ceb4631d15315721f6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}