{"path":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","commits":[{"id":"bcbe885ae2ce6f06da92061ec4deebdf19cdf6ca","date":1295834280,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      for (String text : getTextsToAnalyze(solrInputDocument)) {\n        if (text != null && !\"\".equals(text)) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, String>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (UIMAException e) {\n      throw new RuntimeException(e);\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      for (String text : getTextsToAnalyze(solrInputDocument)) {\n        if (text != null && !\"\".equals(text)) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, String>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (UIMAException e) {\n      throw new RuntimeException(e);\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      for (String text : getTextsToAnalyze(solrInputDocument)) {\n        if (text != null && !\"\".equals(text)) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, String>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (UIMAException e) {\n      throw new RuntimeException(e);\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      for (String text : getTextsToAnalyze(solrInputDocument)) {\n        if (text != null && !\"\".equals(text)) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, String>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (UIMAException e) {\n      throw new RuntimeException(e);\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      for (String text : getTextsToAnalyze(solrInputDocument)) {\n        if (text != null && !\"\".equals(text)) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, String>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (UIMAException e) {\n      throw new RuntimeException(e);\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      for (String text : getTextsToAnalyze(solrInputDocument)) {\n        if (text != null && !\"\".equals(text)) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, String>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (UIMAException e) {\n      throw new RuntimeException(e);\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      for (String text : getTextsToAnalyze(solrInputDocument)) {\n        if (text != null && !\"\".equals(text)) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, String>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (UIMAException e) {\n      throw new RuntimeException(e);\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7af39ddfe08efa20e4c56e454a0d5935a085c53","date":1304952961,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      for (String text : getTextsToAnalyze(solrInputDocument)) {\n        if (text != null && !\"\".equals(text)) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (UIMAException e) {\n      throw new RuntimeException(e);\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      for (String text : getTextsToAnalyze(solrInputDocument)) {\n        if (text != null && !\"\".equals(text)) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, String>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (UIMAException e) {\n      throw new RuntimeException(e);\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      for (String text : getTextsToAnalyze(solrInputDocument)) {\n        if (text != null && !\"\".equals(text)) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (UIMAException e) {\n      throw new RuntimeException(e);\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      for (String text : getTextsToAnalyze(solrInputDocument)) {\n        if (text != null && !\"\".equals(text)) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, String>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (UIMAException e) {\n      throw new RuntimeException(e);\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a91be78298530614fa0518c758c7e5e04a140ec8","date":1305299573,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (int i = 0; i < texts.length; i++) {\n        text = texts[i];\n        if (text != null && !\"\".equals(text)) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (UIMAException e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      if (solrUIMAConfiguration.isIgnoreErrors())\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(\" text=\\\"\").append(text.substring(0, 100)).append(\"...\\\"\").toString());\n      else{\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error: \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(\" text=\\\"\").append(text.substring(0, 100)).append(\"...\\\"\").toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      for (String text : getTextsToAnalyze(solrInputDocument)) {\n        if (text != null && !\"\".equals(text)) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (UIMAException e) {\n      throw new RuntimeException(e);\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":["093cd64df8e0efbffb0d5bbe6db45f48077a1597"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (int i = 0; i < texts.length; i++) {\n        text = texts[i];\n        if (text != null && !\"\".equals(text)) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (UIMAException e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      if (solrUIMAConfiguration.isIgnoreErrors())\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(\" text=\\\"\").append(text.substring(0, 100)).append(\"...\\\"\").toString());\n      else{\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error: \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(\" text=\\\"\").append(text.substring(0, 100)).append(\"...\\\"\").toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      for (String text : getTextsToAnalyze(solrInputDocument)) {\n        if (text != null && !\"\".equals(text)) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (UIMAException e) {\n      throw new RuntimeException(e);\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (int i = 0; i < texts.length; i++) {\n        text = texts[i];\n        if (text != null && !\"\".equals(text)) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (UIMAException e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      if (solrUIMAConfiguration.isIgnoreErrors())\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(\" text=\\\"\").append(text.substring(0, 100)).append(\"...\\\"\").toString());\n      else{\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error: \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(\" text=\\\"\").append(text.substring(0, 100)).append(\"...\\\"\").toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      for (String text : getTextsToAnalyze(solrInputDocument)) {\n        if (text != null && !\"\".equals(text)) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, String>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (UIMAException e) {\n      throw new RuntimeException(e);\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (int i = 0; i < texts.length; i++) {\n        text = texts[i];\n        if (text != null && !\"\".equals(text)) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (UIMAException e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      if (solrUIMAConfiguration.isIgnoreErrors())\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(\" text=\\\"\").append(text.substring(0, 100)).append(\"...\\\"\").toString());\n      else{\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error: \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(\" text=\\\"\").append(text.substring(0, 100)).append(\"...\\\"\").toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (int i = 0; i < texts.length; i++) {\n        text = texts[i];\n        if (text != null && !\"\".equals(text)) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (UIMAException e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      if (solrUIMAConfiguration.isIgnoreErrors())\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(\" text=\\\"\").append(text.substring(0, 100)).append(\"...\\\"\").toString());\n      else{\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error: \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(\" text=\\\"\").append(text.substring(0, 100)).append(\"...\\\"\").toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"093cd64df8e0efbffb0d5bbe6db45f48077a1597","date":1307668568,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (int i = 0; i < texts.length; i++) {\n        text = texts[i];\n        if (text != null && !\"\".equals(text)) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (UIMAException e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      int len = Math.min(text.length(), 100);\n      if (solrUIMAConfiguration.isIgnoreErrors()) {\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString());\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error: \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (int i = 0; i < texts.length; i++) {\n        text = texts[i];\n        if (text != null && !\"\".equals(text)) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (UIMAException e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      if (solrUIMAConfiguration.isIgnoreErrors())\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(\" text=\\\"\").append(text.substring(0, 100)).append(\"...\\\"\").toString());\n      else{\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error: \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(\" text=\\\"\").append(text.substring(0, 100)).append(\"...\\\"\").toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":["a91be78298530614fa0518c758c7e5e04a140ec8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8a181b2ac3ca090b11a2d4ce411832943e65d19","date":1307707503,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (int i = 0; i < texts.length; i++) {\n        text = texts[i];\n        if (text != null && !\"\".equals(text)) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (UIMAException e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      int len = Math.min(text.length(), 100);\n      if (solrUIMAConfiguration.isIgnoreErrors()) {\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString());\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error: \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (int i = 0; i < texts.length; i++) {\n        text = texts[i];\n        if (text != null && !\"\".equals(text)) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (UIMAException e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      if (solrUIMAConfiguration.isIgnoreErrors())\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(\" text=\\\"\").append(text.substring(0, 100)).append(\"...\\\"\").toString());\n      else{\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error: \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(\" text=\\\"\").append(text.substring(0, 100)).append(\"...\\\"\").toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70cf8fb9cd4e056e95f82557841131c48c00e28a","date":1307931670,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (int i = 0; i < texts.length; i++) {\n        text = texts[i];\n        if (text != null && text.length()>0) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (Exception e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      int len = Math.min(text.length(), 100);\n      if (solrUIMAConfiguration.isIgnoreErrors()) {\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString());\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error: \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (int i = 0; i < texts.length; i++) {\n        text = texts[i];\n        if (text != null && !\"\".equals(text)) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (UIMAException e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      int len = Math.min(text.length(), 100);\n      if (solrUIMAConfiguration.isIgnoreErrors()) {\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString());\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error: \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa453069be95ffae35c7fe71379b90ce12b3c8f3","date":1307932677,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (int i = 0; i < texts.length; i++) {\n        text = texts[i];\n        if (text != null && text.length()>0) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (Exception e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      if(logField == null){\n        SchemaField uniqueKeyField = solrCore.getSchema().getUniqueKeyField();\n        if(uniqueKeyField != null){\n          logField = uniqueKeyField.getName();\n        }\n      }\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      int len = Math.min(text.length(), 100);\n      if (solrUIMAConfiguration.isIgnoreErrors()) {\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString());\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error: \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (int i = 0; i < texts.length; i++) {\n        text = texts[i];\n        if (text != null && text.length()>0) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (Exception e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      int len = Math.min(text.length(), 100);\n      if (solrUIMAConfiguration.isIgnoreErrors()) {\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString());\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error: \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (int i = 0; i < texts.length; i++) {\n        text = texts[i];\n        if (text != null && text.length()>0) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (Exception e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      if(logField == null){\n        SchemaField uniqueKeyField = solrCore.getSchema().getUniqueKeyField();\n        if(uniqueKeyField != null){\n          logField = uniqueKeyField.getName();\n        }\n      }\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      int len = Math.min(text.length(), 100);\n      if (solrUIMAConfiguration.isIgnoreErrors()) {\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString());\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error: \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","sourceOld":"  @Override\n  public void processAdd(AddUpdateCommand cmd) throws IOException {\n    String text = null;\n    try {\n      /* get Solr document */\n      SolrInputDocument solrInputDocument = cmd.getSolrInputDocument();\n\n      /* get the fields to analyze */\n      String[] texts = getTextsToAnalyze(solrInputDocument);\n      for (int i = 0; i < texts.length; i++) {\n        text = texts[i];\n        if (text != null && text.length()>0) {\n          /* process the text value */\n          JCas jcas = processText(text);\n\n          UIMAToSolrMapper uimaToSolrMapper = new UIMAToSolrMapper(solrInputDocument, jcas);\n          /* get field mapping from config */\n          Map<String, Map<String, MapField>> typesAndFeaturesFieldsMap = solrUIMAConfiguration\n                  .getTypesFeaturesFieldsMapping();\n          /* map type features on fields */\n          for (String typeFQN : typesAndFeaturesFieldsMap.keySet()) {\n            uimaToSolrMapper.map(typeFQN, typesAndFeaturesFieldsMap.get(typeFQN));\n          }\n        }\n      }\n    } catch (Exception e) {\n      String logField = solrUIMAConfiguration.getLogField();\n      if(logField == null){\n        SchemaField uniqueKeyField = solrCore.getSchema().getUniqueKeyField();\n        if(uniqueKeyField != null){\n          logField = uniqueKeyField.getName();\n        }\n      }\n      String optionalFieldInfo = logField == null ? \".\" :\n        new StringBuilder(\". \").append(logField).append(\"=\")\n        .append((String)cmd.getSolrInputDocument().getField(logField).getValue())\n        .append(\", \").toString();\n      int len = Math.min(text.length(), 100);\n      if (solrUIMAConfiguration.isIgnoreErrors()) {\n        log.warn(new StringBuilder(\"skip the text processing due to \")\n          .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n          .append(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString());\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            new StringBuilder(\"processing error: \")\n              .append(e.getLocalizedMessage()).append(optionalFieldInfo)\n              .append(\" text=\\\"\").append(text.substring(0, len)).append(\"...\\\"\").toString(), e);\n      }\n    }\n    super.processAdd(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["bcbe885ae2ce6f06da92061ec4deebdf19cdf6ca"],"c26f00b574427b55127e869b935845554afde1fa":["fa453069be95ffae35c7fe71379b90ce12b3c8f3","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"b8a181b2ac3ca090b11a2d4ce411832943e65d19":["c3a8a449466c1ff7ce2274fe73dab487256964b4","093cd64df8e0efbffb0d5bbe6db45f48077a1597"],"70cf8fb9cd4e056e95f82557841131c48c00e28a":["093cd64df8e0efbffb0d5bbe6db45f48077a1597"],"093cd64df8e0efbffb0d5bbe6db45f48077a1597":["a91be78298530614fa0518c758c7e5e04a140ec8"],"bcbe885ae2ce6f06da92061ec4deebdf19cdf6ca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fa453069be95ffae35c7fe71379b90ce12b3c8f3":["70cf8fb9cd4e056e95f82557841131c48c00e28a"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bcbe885ae2ce6f06da92061ec4deebdf19cdf6ca"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","a91be78298530614fa0518c758c7e5e04a140ec8"],"a7af39ddfe08efa20e4c56e454a0d5935a085c53":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","a91be78298530614fa0518c758c7e5e04a140ec8"],"a91be78298530614fa0518c758c7e5e04a140ec8":["a7af39ddfe08efa20e4c56e454a0d5935a085c53"],"a3776dccca01c11e7046323cfad46a3b4a471233":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","a91be78298530614fa0518c758c7e5e04a140ec8"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["29ef99d61cda9641b6250bf9567329a6e65f901d","a7af39ddfe08efa20e4c56e454a0d5935a085c53"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["a7af39ddfe08efa20e4c56e454a0d5935a085c53","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b8a181b2ac3ca090b11a2d4ce411832943e65d19":[],"70cf8fb9cd4e056e95f82557841131c48c00e28a":["fa453069be95ffae35c7fe71379b90ce12b3c8f3"],"093cd64df8e0efbffb0d5bbe6db45f48077a1597":["b8a181b2ac3ca090b11a2d4ce411832943e65d19","70cf8fb9cd4e056e95f82557841131c48c00e28a"],"bcbe885ae2ce6f06da92061ec4deebdf19cdf6ca":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"fa453069be95ffae35c7fe71379b90ce12b3c8f3":["c26f00b574427b55127e869b935845554afde1fa"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["b8a181b2ac3ca090b11a2d4ce411832943e65d19"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"a7af39ddfe08efa20e4c56e454a0d5935a085c53":["a91be78298530614fa0518c758c7e5e04a140ec8","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"a91be78298530614fa0518c758c7e5e04a140ec8":["093cd64df8e0efbffb0d5bbe6db45f48077a1597","c3a8a449466c1ff7ce2274fe73dab487256964b4","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bcbe885ae2ce6f06da92061ec4deebdf19cdf6ca","bb9b72f7c3d7827c64dd4ec580ded81778da361d","29ef99d61cda9641b6250bf9567329a6e65f901d"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b8a181b2ac3ca090b11a2d4ce411832943e65d19","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}