{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#test2blocksMultiMatches().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#test2blocksMultiMatches().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#test2blocksMultiMatches().mjava","sourceNew":"  //           11111111112222222222333333333\n  // 012345678901234567890123456789012345678\n  //   aa bb cc --- aa bb aa. bb aa   bb cc\n  //   aa##bb cc --- aa##bb aa. bb aa##bb cc\n  public void test2blocksMultiMatches() throws IOException {\n    final String BLOCK = \"  aa bb cc --- aa bb aa. bb aa   bb cc\";\n    CharStream cs = new PatternReplaceCharFilter( pattern(\"(aa)\\\\s+(bb)\"), \"$1##$2\", \".\",\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new WhitespaceTokenizer(TEST_VERSION_CURRENT, cs );\n    assertTokenStreamContents(ts,\n        new String[] { \"aa##bb\", \"cc\", \"---\", \"aa##bb\", \"aa.\", \"bb\", \"aa##bb\", \"cc\" },\n        new int[] { 2, 8, 11, 15, 21, 25, 28, 36 },\n        new int[] { 7, 10, 14, 20, 24, 27, 35, 38 });\n  }\n\n","sourceOld":"  //           11111111112222222222333333333\n  // 012345678901234567890123456789012345678\n  //   aa bb cc --- aa bb aa. bb aa   bb cc\n  //   aa##bb cc --- aa##bb aa. bb aa##bb cc\n  public void test2blocksMultiMatches() throws IOException {\n    final String BLOCK = \"  aa bb cc --- aa bb aa. bb aa   bb cc\";\n    CharStream cs = new PatternReplaceCharFilter( pattern(\"(aa)\\\\s+(bb)\"), \"$1##$2\", \".\",\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new WhitespaceTokenizer(TEST_VERSION_CURRENT, cs );\n    assertTokenStreamContents(ts,\n        new String[] { \"aa##bb\", \"cc\", \"---\", \"aa##bb\", \"aa.\", \"bb\", \"aa##bb\", \"cc\" },\n        new int[] { 2, 8, 11, 15, 21, 25, 28, 36 },\n        new int[] { 7, 10, 14, 20, 24, 27, 35, 38 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcbc12aa8147f5203ca283e7252ba4280d6ffd16","date":1305663400,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#test2blocksMultiMatches().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#test2blocksMultiMatches().mjava","sourceNew":"  //           11111111112222222222333333333\n  // 012345678901234567890123456789012345678\n  //   aa bb cc --- aa bb aa. bb aa   bb cc\n  //   aa##bb cc --- aa##bb aa. bb aa##bb cc\n  public void test2blocksMultiMatches() throws IOException {\n    final String BLOCK = \"  aa bb cc --- aa bb aa. bb aa   bb cc\";\n    CharStream cs = new PatternReplaceCharFilter( pattern(\"(aa)\\\\s+(bb)\"), \"$1##$2\", \".\",\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"aa##bb\", \"cc\", \"---\", \"aa##bb\", \"aa.\", \"bb\", \"aa##bb\", \"cc\" },\n        new int[] { 2, 8, 11, 15, 21, 25, 28, 36 },\n        new int[] { 7, 10, 14, 20, 24, 27, 35, 38 });\n  }\n\n","sourceOld":"  //           11111111112222222222333333333\n  // 012345678901234567890123456789012345678\n  //   aa bb cc --- aa bb aa. bb aa   bb cc\n  //   aa##bb cc --- aa##bb aa. bb aa##bb cc\n  public void test2blocksMultiMatches() throws IOException {\n    final String BLOCK = \"  aa bb cc --- aa bb aa. bb aa   bb cc\";\n    CharStream cs = new PatternReplaceCharFilter( pattern(\"(aa)\\\\s+(bb)\"), \"$1##$2\", \".\",\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new WhitespaceTokenizer(TEST_VERSION_CURRENT, cs );\n    assertTokenStreamContents(ts,\n        new String[] { \"aa##bb\", \"cc\", \"---\", \"aa##bb\", \"aa.\", \"bb\", \"aa##bb\", \"cc\" },\n        new int[] { 2, 8, 11, 15, 21, 25, 28, 36 },\n        new int[] { 7, 10, 14, 20, 24, 27, 35, 38 });\n  }\n\n","bugFix":["540f57ba7d9d46ccc6f0157e8b8021a4c969770d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#test2blocksMultiMatches().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#test2blocksMultiMatches().mjava","sourceNew":"  //           11111111112222222222333333333\n  // 012345678901234567890123456789012345678\n  //   aa bb cc --- aa bb aa. bb aa   bb cc\n  //   aa##bb cc --- aa##bb aa. bb aa##bb cc\n  public void test2blocksMultiMatches() throws IOException {\n    final String BLOCK = \"  aa bb cc --- aa bb aa. bb aa   bb cc\";\n    CharStream cs = new PatternReplaceCharFilter( pattern(\"(aa)\\\\s+(bb)\"), \"$1##$2\", \".\",\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"aa##bb\", \"cc\", \"---\", \"aa##bb\", \"aa.\", \"bb\", \"aa##bb\", \"cc\" },\n        new int[] { 2, 8, 11, 15, 21, 25, 28, 36 },\n        new int[] { 7, 10, 14, 20, 24, 27, 35, 38 });\n  }\n\n","sourceOld":"  //           11111111112222222222333333333\n  // 012345678901234567890123456789012345678\n  //   aa bb cc --- aa bb aa. bb aa   bb cc\n  //   aa##bb cc --- aa##bb aa. bb aa##bb cc\n  public void test2blocksMultiMatches() throws IOException {\n    final String BLOCK = \"  aa bb cc --- aa bb aa. bb aa   bb cc\";\n    CharStream cs = new PatternReplaceCharFilter( pattern(\"(aa)\\\\s+(bb)\"), \"$1##$2\", \".\",\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new WhitespaceTokenizer(TEST_VERSION_CURRENT, cs );\n    assertTokenStreamContents(ts,\n        new String[] { \"aa##bb\", \"cc\", \"---\", \"aa##bb\", \"aa.\", \"bb\", \"aa##bb\", \"cc\" },\n        new int[] { 2, 8, 11, 15, 21, 25, 28, 36 },\n        new int[] { 7, 10, 14, 20, 24, 27, 35, 38 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#test2blocksMultiMatches().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#test2blocksMultiMatches().mjava","sourceNew":"  //           11111111112222222222333333333\n  // 012345678901234567890123456789012345678\n  //   aa bb cc --- aa bb aa. bb aa   bb cc\n  //   aa##bb cc --- aa##bb aa. bb aa##bb cc\n  public void test2blocksMultiMatches() throws IOException {\n    final String BLOCK = \"  aa bb cc --- aa bb aa. bb aa   bb cc\";\n    CharStream cs = new PatternReplaceCharFilter( pattern(\"(aa)\\\\s+(bb)\"), \"$1##$2\", \".\",\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"aa##bb\", \"cc\", \"---\", \"aa##bb\", \"aa.\", \"bb\", \"aa##bb\", \"cc\" },\n        new int[] { 2, 8, 11, 15, 21, 25, 28, 36 },\n        new int[] { 7, 10, 14, 20, 24, 27, 35, 38 });\n  }\n\n","sourceOld":"  //           11111111112222222222333333333\n  // 012345678901234567890123456789012345678\n  //   aa bb cc --- aa bb aa. bb aa   bb cc\n  //   aa##bb cc --- aa##bb aa. bb aa##bb cc\n  public void test2blocksMultiMatches() throws IOException {\n    final String BLOCK = \"  aa bb cc --- aa bb aa. bb aa   bb cc\";\n    CharStream cs = new PatternReplaceCharFilter( pattern(\"(aa)\\\\s+(bb)\"), \"$1##$2\", \".\",\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new WhitespaceTokenizer(TEST_VERSION_CURRENT, cs );\n    assertTokenStreamContents(ts,\n        new String[] { \"aa##bb\", \"cc\", \"---\", \"aa##bb\", \"aa.\", \"bb\", \"aa##bb\", \"cc\" },\n        new int[] { 2, 8, 11, 15, 21, 25, 28, 36 },\n        new int[] { 7, 10, 14, 20, 24, 27, 35, 38 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c6ce79c21a8da5e778ef9179243bc50d6d42c52","date":1324010267,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#test2blocksMultiMatches().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#test2blocksMultiMatches().mjava","sourceNew":"  //           11111111112222222222333333333\n  // 012345678901234567890123456789012345678\n  //   aa bb cc --- aa bb aa. bb aa   bb cc\n  //   aa##bb cc --- aa##bb aa. bb aa##bb cc\n  public void test2blocksMultiMatches() throws IOException {\n    final String BLOCK = \"  aa bb cc --- aa bb aa. bb aa   bb cc\";\n    CharStream cs = new PatternReplaceCharFilter( pattern(\"(aa)\\\\s+(bb)\"), \"$1##$2\", \".\",\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"aa##bb\", \"cc\", \"---\", \"aa##bb\", \"aa.\", \"bb\", \"aa##bb\", \"cc\" },\n        new int[] { 2, 8, 11, 15, 21, 25, 28, 36 },\n        new int[] { 7, 10, 14, 20, 24, 27, 35, 38 },\n        BLOCK.length());\n  }\n\n","sourceOld":"  //           11111111112222222222333333333\n  // 012345678901234567890123456789012345678\n  //   aa bb cc --- aa bb aa. bb aa   bb cc\n  //   aa##bb cc --- aa##bb aa. bb aa##bb cc\n  public void test2blocksMultiMatches() throws IOException {\n    final String BLOCK = \"  aa bb cc --- aa bb aa. bb aa   bb cc\";\n    CharStream cs = new PatternReplaceCharFilter( pattern(\"(aa)\\\\s+(bb)\"), \"$1##$2\", \".\",\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"aa##bb\", \"cc\", \"---\", \"aa##bb\", \"aa.\", \"bb\", \"aa##bb\", \"cc\" },\n        new int[] { 2, 8, 11, 15, 21, 25, 28, 36 },\n        new int[] { 7, 10, 14, 20, 24, 27, 35, 38 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47777586dd4c026834be0b2cc454d527cf8884b3","date":1330348390,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#test2blocksMultiMatches().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#test2blocksMultiMatches().mjava","sourceNew":"  public void test2blocksMultiMatches() throws IOException {\n    final String BLOCK = \"  aa bb cc --- aa bb aa. bb aa   bb cc\";\n\n    CharStream cs = new PatternReplaceCharFilter( pattern(\"(aa)\\\\s+(bb)\"), \"$1##$2\",\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"aa##bb\", \"cc\", \"---\", \"aa##bb\", \"aa.\", \"bb\", \"aa##bb\", \"cc\" },\n        new int[] { 2, 8, 11, 15, 21, 25, 28, 36 },\n        new int[] { 7, 10, 14, 20, 24, 27, 35, 38 },\n        BLOCK.length());\n  }\n\n","sourceOld":"  //           11111111112222222222333333333\n  // 012345678901234567890123456789012345678\n  //   aa bb cc --- aa bb aa. bb aa   bb cc\n  //   aa##bb cc --- aa##bb aa. bb aa##bb cc\n  public void test2blocksMultiMatches() throws IOException {\n    final String BLOCK = \"  aa bb cc --- aa bb aa. bb aa   bb cc\";\n    CharStream cs = new PatternReplaceCharFilter( pattern(\"(aa)\\\\s+(bb)\"), \"$1##$2\", \".\",\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"aa##bb\", \"cc\", \"---\", \"aa##bb\", \"aa.\", \"bb\", \"aa##bb\", \"cc\" },\n        new int[] { 2, 8, 11, 15, 21, 25, 28, 36 },\n        new int[] { 7, 10, 14, 20, 24, 27, 35, 38 },\n        BLOCK.length());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#test2blocksMultiMatches().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#test2blocksMultiMatches().mjava","sourceNew":"  public void test2blocksMultiMatches() throws IOException {\n    final String BLOCK = \"  aa bb cc --- aa bb aa. bb aa   bb cc\";\n\n    CharStream cs = new PatternReplaceCharFilter( pattern(\"(aa)\\\\s+(bb)\"), \"$1##$2\",\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"aa##bb\", \"cc\", \"---\", \"aa##bb\", \"aa.\", \"bb\", \"aa##bb\", \"cc\" },\n        new int[] { 2, 8, 11, 15, 21, 25, 28, 36 },\n        new int[] { 7, 10, 14, 20, 24, 27, 35, 38 },\n        BLOCK.length());\n  }\n\n","sourceOld":"  //           11111111112222222222333333333\n  // 012345678901234567890123456789012345678\n  //   aa bb cc --- aa bb aa. bb aa   bb cc\n  //   aa##bb cc --- aa##bb aa. bb aa##bb cc\n  public void test2blocksMultiMatches() throws IOException {\n    final String BLOCK = \"  aa bb cc --- aa bb aa. bb aa   bb cc\";\n    CharStream cs = new PatternReplaceCharFilter( pattern(\"(aa)\\\\s+(bb)\"), \"$1##$2\", \".\",\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"aa##bb\", \"cc\", \"---\", \"aa##bb\", \"aa.\", \"bb\", \"aa##bb\", \"cc\" },\n        new int[] { 2, 8, 11, 15, 21, 25, 28, 36 },\n        new int[] { 7, 10, 14, 20, 24, 27, 35, 38 },\n        BLOCK.length());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#test2blocksMultiMatches().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#test2blocksMultiMatches().mjava","sourceNew":"  public void test2blocksMultiMatches() throws IOException {\n    final String BLOCK = \"  aa bb cc --- aa bb aa. bb aa   bb cc\";\n\n    CharStream cs = new PatternReplaceCharFilter( pattern(\"(aa)\\\\s+(bb)\"), \"$1##$2\",\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"aa##bb\", \"cc\", \"---\", \"aa##bb\", \"aa.\", \"bb\", \"aa##bb\", \"cc\" },\n        new int[] { 2, 8, 11, 15, 21, 25, 28, 36 },\n        new int[] { 7, 10, 14, 20, 24, 27, 35, 38 },\n        BLOCK.length());\n  }\n\n","sourceOld":"  public void test2blocksMultiMatches() throws IOException {\n    final String BLOCK = \"  aa bb cc --- aa bb aa. bb aa   bb cc\";\n\n    CharStream cs = new PatternReplaceCharFilter( pattern(\"(aa)\\\\s+(bb)\"), \"$1##$2\",\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"aa##bb\", \"cc\", \"---\", \"aa##bb\", \"aa.\", \"bb\", \"aa##bb\", \"cc\" },\n        new int[] { 2, 8, 11, 15, 21, 25, 28, 36 },\n        new int[] { 7, 10, 14, 20, 24, 27, 35, 38 },\n        BLOCK.length());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["47777586dd4c026834be0b2cc454d527cf8884b3"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["1c6ce79c21a8da5e778ef9179243bc50d6d42c52","47777586dd4c026834be0b2cc454d527cf8884b3"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["0f080986da691a3bba7b757f43ab72cdc82b57ce","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a3776dccca01c11e7046323cfad46a3b4a471233":["0f080986da691a3bba7b757f43ab72cdc82b57ce","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"47777586dd4c026834be0b2cc454d527cf8884b3":["1c6ce79c21a8da5e778ef9179243bc50d6d42c52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1c6ce79c21a8da5e778ef9179243bc50d6d42c52":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","1c6ce79c21a8da5e778ef9179243bc50d6d42c52"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"47777586dd4c026834be0b2cc454d527cf8884b3":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"1c6ce79c21a8da5e778ef9179243bc50d6d42c52":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","47777586dd4c026834be0b2cc454d527cf8884b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}