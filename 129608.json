{"path":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testMaxValue().mjava","commits":[{"id":"be9a5d1846ac0beb625ba68da060e16119d9f51e","date":1328820081,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testMaxValue().mjava","pathOld":"/dev/null","sourceNew":"  public void testMaxValue() throws Exception {\n    SolrInputDocument d = null;\n\n    d = processAdd(\"max-value\", \n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_s\", \"zzz\", \"aaa\", \"bbb\"),\n                       f(\"foo_i\", 42, 128, -3),\n                       f(\"bar_s\", \"aaa\"),\n                       f(\"yak_t\", \"aaa\", \"bbb\")));\n\n    assertNotNull(d);\n\n    assertEquals(Arrays.asList(\"zzz\"),\n                 d.getFieldValues(\"foo_s\"));\n    assertEquals(Arrays.asList(128),\n                 d.getFieldValues(\"foo_i\"));\n    assertEquals(Arrays.asList(\"aaa\"), \n                 d.getFieldValues(\"bar_s\"));\n    assertEquals(Arrays.asList(\"aaa\", \"bbb\"), \n                 d.getFieldValues(\"yak_t\"));\n   \n    // uncomparable should not fail\n\n    d = processAdd(\"max-value\", \n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_s\", \"zzz\", new Integer(42), \"bbb\"),\n                       f(\"bar_s\", \"aaa\"),\n                       f(\"yak_t\", \"aaa\", \"bbb\")));\n\n    assertNotNull(d);\n\n    assertEquals(Arrays.asList(\"zzz\", new Integer(42), \"bbb\"),\n                 d.getFieldValues(\"foo_s\"));\n    assertEquals(Arrays.asList(\"aaa\"), \n                 d.getFieldValues(\"bar_s\"));\n    assertEquals(Arrays.asList(\"aaa\", \"bbb\"), \n                 d.getFieldValues(\"yak_t\"));\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97011c9e96db3532a253bad154535c9d0f8c1006","date":1328834634,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testMaxValue().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testMaxValue().mjava","sourceNew":"  public void testMaxValue() throws Exception {\n    SolrInputDocument d = null;\n\n    d = processAdd(\"max-value\", \n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_s\", \"zzz\", \"aaa\", \"bbb\"),\n                       f(\"foo_i\", 42, 128, -3),\n                       f(\"bar_s\", \"aaa\"),\n                       f(\"yak_t\", \"aaa\", \"bbb\")));\n\n    assertNotNull(d);\n\n    assertEquals(Arrays.asList(\"zzz\"),\n                 d.getFieldValues(\"foo_s\"));\n    assertEquals(Arrays.asList(128),\n                 d.getFieldValues(\"foo_i\"));\n    assertEquals(Arrays.asList(\"aaa\"), \n                 d.getFieldValues(\"bar_s\"));\n    assertEquals(Arrays.asList(\"aaa\", \"bbb\"), \n                 d.getFieldValues(\"yak_t\"));\n   \n    // failure when un-comparable\n\n    SolrException error = null;\n    try {\n      ignoreException(\".*Unable to mutate field.*\");\n      d = processAdd(\"min-value\", \n                     doc(f(\"id\", \"1111\"),\n                         f(\"foo_s\", \"zzz\", new Integer(42), \"bbb\"),\n                         f(\"bar_s\", \"aaa\"),\n                         f(\"yak_t\", \"aaa\", \"bbb\")));\n    } catch (SolrException e) {\n      error = e;\n    } finally {\n      resetExceptionIgnores();\n    }\n    assertNotNull(\"no error on un-comparable values\", error);\n    assertTrue(\"error doesn't mention field name\",\n               0 <= error.getMessage().indexOf(\"foo_s\"));\n  }\n\n","sourceOld":"  public void testMaxValue() throws Exception {\n    SolrInputDocument d = null;\n\n    d = processAdd(\"max-value\", \n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_s\", \"zzz\", \"aaa\", \"bbb\"),\n                       f(\"foo_i\", 42, 128, -3),\n                       f(\"bar_s\", \"aaa\"),\n                       f(\"yak_t\", \"aaa\", \"bbb\")));\n\n    assertNotNull(d);\n\n    assertEquals(Arrays.asList(\"zzz\"),\n                 d.getFieldValues(\"foo_s\"));\n    assertEquals(Arrays.asList(128),\n                 d.getFieldValues(\"foo_i\"));\n    assertEquals(Arrays.asList(\"aaa\"), \n                 d.getFieldValues(\"bar_s\"));\n    assertEquals(Arrays.asList(\"aaa\", \"bbb\"), \n                 d.getFieldValues(\"yak_t\"));\n   \n    // uncomparable should not fail\n\n    d = processAdd(\"max-value\", \n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_s\", \"zzz\", new Integer(42), \"bbb\"),\n                       f(\"bar_s\", \"aaa\"),\n                       f(\"yak_t\", \"aaa\", \"bbb\")));\n\n    assertNotNull(d);\n\n    assertEquals(Arrays.asList(\"zzz\", new Integer(42), \"bbb\"),\n                 d.getFieldValues(\"foo_s\"));\n    assertEquals(Arrays.asList(\"aaa\"), \n                 d.getFieldValues(\"bar_s\"));\n    assertEquals(Arrays.asList(\"aaa\", \"bbb\"), \n                 d.getFieldValues(\"yak_t\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testMaxValue().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testMaxValue().mjava","sourceNew":"  public void testMaxValue() throws Exception {\n    SolrInputDocument d = null;\n\n    d = processAdd(\"max-value\", \n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_s\", \"zzz\", \"aaa\", \"bbb\"),\n                       f(\"foo_i\", 42, 128, -3),\n                       f(\"bar_s\", \"aaa\"),\n                       f(\"yak_t\", \"aaa\", \"bbb\")));\n\n    assertNotNull(d);\n\n    assertEquals(Arrays.asList(\"zzz\"),\n                 d.getFieldValues(\"foo_s\"));\n    assertEquals(Arrays.asList(128),\n                 d.getFieldValues(\"foo_i\"));\n    assertEquals(Arrays.asList(\"aaa\"), \n                 d.getFieldValues(\"bar_s\"));\n    assertEquals(Arrays.asList(\"aaa\", \"bbb\"), \n                 d.getFieldValues(\"yak_t\"));\n   \n    // failure when un-comparable\n\n    SolrException error = null;\n    try {\n      ignoreException(\".*Unable to mutate field.*\");\n      d = processAdd(\"min-value\", \n                     doc(f(\"id\", \"1111\"),\n                         f(\"foo_s\", \"zzz\", 42, \"bbb\"),\n                         f(\"bar_s\", \"aaa\"),\n                         f(\"yak_t\", \"aaa\", \"bbb\")));\n    } catch (SolrException e) {\n      error = e;\n    } finally {\n      resetExceptionIgnores();\n    }\n    assertNotNull(\"no error on un-comparable values\", error);\n    assertTrue(\"error doesn't mention field name\",\n               0 <= error.getMessage().indexOf(\"foo_s\"));\n  }\n\n","sourceOld":"  public void testMaxValue() throws Exception {\n    SolrInputDocument d = null;\n\n    d = processAdd(\"max-value\", \n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_s\", \"zzz\", \"aaa\", \"bbb\"),\n                       f(\"foo_i\", 42, 128, -3),\n                       f(\"bar_s\", \"aaa\"),\n                       f(\"yak_t\", \"aaa\", \"bbb\")));\n\n    assertNotNull(d);\n\n    assertEquals(Arrays.asList(\"zzz\"),\n                 d.getFieldValues(\"foo_s\"));\n    assertEquals(Arrays.asList(128),\n                 d.getFieldValues(\"foo_i\"));\n    assertEquals(Arrays.asList(\"aaa\"), \n                 d.getFieldValues(\"bar_s\"));\n    assertEquals(Arrays.asList(\"aaa\", \"bbb\"), \n                 d.getFieldValues(\"yak_t\"));\n   \n    // failure when un-comparable\n\n    SolrException error = null;\n    try {\n      ignoreException(\".*Unable to mutate field.*\");\n      d = processAdd(\"min-value\", \n                     doc(f(\"id\", \"1111\"),\n                         f(\"foo_s\", \"zzz\", new Integer(42), \"bbb\"),\n                         f(\"bar_s\", \"aaa\"),\n                         f(\"yak_t\", \"aaa\", \"bbb\")));\n    } catch (SolrException e) {\n      error = e;\n    } finally {\n      resetExceptionIgnores();\n    }\n    assertNotNull(\"no error on un-comparable values\", error);\n    assertTrue(\"error doesn't mention field name\",\n               0 <= error.getMessage().indexOf(\"foo_s\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testMaxValue().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testMaxValue().mjava","sourceNew":"  public void testMaxValue() throws Exception {\n    SolrInputDocument d = null;\n\n    d = processAdd(\"max-value\", \n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_s\", \"zzz\", \"aaa\", \"bbb\"),\n                       f(\"foo_i\", 42, 128, -3),\n                       f(\"bar_s\", \"aaa\"),\n                       f(\"yak_t\", \"aaa\", \"bbb\")));\n\n    assertNotNull(d);\n\n    assertEquals(Arrays.asList(\"zzz\"),\n                 d.getFieldValues(\"foo_s\"));\n    assertEquals(Arrays.asList(128),\n                 d.getFieldValues(\"foo_i\"));\n    assertEquals(Arrays.asList(\"aaa\"), \n                 d.getFieldValues(\"bar_s\"));\n    assertEquals(Arrays.asList(\"aaa\", \"bbb\"), \n                 d.getFieldValues(\"yak_t\"));\n   \n    // failure when un-comparable\n\n    SolrException error = null;\n    try {\n      ignoreException(\".*Unable to mutate field.*\");\n      d = processAdd(\"min-value\", \n                     doc(f(\"id\", \"1111\"),\n                         f(\"foo_s\", \"zzz\", 42, \"bbb\"),\n                         f(\"bar_s\", \"aaa\"),\n                         f(\"yak_t\", \"aaa\", \"bbb\")));\n    } catch (SolrException e) {\n      error = e;\n    } finally {\n      resetExceptionIgnores();\n    }\n    assertNotNull(\"no error on un-comparable values\", error);\n    assertTrue(\"error doesn't mention field name\",\n               0 <= error.getMessage().indexOf(\"foo_s\"));\n  }\n\n","sourceOld":"  public void testMaxValue() throws Exception {\n    SolrInputDocument d = null;\n\n    d = processAdd(\"max-value\", \n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_s\", \"zzz\", \"aaa\", \"bbb\"),\n                       f(\"foo_i\", 42, 128, -3),\n                       f(\"bar_s\", \"aaa\"),\n                       f(\"yak_t\", \"aaa\", \"bbb\")));\n\n    assertNotNull(d);\n\n    assertEquals(Arrays.asList(\"zzz\"),\n                 d.getFieldValues(\"foo_s\"));\n    assertEquals(Arrays.asList(128),\n                 d.getFieldValues(\"foo_i\"));\n    assertEquals(Arrays.asList(\"aaa\"), \n                 d.getFieldValues(\"bar_s\"));\n    assertEquals(Arrays.asList(\"aaa\", \"bbb\"), \n                 d.getFieldValues(\"yak_t\"));\n   \n    // failure when un-comparable\n\n    SolrException error = null;\n    try {\n      ignoreException(\".*Unable to mutate field.*\");\n      d = processAdd(\"min-value\", \n                     doc(f(\"id\", \"1111\"),\n                         f(\"foo_s\", \"zzz\", new Integer(42), \"bbb\"),\n                         f(\"bar_s\", \"aaa\"),\n                         f(\"yak_t\", \"aaa\", \"bbb\")));\n    } catch (SolrException e) {\n      error = e;\n    } finally {\n      resetExceptionIgnores();\n    }\n    assertNotNull(\"no error on un-comparable values\", error);\n    assertTrue(\"error doesn't mention field name\",\n               0 <= error.getMessage().indexOf(\"foo_s\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testMaxValue().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testMaxValue().mjava","sourceNew":"  public void testMaxValue() throws Exception {\n    SolrInputDocument d = null;\n\n    d = processAdd(\"max-value\", \n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_s\", \"zzz\", \"aaa\", \"bbb\"),\n                       f(\"foo_i\", 42, 128, -3),\n                       f(\"bar_s\", \"aaa\"),\n                       f(\"yak_t\", \"aaa\", \"bbb\")));\n\n    assertNotNull(d);\n\n    assertEquals(Arrays.asList(\"zzz\"),\n                 d.getFieldValues(\"foo_s\"));\n    assertEquals(Arrays.asList(128),\n                 d.getFieldValues(\"foo_i\"));\n    assertEquals(Arrays.asList(\"aaa\"), \n                 d.getFieldValues(\"bar_s\"));\n    assertEquals(Arrays.asList(\"aaa\", \"bbb\"), \n                 d.getFieldValues(\"yak_t\"));\n   \n    // failure when un-comparable\n\n    SolrException error = null;\n    try {\n      ignoreException(\".*Unable to mutate field.*\");\n      d = processAdd(\"min-value\", \n                     doc(f(\"id\", \"1111\"),\n                         f(\"foo_s\", \"zzz\", 42, \"bbb\"),\n                         f(\"bar_s\", \"aaa\"),\n                         f(\"yak_t\", \"aaa\", \"bbb\")));\n    } catch (SolrException e) {\n      error = e;\n    } finally {\n      resetExceptionIgnores();\n    }\n    assertNotNull(\"no error on un-comparable values\", error);\n    assertTrue(\"error doesn't mention field name\",\n               0 <= error.getMessage().indexOf(\"foo_s\"));\n  }\n\n","sourceOld":"  public void testMaxValue() throws Exception {\n    SolrInputDocument d = null;\n\n    d = processAdd(\"max-value\", \n                   doc(f(\"id\", \"1111\"),\n                       f(\"foo_s\", \"zzz\", \"aaa\", \"bbb\"),\n                       f(\"foo_i\", 42, 128, -3),\n                       f(\"bar_s\", \"aaa\"),\n                       f(\"yak_t\", \"aaa\", \"bbb\")));\n\n    assertNotNull(d);\n\n    assertEquals(Arrays.asList(\"zzz\"),\n                 d.getFieldValues(\"foo_s\"));\n    assertEquals(Arrays.asList(128),\n                 d.getFieldValues(\"foo_i\"));\n    assertEquals(Arrays.asList(\"aaa\"), \n                 d.getFieldValues(\"bar_s\"));\n    assertEquals(Arrays.asList(\"aaa\", \"bbb\"), \n                 d.getFieldValues(\"yak_t\"));\n   \n    // failure when un-comparable\n\n    SolrException error = null;\n    try {\n      ignoreException(\".*Unable to mutate field.*\");\n      d = processAdd(\"min-value\", \n                     doc(f(\"id\", \"1111\"),\n                         f(\"foo_s\", \"zzz\", new Integer(42), \"bbb\"),\n                         f(\"bar_s\", \"aaa\"),\n                         f(\"yak_t\", \"aaa\", \"bbb\")));\n    } catch (SolrException e) {\n      error = e;\n    } finally {\n      resetExceptionIgnores();\n    }\n    assertNotNull(\"no error on un-comparable values\", error);\n    assertTrue(\"error doesn't mention field name\",\n               0 <= error.getMessage().indexOf(\"foo_s\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be9a5d1846ac0beb625ba68da060e16119d9f51e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["97011c9e96db3532a253bad154535c9d0f8c1006"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["97011c9e96db3532a253bad154535c9d0f8c1006","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"97011c9e96db3532a253bad154535c9d0f8c1006":["be9a5d1846ac0beb625ba68da060e16119d9f51e"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["97011c9e96db3532a253bad154535c9d0f8c1006","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["628903f37b6c442da0d390db1c6af9a0e74d41a7"]},"commit2Childs":{"be9a5d1846ac0beb625ba68da060e16119d9f51e":["97011c9e96db3532a253bad154535c9d0f8c1006"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be9a5d1846ac0beb625ba68da060e16119d9f51e"],"97011c9e96db3532a253bad154535c9d0f8c1006":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}