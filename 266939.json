{"path":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#next().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#next().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#next().mjava","sourceNew":"  @Override\n  public boolean next() throws IOException {\n    if (leafOrd >= leaves.length) {\n      return false;\n    }\n    if (current == null) {\n      current = query.getSpans(leaves[leafOrd], leaves[leafOrd].reader().getLiveDocs(), termContexts);\n    }\n    while(true) {\n      if (current.next()) {\n        return true;\n      }\n      if (++leafOrd < leaves.length) {\n        current = query.getSpans(leaves[leafOrd], leaves[leafOrd].reader().getLiveDocs(), termContexts);\n      } else {\n        current = null;\n        break;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean next() throws IOException {\n    if (leafOrd >= leaves.length) {\n      return false;\n    }\n    if (current == null) {\n      current = query.getSpans(leaves[leafOrd], leaves[leafOrd].reader().getLiveDocs(), termContexts);\n    }\n    while(true) {\n      if (current.next()) {\n        return true;\n      }\n      if (++leafOrd < leaves.length) {\n        current = query.getSpans(leaves[leafOrd], leaves[leafOrd].reader().getLiveDocs(), termContexts);\n      } else {\n        current = null;\n        break;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#next().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#next().mjava","sourceNew":"  @Override\n  public boolean next() throws IOException {\n    if (leafOrd >= numLeaves) {\n      return false;\n    }\n    if (current == null) {\n      final AtomicReaderContext ctx = leaves.get(leafOrd);\n      current = query.getSpans(ctx, ctx.reader().getLiveDocs(), termContexts);\n    }\n    while(true) {\n      if (current.next()) {\n        return true;\n      }\n      if (++leafOrd < numLeaves) {\n        final AtomicReaderContext ctx = leaves.get(leafOrd);\n        current = query.getSpans(ctx, ctx.reader().getLiveDocs(), termContexts);\n      } else {\n        current = null;\n        break;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean next() throws IOException {\n    if (leafOrd >= leaves.length) {\n      return false;\n    }\n    if (current == null) {\n      current = query.getSpans(leaves[leafOrd], leaves[leafOrd].reader().getLiveDocs(), termContexts);\n    }\n    while(true) {\n      if (current.next()) {\n        return true;\n      }\n      if (++leafOrd < leaves.length) {\n        current = query.getSpans(leaves[leafOrd], leaves[leafOrd].reader().getLiveDocs(), termContexts);\n      } else {\n        current = null;\n        break;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#next().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#next().mjava","sourceNew":"  @Override\n  public boolean next() throws IOException {\n    if (leafOrd >= numLeaves) {\n      return false;\n    }\n    if (current == null) {\n      final LeafReaderContext ctx = leaves.get(leafOrd);\n      current = query.getSpans(ctx, ctx.reader().getLiveDocs(), termContexts);\n    }\n    while(true) {\n      if (current.next()) {\n        return true;\n      }\n      if (++leafOrd < numLeaves) {\n        final LeafReaderContext ctx = leaves.get(leafOrd);\n        current = query.getSpans(ctx, ctx.reader().getLiveDocs(), termContexts);\n      } else {\n        current = null;\n        break;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean next() throws IOException {\n    if (leafOrd >= numLeaves) {\n      return false;\n    }\n    if (current == null) {\n      final AtomicReaderContext ctx = leaves.get(leafOrd);\n      current = query.getSpans(ctx, ctx.reader().getLiveDocs(), termContexts);\n    }\n    while(true) {\n      if (current.next()) {\n        return true;\n      }\n      if (++leafOrd < numLeaves) {\n        final AtomicReaderContext ctx = leaves.get(leafOrd);\n        current = query.getSpans(ctx, ctx.reader().getLiveDocs(), termContexts);\n      } else {\n        current = null;\n        break;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#next().mjava","sourceNew":null,"sourceOld":"  @Override\n  public boolean next() throws IOException {\n    if (leafOrd >= numLeaves) {\n      return false;\n    }\n    if (current == null) {\n      final LeafReaderContext ctx = leaves.get(leafOrd);\n      current = query.getSpans(ctx, ctx.reader().getLiveDocs(), termContexts);\n    }\n    while(true) {\n      if (current.next()) {\n        return true;\n      }\n      if (++leafOrd < numLeaves) {\n        final LeafReaderContext ctx = leaves.get(leafOrd);\n        current = query.getSpans(ctx, ctx.reader().getLiveDocs(), termContexts);\n      } else {\n        current = null;\n        break;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#next().mjava","sourceNew":null,"sourceOld":"  @Override\n  public boolean next() throws IOException {\n    if (leafOrd >= numLeaves) {\n      return false;\n    }\n    if (current == null) {\n      final LeafReaderContext ctx = leaves.get(leafOrd);\n      current = query.getSpans(ctx, ctx.reader().getLiveDocs(), termContexts);\n    }\n    while(true) {\n      if (current.next()) {\n        return true;\n      }\n      if (++leafOrd < numLeaves) {\n        final LeafReaderContext ctx = leaves.get(leafOrd);\n        current = query.getSpans(ctx, ctx.reader().getLiveDocs(), termContexts);\n      } else {\n        current = null;\n        break;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"fab172655716b96f7e42376116235017a922de3a":["c9fb5f46e264daf5ba3860defe623a89d202dd87","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"]},"commit2Childs":{"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fab172655716b96f7e42376116235017a922de3a":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}