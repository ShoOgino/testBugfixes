{"path":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleConfigUploadRequest(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"917e62f3497c83634a13edd833e8e21dd6cc6496","date":1490728467,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleConfigUploadRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void handleConfigUploadRequest(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    String configSetName = req.getParams().get(NAME);\n    if (StringUtils.isBlank(configSetName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The configuration name should be provided in the \\\"name\\\" parameter\");\n    }\n\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    String configPathInZk = ZkConfigManager.CONFIGS_ZKNODE + Path.SEPARATOR + configSetName;\n\n    if (zkClient.exists(configPathInZk, true)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The configuration \" + configSetName + \" already exists in zookeeper\");\n    }\n\n    Iterator<ContentStream> contentStreamsIterator = req.getContentStreams().iterator();\n\n    if (!contentStreamsIterator.hasNext()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No stream found for the config data to be uploaded\");\n    }\n\n    InputStream inputStream = contentStreamsIterator.next().getStream();\n\n    // Create a node for the configuration in zookeeper\n    boolean trusted = getTrusted(req);\n    zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n        getBytes(StandardCharsets.UTF_8), true);\n\n    ZipInputStream zis = new ZipInputStream(inputStream, StandardCharsets.UTF_8);\n    ZipEntry zipEntry = null;\n    while ((zipEntry = zis.getNextEntry()) != null) {\n      String filePathInZk = configPathInZk + \"/\" + zipEntry.getName();\n      if (zipEntry.isDirectory()) {\n        zkClient.makePath(filePathInZk, true);\n      } else {\n        createZkNodeIfNotExistsAndSetData(zkClient, filePathInZk,\n            IOUtils.toByteArray(zis));\n      }\n    }\n    zis.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1b4e25416a41abd13d1febb3eebf589cbc71e5ae"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3732e34f27916e98704736cc6924a34fffca249a","date":1490873946,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleConfigUploadRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void handleConfigUploadRequest(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    String configSetName = req.getParams().get(NAME);\n    if (StringUtils.isBlank(configSetName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The configuration name should be provided in the \\\"name\\\" parameter\");\n    }\n\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    String configPathInZk = ZkConfigManager.CONFIGS_ZKNODE + Path.SEPARATOR + configSetName;\n\n    if (zkClient.exists(configPathInZk, true)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The configuration \" + configSetName + \" already exists in zookeeper\");\n    }\n\n    Iterator<ContentStream> contentStreamsIterator = req.getContentStreams().iterator();\n\n    if (!contentStreamsIterator.hasNext()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No stream found for the config data to be uploaded\");\n    }\n\n    InputStream inputStream = contentStreamsIterator.next().getStream();\n\n    // Create a node for the configuration in zookeeper\n    boolean trusted = getTrusted(req);\n    zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n        getBytes(StandardCharsets.UTF_8), true);\n\n    ZipInputStream zis = new ZipInputStream(inputStream, StandardCharsets.UTF_8);\n    ZipEntry zipEntry = null;\n    while ((zipEntry = zis.getNextEntry()) != null) {\n      String filePathInZk = configPathInZk + \"/\" + zipEntry.getName();\n      if (zipEntry.isDirectory()) {\n        zkClient.makePath(filePathInZk, true);\n      } else {\n        createZkNodeIfNotExistsAndSetData(zkClient, filePathInZk,\n            IOUtils.toByteArray(zis));\n      }\n    }\n    zis.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c944148a761a75ff64169148c3ff7b6432aed85","date":1530279727,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleConfigUploadRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleConfigUploadRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleConfigUploadRequest(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (!\"true\".equals(System.getProperty(\"configset.upload.enabled\", \"true\"))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Configset upload feature is disabled. To enable this, start Solr with '-Dconfigset.upload.enabled=true'.\");\n    }\n\n    String configSetName = req.getParams().get(NAME);\n    if (StringUtils.isBlank(configSetName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The configuration name should be provided in the \\\"name\\\" parameter\");\n    }\n\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    String configPathInZk = ZkConfigManager.CONFIGS_ZKNODE + Path.SEPARATOR + configSetName;\n\n    if (zkClient.exists(configPathInZk, true)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The configuration \" + configSetName + \" already exists in zookeeper\");\n    }\n\n    Iterator<ContentStream> contentStreamsIterator = req.getContentStreams().iterator();\n\n    if (!contentStreamsIterator.hasNext()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No stream found for the config data to be uploaded\");\n    }\n\n    InputStream inputStream = contentStreamsIterator.next().getStream();\n\n    // Create a node for the configuration in zookeeper\n    boolean trusted = getTrusted(req);\n    zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n        getBytes(StandardCharsets.UTF_8), true);\n\n    ZipInputStream zis = new ZipInputStream(inputStream, StandardCharsets.UTF_8);\n    ZipEntry zipEntry = null;\n    while ((zipEntry = zis.getNextEntry()) != null) {\n      String filePathInZk = configPathInZk + \"/\" + zipEntry.getName();\n      if (zipEntry.isDirectory()) {\n        zkClient.makePath(filePathInZk, true);\n      } else {\n        createZkNodeIfNotExistsAndSetData(zkClient, filePathInZk,\n            IOUtils.toByteArray(zis));\n      }\n    }\n    zis.close();\n  }\n\n","sourceOld":"  private void handleConfigUploadRequest(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    String configSetName = req.getParams().get(NAME);\n    if (StringUtils.isBlank(configSetName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The configuration name should be provided in the \\\"name\\\" parameter\");\n    }\n\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    String configPathInZk = ZkConfigManager.CONFIGS_ZKNODE + Path.SEPARATOR + configSetName;\n\n    if (zkClient.exists(configPathInZk, true)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The configuration \" + configSetName + \" already exists in zookeeper\");\n    }\n\n    Iterator<ContentStream> contentStreamsIterator = req.getContentStreams().iterator();\n\n    if (!contentStreamsIterator.hasNext()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No stream found for the config data to be uploaded\");\n    }\n\n    InputStream inputStream = contentStreamsIterator.next().getStream();\n\n    // Create a node for the configuration in zookeeper\n    boolean trusted = getTrusted(req);\n    zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n        getBytes(StandardCharsets.UTF_8), true);\n\n    ZipInputStream zis = new ZipInputStream(inputStream, StandardCharsets.UTF_8);\n    ZipEntry zipEntry = null;\n    while ((zipEntry = zis.getNextEntry()) != null) {\n      String filePathInZk = configPathInZk + \"/\" + zipEntry.getName();\n      if (zipEntry.isDirectory()) {\n        zkClient.makePath(filePathInZk, true);\n      } else {\n        createZkNodeIfNotExistsAndSetData(zkClient, filePathInZk,\n            IOUtils.toByteArray(zis));\n      }\n    }\n    zis.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleConfigUploadRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleConfigUploadRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleConfigUploadRequest(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (!\"true\".equals(System.getProperty(\"configset.upload.enabled\", \"true\"))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Configset upload feature is disabled. To enable this, start Solr with '-Dconfigset.upload.enabled=true'.\");\n    }\n\n    String configSetName = req.getParams().get(NAME);\n    if (StringUtils.isBlank(configSetName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The configuration name should be provided in the \\\"name\\\" parameter\");\n    }\n\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    String configPathInZk = ZkConfigManager.CONFIGS_ZKNODE + Path.SEPARATOR + configSetName;\n\n    if (zkClient.exists(configPathInZk, true)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The configuration \" + configSetName + \" already exists in zookeeper\");\n    }\n\n    Iterator<ContentStream> contentStreamsIterator = req.getContentStreams().iterator();\n\n    if (!contentStreamsIterator.hasNext()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No stream found for the config data to be uploaded\");\n    }\n\n    InputStream inputStream = contentStreamsIterator.next().getStream();\n\n    // Create a node for the configuration in zookeeper\n    boolean trusted = getTrusted(req);\n    zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n        getBytes(StandardCharsets.UTF_8), true);\n\n    ZipInputStream zis = new ZipInputStream(inputStream, StandardCharsets.UTF_8);\n    ZipEntry zipEntry = null;\n    while ((zipEntry = zis.getNextEntry()) != null) {\n      String filePathInZk = configPathInZk + \"/\" + zipEntry.getName();\n      if (zipEntry.isDirectory()) {\n        zkClient.makePath(filePathInZk, true);\n      } else {\n        createZkNodeIfNotExistsAndSetData(zkClient, filePathInZk,\n            IOUtils.toByteArray(zis));\n      }\n    }\n    zis.close();\n  }\n\n","sourceOld":"  private void handleConfigUploadRequest(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    String configSetName = req.getParams().get(NAME);\n    if (StringUtils.isBlank(configSetName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The configuration name should be provided in the \\\"name\\\" parameter\");\n    }\n\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    String configPathInZk = ZkConfigManager.CONFIGS_ZKNODE + Path.SEPARATOR + configSetName;\n\n    if (zkClient.exists(configPathInZk, true)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The configuration \" + configSetName + \" already exists in zookeeper\");\n    }\n\n    Iterator<ContentStream> contentStreamsIterator = req.getContentStreams().iterator();\n\n    if (!contentStreamsIterator.hasNext()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No stream found for the config data to be uploaded\");\n    }\n\n    InputStream inputStream = contentStreamsIterator.next().getStream();\n\n    // Create a node for the configuration in zookeeper\n    boolean trusted = getTrusted(req);\n    zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n        getBytes(StandardCharsets.UTF_8), true);\n\n    ZipInputStream zis = new ZipInputStream(inputStream, StandardCharsets.UTF_8);\n    ZipEntry zipEntry = null;\n    while ((zipEntry = zis.getNextEntry()) != null) {\n      String filePathInZk = configPathInZk + \"/\" + zipEntry.getName();\n      if (zipEntry.isDirectory()) {\n        zkClient.makePath(filePathInZk, true);\n      } else {\n        createZkNodeIfNotExistsAndSetData(zkClient, filePathInZk,\n            IOUtils.toByteArray(zis));\n      }\n    }\n    zis.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleConfigUploadRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleConfigUploadRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleConfigUploadRequest(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (!\"true\".equals(System.getProperty(\"configset.upload.enabled\", \"true\"))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Configset upload feature is disabled. To enable this, start Solr with '-Dconfigset.upload.enabled=true'.\");\n    }\n\n    String configSetName = req.getParams().get(NAME);\n    if (StringUtils.isBlank(configSetName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The configuration name should be provided in the \\\"name\\\" parameter\");\n    }\n\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    String configPathInZk = ZkConfigManager.CONFIGS_ZKNODE + Path.SEPARATOR + configSetName;\n\n    if (zkClient.exists(configPathInZk, true)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The configuration \" + configSetName + \" already exists in zookeeper\");\n    }\n\n    Iterator<ContentStream> contentStreamsIterator = req.getContentStreams().iterator();\n\n    if (!contentStreamsIterator.hasNext()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No stream found for the config data to be uploaded\");\n    }\n\n    InputStream inputStream = contentStreamsIterator.next().getStream();\n\n    // Create a node for the configuration in zookeeper\n    boolean trusted = getTrusted(req);\n    zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n        getBytes(StandardCharsets.UTF_8), true);\n\n    ZipInputStream zis = new ZipInputStream(inputStream, StandardCharsets.UTF_8);\n    ZipEntry zipEntry = null;\n    while ((zipEntry = zis.getNextEntry()) != null) {\n      String filePathInZk = configPathInZk + \"/\" + zipEntry.getName();\n      if (zipEntry.isDirectory()) {\n        zkClient.makePath(filePathInZk, true);\n      } else {\n        createZkNodeIfNotExistsAndSetData(zkClient, filePathInZk,\n            IOUtils.toByteArray(zis));\n      }\n    }\n    zis.close();\n  }\n\n","sourceOld":"  private void handleConfigUploadRequest(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    String configSetName = req.getParams().get(NAME);\n    if (StringUtils.isBlank(configSetName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The configuration name should be provided in the \\\"name\\\" parameter\");\n    }\n\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    String configPathInZk = ZkConfigManager.CONFIGS_ZKNODE + Path.SEPARATOR + configSetName;\n\n    if (zkClient.exists(configPathInZk, true)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The configuration \" + configSetName + \" already exists in zookeeper\");\n    }\n\n    Iterator<ContentStream> contentStreamsIterator = req.getContentStreams().iterator();\n\n    if (!contentStreamsIterator.hasNext()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No stream found for the config data to be uploaded\");\n    }\n\n    InputStream inputStream = contentStreamsIterator.next().getStream();\n\n    // Create a node for the configuration in zookeeper\n    boolean trusted = getTrusted(req);\n    zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n        getBytes(StandardCharsets.UTF_8), true);\n\n    ZipInputStream zis = new ZipInputStream(inputStream, StandardCharsets.UTF_8);\n    ZipEntry zipEntry = null;\n    while ((zipEntry = zis.getNextEntry()) != null) {\n      String filePathInZk = configPathInZk + \"/\" + zipEntry.getName();\n      if (zipEntry.isDirectory()) {\n        zkClient.makePath(filePathInZk, true);\n      } else {\n        createZkNodeIfNotExistsAndSetData(zkClient, filePathInZk,\n            IOUtils.toByteArray(zis));\n      }\n    }\n    zis.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b4e25416a41abd13d1febb3eebf589cbc71e5ae","date":1595017101,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleConfigUploadRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleConfigUploadRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleConfigUploadRequest(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (!\"true\".equals(System.getProperty(\"configset.upload.enabled\", \"true\"))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Configset upload feature is disabled. To enable this, start Solr with '-Dconfigset.upload.enabled=true'.\");\n    }\n\n    String configSetName = req.getParams().get(NAME);\n    if (StringUtils.isBlank(configSetName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The configuration name should be provided in the \\\"name\\\" parameter\");\n    }\n\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    String configPathInZk = ZkConfigManager.CONFIGS_ZKNODE + \"/\" + configSetName;\n\n    if (zkClient.exists(configPathInZk, true)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The configuration \" + configSetName + \" already exists in zookeeper\");\n    }\n\n    Iterator<ContentStream> contentStreamsIterator = req.getContentStreams().iterator();\n\n    if (!contentStreamsIterator.hasNext()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No stream found for the config data to be uploaded\");\n    }\n\n    InputStream inputStream = contentStreamsIterator.next().getStream();\n\n    // Create a node for the configuration in zookeeper\n    boolean trusted = getTrusted(req);\n    zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n        getBytes(StandardCharsets.UTF_8), true);\n\n    ZipInputStream zis = new ZipInputStream(inputStream, StandardCharsets.UTF_8);\n    ZipEntry zipEntry = null;\n    while ((zipEntry = zis.getNextEntry()) != null) {\n      String filePathInZk = configPathInZk + \"/\" + zipEntry.getName();\n      if (zipEntry.isDirectory()) {\n        zkClient.makePath(filePathInZk, true);\n      } else {\n        createZkNodeIfNotExistsAndSetData(zkClient, filePathInZk,\n            IOUtils.toByteArray(zis));\n      }\n    }\n    zis.close();\n  }\n\n","sourceOld":"  private void handleConfigUploadRequest(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (!\"true\".equals(System.getProperty(\"configset.upload.enabled\", \"true\"))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Configset upload feature is disabled. To enable this, start Solr with '-Dconfigset.upload.enabled=true'.\");\n    }\n\n    String configSetName = req.getParams().get(NAME);\n    if (StringUtils.isBlank(configSetName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The configuration name should be provided in the \\\"name\\\" parameter\");\n    }\n\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    String configPathInZk = ZkConfigManager.CONFIGS_ZKNODE + Path.SEPARATOR + configSetName;\n\n    if (zkClient.exists(configPathInZk, true)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The configuration \" + configSetName + \" already exists in zookeeper\");\n    }\n\n    Iterator<ContentStream> contentStreamsIterator = req.getContentStreams().iterator();\n\n    if (!contentStreamsIterator.hasNext()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No stream found for the config data to be uploaded\");\n    }\n\n    InputStream inputStream = contentStreamsIterator.next().getStream();\n\n    // Create a node for the configuration in zookeeper\n    boolean trusted = getTrusted(req);\n    zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n        getBytes(StandardCharsets.UTF_8), true);\n\n    ZipInputStream zis = new ZipInputStream(inputStream, StandardCharsets.UTF_8);\n    ZipEntry zipEntry = null;\n    while ((zipEntry = zis.getNextEntry()) != null) {\n      String filePathInZk = configPathInZk + \"/\" + zipEntry.getName();\n      if (zipEntry.isDirectory()) {\n        zkClient.makePath(filePathInZk, true);\n      } else {\n        createZkNodeIfNotExistsAndSetData(zkClient, filePathInZk,\n            IOUtils.toByteArray(zis));\n      }\n    }\n    zis.close();\n  }\n\n","bugFix":["917e62f3497c83634a13edd833e8e21dd6cc6496"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0709b256ed89906e7b5f558ba1a675826f0a858f","date":1600796219,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleConfigUploadRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleConfigUploadRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleConfigUploadRequest(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (!\"true\".equals(System.getProperty(\"configset.upload.enabled\", \"true\"))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Configset upload feature is disabled. To enable this, start Solr with '-Dconfigset.upload.enabled=true'.\");\n    }\n\n    String configSetName = req.getParams().get(NAME);\n    if (StringUtils.isBlank(configSetName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The configuration name should be provided in the \\\"name\\\" parameter\");\n    }\n\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    String configPathInZk = ZkConfigManager.CONFIGS_ZKNODE + \"/\" + configSetName;\n\n    boolean overwritesExisting = zkClient.exists(configPathInZk, true);\n\n    if (overwritesExisting && !req.getParams().getBool(ConfigSetParams.OVERWRITE, false)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The configuration \" + configSetName + \" already exists in zookeeper\");\n    }\n\n    Iterator<ContentStream> contentStreamsIterator = req.getContentStreams().iterator();\n\n    if (!contentStreamsIterator.hasNext()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No stream found for the config data to be uploaded\");\n    }\n\n    InputStream inputStream = contentStreamsIterator.next().getStream();\n\n    // Create a node for the configuration in zookeeper\n    boolean cleanup = req.getParams().getBool(ConfigSetParams.CLEANUP, false);\n    \n    Set<String> filesToDelete;\n    if (overwritesExisting && cleanup) {\n      filesToDelete = getAllConfigsetFiles(zkClient, configPathInZk);\n    } else {\n      filesToDelete = Collections.emptySet();\n    }\n    createBaseZnode(zkClient, overwritesExisting, isTrusted(req), cleanup, configPathInZk);\n\n    ZipInputStream zis = new ZipInputStream(inputStream, StandardCharsets.UTF_8);\n    ZipEntry zipEntry = null;\n    while ((zipEntry = zis.getNextEntry()) != null) {\n      String filePathInZk = configPathInZk + \"/\" + zipEntry.getName();\n      if (filePathInZk.endsWith(\"/\")) {\n        filesToDelete.remove(filePathInZk.substring(0, filePathInZk.length() -1));\n      } else {\n        filesToDelete.remove(filePathInZk);\n      }\n      if (zipEntry.isDirectory()) {\n        zkClient.makePath(filePathInZk, false,  true);\n      } else {\n        createZkNodeIfNotExistsAndSetData(zkClient, filePathInZk,\n            IOUtils.toByteArray(zis));\n      }\n    }\n    zis.close();\n    deleteUnusedFiles(zkClient, filesToDelete);\n  }\n\n","sourceOld":"  private void handleConfigUploadRequest(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (!\"true\".equals(System.getProperty(\"configset.upload.enabled\", \"true\"))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Configset upload feature is disabled. To enable this, start Solr with '-Dconfigset.upload.enabled=true'.\");\n    }\n\n    String configSetName = req.getParams().get(NAME);\n    if (StringUtils.isBlank(configSetName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The configuration name should be provided in the \\\"name\\\" parameter\");\n    }\n\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    String configPathInZk = ZkConfigManager.CONFIGS_ZKNODE + \"/\" + configSetName;\n\n    if (zkClient.exists(configPathInZk, true)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The configuration \" + configSetName + \" already exists in zookeeper\");\n    }\n\n    Iterator<ContentStream> contentStreamsIterator = req.getContentStreams().iterator();\n\n    if (!contentStreamsIterator.hasNext()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No stream found for the config data to be uploaded\");\n    }\n\n    InputStream inputStream = contentStreamsIterator.next().getStream();\n\n    // Create a node for the configuration in zookeeper\n    boolean trusted = getTrusted(req);\n    zkClient.makePath(configPathInZk, (\"{\\\"trusted\\\": \" + Boolean.toString(trusted) + \"}\").\n        getBytes(StandardCharsets.UTF_8), true);\n\n    ZipInputStream zis = new ZipInputStream(inputStream, StandardCharsets.UTF_8);\n    ZipEntry zipEntry = null;\n    while ((zipEntry = zis.getNextEntry()) != null) {\n      String filePathInZk = configPathInZk + \"/\" + zipEntry.getName();\n      if (zipEntry.isDirectory()) {\n        zkClient.makePath(filePathInZk, true);\n      } else {\n        createZkNodeIfNotExistsAndSetData(zkClient, filePathInZk,\n            IOUtils.toByteArray(zis));\n      }\n    }\n    zis.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1852cb03cf4922477072449dd9de2fab588d1adb","date":1600862151,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleConfigUploadRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleConfigUploadRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleConfigUploadRequest(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (!\"true\".equals(System.getProperty(\"configset.upload.enabled\", \"true\"))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Configset upload feature is disabled. To enable this, start Solr with '-Dconfigset.upload.enabled=true'.\");\n    }\n\n    String configSetName = req.getParams().get(NAME);\n    if (StringUtils.isBlank(configSetName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The configuration name should be provided in the \\\"name\\\" parameter\");\n    }\n\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    String configPathInZk = ZkConfigManager.CONFIGS_ZKNODE + \"/\" + configSetName;\n\n    boolean overwritesExisting = zkClient.exists(configPathInZk, true);\n\n    if (overwritesExisting && !req.getParams().getBool(ConfigSetParams.OVERWRITE, false)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The configuration \" + configSetName + \" already exists in zookeeper\");\n    }\n\n    Iterator<ContentStream> contentStreamsIterator = req.getContentStreams().iterator();\n\n    if (!contentStreamsIterator.hasNext()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No stream found for the config data to be uploaded\");\n    }\n\n    InputStream inputStream = contentStreamsIterator.next().getStream();\n\n    // Create a node for the configuration in zookeeper\n    boolean cleanup = req.getParams().getBool(ConfigSetParams.CLEANUP, false);\n\n    Set<String> filesToDelete;\n    if (overwritesExisting && cleanup) {\n      filesToDelete = getAllConfigsetFiles(zkClient, configPathInZk);\n    } else {\n      filesToDelete = Collections.emptySet();\n    }\n    createBaseZnode(zkClient, overwritesExisting, isTrusted(req), cleanup, configPathInZk);\n\n    ZipInputStream zis = new ZipInputStream(inputStream, StandardCharsets.UTF_8);\n    ZipEntry zipEntry = null;\n    while ((zipEntry = zis.getNextEntry()) != null) {\n      String filePathInZk = configPathInZk + \"/\" + zipEntry.getName();\n      if (filePathInZk.endsWith(\"/\")) {\n        filesToDelete.remove(filePathInZk.substring(0, filePathInZk.length() -1));\n      } else {\n        filesToDelete.remove(filePathInZk);\n      }\n      if (zipEntry.isDirectory()) {\n        zkClient.makePath(filePathInZk, false,  true);\n      } else {\n        createZkNodeIfNotExistsAndSetData(zkClient, filePathInZk,\n            IOUtils.toByteArray(zis));\n      }\n    }\n    zis.close();\n    deleteUnusedFiles(zkClient, filesToDelete);\n  }\n\n","sourceOld":"  private void handleConfigUploadRequest(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (!\"true\".equals(System.getProperty(\"configset.upload.enabled\", \"true\"))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Configset upload feature is disabled. To enable this, start Solr with '-Dconfigset.upload.enabled=true'.\");\n    }\n\n    String configSetName = req.getParams().get(NAME);\n    if (StringUtils.isBlank(configSetName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The configuration name should be provided in the \\\"name\\\" parameter\");\n    }\n\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    String configPathInZk = ZkConfigManager.CONFIGS_ZKNODE + \"/\" + configSetName;\n\n    boolean overwritesExisting = zkClient.exists(configPathInZk, true);\n\n    if (overwritesExisting && !req.getParams().getBool(ConfigSetParams.OVERWRITE, false)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The configuration \" + configSetName + \" already exists in zookeeper\");\n    }\n\n    Iterator<ContentStream> contentStreamsIterator = req.getContentStreams().iterator();\n\n    if (!contentStreamsIterator.hasNext()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No stream found for the config data to be uploaded\");\n    }\n\n    InputStream inputStream = contentStreamsIterator.next().getStream();\n\n    // Create a node for the configuration in zookeeper\n    boolean cleanup = req.getParams().getBool(ConfigSetParams.CLEANUP, false);\n    \n    Set<String> filesToDelete;\n    if (overwritesExisting && cleanup) {\n      filesToDelete = getAllConfigsetFiles(zkClient, configPathInZk);\n    } else {\n      filesToDelete = Collections.emptySet();\n    }\n    createBaseZnode(zkClient, overwritesExisting, isTrusted(req), cleanup, configPathInZk);\n\n    ZipInputStream zis = new ZipInputStream(inputStream, StandardCharsets.UTF_8);\n    ZipEntry zipEntry = null;\n    while ((zipEntry = zis.getNextEntry()) != null) {\n      String filePathInZk = configPathInZk + \"/\" + zipEntry.getName();\n      if (filePathInZk.endsWith(\"/\")) {\n        filesToDelete.remove(filePathInZk.substring(0, filePathInZk.length() -1));\n      } else {\n        filesToDelete.remove(filePathInZk);\n      }\n      if (zipEntry.isDirectory()) {\n        zkClient.makePath(filePathInZk, false,  true);\n      } else {\n        createZkNodeIfNotExistsAndSetData(zkClient, filePathInZk,\n            IOUtils.toByteArray(zis));\n      }\n    }\n    zis.close();\n    deleteUnusedFiles(zkClient, filesToDelete);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c01ee5edcdd3cffaab03842feda0c26516290698","date":1601586820,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleConfigUploadRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ConfigSetsHandler#handleConfigUploadRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleConfigUploadRequest(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (!\"true\".equals(System.getProperty(\"configset.upload.enabled\", \"true\"))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Configset upload feature is disabled. To enable this, start Solr with '-Dconfigset.upload.enabled=true'.\");\n    }\n\n    String configSetName = req.getParams().get(NAME);\n    if (StringUtils.isBlank(configSetName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The configuration name should be provided in the \\\"name\\\" parameter\");\n    }\n\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    String configPathInZk = ZkConfigManager.CONFIGS_ZKNODE + \"/\" + configSetName;\n\n    boolean overwritesExisting = zkClient.exists(configPathInZk, true);\n\n    if (overwritesExisting && !req.getParams().getBool(ConfigSetParams.OVERWRITE, false)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The configuration \" + configSetName + \" already exists in zookeeper\");\n    }\n\n    Iterator<ContentStream> contentStreamsIterator = req.getContentStreams().iterator();\n\n    if (!contentStreamsIterator.hasNext()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No stream found for the config data to be uploaded\");\n    }\n\n    InputStream inputStream = contentStreamsIterator.next().getStream();\n\n    // Create a node for the configuration in zookeeper\n    boolean cleanup = req.getParams().getBool(ConfigSetParams.CLEANUP, false);\n\n    Set<String> filesToDelete;\n    if (overwritesExisting && cleanup) {\n      filesToDelete = getAllConfigsetFiles(zkClient, configPathInZk);\n    } else {\n      filesToDelete = Collections.emptySet();\n    }\n    createBaseZnode(zkClient, overwritesExisting, isTrusted(req, coreContainer.getAuthenticationPlugin()), cleanup, configPathInZk);\n\n    ZipInputStream zis = new ZipInputStream(inputStream, StandardCharsets.UTF_8);\n    ZipEntry zipEntry = null;\n    while ((zipEntry = zis.getNextEntry()) != null) {\n      String filePathInZk = configPathInZk + \"/\" + zipEntry.getName();\n      if (filePathInZk.endsWith(\"/\")) {\n        filesToDelete.remove(filePathInZk.substring(0, filePathInZk.length() -1));\n      } else {\n        filesToDelete.remove(filePathInZk);\n      }\n      if (zipEntry.isDirectory()) {\n        zkClient.makePath(filePathInZk, false,  true);\n      } else {\n        createZkNodeIfNotExistsAndSetData(zkClient, filePathInZk,\n            IOUtils.toByteArray(zis));\n      }\n    }\n    zis.close();\n    deleteUnusedFiles(zkClient, filesToDelete);\n  }\n\n","sourceOld":"  private void handleConfigUploadRequest(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (!\"true\".equals(System.getProperty(\"configset.upload.enabled\", \"true\"))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Configset upload feature is disabled. To enable this, start Solr with '-Dconfigset.upload.enabled=true'.\");\n    }\n\n    String configSetName = req.getParams().get(NAME);\n    if (StringUtils.isBlank(configSetName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The configuration name should be provided in the \\\"name\\\" parameter\");\n    }\n\n    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();\n    String configPathInZk = ZkConfigManager.CONFIGS_ZKNODE + \"/\" + configSetName;\n\n    boolean overwritesExisting = zkClient.exists(configPathInZk, true);\n\n    if (overwritesExisting && !req.getParams().getBool(ConfigSetParams.OVERWRITE, false)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"The configuration \" + configSetName + \" already exists in zookeeper\");\n    }\n\n    Iterator<ContentStream> contentStreamsIterator = req.getContentStreams().iterator();\n\n    if (!contentStreamsIterator.hasNext()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"No stream found for the config data to be uploaded\");\n    }\n\n    InputStream inputStream = contentStreamsIterator.next().getStream();\n\n    // Create a node for the configuration in zookeeper\n    boolean cleanup = req.getParams().getBool(ConfigSetParams.CLEANUP, false);\n\n    Set<String> filesToDelete;\n    if (overwritesExisting && cleanup) {\n      filesToDelete = getAllConfigsetFiles(zkClient, configPathInZk);\n    } else {\n      filesToDelete = Collections.emptySet();\n    }\n    createBaseZnode(zkClient, overwritesExisting, isTrusted(req), cleanup, configPathInZk);\n\n    ZipInputStream zis = new ZipInputStream(inputStream, StandardCharsets.UTF_8);\n    ZipEntry zipEntry = null;\n    while ((zipEntry = zis.getNextEntry()) != null) {\n      String filePathInZk = configPathInZk + \"/\" + zipEntry.getName();\n      if (filePathInZk.endsWith(\"/\")) {\n        filesToDelete.remove(filePathInZk.substring(0, filePathInZk.length() -1));\n      } else {\n        filesToDelete.remove(filePathInZk);\n      }\n      if (zipEntry.isDirectory()) {\n        zkClient.makePath(filePathInZk, false,  true);\n      } else {\n        createZkNodeIfNotExistsAndSetData(zkClient, filePathInZk,\n            IOUtils.toByteArray(zis));\n      }\n    }\n    zis.close();\n    deleteUnusedFiles(zkClient, filesToDelete);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"917e62f3497c83634a13edd833e8e21dd6cc6496":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["917e62f3497c83634a13edd833e8e21dd6cc6496","2c944148a761a75ff64169148c3ff7b6432aed85"],"c01ee5edcdd3cffaab03842feda0c26516290698":["1852cb03cf4922477072449dd9de2fab588d1adb"],"1b4e25416a41abd13d1febb3eebf589cbc71e5ae":["2c944148a761a75ff64169148c3ff7b6432aed85"],"2c944148a761a75ff64169148c3ff7b6432aed85":["917e62f3497c83634a13edd833e8e21dd6cc6496"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3732e34f27916e98704736cc6924a34fffca249a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0709b256ed89906e7b5f558ba1a675826f0a858f":["1b4e25416a41abd13d1febb3eebf589cbc71e5ae"],"1852cb03cf4922477072449dd9de2fab588d1adb":["0709b256ed89906e7b5f558ba1a675826f0a858f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c01ee5edcdd3cffaab03842feda0c26516290698"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["917e62f3497c83634a13edd833e8e21dd6cc6496","2c944148a761a75ff64169148c3ff7b6432aed85"]},"commit2Childs":{"917e62f3497c83634a13edd833e8e21dd6cc6496":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","2c944148a761a75ff64169148c3ff7b6432aed85","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"c01ee5edcdd3cffaab03842feda0c26516290698":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["917e62f3497c83634a13edd833e8e21dd6cc6496","3732e34f27916e98704736cc6924a34fffca249a"],"2c944148a761a75ff64169148c3ff7b6432aed85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","1b4e25416a41abd13d1febb3eebf589cbc71e5ae","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"1b4e25416a41abd13d1febb3eebf589cbc71e5ae":["0709b256ed89906e7b5f558ba1a675826f0a858f"],"3732e34f27916e98704736cc6924a34fffca249a":[],"0709b256ed89906e7b5f558ba1a675826f0a858f":["1852cb03cf4922477072449dd9de2fab588d1adb"],"1852cb03cf4922477072449dd9de2fab588d1adb":["c01ee5edcdd3cffaab03842feda0c26516290698"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","3732e34f27916e98704736cc6924a34fffca249a","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}