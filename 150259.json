{"path":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                                     .setSimilarity(sim).setMergePolicy(newLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", nonAnalyzedType));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = SlowCompositeReaderWrapper.wrap(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                                     .setSimilarity(sim).setMergePolicy(newLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", nonAnalyzedType));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = SlowCompositeReaderWrapper.wrap(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                                     .setSimilarity(sim).setMergePolicy(newLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", nonAnalyzedType));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = SlowCompositeReaderWrapper.wrap(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n                                                     .setSimilarity(sim).setMergePolicy(newLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", nonAnalyzedType));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = SlowCompositeReaderWrapper.wrap(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                                     .setSimilarity(sim).setMergePolicy(newLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newTextField(\"hed\", \"elephant\", Field.Store.YES));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newTextField(\"dek\", \"elephant\", Field.Store.YES));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newTextField(\"hed\", \"elephant\", Field.Store.YES));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newTextField(\"dek\", \"albino\", Field.Store.YES));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newTextField(\"dek\", \"elephant\", Field.Store.YES));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newTextField(\"hed\", \"albino\", Field.Store.YES));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newTextField(\"hed\", \"elephant\", Field.Store.YES));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newTextField(\"hed\", \"albino\", Field.Store.YES));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", nonAnalyzedType));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newTextField(\"dek\", \"albino\", Field.Store.YES));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = SlowCompositeReaderWrapper.wrap(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                                     .setSimilarity(sim).setMergePolicy(newLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newField(\"dek\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newField(\"dek\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newField(\"dek\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newField(\"hed\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newField(\"hed\", \"elephant\", TextField.TYPE_STORED));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newField(\"hed\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", nonAnalyzedType));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newField(\"dek\", \"albino\", TextField.TYPE_STORED));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = SlowCompositeReaderWrapper.wrap(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                                     .setSimilarity(sim).setMergePolicy(newLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newTextField(\"hed\", \"elephant\", Field.Store.YES));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newTextField(\"dek\", \"elephant\", Field.Store.YES));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newTextField(\"hed\", \"elephant\", Field.Store.YES));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newTextField(\"dek\", \"albino\", Field.Store.YES));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newTextField(\"dek\", \"elephant\", Field.Store.YES));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newTextField(\"hed\", \"albino\", Field.Store.YES));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newTextField(\"hed\", \"elephant\", Field.Store.YES));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newTextField(\"hed\", \"albino\", Field.Store.YES));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", nonAnalyzedType));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newTextField(\"dek\", \"albino\", Field.Store.YES));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = SlowCompositeReaderWrapper.wrap(writer.getReader());\n    writer.shutdown();\n    s = newSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                                     .setSimilarity(sim).setMergePolicy(newLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newTextField(\"hed\", \"elephant\", Field.Store.YES));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newTextField(\"dek\", \"elephant\", Field.Store.YES));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newTextField(\"hed\", \"elephant\", Field.Store.YES));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newTextField(\"dek\", \"albino\", Field.Store.YES));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newTextField(\"dek\", \"elephant\", Field.Store.YES));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newTextField(\"hed\", \"albino\", Field.Store.YES));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newTextField(\"hed\", \"elephant\", Field.Store.YES));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newTextField(\"hed\", \"albino\", Field.Store.YES));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", nonAnalyzedType));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newTextField(\"dek\", \"albino\", Field.Store.YES));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = SlowCompositeReaderWrapper.wrap(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), index,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n                             .setSimilarity(sim).setMergePolicy(newLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newTextField(\"hed\", \"elephant\", Field.Store.YES));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newTextField(\"dek\", \"elephant\", Field.Store.YES));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newTextField(\"hed\", \"elephant\", Field.Store.YES));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newTextField(\"dek\", \"albino\", Field.Store.YES));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newTextField(\"dek\", \"elephant\", Field.Store.YES));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newTextField(\"hed\", \"albino\", Field.Store.YES));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newTextField(\"hed\", \"elephant\", Field.Store.YES));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newTextField(\"hed\", \"albino\", Field.Store.YES));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", nonAnalyzedType));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newTextField(\"dek\", \"albino\", Field.Store.YES));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = SlowCompositeReaderWrapper.wrap(writer.getReader());\n    writer.shutdown();\n    s = newSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), index,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n                                                     .setSimilarity(sim).setMergePolicy(newLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newTextField(\"hed\", \"elephant\", Field.Store.YES));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newTextField(\"dek\", \"elephant\", Field.Store.YES));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newTextField(\"hed\", \"elephant\", Field.Store.YES));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newTextField(\"dek\", \"albino\", Field.Store.YES));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newTextField(\"dek\", \"elephant\", Field.Store.YES));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newTextField(\"hed\", \"albino\", Field.Store.YES));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newTextField(\"hed\", \"elephant\", Field.Store.YES));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newTextField(\"hed\", \"albino\", Field.Store.YES));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", nonAnalyzedType));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newTextField(\"dek\", \"albino\", Field.Store.YES));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = SlowCompositeReaderWrapper.wrap(writer.getReader());\n    writer.shutdown();\n    s = newSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), index,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n                             .setSimilarity(sim).setMergePolicy(newLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newTextField(\"hed\", \"elephant\", Field.Store.YES));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newTextField(\"dek\", \"elephant\", Field.Store.YES));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newTextField(\"hed\", \"elephant\", Field.Store.YES));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newTextField(\"dek\", \"albino\", Field.Store.YES));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newTextField(\"dek\", \"elephant\", Field.Store.YES));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newTextField(\"hed\", \"albino\", Field.Store.YES));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newTextField(\"hed\", \"elephant\", Field.Store.YES));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newTextField(\"hed\", \"albino\", Field.Store.YES));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", nonAnalyzedType));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newTextField(\"dek\", \"albino\", Field.Store.YES));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = SlowCompositeReaderWrapper.wrap(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), index,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n                             .setSimilarity(sim).setMergePolicy(newLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newTextField(\"hed\", \"elephant\", Field.Store.YES));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newTextField(\"dek\", \"elephant\", Field.Store.YES));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newTextField(\"hed\", \"elephant\", Field.Store.YES));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newTextField(\"dek\", \"albino\", Field.Store.YES));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newTextField(\"dek\", \"elephant\", Field.Store.YES));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newTextField(\"hed\", \"albino\", Field.Store.YES));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newTextField(\"hed\", \"elephant\", Field.Store.YES));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newTextField(\"hed\", \"albino\", Field.Store.YES));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", nonAnalyzedType));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newTextField(\"dek\", \"albino\", Field.Store.YES));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = SlowCompositeReaderWrapper.wrap(writer.getReader());\n    writer.shutdown();\n    s = newSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), index,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n                             .setSimilarity(sim).setMergePolicy(newLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newTextField(\"hed\", \"elephant\", Field.Store.YES));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newTextField(\"dek\", \"elephant\", Field.Store.YES));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newTextField(\"hed\", \"elephant\", Field.Store.YES));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newTextField(\"dek\", \"albino\", Field.Store.YES));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newTextField(\"dek\", \"elephant\", Field.Store.YES));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newTextField(\"hed\", \"albino\", Field.Store.YES));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newTextField(\"hed\", \"elephant\", Field.Store.YES));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newTextField(\"hed\", \"albino\", Field.Store.YES));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", nonAnalyzedType));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newTextField(\"dek\", \"albino\", Field.Store.YES));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    writer.forceMerge(1);\n    r = getOnlyLeafReader(writer.getReader());\n    writer.close();\n    s = new IndexSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    \n    index = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), index,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n                             .setSimilarity(sim).setMergePolicy(newLogMergePolicy()));\n    \n    // hed is the most important field, dek is secondary\n    \n    // d1 is an \"ok\" match for: albino elephant\n    {\n      Document d1 = new Document();\n      d1.add(newField(\"id\", \"d1\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d1\"));\n      d1\n          .add(newTextField(\"hed\", \"elephant\", Field.Store.YES));// Field.Text(\"hed\", \"elephant\"));\n      d1\n          .add(newTextField(\"dek\", \"elephant\", Field.Store.YES));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d1);\n    }\n    \n    // d2 is a \"good\" match for: albino elephant\n    {\n      Document d2 = new Document();\n      d2.add(newField(\"id\", \"d2\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d2\"));\n      d2\n          .add(newTextField(\"hed\", \"elephant\", Field.Store.YES));// Field.Text(\"hed\", \"elephant\"));\n      d2.add(newTextField(\"dek\", \"albino\", Field.Store.YES));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      d2\n          .add(newTextField(\"dek\", \"elephant\", Field.Store.YES));// Field.Text(\"dek\", \"elephant\"));\n      writer.addDocument(d2);\n    }\n    \n    // d3 is a \"better\" match for: albino elephant\n    {\n      Document d3 = new Document();\n      d3.add(newField(\"id\", \"d3\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d3\"));\n      d3.add(newTextField(\"hed\", \"albino\", Field.Store.YES));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d3\n          .add(newTextField(\"hed\", \"elephant\", Field.Store.YES));// Field.Text(\"hed\", \"elephant\"));\n      writer.addDocument(d3);\n    }\n    \n    // d4 is the \"best\" match for: albino elephant\n    {\n      Document d4 = new Document();\n      d4.add(newField(\"id\", \"d4\", nonAnalyzedType));// Field.Keyword(\"id\",\n                                                                               // \"d4\"));\n      d4.add(newTextField(\"hed\", \"albino\", Field.Store.YES));// Field.Text(\"hed\",\n                                                                                // \"albino\"));\n      d4\n          .add(newField(\"hed\", \"elephant\", nonAnalyzedType));// Field.Text(\"hed\", \"elephant\"));\n      d4.add(newTextField(\"dek\", \"albino\", Field.Store.YES));// Field.Text(\"dek\",\n                                                                                // \"albino\"));\n      writer.addDocument(d4);\n    }\n    \n    r = SlowCompositeReaderWrapper.wrap(writer.getReader());\n    writer.close();\n    s = newSearcher(r);\n    s.setSimilarity(sim);\n  }\n\n","bugFix":["790e1fde4caa765b3faaad3fbcd25c6973450336","386d1b0dcb065f1bfc494b1407cb41c536b95485"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"]},"commit2Childs":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}