{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#doLogic().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws IOException {\n    String className = null;\n    try {\n      if (current >= analyzerClassNames.size()) {\n        current = 0;\n      }\n      className = analyzerClassNames.get(current++);\n      Analyzer analyzer = null;\n      if (null == className || 0 == className.length()) {\n        className = \"org.apache.lucene.analysis.standard.StandardAnalyzer\";\n      }\n      if (-1 == className.indexOf(\".\")) {\n        try {\n          // If no package, first attempt to instantiate a core analyzer\n          String coreClassName = \"org.apache.lucene.analysis.core.\" + className;\n          analyzer = createAnalyzer(coreClassName);\n          className = coreClassName;\n        } catch (ClassNotFoundException e) {\n          // If not a core analyzer, try the base analysis package \n          className = \"org.apache.lucene.analysis.\" + className;\n          analyzer = createAnalyzer(className);\n        }\n      } else {\n        if (className.startsWith(\"standard.\")) {\n          className = \"org.apache.lucene.analysis.\" + className;\n        }\n        analyzer = createAnalyzer(className);\n      }\n      getRunData().setAnalyzer(analyzer);\n      System.out.println(\"Changed Analyzer to: \" + className);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error creating Analyzer: \" + className, e);\n    }\n    return 1;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws IOException {\n    String className = null;\n    try {\n      if (current >= analyzerClassNames.size()) {\n        current = 0;\n      }\n      className = analyzerClassNames.get(current++);\n      Analyzer analyzer = null;\n      if (null == className || 0 == className.length()) {\n        className = \"org.apache.lucene.analysis.standard.StandardAnalyzer\";\n      }\n      if (-1 == className.indexOf(\".\")) {\n        try {\n          // If no package, first attempt to instantiate a core analyzer\n          String coreClassName = \"org.apache.lucene.analysis.core.\" + className;\n          analyzer = createAnalyzer(coreClassName);\n          className = coreClassName;\n        } catch (ClassNotFoundException e) {\n          // If not a core analyzer, try the base analysis package \n          className = \"org.apache.lucene.analysis.\" + className;\n          analyzer = createAnalyzer(className);\n        }\n      } else {\n        if (className.startsWith(\"standard.\")) {\n          className = \"org.apache.lucene.analysis.\" + className;\n        }\n        analyzer = createAnalyzer(className);\n      }\n      getRunData().setAnalyzer(analyzer);\n      System.out.println(\"Changed Analyzer to: \" + className);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error creating Analyzer: \" + className, e);\n    }\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7bb889a868ab9d608bde8136f42ed7234a3a927b","date":1359393528,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#doLogic().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws IOException {\n    String analyzerName = null;\n    try {\n      if (current >= analyzerNames.size()) {\n        current = 0;\n      }\n      analyzerName = analyzerNames.get(current++);\n      Analyzer analyzer = null;\n      if (null == analyzerName || 0 == analyzerName.length()) {\n        analyzerName = \"org.apache.lucene.analysis.standard.StandardAnalyzer\";\n      }\n      // First, lookup analyzerName as a named analyzer factory\n      AnalyzerFactory factory = getRunData().getAnalyzerFactories().get(analyzerName);\n      if (null != factory) {\n        analyzer = factory.create();\n      } else {\n        if (analyzerName.contains(\".\")) {\n          if (analyzerName.startsWith(\"standard.\")) {\n            analyzerName = \"org.apache.lucene.analysis.\" + analyzerName;\n          }\n          analyzer = createAnalyzer(analyzerName);\n        } else { // No package\n          try {\n            // Attempt to instantiate a core analyzer\n            String coreClassName = \"org.apache.lucene.analysis.core.\" + analyzerName;\n            analyzer = createAnalyzer(coreClassName);\n            analyzerName = coreClassName;\n          } catch (ClassNotFoundException e) {\n            // If not a core analyzer, try the base analysis package\n            analyzerName = \"org.apache.lucene.analysis.\" + analyzerName;\n            analyzer = createAnalyzer(analyzerName);\n          }\n        }\n      }\n      getRunData().setAnalyzer(analyzer);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error creating Analyzer: \" + analyzerName, e);\n    }\n    return 1;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws IOException {\n    String className = null;\n    try {\n      if (current >= analyzerClassNames.size()) {\n        current = 0;\n      }\n      className = analyzerClassNames.get(current++);\n      Analyzer analyzer = null;\n      if (null == className || 0 == className.length()) {\n        className = \"org.apache.lucene.analysis.standard.StandardAnalyzer\";\n      }\n      if (-1 == className.indexOf(\".\")) {\n        try {\n          // If no package, first attempt to instantiate a core analyzer\n          String coreClassName = \"org.apache.lucene.analysis.core.\" + className;\n          analyzer = createAnalyzer(coreClassName);\n          className = coreClassName;\n        } catch (ClassNotFoundException e) {\n          // If not a core analyzer, try the base analysis package \n          className = \"org.apache.lucene.analysis.\" + className;\n          analyzer = createAnalyzer(className);\n        }\n      } else {\n        if (className.startsWith(\"standard.\")) {\n          className = \"org.apache.lucene.analysis.\" + className;\n        }\n        analyzer = createAnalyzer(className);\n      }\n      getRunData().setAnalyzer(analyzer);\n      System.out.println(\"Changed Analyzer to: \" + className);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error creating Analyzer: \" + className, e);\n    }\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de522d9303bd67c8473a269a1319125d1f3700e0","date":1359477856,"type":3,"author":"Adrien Grand","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#doLogic().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws IOException {\n    String analyzerName = null;\n    try {\n      if (current >= analyzerNames.size()) {\n        current = 0;\n      }\n      analyzerName = analyzerNames.get(current++);\n      Analyzer analyzer = null;\n      if (null == analyzerName || 0 == analyzerName.length()) {\n        analyzerName = \"org.apache.lucene.analysis.standard.StandardAnalyzer\";\n      }\n      // First, lookup analyzerName as a named analyzer factory\n      AnalyzerFactory factory = getRunData().getAnalyzerFactories().get(analyzerName);\n      if (null != factory) {\n        analyzer = factory.create();\n      } else {\n        if (analyzerName.contains(\".\")) {\n          if (analyzerName.startsWith(\"standard.\")) {\n            analyzerName = \"org.apache.lucene.analysis.\" + analyzerName;\n          }\n          analyzer = createAnalyzer(analyzerName);\n        } else { // No package\n          try {\n            // Attempt to instantiate a core analyzer\n            String coreClassName = \"org.apache.lucene.analysis.core.\" + analyzerName;\n            analyzer = createAnalyzer(coreClassName);\n            analyzerName = coreClassName;\n          } catch (ClassNotFoundException e) {\n            // If not a core analyzer, try the base analysis package\n            analyzerName = \"org.apache.lucene.analysis.\" + analyzerName;\n            analyzer = createAnalyzer(analyzerName);\n          }\n        }\n      }\n      getRunData().setAnalyzer(analyzer);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error creating Analyzer: \" + analyzerName, e);\n    }\n    return 1;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws IOException {\n    String className = null;\n    try {\n      if (current >= analyzerClassNames.size()) {\n        current = 0;\n      }\n      className = analyzerClassNames.get(current++);\n      Analyzer analyzer = null;\n      if (null == className || 0 == className.length()) {\n        className = \"org.apache.lucene.analysis.standard.StandardAnalyzer\";\n      }\n      if (-1 == className.indexOf(\".\")) {\n        try {\n          // If no package, first attempt to instantiate a core analyzer\n          String coreClassName = \"org.apache.lucene.analysis.core.\" + className;\n          analyzer = createAnalyzer(coreClassName);\n          className = coreClassName;\n        } catch (ClassNotFoundException e) {\n          // If not a core analyzer, try the base analysis package \n          className = \"org.apache.lucene.analysis.\" + className;\n          analyzer = createAnalyzer(className);\n        }\n      } else {\n        if (className.startsWith(\"standard.\")) {\n          className = \"org.apache.lucene.analysis.\" + className;\n        }\n        analyzer = createAnalyzer(className);\n      }\n      getRunData().setAnalyzer(analyzer);\n      System.out.println(\"Changed Analyzer to: \" + className);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error creating Analyzer: \" + className, e);\n    }\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7bb889a868ab9d608bde8136f42ed7234a3a927b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"de522d9303bd67c8473a269a1319125d1f3700e0":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7bb889a868ab9d608bde8136f42ed7234a3a927b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7bb889a868ab9d608bde8136f42ed7234a3a927b"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7bb889a868ab9d608bde8136f42ed7234a3a927b","de522d9303bd67c8473a269a1319125d1f3700e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7bb889a868ab9d608bde8136f42ed7234a3a927b":["de522d9303bd67c8473a269a1319125d1f3700e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"de522d9303bd67c8473a269a1319125d1f3700e0":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["de522d9303bd67c8473a269a1319125d1f3700e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}