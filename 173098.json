{"path":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#assertNumberOfTlogFiles(String,int).mjava","commits":[{"id":"4dcd1fe49b76116e7d358993339fe8adbb030638","date":1437151093,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#assertNumberOfTlogFiles(String,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Asserts the number of transaction logs across all the shards. Since the cleaning of the update logs\n   * is not immediate on the slave nodes (it relies on the update log synchronizer that is executed every second),\n   * it will retry until the assert is successful or until the timeout.\n   */\n  protected void assertNumberOfTlogFiles(String collection, int maxNumberOfTLogs) throws Exception {\n    int cnt = 15; // timeout after 15 seconds\n    AssertionError lastAssertionError = null;\n\n    while (cnt > 0) {\n      try {\n        // Fire a DeleteById query with a commit to trigger update log cleaning on the non-leader nodes\n        List<String> ids = new ArrayList<>();\n        ids.add(\"_NON_EXISTING_ID_\");\n        deleteById(collection, ids);\n\n        // Check the update logs\n        this._assertNumberOfTlogFiles(collection, maxNumberOfTLogs);\n        return;\n      }\n      catch (AssertionError e) {\n        lastAssertionError = e;\n        cnt--;\n        Thread.sleep(1000);\n      }\n    }\n\n    throw new AssertionError(\"Timeout while trying to assert update logs @ collection=\"+collection, lastAssertionError);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5","date":1446841099,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#assertNumberOfTlogFiles(String,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Asserts the number of transaction logs across all the shards. Since the cleaning of the update logs\n   * is not immediate on the slave nodes (it relies on the update log synchronizer that is executed every second),\n   * it will retry until the assert is successful or until the timeout.\n   */\n  protected void assertNumberOfTlogFiles(String collection, int maxNumberOfTLogs) throws Exception {\n    int cnt = 15; // timeout after 15 seconds\n    AssertionError lastAssertionError = null;\n\n    while (cnt > 0) {\n      try {\n        // Fire a DeleteById query with a commit to trigger update log cleaning on the non-leader nodes\n        List<String> ids = new ArrayList<>();\n        ids.add(\"_NON_EXISTING_ID_\");\n        deleteById(collection, ids);\n\n        // Check the update logs\n        this._assertNumberOfTlogFiles(collection, maxNumberOfTLogs);\n        return;\n      }\n      catch (AssertionError e) {\n        lastAssertionError = e;\n        cnt--;\n        Thread.sleep(1000);\n      }\n    }\n\n    throw new AssertionError(\"Timeout while trying to assert update logs @ collection=\"+collection, lastAssertionError);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["4dcd1fe49b76116e7d358993339fe8adbb030638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4dcd1fe49b76116e7d358993339fe8adbb030638":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"]},"commit2Childs":{"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4dcd1fe49b76116e7d358993339fe8adbb030638"],"4dcd1fe49b76116e7d358993339fe8adbb030638":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}