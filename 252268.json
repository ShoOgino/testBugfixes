{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDeleteDocs().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDeleteDocs().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder2#testDeleteDocs().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDeleteDocs() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"two\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", \"$deleteDocById\", \"2\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(dataConfigForSkipTransform);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n\n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", \"$deleteDocByQuery\", \"desc:one\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(dataConfigForSkipTransform);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDeleteDocs() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"two\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", \"$deleteDocById\", \"2\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(dataConfigForSkipTransform);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n\n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", \"$deleteDocByQuery\", \"desc:one\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(dataConfigForSkipTransform);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDeleteDocs().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder2#testDeleteDocs().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDeleteDocs() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"two\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", \"$deleteDocById\", \"2\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(dataConfigForSkipTransform);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n\n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", \"$deleteDocByQuery\", \"desc:one\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(dataConfigForSkipTransform);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDeleteDocs() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"two\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", \"$deleteDocById\", \"2\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(dataConfigForSkipTransform);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n\n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", \"$deleteDocByQuery\", \"desc:one\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(dataConfigForSkipTransform);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"430386fa8c880f8c17537a3f4e30ad4611527450","date":1310548555,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDeleteDocs().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDeleteDocs().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDeleteDocs() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"two\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", \"$deleteDocById\", \"2\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(dataConfigForSkipTransform);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n\n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", \"$deleteDocByQuery\", \"desc:one\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(dataConfigForSkipTransform);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(\"$deleteDocById\", \"3\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n    runFullImport(dataConfigForSkipTransform, createMap(\"clean\",\"false\"));\n    assertQ(req(\"id:3\"), \"//*[@numFound='0']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDeleteDocs() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"two\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", \"$deleteDocById\", \"2\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(dataConfigForSkipTransform);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n\n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", \"$deleteDocByQuery\", \"desc:one\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(dataConfigForSkipTransform);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n  }\n\n","bugFix":null,"bugIntro":["1b604003611eabbb4d3f0fb1f89d3b6a017f8faa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b604003611eabbb4d3f0fb1f89d3b6a017f8faa","date":1386079993,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDeleteDocs().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDeleteDocs().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDeleteDocs() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"two\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", DocBuilder.DELETE_DOC_BY_ID, \"2\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(dataConfigForSkipTransform);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n\n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", DocBuilder.DELETE_DOC_BY_QUERY, \"desc:one\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(dataConfigForSkipTransform);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(DocBuilder.DELETE_DOC_BY_ID, \"3\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n    runFullImport(dataConfigForSkipTransform, createMap(\"clean\",\"false\"));\n    assertQ(req(\"id:3\"), \"//*[@numFound='0']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDeleteDocs() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"two\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", \"$deleteDocById\", \"2\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(dataConfigForSkipTransform);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n\n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", \"$deleteDocByQuery\", \"desc:one\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(dataConfigForSkipTransform);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(\"$deleteDocById\", \"3\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n    runFullImport(dataConfigForSkipTransform, createMap(\"clean\",\"false\"));\n    assertQ(req(\"id:3\"), \"//*[@numFound='0']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n  }\n\n","bugFix":["430386fa8c880f8c17537a3f4e30ad4611527450","224b88b42379406127ec6498137f4bc4cab4abbc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDeleteDocs().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDeleteDocs().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDeleteDocs() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"two\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", DocBuilder.DELETE_DOC_BY_ID, \"2\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(dataConfigForSkipTransform);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n\n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", DocBuilder.DELETE_DOC_BY_QUERY, \"desc:one\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(dataConfigForSkipTransform);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(DocBuilder.DELETE_DOC_BY_ID, \"3\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n    runFullImport(dataConfigForSkipTransform, createMap(\"clean\",\"false\"));\n    assertQ(req(\"id:3\"), \"//*[@numFound='0']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDeleteDocs() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"two\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", \"$deleteDocById\", \"2\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(dataConfigForSkipTransform);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n\n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", \"$deleteDocByQuery\", \"desc:one\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(dataConfigForSkipTransform);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(\"$deleteDocById\", \"3\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n    runFullImport(dataConfigForSkipTransform, createMap(\"clean\",\"false\"));\n    assertQ(req(\"id:3\"), \"//*[@numFound='0']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDeleteDocs().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDeleteDocs().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDeleteDocs() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"two\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", DocBuilder.DELETE_DOC_BY_ID, \"2\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(DATA_CONFIG_FOR_SKIP_TRANSFORM);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n\n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", DocBuilder.DELETE_DOC_BY_QUERY, \"desc:one\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(DATA_CONFIG_FOR_SKIP_TRANSFORM);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(DocBuilder.DELETE_DOC_BY_ID, \"3\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n    runFullImport(DATA_CONFIG_FOR_SKIP_TRANSFORM, createMap(\"clean\",\"false\"));\n    assertQ(req(\"id:3\"), \"//*[@numFound='0']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDeleteDocs() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"two\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", DocBuilder.DELETE_DOC_BY_ID, \"2\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(dataConfigForSkipTransform);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n\n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", DocBuilder.DELETE_DOC_BY_QUERY, \"desc:one\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(dataConfigForSkipTransform);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(DocBuilder.DELETE_DOC_BY_ID, \"3\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n    runFullImport(dataConfigForSkipTransform, createMap(\"clean\",\"false\"));\n    assertQ(req(\"id:3\"), \"//*[@numFound='0']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDeleteDocs().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDeleteDocs().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDeleteDocs() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"two\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", DocBuilder.DELETE_DOC_BY_ID, \"2\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(DATA_CONFIG_FOR_SKIP_TRANSFORM);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n\n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", DocBuilder.DELETE_DOC_BY_QUERY, \"desc:one\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(DATA_CONFIG_FOR_SKIP_TRANSFORM);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(DocBuilder.DELETE_DOC_BY_ID, \"3\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n    runFullImport(DATA_CONFIG_FOR_SKIP_TRANSFORM, createMap(\"clean\",\"false\"));\n    assertQ(req(\"id:3\"), \"//*[@numFound='0']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDeleteDocs() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"two\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", DocBuilder.DELETE_DOC_BY_ID, \"2\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(dataConfigForSkipTransform);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n\n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", DocBuilder.DELETE_DOC_BY_QUERY, \"desc:one\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(dataConfigForSkipTransform);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(DocBuilder.DELETE_DOC_BY_ID, \"3\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n    runFullImport(dataConfigForSkipTransform, createMap(\"clean\",\"false\"));\n    assertQ(req(\"id:3\"), \"//*[@numFound='0']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDeleteDocs().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDeleteDocs().mjava","sourceNew":"  @Test\n  public void testDeleteDocs() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"two\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", DocBuilder.DELETE_DOC_BY_ID, \"2\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(DATA_CONFIG_FOR_SKIP_TRANSFORM);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n\n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", DocBuilder.DELETE_DOC_BY_QUERY, \"desc:one\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(DATA_CONFIG_FOR_SKIP_TRANSFORM);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(DocBuilder.DELETE_DOC_BY_ID, \"3\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n    runFullImport(DATA_CONFIG_FOR_SKIP_TRANSFORM, createMap(\"clean\",\"false\"));\n    assertQ(req(\"id:3\"), \"//*[@numFound='0']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDeleteDocs() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"two\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", DocBuilder.DELETE_DOC_BY_ID, \"2\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(DATA_CONFIG_FOR_SKIP_TRANSFORM);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n\n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", DocBuilder.DELETE_DOC_BY_QUERY, \"desc:one\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(DATA_CONFIG_FOR_SKIP_TRANSFORM);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(DocBuilder.DELETE_DOC_BY_ID, \"3\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n    runFullImport(DATA_CONFIG_FOR_SKIP_TRANSFORM, createMap(\"clean\",\"false\"));\n    assertQ(req(\"id:3\"), \"//*[@numFound='0']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDeleteDocs().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDeleteDocs().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDeleteDocs() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"two\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", DocBuilder.DELETE_DOC_BY_ID, \"2\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(DATA_CONFIG_FOR_SKIP_TRANSFORM);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n\n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", DocBuilder.DELETE_DOC_BY_QUERY, \"desc:one\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(DATA_CONFIG_FOR_SKIP_TRANSFORM);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(DocBuilder.DELETE_DOC_BY_ID, \"3\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n    runFullImport(DATA_CONFIG_FOR_SKIP_TRANSFORM, createMap(\"clean\",\"false\"));\n    assertQ(req(\"id:3\"), \"//*[@numFound='0']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n  }\n\n","sourceOld":"  @Test\n  public void testDeleteDocs() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"two\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", DocBuilder.DELETE_DOC_BY_ID, \"2\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(DATA_CONFIG_FOR_SKIP_TRANSFORM);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n\n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", DocBuilder.DELETE_DOC_BY_QUERY, \"desc:one\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(DATA_CONFIG_FOR_SKIP_TRANSFORM);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(DocBuilder.DELETE_DOC_BY_ID, \"3\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n    runFullImport(DATA_CONFIG_FOR_SKIP_TRANSFORM, createMap(\"clean\",\"false\"));\n    assertQ(req(\"id:3\"), \"//*[@numFound='0']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024e13388acbf5562fcbb77a129620982a5e2d79","date":1591531835,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDeleteDocs().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDeleteDocs().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testDeleteDocs() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"two\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", DocBuilder.DELETE_DOC_BY_ID, \"2\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(DATA_CONFIG_FOR_SKIP_TRANSFORM);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n\n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", DocBuilder.DELETE_DOC_BY_QUERY, \"desc:one\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(DATA_CONFIG_FOR_SKIP_TRANSFORM);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(DocBuilder.DELETE_DOC_BY_ID, \"3\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n    runFullImport(DATA_CONFIG_FOR_SKIP_TRANSFORM, createMap(\"clean\",\"false\"));\n    assertQ(req(\"id:3\"), \"//*[@numFound='0']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDeleteDocs() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"two\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", DocBuilder.DELETE_DOC_BY_ID, \"2\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(DATA_CONFIG_FOR_SKIP_TRANSFORM);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n\n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", DocBuilder.DELETE_DOC_BY_QUERY, \"desc:one\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(DATA_CONFIG_FOR_SKIP_TRANSFORM);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(DocBuilder.DELETE_DOC_BY_ID, \"3\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n    runFullImport(DATA_CONFIG_FOR_SKIP_TRANSFORM, createMap(\"clean\",\"false\"));\n    assertQ(req(\"id:3\"), \"//*[@numFound='0']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDeleteDocs().mjava","sourceNew":null,"sourceOld":"  @Test\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testDeleteDocs() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"two\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", DocBuilder.DELETE_DOC_BY_ID, \"2\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(DATA_CONFIG_FOR_SKIP_TRANSFORM);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='1']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n\n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"2\", \"desc\", \"one\"));\n    rows.add(createMap(\"id\", \"3\", \"desc\", \"two\", DocBuilder.DELETE_DOC_BY_QUERY, \"desc:one\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(DATA_CONFIG_FOR_SKIP_TRANSFORM);\n\n    assertQ(req(\"id:1\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:2\"), \"//*[@numFound='0']\");\n    assertQ(req(\"id:3\"), \"//*[@numFound='1']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n    MockDataSource.clearCache();\n    rows = new ArrayList();\n    rows.add(createMap(DocBuilder.DELETE_DOC_BY_ID, \"3\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n    runFullImport(DATA_CONFIG_FOR_SKIP_TRANSFORM, createMap(\"clean\",\"false\"));\n    assertQ(req(\"id:3\"), \"//*[@numFound='0']\");\n    \n    assertTrue(\"Update request processor processDelete was not called\", TestUpdateRequestProcessor.processDeleteCalled);\n    assertTrue(\"Update request processor finish was not called\", TestUpdateRequestProcessor.finishCalled);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"024e13388acbf5562fcbb77a129620982a5e2d79":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["5de502b5478255493125e7e801411ba17a6682ec"],"5de502b5478255493125e7e801411ba17a6682ec":["1b604003611eabbb4d3f0fb1f89d3b6a017f8faa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["1b604003611eabbb4d3f0fb1f89d3b6a017f8faa"],"1b604003611eabbb4d3f0fb1f89d3b6a017f8faa":["430386fa8c880f8c17537a3f4e30ad4611527450"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"430386fa8c880f8c17537a3f4e30ad4611527450":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["430386fa8c880f8c17537a3f4e30ad4611527450","1b604003611eabbb4d3f0fb1f89d3b6a017f8faa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"024e13388acbf5562fcbb77a129620982a5e2d79":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"5de502b5478255493125e7e801411ba17a6682ec":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"c26f00b574427b55127e869b935845554afde1fa":["430386fa8c880f8c17537a3f4e30ad4611527450"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":[],"1b604003611eabbb4d3f0fb1f89d3b6a017f8faa":["5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"430386fa8c880f8c17537a3f4e30ad4611527450":["1b604003611eabbb4d3f0fb1f89d3b6a017f8faa","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["024e13388acbf5562fcbb77a129620982a5e2d79"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6f20fd35e3055a0c5b387df0b986a68d65d86441","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}