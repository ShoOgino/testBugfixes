{"path":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#getTermVectors(int).mjava","commits":[{"id":"d6c939a28130e1107d4e349d6c10d1a92c489662","date":1330299480,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#getTermVectors(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    Fields f = super.getTermVectors(docID);\n    if (f == null) {\n      return null;\n    }\n    f = new FieldFilterFields(f);\n    // we need to check for emptyness, so we can return null:\n    return (f.iterator().next() == null) ? null : f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#getTermVectors(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    Fields f = super.getTermVectors(docID);\n    if (f == null) {\n      return null;\n    }\n    f = new FieldFilterFields(f);\n    // we need to check for emptyness, so we can return null:\n    return (f.iterator().next() == null) ? null : f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#getTermVectors(int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#getTermVectors(int).mjava","sourceNew":"  @Override\n  public InvertedFields getTermVectors(int docID) throws IOException {\n    InvertedFields f = super.getTermVectors(docID);\n    if (f == null) {\n      return null;\n    }\n    f = new FieldFilterFields(f);\n    // we need to check for emptyness, so we can return null:\n    return (f.iterator().next() == null) ? null : f;\n  }\n\n","sourceOld":"  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    Fields f = super.getTermVectors(docID);\n    if (f == null) {\n      return null;\n    }\n    f = new FieldFilterFields(f);\n    // we need to check for emptyness, so we can return null:\n    return (f.iterator().next() == null) ? null : f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#getTermVectors(int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#getTermVectors(int).mjava","sourceNew":"  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    Fields f = super.getTermVectors(docID);\n    if (f == null) {\n      return null;\n    }\n    f = new FieldFilterFields(f);\n    // we need to check for emptyness, so we can return null:\n    return (f.iterator().next() == null) ? null : f;\n  }\n\n","sourceOld":"  @Override\n  public InvertedFields getTermVectors(int docID) throws IOException {\n    InvertedFields f = super.getTermVectors(docID);\n    if (f == null) {\n      return null;\n    }\n    f = new FieldFilterFields(f);\n    // we need to check for emptyness, so we can return null:\n    return (f.iterator().next() == null) ? null : f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9dc115b22089a6ba19170801c3542c55168b638","date":1345312990,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#getTermVectors(int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#getTermVectors(int).mjava","sourceNew":"  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    Fields f = super.getTermVectors(docID);\n    if (f == null) {\n      return null;\n    }\n    f = new FieldFilterFields(f);\n    // we need to check for emptyness, so we can return\n    // null:\n    if (f.iterator().hasNext()) {\n      return f;\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    Fields f = super.getTermVectors(docID);\n    if (f == null) {\n      return null;\n    }\n    f = new FieldFilterFields(f);\n    // we need to check for emptyness, so we can return null:\n    return (f.iterator().next() == null) ? null : f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ccedec0f87d4891bf768895913ac496756b49a92","date":1345319630,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#getTermVectors(int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#getTermVectors(int).mjava","sourceNew":"  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    Fields f = super.getTermVectors(docID);\n    if (f == null) {\n      return null;\n    }\n    f = new FieldFilterFields(f);\n    // we need to check for emptyness, so we can return\n    // null:\n    return f.iterator().hasNext() ? f : null;\n  }\n\n","sourceOld":"  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    Fields f = super.getTermVectors(docID);\n    if (f == null) {\n      return null;\n    }\n    f = new FieldFilterFields(f);\n    // we need to check for emptyness, so we can return\n    // null:\n    if (f.iterator().hasNext()) {\n      return f;\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#getTermVectors(int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#getTermVectors(int).mjava","sourceNew":"  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    Fields f = super.getTermVectors(docID);\n    if (f == null) {\n      return null;\n    }\n    f = new FieldFilterFields(f);\n    // we need to check for emptyness, so we can return\n    // null:\n    return f.iterator().hasNext() ? f : null;\n  }\n\n","sourceOld":"  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    Fields f = super.getTermVectors(docID);\n    if (f == null) {\n      return null;\n    }\n    f = new FieldFilterFields(f);\n    // we need to check for emptyness, so we can return null:\n    return (f.iterator().next() == null) ? null : f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67588aedbc6edbcce873bd0c3c7b4199fbf0987c","date":1345506207,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#getTermVectors(int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#getTermVectors(int).mjava","sourceNew":"  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    Fields f = super.getTermVectors(docID);\n    if (f == null) {\n      return null;\n    }\n    f = new FieldFilterFields(f);\n    // we need to check for emptyness, so we can return\n    // null:\n    return f.iterator().hasNext() ? f : null;\n  }\n\n","sourceOld":"  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    Fields f = super.getTermVectors(docID);\n    if (f == null) {\n      return null;\n    }\n    f = new FieldFilterFields(f);\n    // we need to check for emptyness, so we can return null:\n    return (f.iterator().next() == null) ? null : f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterLeafReader#getTermVectors(int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#getTermVectors(int).mjava","sourceNew":"  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    Fields f = super.getTermVectors(docID);\n    if (f == null) {\n      return null;\n    }\n    f = new FieldFilterFields(f);\n    // we need to check for emptyness, so we can return\n    // null:\n    return f.iterator().hasNext() ? f : null;\n  }\n\n","sourceOld":"  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    Fields f = super.getTermVectors(docID);\n    if (f == null) {\n      return null;\n    }\n    f = new FieldFilterFields(f);\n    // we need to check for emptyness, so we can return\n    // null:\n    return f.iterator().hasNext() ? f : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"616c1830142ff5c1ddedec1ed898733b73c8e23b":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","ccedec0f87d4891bf768895913ac496756b49a92"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d6c939a28130e1107d4e349d6c10d1a92c489662"],"ccedec0f87d4891bf768895913ac496756b49a92":["c9dc115b22089a6ba19170801c3542c55168b638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"c9dc115b22089a6ba19170801c3542c55168b638":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["d6c939a28130e1107d4e349d6c10d1a92c489662"],"67588aedbc6edbcce873bd0c3c7b4199fbf0987c":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","ccedec0f87d4891bf768895913ac496756b49a92"],"d6c939a28130e1107d4e349d6c10d1a92c489662":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["ccedec0f87d4891bf768895913ac496756b49a92"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"ccedec0f87d4891bf768895913ac496756b49a92":["616c1830142ff5c1ddedec1ed898733b73c8e23b","67588aedbc6edbcce873bd0c3c7b4199fbf0987c","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d6c939a28130e1107d4e349d6c10d1a92c489662"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["616c1830142ff5c1ddedec1ed898733b73c8e23b","c9dc115b22089a6ba19170801c3542c55168b638","67588aedbc6edbcce873bd0c3c7b4199fbf0987c"],"c9dc115b22089a6ba19170801c3542c55168b638":["ccedec0f87d4891bf768895913ac496756b49a92"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"67588aedbc6edbcce873bd0c3c7b4199fbf0987c":[],"d6c939a28130e1107d4e349d6c10d1a92c489662":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["616c1830142ff5c1ddedec1ed898733b73c8e23b","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","67588aedbc6edbcce873bd0c3c7b4199fbf0987c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}