{"path":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testConstantScoreQueryAndFilter().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testConstantScoreQueryAndFilter().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#testConstantScoreQueryAndFilter().mjava","sourceNew":"  public void testConstantScoreQueryAndFilter() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"b\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Filter filterB = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"b\"))));\n    Query query = new ConstantScoreQuery(filterB);\n\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(1, s.search(query, filterB, 1).totalHits); // Query for field:b, Filter field:b\n\n    Filter filterA = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))));\n    query = new ConstantScoreQuery(filterA);\n\n    assertEquals(0, s.search(query, filterB, 1).totalHits); // Query field:b, Filter field:a\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testConstantScoreQueryAndFilter() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"b\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Filter filterB = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"b\"))));\n    Query query = new ConstantScoreQuery(filterB);\n\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(1, s.search(query, filterB, 1).totalHits); // Query for field:b, Filter field:b\n\n    Filter filterA = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))));\n    query = new ConstantScoreQuery(filterA);\n\n    assertEquals(0, s.search(query, filterB, 1).totalHits); // Query field:b, Filter field:a\n\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testConstantScoreQueryAndFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testConstantScoreQueryAndFilter().mjava","sourceNew":"  public void testConstantScoreQueryAndFilter() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"b\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Filter filterB = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"b\"))));\n    Query query = new ConstantScoreQuery(filterB);\n\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(1, s.search(query, filterB, 1).totalHits); // Query for field:b, Filter field:b\n\n    Filter filterA = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))));\n    query = new ConstantScoreQuery(filterA);\n\n    assertEquals(0, s.search(query, filterB, 1).totalHits); // Query field:b, Filter field:a\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testConstantScoreQueryAndFilter() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"b\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Filter filterB = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"b\"))));\n    Query query = new ConstantScoreQuery(filterB);\n\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(1, s.search(query, filterB, 1).totalHits); // Query for field:b, Filter field:b\n\n    Filter filterA = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))));\n    query = new ConstantScoreQuery(filterA);\n\n    assertEquals(0, s.search(query, filterB, 1).totalHits); // Query field:b, Filter field:a\n\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testConstantScoreQueryAndFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testConstantScoreQueryAndFilter().mjava","sourceNew":"  public void testConstantScoreQueryAndFilter() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"b\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Filter filterB = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"b\"))));\n    Query query = new ConstantScoreQuery(filterB);\n\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(1, s.search(query, filterB, 1).totalHits); // Query for field:b, Filter field:b\n\n    Filter filterA = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))));\n    query = new ConstantScoreQuery(filterA);\n\n    assertEquals(0, s.search(query, filterB, 1).totalHits); // Query field:b, Filter field:a\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testConstantScoreQueryAndFilter() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"b\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Filter filterB = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"b\"))));\n    Query query = new ConstantScoreQuery(filterB);\n\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(1, s.search(query, filterB, 1).totalHits); // Query for field:b, Filter field:b\n\n    Filter filterA = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))));\n    query = new ConstantScoreQuery(filterA);\n\n    assertEquals(0, s.search(query, filterB, 1).totalHits); // Query field:b, Filter field:a\n\n    r.close();\n    d.close();\n  }\n\n","bugFix":["6620df8541b174097b1133a4fc370adb2e570524"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testConstantScoreQueryAndFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testConstantScoreQueryAndFilter().mjava","sourceNew":"  public void testConstantScoreQueryAndFilter() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"b\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Filter filterB = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"b\"))));\n    Query query = new ConstantScoreQuery(filterB);\n\n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(query, filterB, 1).totalHits); // Query for field:b, Filter field:b\n\n    Filter filterA = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))));\n    query = new ConstantScoreQuery(filterA);\n\n    assertEquals(0, s.search(query, filterB, 1).totalHits); // Query field:b, Filter field:a\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testConstantScoreQueryAndFilter() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"b\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Filter filterB = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"b\"))));\n    Query query = new ConstantScoreQuery(filterB);\n\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(1, s.search(query, filterB, 1).totalHits); // Query for field:b, Filter field:b\n\n    Filter filterA = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))));\n    query = new ConstantScoreQuery(filterA);\n\n    assertEquals(0, s.search(query, filterB, 1).totalHits); // Query field:b, Filter field:a\n\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testConstantScoreQueryAndFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testConstantScoreQueryAndFilter().mjava","sourceNew":"  public void testConstantScoreQueryAndFilter() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"b\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.shutdown();\n\n    Filter filterB = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"b\"))));\n    Query query = new ConstantScoreQuery(filterB);\n\n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(query, filterB, 1).totalHits); // Query for field:b, Filter field:b\n\n    Filter filterA = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))));\n    query = new ConstantScoreQuery(filterA);\n\n    assertEquals(0, s.search(query, filterB, 1).totalHits); // Query field:b, Filter field:a\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testConstantScoreQueryAndFilter() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"b\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Filter filterB = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"b\"))));\n    Query query = new ConstantScoreQuery(filterB);\n\n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(query, filterB, 1).totalHits); // Query for field:b, Filter field:b\n\n    Filter filterA = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))));\n    query = new ConstantScoreQuery(filterA);\n\n    assertEquals(0, s.search(query, filterB, 1).totalHits); // Query field:b, Filter field:a\n\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testConstantScoreQueryAndFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testConstantScoreQueryAndFilter().mjava","sourceNew":"  public void testConstantScoreQueryAndFilter() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"b\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Filter filterB = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"b\"))));\n    Query query = new ConstantScoreQuery(filterB);\n\n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(query, filterB, 1).totalHits); // Query for field:b, Filter field:b\n\n    Filter filterA = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))));\n    query = new ConstantScoreQuery(filterA);\n\n    assertEquals(0, s.search(query, filterB, 1).totalHits); // Query field:b, Filter field:a\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testConstantScoreQueryAndFilter() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"b\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.shutdown();\n\n    Filter filterB = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"b\"))));\n    Query query = new ConstantScoreQuery(filterB);\n\n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(query, filterB, 1).totalHits); // Query for field:b, Filter field:b\n\n    Filter filterA = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))));\n    query = new ConstantScoreQuery(filterA);\n\n    assertEquals(0, s.search(query, filterB, 1).totalHits); // Query field:b, Filter field:a\n\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testConstantScoreQueryAndFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testConstantScoreQueryAndFilter().mjava","sourceNew":"  public void testConstantScoreQueryAndFilter() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"b\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Filter filterB = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"b\"))));\n    Query query = new ConstantScoreQuery(filterB);\n\n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new FilteredQuery(query, filterB), 1).totalHits); // Query for field:b, Filter field:b\n\n    Filter filterA = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))));\n    query = new ConstantScoreQuery(filterA);\n\n    assertEquals(0, s.search(new FilteredQuery(query, filterB), 1).totalHits); // Query field:b, Filter field:a\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testConstantScoreQueryAndFilter() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"b\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Filter filterB = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"b\"))));\n    Query query = new ConstantScoreQuery(filterB);\n\n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(query, filterB, 1).totalHits); // Query for field:b, Filter field:b\n\n    Filter filterA = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))));\n    query = new ConstantScoreQuery(filterA);\n\n    assertEquals(0, s.search(query, filterB, 1).totalHits); // Query field:b, Filter field:a\n\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testConstantScoreQueryAndFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testConstantScoreQueryAndFilter().mjava","sourceNew":"  public void testConstantScoreQueryAndFilter() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"b\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Filter filterB = new FilterWrapper(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"b\"))));\n    Query query = new ConstantScoreQuery(filterB);\n\n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new FilteredQuery(query, filterB), 1).totalHits); // Query for field:b, Filter field:b\n\n    Filter filterA = new FilterWrapper(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))));\n    query = new ConstantScoreQuery(filterA);\n\n    assertEquals(0, s.search(new FilteredQuery(query, filterB), 1).totalHits); // Query field:b, Filter field:a\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testConstantScoreQueryAndFilter() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"b\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Filter filterB = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"b\"))));\n    Query query = new ConstantScoreQuery(filterB);\n\n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new FilteredQuery(query, filterB), 1).totalHits); // Query for field:b, Filter field:b\n\n    Filter filterA = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))));\n    query = new ConstantScoreQuery(filterA);\n\n    assertEquals(0, s.search(new FilteredQuery(query, filterB), 1).totalHits); // Query field:b, Filter field:a\n\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testConstantScoreQueryAndFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testConstantScoreQueryAndFilter().mjava","sourceNew":"  public void testConstantScoreQueryAndFilter() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"b\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Filter filterB = new FilterWrapper(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"b\"))));\n    Query query = new ConstantScoreQuery(filterB);\n\n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new FilteredQuery(query, filterB), 1).totalHits); // Query for field:b, Filter field:b\n\n    Filter filterA = new FilterWrapper(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))));\n    query = new ConstantScoreQuery(filterA);\n\n    assertEquals(0, s.search(new FilteredQuery(query, filterB), 1).totalHits); // Query field:b, Filter field:a\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testConstantScoreQueryAndFilter() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"b\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Filter filterB = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"b\"))));\n    Query query = new ConstantScoreQuery(filterB);\n\n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new FilteredQuery(query, filterB), 1).totalHits); // Query for field:b, Filter field:b\n\n    Filter filterA = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))));\n    query = new ConstantScoreQuery(filterA);\n\n    assertEquals(0, s.search(new FilteredQuery(query, filterB), 1).totalHits); // Query field:b, Filter field:a\n\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testConstantScoreQueryAndFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testConstantScoreQueryAndFilter().mjava","sourceNew":"  public void testConstantScoreQueryAndFilter() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"b\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Filter filterB = new FilterWrapper(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"b\"))));\n    Query query = new ConstantScoreQuery(filterB);\n\n    IndexSearcher s = newSearcher(r);\n    Query filtered = new BooleanQuery.Builder()\n        .add(query, Occur.MUST)\n        .add(filterB, Occur.FILTER)\n        .build();\n    assertEquals(1, s.search(filtered, 1).totalHits); // Query for field:b, Filter field:b\n\n    Filter filterA = new FilterWrapper(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))));\n    query = new ConstantScoreQuery(filterA);\n\n    filtered = new BooleanQuery.Builder()\n        .add(query, Occur.MUST)\n        .add(filterB, Occur.FILTER)\n        .build();\n    assertEquals(0, s.search(filtered, 1).totalHits); // Query field:b, Filter field:a\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testConstantScoreQueryAndFilter() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"b\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Filter filterB = new FilterWrapper(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"b\"))));\n    Query query = new ConstantScoreQuery(filterB);\n\n    IndexSearcher s = newSearcher(r);\n    assertEquals(1, s.search(new FilteredQuery(query, filterB), 1).totalHits); // Query for field:b, Filter field:b\n\n    Filter filterA = new FilterWrapper(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))));\n    query = new ConstantScoreQuery(filterA);\n\n    assertEquals(0, s.search(new FilteredQuery(query, filterB), 1).totalHits); // Query field:b, Filter field:a\n\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d52e48927ca4ef3655a261f2230b968b6fdf3608","date":1444652107,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testConstantScoreQueryAndFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testConstantScoreQueryAndFilter().mjava","sourceNew":"  public void testConstantScoreQueryAndFilter() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"b\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Query filterB = new QueryWrapper(new TermQuery(new Term(\"field\", \"b\")));\n    Query query = new ConstantScoreQuery(filterB);\n\n    IndexSearcher s = newSearcher(r);\n    Query filtered = new BooleanQuery.Builder()\n        .add(query, Occur.MUST)\n        .add(filterB, Occur.FILTER)\n        .build();\n    assertEquals(1, s.search(filtered, 1).totalHits); // Query for field:b, Filter field:b\n\n    Query filterA = new QueryWrapper(new TermQuery(new Term(\"field\", \"a\")));\n    query = new ConstantScoreQuery(filterA);\n\n    filtered = new BooleanQuery.Builder()\n        .add(query, Occur.MUST)\n        .add(filterB, Occur.FILTER)\n        .build();\n    assertEquals(0, s.search(filtered, 1).totalHits); // Query field:b, Filter field:a\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testConstantScoreQueryAndFilter() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"b\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Filter filterB = new FilterWrapper(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"b\"))));\n    Query query = new ConstantScoreQuery(filterB);\n\n    IndexSearcher s = newSearcher(r);\n    Query filtered = new BooleanQuery.Builder()\n        .add(query, Occur.MUST)\n        .add(filterB, Occur.FILTER)\n        .build();\n    assertEquals(1, s.search(filtered, 1).totalHits); // Query for field:b, Filter field:b\n\n    Filter filterA = new FilterWrapper(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))));\n    query = new ConstantScoreQuery(filterA);\n\n    filtered = new BooleanQuery.Builder()\n        .add(query, Occur.MUST)\n        .add(filterB, Occur.FILTER)\n        .build();\n    assertEquals(0, s.search(filtered, 1).totalHits); // Query field:b, Filter field:a\n\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"470eaac3a77cf637b62126a5408b178d7be93eb1","date":1531830722,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testConstantScoreQueryAndFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testConstantScoreQueryAndFilter().mjava","sourceNew":"  public void testConstantScoreQueryAndFilter() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"b\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Query filterB = new QueryWrapper(new TermQuery(new Term(\"field\", \"b\")));\n    Query query = new ConstantScoreQuery(filterB);\n\n    IndexSearcher s = newSearcher(r);\n    Query filtered = new BooleanQuery.Builder()\n        .add(query, Occur.MUST)\n        .add(filterB, Occur.FILTER)\n        .build();\n    assertEquals(1, s.count(filtered)); // Query for field:b, Filter field:b\n\n    Query filterA = new QueryWrapper(new TermQuery(new Term(\"field\", \"a\")));\n    query = new ConstantScoreQuery(filterA);\n\n    filtered = new BooleanQuery.Builder()\n        .add(query, Occur.MUST)\n        .add(filterB, Occur.FILTER)\n        .build();\n    assertEquals(0, s.count(filtered)); // Query field:b, Filter field:a\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testConstantScoreQueryAndFilter() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"b\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Query filterB = new QueryWrapper(new TermQuery(new Term(\"field\", \"b\")));\n    Query query = new ConstantScoreQuery(filterB);\n\n    IndexSearcher s = newSearcher(r);\n    Query filtered = new BooleanQuery.Builder()\n        .add(query, Occur.MUST)\n        .add(filterB, Occur.FILTER)\n        .build();\n    assertEquals(1, s.search(filtered, 1).totalHits); // Query for field:b, Filter field:b\n\n    Query filterA = new QueryWrapper(new TermQuery(new Term(\"field\", \"a\")));\n    query = new ConstantScoreQuery(filterA);\n\n    filtered = new BooleanQuery.Builder()\n        .add(query, Occur.MUST)\n        .add(filterB, Occur.FILTER)\n        .build();\n    assertEquals(0, s.search(filtered, 1).totalHits); // Query field:b, Filter field:a\n\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testConstantScoreQueryAndFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testConstantScoreQueryAndFilter().mjava","sourceNew":"  public void testConstantScoreQueryAndFilter() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"b\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Query filterB = new QueryWrapper(new TermQuery(new Term(\"field\", \"b\")));\n    Query query = new ConstantScoreQuery(filterB);\n\n    IndexSearcher s = newSearcher(r);\n    Query filtered = new BooleanQuery.Builder()\n        .add(query, Occur.MUST)\n        .add(filterB, Occur.FILTER)\n        .build();\n    assertEquals(1, s.count(filtered)); // Query for field:b, Filter field:b\n\n    Query filterA = new QueryWrapper(new TermQuery(new Term(\"field\", \"a\")));\n    query = new ConstantScoreQuery(filterA);\n\n    filtered = new BooleanQuery.Builder()\n        .add(query, Occur.MUST)\n        .add(filterB, Occur.FILTER)\n        .build();\n    assertEquals(0, s.count(filtered)); // Query field:b, Filter field:a\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testConstantScoreQueryAndFilter() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"a\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"b\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Query filterB = new QueryWrapper(new TermQuery(new Term(\"field\", \"b\")));\n    Query query = new ConstantScoreQuery(filterB);\n\n    IndexSearcher s = newSearcher(r);\n    Query filtered = new BooleanQuery.Builder()\n        .add(query, Occur.MUST)\n        .add(filterB, Occur.FILTER)\n        .build();\n    assertEquals(1, s.search(filtered, 1).totalHits); // Query for field:b, Filter field:b\n\n    Query filterA = new QueryWrapper(new TermQuery(new Term(\"field\", \"a\")));\n    query = new ConstantScoreQuery(filterA);\n\n    filtered = new BooleanQuery.Builder()\n        .add(query, Occur.MUST)\n        .add(filterB, Occur.FILTER)\n        .build();\n    assertEquals(0, s.search(filtered, 1).totalHits); // Query field:b, Filter field:a\n\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"1db68e96dd908fcd79ef809095822736aa601d08":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["d52e48927ca4ef3655a261f2230b968b6fdf3608","470eaac3a77cf637b62126a5408b178d7be93eb1"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["1db68e96dd908fcd79ef809095822736aa601d08"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"470eaac3a77cf637b62126a5408b178d7be93eb1":["d52e48927ca4ef3655a261f2230b968b6fdf3608"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["470eaac3a77cf637b62126a5408b178d7be93eb1"]},"commit2Childs":{"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1db68e96dd908fcd79ef809095822736aa601d08"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"1db68e96dd908fcd79ef809095822736aa601d08":["d52e48927ca4ef3655a261f2230b968b6fdf3608"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","470eaac3a77cf637b62126a5408b178d7be93eb1"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["60596f28be69b10c37a56a303c2dbea07b2ca4ba","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"470eaac3a77cf637b62126a5408b178d7be93eb1":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}