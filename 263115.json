{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testNumericField().mjava","commits":[{"id":"70b55953b6a72596cb534ead735a8b849a473cac","date":1363634568,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testNumericField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testNumericField().mjava","sourceNew":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final NumericType[] typeAnswers = new NumericType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final Field nf;\n      final Field sf;\n      final Number answer;\n      final NumericType typeAnswer;\n      if (random().nextBoolean()) {\n        // float/double\n        if (random().nextBoolean()) {\n          final float f = random().nextFloat();\n          answer = Float.valueOf(f);\n          nf = new FloatField(\"nf\", f, Field.Store.NO);\n          sf = new StoredField(\"nf\", f);\n          typeAnswer = NumericType.FLOAT;\n        } else {\n          final double d = random().nextDouble();\n          answer = Double.valueOf(d);\n          nf = new DoubleField(\"nf\", d, Field.Store.NO);\n          sf = new StoredField(\"nf\", d);\n          typeAnswer = NumericType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random().nextBoolean()) {\n          final int i = random().nextInt();\n          answer = Integer.valueOf(i);\n          nf = new IntField(\"nf\", i, Field.Store.NO);\n          sf = new StoredField(\"nf\", i);\n          typeAnswer = NumericType.INT;\n        } else {\n          final long l = random().nextLong();\n          answer = Long.valueOf(l);\n          nf = new LongField(\"nf\", l, Field.Store.NO);\n          sf = new StoredField(\"nf\", l);\n          typeAnswer = NumericType.LONG;\n        }\n      }\n      doc.add(nf);\n      doc.add(sf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      FieldType ft = new FieldType(IntField.TYPE_STORED);\n      ft.setNumericPrecisionStep(Integer.MAX_VALUE);\n      doc.add(new IntField(\"id\", id, ft));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(AtomicReaderContext ctx : r.leaves()) {\n      final AtomicReader sub = ctx.reader();\n      final FieldCache.Ints ids = FieldCache.DEFAULT.getInts(sub, \"id\", false);\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final StoredDocument doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[ids.get(docID)], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final NumericType[] typeAnswers = new NumericType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final Field nf;\n      final Field sf;\n      final Number answer;\n      final NumericType typeAnswer;\n      if (random().nextBoolean()) {\n        // float/double\n        if (random().nextBoolean()) {\n          final float f = random().nextFloat();\n          answer = Float.valueOf(f);\n          nf = new FloatField(\"nf\", f, Field.Store.NO);\n          sf = new StoredField(\"nf\", f);\n          typeAnswer = NumericType.FLOAT;\n        } else {\n          final double d = random().nextDouble();\n          answer = Double.valueOf(d);\n          nf = new DoubleField(\"nf\", d, Field.Store.NO);\n          sf = new StoredField(\"nf\", d);\n          typeAnswer = NumericType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random().nextBoolean()) {\n          final int i = random().nextInt();\n          answer = Integer.valueOf(i);\n          nf = new IntField(\"nf\", i, Field.Store.NO);\n          sf = new StoredField(\"nf\", i);\n          typeAnswer = NumericType.INT;\n        } else {\n          final long l = random().nextLong();\n          answer = Long.valueOf(l);\n          nf = new LongField(\"nf\", l, Field.Store.NO);\n          sf = new StoredField(\"nf\", l);\n          typeAnswer = NumericType.LONG;\n        }\n      }\n      doc.add(nf);\n      doc.add(sf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      FieldType ft = new FieldType(IntField.TYPE_STORED);\n      ft.setNumericPrecisionStep(Integer.MAX_VALUE);\n      doc.add(new IntField(\"id\", id, ft));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(AtomicReaderContext ctx : r.leaves()) {\n      final AtomicReader sub = ctx.reader();\n      final FieldCache.Ints ids = FieldCache.DEFAULT.getInts(sub, \"id\", false);\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final StoredDocument doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[ids.get(docID)], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testNumericField().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testNumericField().mjava","sourceNew":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final NumericType[] typeAnswers = new NumericType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final Field nf;\n      final Field sf;\n      final Number answer;\n      final NumericType typeAnswer;\n      if (random().nextBoolean()) {\n        // float/double\n        if (random().nextBoolean()) {\n          final float f = random().nextFloat();\n          answer = Float.valueOf(f);\n          nf = new FloatField(\"nf\", f, Field.Store.NO);\n          sf = new StoredField(\"nf\", f);\n          typeAnswer = NumericType.FLOAT;\n        } else {\n          final double d = random().nextDouble();\n          answer = Double.valueOf(d);\n          nf = new DoubleField(\"nf\", d, Field.Store.NO);\n          sf = new StoredField(\"nf\", d);\n          typeAnswer = NumericType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random().nextBoolean()) {\n          final int i = random().nextInt();\n          answer = Integer.valueOf(i);\n          nf = new IntField(\"nf\", i, Field.Store.NO);\n          sf = new StoredField(\"nf\", i);\n          typeAnswer = NumericType.INT;\n        } else {\n          final long l = random().nextLong();\n          answer = Long.valueOf(l);\n          nf = new LongField(\"nf\", l, Field.Store.NO);\n          sf = new StoredField(\"nf\", l);\n          typeAnswer = NumericType.LONG;\n        }\n      }\n      doc.add(nf);\n      doc.add(sf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      FieldType ft = new FieldType(IntField.TYPE_STORED);\n      ft.setNumericPrecisionStep(Integer.MAX_VALUE);\n      doc.add(new IntField(\"id\", id, ft));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.shutdown();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(AtomicReaderContext ctx : r.leaves()) {\n      final AtomicReader sub = ctx.reader();\n      final FieldCache.Ints ids = FieldCache.DEFAULT.getInts(sub, \"id\", false);\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final StoredDocument doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[ids.get(docID)], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final NumericType[] typeAnswers = new NumericType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final Field nf;\n      final Field sf;\n      final Number answer;\n      final NumericType typeAnswer;\n      if (random().nextBoolean()) {\n        // float/double\n        if (random().nextBoolean()) {\n          final float f = random().nextFloat();\n          answer = Float.valueOf(f);\n          nf = new FloatField(\"nf\", f, Field.Store.NO);\n          sf = new StoredField(\"nf\", f);\n          typeAnswer = NumericType.FLOAT;\n        } else {\n          final double d = random().nextDouble();\n          answer = Double.valueOf(d);\n          nf = new DoubleField(\"nf\", d, Field.Store.NO);\n          sf = new StoredField(\"nf\", d);\n          typeAnswer = NumericType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random().nextBoolean()) {\n          final int i = random().nextInt();\n          answer = Integer.valueOf(i);\n          nf = new IntField(\"nf\", i, Field.Store.NO);\n          sf = new StoredField(\"nf\", i);\n          typeAnswer = NumericType.INT;\n        } else {\n          final long l = random().nextLong();\n          answer = Long.valueOf(l);\n          nf = new LongField(\"nf\", l, Field.Store.NO);\n          sf = new StoredField(\"nf\", l);\n          typeAnswer = NumericType.LONG;\n        }\n      }\n      doc.add(nf);\n      doc.add(sf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      FieldType ft = new FieldType(IntField.TYPE_STORED);\n      ft.setNumericPrecisionStep(Integer.MAX_VALUE);\n      doc.add(new IntField(\"id\", id, ft));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(AtomicReaderContext ctx : r.leaves()) {\n      final AtomicReader sub = ctx.reader();\n      final FieldCache.Ints ids = FieldCache.DEFAULT.getInts(sub, \"id\", false);\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final StoredDocument doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[ids.get(docID)], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testNumericField().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testNumericField().mjava","sourceNew":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final NumericType[] typeAnswers = new NumericType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final Field nf;\n      final Field sf;\n      final Number answer;\n      final NumericType typeAnswer;\n      if (random().nextBoolean()) {\n        // float/double\n        if (random().nextBoolean()) {\n          final float f = random().nextFloat();\n          answer = Float.valueOf(f);\n          nf = new FloatField(\"nf\", f, Field.Store.NO);\n          sf = new StoredField(\"nf\", f);\n          typeAnswer = NumericType.FLOAT;\n        } else {\n          final double d = random().nextDouble();\n          answer = Double.valueOf(d);\n          nf = new DoubleField(\"nf\", d, Field.Store.NO);\n          sf = new StoredField(\"nf\", d);\n          typeAnswer = NumericType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random().nextBoolean()) {\n          final int i = random().nextInt();\n          answer = Integer.valueOf(i);\n          nf = new IntField(\"nf\", i, Field.Store.NO);\n          sf = new StoredField(\"nf\", i);\n          typeAnswer = NumericType.INT;\n        } else {\n          final long l = random().nextLong();\n          answer = Long.valueOf(l);\n          nf = new LongField(\"nf\", l, Field.Store.NO);\n          sf = new StoredField(\"nf\", l);\n          typeAnswer = NumericType.LONG;\n        }\n      }\n      doc.add(nf);\n      doc.add(sf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      FieldType ft = new FieldType(IntField.TYPE_STORED);\n      ft.setNumericPrecisionStep(Integer.MAX_VALUE);\n      doc.add(new IntField(\"id\", id, ft));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.shutdown();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(AtomicReaderContext ctx : r.leaves()) {\n      final AtomicReader sub = ctx.reader();\n      final NumericDocValues ids = DocValues.getNumeric(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final StoredDocument doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[(int) ids.get(docID)], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final NumericType[] typeAnswers = new NumericType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final Field nf;\n      final Field sf;\n      final Number answer;\n      final NumericType typeAnswer;\n      if (random().nextBoolean()) {\n        // float/double\n        if (random().nextBoolean()) {\n          final float f = random().nextFloat();\n          answer = Float.valueOf(f);\n          nf = new FloatField(\"nf\", f, Field.Store.NO);\n          sf = new StoredField(\"nf\", f);\n          typeAnswer = NumericType.FLOAT;\n        } else {\n          final double d = random().nextDouble();\n          answer = Double.valueOf(d);\n          nf = new DoubleField(\"nf\", d, Field.Store.NO);\n          sf = new StoredField(\"nf\", d);\n          typeAnswer = NumericType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random().nextBoolean()) {\n          final int i = random().nextInt();\n          answer = Integer.valueOf(i);\n          nf = new IntField(\"nf\", i, Field.Store.NO);\n          sf = new StoredField(\"nf\", i);\n          typeAnswer = NumericType.INT;\n        } else {\n          final long l = random().nextLong();\n          answer = Long.valueOf(l);\n          nf = new LongField(\"nf\", l, Field.Store.NO);\n          sf = new StoredField(\"nf\", l);\n          typeAnswer = NumericType.LONG;\n        }\n      }\n      doc.add(nf);\n      doc.add(sf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      FieldType ft = new FieldType(IntField.TYPE_STORED);\n      ft.setNumericPrecisionStep(Integer.MAX_VALUE);\n      doc.add(new IntField(\"id\", id, ft));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.shutdown();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(AtomicReaderContext ctx : r.leaves()) {\n      final AtomicReader sub = ctx.reader();\n      final FieldCache.Ints ids = FieldCache.DEFAULT.getInts(sub, \"id\", false);\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final StoredDocument doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[ids.get(docID)], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testNumericField().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testNumericField().mjava","sourceNew":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final NumericType[] typeAnswers = new NumericType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final Field nf;\n      final Field sf;\n      final Number answer;\n      final NumericType typeAnswer;\n      if (random().nextBoolean()) {\n        // float/double\n        if (random().nextBoolean()) {\n          final float f = random().nextFloat();\n          answer = Float.valueOf(f);\n          nf = new FloatField(\"nf\", f, Field.Store.NO);\n          sf = new StoredField(\"nf\", f);\n          typeAnswer = NumericType.FLOAT;\n        } else {\n          final double d = random().nextDouble();\n          answer = Double.valueOf(d);\n          nf = new DoubleField(\"nf\", d, Field.Store.NO);\n          sf = new StoredField(\"nf\", d);\n          typeAnswer = NumericType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random().nextBoolean()) {\n          final int i = random().nextInt();\n          answer = Integer.valueOf(i);\n          nf = new IntField(\"nf\", i, Field.Store.NO);\n          sf = new StoredField(\"nf\", i);\n          typeAnswer = NumericType.INT;\n        } else {\n          final long l = random().nextLong();\n          answer = Long.valueOf(l);\n          nf = new LongField(\"nf\", l, Field.Store.NO);\n          sf = new StoredField(\"nf\", l);\n          typeAnswer = NumericType.LONG;\n        }\n      }\n      doc.add(nf);\n      doc.add(sf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      FieldType ft = new FieldType(IntField.TYPE_STORED);\n      ft.setNumericPrecisionStep(Integer.MAX_VALUE);\n      doc.add(new IntField(\"id\", id, ft));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.shutdown();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(AtomicReaderContext ctx : r.leaves()) {\n      final AtomicReader sub = ctx.reader();\n      final NumericDocValues ids = DocValues.getNumeric(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final StoredDocument doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[(int) ids.get(docID)], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final NumericType[] typeAnswers = new NumericType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final Field nf;\n      final Field sf;\n      final Number answer;\n      final NumericType typeAnswer;\n      if (random().nextBoolean()) {\n        // float/double\n        if (random().nextBoolean()) {\n          final float f = random().nextFloat();\n          answer = Float.valueOf(f);\n          nf = new FloatField(\"nf\", f, Field.Store.NO);\n          sf = new StoredField(\"nf\", f);\n          typeAnswer = NumericType.FLOAT;\n        } else {\n          final double d = random().nextDouble();\n          answer = Double.valueOf(d);\n          nf = new DoubleField(\"nf\", d, Field.Store.NO);\n          sf = new StoredField(\"nf\", d);\n          typeAnswer = NumericType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random().nextBoolean()) {\n          final int i = random().nextInt();\n          answer = Integer.valueOf(i);\n          nf = new IntField(\"nf\", i, Field.Store.NO);\n          sf = new StoredField(\"nf\", i);\n          typeAnswer = NumericType.INT;\n        } else {\n          final long l = random().nextLong();\n          answer = Long.valueOf(l);\n          nf = new LongField(\"nf\", l, Field.Store.NO);\n          sf = new StoredField(\"nf\", l);\n          typeAnswer = NumericType.LONG;\n        }\n      }\n      doc.add(nf);\n      doc.add(sf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      FieldType ft = new FieldType(IntField.TYPE_STORED);\n      ft.setNumericPrecisionStep(Integer.MAX_VALUE);\n      doc.add(new IntField(\"id\", id, ft));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.shutdown();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(AtomicReaderContext ctx : r.leaves()) {\n      final AtomicReader sub = ctx.reader();\n      final FieldCache.Ints ids = FieldCache.DEFAULT.getInts(sub, \"id\", false);\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final StoredDocument doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[ids.get(docID)], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testNumericField().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testNumericField().mjava","sourceNew":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final NumericType[] typeAnswers = new NumericType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final Field nf;\n      final Field sf;\n      final Number answer;\n      final NumericType typeAnswer;\n      if (random().nextBoolean()) {\n        // float/double\n        if (random().nextBoolean()) {\n          final float f = random().nextFloat();\n          answer = Float.valueOf(f);\n          nf = new FloatField(\"nf\", f, Field.Store.NO);\n          sf = new StoredField(\"nf\", f);\n          typeAnswer = NumericType.FLOAT;\n        } else {\n          final double d = random().nextDouble();\n          answer = Double.valueOf(d);\n          nf = new DoubleField(\"nf\", d, Field.Store.NO);\n          sf = new StoredField(\"nf\", d);\n          typeAnswer = NumericType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random().nextBoolean()) {\n          final int i = random().nextInt();\n          answer = Integer.valueOf(i);\n          nf = new IntField(\"nf\", i, Field.Store.NO);\n          sf = new StoredField(\"nf\", i);\n          typeAnswer = NumericType.INT;\n        } else {\n          final long l = random().nextLong();\n          answer = Long.valueOf(l);\n          nf = new LongField(\"nf\", l, Field.Store.NO);\n          sf = new StoredField(\"nf\", l);\n          typeAnswer = NumericType.LONG;\n        }\n      }\n      doc.add(nf);\n      doc.add(sf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      FieldType ft = new FieldType(IntField.TYPE_STORED);\n      ft.setNumericPrecisionStep(Integer.MAX_VALUE);\n      doc.add(new IntField(\"id\", id, ft));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.shutdown();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(AtomicReaderContext ctx : r.leaves()) {\n      final AtomicReader sub = ctx.reader();\n      final NumericDocValues ids = DocValues.getNumeric(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final StoredDocument doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[(int) ids.get(docID)], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final NumericType[] typeAnswers = new NumericType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final Field nf;\n      final Field sf;\n      final Number answer;\n      final NumericType typeAnswer;\n      if (random().nextBoolean()) {\n        // float/double\n        if (random().nextBoolean()) {\n          final float f = random().nextFloat();\n          answer = Float.valueOf(f);\n          nf = new FloatField(\"nf\", f, Field.Store.NO);\n          sf = new StoredField(\"nf\", f);\n          typeAnswer = NumericType.FLOAT;\n        } else {\n          final double d = random().nextDouble();\n          answer = Double.valueOf(d);\n          nf = new DoubleField(\"nf\", d, Field.Store.NO);\n          sf = new StoredField(\"nf\", d);\n          typeAnswer = NumericType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random().nextBoolean()) {\n          final int i = random().nextInt();\n          answer = Integer.valueOf(i);\n          nf = new IntField(\"nf\", i, Field.Store.NO);\n          sf = new StoredField(\"nf\", i);\n          typeAnswer = NumericType.INT;\n        } else {\n          final long l = random().nextLong();\n          answer = Long.valueOf(l);\n          nf = new LongField(\"nf\", l, Field.Store.NO);\n          sf = new StoredField(\"nf\", l);\n          typeAnswer = NumericType.LONG;\n        }\n      }\n      doc.add(nf);\n      doc.add(sf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      FieldType ft = new FieldType(IntField.TYPE_STORED);\n      ft.setNumericPrecisionStep(Integer.MAX_VALUE);\n      doc.add(new IntField(\"id\", id, ft));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.shutdown();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(AtomicReaderContext ctx : r.leaves()) {\n      final AtomicReader sub = ctx.reader();\n      final FieldCache.Ints ids = FieldCache.DEFAULT.getInts(sub, \"id\", false);\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final StoredDocument doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[ids.get(docID)], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testNumericField().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testNumericField().mjava","sourceNew":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final NumericType[] typeAnswers = new NumericType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final Field nf;\n      final Field sf;\n      final Number answer;\n      final NumericType typeAnswer;\n      if (random().nextBoolean()) {\n        // float/double\n        if (random().nextBoolean()) {\n          final float f = random().nextFloat();\n          answer = Float.valueOf(f);\n          nf = new FloatField(\"nf\", f, Field.Store.NO);\n          sf = new StoredField(\"nf\", f);\n          typeAnswer = NumericType.FLOAT;\n        } else {\n          final double d = random().nextDouble();\n          answer = Double.valueOf(d);\n          nf = new DoubleField(\"nf\", d, Field.Store.NO);\n          sf = new StoredField(\"nf\", d);\n          typeAnswer = NumericType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random().nextBoolean()) {\n          final int i = random().nextInt();\n          answer = Integer.valueOf(i);\n          nf = new IntField(\"nf\", i, Field.Store.NO);\n          sf = new StoredField(\"nf\", i);\n          typeAnswer = NumericType.INT;\n        } else {\n          final long l = random().nextLong();\n          answer = Long.valueOf(l);\n          nf = new LongField(\"nf\", l, Field.Store.NO);\n          sf = new StoredField(\"nf\", l);\n          typeAnswer = NumericType.LONG;\n        }\n      }\n      doc.add(nf);\n      doc.add(sf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      FieldType ft = new FieldType(IntField.TYPE_STORED);\n      ft.setNumericPrecisionStep(Integer.MAX_VALUE);\n      doc.add(new IntField(\"id\", id, ft));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(AtomicReaderContext ctx : r.leaves()) {\n      final AtomicReader sub = ctx.reader();\n      final NumericDocValues ids = DocValues.getNumeric(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final StoredDocument doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[(int) ids.get(docID)], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final NumericType[] typeAnswers = new NumericType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final Field nf;\n      final Field sf;\n      final Number answer;\n      final NumericType typeAnswer;\n      if (random().nextBoolean()) {\n        // float/double\n        if (random().nextBoolean()) {\n          final float f = random().nextFloat();\n          answer = Float.valueOf(f);\n          nf = new FloatField(\"nf\", f, Field.Store.NO);\n          sf = new StoredField(\"nf\", f);\n          typeAnswer = NumericType.FLOAT;\n        } else {\n          final double d = random().nextDouble();\n          answer = Double.valueOf(d);\n          nf = new DoubleField(\"nf\", d, Field.Store.NO);\n          sf = new StoredField(\"nf\", d);\n          typeAnswer = NumericType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random().nextBoolean()) {\n          final int i = random().nextInt();\n          answer = Integer.valueOf(i);\n          nf = new IntField(\"nf\", i, Field.Store.NO);\n          sf = new StoredField(\"nf\", i);\n          typeAnswer = NumericType.INT;\n        } else {\n          final long l = random().nextLong();\n          answer = Long.valueOf(l);\n          nf = new LongField(\"nf\", l, Field.Store.NO);\n          sf = new StoredField(\"nf\", l);\n          typeAnswer = NumericType.LONG;\n        }\n      }\n      doc.add(nf);\n      doc.add(sf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      FieldType ft = new FieldType(IntField.TYPE_STORED);\n      ft.setNumericPrecisionStep(Integer.MAX_VALUE);\n      doc.add(new IntField(\"id\", id, ft));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.shutdown();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(AtomicReaderContext ctx : r.leaves()) {\n      final AtomicReader sub = ctx.reader();\n      final NumericDocValues ids = DocValues.getNumeric(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final StoredDocument doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[(int) ids.get(docID)], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testNumericField().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testNumericField().mjava","sourceNew":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final NumericType[] typeAnswers = new NumericType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final Field nf;\n      final Field sf;\n      final Number answer;\n      final NumericType typeAnswer;\n      if (random().nextBoolean()) {\n        // float/double\n        if (random().nextBoolean()) {\n          final float f = random().nextFloat();\n          answer = Float.valueOf(f);\n          nf = new FloatField(\"nf\", f, Field.Store.NO);\n          sf = new StoredField(\"nf\", f);\n          typeAnswer = NumericType.FLOAT;\n        } else {\n          final double d = random().nextDouble();\n          answer = Double.valueOf(d);\n          nf = new DoubleField(\"nf\", d, Field.Store.NO);\n          sf = new StoredField(\"nf\", d);\n          typeAnswer = NumericType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random().nextBoolean()) {\n          final int i = random().nextInt();\n          answer = Integer.valueOf(i);\n          nf = new IntField(\"nf\", i, Field.Store.NO);\n          sf = new StoredField(\"nf\", i);\n          typeAnswer = NumericType.INT;\n        } else {\n          final long l = random().nextLong();\n          answer = Long.valueOf(l);\n          nf = new LongField(\"nf\", l, Field.Store.NO);\n          sf = new StoredField(\"nf\", l);\n          typeAnswer = NumericType.LONG;\n        }\n      }\n      doc.add(nf);\n      doc.add(sf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      FieldType ft = new FieldType(IntField.TYPE_STORED);\n      ft.setNumericPrecisionStep(Integer.MAX_VALUE);\n      doc.add(new IntField(\"id\", id, ft));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      final LeafReader sub = ctx.reader();\n      final NumericDocValues ids = DocValues.getNumeric(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final StoredDocument doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[(int) ids.get(docID)], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final NumericType[] typeAnswers = new NumericType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final Field nf;\n      final Field sf;\n      final Number answer;\n      final NumericType typeAnswer;\n      if (random().nextBoolean()) {\n        // float/double\n        if (random().nextBoolean()) {\n          final float f = random().nextFloat();\n          answer = Float.valueOf(f);\n          nf = new FloatField(\"nf\", f, Field.Store.NO);\n          sf = new StoredField(\"nf\", f);\n          typeAnswer = NumericType.FLOAT;\n        } else {\n          final double d = random().nextDouble();\n          answer = Double.valueOf(d);\n          nf = new DoubleField(\"nf\", d, Field.Store.NO);\n          sf = new StoredField(\"nf\", d);\n          typeAnswer = NumericType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random().nextBoolean()) {\n          final int i = random().nextInt();\n          answer = Integer.valueOf(i);\n          nf = new IntField(\"nf\", i, Field.Store.NO);\n          sf = new StoredField(\"nf\", i);\n          typeAnswer = NumericType.INT;\n        } else {\n          final long l = random().nextLong();\n          answer = Long.valueOf(l);\n          nf = new LongField(\"nf\", l, Field.Store.NO);\n          sf = new StoredField(\"nf\", l);\n          typeAnswer = NumericType.LONG;\n        }\n      }\n      doc.add(nf);\n      doc.add(sf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      FieldType ft = new FieldType(IntField.TYPE_STORED);\n      ft.setNumericPrecisionStep(Integer.MAX_VALUE);\n      doc.add(new IntField(\"id\", id, ft));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(AtomicReaderContext ctx : r.leaves()) {\n      final AtomicReader sub = ctx.reader();\n      final NumericDocValues ids = DocValues.getNumeric(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final StoredDocument doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[(int) ids.get(docID)], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testNumericField().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testNumericField().mjava","sourceNew":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final LegacyNumericType[] typeAnswers = new LegacyNumericType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final Field nf;\n      final Field sf;\n      final Number answer;\n      final LegacyNumericType typeAnswer;\n      if (random().nextBoolean()) {\n        // float/double\n        if (random().nextBoolean()) {\n          final float f = random().nextFloat();\n          answer = Float.valueOf(f);\n          nf = new LegacyFloatField(\"nf\", f, Field.Store.NO);\n          sf = new StoredField(\"nf\", f);\n          typeAnswer = LegacyNumericType.FLOAT;\n        } else {\n          final double d = random().nextDouble();\n          answer = Double.valueOf(d);\n          nf = new LegacyDoubleField(\"nf\", d, Field.Store.NO);\n          sf = new StoredField(\"nf\", d);\n          typeAnswer = LegacyNumericType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random().nextBoolean()) {\n          final int i = random().nextInt();\n          answer = Integer.valueOf(i);\n          nf = new LegacyIntField(\"nf\", i, Field.Store.NO);\n          sf = new StoredField(\"nf\", i);\n          typeAnswer = LegacyNumericType.INT;\n        } else {\n          final long l = random().nextLong();\n          answer = Long.valueOf(l);\n          nf = new LegacyLongField(\"nf\", l, Field.Store.NO);\n          sf = new StoredField(\"nf\", l);\n          typeAnswer = LegacyNumericType.LONG;\n        }\n      }\n      doc.add(nf);\n      doc.add(sf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      FieldType ft = new FieldType(LegacyIntField.TYPE_STORED);\n      ft.setNumericPrecisionStep(Integer.MAX_VALUE);\n      doc.add(new LegacyIntField(\"id\", id, ft));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      final LeafReader sub = ctx.reader();\n      final NumericDocValues ids = DocValues.getNumeric(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final StoredDocument doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[(int) ids.get(docID)], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final NumericType[] typeAnswers = new NumericType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final Field nf;\n      final Field sf;\n      final Number answer;\n      final NumericType typeAnswer;\n      if (random().nextBoolean()) {\n        // float/double\n        if (random().nextBoolean()) {\n          final float f = random().nextFloat();\n          answer = Float.valueOf(f);\n          nf = new FloatField(\"nf\", f, Field.Store.NO);\n          sf = new StoredField(\"nf\", f);\n          typeAnswer = NumericType.FLOAT;\n        } else {\n          final double d = random().nextDouble();\n          answer = Double.valueOf(d);\n          nf = new DoubleField(\"nf\", d, Field.Store.NO);\n          sf = new StoredField(\"nf\", d);\n          typeAnswer = NumericType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random().nextBoolean()) {\n          final int i = random().nextInt();\n          answer = Integer.valueOf(i);\n          nf = new IntField(\"nf\", i, Field.Store.NO);\n          sf = new StoredField(\"nf\", i);\n          typeAnswer = NumericType.INT;\n        } else {\n          final long l = random().nextLong();\n          answer = Long.valueOf(l);\n          nf = new LongField(\"nf\", l, Field.Store.NO);\n          sf = new StoredField(\"nf\", l);\n          typeAnswer = NumericType.LONG;\n        }\n      }\n      doc.add(nf);\n      doc.add(sf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      FieldType ft = new FieldType(IntField.TYPE_STORED);\n      ft.setNumericPrecisionStep(Integer.MAX_VALUE);\n      doc.add(new IntField(\"id\", id, ft));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      final LeafReader sub = ctx.reader();\n      final NumericDocValues ids = DocValues.getNumeric(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final StoredDocument doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[(int) ids.get(docID)], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testNumericField().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testNumericField().mjava","sourceNew":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final LegacyNumericType[] typeAnswers = new LegacyNumericType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final Field nf;\n      final Field sf;\n      final Number answer;\n      final LegacyNumericType typeAnswer;\n      if (random().nextBoolean()) {\n        // float/double\n        if (random().nextBoolean()) {\n          final float f = random().nextFloat();\n          answer = Float.valueOf(f);\n          nf = new LegacyFloatField(\"nf\", f, Field.Store.NO);\n          sf = new StoredField(\"nf\", f);\n          typeAnswer = LegacyNumericType.FLOAT;\n        } else {\n          final double d = random().nextDouble();\n          answer = Double.valueOf(d);\n          nf = new LegacyDoubleField(\"nf\", d, Field.Store.NO);\n          sf = new StoredField(\"nf\", d);\n          typeAnswer = LegacyNumericType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random().nextBoolean()) {\n          final int i = random().nextInt();\n          answer = Integer.valueOf(i);\n          nf = new LegacyIntField(\"nf\", i, Field.Store.NO);\n          sf = new StoredField(\"nf\", i);\n          typeAnswer = LegacyNumericType.INT;\n        } else {\n          final long l = random().nextLong();\n          answer = Long.valueOf(l);\n          nf = new LegacyLongField(\"nf\", l, Field.Store.NO);\n          sf = new StoredField(\"nf\", l);\n          typeAnswer = LegacyNumericType.LONG;\n        }\n      }\n      doc.add(nf);\n      doc.add(sf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      FieldType ft = new FieldType(LegacyIntField.TYPE_STORED);\n      ft.setNumericPrecisionStep(Integer.MAX_VALUE);\n      doc.add(new LegacyIntField(\"id\", id, ft));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      final LeafReader sub = ctx.reader();\n      final NumericDocValues ids = DocValues.getNumeric(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[(int) ids.get(docID)], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final LegacyNumericType[] typeAnswers = new LegacyNumericType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final Field nf;\n      final Field sf;\n      final Number answer;\n      final LegacyNumericType typeAnswer;\n      if (random().nextBoolean()) {\n        // float/double\n        if (random().nextBoolean()) {\n          final float f = random().nextFloat();\n          answer = Float.valueOf(f);\n          nf = new LegacyFloatField(\"nf\", f, Field.Store.NO);\n          sf = new StoredField(\"nf\", f);\n          typeAnswer = LegacyNumericType.FLOAT;\n        } else {\n          final double d = random().nextDouble();\n          answer = Double.valueOf(d);\n          nf = new LegacyDoubleField(\"nf\", d, Field.Store.NO);\n          sf = new StoredField(\"nf\", d);\n          typeAnswer = LegacyNumericType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random().nextBoolean()) {\n          final int i = random().nextInt();\n          answer = Integer.valueOf(i);\n          nf = new LegacyIntField(\"nf\", i, Field.Store.NO);\n          sf = new StoredField(\"nf\", i);\n          typeAnswer = LegacyNumericType.INT;\n        } else {\n          final long l = random().nextLong();\n          answer = Long.valueOf(l);\n          nf = new LegacyLongField(\"nf\", l, Field.Store.NO);\n          sf = new StoredField(\"nf\", l);\n          typeAnswer = LegacyNumericType.LONG;\n        }\n      }\n      doc.add(nf);\n      doc.add(sf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      FieldType ft = new FieldType(LegacyIntField.TYPE_STORED);\n      ft.setNumericPrecisionStep(Integer.MAX_VALUE);\n      doc.add(new LegacyIntField(\"id\", id, ft));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      final LeafReader sub = ctx.reader();\n      final NumericDocValues ids = DocValues.getNumeric(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final StoredDocument doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[(int) ids.get(docID)], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"906cb8d88e3e0d9b0dc30dafb99c128a6b7ad004","date":1457440594,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testNumericField().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testNumericField().mjava","sourceNew":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final Class<?>[] typeAnswers = new Class<?>[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final Field nf;\n      final Number answer;\n      final Class<?> typeAnswer;\n      if (random().nextBoolean()) {\n        // float/double\n        if (random().nextBoolean()) {\n          final float f = random().nextFloat();\n          answer = Float.valueOf(f);\n          nf = new StoredField(\"nf\", f);\n          typeAnswer = Float.class;\n        } else {\n          final double d = random().nextDouble();\n          answer = Double.valueOf(d);\n          nf = new StoredField(\"nf\", d);\n          typeAnswer = Double.class;\n        }\n      } else {\n        // int/long\n        if (random().nextBoolean()) {\n          final int i = random().nextInt();\n          answer = Integer.valueOf(i);\n          nf = new StoredField(\"nf\", i);\n          typeAnswer = Integer.class;\n        } else {\n          final long l = random().nextLong();\n          answer = Long.valueOf(l);\n          nf = new StoredField(\"nf\", l);\n          typeAnswer = Long.class;\n        }\n      }\n      doc.add(nf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      doc.add(new StoredField(\"id\", id));\n      doc.add(new IntPoint(\"id\", id));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      final LeafReader sub = ctx.reader();\n      final NumericDocValues ids = DocValues.getNumeric(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[(int) ids.get(docID)], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final LegacyNumericType[] typeAnswers = new LegacyNumericType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final Field nf;\n      final Field sf;\n      final Number answer;\n      final LegacyNumericType typeAnswer;\n      if (random().nextBoolean()) {\n        // float/double\n        if (random().nextBoolean()) {\n          final float f = random().nextFloat();\n          answer = Float.valueOf(f);\n          nf = new LegacyFloatField(\"nf\", f, Field.Store.NO);\n          sf = new StoredField(\"nf\", f);\n          typeAnswer = LegacyNumericType.FLOAT;\n        } else {\n          final double d = random().nextDouble();\n          answer = Double.valueOf(d);\n          nf = new LegacyDoubleField(\"nf\", d, Field.Store.NO);\n          sf = new StoredField(\"nf\", d);\n          typeAnswer = LegacyNumericType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random().nextBoolean()) {\n          final int i = random().nextInt();\n          answer = Integer.valueOf(i);\n          nf = new LegacyIntField(\"nf\", i, Field.Store.NO);\n          sf = new StoredField(\"nf\", i);\n          typeAnswer = LegacyNumericType.INT;\n        } else {\n          final long l = random().nextLong();\n          answer = Long.valueOf(l);\n          nf = new LegacyLongField(\"nf\", l, Field.Store.NO);\n          sf = new StoredField(\"nf\", l);\n          typeAnswer = LegacyNumericType.LONG;\n        }\n      }\n      doc.add(nf);\n      doc.add(sf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      FieldType ft = new FieldType(LegacyIntField.TYPE_STORED);\n      ft.setNumericPrecisionStep(Integer.MAX_VALUE);\n      doc.add(new LegacyIntField(\"id\", id, ft));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      final LeafReader sub = ctx.reader();\n      final NumericDocValues ids = DocValues.getNumeric(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[(int) ids.get(docID)], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c3ddb1d93e1f94eb5a00f9bc3e64439807ecf7e","date":1457443460,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testNumericField().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testNumericField().mjava","sourceNew":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final Class<?>[] typeAnswers = new Class<?>[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final Field nf;\n      final Number answer;\n      final Class<?> typeAnswer;\n      if (random().nextBoolean()) {\n        // float/double\n        if (random().nextBoolean()) {\n          final float f = random().nextFloat();\n          answer = Float.valueOf(f);\n          nf = new StoredField(\"nf\", f);\n          typeAnswer = Float.class;\n        } else {\n          final double d = random().nextDouble();\n          answer = Double.valueOf(d);\n          nf = new StoredField(\"nf\", d);\n          typeAnswer = Double.class;\n        }\n      } else {\n        // int/long\n        if (random().nextBoolean()) {\n          final int i = random().nextInt();\n          answer = Integer.valueOf(i);\n          nf = new StoredField(\"nf\", i);\n          typeAnswer = Integer.class;\n        } else {\n          final long l = random().nextLong();\n          answer = Long.valueOf(l);\n          nf = new StoredField(\"nf\", l);\n          typeAnswer = Long.class;\n        }\n      }\n      doc.add(nf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      doc.add(new StoredField(\"id\", id));\n      doc.add(new IntPoint(\"id\", id));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      final LeafReader sub = ctx.reader();\n      final NumericDocValues ids = DocValues.getNumeric(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[(int) ids.get(docID)], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final LegacyNumericType[] typeAnswers = new LegacyNumericType[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final Field nf;\n      final Field sf;\n      final Number answer;\n      final LegacyNumericType typeAnswer;\n      if (random().nextBoolean()) {\n        // float/double\n        if (random().nextBoolean()) {\n          final float f = random().nextFloat();\n          answer = Float.valueOf(f);\n          nf = new LegacyFloatField(\"nf\", f, Field.Store.NO);\n          sf = new StoredField(\"nf\", f);\n          typeAnswer = LegacyNumericType.FLOAT;\n        } else {\n          final double d = random().nextDouble();\n          answer = Double.valueOf(d);\n          nf = new LegacyDoubleField(\"nf\", d, Field.Store.NO);\n          sf = new StoredField(\"nf\", d);\n          typeAnswer = LegacyNumericType.DOUBLE;\n        }\n      } else {\n        // int/long\n        if (random().nextBoolean()) {\n          final int i = random().nextInt();\n          answer = Integer.valueOf(i);\n          nf = new LegacyIntField(\"nf\", i, Field.Store.NO);\n          sf = new StoredField(\"nf\", i);\n          typeAnswer = LegacyNumericType.INT;\n        } else {\n          final long l = random().nextLong();\n          answer = Long.valueOf(l);\n          nf = new LegacyLongField(\"nf\", l, Field.Store.NO);\n          sf = new StoredField(\"nf\", l);\n          typeAnswer = LegacyNumericType.LONG;\n        }\n      }\n      doc.add(nf);\n      doc.add(sf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      FieldType ft = new FieldType(LegacyIntField.TYPE_STORED);\n      ft.setNumericPrecisionStep(Integer.MAX_VALUE);\n      doc.add(new LegacyIntField(\"id\", id, ft));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      final LeafReader sub = ctx.reader();\n      final NumericDocValues ids = DocValues.getNumeric(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[(int) ids.get(docID)], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testNumericField().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testNumericField().mjava","sourceNew":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final Class<?>[] typeAnswers = new Class<?>[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final Field nf;\n      final Number answer;\n      final Class<?> typeAnswer;\n      if (random().nextBoolean()) {\n        // float/double\n        if (random().nextBoolean()) {\n          final float f = random().nextFloat();\n          answer = Float.valueOf(f);\n          nf = new StoredField(\"nf\", f);\n          typeAnswer = Float.class;\n        } else {\n          final double d = random().nextDouble();\n          answer = Double.valueOf(d);\n          nf = new StoredField(\"nf\", d);\n          typeAnswer = Double.class;\n        }\n      } else {\n        // int/long\n        if (random().nextBoolean()) {\n          final int i = random().nextInt();\n          answer = Integer.valueOf(i);\n          nf = new StoredField(\"nf\", i);\n          typeAnswer = Integer.class;\n        } else {\n          final long l = random().nextLong();\n          answer = Long.valueOf(l);\n          nf = new StoredField(\"nf\", l);\n          typeAnswer = Long.class;\n        }\n      }\n      doc.add(nf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      doc.add(new StoredField(\"id\", id));\n      doc.add(new IntPoint(\"id\", id));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      final LeafReader sub = ctx.reader();\n      final NumericDocValues ids = DocValues.getNumeric(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(docID, ids.nextDoc());\n        assertEquals(answers[(int) ids.longValue()], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final Class<?>[] typeAnswers = new Class<?>[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final Field nf;\n      final Number answer;\n      final Class<?> typeAnswer;\n      if (random().nextBoolean()) {\n        // float/double\n        if (random().nextBoolean()) {\n          final float f = random().nextFloat();\n          answer = Float.valueOf(f);\n          nf = new StoredField(\"nf\", f);\n          typeAnswer = Float.class;\n        } else {\n          final double d = random().nextDouble();\n          answer = Double.valueOf(d);\n          nf = new StoredField(\"nf\", d);\n          typeAnswer = Double.class;\n        }\n      } else {\n        // int/long\n        if (random().nextBoolean()) {\n          final int i = random().nextInt();\n          answer = Integer.valueOf(i);\n          nf = new StoredField(\"nf\", i);\n          typeAnswer = Integer.class;\n        } else {\n          final long l = random().nextLong();\n          answer = Long.valueOf(l);\n          nf = new StoredField(\"nf\", l);\n          typeAnswer = Long.class;\n        }\n      }\n      doc.add(nf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      doc.add(new StoredField(\"id\", id));\n      doc.add(new IntPoint(\"id\", id));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      final LeafReader sub = ctx.reader();\n      final NumericDocValues ids = DocValues.getNumeric(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[(int) ids.get(docID)], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testNumericField().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testNumericField().mjava","sourceNew":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final Class<?>[] typeAnswers = new Class<?>[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final Field nf;\n      final Number answer;\n      final Class<?> typeAnswer;\n      if (random().nextBoolean()) {\n        // float/double\n        if (random().nextBoolean()) {\n          final float f = random().nextFloat();\n          answer = Float.valueOf(f);\n          nf = new StoredField(\"nf\", f);\n          typeAnswer = Float.class;\n        } else {\n          final double d = random().nextDouble();\n          answer = Double.valueOf(d);\n          nf = new StoredField(\"nf\", d);\n          typeAnswer = Double.class;\n        }\n      } else {\n        // int/long\n        if (random().nextBoolean()) {\n          final int i = random().nextInt();\n          answer = Integer.valueOf(i);\n          nf = new StoredField(\"nf\", i);\n          typeAnswer = Integer.class;\n        } else {\n          final long l = random().nextLong();\n          answer = Long.valueOf(l);\n          nf = new StoredField(\"nf\", l);\n          typeAnswer = Long.class;\n        }\n      }\n      doc.add(nf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      doc.add(new StoredField(\"id\", id));\n      doc.add(new IntPoint(\"id\", id));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      final LeafReader sub = ctx.reader();\n      final NumericDocValues ids = DocValues.getNumeric(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(docID, ids.nextDoc());\n        assertEquals(answers[(int) ids.longValue()], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final Class<?>[] typeAnswers = new Class<?>[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final Field nf;\n      final Number answer;\n      final Class<?> typeAnswer;\n      if (random().nextBoolean()) {\n        // float/double\n        if (random().nextBoolean()) {\n          final float f = random().nextFloat();\n          answer = Float.valueOf(f);\n          nf = new StoredField(\"nf\", f);\n          typeAnswer = Float.class;\n        } else {\n          final double d = random().nextDouble();\n          answer = Double.valueOf(d);\n          nf = new StoredField(\"nf\", d);\n          typeAnswer = Double.class;\n        }\n      } else {\n        // int/long\n        if (random().nextBoolean()) {\n          final int i = random().nextInt();\n          answer = Integer.valueOf(i);\n          nf = new StoredField(\"nf\", i);\n          typeAnswer = Integer.class;\n        } else {\n          final long l = random().nextLong();\n          answer = Long.valueOf(l);\n          nf = new StoredField(\"nf\", l);\n          typeAnswer = Long.class;\n        }\n      }\n      doc.add(nf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      doc.add(new StoredField(\"id\", id));\n      doc.add(new IntPoint(\"id\", id));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      final LeafReader sub = ctx.reader();\n      final NumericDocValues ids = DocValues.getNumeric(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[(int) ids.get(docID)], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testNumericField().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testNumericField().mjava","sourceNew":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final Class<?>[] typeAnswers = new Class<?>[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final Field nf;\n      final Number answer;\n      final Class<?> typeAnswer;\n      if (random().nextBoolean()) {\n        // float/double\n        if (random().nextBoolean()) {\n          final float f = random().nextFloat();\n          answer = Float.valueOf(f);\n          nf = new StoredField(\"nf\", f);\n          typeAnswer = Float.class;\n        } else {\n          final double d = random().nextDouble();\n          answer = Double.valueOf(d);\n          nf = new StoredField(\"nf\", d);\n          typeAnswer = Double.class;\n        }\n      } else {\n        // int/long\n        if (random().nextBoolean()) {\n          final int i = random().nextInt();\n          answer = Integer.valueOf(i);\n          nf = new StoredField(\"nf\", i);\n          typeAnswer = Integer.class;\n        } else {\n          final long l = random().nextLong();\n          answer = Long.valueOf(l);\n          nf = new StoredField(\"nf\", l);\n          typeAnswer = Long.class;\n        }\n      }\n      doc.add(nf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      doc.add(new StoredField(\"id\", id));\n      doc.add(new IntPoint(\"id\", id));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      final LeafReader sub = ctx.reader();\n      final NumericDocValues ids = DocValues.getNumeric(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(docID, ids.nextDoc());\n        assertEquals(answers[(int) ids.longValue()], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final Class<?>[] typeAnswers = new Class<?>[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final Field nf;\n      final Number answer;\n      final Class<?> typeAnswer;\n      if (random().nextBoolean()) {\n        // float/double\n        if (random().nextBoolean()) {\n          final float f = random().nextFloat();\n          answer = Float.valueOf(f);\n          nf = new StoredField(\"nf\", f);\n          typeAnswer = Float.class;\n        } else {\n          final double d = random().nextDouble();\n          answer = Double.valueOf(d);\n          nf = new StoredField(\"nf\", d);\n          typeAnswer = Double.class;\n        }\n      } else {\n        // int/long\n        if (random().nextBoolean()) {\n          final int i = random().nextInt();\n          answer = Integer.valueOf(i);\n          nf = new StoredField(\"nf\", i);\n          typeAnswer = Integer.class;\n        } else {\n          final long l = random().nextLong();\n          answer = Long.valueOf(l);\n          nf = new StoredField(\"nf\", l);\n          typeAnswer = Long.class;\n        }\n      }\n      doc.add(nf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      doc.add(new StoredField(\"id\", id));\n      doc.add(new IntPoint(\"id\", id));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      final LeafReader sub = ctx.reader();\n      final NumericDocValues ids = DocValues.getNumeric(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(answers[(int) ids.get(docID)], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbc046116d49cd3d0c50f7169cabaa295bc23a4a","date":1552989114,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testNumericField().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testNumericField().mjava","sourceNew":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final Class<?>[] typeAnswers = new Class<?>[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final Field nf;\n      final Number answer;\n      final Class<?> typeAnswer;\n      if (random().nextBoolean()) {\n        // float/double\n        if (random().nextBoolean()) {\n          final float f = random().nextFloat();\n          answer = Float.valueOf(f);\n          nf = new StoredField(\"nf\", f);\n          typeAnswer = Float.class;\n        } else {\n          final double d = random().nextDouble();\n          answer = Double.valueOf(d);\n          nf = new StoredField(\"nf\", d);\n          typeAnswer = Double.class;\n        }\n      } else {\n        // int/long\n        if (random().nextBoolean()) {\n          final int i = random().nextInt();\n          answer = Integer.valueOf(i);\n          nf = new StoredField(\"nf\", i);\n          typeAnswer = Integer.class;\n        } else {\n          final long l = random().nextLong();\n          answer = Long.valueOf(l);\n          nf = new StoredField(\"nf\", l);\n          typeAnswer = Long.class;\n        }\n      }\n      doc.add(nf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      doc.add(new StoredField(\"id\", id));\n      doc.add(new IntPoint(\"id\", id));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = maybeWrapWithMergingReader(w.getReader());\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      final LeafReader sub = ctx.reader();\n      final NumericDocValues ids = DocValues.getNumeric(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(docID, ids.nextDoc());\n        assertEquals(answers[(int) ids.longValue()], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNumericField() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(500);\n    final Number[] answers = new Number[numDocs];\n    final Class<?>[] typeAnswers = new Class<?>[numDocs];\n    for(int id=0;id<numDocs;id++) {\n      Document doc = new Document();\n      final Field nf;\n      final Number answer;\n      final Class<?> typeAnswer;\n      if (random().nextBoolean()) {\n        // float/double\n        if (random().nextBoolean()) {\n          final float f = random().nextFloat();\n          answer = Float.valueOf(f);\n          nf = new StoredField(\"nf\", f);\n          typeAnswer = Float.class;\n        } else {\n          final double d = random().nextDouble();\n          answer = Double.valueOf(d);\n          nf = new StoredField(\"nf\", d);\n          typeAnswer = Double.class;\n        }\n      } else {\n        // int/long\n        if (random().nextBoolean()) {\n          final int i = random().nextInt();\n          answer = Integer.valueOf(i);\n          nf = new StoredField(\"nf\", i);\n          typeAnswer = Integer.class;\n        } else {\n          final long l = random().nextLong();\n          answer = Long.valueOf(l);\n          nf = new StoredField(\"nf\", l);\n          typeAnswer = Long.class;\n        }\n      }\n      doc.add(nf);\n      answers[id] = answer;\n      typeAnswers[id] = typeAnswer;\n      doc.add(new StoredField(\"id\", id));\n      doc.add(new IntPoint(\"id\", id));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      w.addDocument(doc);\n    }\n    final DirectoryReader r = w.getReader();\n    w.close();\n    \n    assertEquals(numDocs, r.numDocs());\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      final LeafReader sub = ctx.reader();\n      final NumericDocValues ids = DocValues.getNumeric(sub, \"id\");\n      for(int docID=0;docID<sub.numDocs();docID++) {\n        final Document doc = sub.document(docID);\n        final Field f = (Field) doc.getField(\"nf\");\n        assertTrue(\"got f=\" + f, f instanceof StoredField);\n        assertEquals(docID, ids.nextDoc());\n        assertEquals(answers[(int) ids.longValue()], f.numericValue());\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dbc046116d49cd3d0c50f7169cabaa295bc23a4a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"6c3ddb1d93e1f94eb5a00f9bc3e64439807ecf7e":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","906cb8d88e3e0d9b0dc30dafb99c128a6b7ad004"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"906cb8d88e3e0d9b0dc30dafb99c128a6b7ad004":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"770342641f7b505eaa8dccdc666158bff2419109":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6c3ddb1d93e1f94eb5a00f9bc3e64439807ecf7e","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["6c3ddb1d93e1f94eb5a00f9bc3e64439807ecf7e","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["6c3ddb1d93e1f94eb5a00f9bc3e64439807ecf7e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"70b55953b6a72596cb534ead735a8b849a473cac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["70b55953b6a72596cb534ead735a8b849a473cac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dbc046116d49cd3d0c50f7169cabaa295bc23a4a"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"dbc046116d49cd3d0c50f7169cabaa295bc23a4a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6c3ddb1d93e1f94eb5a00f9bc3e64439807ecf7e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"906cb8d88e3e0d9b0dc30dafb99c128a6b7ad004":["6c3ddb1d93e1f94eb5a00f9bc3e64439807ecf7e"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"770342641f7b505eaa8dccdc666158bff2419109":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["770342641f7b505eaa8dccdc666158bff2419109"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","d0ef034a4f10871667ae75181537775ddcf8ade4"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["dbc046116d49cd3d0c50f7169cabaa295bc23a4a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70b55953b6a72596cb534ead735a8b849a473cac"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"70b55953b6a72596cb534ead735a8b849a473cac":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["6c3ddb1d93e1f94eb5a00f9bc3e64439807ecf7e","906cb8d88e3e0d9b0dc30dafb99c128a6b7ad004"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}