{"path":"lucene/test-framework/src/java/org/apache/lucene/geo/EarthDebugger#drawSegment(double,double,double,double).mjava","commits":[{"id":"e0a671eed493f97734f17409168061773c1c5b52","date":1460066079,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/EarthDebugger#drawSegment(double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  // first point is inclusive, last point is exclusive!\n  private void drawSegment(double minLat, double maxLat, double minLon, double maxLon) {\n    int steps = 20;\n    for(int i=0;i<steps;i++) {\n      b.append(\"          [\" + (minLat + (maxLat - minLat) * i / steps) + \", \" + (minLon + (maxLon - minLon) * i / steps) + \"],\\n\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09f15823cf5eb6e807005579e875e117d8598f95","date":1460066385,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/EarthDebugger#drawSegment(double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  // first point is inclusive, last point is exclusive!\n  private void drawSegment(double minLat, double maxLat, double minLon, double maxLon) {\n    int steps = 20;\n    for(int i=0;i<steps;i++) {\n      b.append(\"          [\" + (minLat + (maxLat - minLat) * i / steps) + \", \" + (minLon + (maxLon - minLon) * i / steps) + \"],\\n\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"846f91e7c4e7002ca880478fa0aac11095af1e20","date":1460367942,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/EarthDebugger#drawSegment(double,double,double,double).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/EarthDebugger#drawSegment(double,double,double,double).mjava","sourceNew":"  // first point is inclusive, last point is exclusive!\n  private void drawSegment(double minLat, double maxLat, double minLon, double maxLon) {\n    int steps = (int) Math.round(Math.max(Math.abs(maxLat-minLat)/MAX_LAT_LON_PER_STEP, Math.abs(maxLon-minLon)/MAX_LAT_LON_PER_STEP));\n    if (steps < 1) {\n      steps = 1;\n    }\n    for(int i=0;i<steps;i++) {\n      b.append(\"          [\" + (minLat + (maxLat - minLat) * i / steps) + \", \" + (minLon + (maxLon - minLon) * i / steps) + \"],\\n\");\n    }\n  }\n\n","sourceOld":"  // first point is inclusive, last point is exclusive!\n  private void drawSegment(double minLat, double maxLat, double minLon, double maxLon) {\n    int steps = 20;\n    for(int i=0;i<steps;i++) {\n      b.append(\"          [\" + (minLat + (maxLat - minLat) * i / steps) + \", \" + (minLon + (maxLon - minLon) * i / steps) + \"],\\n\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f2c03aad245c45d7cc59be89febd081df502f24","date":1460455808,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/EarthDebugger#drawSegment(double,double,double,double).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/EarthDebugger#drawSegment(double,double,double,double).mjava","sourceNew":"  // first point is inclusive, last point is exclusive!\n  private void drawSegment(double minLat, double maxLat, double minLon, double maxLon) {\n    int steps = getStepCount(minLat, maxLat, minLon, maxLon);\n    for(int i=0;i<steps;i++) {\n      b.append(\"          [\" + (minLat + (maxLat - minLat) * i / steps) + \", \" + (minLon + (maxLon - minLon) * i / steps) + \"],\\n\");\n    }\n  }\n\n","sourceOld":"  // first point is inclusive, last point is exclusive!\n  private void drawSegment(double minLat, double maxLat, double minLon, double maxLon) {\n    int steps = (int) Math.round(Math.max(Math.abs(maxLat-minLat)/MAX_LAT_LON_PER_STEP, Math.abs(maxLon-minLon)/MAX_LAT_LON_PER_STEP));\n    if (steps < 1) {\n      steps = 1;\n    }\n    for(int i=0;i<steps;i++) {\n      b.append(\"          [\" + (minLat + (maxLat - minLat) * i / steps) + \", \" + (minLon + (maxLon - minLon) * i / steps) + \"],\\n\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ffe681f212e5073c69955b4ad22946794c84940","date":1560182863,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/EarthDebugger#drawSegment(double,double,double,double).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/EarthDebugger#drawSegment(double,double,double,double).mjava","sourceNew":"  // first point is inclusive, last point is exclusive!\n  private void drawSegment(double minLat, double maxLat, double minLon, double maxLon) {\n    int steps = getStepCount(minLat, maxLat, minLon, maxLon);\n    for(int i=0;i<steps;i++) {\n      b.append(\"          [\").append(minLat + (maxLat - minLat) * i / steps).append(\", \").append(minLon + (maxLon - minLon) * i / steps).append(\"],\\n\");\n    }\n  }\n\n","sourceOld":"  // first point is inclusive, last point is exclusive!\n  private void drawSegment(double minLat, double maxLat, double minLon, double maxLon) {\n    int steps = getStepCount(minLat, maxLat, minLon, maxLon);\n    for(int i=0;i<steps;i++) {\n      b.append(\"          [\" + (minLat + (maxLat - minLat) * i / steps) + \", \" + (minLon + (maxLon - minLon) * i / steps) + \"],\\n\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ffe681f212e5073c69955b4ad22946794c84940":["9f2c03aad245c45d7cc59be89febd081df502f24"],"846f91e7c4e7002ca880478fa0aac11095af1e20":["09f15823cf5eb6e807005579e875e117d8598f95"],"9f2c03aad245c45d7cc59be89febd081df502f24":["846f91e7c4e7002ca880478fa0aac11095af1e20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e0a671eed493f97734f17409168061773c1c5b52":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ffe681f212e5073c69955b4ad22946794c84940"],"09f15823cf5eb6e807005579e875e117d8598f95":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e0a671eed493f97734f17409168061773c1c5b52"]},"commit2Childs":{"2ffe681f212e5073c69955b4ad22946794c84940":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"846f91e7c4e7002ca880478fa0aac11095af1e20":["9f2c03aad245c45d7cc59be89febd081df502f24"],"9f2c03aad245c45d7cc59be89febd081df502f24":["2ffe681f212e5073c69955b4ad22946794c84940"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e0a671eed493f97734f17409168061773c1c5b52","09f15823cf5eb6e807005579e875e117d8598f95"],"e0a671eed493f97734f17409168061773c1c5b52":["09f15823cf5eb6e807005579e875e117d8598f95"],"09f15823cf5eb6e807005579e875e117d8598f95":["846f91e7c4e7002ca880478fa0aac11095af1e20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}