{"path":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#getLeafCollector(LeafReaderContext).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    public LeafCollector getLeafCollector(LeafReaderContext context)\n        throws IOException {\n      final int docBase = context.docBase;\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          final Map<Query, Float> freqs = new HashMap<Query, Float>();\n          for (Map.Entry<Query, Scorer> ent : subScorers.entrySet()) {\n            Scorer value = ent.getValue();\n            int matchId = value.docID();\n            freqs.put(ent.getKey(), matchId == doc ? value.freq() : 0.0f);\n          }\n          docCounts.put(doc + docBase, freqs);\n          super.collect(doc);\n        }\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          super.setScorer(scorer);\n          subScorers.clear();\n          setSubScorers(scorer, \"TOP\");\n        }\n        \n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26ae065817023d886f3de2bc162e9e1ad71c7a02","date":1485164116,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"    public LeafCollector getLeafCollector(LeafReaderContext context)\n        throws IOException {\n      final int docBase = context.docBase;\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n\n        Scorer scorer;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          final Map<Query, Float> freqs = new HashMap<Query, Float>();\n          final Map<Query, Scorer> subScorers = getSubScorers(scorer);\n          for (Map.Entry<Query, Scorer> ent : subScorers.entrySet()) {\n            Scorer value = ent.getValue();\n            int matchId = value.docID();\n            freqs.put(ent.getKey(), matchId == doc ? value.freq() : 0.0f);\n          }\n          docCounts.put(doc + docBase, freqs);\n          super.collect(doc);\n        }\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          super.setScorer(scorer);\n          this.scorer = scorer;\n        }\n        \n      };\n    }\n\n","sourceOld":"    public LeafCollector getLeafCollector(LeafReaderContext context)\n        throws IOException {\n      final int docBase = context.docBase;\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          final Map<Query, Float> freqs = new HashMap<Query, Float>();\n          for (Map.Entry<Query, Scorer> ent : subScorers.entrySet()) {\n            Scorer value = ent.getValue();\n            int matchId = value.docID();\n            freqs.put(ent.getKey(), matchId == doc ? value.freq() : 0.0f);\n          }\n          docCounts.put(doc + docBase, freqs);\n          super.collect(doc);\n        }\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          super.setScorer(scorer);\n          subScorers.clear();\n          setSubScorers(scorer, \"TOP\");\n        }\n        \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d88f2d3d3107907144cec6455db31ccebd65475a","date":1485171003,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"    public LeafCollector getLeafCollector(LeafReaderContext context)\n        throws IOException {\n      final int docBase = context.docBase;\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          final Map<Query, Float> freqs = new HashMap<Query, Float>();\n          for (Map.Entry<Query, Scorer> ent : subScorers.entrySet()) {\n            Scorer value = ent.getValue();\n            int matchId = value.docID();\n            freqs.put(ent.getKey(), matchId == doc ? value.freq() : 0.0f);\n          }\n          docCounts.put(doc + docBase, freqs);\n          super.collect(doc);\n        }\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          super.setScorer(scorer);\n          subScorers.clear();\n          setSubScorers(scorer, \"TOP\");\n        }\n        \n      };\n    }\n\n","sourceOld":"    public LeafCollector getLeafCollector(LeafReaderContext context)\n        throws IOException {\n      final int docBase = context.docBase;\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n\n        Scorer scorer;\n\n        @Override\n        public void collect(int doc) throws IOException {\n          final Map<Query, Float> freqs = new HashMap<Query, Float>();\n          final Map<Query, Scorer> subScorers = getSubScorers(scorer);\n          for (Map.Entry<Query, Scorer> ent : subScorers.entrySet()) {\n            Scorer value = ent.getValue();\n            int matchId = value.docID();\n            freqs.put(ent.getKey(), matchId == doc ? value.freq() : 0.0f);\n          }\n          docCounts.put(doc + docBase, freqs);\n          super.collect(doc);\n        }\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          super.setScorer(scorer);\n          this.scorer = scorer;\n        }\n        \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc14da055888b63b4f8c922d0e1579f3cb315ad7","date":1510744456,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"    public LeafCollector getLeafCollector(LeafReaderContext context)\n        throws IOException {\n      final int docBase = context.docBase;\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          final Map<Query, Float> freqs = new HashMap<Query, Float>();\n          for (Map.Entry<Query, Scorer> ent : subScorers.entrySet()) {\n            Scorer value = ent.getValue();\n            int matchId = value.docID();\n            freqs.put(ent.getKey(), matchId == doc ? value.score() : 0.0f);\n          }\n          docCounts.put(doc + docBase, freqs);\n          super.collect(doc);\n        }\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          super.setScorer(scorer);\n          subScorers.clear();\n          setSubScorers(scorer, \"TOP\");\n        }\n        \n      };\n    }\n\n","sourceOld":"    public LeafCollector getLeafCollector(LeafReaderContext context)\n        throws IOException {\n      final int docBase = context.docBase;\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          final Map<Query, Float> freqs = new HashMap<Query, Float>();\n          for (Map.Entry<Query, Scorer> ent : subScorers.entrySet()) {\n            Scorer value = ent.getValue();\n            int matchId = value.docID();\n            freqs.put(ent.getKey(), matchId == doc ? value.freq() : 0.0f);\n          }\n          docCounts.put(doc + docBase, freqs);\n          super.collect(doc);\n        }\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          super.setScorer(scorer);\n          subScorers.clear();\n          setSubScorers(scorer, \"TOP\");\n        }\n        \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285244982ce6aa163d1e60a707f0e6e121736ce5","date":1536055304,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"    public LeafCollector getLeafCollector(LeafReaderContext context)\n        throws IOException {\n      final int docBase = context.docBase;\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          final Map<Query, Float> freqs = new HashMap<Query, Float>();\n          for (Map.Entry<Query, Scorable> ent : subScorers.entrySet()) {\n            Scorable value = ent.getValue();\n            int matchId = value.docID();\n            freqs.put(ent.getKey(), matchId == doc ? value.score() : 0.0f);\n          }\n          docCounts.put(doc + docBase, freqs);\n          super.collect(doc);\n        }\n        \n        @Override\n        public void setScorer(Scorable scorer) throws IOException {\n          super.setScorer(scorer);\n          subScorers.clear();\n          setSubScorers(scorer);\n        }\n        \n      };\n    }\n\n","sourceOld":"    public LeafCollector getLeafCollector(LeafReaderContext context)\n        throws IOException {\n      final int docBase = context.docBase;\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          final Map<Query, Float> freqs = new HashMap<Query, Float>();\n          for (Map.Entry<Query, Scorer> ent : subScorers.entrySet()) {\n            Scorer value = ent.getValue();\n            int matchId = value.docID();\n            freqs.put(ent.getKey(), matchId == doc ? value.score() : 0.0f);\n          }\n          docCounts.put(doc + docBase, freqs);\n          super.collect(doc);\n        }\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          super.setScorer(scorer);\n          subScorers.clear();\n          setSubScorers(scorer, \"TOP\");\n        }\n        \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["d88f2d3d3107907144cec6455db31ccebd65475a"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d88f2d3d3107907144cec6455db31ccebd65475a":["26ae065817023d886f3de2bc162e9e1ad71c7a02"],"26ae065817023d886f3de2bc162e9e1ad71c7a02":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["285244982ce6aa163d1e60a707f0e6e121736ce5"]},"commit2Childs":{"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"d88f2d3d3107907144cec6455db31ccebd65475a":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"],"26ae065817023d886f3de2bc162e9e1ad71c7a02":["d88f2d3d3107907144cec6455db31ccebd65475a"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["26ae065817023d886f3de2bc162e9e1ad71c7a02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}