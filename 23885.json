{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","commits":[{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/queryParser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","sourceNew":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new SimpleAnalyzer(TEST_VERSION_CURRENT);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a) : new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a, extensions);\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    return qp;\n  }\n\n","sourceOld":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new SimpleAnalyzer(TEST_VERSION_CURRENT);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a) : new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a, extensions);\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    return qp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7edb20114e86ec883b0b08bd624eee852c565c06","date":1273941247,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","sourceNew":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(MockAnalyzer.SIMPLE, true);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a) : new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a, extensions);\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    return qp;\n  }\n\n","sourceOld":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new SimpleAnalyzer(TEST_VERSION_CURRENT);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a) : new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a, extensions);\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    return qp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ade882efb2f2235dafb176284c1e35dbdb1c126","date":1274043418,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","sourceNew":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(MockTokenizer.SIMPLE, true);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a) : new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a, extensions);\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    return qp;\n  }\n\n","sourceOld":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(MockAnalyzer.SIMPLE, true);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a) : new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a, extensions);\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    return qp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","sourceNew":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a) : new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a, extensions);\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    return qp;\n  }\n\n","sourceOld":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(MockTokenizer.SIMPLE, true);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a) : new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a, extensions);\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    return qp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","sourceNew":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a) : new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a, extensions);\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    return qp;\n  }\n\n","sourceOld":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(MockTokenizer.SIMPLE, true);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a) : new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a, extensions);\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    return qp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","sourceNew":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a) : new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a, extensions);\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    return qp;\n  }\n\n","sourceOld":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(MockTokenizer.SIMPLE, true);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a) : new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a, extensions);\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    return qp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","sourceNew":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a) : new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a, extensions);\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    return qp;\n  }\n\n","sourceOld":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(MockTokenizer.SIMPLE, true);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a) : new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a, extensions);\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    return qp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a53a291ad9b1cc050d846b68758c061a55d52734","date":1310437344,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","sourceNew":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a) : new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a, extensions);\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    return qp;\n  }\n\n","sourceOld":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a) : new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a, extensions);\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    return qp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7edb20114e86ec883b0b08bd624eee852c565c06":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["2ade882efb2f2235dafb176284c1e35dbdb1c126"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["2ade882efb2f2235dafb176284c1e35dbdb1c126","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2ade882efb2f2235dafb176284c1e35dbdb1c126","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["2ade882efb2f2235dafb176284c1e35dbdb1c126","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"2ade882efb2f2235dafb176284c1e35dbdb1c126":["7edb20114e86ec883b0b08bd624eee852c565c06"],"a53a291ad9b1cc050d846b68758c061a55d52734":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a53a291ad9b1cc050d846b68758c061a55d52734"]},"commit2Childs":{"7edb20114e86ec883b0b08bd624eee852c565c06":["2ade882efb2f2235dafb176284c1e35dbdb1c126"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a53a291ad9b1cc050d846b68758c061a55d52734"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["7edb20114e86ec883b0b08bd624eee852c565c06"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"962d04139994fce5193143ef35615499a9a96d78":[],"2ade882efb2f2235dafb176284c1e35dbdb1c126":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"a53a291ad9b1cc050d846b68758c061a55d52734":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}