{"path":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","sourceNew":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n  }\n\n","sourceOld":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","sourceNew":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n  }\n\n","sourceOld":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","sourceNew":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = DirectoryReader.open(ramDir);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n  }\n\n","sourceOld":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","sourceNew":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = DirectoryReader.open(ramDir);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      StoredDocument doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n  }\n\n","sourceOld":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = DirectoryReader.open(ramDir);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","sourceNew":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = DirectoryReader.open(ramDir);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      StoredDocument doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n  }\n\n","sourceOld":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = DirectoryReader.open(ramDir);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c15a75016387504d70a40cba6e9314b8885307f0","date":1397542349,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","sourceNew":"  public void testRAMDirectory () throws IOException {\n    File indexDir = buildIndex();\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = DirectoryReader.open(ramDir);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      StoredDocument doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n  }\n\n","sourceOld":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = DirectoryReader.open(ramDir);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      StoredDocument doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","sourceNew":"  public void testRAMDirectory () throws IOException {\n    Path indexDir = buildIndex();\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = DirectoryReader.open(ramDir);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      StoredDocument doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n  }\n\n","sourceOld":"  public void testRAMDirectory () throws IOException {\n    File indexDir = buildIndex();\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = DirectoryReader.open(ramDir);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      StoredDocument doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"302be0cc5e6a28ebcebcac98aa81a92be2e94370","date":1423848654,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","sourceNew":"  public void testRAMDirectory () throws IOException {\n    Path indexDir = buildIndex();\n    \n    FSDirectory dir = new SimpleFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = DirectoryReader.open(ramDir);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      StoredDocument doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n  }\n\n","sourceOld":"  public void testRAMDirectory () throws IOException {\n    Path indexDir = buildIndex();\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = DirectoryReader.open(ramDir);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      StoredDocument doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n  }\n\n","bugFix":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","sourceNew":"  public void testRAMDirectory () throws IOException {\n    Path indexDir = buildIndex();\n    \n    FSDirectory dir = new SimpleFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = DirectoryReader.open(ramDir);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n  }\n\n","sourceOld":"  public void testRAMDirectory () throws IOException {\n    Path indexDir = buildIndex();\n    \n    FSDirectory dir = new SimpleFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = DirectoryReader.open(ramDir);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      StoredDocument doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","sourceNew":"  public void testRAMDirectory () throws IOException {\n    Path indexDir = buildIndex();\n    \n    FSDirectory dir = new SimpleFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = DirectoryReader.open(ramDir);\n    assertEquals(DOCS_TO_ADD, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < DOCS_TO_ADD; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n  }\n\n","sourceOld":"  public void testRAMDirectory () throws IOException {\n    Path indexDir = buildIndex();\n    \n    FSDirectory dir = new SimpleFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = DirectoryReader.open(ramDir);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","sourceNew":"  public void testRAMDirectory () throws IOException {\n    Path indexDir = buildIndex();\n    \n    FSDirectory dir = new SimpleFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = DirectoryReader.open(ramDir);\n    assertEquals(DOCS_TO_ADD, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < DOCS_TO_ADD; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n  }\n\n","sourceOld":"  public void testRAMDirectory () throws IOException {\n    Path indexDir = buildIndex();\n    \n    FSDirectory dir = new SimpleFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = DirectoryReader.open(ramDir);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409da428f28953cf35fddd5c9ff5c7e4f5439863","date":1547556145,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","sourceNew":null,"sourceOld":"  public void testRAMDirectory () throws IOException {\n    Path indexDir = buildIndex();\n    \n    FSDirectory dir = new SimpleFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = DirectoryReader.open(ramDir);\n    assertEquals(DOCS_TO_ADD, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < DOCS_TO_ADD; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"5de502b5478255493125e7e801411ba17a6682ec":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"c15a75016387504d70a40cba6e9314b8885307f0":["1d028314cced5858683a1bb4741423d0f934257b"],"f4abec28b874149a7223e32cc7a01704c27790de":["c15a75016387504d70a40cba6e9314b8885307f0"],"409da428f28953cf35fddd5c9ff5c7e4f5439863":["5de502b5478255493125e7e801411ba17a6682ec"],"1d028314cced5858683a1bb4741423d0f934257b":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["409da428f28953cf35fddd5c9ff5c7e4f5439863"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["302be0cc5e6a28ebcebcac98aa81a92be2e94370"],"302be0cc5e6a28ebcebcac98aa81a92be2e94370":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["1d028314cced5858683a1bb4741423d0f934257b"],"5de502b5478255493125e7e801411ba17a6682ec":["409da428f28953cf35fddd5c9ff5c7e4f5439863"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":[],"c15a75016387504d70a40cba6e9314b8885307f0":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["302be0cc5e6a28ebcebcac98aa81a92be2e94370"],"1d028314cced5858683a1bb4741423d0f934257b":["c15a75016387504d70a40cba6e9314b8885307f0"],"409da428f28953cf35fddd5c9ff5c7e4f5439863":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","1d028314cced5858683a1bb4741423d0f934257b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302be0cc5e6a28ebcebcac98aa81a92be2e94370":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"]},"heads":["6f20fd35e3055a0c5b387df0b986a68d65d86441","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}