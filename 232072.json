{"path":"src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","commits":[{"id":"d0e21d913dd196ddb03bd8eba703d966f9aead69","date":1237540237,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tries to query a live server. If no live servers are found it throws a SolrServerException. If the request failed\n   * due to IOException then the live server is moved to dead pool and the request is retried on another live server if\n   * available. If all live servers are exhausted then a SolrServerException is thrown.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    int count = counter.incrementAndGet();\n    int attempts = 0;\n    Exception ex;\n    while (true) {\n      int size = aliveServers.size();\n      if (size < 1) throw new SolrServerException(\"No live SolrServers available to handle this request\");\n      ServerWrapper solrServer;\n      try {\n        solrServer = aliveServers.get(count % size);\n      } catch (IndexOutOfBoundsException e) {\n        //this list changes dynamically. so it is expected to get IndexOutOfBoundsException\n        continue;\n      }\n      try {\n        return solrServer.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(solrServer);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n      attempts++;\n      if (attempts >= aliveServers.size())\n        throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bf975219b6e3c21deb51ed8f19ec16b24518598","date":1239958673,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","sourceNew":"  /**\n   * Tries to query a live server. If no live servers are found it throws a SolrServerException. If the request failed\n   * due to IOException then the live server is moved to dead pool and the request is retried on another live server if\n   * available. If all live servers are exhausted then a SolrServerException is thrown.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    int count = counter.incrementAndGet();\n    int attempts = 0;\n    Exception ex;\n    int startSize = aliveServers.size();\n    while (true) {\n      int size = aliveServers.size();\n      if (size < 1) throw new SolrServerException(\"No live SolrServers available to handle this request\");\n      ServerWrapper solrServer;\n      try {\n        solrServer = aliveServers.get(count % size);\n      } catch (IndexOutOfBoundsException e) {\n        //this list changes dynamically. so it is expected to get IndexOutOfBoundsException\n        continue;\n      }\n      try {\n        return solrServer.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(solrServer);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n      attempts++;\n      if (attempts >= startSize)\n        throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server. If no live servers are found it throws a SolrServerException. If the request failed\n   * due to IOException then the live server is moved to dead pool and the request is retried on another live server if\n   * available. If all live servers are exhausted then a SolrServerException is thrown.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    int count = counter.incrementAndGet();\n    int attempts = 0;\n    Exception ex;\n    while (true) {\n      int size = aliveServers.size();\n      if (size < 1) throw new SolrServerException(\"No live SolrServers available to handle this request\");\n      ServerWrapper solrServer;\n      try {\n        solrServer = aliveServers.get(count % size);\n      } catch (IndexOutOfBoundsException e) {\n        //this list changes dynamically. so it is expected to get IndexOutOfBoundsException\n        continue;\n      }\n      try {\n        return solrServer.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(solrServer);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n      attempts++;\n      if (attempts >= aliveServers.size())\n        throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","sourceNew":"  /**\n   * Tries to query a live server. If no live servers are found it throws a SolrServerException. If the request failed\n   * due to IOException then the live server is moved to dead pool and the request is retried on another live server if\n   * available. If all live servers are exhausted then a SolrServerException is thrown.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    int count = counter.incrementAndGet();\n    int attempts = 0;\n    Exception ex;\n    int startSize = aliveServers.size();\n    while (true) {\n      int size = aliveServers.size();\n      if (size < 1) throw new SolrServerException(\"No live SolrServers available to handle this request\");\n      ServerWrapper solrServer;\n      try {\n        solrServer = aliveServers.get(count % size);\n      } catch (IndexOutOfBoundsException e) {\n        //this list changes dynamically. so it is expected to get IndexOutOfBoundsException\n        continue;\n      }\n      try {\n        return solrServer.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(solrServer);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n      attempts++;\n      if (attempts >= startSize)\n        throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server. If no live servers are found it throws a SolrServerException. If the request failed\n   * due to IOException then the live server is moved to dead pool and the request is retried on another live server if\n   * available. If all live servers are exhausted then a SolrServerException is thrown.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    int count = counter.incrementAndGet();\n    int attempts = 0;\n    Exception ex;\n    int startSize = aliveServers.size();\n    while (true) {\n      int size = aliveServers.size();\n      if (size < 1) throw new SolrServerException(\"No live SolrServers available to handle this request\");\n      ServerWrapper solrServer;\n      try {\n        solrServer = aliveServers.get(count % size);\n      } catch (IndexOutOfBoundsException e) {\n        //this list changes dynamically. so it is expected to get IndexOutOfBoundsException\n        continue;\n      }\n      try {\n        return solrServer.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(solrServer);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n      attempts++;\n      if (attempts >= startSize)\n        throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1bf975219b6e3c21deb51ed8f19ec16b24518598":["d0e21d913dd196ddb03bd8eba703d966f9aead69"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0e21d913dd196ddb03bd8eba703d966f9aead69":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1bf975219b6e3c21deb51ed8f19ec16b24518598"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1bf975219b6e3c21deb51ed8f19ec16b24518598":["ad94625fb8d088209f46650c8097196fec67f00c"],"d0e21d913dd196ddb03bd8eba703d966f9aead69":["1bf975219b6e3c21deb51ed8f19ec16b24518598"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d0e21d913dd196ddb03bd8eba703d966f9aead69"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}