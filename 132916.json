{"path":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds.Iterator#nextOrd().mjava","commits":[{"id":"f438915b81b54f1fdff40443da8c4fb15c61c777","date":1360597404,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds.Iterator#nextOrd().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public long nextOrd() {\n      while (bufferUpto == bufferLength) {\n        if (bufferLength < buffer.length) {\n          return NO_MORE_ORDS;\n        } else {\n          bufferLength = in.read(buffer);\n          bufferUpto = 0;\n        }\n      }\n      int next = buffer[bufferUpto];\n      bufferUpto++;\n      return next;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44e56f421c9a4407f8bef7c459b9e747ab3a62c4","date":1361044622,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds.Iterator#nextOrd().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds.Iterator#nextOrd().mjava","sourceNew":"    @Override\n    public long nextOrd() {\n      while (bufferUpto == bufferLength) {\n        if (bufferLength < buffer.length) {\n          return NO_MORE_ORDS;\n        } else {\n          bufferLength = read(buffer);\n          bufferUpto = 0;\n        }\n      }\n      return buffer[bufferUpto++];\n    }\n\n","sourceOld":"    @Override\n    public long nextOrd() {\n      while (bufferUpto == bufferLength) {\n        if (bufferLength < buffer.length) {\n          return NO_MORE_ORDS;\n        } else {\n          bufferLength = in.read(buffer);\n          bufferUpto = 0;\n        }\n      }\n      int next = buffer[bufferUpto];\n      bufferUpto++;\n      return next;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds.Iterator#nextOrd().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public long nextOrd() {\n      while (bufferUpto == bufferLength) {\n        if (bufferLength < buffer.length) {\n          return NO_MORE_ORDS;\n        } else {\n          bufferLength = read(buffer);\n          bufferUpto = 0;\n        }\n      }\n      return buffer[bufferUpto++];\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28dbdccfa460fb41c33b6d23411572298d589b99","date":1399839432,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds.Iterator#nextOrd().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds.Iterator#nextOrd().mjava","sourceNew":"    @Override\n    public long nextOrd() {\n      while (bufferUpto == bufferLength) {\n        if (bufferLength < buffer.length) {\n          return NO_MORE_ORDS;\n        } else {\n          bufferLength = read(buffer);\n          bufferUpto = 0;\n        }\n      }\n      return buffer[bufferUpto++];\n    }\n\n","sourceOld":"    @Override\n    public long nextOrd() {\n      while (bufferUpto == bufferLength) {\n        if (bufferLength < buffer.length) {\n          return NO_MORE_ORDS;\n        } else {\n          bufferLength = read(buffer);\n          bufferUpto = 0;\n        }\n      }\n      return buffer[bufferUpto++];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds.Iterator#nextOrd().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds.Iterator#nextOrd().mjava","sourceNew":"    @Override\n    public long nextOrd() {\n      while (bufferUpto == bufferLength) {\n        if (bufferLength < buffer.length) {\n          return NO_MORE_ORDS;\n        } else {\n          bufferLength = read(buffer);\n          bufferUpto = 0;\n        }\n      }\n      return buffer[bufferUpto++];\n    }\n\n","sourceOld":"    @Override\n    public long nextOrd() {\n      while (bufferUpto == bufferLength) {\n        if (bufferLength < buffer.length) {\n          return NO_MORE_ORDS;\n        } else {\n          bufferLength = read(buffer);\n          bufferUpto = 0;\n        }\n      }\n      return buffer[bufferUpto++];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds.Iterator#nextOrd().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds.Iterator#nextOrd().mjava","sourceNew":"    @Override\n    public long nextOrd() {\n      while (bufferUpto == bufferLength) {\n        if (bufferLength < buffer.length) {\n          return NO_MORE_ORDS;\n        } else {\n          bufferLength = read(buffer);\n          bufferUpto = 0;\n        }\n      }\n      return buffer[bufferUpto++];\n    }\n\n","sourceOld":"    @Override\n    public long nextOrd() {\n      while (bufferUpto == bufferLength) {\n        if (bufferLength < buffer.length) {\n          return NO_MORE_ORDS;\n        } else {\n          bufferLength = read(buffer);\n          bufferUpto = 0;\n        }\n      }\n      return buffer[bufferUpto++];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"28dbdccfa460fb41c33b6d23411572298d589b99":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"44e56f421c9a4407f8bef7c459b9e747ab3a62c4":["f438915b81b54f1fdff40443da8c4fb15c61c777"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ddbb72a33557d2b5bc22ee95daf3281c43560502","28dbdccfa460fb41c33b6d23411572298d589b99"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f438915b81b54f1fdff40443da8c4fb15c61c777":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","44e56f421c9a4407f8bef7c459b9e747ab3a62c4"],"56572ec06f1407c066d6b7399413178b33176cd8":["ddbb72a33557d2b5bc22ee95daf3281c43560502","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"28dbdccfa460fb41c33b6d23411572298d589b99":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"44e56f421c9a4407f8bef7c459b9e747ab3a62c4":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f438915b81b54f1fdff40443da8c4fb15c61c777","ddbb72a33557d2b5bc22ee95daf3281c43560502"],"f438915b81b54f1fdff40443da8c4fb15c61c777":["44e56f421c9a4407f8bef7c459b9e747ab3a62c4"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["28dbdccfa460fb41c33b6d23411572298d589b99","93dd449115a9247533e44bab47e8429e5dccbc6d","56572ec06f1407c066d6b7399413178b33176cd8"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}