{"path":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,JmxConfiguration).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,JmxConfiguration).mjava","pathOld":"solr/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,JmxConfiguration).mjava","sourceNew":"  public JmxMonitoredMap(final String coreName, \n                         final JmxConfiguration jmxConfig) {\n    jmxRootName = (null != jmxConfig.rootName ? \n                   jmxConfig.rootName\n                   : (\"solr\" + (null != coreName ? \"/\" + coreName : \"\")));\n      \n    if (jmxConfig.serviceUrl == null) {\n      List<MBeanServer> servers = null;\n\n      if (jmxConfig.agentId == null) {\n        // Try to find the first MBeanServer\n        servers = MBeanServerFactory.findMBeanServer(null);\n      } else if (jmxConfig.agentId != null) {\n        // Try to find the first MBean server with the given agentId\n        servers = MBeanServerFactory.findMBeanServer(jmxConfig.agentId);\n        // throw Exception if no servers were found with the given agentId\n        if (servers == null || servers.isEmpty())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"No JMX Servers found with agentId: \" + jmxConfig.agentId);\n      }\n\n      if (servers == null || servers.isEmpty()) {\n        LOG.info(\"No JMX servers found, not exposing Solr information with JMX.\");\n        return;\n      }\n      server = servers.get(0);\n      LOG.info(\"JMX monitoring is enabled. Adding Solr mbeans to JMX Server: \"\n               + server);\n    } else {\n      try {\n        // Create a new MBeanServer with the given serviceUrl\n        server = MBeanServerFactory.newMBeanServer();\n        JMXConnectorServer connector = JMXConnectorServerFactory\n                .newJMXConnectorServer(new JMXServiceURL(jmxConfig.serviceUrl),\n                        null, server);\n        connector.start();\n        LOG.info(\"JMX monitoring is enabled at \" + jmxConfig.serviceUrl);\n      } catch (Exception e) {\n        // Release the reference\n        server = null;\n        throw new RuntimeException(\"Could not start JMX monitoring \", e);\n      }\n    }\n  }\n\n","sourceOld":"  public JmxMonitoredMap(final String coreName, \n                         final JmxConfiguration jmxConfig) {\n    jmxRootName = (null != jmxConfig.rootName ? \n                   jmxConfig.rootName\n                   : (\"solr\" + (null != coreName ? \"/\" + coreName : \"\")));\n      \n    if (jmxConfig.serviceUrl == null) {\n      List<MBeanServer> servers = null;\n\n      if (jmxConfig.agentId == null) {\n        // Try to find the first MBeanServer\n        servers = MBeanServerFactory.findMBeanServer(null);\n      } else if (jmxConfig.agentId != null) {\n        // Try to find the first MBean server with the given agentId\n        servers = MBeanServerFactory.findMBeanServer(jmxConfig.agentId);\n        // throw Exception if no servers were found with the given agentId\n        if (servers == null || servers.isEmpty())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"No JMX Servers found with agentId: \" + jmxConfig.agentId);\n      }\n\n      if (servers == null || servers.isEmpty()) {\n        LOG.info(\"No JMX servers found, not exposing Solr information with JMX.\");\n        return;\n      }\n      server = servers.get(0);\n      LOG.info(\"JMX monitoring is enabled. Adding Solr mbeans to JMX Server: \"\n               + server);\n    } else {\n      try {\n        // Create a new MBeanServer with the given serviceUrl\n        server = MBeanServerFactory.newMBeanServer();\n        JMXConnectorServer connector = JMXConnectorServerFactory\n                .newJMXConnectorServer(new JMXServiceURL(jmxConfig.serviceUrl),\n                        null, server);\n        connector.start();\n        LOG.info(\"JMX monitoring is enabled at \" + jmxConfig.serviceUrl);\n      } catch (Exception e) {\n        // Release the reference\n        server = null;\n        throw new RuntimeException(\"Could not start JMX monitoring \", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,JmxConfiguration).mjava","pathOld":"solr/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,JmxConfiguration).mjava","sourceNew":"  public JmxMonitoredMap(final String coreName, \n                         final JmxConfiguration jmxConfig) {\n    jmxRootName = (null != jmxConfig.rootName ? \n                   jmxConfig.rootName\n                   : (\"solr\" + (null != coreName ? \"/\" + coreName : \"\")));\n      \n    if (jmxConfig.serviceUrl == null) {\n      List<MBeanServer> servers = null;\n\n      if (jmxConfig.agentId == null) {\n        // Try to find the first MBeanServer\n        servers = MBeanServerFactory.findMBeanServer(null);\n      } else if (jmxConfig.agentId != null) {\n        // Try to find the first MBean server with the given agentId\n        servers = MBeanServerFactory.findMBeanServer(jmxConfig.agentId);\n        // throw Exception if no servers were found with the given agentId\n        if (servers == null || servers.isEmpty())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"No JMX Servers found with agentId: \" + jmxConfig.agentId);\n      }\n\n      if (servers == null || servers.isEmpty()) {\n        LOG.info(\"No JMX servers found, not exposing Solr information with JMX.\");\n        return;\n      }\n      server = servers.get(0);\n      LOG.info(\"JMX monitoring is enabled. Adding Solr mbeans to JMX Server: \"\n               + server);\n    } else {\n      try {\n        // Create a new MBeanServer with the given serviceUrl\n        server = MBeanServerFactory.newMBeanServer();\n        JMXConnectorServer connector = JMXConnectorServerFactory\n                .newJMXConnectorServer(new JMXServiceURL(jmxConfig.serviceUrl),\n                        null, server);\n        connector.start();\n        LOG.info(\"JMX monitoring is enabled at \" + jmxConfig.serviceUrl);\n      } catch (Exception e) {\n        // Release the reference\n        server = null;\n        throw new RuntimeException(\"Could not start JMX monitoring \", e);\n      }\n    }\n  }\n\n","sourceOld":"  public JmxMonitoredMap(final String coreName, \n                         final JmxConfiguration jmxConfig) {\n    jmxRootName = (null != jmxConfig.rootName ? \n                   jmxConfig.rootName\n                   : (\"solr\" + (null != coreName ? \"/\" + coreName : \"\")));\n      \n    if (jmxConfig.serviceUrl == null) {\n      List<MBeanServer> servers = null;\n\n      if (jmxConfig.agentId == null) {\n        // Try to find the first MBeanServer\n        servers = MBeanServerFactory.findMBeanServer(null);\n      } else if (jmxConfig.agentId != null) {\n        // Try to find the first MBean server with the given agentId\n        servers = MBeanServerFactory.findMBeanServer(jmxConfig.agentId);\n        // throw Exception if no servers were found with the given agentId\n        if (servers == null || servers.isEmpty())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"No JMX Servers found with agentId: \" + jmxConfig.agentId);\n      }\n\n      if (servers == null || servers.isEmpty()) {\n        LOG.info(\"No JMX servers found, not exposing Solr information with JMX.\");\n        return;\n      }\n      server = servers.get(0);\n      LOG.info(\"JMX monitoring is enabled. Adding Solr mbeans to JMX Server: \"\n               + server);\n    } else {\n      try {\n        // Create a new MBeanServer with the given serviceUrl\n        server = MBeanServerFactory.newMBeanServer();\n        JMXConnectorServer connector = JMXConnectorServerFactory\n                .newJMXConnectorServer(new JMXServiceURL(jmxConfig.serviceUrl),\n                        null, server);\n        connector.start();\n        LOG.info(\"JMX monitoring is enabled at \" + jmxConfig.serviceUrl);\n      } catch (Exception e) {\n        // Release the reference\n        server = null;\n        throw new RuntimeException(\"Could not start JMX monitoring \", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,JmxConfiguration).mjava","pathOld":"solr/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,JmxConfiguration).mjava","sourceNew":"  public JmxMonitoredMap(final String coreName, \n                         final JmxConfiguration jmxConfig) {\n    jmxRootName = (null != jmxConfig.rootName ? \n                   jmxConfig.rootName\n                   : (\"solr\" + (null != coreName ? \"/\" + coreName : \"\")));\n      \n    if (jmxConfig.serviceUrl == null) {\n      List<MBeanServer> servers = null;\n\n      if (jmxConfig.agentId == null) {\n        // Try to find the first MBeanServer\n        servers = MBeanServerFactory.findMBeanServer(null);\n      } else if (jmxConfig.agentId != null) {\n        // Try to find the first MBean server with the given agentId\n        servers = MBeanServerFactory.findMBeanServer(jmxConfig.agentId);\n        // throw Exception if no servers were found with the given agentId\n        if (servers == null || servers.isEmpty())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"No JMX Servers found with agentId: \" + jmxConfig.agentId);\n      }\n\n      if (servers == null || servers.isEmpty()) {\n        LOG.info(\"No JMX servers found, not exposing Solr information with JMX.\");\n        return;\n      }\n      server = servers.get(0);\n      LOG.info(\"JMX monitoring is enabled. Adding Solr mbeans to JMX Server: \"\n               + server);\n    } else {\n      try {\n        // Create a new MBeanServer with the given serviceUrl\n        server = MBeanServerFactory.newMBeanServer();\n        JMXConnectorServer connector = JMXConnectorServerFactory\n                .newJMXConnectorServer(new JMXServiceURL(jmxConfig.serviceUrl),\n                        null, server);\n        connector.start();\n        LOG.info(\"JMX monitoring is enabled at \" + jmxConfig.serviceUrl);\n      } catch (Exception e) {\n        // Release the reference\n        server = null;\n        throw new RuntimeException(\"Could not start JMX monitoring \", e);\n      }\n    }\n  }\n\n","sourceOld":"  public JmxMonitoredMap(final String coreName, \n                         final JmxConfiguration jmxConfig) {\n    jmxRootName = (null != jmxConfig.rootName ? \n                   jmxConfig.rootName\n                   : (\"solr\" + (null != coreName ? \"/\" + coreName : \"\")));\n      \n    if (jmxConfig.serviceUrl == null) {\n      List<MBeanServer> servers = null;\n\n      if (jmxConfig.agentId == null) {\n        // Try to find the first MBeanServer\n        servers = MBeanServerFactory.findMBeanServer(null);\n      } else if (jmxConfig.agentId != null) {\n        // Try to find the first MBean server with the given agentId\n        servers = MBeanServerFactory.findMBeanServer(jmxConfig.agentId);\n        // throw Exception if no servers were found with the given agentId\n        if (servers == null || servers.isEmpty())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"No JMX Servers found with agentId: \" + jmxConfig.agentId);\n      }\n\n      if (servers == null || servers.isEmpty()) {\n        LOG.info(\"No JMX servers found, not exposing Solr information with JMX.\");\n        return;\n      }\n      server = servers.get(0);\n      LOG.info(\"JMX monitoring is enabled. Adding Solr mbeans to JMX Server: \"\n               + server);\n    } else {\n      try {\n        // Create a new MBeanServer with the given serviceUrl\n        server = MBeanServerFactory.newMBeanServer();\n        JMXConnectorServer connector = JMXConnectorServerFactory\n                .newJMXConnectorServer(new JMXServiceURL(jmxConfig.serviceUrl),\n                        null, server);\n        connector.start();\n        LOG.info(\"JMX monitoring is enabled at \" + jmxConfig.serviceUrl);\n      } catch (Exception e) {\n        // Release the reference\n        server = null;\n        throw new RuntimeException(\"Could not start JMX monitoring \", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feb75c13cdf6b27b36407e4b15b35cf3142ab619","date":1310465075,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,String,JmxConfiguration).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,JmxConfiguration).mjava","sourceNew":"  public JmxMonitoredMap(String coreName, String coreHashCode,\n                         final JmxConfiguration jmxConfig) {\n    this.coreHashCode = coreHashCode;\n    jmxRootName = (null != jmxConfig.rootName ?\n                   jmxConfig.rootName\n                   : (\"solr\" + (null != coreName ? \"/\" + coreName : \"\")));\n      \n    if (jmxConfig.serviceUrl == null) {\n      List<MBeanServer> servers = null;\n\n      if (jmxConfig.agentId == null) {\n        // Try to find the first MBeanServer\n        servers = MBeanServerFactory.findMBeanServer(null);\n      } else if (jmxConfig.agentId != null) {\n        // Try to find the first MBean server with the given agentId\n        servers = MBeanServerFactory.findMBeanServer(jmxConfig.agentId);\n        // throw Exception if no servers were found with the given agentId\n        if (servers == null || servers.isEmpty())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"No JMX Servers found with agentId: \" + jmxConfig.agentId);\n      }\n\n      if (servers == null || servers.isEmpty()) {\n        LOG.info(\"No JMX servers found, not exposing Solr information with JMX.\");\n        return;\n      }\n      server = servers.get(0);\n      LOG.info(\"JMX monitoring is enabled. Adding Solr mbeans to JMX Server: \"\n               + server);\n    } else {\n      try {\n        // Create a new MBeanServer with the given serviceUrl\n        server = MBeanServerFactory.newMBeanServer();\n        JMXConnectorServer connector = JMXConnectorServerFactory\n                .newJMXConnectorServer(new JMXServiceURL(jmxConfig.serviceUrl),\n                        null, server);\n        connector.start();\n        LOG.info(\"JMX monitoring is enabled at \" + jmxConfig.serviceUrl);\n      } catch (Exception e) {\n        // Release the reference\n        server = null;\n        throw new RuntimeException(\"Could not start JMX monitoring \", e);\n      }\n    }\n  }\n\n","sourceOld":"  public JmxMonitoredMap(final String coreName, \n                         final JmxConfiguration jmxConfig) {\n    jmxRootName = (null != jmxConfig.rootName ? \n                   jmxConfig.rootName\n                   : (\"solr\" + (null != coreName ? \"/\" + coreName : \"\")));\n      \n    if (jmxConfig.serviceUrl == null) {\n      List<MBeanServer> servers = null;\n\n      if (jmxConfig.agentId == null) {\n        // Try to find the first MBeanServer\n        servers = MBeanServerFactory.findMBeanServer(null);\n      } else if (jmxConfig.agentId != null) {\n        // Try to find the first MBean server with the given agentId\n        servers = MBeanServerFactory.findMBeanServer(jmxConfig.agentId);\n        // throw Exception if no servers were found with the given agentId\n        if (servers == null || servers.isEmpty())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"No JMX Servers found with agentId: \" + jmxConfig.agentId);\n      }\n\n      if (servers == null || servers.isEmpty()) {\n        LOG.info(\"No JMX servers found, not exposing Solr information with JMX.\");\n        return;\n      }\n      server = servers.get(0);\n      LOG.info(\"JMX monitoring is enabled. Adding Solr mbeans to JMX Server: \"\n               + server);\n    } else {\n      try {\n        // Create a new MBeanServer with the given serviceUrl\n        server = MBeanServerFactory.newMBeanServer();\n        JMXConnectorServer connector = JMXConnectorServerFactory\n                .newJMXConnectorServer(new JMXServiceURL(jmxConfig.serviceUrl),\n                        null, server);\n        connector.start();\n        LOG.info(\"JMX monitoring is enabled at \" + jmxConfig.serviceUrl);\n      } catch (Exception e) {\n        // Release the reference\n        server = null;\n        throw new RuntimeException(\"Could not start JMX monitoring \", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"feb75c13cdf6b27b36407e4b15b35cf3142ab619":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["feb75c13cdf6b27b36407e4b15b35cf3142ab619"]},"commit2Childs":{"feb75c13cdf6b27b36407e4b15b35cf3142ab619":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["feb75c13cdf6b27b36407e4b15b35cf3142ab619"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}