{"path":"lucene/src/java/org/apache/lucene/search/function/OrdFieldSource#getValues(IndexReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/function/OrdFieldSource#getValues(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/function/OrdFieldSource#getValues(IndexReader).mjava","sourceNew":"  /*(non-Javadoc) @see org.apache.lucene.search.function.ValueSource#getValues(org.apache.lucene.index.IndexReader) */\n  @Override\n  public DocValues getValues(IndexReader reader) throws IOException {\n    final int[] arr = FieldCache.DEFAULT.getStringIndex(reader, field).order;\n    return new DocValues() {\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#floatVal(int) */\n      @Override\n      public float floatVal(int doc) {\n        return arr[doc];\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#strVal(int) */\n      @Override\n      public String strVal(int doc) {\n        // the string value of the ordinal, not the string itself\n        return Integer.toString(arr[doc]);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#toString(int) */\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#getInnerArray() */\n      @Override\n      Object getInnerArray() {\n        return arr;\n      }\n    };\n  }\n\n","sourceOld":"  /*(non-Javadoc) @see org.apache.lucene.search.function.ValueSource#getValues(org.apache.lucene.index.IndexReader) */\n  @Override\n  public DocValues getValues(IndexReader reader) throws IOException {\n    final int[] arr = FieldCache.DEFAULT.getStringIndex(reader, field).order;\n    return new DocValues() {\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#floatVal(int) */\n      @Override\n      public float floatVal(int doc) {\n        return arr[doc];\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#strVal(int) */\n      @Override\n      public String strVal(int doc) {\n        // the string value of the ordinal, not the string itself\n        return Integer.toString(arr[doc]);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#toString(int) */\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#getInnerArray() */\n      @Override\n      Object getInnerArray() {\n        return arr;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be20f9fed1d3edcb1c84abcc39df87a90fab22df","date":1275590285,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/function/OrdFieldSource#getValues(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/function/OrdFieldSource#getValues(IndexReader).mjava","sourceNew":"  /*(non-Javadoc) @see org.apache.lucene.search.function.ValueSource#getValues(org.apache.lucene.index.IndexReader) */\n  @Override\n  public DocValues getValues(IndexReader reader) throws IOException {\n    final DocTermsIndex termsIndex = FieldCache.DEFAULT.getTermsIndex(reader, field);\n    return new DocValues() {\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#floatVal(int) */\n      @Override\n      public float floatVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#strVal(int) */\n      @Override\n      public String strVal(int doc) {\n        // the string value of the ordinal, not the string itself\n        return Integer.toString(termsIndex.getOrd(doc));\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#toString(int) */\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#getInnerArray() */\n      @Override\n      Object getInnerArray() {\n        return termsIndex;\n      }\n    };\n  }\n\n","sourceOld":"  /*(non-Javadoc) @see org.apache.lucene.search.function.ValueSource#getValues(org.apache.lucene.index.IndexReader) */\n  @Override\n  public DocValues getValues(IndexReader reader) throws IOException {\n    final int[] arr = FieldCache.DEFAULT.getStringIndex(reader, field).order;\n    return new DocValues() {\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#floatVal(int) */\n      @Override\n      public float floatVal(int doc) {\n        return arr[doc];\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#strVal(int) */\n      @Override\n      public String strVal(int doc) {\n        // the string value of the ordinal, not the string itself\n        return Integer.toString(arr[doc]);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#toString(int) */\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#getInnerArray() */\n      @Override\n      Object getInnerArray() {\n        return arr;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/function/OrdFieldSource#getValues(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/function/OrdFieldSource#getValues(IndexReader).mjava","sourceNew":"  /*(non-Javadoc) @see org.apache.lucene.search.function.ValueSource#getValues(org.apache.lucene.index.IndexReader) */\n  @Override\n  public DocValues getValues(AtomicReaderContext context) throws IOException {\n    final DocTermsIndex termsIndex = FieldCache.DEFAULT.getTermsIndex(context.reader, field);\n    return new DocValues() {\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#floatVal(int) */\n      @Override\n      public float floatVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#strVal(int) */\n      @Override\n      public String strVal(int doc) {\n        // the string value of the ordinal, not the string itself\n        return Integer.toString(termsIndex.getOrd(doc));\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#toString(int) */\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#getInnerArray() */\n      @Override\n      Object getInnerArray() {\n        return termsIndex;\n      }\n    };\n  }\n\n","sourceOld":"  /*(non-Javadoc) @see org.apache.lucene.search.function.ValueSource#getValues(org.apache.lucene.index.IndexReader) */\n  @Override\n  public DocValues getValues(IndexReader reader) throws IOException {\n    final DocTermsIndex termsIndex = FieldCache.DEFAULT.getTermsIndex(reader, field);\n    return new DocValues() {\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#floatVal(int) */\n      @Override\n      public float floatVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#strVal(int) */\n      @Override\n      public String strVal(int doc) {\n        // the string value of the ordinal, not the string itself\n        return Integer.toString(termsIndex.getOrd(doc));\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#toString(int) */\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#getInnerArray() */\n      @Override\n      Object getInnerArray() {\n        return termsIndex;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/function/OrdFieldSource#getValues(IndexReader).mjava","sourceNew":null,"sourceOld":"  /*(non-Javadoc) @see org.apache.lucene.search.function.ValueSource#getValues(org.apache.lucene.index.IndexReader) */\n  @Override\n  public DocValues getValues(IndexReader reader) throws IOException {\n    final DocTermsIndex termsIndex = FieldCache.DEFAULT.getTermsIndex(reader, field);\n    return new DocValues() {\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#floatVal(int) */\n      @Override\n      public float floatVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#strVal(int) */\n      @Override\n      public String strVal(int doc) {\n        // the string value of the ordinal, not the string itself\n        return Integer.toString(termsIndex.getOrd(doc));\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#toString(int) */\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#getInnerArray() */\n      @Override\n      Object getInnerArray() {\n        return termsIndex;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/function/OrdFieldSource#getValues(IndexReader).mjava","sourceNew":null,"sourceOld":"  /*(non-Javadoc) @see org.apache.lucene.search.function.ValueSource#getValues(org.apache.lucene.index.IndexReader) */\n  @Override\n  public DocValues getValues(IndexReader reader) throws IOException {\n    final DocTermsIndex termsIndex = FieldCache.DEFAULT.getTermsIndex(reader, field);\n    return new DocValues() {\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#floatVal(int) */\n      @Override\n      public float floatVal(int doc) {\n        return termsIndex.getOrd(doc);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#strVal(int) */\n      @Override\n      public String strVal(int doc) {\n        // the string value of the ordinal, not the string itself\n        return Integer.toString(termsIndex.getOrd(doc));\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#toString(int) */\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#getInnerArray() */\n      @Override\n      Object getInnerArray() {\n        return termsIndex;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c220849f876de24a79f756f65b3eb045db59f63f":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","c220849f876de24a79f756f65b3eb045db59f63f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","c220849f876de24a79f756f65b3eb045db59f63f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c220849f876de24a79f756f65b3eb045db59f63f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["c220849f876de24a79f756f65b3eb045db59f63f","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c220849f876de24a79f756f65b3eb045db59f63f":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}