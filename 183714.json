{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","sourceNew":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9","date":1270985469,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","sourceNew":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.commit();\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10","date":1270996866,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","sourceNew":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.commit();\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4","date":1271167458,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","sourceNew":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.commit();\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","sourceNew":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.commit();\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.commit();\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","sourceNew":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.commit();\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.commit();\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","sourceNew":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.commit();\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.commit();\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","sourceNew":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.commit();\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.commit();\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":["527cc14542789f47d75da436cb4287d1ab887e34"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","sourceNew":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.commit();\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.commit();\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","sourceNew":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.commit();\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.commit();\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","sourceNew":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.commit();\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.commit();\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","sourceNew":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.commit();\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.commit();\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","sourceNew":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.commit();\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.commit();\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00743482822ec0841b0344a37944b666e6a0228d","date":1313588663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","sourceNew":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.commit();\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.commit();\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","sourceNew":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.commit();\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = IndexReader.openIfChanged(r1);\n    if (r2 != null) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.commit();\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = r1.reopen();\n    if (r2 != r1) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","sourceNew":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.commit();\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = IndexReader.openIfChanged(r1);\n    if (r2 != null) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.commit();\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = IndexReader.openIfChanged(r1);\n    if (r2 != null) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55c2bb1bcc0edd142e63b9230976dfc3e500dbe8","date":1327857288,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","sourceNew":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.commit();\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    DirectoryReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r1);\n    if (r2 != null) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.commit();\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = IndexReader.openIfChanged(r1);\n    if (r2 != null) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","sourceNew":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.commit();\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    DirectoryReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r1);\n    if (r2 != null) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.commit();\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    IndexReader r2 = IndexReader.openIfChanged(r1);\n    if (r2 != null) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAfterCommit().mjava","sourceNew":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.commit();\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    DirectoryReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r1);\n    if (r2 != null) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testAfterCommit() throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.commit();\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    DirectoryReader r1 = writer.getReader();\n    _TestUtil.checkIndex(dir1);\n    writer.commit();\n    _TestUtil.checkIndex(dir1);\n    assertEquals(100, r1.numDocs());\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r1);\n    if (r2 != null) {\n      r1.close();\n      r1 = r2;\n    }\n    assertEquals(110, r1.numDocs());\n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"06584e6e98d592b34e1329b384182f368d2025e8":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["1f653cfcf159baeaafe5d01682a911e95bba4012","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"55c2bb1bcc0edd142e63b9230976dfc3e500dbe8":["06584e6e98d592b34e1329b384182f368d2025e8"],"d572389229127c297dd1fa5ce4758e1cec41e799":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"00743482822ec0841b0344a37944b666e6a0228d":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","1f653cfcf159baeaafe5d01682a911e95bba4012"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["06584e6e98d592b34e1329b384182f368d2025e8","55c2bb1bcc0edd142e63b9230976dfc3e500dbe8"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["00743482822ec0841b0344a37944b666e6a0228d"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1f653cfcf159baeaafe5d01682a911e95bba4012","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06584e6e98d592b34e1329b384182f368d2025e8":["55c2bb1bcc0edd142e63b9230976dfc3e500dbe8","5cab9a86bd67202d20b6adc463008c8e982b070a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"55c2bb1bcc0edd142e63b9230976dfc3e500dbe8":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"00743482822ec0841b0344a37944b666e6a0228d":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["06584e6e98d592b34e1329b384182f368d2025e8"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","00743482822ec0841b0344a37944b666e6a0228d","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["d572389229127c297dd1fa5ce4758e1cec41e799"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}