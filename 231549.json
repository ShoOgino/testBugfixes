{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter#setField(FieldInfo).mjava","commits":[{"id":"b5438f921924c13c882efeac58b6d3a7c2a3978e","date":1400171541,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter#setField(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int setField(FieldInfo fieldInfo) {\n    super.setField(fieldInfo);\n    if (fieldInfo.getIndexOptions() != FieldInfo.IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      throw new IllegalArgumentException(\"field must be index using IndexOptions.DOCS_AND_FREQS_AND_POSITIONS\");\n    }\n    lastState = emptyState;\n    return 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca044bd4a0bea8391cbebb44a34aba53a9b50541","date":1400784655,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter#setField(FieldInfo).mjava","sourceNew":"  @Override\n  public int setField(FieldInfo fieldInfo) {\n    super.setField(fieldInfo);\n    if (fieldInfo.getIndexOptions() != FieldInfo.IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      throw new IllegalArgumentException(\"field must be index using IndexOptions.DOCS_AND_FREQS_AND_POSITIONS\");\n    }\n    // LUCENE-5693: because CheckIndex cross-checks term vectors with postings even for deleted docs, and because our PF only indexes the\n    // non-deleted documents on flush, CheckIndex will see this as corruption:\n    if (fieldInfo.hasVectors()) {\n      throw new IllegalArgumentException(\"field cannot index term vectors: CheckIndex will report this as index corruption\");\n    }\n    lastState = emptyState;\n    return 0;\n  }\n\n","sourceOld":"  @Override\n  public int setField(FieldInfo fieldInfo) {\n    super.setField(fieldInfo);\n    if (fieldInfo.getIndexOptions() != FieldInfo.IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      throw new IllegalArgumentException(\"field must be index using IndexOptions.DOCS_AND_FREQS_AND_POSITIONS\");\n    }\n    lastState = emptyState;\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","date":1400786907,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter#setField(FieldInfo).mjava","sourceNew":"  @Override\n  public int setField(FieldInfo fieldInfo) {\n    super.setField(fieldInfo);\n    if (fieldInfo.getIndexOptions() != FieldInfo.IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      throw new IllegalArgumentException(\"field must be index using IndexOptions.DOCS_AND_FREQS_AND_POSITIONS\");\n    }\n    // LUCENE-5693: because CheckIndex cross-checks term vectors with postings even for deleted docs, and because our PF only indexes the\n    // non-deleted documents on flush, CheckIndex will see this as corruption:\n    if (fieldInfo.hasVectors()) {\n      throw new IllegalArgumentException(\"field cannot index term vectors: CheckIndex will report this as index corruption\");\n    }\n    lastState = emptyState;\n    return 0;\n  }\n\n","sourceOld":"  @Override\n  public int setField(FieldInfo fieldInfo) {\n    super.setField(fieldInfo);\n    if (fieldInfo.getIndexOptions() != FieldInfo.IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      throw new IllegalArgumentException(\"field must be index using IndexOptions.DOCS_AND_FREQS_AND_POSITIONS\");\n    }\n    // LUCENE-5693: because CheckIndex cross-checks term vectors with postings even for deleted docs, and because our PF only indexes the\n    // non-deleted documents on flush, CheckIndex will see this as corruption:\n    if (fieldInfo.hasVectors()) {\n      throw new IllegalArgumentException(\"field cannot index term vectors: CheckIndex will report this as index corruption\");\n    }\n    lastState = emptyState;\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["ca044bd4a0bea8391cbebb44a34aba53a9b50541"],"ca044bd4a0bea8391cbebb44a34aba53a9b50541":["b5438f921924c13c882efeac58b6d3a7c2a3978e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5438f921924c13c882efeac58b6d3a7c2a3978e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":[],"ca044bd4a0bea8391cbebb44a34aba53a9b50541":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5438f921924c13c882efeac58b6d3a7c2a3978e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b5438f921924c13c882efeac58b6d3a7c2a3978e":["ca044bd4a0bea8391cbebb44a34aba53a9b50541"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}