{"path":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#deleteFile(String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#deleteFile(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/FSDirectory#deleteFile(String).mjava","sourceNew":"  /** Removes an existing file in the directory. */\n  @Override\n  public void deleteFile(String name) throws IOException {\n    ensureOpen();\n    File file = new File(directory, name);\n    if (!file.delete())\n      throw new IOException(\"Cannot delete \" + file);\n    staleFiles.remove(name);\n  }\n\n","sourceOld":"  /** Removes an existing file in the directory. */\n  @Override\n  public void deleteFile(String name) throws IOException {\n    ensureOpen();\n    File file = new File(directory, name);\n    if (!file.delete())\n      throw new IOException(\"Cannot delete \" + file);\n    staleFiles.remove(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#deleteFile(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#deleteFile(String).mjava","sourceNew":"  /** Removes an existing file in the directory. */\n  @Override\n  public void deleteFile(String name) throws IOException {\n    ensureOpen();\n    File file = new File(directory, name);\n    Files.delete(file.toPath());\n    staleFiles.remove(name);\n  }\n\n","sourceOld":"  /** Removes an existing file in the directory. */\n  @Override\n  public void deleteFile(String name) throws IOException {\n    ensureOpen();\n    File file = new File(directory, name);\n    if (!file.delete())\n      throw new IOException(\"Cannot delete \" + file);\n    staleFiles.remove(name);\n  }\n\n","bugFix":["91109046a59c58ee0ee5d0d2767b08d1f30d6702","4050c0cac07cbf55be818b8a552cfab55d0ddf4b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#deleteFile(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#deleteFile(String).mjava","sourceNew":"  /** Removes an existing file in the directory. */\n  @Override\n  public void deleteFile(String name) throws IOException {\n    ensureOpen();\n    Files.delete(directory.resolve(name));\n    staleFiles.remove(name);\n  }\n\n","sourceOld":"  /** Removes an existing file in the directory. */\n  @Override\n  public void deleteFile(String name) throws IOException {\n    ensureOpen();\n    File file = new File(directory, name);\n    Files.delete(file.toPath());\n    staleFiles.remove(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0716e003f90db334b4898cc2149fcc71e9a4fe4e","date":1420109009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#deleteFile(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#deleteFile(String).mjava","sourceNew":"  /** Removes an existing file in the directory. */\n  @Override\n  public void deleteFile(String name) throws IOException {\n    ensureOpen();\n    Files.delete(directory.resolve(name));\n  }\n\n","sourceOld":"  /** Removes an existing file in the directory. */\n  @Override\n  public void deleteFile(String name) throws IOException {\n    ensureOpen();\n    Files.delete(directory.resolve(name));\n    staleFiles.remove(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#deleteFile(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#deleteFile(String).mjava","sourceNew":"  /** Returns true if the file was successfully removed. */\n  private boolean deleteFile(String name) throws IOException {  \n    try {\n      Files.delete(directory.resolve(name));\n      pendingDeletes.remove(name);\n      return true;\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      // We were asked to delete a non-existent file:\n      pendingDeletes.remove(name);\n      throw e;\n    } catch (IOException ioe) {\n      // On windows, a file delete can fail because there's still an open\n      // file handle against it.  We record this in pendingDeletes and\n      // try again later.\n\n      // TODO: this is hacky/lenient (we don't know which IOException this is), and\n      // it should only happen on filesystems that can do this, so really we should\n      // move this logic to WindowsDirectory or something\n\n      // TODO: can/should we do if (Constants.WINDOWS) here, else throw the exc?\n      // but what about a Linux box with a CIFS mount?\n      //System.out.println(\"FS.deleteFile failed (\" + ioe + \"): will retry later\");\n      pendingDeletes.add(name);\n      return false;\n    }\n  }\n\n","sourceOld":"  /** Removes an existing file in the directory. */\n  @Override\n  public void deleteFile(String name) throws IOException {\n    ensureOpen();\n    Files.delete(directory.resolve(name));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbc04ab124c4db4a06d2a69891c3ec6ac9f934a9","date":1454454426,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#deleteFile(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#deleteFile(String).mjava","sourceNew":"  /** Returns true if the file was successfully removed. */\n  private synchronized boolean deleteFile(String name) throws IOException {  \n    pendingDeletes.remove(name);\n    try {\n      Files.delete(directory.resolve(name));\n      return true;\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      // We were asked to delete a non-existent file:\n      throw e;\n    } catch (IOException ioe) {\n      // On windows, a file delete can fail because there's still an open\n      // file handle against it.  We record this in pendingDeletes and\n      // try again later.\n\n      // TODO: this is hacky/lenient (we don't know which IOException this is), and\n      // it should only happen on filesystems that can do this, so really we should\n      // move this logic to WindowsDirectory or something\n\n      // TODO: can/should we do if (Constants.WINDOWS) here, else throw the exc?\n      // but what about a Linux box with a CIFS mount?\n      //System.out.println(\"FS.deleteFile failed (\" + ioe + \"): will retry later\");\n      pendingDeletes.add(name);\n      return false;\n    }\n  }\n\n","sourceOld":"  /** Returns true if the file was successfully removed. */\n  private boolean deleteFile(String name) throws IOException {  \n    try {\n      Files.delete(directory.resolve(name));\n      pendingDeletes.remove(name);\n      return true;\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      // We were asked to delete a non-existent file:\n      pendingDeletes.remove(name);\n      throw e;\n    } catch (IOException ioe) {\n      // On windows, a file delete can fail because there's still an open\n      // file handle against it.  We record this in pendingDeletes and\n      // try again later.\n\n      // TODO: this is hacky/lenient (we don't know which IOException this is), and\n      // it should only happen on filesystems that can do this, so really we should\n      // move this logic to WindowsDirectory or something\n\n      // TODO: can/should we do if (Constants.WINDOWS) here, else throw the exc?\n      // but what about a Linux box with a CIFS mount?\n      //System.out.println(\"FS.deleteFile failed (\" + ioe + \"): will retry later\");\n      pendingDeletes.add(name);\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1","date":1454513757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#deleteFile(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#deleteFile(String).mjava","sourceNew":"  @Override\n  public void deleteFile(String name) throws IOException {  \n    pendingDeletes.remove(name);\n    try {\n      Files.delete(directory.resolve(name));\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      // We were asked to delete a non-existent file:\n      throw e;\n    } catch (IOException ioe) {\n      // On windows, a file delete can fail because there's still an open\n      // file handle against it.  We record this in pendingDeletes and\n      // try again later.\n\n      // TODO: this is hacky/lenient (we don't know which IOException this is), and\n      // it should only happen on filesystems that can do this, so really we should\n      // move this logic to WindowsDirectory or something\n\n      // TODO: can/should we do if (Constants.WINDOWS) here, else throw the exc?\n      // but what about a Linux box with a CIFS mount?\n      pendingDeletes.add(name);\n    }\n  }\n\n","sourceOld":"  /** Returns true if the file was successfully removed. */\n  private synchronized boolean deleteFile(String name) throws IOException {  \n    pendingDeletes.remove(name);\n    try {\n      Files.delete(directory.resolve(name));\n      return true;\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      // We were asked to delete a non-existent file:\n      throw e;\n    } catch (IOException ioe) {\n      // On windows, a file delete can fail because there's still an open\n      // file handle against it.  We record this in pendingDeletes and\n      // try again later.\n\n      // TODO: this is hacky/lenient (we don't know which IOException this is), and\n      // it should only happen on filesystems that can do this, so really we should\n      // move this logic to WindowsDirectory or something\n\n      // TODO: can/should we do if (Constants.WINDOWS) here, else throw the exc?\n      // but what about a Linux box with a CIFS mount?\n      //System.out.println(\"FS.deleteFile failed (\" + ioe + \"): will retry later\");\n      pendingDeletes.add(name);\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44a0466296f4b2d9deac60e3e524628c97aa5191","date":1454532248,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#deleteFile(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#deleteFile(String).mjava","sourceNew":"  @Override\n  public void deleteFile(String name) throws IOException {  \n    try {\n      Files.delete(directory.resolve(name));\n      pendingDeletes.remove(name);\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      // We were asked to delete a non-existent file:\n      pendingDeletes.remove(name);\n      throw e;\n    } catch (IOException ioe) {\n      // On windows, a file delete can fail because there's still an open\n      // file handle against it.  We record this in pendingDeletes and\n      // try again later.\n\n      // TODO: this is hacky/lenient (we don't know which IOException this is), and\n      // it should only happen on filesystems that can do this, so really we should\n      // move this logic to WindowsDirectory or something\n\n      // TODO: can/should we do if (Constants.WINDOWS) here, else throw the exc?\n      // but what about a Linux box with a CIFS mount?\n      pendingDeletes.add(name);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void deleteFile(String name) throws IOException {  \n    pendingDeletes.remove(name);\n    try {\n      Files.delete(directory.resolve(name));\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      // We were asked to delete a non-existent file:\n      throw e;\n    } catch (IOException ioe) {\n      // On windows, a file delete can fail because there's still an open\n      // file handle against it.  We record this in pendingDeletes and\n      // try again later.\n\n      // TODO: this is hacky/lenient (we don't know which IOException this is), and\n      // it should only happen on filesystems that can do this, so really we should\n      // move this logic to WindowsDirectory or something\n\n      // TODO: can/should we do if (Constants.WINDOWS) here, else throw the exc?\n      // but what about a Linux box with a CIFS mount?\n      pendingDeletes.add(name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"240cd0f67652ccfb87d7c5f8b2486d0f42012daa","date":1454536570,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#deleteFile(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#deleteFile(String).mjava","sourceNew":"  @Override\n  public void deleteFile(String name) throws IOException {  \n    if (pendingDeletes.contains(name)) {\n      throw new NoSuchFileException(\"file \\\"\" + name + \"\\\" is already pending delete\");\n    }\n    privateDeleteFile(name);\n  }\n\n","sourceOld":"  @Override\n  public void deleteFile(String name) throws IOException {  \n    try {\n      Files.delete(directory.resolve(name));\n      pendingDeletes.remove(name);\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      // We were asked to delete a non-existent file:\n      pendingDeletes.remove(name);\n      throw e;\n    } catch (IOException ioe) {\n      // On windows, a file delete can fail because there's still an open\n      // file handle against it.  We record this in pendingDeletes and\n      // try again later.\n\n      // TODO: this is hacky/lenient (we don't know which IOException this is), and\n      // it should only happen on filesystems that can do this, so really we should\n      // move this logic to WindowsDirectory or something\n\n      // TODO: can/should we do if (Constants.WINDOWS) here, else throw the exc?\n      // but what about a Linux box with a CIFS mount?\n      pendingDeletes.add(name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6105d385afcbf42689e171e9bcea48d0c9ff6c","date":1454692764,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#deleteFile(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#deleteFile(String).mjava","sourceNew":"  @Override\n  public void deleteFile(String name) throws IOException {  \n    if (pendingDeletes.contains(name)) {\n      throw new NoSuchFileException(\"file \\\"\" + name + \"\\\" is already pending delete\");\n    }\n    privateDeleteFile(name);\n    maybeDeletePendingFiles();\n  }\n\n","sourceOld":"  @Override\n  public void deleteFile(String name) throws IOException {  \n    if (pendingDeletes.contains(name)) {\n      throw new NoSuchFileException(\"file \\\"\" + name + \"\\\" is already pending delete\");\n    }\n    privateDeleteFile(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#deleteFile(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#deleteFile(String).mjava","sourceNew":"  @Override\n  public void deleteFile(String name) throws IOException {  \n    if (pendingDeletes.contains(name)) {\n      throw new NoSuchFileException(\"file \\\"\" + name + \"\\\" is already pending delete\");\n    }\n    privateDeleteFile(name);\n    maybeDeletePendingFiles();\n  }\n\n","sourceOld":"  /** Removes an existing file in the directory. */\n  @Override\n  public void deleteFile(String name) throws IOException {\n    ensureOpen();\n    Files.delete(directory.resolve(name));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#deleteFile(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#deleteFile(String).mjava","sourceNew":"  @Override\n  public void deleteFile(String name) throws IOException {  \n    if (pendingDeletes.contains(name)) {\n      throw new NoSuchFileException(\"file \\\"\" + name + \"\\\" is already pending delete\");\n    }\n    privateDeleteFile(name);\n    maybeDeletePendingFiles();\n  }\n\n","sourceOld":"  /** Removes an existing file in the directory. */\n  @Override\n  public void deleteFile(String name) throws IOException {\n    ensureOpen();\n    Files.delete(directory.resolve(name));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#deleteFile(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#deleteFile(String).mjava","sourceNew":"  @Override\n  public void deleteFile(String name) throws IOException {  \n    if (pendingDeletes.contains(name)) {\n      throw new NoSuchFileException(\"file \\\"\" + name + \"\\\" is already pending delete\");\n    }\n    privateDeleteFile(name);\n    maybeDeletePendingFiles();\n  }\n\n","sourceOld":"  /** Removes an existing file in the directory. */\n  @Override\n  public void deleteFile(String name) throws IOException {\n    ensureOpen();\n    Files.delete(directory.resolve(name));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cedcb3038bb218e20fc9c61e3b50642101e656e8","date":1454869299,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#deleteFile(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#deleteFile(String).mjava","sourceNew":"  @Override\n  public void deleteFile(String name) throws IOException {  \n    if (pendingDeletes.contains(name)) {\n      throw new NoSuchFileException(\"file \\\"\" + name + \"\\\" is already pending delete\");\n    }\n    privateDeleteFile(name, false);\n    maybeDeletePendingFiles();\n  }\n\n","sourceOld":"  @Override\n  public void deleteFile(String name) throws IOException {  \n    if (pendingDeletes.contains(name)) {\n      throw new NoSuchFileException(\"file \\\"\" + name + \"\\\" is already pending delete\");\n    }\n    privateDeleteFile(name);\n    maybeDeletePendingFiles();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd75f58072bba84066e89d61bd7028de1bd5b632","date":1454871793,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#deleteFile(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#deleteFile(String).mjava","sourceNew":"  @Override\n  public void deleteFile(String name) throws IOException {  \n    if (pendingDeletes.contains(name)) {\n      throw new NoSuchFileException(\"file \\\"\" + name + \"\\\" is already pending delete\");\n    }\n    privateDeleteFile(name, false);\n    maybeDeletePendingFiles();\n  }\n\n","sourceOld":"  @Override\n  public void deleteFile(String name) throws IOException {  \n    if (pendingDeletes.contains(name)) {\n      throw new NoSuchFileException(\"file \\\"\" + name + \"\\\" is already pending delete\");\n    }\n    privateDeleteFile(name);\n    maybeDeletePendingFiles();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"240cd0f67652ccfb87d7c5f8b2486d0f42012daa":["44a0466296f4b2d9deac60e3e524628c97aa5191"],"cedcb3038bb218e20fc9c61e3b50642101e656e8":["5a207d19eac354d649c3f0e2cce070017c78125e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["0716e003f90db334b4898cc2149fcc71e9a4fe4e","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["0716e003f90db334b4898cc2149fcc71e9a4fe4e","b470f36a9372c97283360b1304eacbde22df6c0d"],"f4abec28b874149a7223e32cc7a01704c27790de":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"1e6105d385afcbf42689e171e9bcea48d0c9ff6c":["240cd0f67652ccfb87d7c5f8b2486d0f42012daa"],"fbc04ab124c4db4a06d2a69891c3ec6ac9f934a9":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["fbc04ab124c4db4a06d2a69891c3ec6ac9f934a9"],"dd75f58072bba84066e89d61bd7028de1bd5b632":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cedcb3038bb218e20fc9c61e3b50642101e656e8"],"b470f36a9372c97283360b1304eacbde22df6c0d":["0716e003f90db334b4898cc2149fcc71e9a4fe4e","1e6105d385afcbf42689e171e9bcea48d0c9ff6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0716e003f90db334b4898cc2149fcc71e9a4fe4e":["f4abec28b874149a7223e32cc7a01704c27790de"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["0716e003f90db334b4898cc2149fcc71e9a4fe4e"],"44a0466296f4b2d9deac60e3e524628c97aa5191":["8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cedcb3038bb218e20fc9c61e3b50642101e656e8"]},"commit2Childs":{"240cd0f67652ccfb87d7c5f8b2486d0f42012daa":["1e6105d385afcbf42689e171e9bcea48d0c9ff6c"],"cedcb3038bb218e20fc9c61e3b50642101e656e8":["dd75f58072bba84066e89d61bd7028de1bd5b632","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cedcb3038bb218e20fc9c61e3b50642101e656e8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["dd75f58072bba84066e89d61bd7028de1bd5b632"],"f4abec28b874149a7223e32cc7a01704c27790de":["0716e003f90db334b4898cc2149fcc71e9a4fe4e"],"1e6105d385afcbf42689e171e9bcea48d0c9ff6c":["b470f36a9372c97283360b1304eacbde22df6c0d"],"fbc04ab124c4db4a06d2a69891c3ec6ac9f934a9":["8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["f4abec28b874149a7223e32cc7a01704c27790de"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["44a0466296f4b2d9deac60e3e524628c97aa5191"],"dd75f58072bba84066e89d61bd7028de1bd5b632":[],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0716e003f90db334b4898cc2149fcc71e9a4fe4e":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["fbc04ab124c4db4a06d2a69891c3ec6ac9f934a9"],"44a0466296f4b2d9deac60e3e524628c97aa5191":["240cd0f67652ccfb87d7c5f8b2486d0f42012daa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd75f58072bba84066e89d61bd7028de1bd5b632","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}