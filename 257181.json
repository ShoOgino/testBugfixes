{"path":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,Configuration).mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,Configuration).mjava","pathOld":"/dev/null","sourceNew":"  public HdfsDirectory(Path hdfsDirPath, Configuration configuration)\n      throws IOException {\n    assert hdfsDirPath.toString().startsWith(\"hdfs:/\") : hdfsDirPath.toString();\n    setLockFactory(NoLockFactory.getNoLockFactory());\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    fileSystem = FileSystem.newInstance(hdfsDirPath.toUri(), configuration);\n    try {\n      if (!fileSystem.exists(hdfsDirPath)) {\n        fileSystem.mkdirs(hdfsDirPath);\n      }\n    } catch (Exception e) {\n      IOUtils.closeQuietly(fileSystem);\n      throw new RuntimeException(\"Problem creating directory: \" + hdfsDirPath,\n          e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a3bf63a4bdcd7c37d2bef84364a56ffdb8a51197","7c88c33fee958027b9192ef2c6bb54836618b165"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,Configuration).mjava","pathOld":"/dev/null","sourceNew":"  public HdfsDirectory(Path hdfsDirPath, Configuration configuration)\n      throws IOException {\n    assert hdfsDirPath.toString().startsWith(\"hdfs:/\") : hdfsDirPath.toString();\n    setLockFactory(NoLockFactory.getNoLockFactory());\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    fileSystem = FileSystem.newInstance(hdfsDirPath.toUri(), configuration);\n    try {\n      if (!fileSystem.exists(hdfsDirPath)) {\n        fileSystem.mkdirs(hdfsDirPath);\n      }\n    } catch (Exception e) {\n      IOUtils.closeQuietly(fileSystem);\n      throw new RuntimeException(\"Problem creating directory: \" + hdfsDirPath,\n          e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fffc630c9c2fbc7cf37f293436ac1be34b60bd8e","date":1376485342,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,Configuration).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,Configuration).mjava","sourceNew":"  public HdfsDirectory(Path hdfsDirPath, Configuration configuration)\n      throws IOException {\n    assert hdfsDirPath.toString().startsWith(\"hdfs:/\") : hdfsDirPath.toString();\n    setLockFactory(NoLockFactory.getNoLockFactory());\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    fileSystem = FileSystem.newInstance(hdfsDirPath.toUri(), configuration);\n    try {\n      if (!fileSystem.exists(hdfsDirPath)) {\n        fileSystem.mkdirs(hdfsDirPath);\n      }\n    } catch (Exception e) {\n      org.apache.solr.util.IOUtils.closeQuietly(fileSystem);\n      throw new RuntimeException(\"Problem creating directory: \" + hdfsDirPath,\n          e);\n    }\n  }\n\n","sourceOld":"  public HdfsDirectory(Path hdfsDirPath, Configuration configuration)\n      throws IOException {\n    assert hdfsDirPath.toString().startsWith(\"hdfs:/\") : hdfsDirPath.toString();\n    setLockFactory(NoLockFactory.getNoLockFactory());\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    fileSystem = FileSystem.newInstance(hdfsDirPath.toUri(), configuration);\n    try {\n      if (!fileSystem.exists(hdfsDirPath)) {\n        fileSystem.mkdirs(hdfsDirPath);\n      }\n    } catch (Exception e) {\n      IOUtils.closeQuietly(fileSystem);\n      throw new RuntimeException(\"Problem creating directory: \" + hdfsDirPath,\n          e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["7c88c33fee958027b9192ef2c6bb54836618b165"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,Configuration).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,Configuration).mjava","sourceNew":"  public HdfsDirectory(Path hdfsDirPath, Configuration configuration)\n      throws IOException {\n    assert hdfsDirPath.toString().startsWith(\"hdfs:/\") : hdfsDirPath.toString();\n    setLockFactory(NoLockFactory.getNoLockFactory());\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    fileSystem = FileSystem.newInstance(hdfsDirPath.toUri(), configuration);\n    try {\n      if (!fileSystem.exists(hdfsDirPath)) {\n        fileSystem.mkdirs(hdfsDirPath);\n      }\n    } catch (Exception e) {\n      org.apache.solr.util.IOUtils.closeQuietly(fileSystem);\n      throw new RuntimeException(\"Problem creating directory: \" + hdfsDirPath,\n          e);\n    }\n  }\n\n","sourceOld":"  public HdfsDirectory(Path hdfsDirPath, Configuration configuration)\n      throws IOException {\n    assert hdfsDirPath.toString().startsWith(\"hdfs:/\") : hdfsDirPath.toString();\n    setLockFactory(NoLockFactory.getNoLockFactory());\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    fileSystem = FileSystem.newInstance(hdfsDirPath.toUri(), configuration);\n    try {\n      if (!fileSystem.exists(hdfsDirPath)) {\n        fileSystem.mkdirs(hdfsDirPath);\n      }\n    } catch (Exception e) {\n      IOUtils.closeQuietly(fileSystem);\n      throw new RuntimeException(\"Problem creating directory: \" + hdfsDirPath,\n          e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,Configuration).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,Configuration).mjava","sourceNew":"  public HdfsDirectory(Path hdfsDirPath, Configuration configuration)\n      throws IOException {\n    setLockFactory(NoLockFactory.getNoLockFactory());\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    fileSystem = FileSystem.newInstance(hdfsDirPath.toUri(), configuration);\n    try {\n      if (!fileSystem.exists(hdfsDirPath)) {\n        fileSystem.mkdirs(hdfsDirPath);\n      }\n    } catch (Exception e) {\n      org.apache.solr.util.IOUtils.closeQuietly(fileSystem);\n      throw new RuntimeException(\"Problem creating directory: \" + hdfsDirPath,\n          e);\n    }\n  }\n\n","sourceOld":"  public HdfsDirectory(Path hdfsDirPath, Configuration configuration)\n      throws IOException {\n    assert hdfsDirPath.toString().startsWith(\"hdfs:/\") : hdfsDirPath.toString();\n    setLockFactory(NoLockFactory.getNoLockFactory());\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    fileSystem = FileSystem.newInstance(hdfsDirPath.toUri(), configuration);\n    try {\n      if (!fileSystem.exists(hdfsDirPath)) {\n        fileSystem.mkdirs(hdfsDirPath);\n      }\n    } catch (Exception e) {\n      org.apache.solr.util.IOUtils.closeQuietly(fileSystem);\n      throw new RuntimeException(\"Problem creating directory: \" + hdfsDirPath,\n          e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,Configuration).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,Configuration).mjava","sourceNew":"  public HdfsDirectory(Path hdfsDirPath, Configuration configuration)\n      throws IOException {\n    setLockFactory(NoLockFactory.getNoLockFactory());\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    fileSystem = FileSystem.newInstance(hdfsDirPath.toUri(), configuration);\n    try {\n      if (!fileSystem.exists(hdfsDirPath)) {\n        fileSystem.mkdirs(hdfsDirPath);\n      }\n    } catch (Exception e) {\n      org.apache.solr.util.IOUtils.closeQuietly(fileSystem);\n      throw new RuntimeException(\"Problem creating directory: \" + hdfsDirPath,\n          e);\n    }\n  }\n\n","sourceOld":"  public HdfsDirectory(Path hdfsDirPath, Configuration configuration)\n      throws IOException {\n    assert hdfsDirPath.toString().startsWith(\"hdfs:/\") : hdfsDirPath.toString();\n    setLockFactory(NoLockFactory.getNoLockFactory());\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    fileSystem = FileSystem.newInstance(hdfsDirPath.toUri(), configuration);\n    try {\n      if (!fileSystem.exists(hdfsDirPath)) {\n        fileSystem.mkdirs(hdfsDirPath);\n      }\n    } catch (Exception e) {\n      org.apache.solr.util.IOUtils.closeQuietly(fileSystem);\n      throw new RuntimeException(\"Problem creating directory: \" + hdfsDirPath,\n          e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c88c33fee958027b9192ef2c6bb54836618b165","date":1390430350,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,Configuration).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,Configuration).mjava","sourceNew":"  public HdfsDirectory(Path hdfsDirPath, Configuration configuration)\n      throws IOException {\n    setLockFactory(NoLockFactory.getNoLockFactory());\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    fileSystem = FileSystem.newInstance(hdfsDirPath.toUri(), configuration);\n    \n    while (true) {\n      try {\n        if (!fileSystem.exists(hdfsDirPath)) {\n          boolean success = fileSystem.mkdirs(hdfsDirPath);\n          if (!success) {\n            throw new RuntimeException(\"Could not create directory: \" + hdfsDirPath);\n          }\n        } else {\n          fileSystem.mkdirs(hdfsDirPath); // check for safe mode\n        }\n        \n        break;\n      } catch (RemoteException e) {\n        if (e.getClassName().equals(\"org.apache.hadoop.hdfs.server.namenode.SafeModeException\")) {\n          LOG.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException e1) {\n            Thread.interrupted();\n          }\n          continue;\n        }\n        org.apache.solr.util.IOUtils.closeQuietly(fileSystem);\n        throw new RuntimeException(\n            \"Problem creating directory: \" + hdfsDirPath, e);\n      } catch (Exception e) {\n        org.apache.solr.util.IOUtils.closeQuietly(fileSystem);\n        throw new RuntimeException(\n            \"Problem creating directory: \" + hdfsDirPath, e);\n      }\n    }\n  }\n\n","sourceOld":"  public HdfsDirectory(Path hdfsDirPath, Configuration configuration)\n      throws IOException {\n    setLockFactory(NoLockFactory.getNoLockFactory());\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    fileSystem = FileSystem.newInstance(hdfsDirPath.toUri(), configuration);\n    try {\n      if (!fileSystem.exists(hdfsDirPath)) {\n        fileSystem.mkdirs(hdfsDirPath);\n      }\n    } catch (Exception e) {\n      org.apache.solr.util.IOUtils.closeQuietly(fileSystem);\n      throw new RuntimeException(\"Problem creating directory: \" + hdfsDirPath,\n          e);\n    }\n  }\n\n","bugFix":["fffc630c9c2fbc7cf37f293436ac1be34b60bd8e","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"bugIntro":["cd9650414be9b844650990af156ad2fdd813cbac","6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46e4a8bdfbafda795ef9c39a2bc2d47095770299","date":1410411846,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,Configuration).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,Configuration).mjava","sourceNew":"  public HdfsDirectory(Path hdfsDirPath, Configuration configuration)\n      throws IOException {\n    setLockFactory(NoLockFactory.getNoLockFactory());\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    fileSystem = FileSystem.newInstance(hdfsDirPath.toUri(), configuration);\n    fileContext = FileContext.getFileContext(hdfsDirPath.toUri(), configuration);\n    \n    while (true) {\n      try {\n        if (!fileSystem.exists(hdfsDirPath)) {\n          boolean success = fileSystem.mkdirs(hdfsDirPath);\n          if (!success) {\n            throw new RuntimeException(\"Could not create directory: \" + hdfsDirPath);\n          }\n        } else {\n          fileSystem.mkdirs(hdfsDirPath); // check for safe mode\n        }\n        \n        break;\n      } catch (RemoteException e) {\n        if (e.getClassName().equals(\"org.apache.hadoop.hdfs.server.namenode.SafeModeException\")) {\n          LOG.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException e1) {\n            Thread.interrupted();\n          }\n          continue;\n        }\n        org.apache.solr.util.IOUtils.closeQuietly(fileSystem);\n        throw new RuntimeException(\n            \"Problem creating directory: \" + hdfsDirPath, e);\n      } catch (Exception e) {\n        org.apache.solr.util.IOUtils.closeQuietly(fileSystem);\n        throw new RuntimeException(\n            \"Problem creating directory: \" + hdfsDirPath, e);\n      }\n    }\n  }\n\n","sourceOld":"  public HdfsDirectory(Path hdfsDirPath, Configuration configuration)\n      throws IOException {\n    setLockFactory(NoLockFactory.getNoLockFactory());\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    fileSystem = FileSystem.newInstance(hdfsDirPath.toUri(), configuration);\n    \n    while (true) {\n      try {\n        if (!fileSystem.exists(hdfsDirPath)) {\n          boolean success = fileSystem.mkdirs(hdfsDirPath);\n          if (!success) {\n            throw new RuntimeException(\"Could not create directory: \" + hdfsDirPath);\n          }\n        } else {\n          fileSystem.mkdirs(hdfsDirPath); // check for safe mode\n        }\n        \n        break;\n      } catch (RemoteException e) {\n        if (e.getClassName().equals(\"org.apache.hadoop.hdfs.server.namenode.SafeModeException\")) {\n          LOG.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException e1) {\n            Thread.interrupted();\n          }\n          continue;\n        }\n        org.apache.solr.util.IOUtils.closeQuietly(fileSystem);\n        throw new RuntimeException(\n            \"Problem creating directory: \" + hdfsDirPath, e);\n      } catch (Exception e) {\n        org.apache.solr.util.IOUtils.closeQuietly(fileSystem);\n        throw new RuntimeException(\n            \"Problem creating directory: \" + hdfsDirPath, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0a506fe165b26e024afa1aec8a4a7d758e837ff","date":1410971446,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,LockFactory,Configuration).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,Configuration).mjava","sourceNew":"  public HdfsDirectory(Path hdfsDirPath, LockFactory lockFactory, Configuration configuration)\n      throws IOException {\n    setLockFactory(lockFactory);\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    fileSystem = FileSystem.newInstance(hdfsDirPath.toUri(), configuration);\n    fileContext = FileContext.getFileContext(hdfsDirPath.toUri(), configuration);\n    \n    while (true) {\n      try {\n        if (!fileSystem.exists(hdfsDirPath)) {\n          boolean success = fileSystem.mkdirs(hdfsDirPath);\n          if (!success) {\n            throw new RuntimeException(\"Could not create directory: \" + hdfsDirPath);\n          }\n        } else {\n          fileSystem.mkdirs(hdfsDirPath); // check for safe mode\n        }\n        \n        break;\n      } catch (RemoteException e) {\n        if (e.getClassName().equals(\"org.apache.hadoop.hdfs.server.namenode.SafeModeException\")) {\n          LOG.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException e1) {\n            Thread.interrupted();\n          }\n          continue;\n        }\n        org.apache.solr.util.IOUtils.closeQuietly(fileSystem);\n        throw new RuntimeException(\n            \"Problem creating directory: \" + hdfsDirPath, e);\n      } catch (Exception e) {\n        org.apache.solr.util.IOUtils.closeQuietly(fileSystem);\n        throw new RuntimeException(\n            \"Problem creating directory: \" + hdfsDirPath, e);\n      }\n    }\n  }\n\n","sourceOld":"  public HdfsDirectory(Path hdfsDirPath, Configuration configuration)\n      throws IOException {\n    setLockFactory(NoLockFactory.getNoLockFactory());\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    fileSystem = FileSystem.newInstance(hdfsDirPath.toUri(), configuration);\n    fileContext = FileContext.getFileContext(hdfsDirPath.toUri(), configuration);\n    \n    while (true) {\n      try {\n        if (!fileSystem.exists(hdfsDirPath)) {\n          boolean success = fileSystem.mkdirs(hdfsDirPath);\n          if (!success) {\n            throw new RuntimeException(\"Could not create directory: \" + hdfsDirPath);\n          }\n        } else {\n          fileSystem.mkdirs(hdfsDirPath); // check for safe mode\n        }\n        \n        break;\n      } catch (RemoteException e) {\n        if (e.getClassName().equals(\"org.apache.hadoop.hdfs.server.namenode.SafeModeException\")) {\n          LOG.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException e1) {\n            Thread.interrupted();\n          }\n          continue;\n        }\n        org.apache.solr.util.IOUtils.closeQuietly(fileSystem);\n        throw new RuntimeException(\n            \"Problem creating directory: \" + hdfsDirPath, e);\n      } catch (Exception e) {\n        org.apache.solr.util.IOUtils.closeQuietly(fileSystem);\n        throw new RuntimeException(\n            \"Problem creating directory: \" + hdfsDirPath, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,Configuration).mjava","pathOld":"/dev/null","sourceNew":"  public HdfsDirectory(Path hdfsDirPath, Configuration configuration) throws IOException {\n    this(hdfsDirPath, HdfsLockFactory.INSTANCE, configuration);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c6fb105d0ce095d846502a1d7a2a4bbf8fdecd","date":1466528770,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,Configuration).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,Configuration).mjava","sourceNew":"  public HdfsDirectory(Path hdfsDirPath, Configuration configuration) throws IOException {\n    this(hdfsDirPath, HdfsLockFactory.INSTANCE, configuration, 4096);\n  }\n\n","sourceOld":"  public HdfsDirectory(Path hdfsDirPath, Configuration configuration) throws IOException {\n    this(hdfsDirPath, HdfsLockFactory.INSTANCE, configuration);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","date":1466705968,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,Configuration).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,Configuration).mjava","sourceNew":"  public HdfsDirectory(Path hdfsDirPath, Configuration configuration) throws IOException {\n    this(hdfsDirPath, HdfsLockFactory.INSTANCE, configuration, DEFAULT_BUFFER_SIZE);\n  }\n\n","sourceOld":"  public HdfsDirectory(Path hdfsDirPath, Configuration configuration) throws IOException {\n    this(hdfsDirPath, HdfsLockFactory.INSTANCE, configuration, 4096);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,Configuration).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,Configuration).mjava","sourceNew":"  public HdfsDirectory(Path hdfsDirPath, Configuration configuration) throws IOException {\n    this(hdfsDirPath, HdfsLockFactory.INSTANCE, configuration, DEFAULT_BUFFER_SIZE);\n  }\n\n","sourceOld":"  public HdfsDirectory(Path hdfsDirPath, Configuration configuration) throws IOException {\n    this(hdfsDirPath, HdfsLockFactory.INSTANCE, configuration);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0a506fe165b26e024afa1aec8a4a7d758e837ff":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"7c88c33fee958027b9192ef2c6bb54836618b165":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["37a0f60745e53927c4c876cfe5b5a58170f0646c","fffc630c9c2fbc7cf37f293436ac1be34b60bd8e"],"285cdc737de75b7cc7c284a156b20214deb67bca":["a0a506fe165b26e024afa1aec8a4a7d758e837ff"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["fffc630c9c2fbc7cf37f293436ac1be34b60bd8e"],"61c6fb105d0ce095d846502a1d7a2a4bbf8fdecd":["285cdc737de75b7cc7c284a156b20214deb67bca"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["285cdc737de75b7cc7c284a156b20214deb67bca","a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["7c88c33fee958027b9192ef2c6bb54836618b165"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["61c6fb105d0ce095d846502a1d7a2a4bbf8fdecd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fffc630c9c2fbc7cf37f293436ac1be34b60bd8e":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["fffc630c9c2fbc7cf37f293436ac1be34b60bd8e","d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"]},"commit2Childs":{"a0a506fe165b26e024afa1aec8a4a7d758e837ff":["285cdc737de75b7cc7c284a156b20214deb67bca"],"7c88c33fee958027b9192ef2c6bb54836618b165":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["7c88c33fee958027b9192ef2c6bb54836618b165","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"285cdc737de75b7cc7c284a156b20214deb67bca":["61c6fb105d0ce095d846502a1d7a2a4bbf8fdecd","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"61c6fb105d0ce095d846502a1d7a2a4bbf8fdecd":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","fffc630c9c2fbc7cf37f293436ac1be34b60bd8e"],"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["a0a506fe165b26e024afa1aec8a4a7d758e837ff"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"fffc630c9c2fbc7cf37f293436ac1be34b60bd8e":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","d6e604e9030fb0cabf0c5a85ae6039921a81419c","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}