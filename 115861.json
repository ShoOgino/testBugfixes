{"path":"lucene/core/src/java/org/apache/lucene/util/StringHelper#contains(BytesRef,BytesRef,boolean).mjava","commits":[{"id":"52c5280f6286c7546ab75b72c663f7bb1dc10e96","date":1427372570,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/StringHelper#contains(BytesRef,BytesRef,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns <code>true</code> iff the ref contains the given slice. Otherwise\n   * <code>false</code>.\n   * \n   * @param ref\n   *          the {@link BytesRef} to test\n   * @param slice\n   *          the slice to look for\n   * @param ignoreCase\n   *          whether the comparison should be case-insensitive\n   * @return Returns <code>true</code> iff the ref contains the given slice.\n   *         Otherwise <code>false</code>.\n   */\n  public static boolean contains(BytesRef ref, BytesRef slice, boolean ignoreCase) {\n    if (ignoreCase) {\n      String s1 = ref.utf8ToString();\n      String s2 = slice.utf8ToString();\n      return s1.toLowerCase(Locale.ENGLISH).contains(s2.toLowerCase(Locale.ENGLISH));\n    } else {\n      for (int pos = 0; pos <= ref.length - slice.length; ++pos) {\n        if (sliceEquals(ref, slice, pos)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/StringHelper#contains(BytesRef,BytesRef,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns <code>true</code> iff the ref contains the given slice. Otherwise\n   * <code>false</code>.\n   * \n   * @param ref\n   *          the {@link BytesRef} to test\n   * @param slice\n   *          the slice to look for\n   * @param ignoreCase\n   *          whether the comparison should be case-insensitive\n   * @return Returns <code>true</code> iff the ref contains the given slice.\n   *         Otherwise <code>false</code>.\n   */\n  public static boolean contains(BytesRef ref, BytesRef slice, boolean ignoreCase) {\n    if (ignoreCase) {\n      String s1 = ref.utf8ToString();\n      String s2 = slice.utf8ToString();\n      return s1.toLowerCase(Locale.ENGLISH).contains(s2.toLowerCase(Locale.ENGLISH));\n    } else {\n      for (int pos = 0; pos <= ref.length - slice.length; ++pos) {\n        if (sliceEquals(ref, slice, pos)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5963c53b53608d00d165849e6b52e71b0209c9b6","date":1428506893,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/StringHelper#contains(BytesRef,BytesRef,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns <code>true</code> iff the ref contains the given slice. Otherwise\n   * <code>false</code>.\n   * \n   * @param ref\n   *          the {@link BytesRef} to test\n   * @param slice\n   *          the slice to look for\n   * @param ignoreCase\n   *          whether the comparison should be case-insensitive\n   * @return Returns <code>true</code> iff the ref contains the given slice.\n   *         Otherwise <code>false</code>.\n   */\n  public static boolean contains(BytesRef ref, BytesRef slice, boolean ignoreCase) {\n    if (ignoreCase) {\n      String s1 = ref.utf8ToString();\n      String s2 = slice.utf8ToString();\n      return s1.toLowerCase(Locale.ENGLISH).contains(s2.toLowerCase(Locale.ENGLISH));\n    } else {\n      for (int pos = 0; pos <= ref.length - slice.length; ++pos) {\n        if (sliceEquals(ref, slice, pos)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","52c5280f6286c7546ab75b72c663f7bb1dc10e96"],"5963c53b53608d00d165849e6b52e71b0209c9b6":["52c5280f6286c7546ab75b72c663f7bb1dc10e96"],"52c5280f6286c7546ab75b72c663f7bb1dc10e96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5963c53b53608d00d165849e6b52e71b0209c9b6"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"5963c53b53608d00d165849e6b52e71b0209c9b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"52c5280f6286c7546ab75b72c663f7bb1dc10e96":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5963c53b53608d00d165849e6b52e71b0209c9b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","52c5280f6286c7546ab75b72c663f7bb1dc10e96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}