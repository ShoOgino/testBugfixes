{"path":"solr/core/src/java/org/apache/solr/search/SolrCache#init(Map,Object,CacheRegenerator).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrCache#init(Map,Object,CacheRegenerator).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrCache#init(Map,Object,CacheRegenerator).mjava","sourceNew":"  /**\n   * The initialization routine.  Instance specific arguments are passed in\n   * the <code>args</code> map.\n   * <p>\n   * The persistence object will exist across different lifetimes of similar caches.\n   * For example, all filter caches will share the same persistence object, sometimes\n   * at the same time (it must be threadsafe).  If null is passed, then the cache\n   * implementation should create and return a new persistence object.  If not null,\n   * the passed in object should be returned again.\n   * <p>\n   * Since it will exist across the lifetime of many caches, care should be taken to\n   * not reference any particular cache instance and prevent it from being\n   * garbage collected (no using inner classes unless they are static).\n   * <p>\n   * The persistence object is designed to be used as a way for statistics\n   * to accumulate across all instances of the same type of cache, however the\n   * object may be of any type desired by the cache implementation.\n   * <p>\n   * The {@link CacheRegenerator} is what the cache uses during auto-warming to\n   * renenerate an item in the new cache from an entry in the old cache.\n   *\n   */\n  public Object init(Map args, Object persistence, CacheRegenerator regenerator);\n  // I don't think we need a factory for faster creation given that these\n  // will be associated with slow-to-create SolrIndexSearchers.\n  // change to NamedList when other plugins do?\n\n","sourceOld":"  /**\n   * The initialization routine.  Instance specific arguments are passed in\n   * the <code>args</code> map.\n   * <p>\n   * The persistence object will exist across different lifetimes of similar caches.\n   * For example, all filter caches will share the same persistence object, sometimes\n   * at the same time (it must be threadsafe).  If null is passed, then the cache\n   * implementation should create and return a new persistence object.  If not null,\n   * the passed in object should be returned again.\n   * <p>\n   * Since it will exist across the lifetime of many caches, care should be taken to\n   * not reference any particular cache instance and prevent it from being\n   * garbage collected (no using inner classes unless they are static).\n   * <p>\n   * The persistence object is designed to be used as a way for statistics\n   * to accumulate across all instances of the same type of cache, however the\n   * object may be of any type desired by the cache implementation.\n   * <p>\n   * The {@link CacheRegenerator} is what the cache uses during auto-warming to\n   * renenerate an item in the new cache from an entry in the old cache.\n   *\n   */\n  public Object init(Map args, Object persistence, CacheRegenerator regenerator);\n  // I don't think we need a factory for faster creation given that these\n  // will be associated with slow-to-create SolrIndexSearchers.\n  // change to NamedList when other plugins do?\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrCache#init(Map,Object,CacheRegenerator).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrCache#init(Map,Object,CacheRegenerator).mjava","sourceNew":"  /**\n   * The initialization routine.  Instance specific arguments are passed in\n   * the <code>args</code> map.\n   * <p>\n   * The persistence object will exist across different lifetimes of similar caches.\n   * For example, all filter caches will share the same persistence object, sometimes\n   * at the same time (it must be threadsafe).  If null is passed, then the cache\n   * implementation should create and return a new persistence object.  If not null,\n   * the passed in object should be returned again.\n   * <p>\n   * Since it will exist across the lifetime of many caches, care should be taken to\n   * not reference any particular cache instance and prevent it from being\n   * garbage collected (no using inner classes unless they are static).\n   * <p>\n   * The persistence object is designed to be used as a way for statistics\n   * to accumulate across all instances of the same type of cache, however the\n   * object may be of any type desired by the cache implementation.\n   * <p>\n   * The {@link CacheRegenerator} is what the cache uses during auto-warming to\n   * renenerate an item in the new cache from an entry in the old cache.\n   *\n   */\n  public Object init(Map args, Object persistence, CacheRegenerator regenerator);\n  // I don't think we need a factory for faster creation given that these\n  // will be associated with slow-to-create SolrIndexSearchers.\n  // change to NamedList when other plugins do?\n\n","sourceOld":"  /**\n   * The initialization routine.  Instance specific arguments are passed in\n   * the <code>args</code> map.\n   * <p>\n   * The persistence object will exist across different lifetimes of similar caches.\n   * For example, all filter caches will share the same persistence object, sometimes\n   * at the same time (it must be threadsafe).  If null is passed, then the cache\n   * implementation should create and return a new persistence object.  If not null,\n   * the passed in object should be returned again.\n   * <p>\n   * Since it will exist across the lifetime of many caches, care should be taken to\n   * not reference any particular cache instance and prevent it from being\n   * garbage collected (no using inner classes unless they are static).\n   * <p>\n   * The persistence object is designed to be used as a way for statistics\n   * to accumulate across all instances of the same type of cache, however the\n   * object may be of any type desired by the cache implementation.\n   * <p>\n   * The {@link CacheRegenerator} is what the cache uses during auto-warming to\n   * renenerate an item in the new cache from an entry in the old cache.\n   *\n   */\n  public Object init(Map args, Object persistence, CacheRegenerator regenerator);\n  // I don't think we need a factory for faster creation given that these\n  // will be associated with slow-to-create SolrIndexSearchers.\n  // change to NamedList when other plugins do?\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrCache#init(Map,Object,CacheRegenerator).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrCache#init(Map,Object,CacheRegenerator).mjava","sourceNew":"  /**\n   * The initialization routine.  Instance specific arguments are passed in\n   * the <code>args</code> map.\n   * <p>\n   * The persistence object will exist across different lifetimes of similar caches.\n   * For example, all filter caches will share the same persistence object, sometimes\n   * at the same time (it must be threadsafe).  If null is passed, then the cache\n   * implementation should create and return a new persistence object.  If not null,\n   * the passed in object should be returned again.\n   * <p>\n   * Since it will exist across the lifetime of many caches, care should be taken to\n   * not reference any particular cache instance and prevent it from being\n   * garbage collected (no using inner classes unless they are static).\n   * <p>\n   * The persistence object is designed to be used as a way for statistics\n   * to accumulate across all instances of the same type of cache, however the\n   * object may be of any type desired by the cache implementation.\n   * <p>\n   * The {@link CacheRegenerator} is what the cache uses during auto-warming to\n   * renenerate an item in the new cache from an entry in the old cache.\n   *\n   */\n  public Object init(Map args, Object persistence, CacheRegenerator regenerator);\n  // I don't think we need a factory for faster creation given that these\n  // will be associated with slow-to-create SolrIndexSearchers.\n  // change to NamedList when other plugins do?\n\n","sourceOld":"  /**\n   * The initialization routine.  Instance specific arguments are passed in\n   * the <code>args</code> map.\n   * <p>\n   * The persistence object will exist across different lifetimes of similar caches.\n   * For example, all filter caches will share the same persistence object, sometimes\n   * at the same time (it must be threadsafe).  If null is passed, then the cache\n   * implementation should create and return a new persistence object.  If not null,\n   * the passed in object should be returned again.\n   * <p>\n   * Since it will exist across the lifetime of many caches, care should be taken to\n   * not reference any particular cache instance and prevent it from being\n   * garbage collected (no using inner classes unless they are static).\n   * <p>\n   * The persistence object is designed to be used as a way for statistics\n   * to accumulate across all instances of the same type of cache, however the\n   * object may be of any type desired by the cache implementation.\n   * <p>\n   * The {@link CacheRegenerator} is what the cache uses during auto-warming to\n   * renenerate an item in the new cache from an entry in the old cache.\n   *\n   */\n  public Object init(Map args, Object persistence, CacheRegenerator regenerator);\n  // I don't think we need a factory for faster creation given that these\n  // will be associated with slow-to-create SolrIndexSearchers.\n  // change to NamedList when other plugins do?\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac9de183adbc9483681f275ac1e2d92ed19f52e1","date":1452414626,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrCache#init(Map,Object,CacheRegenerator).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrCache#init(Map,Object,CacheRegenerator).mjava","sourceNew":"  /**\n   * The initialization routine. Instance specific arguments are passed in\n   * the <code>args</code> map.\n   * <p>\n   * The persistence object will exist across different lifetimes of similar caches.\n   * For example, all filter caches will share the same persistence object, sometimes\n   * at the same time (it must be thread-safe).  If null is passed, then the cache\n   * implementation should create and return a new persistence object.  If not null,\n   * the passed in object should be returned again.\n   * <p>\n   * Since it will exist across the lifetime of many caches, care should be taken to\n   * not reference any particular cache instance and prevent it from being\n   * garbage collected (no using inner classes unless they are static).\n   * <p>\n   * The persistence object is designed to be used as a way for statistics\n   * to accumulate across all instances of the same type of cache, however the\n   * object may be of any type desired by the cache implementation.\n   * <p>\n   * The {@link CacheRegenerator} is what the cache uses during auto-warming to\n   * regenerate an item in the new cache from an entry in the old cache.\n   *\n   */\n  public Object init(Map args, Object persistence, CacheRegenerator regenerator);\n  // I don't think we need a factory for faster creation given that these\n  // will be associated with slow-to-create SolrIndexSearchers.\n  // change to NamedList when other plugins do?\n\n","sourceOld":"  /**\n   * The initialization routine.  Instance specific arguments are passed in\n   * the <code>args</code> map.\n   * <p>\n   * The persistence object will exist across different lifetimes of similar caches.\n   * For example, all filter caches will share the same persistence object, sometimes\n   * at the same time (it must be threadsafe).  If null is passed, then the cache\n   * implementation should create and return a new persistence object.  If not null,\n   * the passed in object should be returned again.\n   * <p>\n   * Since it will exist across the lifetime of many caches, care should be taken to\n   * not reference any particular cache instance and prevent it from being\n   * garbage collected (no using inner classes unless they are static).\n   * <p>\n   * The persistence object is designed to be used as a way for statistics\n   * to accumulate across all instances of the same type of cache, however the\n   * object may be of any type desired by the cache implementation.\n   * <p>\n   * The {@link CacheRegenerator} is what the cache uses during auto-warming to\n   * renenerate an item in the new cache from an entry in the old cache.\n   *\n   */\n  public Object init(Map args, Object persistence, CacheRegenerator regenerator);\n  // I don't think we need a factory for faster creation given that these\n  // will be associated with slow-to-create SolrIndexSearchers.\n  // change to NamedList when other plugins do?\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c","date":1566455239,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrCache#init(Map,Object,CacheRegenerator).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrCache#init(Map,Object,CacheRegenerator).mjava","sourceNew":"  /**\n   * The initialization routine. Instance specific arguments are passed in\n   * the <code>args</code> map.\n   * <p>\n   * The persistence object will exist across different lifetimes of similar caches.\n   * For example, all filter caches will share the same persistence object, sometimes\n   * at the same time (it must be thread-safe).  If null is passed, then the cache\n   * implementation should create and return a new persistence object.  If not null,\n   * the passed in object should be returned again.\n   * <p>\n   * Since it will exist across the lifetime of many caches, care should be taken to\n   * not reference any particular cache instance and prevent it from being\n   * garbage collected (no using inner classes unless they are static).\n   * <p>\n   * The persistence object is designed to be used as a way for statistics\n   * to accumulate across all instances of the same type of cache, however the\n   * object may be of any type desired by the cache implementation.\n   * <p>\n   * The {@link CacheRegenerator} is what the cache uses during auto-warming to\n   * regenerate an item in the new cache from an entry in the old cache.\n   *\n   */\n  Object init(Map args, Object persistence, CacheRegenerator regenerator);\n  // I don't think we need a factory for faster creation given that these\n  // will be associated with slow-to-create SolrIndexSearchers.\n  // change to NamedList when other plugins do?\n\n","sourceOld":"  /**\n   * The initialization routine. Instance specific arguments are passed in\n   * the <code>args</code> map.\n   * <p>\n   * The persistence object will exist across different lifetimes of similar caches.\n   * For example, all filter caches will share the same persistence object, sometimes\n   * at the same time (it must be thread-safe).  If null is passed, then the cache\n   * implementation should create and return a new persistence object.  If not null,\n   * the passed in object should be returned again.\n   * <p>\n   * Since it will exist across the lifetime of many caches, care should be taken to\n   * not reference any particular cache instance and prevent it from being\n   * garbage collected (no using inner classes unless they are static).\n   * <p>\n   * The persistence object is designed to be used as a way for statistics\n   * to accumulate across all instances of the same type of cache, however the\n   * object may be of any type desired by the cache implementation.\n   * <p>\n   * The {@link CacheRegenerator} is what the cache uses during auto-warming to\n   * regenerate an item in the new cache from an entry in the old cache.\n   *\n   */\n  public Object init(Map args, Object persistence, CacheRegenerator regenerator);\n  // I don't think we need a factory for faster creation given that these\n  // will be associated with slow-to-create SolrIndexSearchers.\n  // change to NamedList when other plugins do?\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrCache#init(Map,Object,CacheRegenerator).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrCache#init(Map,Object,CacheRegenerator).mjava","sourceNew":"  /**\n   * The initialization routine. Instance specific arguments are passed in\n   * the <code>args</code> map.\n   * <p>\n   * The persistence object will exist across different lifetimes of similar caches.\n   * For example, all filter caches will share the same persistence object, sometimes\n   * at the same time (it must be thread-safe).  If null is passed, then the cache\n   * implementation should create and return a new persistence object.  If not null,\n   * the passed in object should be returned again.\n   * <p>\n   * Since it will exist across the lifetime of many caches, care should be taken to\n   * not reference any particular cache instance and prevent it from being\n   * garbage collected (no using inner classes unless they are static).\n   * <p>\n   * The persistence object is designed to be used as a way for statistics\n   * to accumulate across all instances of the same type of cache, however the\n   * object may be of any type desired by the cache implementation.\n   * <p>\n   * The {@link CacheRegenerator} is what the cache uses during auto-warming to\n   * regenerate an item in the new cache from an entry in the old cache.\n   *\n   */\n  public Object init(Map args, Object persistence, CacheRegenerator regenerator);\n  // I don't think we need a factory for faster creation given that these\n  // will be associated with slow-to-create SolrIndexSearchers.\n  // change to NamedList when other plugins do?\n\n","sourceOld":"  /**\n   * The initialization routine. Instance specific arguments are passed in\n   * the <code>args</code> map.\n   * <p>\n   * The persistence object will exist across different lifetimes of similar caches.\n   * For example, all filter caches will share the same persistence object, sometimes\n   * at the same time (it must be thread-safe).  If null is passed, then the cache\n   * implementation should create and return a new persistence object.  If not null,\n   * the passed in object should be returned again.\n   * <p>\n   * Since it will exist across the lifetime of many caches, care should be taken to\n   * not reference any particular cache instance and prevent it from being\n   * garbage collected (no using inner classes unless they are static).\n   * <p>\n   * The persistence object is designed to be used as a way for statistics\n   * to accumulate across all instances of the same type of cache, however the\n   * object may be of any type desired by the cache implementation.\n   * <p>\n   * The {@link CacheRegenerator} is what the cache uses during auto-warming to\n   * regenerate an item in the new cache from an entry in the old cache.\n   *\n   */\n  Object init(Map args, Object persistence, CacheRegenerator regenerator);\n  // I don't think we need a factory for faster creation given that these\n  // will be associated with slow-to-create SolrIndexSearchers.\n  // change to NamedList when other plugins do?\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrCache#init(Map,Object,CacheRegenerator).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrCache#init(Map,Object,CacheRegenerator).mjava","sourceNew":"  /**\n   * The initialization routine. Instance specific arguments are passed in\n   * the <code>args</code> map.\n   * <p>\n   * The persistence object will exist across different lifetimes of similar caches.\n   * For example, all filter caches will share the same persistence object, sometimes\n   * at the same time (it must be thread-safe).  If null is passed, then the cache\n   * implementation should create and return a new persistence object.  If not null,\n   * the passed in object should be returned again.\n   * <p>\n   * Since it will exist across the lifetime of many caches, care should be taken to\n   * not reference any particular cache instance and prevent it from being\n   * garbage collected (no using inner classes unless they are static).\n   * <p>\n   * The persistence object is designed to be used as a way for statistics\n   * to accumulate across all instances of the same type of cache, however the\n   * object may be of any type desired by the cache implementation.\n   * <p>\n   * The {@link CacheRegenerator} is what the cache uses during auto-warming to\n   * regenerate an item in the new cache from an entry in the old cache.\n   *\n   */\n  public Object init(Map args, Object persistence, CacheRegenerator regenerator);\n  // I don't think we need a factory for faster creation given that these\n  // will be associated with slow-to-create SolrIndexSearchers.\n  // change to NamedList when other plugins do?\n\n","sourceOld":"  /**\n   * The initialization routine. Instance specific arguments are passed in\n   * the <code>args</code> map.\n   * <p>\n   * The persistence object will exist across different lifetimes of similar caches.\n   * For example, all filter caches will share the same persistence object, sometimes\n   * at the same time (it must be thread-safe).  If null is passed, then the cache\n   * implementation should create and return a new persistence object.  If not null,\n   * the passed in object should be returned again.\n   * <p>\n   * Since it will exist across the lifetime of many caches, care should be taken to\n   * not reference any particular cache instance and prevent it from being\n   * garbage collected (no using inner classes unless they are static).\n   * <p>\n   * The persistence object is designed to be used as a way for statistics\n   * to accumulate across all instances of the same type of cache, however the\n   * object may be of any type desired by the cache implementation.\n   * <p>\n   * The {@link CacheRegenerator} is what the cache uses during auto-warming to\n   * regenerate an item in the new cache from an entry in the old cache.\n   *\n   */\n  Object init(Map args, Object persistence, CacheRegenerator regenerator);\n  // I don't think we need a factory for faster creation given that these\n  // will be associated with slow-to-create SolrIndexSearchers.\n  // change to NamedList when other plugins do?\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50dfd19525c8d73e856dca6edb64b7aea074037f","date":1591579225,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrCache#init(Map,Object,CacheRegenerator).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrCache#init(Map,Object,CacheRegenerator).mjava","sourceNew":"  /**\n   * The initialization routine. Instance specific arguments are passed in\n   * the <code>args</code> map.\n   * <p>\n   * The persistence object will exist across different lifetimes of similar caches.\n   * For example, all filter caches will share the same persistence object, sometimes\n   * at the same time (it must be thread-safe).  If null is passed, then the cache\n   * implementation should create and return a new persistence object.  If not null,\n   * the passed in object should be returned again.\n   * <p>\n   * Since it will exist across the lifetime of many caches, care should be taken to\n   * not reference any particular cache instance and prevent it from being\n   * garbage collected (no using inner classes unless they are static).\n   * <p>\n   * The persistence object is designed to be used as a way for statistics\n   * to accumulate across all instances of the same type of cache, however the\n   * object may be of any type desired by the cache implementation.\n   * <p>\n   * The {@link CacheRegenerator} is what the cache uses during auto-warming to\n   * regenerate an item in the new cache from an entry in the old cache.\n   *\n   */\n  public Object init(@SuppressWarnings({\"rawtypes\"})Map args, Object persistence, CacheRegenerator regenerator);\n  // I don't think we need a factory for faster creation given that these\n  // will be associated with slow-to-create SolrIndexSearchers.\n  // change to NamedList when other plugins do?\n\n","sourceOld":"  /**\n   * The initialization routine. Instance specific arguments are passed in\n   * the <code>args</code> map.\n   * <p>\n   * The persistence object will exist across different lifetimes of similar caches.\n   * For example, all filter caches will share the same persistence object, sometimes\n   * at the same time (it must be thread-safe).  If null is passed, then the cache\n   * implementation should create and return a new persistence object.  If not null,\n   * the passed in object should be returned again.\n   * <p>\n   * Since it will exist across the lifetime of many caches, care should be taken to\n   * not reference any particular cache instance and prevent it from being\n   * garbage collected (no using inner classes unless they are static).\n   * <p>\n   * The persistence object is designed to be used as a way for statistics\n   * to accumulate across all instances of the same type of cache, however the\n   * object may be of any type desired by the cache implementation.\n   * <p>\n   * The {@link CacheRegenerator} is what the cache uses during auto-warming to\n   * regenerate an item in the new cache from an entry in the old cache.\n   *\n   */\n  public Object init(Map args, Object persistence, CacheRegenerator regenerator);\n  // I don't think we need a factory for faster creation given that these\n  // will be associated with slow-to-create SolrIndexSearchers.\n  // change to NamedList when other plugins do?\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"50dfd19525c8d73e856dca6edb64b7aea074037f":["c44cc06c26e456fe9c215072b79fce30babe3975"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c44cc06c26e456fe9c215072b79fce30babe3975":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"b0b597c65628ca9e73913a07e81691f8229bae35":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"50dfd19525c8d73e856dca6edb64b7aea074037f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"c26f00b574427b55127e869b935845554afde1fa":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"c44cc06c26e456fe9c215072b79fce30babe3975":["50dfd19525c8d73e856dca6edb64b7aea074037f","b0b597c65628ca9e73913a07e81691f8229bae35"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}