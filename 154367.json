{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyRangeFacetCloudTest#hardendRangeTest().mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyRangeFacetCloudTest#hardendRangeTest().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void hardendRangeTest() throws Exception {\n    String[] params = new String[] {\n        \"o.hi.s.sum\", \"sum(int_id)\",\n        \"o.hi.s.mean\", \"mean(int_id)\",\n        \"o.hi.s.median\", \"median(int_id)\",\n        \"o.hi.s.count\", \"count(int_id)\",\n        \"o.hi.rf\", \"long_ld\",\n        \"o.hi.rf.long_ld.st\", \"5\",\n        \"o.hi.rf.long_ld.e\", \"30\",\n        \"o.hi.rf.long_ld.g\", \"5\",\n        \"o.hi.rf.long_ld.he\", \"true\",\n        \"o.hi.rf.long_ld.ib\", \"lower\",\n        \"o.hi.rf.long_ld.or\", \"all\",\n        \"o.hi.rf\", \"double_dd\",\n        \"o.hi.rf.double_dd.st\", \"3\",\n        \"o.hi.rf.double_dd.e\", \"39\",\n        \"o.hi.rf.double_dd.g\", \"7\",\n        \"o.hi.rf.double_dd.he\", \"true\",\n        \"o.hi.rf.double_dd.ib\", \"upper\",\n        \"o.hi.rf.double_dd.ib\", \"outer\",\n        \"o.hi.rf.double_dd.or\", \"all\",\n        \"o.hi.rf\", \"date_dtd\",\n        \"o.hi.rf.date_dtd.st\", \"1007-01-01T23:59:59Z\",\n        \"o.hi.rf.date_dtd.e\", \"1044-01-01T23:59:59Z\",\n        \"o.hi.rf.date_dtd.g\", \"+7YEARS\",\n        \"o.hi.rf.date_dtd.he\", \"true\",\n        \"o.hi.rf.date_dtd.ib\", \"lower\",\n        \"o.hi.rf.date_dtd.ib\", \"edge\",\n        \"o.hi.rf.date_dtd.ib\", \"outer\",\n        \"o.hi.rf.date_dtd.or\", \"all\",\n\n        \"o.hf.s.sum\", \"sum(float_fd)\",\n        \"o.hf.s.mean\", \"mean(float_fd)\",\n        \"o.hf.s.median\", \"median(float_fd)\",\n        \"o.hf.s.count\", \"count(float_fd)\",\n        \"o.hf.rf\", \"long_ld\",\n        \"o.hf.rf.long_ld.st\", \"0\",\n        \"o.hf.rf.long_ld.e\", \"29\",\n        \"o.hf.rf.long_ld.g\", \"4\",\n        \"o.hf.rf.long_ld.he\", \"true\",\n        \"o.hf.rf.long_ld.ib\", \"all\",\n        \"o.hf.rf.long_ld.or\", \"all\",\n        \"o.hf.rf\", \"double_dd\",\n        \"o.hf.rf.double_dd.st\", \"4\",\n        \"o.hf.rf.double_dd.e\", \"47\",\n        \"o.hf.rf.double_dd.g\", \"11\",\n        \"o.hf.rf.double_dd.he\", \"true\",\n        \"o.hf.rf.double_dd.ib\", \"edge\",\n        \"o.hf.rf.double_dd.or\", \"all\",\n        \"o.hf.rf\", \"date_dtd\",\n        \"o.hf.rf.date_dtd.st\", \"1004-01-01T23:59:59Z\",\n        \"o.hf.rf.date_dtd.e\", \"1046-01-01T23:59:59Z\",\n        \"o.hf.rf.date_dtd.g\", \"+5YEARS\",\n        \"o.hf.rf.date_dtd.he\", \"true\",\n        \"o.hf.rf.date_dtd.ib\", \"upper\",\n        \"o.hf.rf.date_dtd.ib\", \"edge\",\n        \"o.hf.rf.date_dtd.or\", \"all\"\n    };\n    NamedList<Object> response = queryLegacyCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //Int Long\n    ArrayList<Double> intLong = getValueList(response, \"hi\", \"rangeFacets\", \"long_ld\", \"sum\", false);\n    ArrayList<Double> intLongTest = calculateFacetedNumberStat(transformLists(intLongTestStart, 5, 30, 5\n                                                        , true, true, false, false, false), \"sum\");\n    assertEquals(responseStr, intLong,intLongTest);\n    //Int Double\n    ArrayList<Double> intDouble = getValueList(response, \"hi\", \"rangeFacets\", \"double_dd\", \"mean\", false);\n    ArrayList<Double> intDoubleTest = calculateFacetedNumberStat(transformLists(intDoubleTestStart, 3, 39, 7\n                                                          , true, false, true, false, true), \"mean\");\n    assertEquals(responseStr, intDouble,intDoubleTest);\n    //Int Date\n    ArrayList<Long> intDate = getValueList(response, \"hi\", \"rangeFacets\", \"date_dtd\", \"count\", false);\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateFacetedStat(transformLists(intDateTestStart, 7, 44, 7\n                                                      , true, true, false, true, true), \"count\");\n    assertEquals(responseStr, intDate,intDateTest);\n    \n    //Float Long\n    ArrayList<Double> floatLong = getValueList(response, \"hf\", \"rangeFacets\", \"long_ld\", \"median\", false);\n    ArrayList<Double> floatLongTest = calculateFacetedNumberStat(transformLists(floatLongTestStart, 0, 29, 4\n                                                          , true, true, true, true, true), \"median\");\n    assertEquals(responseStr, floatLong,floatLongTest);\n    //Float Double\n    ArrayList<Long> floatDouble = getValueList(response, \"hf\", \"rangeFacets\", \"double_dd\", \"count\", false);\n    ArrayList<Long> floatDoubleTest = (ArrayList<Long>)calculateFacetedStat(transformLists(floatDoubleTestStart, 4, 47, 11\n                                                                     , true, false, false, true, false), \"count\");\n    assertEquals(responseStr, floatDouble,floatDoubleTest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyRangeFacetCloudTest#hardendRangeTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyRangeFacetCloudTest#hardendRangeTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void hardendRangeTest() throws Exception {\n    String[] params = new String[] {\n        \"o.hi.s.sum\", \"sum(int_id)\",\n        \"o.hi.s.mean\", \"mean(int_id)\",\n        \"o.hi.s.median\", \"median(int_id)\",\n        \"o.hi.s.count\", \"count(int_id)\",\n        \"o.hi.rf\", \"long_ld\",\n        \"o.hi.rf.long_ld.st\", \"5\",\n        \"o.hi.rf.long_ld.e\", \"30\",\n        \"o.hi.rf.long_ld.g\", \"5\",\n        \"o.hi.rf.long_ld.he\", \"true\",\n        \"o.hi.rf.long_ld.ib\", \"lower\",\n        \"o.hi.rf.long_ld.or\", \"all\",\n        \"o.hi.rf\", \"double_dd\",\n        \"o.hi.rf.double_dd.st\", \"3\",\n        \"o.hi.rf.double_dd.e\", \"39\",\n        \"o.hi.rf.double_dd.g\", \"7\",\n        \"o.hi.rf.double_dd.he\", \"true\",\n        \"o.hi.rf.double_dd.ib\", \"upper\",\n        \"o.hi.rf.double_dd.ib\", \"outer\",\n        \"o.hi.rf.double_dd.or\", \"all\",\n        \"o.hi.rf\", \"date_dtd\",\n        \"o.hi.rf.date_dtd.st\", \"1007-01-01T23:59:59Z\",\n        \"o.hi.rf.date_dtd.e\", \"1044-01-01T23:59:59Z\",\n        \"o.hi.rf.date_dtd.g\", \"+7YEARS\",\n        \"o.hi.rf.date_dtd.he\", \"true\",\n        \"o.hi.rf.date_dtd.ib\", \"lower\",\n        \"o.hi.rf.date_dtd.ib\", \"edge\",\n        \"o.hi.rf.date_dtd.ib\", \"outer\",\n        \"o.hi.rf.date_dtd.or\", \"all\",\n\n        \"o.hf.s.sum\", \"sum(float_fd)\",\n        \"o.hf.s.mean\", \"mean(float_fd)\",\n        \"o.hf.s.median\", \"median(float_fd)\",\n        \"o.hf.s.count\", \"count(float_fd)\",\n        \"o.hf.rf\", \"long_ld\",\n        \"o.hf.rf.long_ld.st\", \"0\",\n        \"o.hf.rf.long_ld.e\", \"29\",\n        \"o.hf.rf.long_ld.g\", \"4\",\n        \"o.hf.rf.long_ld.he\", \"true\",\n        \"o.hf.rf.long_ld.ib\", \"all\",\n        \"o.hf.rf.long_ld.or\", \"all\",\n        \"o.hf.rf\", \"double_dd\",\n        \"o.hf.rf.double_dd.st\", \"4\",\n        \"o.hf.rf.double_dd.e\", \"47\",\n        \"o.hf.rf.double_dd.g\", \"11\",\n        \"o.hf.rf.double_dd.he\", \"true\",\n        \"o.hf.rf.double_dd.ib\", \"edge\",\n        \"o.hf.rf.double_dd.or\", \"all\",\n        \"o.hf.rf\", \"date_dtd\",\n        \"o.hf.rf.date_dtd.st\", \"1004-01-01T23:59:59Z\",\n        \"o.hf.rf.date_dtd.e\", \"1046-01-01T23:59:59Z\",\n        \"o.hf.rf.date_dtd.g\", \"+5YEARS\",\n        \"o.hf.rf.date_dtd.he\", \"true\",\n        \"o.hf.rf.date_dtd.ib\", \"upper\",\n        \"o.hf.rf.date_dtd.ib\", \"edge\",\n        \"o.hf.rf.date_dtd.or\", \"all\"\n    };\n    NamedList<Object> response = queryLegacyCloudAnalytics(params);\n    String responseStr = response.toString();\n\n    //Int Long\n    ArrayList<Double> intLong = getValueList(response, \"hi\", \"rangeFacets\", \"long_ld\", \"sum\", false);\n    ArrayList<Double> intLongTest = calculateFacetedNumberStat(transformLists(intLongTestStart, 5, 30, 5\n                                                        , true, true, false, false, false), \"sum\");\n    assertEquals(responseStr, intLong,intLongTest);\n    //Int Double\n    ArrayList<Double> intDouble = getValueList(response, \"hi\", \"rangeFacets\", \"double_dd\", \"mean\", false);\n    ArrayList<Double> intDoubleTest = calculateFacetedNumberStat(transformLists(intDoubleTestStart, 3, 39, 7\n                                                          , true, false, true, false, true), \"mean\");\n    assertEquals(responseStr, intDouble,intDoubleTest);\n    //Int Date\n    ArrayList<Long> intDate = getValueList(response, \"hi\", \"rangeFacets\", \"date_dtd\", \"count\", false);\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateFacetedStat(transformLists(intDateTestStart, 7, 44, 7\n                                                      , true, true, false, true, true), \"count\");\n    assertEquals(responseStr, intDate,intDateTest);\n\n    //Float Long\n    ArrayList<Double> floatLong = getValueList(response, \"hf\", \"rangeFacets\", \"long_ld\", \"median\", false);\n    ArrayList<Double> floatLongTest = calculateFacetedNumberStat(transformLists(floatLongTestStart, 0, 29, 4\n                                                          , true, true, true, true, true), \"median\");\n    assertEquals(responseStr, floatLong,floatLongTest);\n    //Float Double\n    ArrayList<Long> floatDouble = getValueList(response, \"hf\", \"rangeFacets\", \"double_dd\", \"count\", false);\n    ArrayList<Long> floatDoubleTest = (ArrayList<Long>)calculateFacetedStat(transformLists(floatDoubleTestStart, 4, 47, 11\n                                                                     , true, false, false, true, false), \"count\");\n    assertEquals(responseStr, floatDouble,floatDoubleTest);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void hardendRangeTest() throws Exception {\n    String[] params = new String[] {\n        \"o.hi.s.sum\", \"sum(int_id)\",\n        \"o.hi.s.mean\", \"mean(int_id)\",\n        \"o.hi.s.median\", \"median(int_id)\",\n        \"o.hi.s.count\", \"count(int_id)\",\n        \"o.hi.rf\", \"long_ld\",\n        \"o.hi.rf.long_ld.st\", \"5\",\n        \"o.hi.rf.long_ld.e\", \"30\",\n        \"o.hi.rf.long_ld.g\", \"5\",\n        \"o.hi.rf.long_ld.he\", \"true\",\n        \"o.hi.rf.long_ld.ib\", \"lower\",\n        \"o.hi.rf.long_ld.or\", \"all\",\n        \"o.hi.rf\", \"double_dd\",\n        \"o.hi.rf.double_dd.st\", \"3\",\n        \"o.hi.rf.double_dd.e\", \"39\",\n        \"o.hi.rf.double_dd.g\", \"7\",\n        \"o.hi.rf.double_dd.he\", \"true\",\n        \"o.hi.rf.double_dd.ib\", \"upper\",\n        \"o.hi.rf.double_dd.ib\", \"outer\",\n        \"o.hi.rf.double_dd.or\", \"all\",\n        \"o.hi.rf\", \"date_dtd\",\n        \"o.hi.rf.date_dtd.st\", \"1007-01-01T23:59:59Z\",\n        \"o.hi.rf.date_dtd.e\", \"1044-01-01T23:59:59Z\",\n        \"o.hi.rf.date_dtd.g\", \"+7YEARS\",\n        \"o.hi.rf.date_dtd.he\", \"true\",\n        \"o.hi.rf.date_dtd.ib\", \"lower\",\n        \"o.hi.rf.date_dtd.ib\", \"edge\",\n        \"o.hi.rf.date_dtd.ib\", \"outer\",\n        \"o.hi.rf.date_dtd.or\", \"all\",\n\n        \"o.hf.s.sum\", \"sum(float_fd)\",\n        \"o.hf.s.mean\", \"mean(float_fd)\",\n        \"o.hf.s.median\", \"median(float_fd)\",\n        \"o.hf.s.count\", \"count(float_fd)\",\n        \"o.hf.rf\", \"long_ld\",\n        \"o.hf.rf.long_ld.st\", \"0\",\n        \"o.hf.rf.long_ld.e\", \"29\",\n        \"o.hf.rf.long_ld.g\", \"4\",\n        \"o.hf.rf.long_ld.he\", \"true\",\n        \"o.hf.rf.long_ld.ib\", \"all\",\n        \"o.hf.rf.long_ld.or\", \"all\",\n        \"o.hf.rf\", \"double_dd\",\n        \"o.hf.rf.double_dd.st\", \"4\",\n        \"o.hf.rf.double_dd.e\", \"47\",\n        \"o.hf.rf.double_dd.g\", \"11\",\n        \"o.hf.rf.double_dd.he\", \"true\",\n        \"o.hf.rf.double_dd.ib\", \"edge\",\n        \"o.hf.rf.double_dd.or\", \"all\",\n        \"o.hf.rf\", \"date_dtd\",\n        \"o.hf.rf.date_dtd.st\", \"1004-01-01T23:59:59Z\",\n        \"o.hf.rf.date_dtd.e\", \"1046-01-01T23:59:59Z\",\n        \"o.hf.rf.date_dtd.g\", \"+5YEARS\",\n        \"o.hf.rf.date_dtd.he\", \"true\",\n        \"o.hf.rf.date_dtd.ib\", \"upper\",\n        \"o.hf.rf.date_dtd.ib\", \"edge\",\n        \"o.hf.rf.date_dtd.or\", \"all\"\n    };\n    NamedList<Object> response = queryLegacyCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //Int Long\n    ArrayList<Double> intLong = getValueList(response, \"hi\", \"rangeFacets\", \"long_ld\", \"sum\", false);\n    ArrayList<Double> intLongTest = calculateFacetedNumberStat(transformLists(intLongTestStart, 5, 30, 5\n                                                        , true, true, false, false, false), \"sum\");\n    assertEquals(responseStr, intLong,intLongTest);\n    //Int Double\n    ArrayList<Double> intDouble = getValueList(response, \"hi\", \"rangeFacets\", \"double_dd\", \"mean\", false);\n    ArrayList<Double> intDoubleTest = calculateFacetedNumberStat(transformLists(intDoubleTestStart, 3, 39, 7\n                                                          , true, false, true, false, true), \"mean\");\n    assertEquals(responseStr, intDouble,intDoubleTest);\n    //Int Date\n    ArrayList<Long> intDate = getValueList(response, \"hi\", \"rangeFacets\", \"date_dtd\", \"count\", false);\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateFacetedStat(transformLists(intDateTestStart, 7, 44, 7\n                                                      , true, true, false, true, true), \"count\");\n    assertEquals(responseStr, intDate,intDateTest);\n    \n    //Float Long\n    ArrayList<Double> floatLong = getValueList(response, \"hf\", \"rangeFacets\", \"long_ld\", \"median\", false);\n    ArrayList<Double> floatLongTest = calculateFacetedNumberStat(transformLists(floatLongTestStart, 0, 29, 4\n                                                          , true, true, true, true, true), \"median\");\n    assertEquals(responseStr, floatLong,floatLongTest);\n    //Float Double\n    ArrayList<Long> floatDouble = getValueList(response, \"hf\", \"rangeFacets\", \"double_dd\", \"count\", false);\n    ArrayList<Long> floatDoubleTest = (ArrayList<Long>)calculateFacetedStat(transformLists(floatDoubleTestStart, 4, 47, 11\n                                                                     , true, false, false, true, false), \"count\");\n    assertEquals(responseStr, floatDouble,floatDoubleTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyRangeFacetCloudTest#hardendRangeTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyRangeFacetCloudTest#hardendRangeTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void hardendRangeTest() throws Exception {\n    String[] params = new String[] {\n        \"o.hi.s.sum\", \"sum(int_id)\",\n        \"o.hi.s.mean\", \"mean(int_id)\",\n        \"o.hi.s.median\", \"median(int_id)\",\n        \"o.hi.s.count\", \"count(int_id)\",\n        \"o.hi.rf\", \"long_ld\",\n        \"o.hi.rf.long_ld.st\", \"5\",\n        \"o.hi.rf.long_ld.e\", \"30\",\n        \"o.hi.rf.long_ld.g\", \"5\",\n        \"o.hi.rf.long_ld.he\", \"true\",\n        \"o.hi.rf.long_ld.ib\", \"lower\",\n        \"o.hi.rf.long_ld.or\", \"all\",\n        \"o.hi.rf\", \"double_dd\",\n        \"o.hi.rf.double_dd.st\", \"3\",\n        \"o.hi.rf.double_dd.e\", \"39\",\n        \"o.hi.rf.double_dd.g\", \"7\",\n        \"o.hi.rf.double_dd.he\", \"true\",\n        \"o.hi.rf.double_dd.ib\", \"upper\",\n        \"o.hi.rf.double_dd.ib\", \"outer\",\n        \"o.hi.rf.double_dd.or\", \"all\",\n        \"o.hi.rf\", \"date_dtd\",\n        \"o.hi.rf.date_dtd.st\", \"1007-01-01T23:59:59Z\",\n        \"o.hi.rf.date_dtd.e\", \"1044-01-01T23:59:59Z\",\n        \"o.hi.rf.date_dtd.g\", \"+7YEARS\",\n        \"o.hi.rf.date_dtd.he\", \"true\",\n        \"o.hi.rf.date_dtd.ib\", \"lower\",\n        \"o.hi.rf.date_dtd.ib\", \"edge\",\n        \"o.hi.rf.date_dtd.ib\", \"outer\",\n        \"o.hi.rf.date_dtd.or\", \"all\",\n\n        \"o.hf.s.sum\", \"sum(float_fd)\",\n        \"o.hf.s.mean\", \"mean(float_fd)\",\n        \"o.hf.s.median\", \"median(float_fd)\",\n        \"o.hf.s.count\", \"count(float_fd)\",\n        \"o.hf.rf\", \"long_ld\",\n        \"o.hf.rf.long_ld.st\", \"0\",\n        \"o.hf.rf.long_ld.e\", \"29\",\n        \"o.hf.rf.long_ld.g\", \"4\",\n        \"o.hf.rf.long_ld.he\", \"true\",\n        \"o.hf.rf.long_ld.ib\", \"all\",\n        \"o.hf.rf.long_ld.or\", \"all\",\n        \"o.hf.rf\", \"double_dd\",\n        \"o.hf.rf.double_dd.st\", \"4\",\n        \"o.hf.rf.double_dd.e\", \"47\",\n        \"o.hf.rf.double_dd.g\", \"11\",\n        \"o.hf.rf.double_dd.he\", \"true\",\n        \"o.hf.rf.double_dd.ib\", \"edge\",\n        \"o.hf.rf.double_dd.or\", \"all\",\n        \"o.hf.rf\", \"date_dtd\",\n        \"o.hf.rf.date_dtd.st\", \"1004-01-01T23:59:59Z\",\n        \"o.hf.rf.date_dtd.e\", \"1046-01-01T23:59:59Z\",\n        \"o.hf.rf.date_dtd.g\", \"+5YEARS\",\n        \"o.hf.rf.date_dtd.he\", \"true\",\n        \"o.hf.rf.date_dtd.ib\", \"upper\",\n        \"o.hf.rf.date_dtd.ib\", \"edge\",\n        \"o.hf.rf.date_dtd.or\", \"all\"\n    };\n    NamedList<Object> response = queryLegacyCloudAnalytics(params);\n    String responseStr = response.toString();\n\n    //Int Long\n    ArrayList<Double> intLong = getValueList(response, \"hi\", \"rangeFacets\", \"long_ld\", \"sum\", false);\n    ArrayList<Double> intLongTest = calculateFacetedNumberStat(transformLists(intLongTestStart, 5, 30, 5\n                                                        , true, true, false, false, false), \"sum\");\n    assertEquals(responseStr, intLong,intLongTest);\n    //Int Double\n    ArrayList<Double> intDouble = getValueList(response, \"hi\", \"rangeFacets\", \"double_dd\", \"mean\", false);\n    ArrayList<Double> intDoubleTest = calculateFacetedNumberStat(transformLists(intDoubleTestStart, 3, 39, 7\n                                                          , true, false, true, false, true), \"mean\");\n    assertEquals(responseStr, intDouble,intDoubleTest);\n    //Int Date\n    ArrayList<Long> intDate = getValueList(response, \"hi\", \"rangeFacets\", \"date_dtd\", \"count\", false);\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateFacetedStat(transformLists(intDateTestStart, 7, 44, 7\n                                                      , true, true, false, true, true), \"count\");\n    assertEquals(responseStr, intDate,intDateTest);\n\n    //Float Long\n    ArrayList<Double> floatLong = getValueList(response, \"hf\", \"rangeFacets\", \"long_ld\", \"median\", false);\n    ArrayList<Double> floatLongTest = calculateFacetedNumberStat(transformLists(floatLongTestStart, 0, 29, 4\n                                                          , true, true, true, true, true), \"median\");\n    assertEquals(responseStr, floatLong,floatLongTest);\n    //Float Double\n    ArrayList<Long> floatDouble = getValueList(response, \"hf\", \"rangeFacets\", \"double_dd\", \"count\", false);\n    ArrayList<Long> floatDoubleTest = (ArrayList<Long>)calculateFacetedStat(transformLists(floatDoubleTestStart, 4, 47, 11\n                                                                     , true, false, false, true, false), \"count\");\n    assertEquals(responseStr, floatDouble,floatDoubleTest);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void hardendRangeTest() throws Exception {\n    String[] params = new String[] {\n        \"o.hi.s.sum\", \"sum(int_id)\",\n        \"o.hi.s.mean\", \"mean(int_id)\",\n        \"o.hi.s.median\", \"median(int_id)\",\n        \"o.hi.s.count\", \"count(int_id)\",\n        \"o.hi.rf\", \"long_ld\",\n        \"o.hi.rf.long_ld.st\", \"5\",\n        \"o.hi.rf.long_ld.e\", \"30\",\n        \"o.hi.rf.long_ld.g\", \"5\",\n        \"o.hi.rf.long_ld.he\", \"true\",\n        \"o.hi.rf.long_ld.ib\", \"lower\",\n        \"o.hi.rf.long_ld.or\", \"all\",\n        \"o.hi.rf\", \"double_dd\",\n        \"o.hi.rf.double_dd.st\", \"3\",\n        \"o.hi.rf.double_dd.e\", \"39\",\n        \"o.hi.rf.double_dd.g\", \"7\",\n        \"o.hi.rf.double_dd.he\", \"true\",\n        \"o.hi.rf.double_dd.ib\", \"upper\",\n        \"o.hi.rf.double_dd.ib\", \"outer\",\n        \"o.hi.rf.double_dd.or\", \"all\",\n        \"o.hi.rf\", \"date_dtd\",\n        \"o.hi.rf.date_dtd.st\", \"1007-01-01T23:59:59Z\",\n        \"o.hi.rf.date_dtd.e\", \"1044-01-01T23:59:59Z\",\n        \"o.hi.rf.date_dtd.g\", \"+7YEARS\",\n        \"o.hi.rf.date_dtd.he\", \"true\",\n        \"o.hi.rf.date_dtd.ib\", \"lower\",\n        \"o.hi.rf.date_dtd.ib\", \"edge\",\n        \"o.hi.rf.date_dtd.ib\", \"outer\",\n        \"o.hi.rf.date_dtd.or\", \"all\",\n\n        \"o.hf.s.sum\", \"sum(float_fd)\",\n        \"o.hf.s.mean\", \"mean(float_fd)\",\n        \"o.hf.s.median\", \"median(float_fd)\",\n        \"o.hf.s.count\", \"count(float_fd)\",\n        \"o.hf.rf\", \"long_ld\",\n        \"o.hf.rf.long_ld.st\", \"0\",\n        \"o.hf.rf.long_ld.e\", \"29\",\n        \"o.hf.rf.long_ld.g\", \"4\",\n        \"o.hf.rf.long_ld.he\", \"true\",\n        \"o.hf.rf.long_ld.ib\", \"all\",\n        \"o.hf.rf.long_ld.or\", \"all\",\n        \"o.hf.rf\", \"double_dd\",\n        \"o.hf.rf.double_dd.st\", \"4\",\n        \"o.hf.rf.double_dd.e\", \"47\",\n        \"o.hf.rf.double_dd.g\", \"11\",\n        \"o.hf.rf.double_dd.he\", \"true\",\n        \"o.hf.rf.double_dd.ib\", \"edge\",\n        \"o.hf.rf.double_dd.or\", \"all\",\n        \"o.hf.rf\", \"date_dtd\",\n        \"o.hf.rf.date_dtd.st\", \"1004-01-01T23:59:59Z\",\n        \"o.hf.rf.date_dtd.e\", \"1046-01-01T23:59:59Z\",\n        \"o.hf.rf.date_dtd.g\", \"+5YEARS\",\n        \"o.hf.rf.date_dtd.he\", \"true\",\n        \"o.hf.rf.date_dtd.ib\", \"upper\",\n        \"o.hf.rf.date_dtd.ib\", \"edge\",\n        \"o.hf.rf.date_dtd.or\", \"all\"\n    };\n    NamedList<Object> response = queryLegacyCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //Int Long\n    ArrayList<Double> intLong = getValueList(response, \"hi\", \"rangeFacets\", \"long_ld\", \"sum\", false);\n    ArrayList<Double> intLongTest = calculateFacetedNumberStat(transformLists(intLongTestStart, 5, 30, 5\n                                                        , true, true, false, false, false), \"sum\");\n    assertEquals(responseStr, intLong,intLongTest);\n    //Int Double\n    ArrayList<Double> intDouble = getValueList(response, \"hi\", \"rangeFacets\", \"double_dd\", \"mean\", false);\n    ArrayList<Double> intDoubleTest = calculateFacetedNumberStat(transformLists(intDoubleTestStart, 3, 39, 7\n                                                          , true, false, true, false, true), \"mean\");\n    assertEquals(responseStr, intDouble,intDoubleTest);\n    //Int Date\n    ArrayList<Long> intDate = getValueList(response, \"hi\", \"rangeFacets\", \"date_dtd\", \"count\", false);\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateFacetedStat(transformLists(intDateTestStart, 7, 44, 7\n                                                      , true, true, false, true, true), \"count\");\n    assertEquals(responseStr, intDate,intDateTest);\n    \n    //Float Long\n    ArrayList<Double> floatLong = getValueList(response, \"hf\", \"rangeFacets\", \"long_ld\", \"median\", false);\n    ArrayList<Double> floatLongTest = calculateFacetedNumberStat(transformLists(floatLongTestStart, 0, 29, 4\n                                                          , true, true, true, true, true), \"median\");\n    assertEquals(responseStr, floatLong,floatLongTest);\n    //Float Double\n    ArrayList<Long> floatDouble = getValueList(response, \"hf\", \"rangeFacets\", \"double_dd\", \"count\", false);\n    ArrayList<Long> floatDoubleTest = (ArrayList<Long>)calculateFacetedStat(transformLists(floatDoubleTestStart, 4, 47, 11\n                                                                     , true, false, false, true, false), \"count\");\n    assertEquals(responseStr, floatDouble,floatDoubleTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["3bd4c6955956e76c96eb12dfe64108ed03522983","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}