{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testRealisticKeys().mjava","commits":[{"id":"8c33f6677a2078739058f81eca1df69d12cd62b0","date":1432799589,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testRealisticKeys().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/SuggestFieldTest#testRealisticKeys().mjava","sourceNew":"  @Test\n  public void testRealisticKeys() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int num = Math.min(1000, atLeast(100));\n    Map<String, Integer> mappings = new HashMap<>();\n    for (int i = 0; i < num; i++) {\n      Document document = lineFileDocs.nextDoc();\n      String title = document.getField(\"title\").stringValue();\n      int weight = Math.abs(random().nextInt());\n      Integer prevWeight = mappings.get(title);\n      if (prevWeight == null || prevWeight < weight) {\n        mappings.put(title, weight);\n      }\n      Document doc = new Document();\n      doc.add(new SuggestField(\"suggest_field\", title, weight));\n      iw.addDocument(doc);\n\n      if (rarely()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n\n    for (Map.Entry<String, Integer> entry : mappings.entrySet()) {\n      String title = entry.getKey();\n\n      PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", title));\n      TopSuggestDocs suggest = indexSearcher.suggest(query, mappings.size());\n      assertTrue(suggest.totalHits > 0);\n      boolean matched = false;\n      for (ScoreDoc scoreDoc : suggest.scoreDocs) {\n        matched = Float.compare(scoreDoc.score, (float) entry.getValue()) == 0;\n        if (matched) {\n          break;\n        }\n      }\n      assertTrue(\"at least one of the entries should have the score\", matched);\n    }\n\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRealisticKeys() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int num = Math.min(1000, atLeast(100));\n    Map<String, Long> mappings = new HashMap<>();\n    for (int i = 0; i < num; i++) {\n      Document document = lineFileDocs.nextDoc();\n      String title = document.getField(\"title\").stringValue();\n      long weight = Math.abs(random().nextLong());\n      Long prevWeight = mappings.get(title);\n      if (prevWeight == null || prevWeight < weight) {\n        mappings.put(title, weight);\n      }\n      Document doc = new Document();\n      doc.add(newSuggestField(\"suggest_field\", title, weight));\n      iw.addDocument(doc);\n\n      if (rarely()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader, analyzer);\n\n    for (Map.Entry<String, Long> entry : mappings.entrySet()) {\n      String title = entry.getKey();\n\n      TopSuggestDocs suggest = indexSearcher.suggest(\"suggest_field\", title, mappings.size());\n      assertTrue(suggest.totalHits > 0);\n      boolean matched = false;\n      for (ScoreDoc scoreDoc : suggest.scoreDocs) {\n        matched = Float.compare(scoreDoc.score, (float) entry.getValue()) == 0;\n        if (matched) {\n          break;\n        }\n      }\n      assertTrue(\"at least one of the entries should have the score\", matched);\n    }\n\n    reader.close();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"902a92b60648a8925bfd9bb53a78669cd2ea98fd","date":1487797466,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testRealisticKeys().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testRealisticKeys().mjava","sourceNew":"  @Test\n  public void testRealisticKeys() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int num = Math.min(1000, atLeast(100));\n    Map<String, Integer> mappings = new HashMap<>();\n    for (int i = 0; i < num; i++) {\n      Document document = lineFileDocs.nextDoc();\n      String title = document.getField(\"title\").stringValue();\n      int weight = random().nextInt(Integer.MAX_VALUE);\n      Integer prevWeight = mappings.get(title);\n      if (prevWeight == null || prevWeight < weight) {\n        mappings.put(title, weight);\n      }\n      Document doc = new Document();\n      doc.add(new SuggestField(\"suggest_field\", title, weight));\n      iw.addDocument(doc);\n\n      if (rarely()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n\n    for (Map.Entry<String, Integer> entry : mappings.entrySet()) {\n      String title = entry.getKey();\n\n      PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", title));\n      TopSuggestDocs suggest = indexSearcher.suggest(query, mappings.size(), false);\n      assertTrue(suggest.totalHits > 0);\n      boolean matched = false;\n      for (ScoreDoc scoreDoc : suggest.scoreDocs) {\n        matched = Float.compare(scoreDoc.score, (float) entry.getValue()) == 0;\n        if (matched) {\n          break;\n        }\n      }\n      assertTrue(\"at least one of the entries should have the score\", matched);\n    }\n\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRealisticKeys() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int num = Math.min(1000, atLeast(100));\n    Map<String, Integer> mappings = new HashMap<>();\n    for (int i = 0; i < num; i++) {\n      Document document = lineFileDocs.nextDoc();\n      String title = document.getField(\"title\").stringValue();\n      int weight = Math.abs(random().nextInt());\n      Integer prevWeight = mappings.get(title);\n      if (prevWeight == null || prevWeight < weight) {\n        mappings.put(title, weight);\n      }\n      Document doc = new Document();\n      doc.add(new SuggestField(\"suggest_field\", title, weight));\n      iw.addDocument(doc);\n\n      if (rarely()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n\n    for (Map.Entry<String, Integer> entry : mappings.entrySet()) {\n      String title = entry.getKey();\n\n      PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", title));\n      TopSuggestDocs suggest = indexSearcher.suggest(query, mappings.size());\n      assertTrue(suggest.totalHits > 0);\n      boolean matched = false;\n      for (ScoreDoc scoreDoc : suggest.scoreDocs) {\n        matched = Float.compare(scoreDoc.score, (float) entry.getValue()) == 0;\n        if (matched) {\n          break;\n        }\n      }\n      assertTrue(\"at least one of the entries should have the score\", matched);\n    }\n\n    reader.close();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ede75b7590bcf80576a98c1597ca7be91a58634e","date":1502195123,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testRealisticKeys().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testRealisticKeys().mjava","sourceNew":"  @Test\n  public void testRealisticKeys() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int num = Math.min(1000, atLeast(100));\n    Map<String, Integer> mappings = new HashMap<>();\n    for (int i = 0; i < num; i++) {\n      Document document = lineFileDocs.nextDoc();\n      String title = document.getField(\"title\").stringValue();\n      int maxLen = Math.min(title.length(), 500);\n      String prefix = title.substring(0, maxLen);\n      int weight = random().nextInt(Integer.MAX_VALUE);\n      Integer prevWeight = mappings.get(prefix);\n      if (prevWeight == null || prevWeight < weight) {\n        mappings.put(prefix, weight);\n      }\n      Document doc = new Document();\n      doc.add(new SuggestField(\"suggest_field\", prefix, weight));\n      iw.addDocument(doc);\n\n      if (rarely()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n\n    for (Map.Entry<String, Integer> entry : mappings.entrySet()) {\n      String title = entry.getKey();\n\n      PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", title));\n      TopSuggestDocs suggest = indexSearcher.suggest(query, mappings.size(), false);\n      assertTrue(suggest.totalHits > 0);\n      boolean matched = false;\n      for (ScoreDoc scoreDoc : suggest.scoreDocs) {\n        matched = Float.compare(scoreDoc.score, (float) entry.getValue()) == 0;\n        if (matched) {\n          break;\n        }\n      }\n      assertTrue(\"at least one of the entries should have the score\", matched);\n    }\n\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRealisticKeys() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int num = Math.min(1000, atLeast(100));\n    Map<String, Integer> mappings = new HashMap<>();\n    for (int i = 0; i < num; i++) {\n      Document document = lineFileDocs.nextDoc();\n      String title = document.getField(\"title\").stringValue();\n      int weight = random().nextInt(Integer.MAX_VALUE);\n      Integer prevWeight = mappings.get(title);\n      if (prevWeight == null || prevWeight < weight) {\n        mappings.put(title, weight);\n      }\n      Document doc = new Document();\n      doc.add(new SuggestField(\"suggest_field\", title, weight));\n      iw.addDocument(doc);\n\n      if (rarely()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n\n    for (Map.Entry<String, Integer> entry : mappings.entrySet()) {\n      String title = entry.getKey();\n\n      PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", title));\n      TopSuggestDocs suggest = indexSearcher.suggest(query, mappings.size(), false);\n      assertTrue(suggest.totalHits > 0);\n      boolean matched = false;\n      for (ScoreDoc scoreDoc : suggest.scoreDocs) {\n        matched = Float.compare(scoreDoc.score, (float) entry.getValue()) == 0;\n        if (matched) {\n          break;\n        }\n      }\n      assertTrue(\"at least one of the entries should have the score\", matched);\n    }\n\n    reader.close();\n    iw.close();\n  }\n\n","bugFix":["8c33f6677a2078739058f81eca1df69d12cd62b0","07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testRealisticKeys().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testRealisticKeys().mjava","sourceNew":"  @Test\n  public void testRealisticKeys() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int num = Math.min(1000, atLeast(100));\n    Map<String, Integer> mappings = new HashMap<>();\n    for (int i = 0; i < num; i++) {\n      Document document = lineFileDocs.nextDoc();\n      String title = document.getField(\"title\").stringValue();\n      int maxLen = Math.min(title.length(), 500);\n      String prefix = title.substring(0, maxLen);\n      int weight = random().nextInt(Integer.MAX_VALUE);\n      Integer prevWeight = mappings.get(prefix);\n      if (prevWeight == null || prevWeight < weight) {\n        mappings.put(prefix, weight);\n      }\n      Document doc = new Document();\n      doc.add(new SuggestField(\"suggest_field\", prefix, weight));\n      iw.addDocument(doc);\n\n      if (rarely()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n\n    for (Map.Entry<String, Integer> entry : mappings.entrySet()) {\n      String title = entry.getKey();\n\n      PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", title));\n      TopSuggestDocs suggest = indexSearcher.suggest(query, mappings.size(), false);\n      assertTrue(suggest.totalHits > 0);\n      boolean matched = false;\n      for (ScoreDoc scoreDoc : suggest.scoreDocs) {\n        matched = Float.compare(scoreDoc.score, (float) entry.getValue()) == 0;\n        if (matched) {\n          break;\n        }\n      }\n      assertTrue(\"at least one of the entries should have the score\", matched);\n    }\n\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRealisticKeys() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int num = Math.min(1000, atLeast(100));\n    Map<String, Integer> mappings = new HashMap<>();\n    for (int i = 0; i < num; i++) {\n      Document document = lineFileDocs.nextDoc();\n      String title = document.getField(\"title\").stringValue();\n      int weight = random().nextInt(Integer.MAX_VALUE);\n      Integer prevWeight = mappings.get(title);\n      if (prevWeight == null || prevWeight < weight) {\n        mappings.put(title, weight);\n      }\n      Document doc = new Document();\n      doc.add(new SuggestField(\"suggest_field\", title, weight));\n      iw.addDocument(doc);\n\n      if (rarely()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n\n    for (Map.Entry<String, Integer> entry : mappings.entrySet()) {\n      String title = entry.getKey();\n\n      PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", title));\n      TopSuggestDocs suggest = indexSearcher.suggest(query, mappings.size(), false);\n      assertTrue(suggest.totalHits > 0);\n      boolean matched = false;\n      for (ScoreDoc scoreDoc : suggest.scoreDocs) {\n        matched = Float.compare(scoreDoc.score, (float) entry.getValue()) == 0;\n        if (matched) {\n          break;\n        }\n      }\n      assertTrue(\"at least one of the entries should have the score\", matched);\n    }\n\n    reader.close();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testRealisticKeys().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testRealisticKeys().mjava","sourceNew":"  @Test\n  public void testRealisticKeys() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int num = Math.min(1000, atLeast(100));\n    Map<String, Integer> mappings = new HashMap<>();\n    for (int i = 0; i < num; i++) {\n      Document document = lineFileDocs.nextDoc();\n      String title = document.getField(\"title\").stringValue();\n      int maxLen = Math.min(title.length(), 500);\n      String prefix = title.substring(0, maxLen);\n      int weight = random().nextInt(Integer.MAX_VALUE);\n      Integer prevWeight = mappings.get(prefix);\n      if (prevWeight == null || prevWeight < weight) {\n        mappings.put(prefix, weight);\n      }\n      Document doc = new Document();\n      doc.add(new SuggestField(\"suggest_field\", prefix, weight));\n      iw.addDocument(doc);\n\n      if (rarely()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n\n    for (Map.Entry<String, Integer> entry : mappings.entrySet()) {\n      String title = entry.getKey();\n\n      PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", title));\n      TopSuggestDocs suggest = indexSearcher.suggest(query, mappings.size(), false);\n      assertTrue(suggest.totalHits > 0);\n      boolean matched = false;\n      for (ScoreDoc scoreDoc : suggest.scoreDocs) {\n        matched = Float.compare(scoreDoc.score, (float) entry.getValue()) == 0;\n        if (matched) {\n          break;\n        }\n      }\n      assertTrue(\"at least one of the entries should have the score\", matched);\n    }\n\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRealisticKeys() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int num = Math.min(1000, atLeast(100));\n    Map<String, Integer> mappings = new HashMap<>();\n    for (int i = 0; i < num; i++) {\n      Document document = lineFileDocs.nextDoc();\n      String title = document.getField(\"title\").stringValue();\n      int weight = random().nextInt(Integer.MAX_VALUE);\n      Integer prevWeight = mappings.get(title);\n      if (prevWeight == null || prevWeight < weight) {\n        mappings.put(title, weight);\n      }\n      Document doc = new Document();\n      doc.add(new SuggestField(\"suggest_field\", title, weight));\n      iw.addDocument(doc);\n\n      if (rarely()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n\n    for (Map.Entry<String, Integer> entry : mappings.entrySet()) {\n      String title = entry.getKey();\n\n      PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", title));\n      TopSuggestDocs suggest = indexSearcher.suggest(query, mappings.size(), false);\n      assertTrue(suggest.totalHits > 0);\n      boolean matched = false;\n      for (ScoreDoc scoreDoc : suggest.scoreDocs) {\n        matched = Float.compare(scoreDoc.score, (float) entry.getValue()) == 0;\n        if (matched) {\n          break;\n        }\n      }\n      assertTrue(\"at least one of the entries should have the score\", matched);\n    }\n\n    reader.close();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testRealisticKeys().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testRealisticKeys().mjava","sourceNew":"  @Test\n  public void testRealisticKeys() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int num = Math.min(1000, atLeast(100));\n    Map<String, Integer> mappings = new HashMap<>();\n    for (int i = 0; i < num; i++) {\n      Document document = lineFileDocs.nextDoc();\n      String title = document.getField(\"title\").stringValue();\n      int maxLen = Math.min(title.length(), 500);\n      String prefix = title.substring(0, maxLen);\n      int weight = random().nextInt(Integer.MAX_VALUE);\n      Integer prevWeight = mappings.get(prefix);\n      if (prevWeight == null || prevWeight < weight) {\n        mappings.put(prefix, weight);\n      }\n      Document doc = new Document();\n      doc.add(new SuggestField(\"suggest_field\", prefix, weight));\n      iw.addDocument(doc);\n\n      if (rarely()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n\n    for (Map.Entry<String, Integer> entry : mappings.entrySet()) {\n      String title = entry.getKey();\n\n      PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", title));\n      TopSuggestDocs suggest = indexSearcher.suggest(query, mappings.size(), false);\n      assertTrue(suggest.totalHits.value > 0);\n      boolean matched = false;\n      for (ScoreDoc scoreDoc : suggest.scoreDocs) {\n        matched = Float.compare(scoreDoc.score, (float) entry.getValue()) == 0;\n        if (matched) {\n          break;\n        }\n      }\n      assertTrue(\"at least one of the entries should have the score\", matched);\n    }\n\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRealisticKeys() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int num = Math.min(1000, atLeast(100));\n    Map<String, Integer> mappings = new HashMap<>();\n    for (int i = 0; i < num; i++) {\n      Document document = lineFileDocs.nextDoc();\n      String title = document.getField(\"title\").stringValue();\n      int maxLen = Math.min(title.length(), 500);\n      String prefix = title.substring(0, maxLen);\n      int weight = random().nextInt(Integer.MAX_VALUE);\n      Integer prevWeight = mappings.get(prefix);\n      if (prevWeight == null || prevWeight < weight) {\n        mappings.put(prefix, weight);\n      }\n      Document doc = new Document();\n      doc.add(new SuggestField(\"suggest_field\", prefix, weight));\n      iw.addDocument(doc);\n\n      if (rarely()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n\n    for (Map.Entry<String, Integer> entry : mappings.entrySet()) {\n      String title = entry.getKey();\n\n      PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", title));\n      TopSuggestDocs suggest = indexSearcher.suggest(query, mappings.size(), false);\n      assertTrue(suggest.totalHits > 0);\n      boolean matched = false;\n      for (ScoreDoc scoreDoc : suggest.scoreDocs) {\n        matched = Float.compare(scoreDoc.score, (float) entry.getValue()) == 0;\n        if (matched) {\n          break;\n        }\n      }\n      assertTrue(\"at least one of the entries should have the score\", matched);\n    }\n\n    reader.close();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testRealisticKeys().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testRealisticKeys().mjava","sourceNew":"  @Test\n  public void testRealisticKeys() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int num = Math.min(1000, atLeast(50));\n    Map<String, Integer> mappings = new HashMap<>();\n    for (int i = 0; i < num; i++) {\n      Document document = lineFileDocs.nextDoc();\n      String title = document.getField(\"title\").stringValue();\n      int maxLen = Math.min(title.length(), 500);\n      String prefix = title.substring(0, maxLen);\n      int weight = random().nextInt(Integer.MAX_VALUE);\n      Integer prevWeight = mappings.get(prefix);\n      if (prevWeight == null || prevWeight < weight) {\n        mappings.put(prefix, weight);\n      }\n      Document doc = new Document();\n      doc.add(new SuggestField(\"suggest_field\", prefix, weight));\n      iw.addDocument(doc);\n\n      if (rarely()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n\n    for (Map.Entry<String, Integer> entry : mappings.entrySet()) {\n      String title = entry.getKey();\n\n      PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", title));\n      TopSuggestDocs suggest = indexSearcher.suggest(query, mappings.size(), false);\n      assertTrue(suggest.totalHits.value > 0);\n      boolean matched = false;\n      for (ScoreDoc scoreDoc : suggest.scoreDocs) {\n        matched = Float.compare(scoreDoc.score, (float) entry.getValue()) == 0;\n        if (matched) {\n          break;\n        }\n      }\n      assertTrue(\"at least one of the entries should have the score\", matched);\n    }\n\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRealisticKeys() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int num = Math.min(1000, atLeast(100));\n    Map<String, Integer> mappings = new HashMap<>();\n    for (int i = 0; i < num; i++) {\n      Document document = lineFileDocs.nextDoc();\n      String title = document.getField(\"title\").stringValue();\n      int maxLen = Math.min(title.length(), 500);\n      String prefix = title.substring(0, maxLen);\n      int weight = random().nextInt(Integer.MAX_VALUE);\n      Integer prevWeight = mappings.get(prefix);\n      if (prevWeight == null || prevWeight < weight) {\n        mappings.put(prefix, weight);\n      }\n      Document doc = new Document();\n      doc.add(new SuggestField(\"suggest_field\", prefix, weight));\n      iw.addDocument(doc);\n\n      if (rarely()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n\n    for (Map.Entry<String, Integer> entry : mappings.entrySet()) {\n      String title = entry.getKey();\n\n      PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", title));\n      TopSuggestDocs suggest = indexSearcher.suggest(query, mappings.size(), false);\n      assertTrue(suggest.totalHits.value > 0);\n      boolean matched = false;\n      for (ScoreDoc scoreDoc : suggest.scoreDocs) {\n        matched = Float.compare(scoreDoc.score, (float) entry.getValue()) == 0;\n        if (matched) {\n          break;\n        }\n      }\n      assertTrue(\"at least one of the entries should have the score\", matched);\n    }\n\n    reader.close();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c37ab80ad12b466f3dc92e4baa7b0cbf9aded429","date":1590107358,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testRealisticKeys().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testRealisticKeys().mjava","sourceNew":"  @Test\n  public void testRealisticKeys() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int num = Math.min(1000, atLeast(50));\n    Map<String, Integer> mappings = new HashMap<>();\n    for (int i = 0; i < num; i++) {\n      Document document = lineFileDocs.nextDoc();\n      String title = document.getField(\"title\").stringValue();\n      int maxLen = Math.min(title.length(), 500);\n      String prefix = title.substring(0, maxLen);\n      int weight = random().nextInt(Integer.MAX_VALUE);\n      Integer prevWeight = mappings.get(prefix);\n      if (prevWeight == null || prevWeight < weight) {\n        mappings.put(prefix, weight);\n      }\n      Document doc = new Document();\n      doc.add(new SuggestField(\"suggest_field\", prefix, weight));\n      iw.addDocument(doc);\n\n      if (rarely()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n\n    for (Map.Entry<String, Integer> entry : mappings.entrySet()) {\n      String title = entry.getKey();\n\n      PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", title));\n      TopSuggestDocs suggest = indexSearcher.suggest(query, mappings.size(), false);\n      assertTrue(suggest.totalHits.value > 0);\n      boolean matched = false;\n      for (ScoreDoc scoreDoc : suggest.scoreDocs) {\n        matched = Float.compare(scoreDoc.score, (float) entry.getValue()) == 0;\n        if (matched) {\n          break;\n        }\n      }\n      assertTrue(\"at least one of the entries should have the score\", matched);\n    }\n    lineFileDocs.close();\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRealisticKeys() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int num = Math.min(1000, atLeast(50));\n    Map<String, Integer> mappings = new HashMap<>();\n    for (int i = 0; i < num; i++) {\n      Document document = lineFileDocs.nextDoc();\n      String title = document.getField(\"title\").stringValue();\n      int maxLen = Math.min(title.length(), 500);\n      String prefix = title.substring(0, maxLen);\n      int weight = random().nextInt(Integer.MAX_VALUE);\n      Integer prevWeight = mappings.get(prefix);\n      if (prevWeight == null || prevWeight < weight) {\n        mappings.put(prefix, weight);\n      }\n      Document doc = new Document();\n      doc.add(new SuggestField(\"suggest_field\", prefix, weight));\n      iw.addDocument(doc);\n\n      if (rarely()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n\n    for (Map.Entry<String, Integer> entry : mappings.entrySet()) {\n      String title = entry.getKey();\n\n      PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", title));\n      TopSuggestDocs suggest = indexSearcher.suggest(query, mappings.size(), false);\n      assertTrue(suggest.totalHits.value > 0);\n      boolean matched = false;\n      for (ScoreDoc scoreDoc : suggest.scoreDocs) {\n        matched = Float.compare(scoreDoc.score, (float) entry.getValue()) == 0;\n        if (matched) {\n          break;\n        }\n      }\n      assertTrue(\"at least one of the entries should have the score\", matched);\n    }\n\n    reader.close();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["902a92b60648a8925bfd9bb53a78669cd2ea98fd","ede75b7590bcf80576a98c1597ca7be91a58634e"],"ede75b7590bcf80576a98c1597ca7be91a58634e":["902a92b60648a8925bfd9bb53a78669cd2ea98fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["902a92b60648a8925bfd9bb53a78669cd2ea98fd","ede75b7590bcf80576a98c1597ca7be91a58634e"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["ede75b7590bcf80576a98c1597ca7be91a58634e"],"8c33f6677a2078739058f81eca1df69d12cd62b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"902a92b60648a8925bfd9bb53a78669cd2ea98fd":["8c33f6677a2078739058f81eca1df69d12cd62b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c37ab80ad12b466f3dc92e4baa7b0cbf9aded429"],"c37ab80ad12b466f3dc92e4baa7b0cbf9aded429":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"]},"commit2Childs":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["c37ab80ad12b466f3dc92e4baa7b0cbf9aded429"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"ede75b7590bcf80576a98c1597ca7be91a58634e":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","83788ad129a5154d5c6562c4e8ce3db48793aada"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c33f6677a2078739058f81eca1df69d12cd62b0"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"8c33f6677a2078739058f81eca1df69d12cd62b0":["902a92b60648a8925bfd9bb53a78669cd2ea98fd"],"902a92b60648a8925bfd9bb53a78669cd2ea98fd":["58884af1f68e9d61c217c753fbd6266d86a63b14","ede75b7590bcf80576a98c1597ca7be91a58634e","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c37ab80ad12b466f3dc92e4baa7b0cbf9aded429":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}