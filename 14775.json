{"path":"lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), StringField.TYPE_UNSTORED));\n        doc.add(new NumericField(\"trie\", value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), StringField.TYPE_UNSTORED));\n        doc.add(new NumericField(\"trie\", value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), StringField.TYPE_UNSTORED));\n        doc.add(new IntField(\"trie\", value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), StringField.TYPE_UNSTORED));\n        doc.add(new NumericField(\"trie\", value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":["fa0f44f887719e97183771e977cfc4bfb485b766"],"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random(), 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random().nextInt(10); m<=c; m++) {\n        int value = random().nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), StringField.TYPE_UNSTORED));\n        doc.add(new IntField(\"trie\", value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random().nextInt(Integer.MAX_VALUE);\n      int upper=random().nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random.nextInt(10); m<=c; m++) {\n        int value = random.nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), StringField.TYPE_UNSTORED));\n        doc.add(new IntField(\"trie\", value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random.nextInt(Integer.MAX_VALUE);\n      int upper=random.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random(), 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random().nextInt(10); m<=c; m++) {\n        int value = random().nextInt(Integer.MAX_VALUE);\n        doc.add(newStringField(\"asc\", format.format(value), Field.Store.NO));\n        doc.add(new IntField(\"trie\", value, Field.Store.NO));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random().nextInt(Integer.MAX_VALUE);\n      int upper=random().nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random(), 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random().nextInt(10); m<=c; m++) {\n        int value = random().nextInt(Integer.MAX_VALUE);\n        doc.add(newField(\"asc\", format.format(value), StringField.TYPE_UNSTORED));\n        doc.add(new IntField(\"trie\", value));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random().nextInt(Integer.MAX_VALUE);\n      int upper=random().nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":["a78a90fc9701e511308346ea29f4f5e548bb39fe","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random(), 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.ROOT));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random().nextInt(10); m<=c; m++) {\n        int value = random().nextInt(Integer.MAX_VALUE);\n        doc.add(newStringField(\"asc\", format.format(value), Field.Store.NO));\n        doc.add(new IntField(\"trie\", value, Field.Store.NO));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random().nextInt(Integer.MAX_VALUE);\n      int upper=random().nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random(), 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random().nextInt(10); m<=c; m++) {\n        int value = random().nextInt(Integer.MAX_VALUE);\n        doc.add(newStringField(\"asc\", format.format(value), Field.Store.NO));\n        doc.add(new IntField(\"trie\", value, Field.Store.NO));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random().nextInt(Integer.MAX_VALUE);\n      int upper=random().nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random(), 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.ROOT));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random().nextInt(10); m<=c; m++) {\n        int value = random().nextInt(Integer.MAX_VALUE);\n        doc.add(newStringField(\"asc\", format.format(value), Field.Store.NO));\n        doc.add(new IntField(\"trie\", value, Field.Store.NO));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random().nextInt(Integer.MAX_VALUE);\n      int upper=random().nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random(), 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random().nextInt(10); m<=c; m++) {\n        int value = random().nextInt(Integer.MAX_VALUE);\n        doc.add(newStringField(\"asc\", format.format(value), Field.Store.NO));\n        doc.add(new IntField(\"trie\", value, Field.Store.NO));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random().nextInt(Integer.MAX_VALUE);\n      int upper=random().nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random(), 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.ROOT));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random().nextInt(10); m<=c; m++) {\n        int value = random().nextInt(Integer.MAX_VALUE);\n        doc.add(newStringField(\"asc\", format.format(value), Field.Store.NO));\n        doc.add(new IntField(\"trie\", value, Field.Store.NO));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random().nextInt(Integer.MAX_VALUE);\n      int upper=random().nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random(), 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random().nextInt(10); m<=c; m++) {\n        int value = random().nextInt(Integer.MAX_VALUE);\n        doc.add(newStringField(\"asc\", format.format(value), Field.Store.NO));\n        doc.add(new IntField(\"trie\", value, Field.Store.NO));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random().nextInt(Integer.MAX_VALUE);\n      int upper=random().nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random(), 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.ROOT));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random().nextInt(10); m<=c; m++) {\n        int value = random().nextInt(Integer.MAX_VALUE);\n        doc.add(newStringField(\"asc\", format.format(value), Field.Store.NO));\n        doc.add(new IntField(\"trie\", value, Field.Store.NO));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random().nextInt(Integer.MAX_VALUE);\n      int upper=random().nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random(), 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random().nextInt(10); m<=c; m++) {\n        int value = random().nextInt(Integer.MAX_VALUE);\n        doc.add(newStringField(\"asc\", format.format(value), Field.Store.NO));\n        doc.add(new IntField(\"trie\", value, Field.Store.NO));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random().nextInt(Integer.MAX_VALUE);\n      int upper=random().nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.ROOT));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random().nextInt(10); m<=c; m++) {\n        int value = random().nextInt(Integer.MAX_VALUE);\n        doc.add(newStringField(\"asc\", format.format(value), Field.Store.NO));\n        doc.add(new IntField(\"trie\", value, Field.Store.NO));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random().nextInt(Integer.MAX_VALUE);\n      int upper=random().nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random(), 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.ROOT));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random().nextInt(10); m<=c; m++) {\n        int value = random().nextInt(Integer.MAX_VALUE);\n        doc.add(newStringField(\"asc\", format.format(value), Field.Store.NO));\n        doc.add(new IntField(\"trie\", value, Field.Store.NO));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random().nextInt(Integer.MAX_VALUE);\n      int upper=random().nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.ROOT));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random().nextInt(10); m<=c; m++) {\n        int value = random().nextInt(Integer.MAX_VALUE);\n        doc.add(newStringField(\"asc\", format.format(value), Field.Store.NO));\n        doc.add(new IntField(\"trie\", value, Field.Store.NO));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random().nextInt(Integer.MAX_VALUE);\n      int upper=random().nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.ROOT));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random().nextInt(10); m<=c; m++) {\n        int value = random().nextInt(Integer.MAX_VALUE);\n        doc.add(newStringField(\"asc\", format.format(value), Field.Store.NO));\n        doc.add(new IntField(\"trie\", value, Field.Store.NO));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random().nextInt(Integer.MAX_VALUE);\n      int upper=random().nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.ROOT));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random().nextInt(10); m<=c; m++) {\n        int value = random().nextInt(Integer.MAX_VALUE);\n        doc.add(newStringField(\"asc\", format.format(value), Field.Store.NO));\n        doc.add(new IntField(\"trie\", value, Field.Store.NO));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random().nextInt(Integer.MAX_VALUE);\n      int upper=random().nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.ROOT));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random().nextInt(10); m<=c; m++) {\n        int value = random().nextInt(Integer.MAX_VALUE);\n        doc.add(newStringField(\"asc\", format.format(value), Field.Store.NO));\n        doc.add(new IntField(\"trie\", value, Field.Store.NO));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random().nextInt(Integer.MAX_VALUE);\n      int upper=random().nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.ROOT));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random().nextInt(10); m<=c; m++) {\n        int value = random().nextInt(Integer.MAX_VALUE);\n        doc.add(newStringField(\"asc\", format.format(value), Field.Store.NO));\n        doc.add(new IntField(\"trie\", value, Field.Store.NO));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random().nextInt(Integer.MAX_VALUE);\n      int upper=random().nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.ROOT));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random().nextInt(10); m<=c; m++) {\n        int value = random().nextInt(Integer.MAX_VALUE);\n        doc.add(newStringField(\"asc\", format.format(value), Field.Store.NO));\n        doc.add(new IntField(\"trie\", value, Field.Store.NO));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random().nextInt(Integer.MAX_VALUE);\n      int upper=random().nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests LegacyNumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * LegacyNumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.ROOT));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random().nextInt(10); m<=c; m++) {\n        int value = random().nextInt(Integer.MAX_VALUE);\n        doc.add(newStringField(\"asc\", format.format(value), Field.Store.NO));\n        doc.add(new LegacyIntField(\"trie\", value, Field.Store.NO));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random().nextInt(Integer.MAX_VALUE);\n      int upper=random().nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      LegacyNumericRangeQuery<Integer> tq= LegacyNumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.ROOT));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random().nextInt(10); m<=c; m++) {\n        int value = random().nextInt(Integer.MAX_VALUE);\n        doc.add(newStringField(\"asc\", format.format(value), Field.Store.NO));\n        doc.add(new IntField(\"trie\", value, Field.Store.NO));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random().nextInt(Integer.MAX_VALUE);\n      int upper=random().nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests LegacyNumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * LegacyNumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.ROOT));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random().nextInt(10); m<=c; m++) {\n        int value = random().nextInt(Integer.MAX_VALUE);\n        doc.add(newStringField(\"asc\", format.format(value), Field.Store.NO));\n        doc.add(new LegacyIntField(\"trie\", value, Field.Store.NO));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random().nextInt(Integer.MAX_VALUE);\n      int upper=random().nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      LegacyNumericRangeQuery<Integer> tq= LegacyNumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests LegacyNumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * LegacyNumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.ROOT));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random().nextInt(10); m<=c; m++) {\n        int value = random().nextInt(Integer.MAX_VALUE);\n        doc.add(newStringField(\"asc\", format.format(value), Field.Store.NO));\n        doc.add(new LegacyIntField(\"trie\", value, Field.Store.NO));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random().nextInt(Integer.MAX_VALUE);\n      int upper=random().nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      LegacyNumericRangeQuery<Integer> tq= LegacyNumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests LegacyNumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * LegacyNumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.ROOT));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random().nextInt(10); m<=c; m++) {\n        int value = random().nextInt(Integer.MAX_VALUE);\n        doc.add(newStringField(\"asc\", format.format(value), Field.Store.NO));\n        doc.add(new LegacyIntField(\"trie\", value, Field.Store.NO));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random().nextInt(Integer.MAX_VALUE);\n      int upper=random().nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      LegacyNumericRangeQuery<Integer> tq= LegacyNumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests LegacyNumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * LegacyNumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.ROOT));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random().nextInt(10); m<=c; m++) {\n        int value = random().nextInt(Integer.MAX_VALUE);\n        doc.add(newStringField(\"asc\", format.format(value), Field.Store.NO));\n        doc.add(new LegacyIntField(\"trie\", value, Field.Store.NO));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random().nextInt(Integer.MAX_VALUE);\n      int upper=random().nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      LegacyNumericRangeQuery<Integer> tq= LegacyNumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests LegacyNumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * LegacyNumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.ROOT));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random().nextInt(10); m<=c; m++) {\n        int value = random().nextInt(Integer.MAX_VALUE);\n        doc.add(newStringField(\"asc\", format.format(value), Field.Store.NO));\n        doc.add(new LegacyIntField(\"trie\", value, Field.Store.NO));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random().nextInt(Integer.MAX_VALUE);\n      int upper=random().nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      LegacyNumericRangeQuery<Integer> tq= LegacyNumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests LegacyNumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * LegacyNumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.ROOT));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random().nextInt(10); m<=c; m++) {\n        int value = random().nextInt(Integer.MAX_VALUE);\n        doc.add(newStringField(\"asc\", format.format(value), Field.Store.NO));\n        doc.add(new LegacyIntField(\"trie\", value, Field.Store.NO));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random().nextInt(Integer.MAX_VALUE);\n      int upper=random().nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      LegacyNumericRangeQuery<Integer> tq= LegacyNumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests LegacyNumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * LegacyNumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.ROOT));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random().nextInt(10); m<=c; m++) {\n        int value = random().nextInt(Integer.MAX_VALUE);\n        doc.add(newStringField(\"asc\", format.format(value), Field.Store.NO));\n        doc.add(new LegacyIntField(\"trie\", value, Field.Store.NO));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random().nextInt(Integer.MAX_VALUE);\n      int upper=random().nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      LegacyNumericRangeQuery<Integer> tq= LegacyNumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests LegacyNumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * LegacyNumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n  public void testMultiValuedNRQ() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(TestUtil.nextInt(random(), 50, 1000)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.ROOT));\n    \n    int num = atLeast(500);\n    for (int l = 0; l < num; l++) {\n      Document doc = new Document();\n      for (int m=0, c=random().nextInt(10); m<=c; m++) {\n        int value = random().nextInt(Integer.MAX_VALUE);\n        doc.add(newStringField(\"asc\", format.format(value), Field.Store.NO));\n        doc.add(new LegacyIntField(\"trie\", value, Field.Store.NO));\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher=newSearcher(reader);\n    num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      int lower=random().nextInt(Integer.MAX_VALUE);\n      int upper=random().nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=TermRangeQuery.newStringRange(\"asc\", format.format(lower), format.format(upper), true, true);\n      LegacyNumericRangeQuery<Integer> tq= LegacyNumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for LegacyNumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["770342641f7b505eaa8dccdc666158bff2419109","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["2acf500f78aa12b92e371fd89c719291986b6b90"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["770342641f7b505eaa8dccdc666158bff2419109"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["770342641f7b505eaa8dccdc666158bff2419109","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"2acf500f78aa12b92e371fd89c719291986b6b90":["04f07771a2a7dd3a395700665ed839c3dae2def2","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"770342641f7b505eaa8dccdc666158bff2419109":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["770342641f7b505eaa8dccdc666158bff2419109","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"46d8ada1fff8d18cb197c38c7983225162599948":["04f07771a2a7dd3a395700665ed839c3dae2def2","2acf500f78aa12b92e371fd89c719291986b6b90"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["04f07771a2a7dd3a395700665ed839c3dae2def2","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["6613659748fe4411a7dcf85266e55db1f95f7315","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"770342641f7b505eaa8dccdc666158bff2419109":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"46d8ada1fff8d18cb197c38c7983225162599948":[],"04f07771a2a7dd3a395700665ed839c3dae2def2":["9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["770342641f7b505eaa8dccdc666158bff2419109"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}