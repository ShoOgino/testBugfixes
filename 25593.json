{"path":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#open(Path).mjava","commits":[{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#open(Path).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#open(File).mjava","sourceNew":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *\n   *  <p>Currently this returns {@link MMapDirectory} for most Solaris\n   *  and Windows 64-bit JREs, {@link NIOFSDirectory} for other\n   *  non-Windows JREs, and {@link SimpleFSDirectory} for other\n   *  JREs on Windows. It is highly recommended that you consult the\n   *  implementation's documentation for your platform before\n   *  using this method.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. For optimal performance you should consider using\n   * {@link MMapDirectory} on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(Path path) throws IOException {\n    return open(path, null);\n  }\n\n","sourceOld":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *\n   *  <p>Currently this returns {@link MMapDirectory} for most Solaris\n   *  and Windows 64-bit JREs, {@link NIOFSDirectory} for other\n   *  non-Windows JREs, and {@link SimpleFSDirectory} for other\n   *  JREs on Windows. It is highly recommended that you consult the\n   *  implementation's documentation for your platform before\n   *  using this method.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. For optimal performance you should consider using\n   * {@link MMapDirectory} on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(File path) throws IOException {\n    return open(path, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#open(Path).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#open(Path).mjava","sourceNew":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *\n   *  <p>Currently this returns {@link MMapDirectory} for most Solaris\n   *  and Windows 64-bit JREs, {@link NIOFSDirectory} for other\n   *  non-Windows JREs, and {@link SimpleFSDirectory} for other\n   *  JREs on Windows. It is highly recommended that you consult the\n   *  implementation's documentation for your platform before\n   *  using this method.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. For optimal performance you should consider using\n   * {@link MMapDirectory} on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(Path path) throws IOException {\n    return open(path, FSLockFactory.getDefault());\n  }\n\n","sourceOld":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *\n   *  <p>Currently this returns {@link MMapDirectory} for most Solaris\n   *  and Windows 64-bit JREs, {@link NIOFSDirectory} for other\n   *  non-Windows JREs, and {@link SimpleFSDirectory} for other\n   *  JREs on Windows. It is highly recommended that you consult the\n   *  implementation's documentation for your platform before\n   *  using this method.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. For optimal performance you should consider using\n   * {@link MMapDirectory} on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(Path path) throws IOException {\n    return open(path, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c47239343a3c69fe033db153d3152f318abc5d6","date":1423088431,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#open(Path).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#open(Path).mjava","sourceNew":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *  The directory is created at the named location if it does not yet exist.\n   *\n   *  <p>Currently this returns {@link MMapDirectory} for most Solaris\n   *  and Windows 64-bit JREs, {@link NIOFSDirectory} for other\n   *  non-Windows JREs, and {@link SimpleFSDirectory} for other\n   *  JREs on Windows. It is highly recommended that you consult the\n   *  implementation's documentation for your platform before\n   *  using this method.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. For optimal performance you should consider using\n   * {@link MMapDirectory} on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(Path path) throws IOException {\n    return open(path, FSLockFactory.getDefault());\n  }\n\n","sourceOld":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *\n   *  <p>Currently this returns {@link MMapDirectory} for most Solaris\n   *  and Windows 64-bit JREs, {@link NIOFSDirectory} for other\n   *  non-Windows JREs, and {@link SimpleFSDirectory} for other\n   *  JREs on Windows. It is highly recommended that you consult the\n   *  implementation's documentation for your platform before\n   *  using this method.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. For optimal performance you should consider using\n   * {@link MMapDirectory} on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(Path path) throws IOException {\n    return open(path, FSLockFactory.getDefault());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ec086b2d1aa4c143ea00be8f8ac75dd7aae7c21","date":1423132293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#open(Path).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#open(Path).mjava","sourceNew":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *  The directory is created at the named location if it does not yet exist.\n   *\n   *  <p>Currently this returns {@link MMapDirectory} for Linux, MacOSX, Solaris,\n   *  and Windows 64-bit JREs, {@link NIOFSDirectory} for other\n   *  non-Windows JREs, and {@link SimpleFSDirectory} for other\n   *  JREs on Windows. It is highly recommended that you consult the\n   *  implementation's documentation for your platform before\n   *  using this method.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. For optimal performance you should consider using\n   * {@link MMapDirectory} on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(Path path) throws IOException {\n    return open(path, FSLockFactory.getDefault());\n  }\n\n","sourceOld":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *  The directory is created at the named location if it does not yet exist.\n   *\n   *  <p>Currently this returns {@link MMapDirectory} for most Solaris\n   *  and Windows 64-bit JREs, {@link NIOFSDirectory} for other\n   *  non-Windows JREs, and {@link SimpleFSDirectory} for other\n   *  JREs on Windows. It is highly recommended that you consult the\n   *  implementation's documentation for your platform before\n   *  using this method.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. For optimal performance you should consider using\n   * {@link MMapDirectory} on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(Path path) throws IOException {\n    return open(path, FSLockFactory.getDefault());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf71adfa3cada5038ae8b7b27c514d6755ea3290","date":1442058200,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#open(Path).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#open(Path).mjava","sourceNew":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *  The directory is created at the named location if it does not yet exist.\n   * \n   * <p>{@code FSDirectory} resolves the given Path when calling this method to a canonical /\n   * real path to ensure it can correctly lock the index directory and no other process\n   * can interfere with changing possible symlinks to the index directory inbetween.\n   * If you want to use symlinks and change them dynamically, close all\n   * {@code IndexWriters} and create a new {@code FSDirecory} instance.\n   *\n   *  <p>Currently this returns {@link MMapDirectory} for Linux, MacOSX, Solaris,\n   *  and Windows 64-bit JREs, {@link NIOFSDirectory} for other\n   *  non-Windows JREs, and {@link SimpleFSDirectory} for other\n   *  JREs on Windows. It is highly recommended that you consult the\n   *  implementation's documentation for your platform before\n   *  using this method.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. For optimal performance you should consider using\n   * {@link MMapDirectory} on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(Path path) throws IOException {\n    return open(path, FSLockFactory.getDefault());\n  }\n\n","sourceOld":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *  The directory is created at the named location if it does not yet exist.\n   *\n   *  <p>Currently this returns {@link MMapDirectory} for Linux, MacOSX, Solaris,\n   *  and Windows 64-bit JREs, {@link NIOFSDirectory} for other\n   *  non-Windows JREs, and {@link SimpleFSDirectory} for other\n   *  JREs on Windows. It is highly recommended that you consult the\n   *  implementation's documentation for your platform before\n   *  using this method.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. For optimal performance you should consider using\n   * {@link MMapDirectory} on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(Path path) throws IOException {\n    return open(path, FSLockFactory.getDefault());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a","date":1550036130,"type":3,"author":"Bruno P. Kinoshita","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#open(Path).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#open(Path).mjava","sourceNew":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *  The directory is created at the named location if it does not yet exist.\n   * \n   * <p>{@code FSDirectory} resolves the given Path when calling this method to a canonical /\n   * real path to ensure it can correctly lock the index directory and no other process\n   * can interfere with changing possible symlinks to the index directory inbetween.\n   * If you want to use symlinks and change them dynamically, close all\n   * {@code IndexWriters} and create a new {@code FSDirectory} instance.\n   *\n   *  <p>Currently this returns {@link MMapDirectory} for Linux, MacOSX, Solaris,\n   *  and Windows 64-bit JREs, {@link NIOFSDirectory} for other\n   *  non-Windows JREs, and {@link SimpleFSDirectory} for other\n   *  JREs on Windows. It is highly recommended that you consult the\n   *  implementation's documentation for your platform before\n   *  using this method.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. For optimal performance you should consider using\n   * {@link MMapDirectory} on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(Path path) throws IOException {\n    return open(path, FSLockFactory.getDefault());\n  }\n\n","sourceOld":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *  The directory is created at the named location if it does not yet exist.\n   * \n   * <p>{@code FSDirectory} resolves the given Path when calling this method to a canonical /\n   * real path to ensure it can correctly lock the index directory and no other process\n   * can interfere with changing possible symlinks to the index directory inbetween.\n   * If you want to use symlinks and change them dynamically, close all\n   * {@code IndexWriters} and create a new {@code FSDirecory} instance.\n   *\n   *  <p>Currently this returns {@link MMapDirectory} for Linux, MacOSX, Solaris,\n   *  and Windows 64-bit JREs, {@link NIOFSDirectory} for other\n   *  non-Windows JREs, and {@link SimpleFSDirectory} for other\n   *  JREs on Windows. It is highly recommended that you consult the\n   *  implementation's documentation for your platform before\n   *  using this method.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. For optimal performance you should consider using\n   * {@link MMapDirectory} on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(Path path) throws IOException {\n    return open(path, FSLockFactory.getDefault());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ae13d58e10d8dc818c75db483ed8b53c725f1d","date":1583449465,"type":3,"author":"Yannick Welsch","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#open(Path).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#open(Path).mjava","sourceNew":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *  The directory is created at the named location if it does not yet exist.\n   * \n   * <p>{@code FSDirectory} resolves the given Path when calling this method to a canonical /\n   * real path to ensure it can correctly lock the index directory and no other process\n   * can interfere with changing possible symlinks to the index directory inbetween.\n   * If you want to use symlinks and change them dynamically, close all\n   * {@code IndexWriters} and create a new {@code FSDirectory} instance.\n   *\n   *  <p>Currently this returns {@link MMapDirectory} for Linux, MacOSX, Solaris,\n   *  and Windows 64-bit JREs, and {@link NIOFSDirectory} for other JREs.\n   *  It is highly recommended that you consult the implementation's documentation\n   *  for your platform before using this method.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. For optimal performance you should consider using\n   * {@link MMapDirectory} on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(Path path) throws IOException {\n    return open(path, FSLockFactory.getDefault());\n  }\n\n","sourceOld":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *  The directory is created at the named location if it does not yet exist.\n   * \n   * <p>{@code FSDirectory} resolves the given Path when calling this method to a canonical /\n   * real path to ensure it can correctly lock the index directory and no other process\n   * can interfere with changing possible symlinks to the index directory inbetween.\n   * If you want to use symlinks and change them dynamically, close all\n   * {@code IndexWriters} and create a new {@code FSDirectory} instance.\n   *\n   *  <p>Currently this returns {@link MMapDirectory} for Linux, MacOSX, Solaris,\n   *  and Windows 64-bit JREs, {@link NIOFSDirectory} for other\n   *  non-Windows JREs, and {@link SimpleFSDirectory} for other\n   *  JREs on Windows. It is highly recommended that you consult the\n   *  implementation's documentation for your platform before\n   *  using this method.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. For optimal performance you should consider using\n   * {@link MMapDirectory} on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(Path path) throws IOException {\n    return open(path, FSLockFactory.getDefault());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ca2a57dbb0665332572cf1a0dffa67234089615","date":1583491342,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#open(Path).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#open(Path).mjava","sourceNew":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *  The directory is created at the named location if it does not yet exist.\n   * \n   * <p>{@code FSDirectory} resolves the given Path when calling this method to a canonical /\n   * real path to ensure it can correctly lock the index directory and no other process\n   * can interfere with changing possible symlinks to the index directory inbetween.\n   * If you want to use symlinks and change them dynamically, close all\n   * {@code IndexWriters} and create a new {@code FSDirectory} instance.\n   *\n   *  <p>Currently this returns {@link MMapDirectory} for Linux, MacOSX, Solaris,\n   *  and Windows 64-bit JREs, and {@link NIOFSDirectory} for other JREs.\n   *  It is highly recommended that you consult the implementation's documentation\n   *  for your platform before using this method.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. For optimal performance you should consider using\n   * {@link MMapDirectory} on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(Path path) throws IOException {\n    return open(path, FSLockFactory.getDefault());\n  }\n\n","sourceOld":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *  The directory is created at the named location if it does not yet exist.\n   * \n   * <p>{@code FSDirectory} resolves the given Path when calling this method to a canonical /\n   * real path to ensure it can correctly lock the index directory and no other process\n   * can interfere with changing possible symlinks to the index directory inbetween.\n   * If you want to use symlinks and change them dynamically, close all\n   * {@code IndexWriters} and create a new {@code FSDirectory} instance.\n   *\n   *  <p>Currently this returns {@link MMapDirectory} for Linux, MacOSX, Solaris,\n   *  and Windows 64-bit JREs, {@link NIOFSDirectory} for other\n   *  non-Windows JREs, and {@link SimpleFSDirectory} for other\n   *  JREs on Windows. It is highly recommended that you consult the\n   *  implementation's documentation for your platform before\n   *  using this method.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. For optimal performance you should consider using\n   * {@link MMapDirectory} on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(Path path) throws IOException {\n    return open(path, FSLockFactory.getDefault());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ca2a57dbb0665332572cf1a0dffa67234089615":["d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a","09ae13d58e10d8dc818c75db483ed8b53c725f1d"],"4c47239343a3c69fe033db153d3152f318abc5d6":["285cdc737de75b7cc7c284a156b20214deb67bca"],"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["cf71adfa3cada5038ae8b7b27c514d6755ea3290"],"09ae13d58e10d8dc818c75db483ed8b53c725f1d":["d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a"],"285cdc737de75b7cc7c284a156b20214deb67bca":["f4abec28b874149a7223e32cc7a01704c27790de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf71adfa3cada5038ae8b7b27c514d6755ea3290":["8ec086b2d1aa4c143ea00be8f8ac75dd7aae7c21"],"8ec086b2d1aa4c143ea00be8f8ac75dd7aae7c21":["4c47239343a3c69fe033db153d3152f318abc5d6"],"f4abec28b874149a7223e32cc7a01704c27790de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ca2a57dbb0665332572cf1a0dffa67234089615"]},"commit2Childs":{"9ca2a57dbb0665332572cf1a0dffa67234089615":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4c47239343a3c69fe033db153d3152f318abc5d6":["8ec086b2d1aa4c143ea00be8f8ac75dd7aae7c21"],"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["9ca2a57dbb0665332572cf1a0dffa67234089615","09ae13d58e10d8dc818c75db483ed8b53c725f1d"],"09ae13d58e10d8dc818c75db483ed8b53c725f1d":["9ca2a57dbb0665332572cf1a0dffa67234089615"],"285cdc737de75b7cc7c284a156b20214deb67bca":["4c47239343a3c69fe033db153d3152f318abc5d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4abec28b874149a7223e32cc7a01704c27790de"],"cf71adfa3cada5038ae8b7b27c514d6755ea3290":["d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a"],"f4abec28b874149a7223e32cc7a01704c27790de":["285cdc737de75b7cc7c284a156b20214deb67bca"],"8ec086b2d1aa4c143ea00be8f8ac75dd7aae7c21":["cf71adfa3cada5038ae8b7b27c514d6755ea3290"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}