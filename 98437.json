{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashCode().mjava","commits":[{"id":"c659c37800c0dfd82fa025b5834f4ab065903d11","date":1361851047,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashCode().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEqualsHashCode() {\n\n    final SpatialPrefixTree grid = new QuadPrefixTree(ctx,10);\n    final SpatialArgs args1 = makeArgs1();\n    final SpatialArgs args2 = makeArgs2();\n\n    Collection<ObjGenerator> generators = new ArrayList<ObjGenerator>();\n    generators.add(new ObjGenerator() {\n      @Override\n      public Object gen(SpatialArgs args) {\n        return new RecursivePrefixTreeStrategy(grid, \"recursive_quad\").makeQuery(args);\n      }\n    });\n    generators.add(new ObjGenerator() {\n      @Override\n      public Object gen(SpatialArgs args) {\n        return new TermQueryPrefixTreeStrategy(grid, \"termquery_quad\").makeQuery(args);\n      }\n    });\n    generators.add(new ObjGenerator() {\n      @Override\n      public Object gen(SpatialArgs args) {\n        return new PointVectorStrategy(ctx, \"pointvector\").makeQuery(args);\n      }\n    });\n    generators.add(new ObjGenerator() {\n      @Override\n      public Object gen(SpatialArgs args) {\n        return new BBoxStrategy(ctx, \"bbox\").makeQuery(args);\n      }\n    });\n\n    for (ObjGenerator generator : generators) {\n      testStratQueryEqualsHashcode(args1, args2, generator);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1068799b5537c6408504cf7e15cb90ba57491440","date":1392577122,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashCode().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashCode().mjava","sourceNew":"  @Test\n  public void testEqualsHashCode() {\n\n    final SpatialPrefixTree gridQuad = new QuadPrefixTree(ctx,10);\n    final SpatialPrefixTree gridGeohash = new GeohashPrefixTree(ctx,10);\n\n    Collection<SpatialStrategy> strategies = new ArrayList<SpatialStrategy>();\n    strategies.add(new RecursivePrefixTreeStrategy(gridGeohash, \"recursive_geohash\"));\n    strategies.add(new TermQueryPrefixTreeStrategy(gridQuad, \"termquery_quad\"));\n    strategies.add(new PointVectorStrategy(ctx, \"pointvector\"));\n    strategies.add(new BBoxStrategy(ctx, \"bbox\"));\n    strategies.add(new SerializedDVStrategy(ctx, \"serialized\"));\n    for (SpatialStrategy strategy : strategies) {\n      testEqualsHashcode(strategy);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsHashCode() {\n\n    final SpatialPrefixTree grid = new QuadPrefixTree(ctx,10);\n    final SpatialArgs args1 = makeArgs1();\n    final SpatialArgs args2 = makeArgs2();\n\n    Collection<ObjGenerator> generators = new ArrayList<ObjGenerator>();\n    generators.add(new ObjGenerator() {\n      @Override\n      public Object gen(SpatialArgs args) {\n        return new RecursivePrefixTreeStrategy(grid, \"recursive_quad\").makeQuery(args);\n      }\n    });\n    generators.add(new ObjGenerator() {\n      @Override\n      public Object gen(SpatialArgs args) {\n        return new TermQueryPrefixTreeStrategy(grid, \"termquery_quad\").makeQuery(args);\n      }\n    });\n    generators.add(new ObjGenerator() {\n      @Override\n      public Object gen(SpatialArgs args) {\n        return new PointVectorStrategy(ctx, \"pointvector\").makeQuery(args);\n      }\n    });\n    generators.add(new ObjGenerator() {\n      @Override\n      public Object gen(SpatialArgs args) {\n        return new BBoxStrategy(ctx, \"bbox\").makeQuery(args);\n      }\n    });\n\n    for (ObjGenerator generator : generators) {\n      testStratQueryEqualsHashcode(args1, args2, generator);\n    }\n  }\n\n","bugFix":null,"bugIntro":["aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4","aaa4203f9b7fbc832b95b0ab5f986b81cd12aae4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashCode().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashCode().mjava","sourceNew":"  @Test\n  public void testEqualsHashCode() {\n\n    final SpatialPrefixTree gridQuad = new QuadPrefixTree(ctx,10);\n    final SpatialPrefixTree gridGeohash = new GeohashPrefixTree(ctx,10);\n\n    Collection<SpatialStrategy> strategies = new ArrayList<>();\n    strategies.add(new RecursivePrefixTreeStrategy(gridGeohash, \"recursive_geohash\"));\n    strategies.add(new TermQueryPrefixTreeStrategy(gridQuad, \"termquery_quad\"));\n    strategies.add(new PointVectorStrategy(ctx, \"pointvector\"));\n    strategies.add(new BBoxStrategy(ctx, \"bbox\"));\n    strategies.add(new SerializedDVStrategy(ctx, \"serialized\"));\n    for (SpatialStrategy strategy : strategies) {\n      testEqualsHashcode(strategy);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsHashCode() {\n\n    final SpatialPrefixTree gridQuad = new QuadPrefixTree(ctx,10);\n    final SpatialPrefixTree gridGeohash = new GeohashPrefixTree(ctx,10);\n\n    Collection<SpatialStrategy> strategies = new ArrayList<SpatialStrategy>();\n    strategies.add(new RecursivePrefixTreeStrategy(gridGeohash, \"recursive_geohash\"));\n    strategies.add(new TermQueryPrefixTreeStrategy(gridQuad, \"termquery_quad\"));\n    strategies.add(new PointVectorStrategy(ctx, \"pointvector\"));\n    strategies.add(new BBoxStrategy(ctx, \"bbox\"));\n    strategies.add(new SerializedDVStrategy(ctx, \"serialized\"));\n    for (SpatialStrategy strategy : strategies) {\n      testEqualsHashcode(strategy);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11e8ea32003f6ccf3282ad6c05ca47eec277e928","date":1428695518,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashCode().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashCode().mjava","sourceNew":"  @Test\n  public void testEqualsHashCode() {\n\n    switch (random().nextInt(4)) {//0-3\n      case 0: predicate = SpatialOperation.Contains; break;\n      case 1: predicate = SpatialOperation.IsWithin; break;\n\n      default: predicate = SpatialOperation.Intersects; break;\n    }\n    final SpatialPrefixTree gridQuad = new QuadPrefixTree(ctx,10);\n    final SpatialPrefixTree gridGeohash = new GeohashPrefixTree(ctx,10);\n\n    Collection<SpatialStrategy> strategies = new ArrayList<>();\n    RecursivePrefixTreeStrategy recursive_geohash = new RecursivePrefixTreeStrategy(gridGeohash, \"recursive_geohash\");\n    strategies.add(recursive_geohash);\n    strategies.add(new TermQueryPrefixTreeStrategy(gridQuad, \"termquery_quad\"));\n    strategies.add(new PointVectorStrategy(ctx, \"pointvector\"));\n    strategies.add(new BBoxStrategy(ctx, \"bbox\"));\n    final SerializedDVStrategy serialized = new SerializedDVStrategy(ctx, \"serialized\");\n    strategies.add(serialized);\n    strategies.add(new CompositeSpatialStrategy(\"composite\", recursive_geohash, serialized));\n    for (SpatialStrategy strategy : strategies) {\n      testEqualsHashcode(strategy);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsHashCode() {\n\n    final SpatialPrefixTree gridQuad = new QuadPrefixTree(ctx,10);\n    final SpatialPrefixTree gridGeohash = new GeohashPrefixTree(ctx,10);\n\n    Collection<SpatialStrategy> strategies = new ArrayList<>();\n    strategies.add(new RecursivePrefixTreeStrategy(gridGeohash, \"recursive_geohash\"));\n    strategies.add(new TermQueryPrefixTreeStrategy(gridQuad, \"termquery_quad\"));\n    strategies.add(new PointVectorStrategy(ctx, \"pointvector\"));\n    strategies.add(new BBoxStrategy(ctx, \"bbox\"));\n    strategies.add(new SerializedDVStrategy(ctx, \"serialized\"));\n    for (SpatialStrategy strategy : strategies) {\n      testEqualsHashcode(strategy);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashCode().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashCode().mjava","sourceNew":"  @Test\n  public void testEqualsHashCode() {\n\n    switch (random().nextInt(4)) {//0-3\n      case 0: predicate = SpatialOperation.Contains; break;\n      case 1: predicate = SpatialOperation.IsWithin; break;\n\n      default: predicate = SpatialOperation.Intersects; break;\n    }\n    final SpatialPrefixTree gridQuad = new QuadPrefixTree(ctx,10);\n    final SpatialPrefixTree gridGeohash = new GeohashPrefixTree(ctx,10);\n\n    Collection<SpatialStrategy> strategies = new ArrayList<>();\n    RecursivePrefixTreeStrategy recursive_geohash = new RecursivePrefixTreeStrategy(gridGeohash, \"recursive_geohash\");\n    strategies.add(recursive_geohash);\n    strategies.add(new TermQueryPrefixTreeStrategy(gridQuad, \"termquery_quad\"));\n    strategies.add(new PointVectorStrategy(ctx, \"pointvector\"));\n    strategies.add(new BBoxStrategy(ctx, \"bbox\"));\n    final SerializedDVStrategy serialized = new SerializedDVStrategy(ctx, \"serialized\");\n    strategies.add(serialized);\n    strategies.add(new CompositeSpatialStrategy(\"composite\", recursive_geohash, serialized));\n    for (SpatialStrategy strategy : strategies) {\n      testEqualsHashcode(strategy);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsHashCode() {\n\n    switch (random().nextInt(4)) {//0-3\n      case 0: predicate = SpatialOperation.Contains; break;\n      case 1: predicate = SpatialOperation.IsWithin; break;\n\n      default: predicate = SpatialOperation.Intersects; break;\n    }\n    final SpatialPrefixTree gridQuad = new QuadPrefixTree(ctx,10);\n    final SpatialPrefixTree gridGeohash = new GeohashPrefixTree(ctx,10);\n\n    Collection<SpatialStrategy> strategies = new ArrayList<>();\n    RecursivePrefixTreeStrategy recursive_geohash = new RecursivePrefixTreeStrategy(gridGeohash, \"recursive_geohash\");\n    strategies.add(recursive_geohash);\n    strategies.add(new TermQueryPrefixTreeStrategy(gridQuad, \"termquery_quad\"));\n    strategies.add(new PointVectorStrategy(ctx, \"pointvector\"));\n    strategies.add(new BBoxStrategy(ctx, \"bbox\"));\n    final SerializedDVStrategy serialized = new SerializedDVStrategy(ctx, \"serialized\");\n    strategies.add(serialized);\n    strategies.add(new CompositeSpatialStrategy(\"composite\", recursive_geohash, serialized));\n    for (SpatialStrategy strategy : strategies) {\n      testEqualsHashcode(strategy);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashCode().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashCode().mjava","sourceNew":"  @Test\n  public void testEqualsHashCode() {\n\n    switch (random().nextInt(4)) {//0-3\n      case 0: predicate = SpatialOperation.Contains; break;\n      case 1: predicate = SpatialOperation.IsWithin; break;\n\n      default: predicate = SpatialOperation.Intersects; break;\n    }\n    final SpatialPrefixTree gridQuad = new QuadPrefixTree(ctx,10);\n    final SpatialPrefixTree gridGeohash = new GeohashPrefixTree(ctx,10);\n\n    Collection<SpatialStrategy> strategies = new ArrayList<>();\n    RecursivePrefixTreeStrategy recursive_geohash = new RecursivePrefixTreeStrategy(gridGeohash, \"recursive_geohash\");\n    strategies.add(recursive_geohash);\n    strategies.add(new TermQueryPrefixTreeStrategy(gridQuad, \"termquery_quad\"));\n    strategies.add(new PointVectorStrategy(ctx, \"pointvector\"));\n    strategies.add(new BBoxStrategy(ctx, \"bbox\"));\n    final SerializedDVStrategy serialized = new SerializedDVStrategy(ctx, \"serialized\");\n    strategies.add(serialized);\n    strategies.add(new CompositeSpatialStrategy(\"composite\", recursive_geohash, serialized));\n    for (SpatialStrategy strategy : strategies) {\n      testEqualsHashcode(strategy);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsHashCode() {\n\n    switch (random().nextInt(4)) {//0-3\n      case 0: predicate = SpatialOperation.Contains; break;\n      case 1: predicate = SpatialOperation.IsWithin; break;\n\n      default: predicate = SpatialOperation.Intersects; break;\n    }\n    final SpatialPrefixTree gridQuad = new QuadPrefixTree(ctx,10);\n    final SpatialPrefixTree gridGeohash = new GeohashPrefixTree(ctx,10);\n\n    Collection<SpatialStrategy> strategies = new ArrayList<>();\n    RecursivePrefixTreeStrategy recursive_geohash = new RecursivePrefixTreeStrategy(gridGeohash, \"recursive_geohash\");\n    strategies.add(recursive_geohash);\n    strategies.add(new TermQueryPrefixTreeStrategy(gridQuad, \"termquery_quad\"));\n    strategies.add(new PointVectorStrategy(ctx, \"pointvector\"));\n    strategies.add(new BBoxStrategy(ctx, \"bbox\"));\n    final SerializedDVStrategy serialized = new SerializedDVStrategy(ctx, \"serialized\");\n    strategies.add(serialized);\n    strategies.add(new CompositeSpatialStrategy(\"composite\", recursive_geohash, serialized));\n    for (SpatialStrategy strategy : strategies) {\n      testEqualsHashcode(strategy);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1068799b5537c6408504cf7e15cb90ba57491440":["c659c37800c0dfd82fa025b5834f4ab065903d11"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1068799b5537c6408504cf7e15cb90ba57491440"],"af2638813028b254a88b418ebeafb541afb49653":["11e8ea32003f6ccf3282ad6c05ca47eec277e928","112d77ac8d3e10a362516ad834c9a11d35c94234"],"11e8ea32003f6ccf3282ad6c05ca47eec277e928":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["11e8ea32003f6ccf3282ad6c05ca47eec277e928"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"],"c659c37800c0dfd82fa025b5834f4ab065903d11":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1068799b5537c6408504cf7e15cb90ba57491440":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["11e8ea32003f6ccf3282ad6c05ca47eec277e928"],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11e8ea32003f6ccf3282ad6c05ca47eec277e928":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c659c37800c0dfd82fa025b5834f4ab065903d11"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"c659c37800c0dfd82fa025b5834f4ab065903d11":["1068799b5537c6408504cf7e15cb90ba57491440"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}