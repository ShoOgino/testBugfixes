{"path":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random.nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed);\n        assertEquals(expected.fieldType().storeTermVectors(), fi.storeTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random.nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed);\n        assertEquals(expected.fieldType().storeTermVectors(), fi.storeTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random().nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed);\n        assertEquals(expected.fieldType().storeTermVectors(), fi.storeTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random.nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed);\n        assertEquals(expected.fieldType().storeTermVectors(), fi.storeTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random().nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed());\n        assertEquals(expected.fieldType().storeTermVectors(), fi.hasVectors());\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random().nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed);\n        assertEquals(expected.fieldType().storeTermVectors(), fi.storeTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2dee33619431ada2a7a07f5fe2dbd94bac6a460","date":1337274029,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random().nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = _TestUtil.getFieldInfos(si);\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed());\n        assertEquals(expected.fieldType().storeTermVectors(), fi.hasVectors());\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random().nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed());\n        assertEquals(expected.fieldType().storeTermVectors(), fi.hasVectors());\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random().nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfoPerCommit si : sis) {\n      FieldInfos fis = _TestUtil.getFieldInfos(si.info);\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed());\n        assertEquals(expected.fieldType().storeTermVectors(), fi.hasVectors());\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random().nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = _TestUtil.getFieldInfos(si);\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed());\n        assertEquals(expected.fieldType().storeTermVectors(), fi.hasVectors());\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random().nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfoPerCommit si : sis) {\n      FieldInfos fis = _TestUtil.getFieldInfos(si.info);\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed());\n        assertEquals(expected.fieldType().storeTermVectors(), fi.hasVectors());\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random().nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfo si : sis) {\n      FieldInfos fis = si.getFieldInfos();\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed);\n        assertEquals(expected.fieldType().storeTermVectors(), fi.storeTermVector);\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8435160e9702b19398118ddf76b61c846612b6a4","date":1380349140,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random().nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfoPerCommit si : sis) {\n      FieldInfos fis = SegmentReader.readFieldInfos(si);\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed());\n        assertEquals(expected.fieldType().storeTermVectors(), fi.hasVectors());\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random().nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfoPerCommit si : sis) {\n      FieldInfos fis = _TestUtil.getFieldInfos(si.info);\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed());\n        assertEquals(expected.fieldType().storeTermVectors(), fi.hasVectors());\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random().nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentCommitInfo si : sis) {\n      FieldInfos fis = SegmentReader.readFieldInfos(si);\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed());\n        assertEquals(expected.fieldType().storeTermVectors(), fi.hasVectors());\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random().nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentInfoPerCommit si : sis) {\n      FieldInfos fis = SegmentReader.readFieldInfos(si);\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed());\n        assertEquals(expected.fieldType().storeTermVectors(), fi.hasVectors());\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random().nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentCommitInfo si : sis) {\n      FieldInfos fis = SegmentReader.readFieldInfos(si);\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed());\n        assertEquals(expected.fieldType().storeTermVectors(), fi.hasVectors());\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random().nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentCommitInfo si : sis) {\n      FieldInfos fis = SegmentReader.readFieldInfos(si);\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed());\n        assertEquals(expected.fieldType().storeTermVectors(), fi.hasVectors());\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random().nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentCommitInfo si : sis) {\n      FieldInfos fis = SegmentReader.readFieldInfos(si);\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed());\n        assertEquals(expected.fieldType().storeTermVectors(), fi.hasVectors());\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random().nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentCommitInfo si : sis) {\n      FieldInfos fis = SegmentReader.readFieldInfos(si);\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed());\n        assertEquals(expected.fieldType().storeTermVectors(), fi.hasVectors());\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random().nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentCommitInfo si : sis) {\n      FieldInfos fis = SegmentReader.readFieldInfos(si);\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed());\n        assertEquals(expected.fieldType().storeTermVectors(), fi.hasVectors());\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random().nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentCommitInfo si : sis) {\n      FieldInfos fis = SegmentReader.readFieldInfos(si);\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed());\n        assertEquals(expected.fieldType().storeTermVectors(), fi.hasVectors());\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"256a0e54e76f18e115a43e7fe793b54d4e9a3005","date":1412426514,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random().nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentCommitInfo si : sis) {\n      FieldInfos fis = IndexWriter.readFieldInfos(si);\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed());\n        assertEquals(expected.fieldType().storeTermVectors(), fi.hasVectors());\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random().nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentCommitInfo si : sis) {\n      FieldInfos fis = SegmentReader.readFieldInfos(si);\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed());\n        assertEquals(expected.fieldType().storeTermVectors(), fi.hasVectors());\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random().nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentCommitInfo si : sis) {\n      FieldInfos fis = IndexWriter.readFieldInfos(si);\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed());\n        assertEquals(expected.fieldType().storeTermVectors(), fi.hasVectors());\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random().nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentCommitInfo si : sis) {\n      FieldInfos fis = SegmentReader.readFieldInfos(si);\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed());\n        assertEquals(expected.fieldType().storeTermVectors(), fi.hasVectors());\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random().nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentCommitInfo si : sis) {\n      FieldInfos fis = IndexWriter.readFieldInfos(si);\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexOptions(), fi.getIndexOptions());\n        assertEquals(expected.fieldType().storeTermVectors(), fi.hasVectors());\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random().nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentCommitInfo si : sis) {\n      FieldInfos fis = IndexWriter.readFieldInfos(si);\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed());\n        assertEquals(expected.fieldType().storeTermVectors(), fi.hasVectors());\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random().nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n    for (SegmentCommitInfo si : sis) {\n      FieldInfos fis = IndexWriter.readFieldInfos(si);\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed());\n        assertEquals(expected.fieldType().storeTermVectors(), fi.hasVectors());\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random().nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentCommitInfo si : sis) {\n      FieldInfos fis = IndexWriter.readFieldInfos(si);\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed());\n        assertEquals(expected.fieldType().storeTermVectors(), fi.hasVectors());\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random().nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n    for (SegmentCommitInfo si : sis) {\n      FieldInfos fis = IndexWriter.readFieldInfos(si);\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexOptions(), fi.getIndexOptions());\n        assertEquals(expected.fieldType().storeTermVectors(), fi.hasVectors());\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random().nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n    for (SegmentCommitInfo si : sis) {\n      FieldInfos fis = IndexWriter.readFieldInfos(si);\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexed(), fi.isIndexed());\n        assertEquals(expected.fieldType().storeTermVectors(), fi.hasVectors());\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConsistentFieldNumbers#testManyFields().mjava","sourceNew":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random().nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n    for (SegmentCommitInfo si : sis) {\n      FieldInfos fis = IndexWriter.readFieldInfos(si);\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexOptions(), fi.getIndexOptions());\n        assertEquals(expected.fieldType().storeTermVectors(), fi.hasVectors());\n      }\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testManyFields() throws Exception {\n    final int NUM_DOCS = atLeast(200);\n    final int MAX_FIELDS = atLeast(50);\n\n    int[][] docs = new int[NUM_DOCS][4];\n    for (int i = 0; i < docs.length; i++) {\n      for (int j = 0; j < docs[i].length;j++) {\n        docs[i][j] = random().nextInt(MAX_FIELDS);\n      }\n    }\n\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    for (int i = 0; i < NUM_DOCS; i++) {\n      Document d = new Document();\n      for (int j = 0; j < docs[i].length; j++) {\n        d.add(getField(docs[i][j]));\n      }\n\n      writer.addDocument(d);\n    }\n\n    writer.forceMerge(1);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentCommitInfo si : sis) {\n      FieldInfos fis = IndexWriter.readFieldInfos(si);\n\n      for (FieldInfo fi : fis) {\n        Field expected = getField(Integer.parseInt(fi.name));\n        assertEquals(expected.fieldType().indexOptions(), fi.getIndexOptions());\n        assertEquals(expected.fieldType().storeTermVectors(), fi.hasVectors());\n      }\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["8435160e9702b19398118ddf76b61c846612b6a4"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"256a0e54e76f18e115a43e7fe793b54d4e9a3005":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["d2dee33619431ada2a7a07f5fe2dbd94bac6a460"],"8435160e9702b19398118ddf76b61c846612b6a4":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["256a0e54e76f18e115a43e7fe793b54d4e9a3005"],"3184874f7f3aca850248483485b4995343066875":["9bb9a29a5e71a90295f175df8919802993142c9a"],"d2dee33619431ada2a7a07f5fe2dbd94bac6a460":["76923f6a33f2c4bec7f584e3f251261afe7ea276"],"76923f6a33f2c4bec7f584e3f251261afe7ea276":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","9d153abcf92dc5329d98571a8c3035df9bd80648"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["3384e6013a93e4d11b7d75388693f8d0388602bf","3184874f7f3aca850248483485b4995343066875"],"9bb9a29a5e71a90295f175df8919802993142c9a":["d0ef034a4f10871667ae75181537775ddcf8ade4","256a0e54e76f18e115a43e7fe793b54d4e9a3005"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["3184874f7f3aca850248483485b4995343066875","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"256a0e54e76f18e115a43e7fe793b54d4e9a3005":["3384e6013a93e4d11b7d75388693f8d0388602bf","9bb9a29a5e71a90295f175df8919802993142c9a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"8435160e9702b19398118ddf76b61c846612b6a4":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"3184874f7f3aca850248483485b4995343066875":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"d2dee33619431ada2a7a07f5fe2dbd94bac6a460":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"76923f6a33f2c4bec7f584e3f251261afe7ea276":["d2dee33619431ada2a7a07f5fe2dbd94bac6a460"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["8435160e9702b19398118ddf76b61c846612b6a4"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"9bb9a29a5e71a90295f175df8919802993142c9a":["3184874f7f3aca850248483485b4995343066875"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["256a0e54e76f18e115a43e7fe793b54d4e9a3005","9bb9a29a5e71a90295f175df8919802993142c9a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["76923f6a33f2c4bec7f584e3f251261afe7ea276","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}