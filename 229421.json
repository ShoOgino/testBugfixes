{"path":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#sendError(SolrCore,SolrQueryRequest,ServletRequest,HttpServletResponse,Throwable).mjava","commits":[{"id":"d8d46584d4a299aaed53fdd79f1cd77f222aee1e","date":1331071171,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#sendError(SolrCore,SolrQueryRequest,ServletRequest,HttpServletResponse,Throwable).mjava","pathOld":"/dev/null","sourceNew":"  protected void sendError(SolrCore core, \n      SolrQueryRequest req, \n      ServletRequest request, \n      HttpServletResponse response, \n      Throwable ex) throws IOException {\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if(ex instanceof Exception) {\n        solrResp.setException((Exception)ex);\n      }\n      else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      if(core==null) {\n        core = cores.getCore(\"\"); // default core\n      }\n      if(req==null) {\n        req = new SolrQueryRequestBase(core,new ServletSolrParams(request)) {};\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(req);\n      writeResponse(solrResp, response, writer, req, Method.GET);\n    }\n    catch( Throwable t ) { // This error really does not matter\n      SimpleOrderedMap info = new SimpleOrderedMap();\n      int code=getErrorInfo(ex, info);\n      response.sendError( code, info.toString() );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3a1414cd924076db5133d968732dfb93e7bf360c","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#sendError(SolrCore,SolrQueryRequest,ServletRequest,HttpServletResponse,Throwable).mjava","pathOld":"/dev/null","sourceNew":"  protected void sendError(SolrCore core, \n      SolrQueryRequest req, \n      ServletRequest request, \n      HttpServletResponse response, \n      Throwable ex) throws IOException {\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if(ex instanceof Exception) {\n        solrResp.setException((Exception)ex);\n      }\n      else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      if(core==null) {\n        core = cores.getCore(\"\"); // default core\n      }\n      if(req==null) {\n        req = new SolrQueryRequestBase(core,new ServletSolrParams(request)) {};\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(req);\n      writeResponse(solrResp, response, writer, req, Method.GET);\n    }\n    catch( Throwable t ) { // This error really does not matter\n      SimpleOrderedMap info = new SimpleOrderedMap();\n      int code=getErrorInfo(ex, info);\n      response.sendError( code, info.toString() );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7d0565444d6381434fbff66cecf07da249f2bb4","date":1357484111,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#sendError(SolrCore,SolrQueryRequest,ServletRequest,HttpServletResponse,Throwable).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#sendError(SolrCore,SolrQueryRequest,ServletRequest,HttpServletResponse,Throwable).mjava","sourceNew":"  protected void sendError(SolrCore core, \n      SolrQueryRequest req, \n      ServletRequest request, \n      HttpServletResponse response, \n      Throwable ex) throws IOException {\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if(ex instanceof Exception) {\n        solrResp.setException((Exception)ex);\n      }\n      else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      if(core==null) {\n        core = cores.getCore(\"\"); // default core\n      }\n      if(req==null) {\n        final SolrParams solrParams;\n        if (request instanceof HttpServletRequest) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(((HttpServletRequest) request).getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String,String>emptyMap());\n        }\n        req = new SolrQueryRequestBase(core, solrParams) {};\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(req);\n      writeResponse(solrResp, response, writer, req, Method.GET);\n    }\n    catch( Throwable t ) { // This error really does not matter\n      SimpleOrderedMap info = new SimpleOrderedMap();\n      int code=getErrorInfo(ex, info);\n      response.sendError( code, info.toString() );\n    }\n  }\n\n","sourceOld":"  protected void sendError(SolrCore core, \n      SolrQueryRequest req, \n      ServletRequest request, \n      HttpServletResponse response, \n      Throwable ex) throws IOException {\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if(ex instanceof Exception) {\n        solrResp.setException((Exception)ex);\n      }\n      else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      if(core==null) {\n        core = cores.getCore(\"\"); // default core\n      }\n      if(req==null) {\n        req = new SolrQueryRequestBase(core,new ServletSolrParams(request)) {};\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(req);\n      writeResponse(solrResp, response, writer, req, Method.GET);\n    }\n    catch( Throwable t ) { // This error really does not matter\n      SimpleOrderedMap info = new SimpleOrderedMap();\n      int code=getErrorInfo(ex, info);\n      response.sendError( code, info.toString() );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#sendError(SolrCore,SolrQueryRequest,ServletRequest,HttpServletResponse,Throwable).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#sendError(SolrCore,SolrQueryRequest,ServletRequest,HttpServletResponse,Throwable).mjava","sourceNew":"  protected void sendError(SolrCore core, \n      SolrQueryRequest req, \n      ServletRequest request, \n      HttpServletResponse response, \n      Throwable ex) throws IOException {\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if(ex instanceof Exception) {\n        solrResp.setException((Exception)ex);\n      }\n      else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      if(core==null) {\n        core = cores.getCore(\"\"); // default core\n      }\n      if(req==null) {\n        final SolrParams solrParams;\n        if (request instanceof HttpServletRequest) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(((HttpServletRequest) request).getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String,String>emptyMap());\n        }\n        req = new SolrQueryRequestBase(core, solrParams) {};\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(req);\n      writeResponse(solrResp, response, writer, req, Method.GET);\n    }\n    catch( Throwable t ) { // This error really does not matter\n      SimpleOrderedMap info = new SimpleOrderedMap();\n      int code=getErrorInfo(ex, info);\n      response.sendError( code, info.toString() );\n    }\n  }\n\n","sourceOld":"  protected void sendError(SolrCore core, \n      SolrQueryRequest req, \n      ServletRequest request, \n      HttpServletResponse response, \n      Throwable ex) throws IOException {\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if(ex instanceof Exception) {\n        solrResp.setException((Exception)ex);\n      }\n      else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      if(core==null) {\n        core = cores.getCore(\"\"); // default core\n      }\n      if(req==null) {\n        req = new SolrQueryRequestBase(core,new ServletSolrParams(request)) {};\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(req);\n      writeResponse(solrResp, response, writer, req, Method.GET);\n    }\n    catch( Throwable t ) { // This error really does not matter\n      SimpleOrderedMap info = new SimpleOrderedMap();\n      int code=getErrorInfo(ex, info);\n      response.sendError( code, info.toString() );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37","date":1362545433,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#sendError(SolrCore,SolrQueryRequest,ServletRequest,HttpServletResponse,Throwable).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#sendError(SolrCore,SolrQueryRequest,ServletRequest,HttpServletResponse,Throwable).mjava","sourceNew":"  protected void sendError(SolrCore core, \n      SolrQueryRequest req, \n      ServletRequest request, \n      HttpServletResponse response, \n      Throwable ex) throws IOException {\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if(ex instanceof Exception) {\n        solrResp.setException((Exception)ex);\n      }\n      else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      if(core==null) {\n        core = cores.getCore(\"\"); // default core\n      }\n      if(req==null) {\n        final SolrParams solrParams;\n        if (request instanceof HttpServletRequest) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(((HttpServletRequest) request).getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String,String>emptyMap());\n        }\n        req = new SolrQueryRequestBase(core, solrParams) {};\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(req);\n      writeResponse(solrResp, response, writer, req, Method.GET);\n    }\n    catch( Throwable t ) { // This error really does not matter\n      SimpleOrderedMap info = new SimpleOrderedMap();\n      int code = ResponseUtils.getErrorInfo(ex, info, log);\n      response.sendError( code, info.toString() );\n    }\n  }\n\n","sourceOld":"  protected void sendError(SolrCore core, \n      SolrQueryRequest req, \n      ServletRequest request, \n      HttpServletResponse response, \n      Throwable ex) throws IOException {\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if(ex instanceof Exception) {\n        solrResp.setException((Exception)ex);\n      }\n      else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      if(core==null) {\n        core = cores.getCore(\"\"); // default core\n      }\n      if(req==null) {\n        final SolrParams solrParams;\n        if (request instanceof HttpServletRequest) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(((HttpServletRequest) request).getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String,String>emptyMap());\n        }\n        req = new SolrQueryRequestBase(core, solrParams) {};\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(req);\n      writeResponse(solrResp, response, writer, req, Method.GET);\n    }\n    catch( Throwable t ) { // This error really does not matter\n      SimpleOrderedMap info = new SimpleOrderedMap();\n      int code=getErrorInfo(ex, info);\n      response.sendError( code, info.toString() );\n    }\n  }\n\n","bugFix":null,"bugIntro":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a1414cd924076db5133d968732dfb93e7bf360c","date":1384793222,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#sendError(SolrCore,SolrQueryRequest,ServletRequest,HttpServletResponse,Throwable).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#sendError(SolrCore,SolrQueryRequest,ServletRequest,HttpServletResponse,Throwable).mjava","sourceNew":"  protected void sendError(SolrCore core, \n      SolrQueryRequest req, \n      ServletRequest request, \n      HttpServletResponse response, \n      Throwable ex) throws IOException {\n    SolrCore localCore = null;\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if(ex instanceof Exception) {\n        solrResp.setException((Exception)ex);\n      }\n      else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      if(core==null) {\n        localCore = cores.getCore(\"\"); // default core\n      } else {\n        localCore = core;\n      }\n      if(req==null) {\n        final SolrParams solrParams;\n        if (request instanceof HttpServletRequest) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(((HttpServletRequest) request).getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String,String>emptyMap());\n        }\n        req = new SolrQueryRequestBase(core, solrParams) {};\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(req);\n      writeResponse(solrResp, response, writer, req, Method.GET);\n    }\n    catch( Throwable t ) { // This error really does not matter\n      SimpleOrderedMap info = new SimpleOrderedMap();\n      int code = ResponseUtils.getErrorInfo(ex, info, log);\n      response.sendError( code, info.toString() );\n    } finally {\n      if (core == null && localCore != null) {\n        localCore.close();\n      }\n    }\n  }\n\n","sourceOld":"  protected void sendError(SolrCore core, \n      SolrQueryRequest req, \n      ServletRequest request, \n      HttpServletResponse response, \n      Throwable ex) throws IOException {\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if(ex instanceof Exception) {\n        solrResp.setException((Exception)ex);\n      }\n      else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      if(core==null) {\n        core = cores.getCore(\"\"); // default core\n      }\n      if(req==null) {\n        final SolrParams solrParams;\n        if (request instanceof HttpServletRequest) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(((HttpServletRequest) request).getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String,String>emptyMap());\n        }\n        req = new SolrQueryRequestBase(core, solrParams) {};\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(req);\n      writeResponse(solrResp, response, writer, req, Method.GET);\n    }\n    catch( Throwable t ) { // This error really does not matter\n      SimpleOrderedMap info = new SimpleOrderedMap();\n      int code = ResponseUtils.getErrorInfo(ex, info, log);\n      response.sendError( code, info.toString() );\n    }\n  }\n\n","bugFix":["d8d46584d4a299aaed53fdd79f1cd77f222aee1e"],"bugIntro":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#sendError(SolrCore,SolrQueryRequest,ServletRequest,HttpServletResponse,Throwable).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#sendError(SolrCore,SolrQueryRequest,ServletRequest,HttpServletResponse,Throwable).mjava","sourceNew":"  protected void sendError(SolrCore core, \n      SolrQueryRequest req, \n      ServletRequest request, \n      HttpServletResponse response, \n      Throwable ex) throws IOException {\n    SolrCore localCore = null;\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if(ex instanceof Exception) {\n        solrResp.setException((Exception)ex);\n      }\n      else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      if(core==null) {\n        localCore = cores.getCore(\"\"); // default core\n      } else {\n        localCore = core;\n      }\n      if(req==null) {\n        final SolrParams solrParams;\n        if (request instanceof HttpServletRequest) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(((HttpServletRequest) request).getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String,String>emptyMap());\n        }\n        req = new SolrQueryRequestBase(core, solrParams) {};\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(req);\n      writeResponse(solrResp, response, writer, req, Method.GET);\n    }\n    catch( Throwable t ) { // This error really does not matter\n      SimpleOrderedMap info = new SimpleOrderedMap();\n      int code = ResponseUtils.getErrorInfo(ex, info, log);\n      response.sendError( code, info.toString() );\n    } finally {\n      if (core == null && localCore != null) {\n        localCore.close();\n      }\n    }\n  }\n\n","sourceOld":"  protected void sendError(SolrCore core, \n      SolrQueryRequest req, \n      ServletRequest request, \n      HttpServletResponse response, \n      Throwable ex) throws IOException {\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if(ex instanceof Exception) {\n        solrResp.setException((Exception)ex);\n      }\n      else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      if(core==null) {\n        core = cores.getCore(\"\"); // default core\n      }\n      if(req==null) {\n        final SolrParams solrParams;\n        if (request instanceof HttpServletRequest) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(((HttpServletRequest) request).getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String,String>emptyMap());\n        }\n        req = new SolrQueryRequestBase(core, solrParams) {};\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(req);\n      writeResponse(solrResp, response, writer, req, Method.GET);\n    }\n    catch( Throwable t ) { // This error really does not matter\n      SimpleOrderedMap info = new SimpleOrderedMap();\n      int code = ResponseUtils.getErrorInfo(ex, info, log);\n      response.sendError( code, info.toString() );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","date":1389633998,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#sendError(SolrCore,SolrQueryRequest,ServletRequest,HttpServletResponse,Throwable).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#sendError(SolrCore,SolrQueryRequest,ServletRequest,HttpServletResponse,Throwable).mjava","sourceNew":"  protected void sendError(SolrCore core, \n      SolrQueryRequest req, \n      ServletRequest request, \n      HttpServletResponse response, \n      Throwable ex) throws IOException {\n    Exception exp = null;\n    SolrCore localCore = null;\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if(ex instanceof Exception) {\n        solrResp.setException((Exception)ex);\n      }\n      else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      if(core==null) {\n        localCore = cores.getCore(\"\"); // default core\n      } else {\n        localCore = core;\n      }\n      if(req==null) {\n        final SolrParams solrParams;\n        if (request instanceof HttpServletRequest) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(((HttpServletRequest) request).getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String,String>emptyMap());\n        }\n        req = new SolrQueryRequestBase(core, solrParams) {};\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(req);\n      writeResponse(solrResp, response, writer, req, Method.GET);\n    }\n    catch (Exception e) { // This error really does not matter\n         exp = e;\n    } finally {\n      try {\n        if (exp != null) {\n          SimpleOrderedMap info = new SimpleOrderedMap();\n          int code = ResponseUtils.getErrorInfo(ex, info, log);\n          response.sendError(code, info.toString());\n        }\n      } finally {\n        if (core == null && localCore != null) {\n          localCore.close();\n        }\n      }\n   }\n  }\n\n","sourceOld":"  protected void sendError(SolrCore core, \n      SolrQueryRequest req, \n      ServletRequest request, \n      HttpServletResponse response, \n      Throwable ex) throws IOException {\n    SolrCore localCore = null;\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if(ex instanceof Exception) {\n        solrResp.setException((Exception)ex);\n      }\n      else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      if(core==null) {\n        localCore = cores.getCore(\"\"); // default core\n      } else {\n        localCore = core;\n      }\n      if(req==null) {\n        final SolrParams solrParams;\n        if (request instanceof HttpServletRequest) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(((HttpServletRequest) request).getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String,String>emptyMap());\n        }\n        req = new SolrQueryRequestBase(core, solrParams) {};\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(req);\n      writeResponse(solrResp, response, writer, req, Method.GET);\n    }\n    catch( Throwable t ) { // This error really does not matter\n      SimpleOrderedMap info = new SimpleOrderedMap();\n      int code = ResponseUtils.getErrorInfo(ex, info, log);\n      response.sendError( code, info.toString() );\n    } finally {\n      if (core == null && localCore != null) {\n        localCore.close();\n      }\n    }\n  }\n\n","bugFix":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37","d8d46584d4a299aaed53fdd79f1cd77f222aee1e","3a1414cd924076db5133d968732dfb93e7bf360c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d805d691fbf3ca8aafa5397568ec761790b88622","date":1417093891,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#sendError(SolrCore,SolrQueryRequest,ServletRequest,HttpServletResponse,Throwable).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#sendError(SolrCore,SolrQueryRequest,ServletRequest,HttpServletResponse,Throwable).mjava","sourceNew":"  protected void sendError(SolrCore core,\n      SolrQueryRequest req, \n      ServletRequest request, \n      HttpServletResponse response, \n      Throwable ex) throws IOException {\n    Exception exp = null;\n    SolrCore localCore = null;\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if(ex instanceof Exception) {\n        solrResp.setException((Exception)ex);\n      }\n      else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      if(core==null) {\n        localCore = cores.getCore(\"\"); // default core\n      } else {\n        localCore = core;\n      }\n      if(req==null) {\n        final SolrParams solrParams;\n        if (request instanceof HttpServletRequest) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(((HttpServletRequest) request).getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String,String>emptyMap());\n        }\n        req = new SolrQueryRequestBase(core, solrParams) {};\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(req);\n      writeResponse(solrResp, response, writer, req, Method.GET);\n    }\n    catch (Exception e) { // This error really does not matter\n         exp = e;\n    } finally {\n      try {\n        if (exp != null) {\n          SimpleOrderedMap info = new SimpleOrderedMap();\n          int code = ResponseUtils.getErrorInfo(ex, info, log);\n          sendError(response, code, info.toString());\n        }\n      } finally {\n        if (core == null && localCore != null) {\n          localCore.close();\n        }\n      }\n   }\n  }\n\n","sourceOld":"  protected void sendError(SolrCore core, \n      SolrQueryRequest req, \n      ServletRequest request, \n      HttpServletResponse response, \n      Throwable ex) throws IOException {\n    Exception exp = null;\n    SolrCore localCore = null;\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if(ex instanceof Exception) {\n        solrResp.setException((Exception)ex);\n      }\n      else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      if(core==null) {\n        localCore = cores.getCore(\"\"); // default core\n      } else {\n        localCore = core;\n      }\n      if(req==null) {\n        final SolrParams solrParams;\n        if (request instanceof HttpServletRequest) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(((HttpServletRequest) request).getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String,String>emptyMap());\n        }\n        req = new SolrQueryRequestBase(core, solrParams) {};\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(req);\n      writeResponse(solrResp, response, writer, req, Method.GET);\n    }\n    catch (Exception e) { // This error really does not matter\n         exp = e;\n    } finally {\n      try {\n        if (exp != null) {\n          SimpleOrderedMap info = new SimpleOrderedMap();\n          int code = ResponseUtils.getErrorInfo(ex, info, log);\n          response.sendError(code, info.toString());\n        }\n      } finally {\n        if (core == null && localCore != null) {\n          localCore.close();\n        }\n      }\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a760e2135dfe20a04dea360873d4de1c6a0280bb","date":1430762855,"type":5,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#sendError(Throwable).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#sendError(SolrCore,SolrQueryRequest,ServletRequest,HttpServletResponse,Throwable).mjava","sourceNew":"  protected void sendError(Throwable ex) throws IOException {\n    Exception exp = null;\n    SolrCore localCore = null;\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if (ex instanceof Exception) {\n        solrResp.setException((Exception) ex);\n      } else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      if (core == null) {\n        localCore = cores.getCore(\"\"); // default core\n      } else {\n        localCore = core;\n      }\n      if (solrReq == null) {\n        final SolrParams solrParams;\n        if (req != null) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(req.getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String, String>emptyMap());\n        }\n        solrReq = new SolrQueryRequestBase(core, solrParams) {\n        };\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(solrReq);\n      writeResponse(solrResp, writer, Method.GET);\n    } catch (Exception e) { // This error really does not matter\n      exp = e;\n    } finally {\n      try {\n        if (exp != null) {\n          SimpleOrderedMap info = new SimpleOrderedMap();\n          int code = ResponseUtils.getErrorInfo(ex, info, SolrDispatchFilter.log);\n          sendError(code, info.toString());\n        }\n      } finally {\n        if (core == null && localCore != null) {\n          localCore.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void sendError(SolrCore core,\n      SolrQueryRequest req, \n      ServletRequest request, \n      HttpServletResponse response, \n      Throwable ex) throws IOException {\n    Exception exp = null;\n    SolrCore localCore = null;\n    try {\n      SolrQueryResponse solrResp = new SolrQueryResponse();\n      if(ex instanceof Exception) {\n        solrResp.setException((Exception)ex);\n      }\n      else {\n        solrResp.setException(new RuntimeException(ex));\n      }\n      if(core==null) {\n        localCore = cores.getCore(\"\"); // default core\n      } else {\n        localCore = core;\n      }\n      if(req==null) {\n        final SolrParams solrParams;\n        if (request instanceof HttpServletRequest) {\n          // use GET parameters if available:\n          solrParams = SolrRequestParsers.parseQueryString(((HttpServletRequest) request).getQueryString());\n        } else {\n          // we have no params at all, use empty ones:\n          solrParams = new MapSolrParams(Collections.<String,String>emptyMap());\n        }\n        req = new SolrQueryRequestBase(core, solrParams) {};\n      }\n      QueryResponseWriter writer = core.getQueryResponseWriter(req);\n      writeResponse(solrResp, response, writer, req, Method.GET);\n    }\n    catch (Exception e) { // This error really does not matter\n         exp = e;\n    } finally {\n      try {\n        if (exp != null) {\n          SimpleOrderedMap info = new SimpleOrderedMap();\n          int code = ResponseUtils.getErrorInfo(ex, info, log);\n          sendError(response, code, info.toString());\n        }\n      } finally {\n        if (core == null && localCore != null) {\n          localCore.close();\n        }\n      }\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["d8d46584d4a299aaed53fdd79f1cd77f222aee1e","c7d0565444d6381434fbff66cecf07da249f2bb4"],"d8d46584d4a299aaed53fdd79f1cd77f222aee1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d805d691fbf3ca8aafa5397568ec761790b88622":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"c7d0565444d6381434fbff66cecf07da249f2bb4":["d8d46584d4a299aaed53fdd79f1cd77f222aee1e"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d8d46584d4a299aaed53fdd79f1cd77f222aee1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["d805d691fbf3ca8aafa5397568ec761790b88622"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37","3a1414cd924076db5133d968732dfb93e7bf360c"],"3a1414cd924076db5133d968732dfb93e7bf360c":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["c7d0565444d6381434fbff66cecf07da249f2bb4"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["3a1414cd924076db5133d968732dfb93e7bf360c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a760e2135dfe20a04dea360873d4de1c6a0280bb"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d8d46584d4a299aaed53fdd79f1cd77f222aee1e":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c7d0565444d6381434fbff66cecf07da249f2bb4","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"c7d0565444d6381434fbff66cecf07da249f2bb4":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"d805d691fbf3ca8aafa5397568ec761790b88622":["a760e2135dfe20a04dea360873d4de1c6a0280bb"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d8d46584d4a299aaed53fdd79f1cd77f222aee1e","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","3a1414cd924076db5133d968732dfb93e7bf360c"],"3a1414cd924076db5133d968732dfb93e7bf360c":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["d805d691fbf3ca8aafa5397568ec761790b88622"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}