{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#open().mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/CloudSolrStream#open().mjava","sourceNew":"  /**\n  * Opens the CloudSolrStream\n  *\n  ***/\n  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n    if(this.cache != null) {\n      this.cloudSolrClient = this.cache.getCloudSolrClient(zkHost);\n    } else {\n      this.cloudSolrClient = new CloudSolrClient(zkHost);\n      this.cloudSolrClient.connect();\n    }\n    constructStreams();\n    openStreams();\n  }\n\n","sourceOld":"  /**\n  * Opens the CloudSolrStream\n  *\n  ***/\n  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n    if(this.cache != null) {\n      this.cloudSolrClient = this.cache.getCloudSolrClient(zkHost);\n    } else {\n      this.cloudSolrClient = new CloudSolrClient(zkHost);\n      this.cloudSolrClient.connect();\n    }\n    constructStreams();\n    openStreams();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#open().mjava","sourceNew":"  /**\n  * Opens the CloudSolrStream\n  *\n  ***/\n  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n    if(this.cache != null) {\n      this.cloudSolrClient = this.cache.getCloudSolrClient(zkHost);\n    } else {\n      this.cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n      this.cloudSolrClient.connect();\n    }\n    constructStreams();\n    openStreams();\n  }\n\n","sourceOld":"  /**\n  * Opens the CloudSolrStream\n  *\n  ***/\n  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n    if(this.cache != null) {\n      this.cloudSolrClient = this.cache.getCloudSolrClient(zkHost);\n    } else {\n      this.cloudSolrClient = new CloudSolrClient(zkHost);\n      this.cloudSolrClient.connect();\n    }\n    constructStreams();\n    openStreams();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#open().mjava","sourceNew":"  /**\n  * Opens the CloudSolrStream\n  *\n  ***/\n  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n    if(this.cache != null) {\n      this.cloudSolrClient = this.cache.getCloudSolrClient(zkHost);\n    } else {\n      this.cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n      this.cloudSolrClient.connect();\n    }\n    constructStreams();\n    openStreams();\n  }\n\n","sourceOld":"  /**\n  * Opens the CloudSolrStream\n  *\n  ***/\n  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n    if(this.cache != null) {\n      this.cloudSolrClient = this.cache.getCloudSolrClient(zkHost);\n    } else {\n      this.cloudSolrClient = new CloudSolrClient(zkHost);\n      this.cloudSolrClient.connect();\n    }\n    constructStreams();\n    openStreams();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#open().mjava","sourceNew":"  /**\n  * Opens the CloudSolrStream\n  *\n  ***/\n  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n    if (this.streamContext != null && this.streamContext.getSolrClientCache() != null) {\n      this.cloudSolrClient = this.streamContext.getSolrClientCache().getCloudSolrClient(zkHost);\n    } else {\n      this.cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n      this.cloudSolrClient.connect();\n    }\n    constructStreams();\n    openStreams();\n  }\n\n","sourceOld":"  /**\n  * Opens the CloudSolrStream\n  *\n  ***/\n  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n    if(this.cache != null) {\n      this.cloudSolrClient = this.cache.getCloudSolrClient(zkHost);\n    } else {\n      this.cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n      this.cloudSolrClient.connect();\n    }\n    constructStreams();\n    openStreams();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#open().mjava","sourceNew":"  /**\n  * Opens the CloudSolrStream\n  *\n  ***/\n  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n    if (this.streamContext != null && this.streamContext.getSolrClientCache() != null) {\n      this.cloudSolrClient = this.streamContext.getSolrClientCache().getCloudSolrClient(zkHost);\n    } else {\n      this.cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n      this.cloudSolrClient.connect();\n    }\n    constructStreams();\n    openStreams();\n  }\n\n","sourceOld":"  /**\n  * Opens the CloudSolrStream\n  *\n  ***/\n  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n    if(this.cache != null) {\n      this.cloudSolrClient = this.cache.getCloudSolrClient(zkHost);\n    } else {\n      this.cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n      this.cloudSolrClient.connect();\n    }\n    constructStreams();\n    openStreams();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#open().mjava","sourceNew":"  /**\n  * Opens the CloudSolrStream\n  *\n  ***/\n  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n    if (this.streamContext != null && this.streamContext.getSolrClientCache() != null) {\n      this.cloudSolrClient = this.streamContext.getSolrClientCache().getCloudSolrClient(zkHost);\n    } else {\n      this.cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n      this.cloudSolrClient.connect();\n    }\n    constructStreams();\n    openStreams();\n  }\n\n","sourceOld":"  /**\n  * Opens the CloudSolrStream\n  *\n  ***/\n  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n    if(this.cache != null) {\n      this.cloudSolrClient = this.cache.getCloudSolrClient(zkHost);\n    } else {\n      this.cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n      this.cloudSolrClient.connect();\n    }\n    constructStreams();\n    openStreams();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#open().mjava","sourceNew":"  /**\n  * Opens the CloudSolrStream\n  *\n  ***/\n  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n    if (this.streamContext != null && this.streamContext.getSolrClientCache() != null) {\n      this.cloudSolrClient = this.streamContext.getSolrClientCache().getCloudSolrClient(zkHost);\n    } else {\n      this.cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n      this.cloudSolrClient.connect();\n    }\n    constructStreams();\n    openStreams();\n  }\n\n","sourceOld":"  /**\n  * Opens the CloudSolrStream\n  *\n  ***/\n  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n    if(this.cache != null) {\n      this.cloudSolrClient = this.cache.getCloudSolrClient(zkHost);\n    } else {\n      this.cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n      this.cloudSolrClient.connect();\n    }\n    constructStreams();\n    openStreams();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#open().mjava","sourceNew":"  /**\n  * Opens the CloudSolrStream\n  *\n  ***/\n  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n    constructStreams();\n    openStreams();\n  }\n\n","sourceOld":"  /**\n  * Opens the CloudSolrStream\n  *\n  ***/\n  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n    if (this.streamContext != null && this.streamContext.getSolrClientCache() != null) {\n      this.cloudSolrClient = this.streamContext.getSolrClientCache().getCloudSolrClient(zkHost);\n    } else {\n      this.cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n      this.cloudSolrClient.connect();\n    }\n    constructStreams();\n    openStreams();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#open().mjava","sourceNew":"  /**\n  * Opens the CloudSolrStream\n  *\n  ***/\n  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n    constructStreams();\n    openStreams();\n  }\n\n","sourceOld":"  /**\n  * Opens the CloudSolrStream\n  *\n  ***/\n  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n    if (this.streamContext != null && this.streamContext.getSolrClientCache() != null) {\n      this.cloudSolrClient = this.streamContext.getSolrClientCache().getCloudSolrClient(zkHost);\n    } else {\n      this.cloudSolrClient = new Builder()\n          .withZkHost(zkHost)\n          .build();\n      this.cloudSolrClient.connect();\n    }\n    constructStreams();\n    openStreams();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#open().mjava","sourceNew":"  /**\n  * Opens the CloudSolrStream\n  *\n  ***/\n  public void open() throws IOException {\n    this.tuples = new TreeSet<>();\n    this.solrStreams = new ArrayList<>();\n    this.eofTuples = Collections.synchronizedMap(new HashMap<>());\n    constructStreams();\n    openStreams();\n  }\n\n","sourceOld":"  /**\n  * Opens the CloudSolrStream\n  *\n  ***/\n  public void open() throws IOException {\n    this.tuples = new TreeSet();\n    this.solrStreams = new ArrayList();\n    this.eofTuples = Collections.synchronizedMap(new HashMap());\n    constructStreams();\n    openStreams();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["f00f1c5fad501b66705121feb623f8cfbb6712f9","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","826d15444ddf61716dc768c229cd54b2c2ccce1c"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["e66a459d38c1c4a2f97128433dab546f683a9fed","826d15444ddf61716dc768c229cd54b2c2ccce1c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["e66a459d38c1c4a2f97128433dab546f683a9fed","d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c405288c4553ffb50ab8ca5adbdde9881bcec4e4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","e66a459d38c1c4a2f97128433dab546f683a9fed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}