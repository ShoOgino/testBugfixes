{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeCollectionStateWatcher(String,CollectionStateWatcher).mjava","commits":[{"id":"5b4df85b7268ca40452d6c01343d8eb00ed1f70a","date":1463171656,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeCollectionStateWatcher(String,CollectionStateWatcher).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Remove a watcher from a collection's watch list.\n   *\n   * This allows Zookeeper watches to be removed if there is no interest in the\n   * collection.\n   *\n   * @param collection the collection\n   * @param watcher    the watcher\n   */\n  public void removeCollectionStateWatcher(String collection, CollectionStateWatcher watcher) {\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null)\n        return null;\n      v.stateWatchers.remove(watcher);\n      if (v.canBeRemoved())\n        return null;\n      return v;\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeCollectionStateWatcher(String,CollectionStateWatcher).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Remove a watcher from a collection's watch list.\n   *\n   * This allows Zookeeper watches to be removed if there is no interest in the\n   * collection.\n   *\n   * @param collection the collection\n   * @param watcher    the watcher\n   */\n  public void removeCollectionStateWatcher(String collection, CollectionStateWatcher watcher) {\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null)\n        return null;\n      v.stateWatchers.remove(watcher);\n      if (v.canBeRemoved())\n        return null;\n      return v;\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeCollectionStateWatcher(String,CollectionStateWatcher).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Remove a watcher from a collection's watch list.\n   *\n   * This allows Zookeeper watches to be removed if there is no interest in the\n   * collection.\n   *\n   * @param collection the collection\n   * @param watcher    the watcher\n   */\n  public void removeCollectionStateWatcher(String collection, CollectionStateWatcher watcher) {\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null)\n        return null;\n      v.stateWatchers.remove(watcher);\n      if (v.canBeRemoved())\n        return null;\n      return v;\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeCollectionStateWatcher(String,CollectionStateWatcher).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Remove a watcher from a collection's watch list.\n   *\n   * This allows Zookeeper watches to be removed if there is no interest in the\n   * collection.\n   *\n   * @param collection the collection\n   * @param watcher    the watcher\n   */\n  public void removeCollectionStateWatcher(String collection, CollectionStateWatcher watcher) {\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null)\n        return null;\n      v.stateWatchers.remove(watcher);\n      if (v.canBeRemoved())\n        return null;\n      return v;\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4","date":1509452916,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeCollectionStateWatcher(String,CollectionStateWatcher).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeCollectionStateWatcher(String,CollectionStateWatcher).mjava","sourceNew":"  /**\n   * Remove a watcher from a collection's watch list.\n   *\n   * This allows Zookeeper watches to be removed if there is no interest in the\n   * collection.\n   *\n   * @param collection the collection\n   * @param watcher    the watcher\n   */\n  public void removeCollectionStateWatcher(String collection, CollectionStateWatcher watcher) {\n    AtomicBoolean reconstructState = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null)\n        return null;\n      v.stateWatchers.remove(watcher);\n      if (v.canBeRemoved()) {\n        watchedCollectionStates.remove(collection);\n        lazyCollectionStates.put(collection, new LazyCollectionRef(collection));\n        reconstructState.set(true);\n        return null;\n      }\n      return v;\n    });\n    if (reconstructState.get()) {\n      synchronized (getUpdateLock()) {\n        constructState(Collections.emptySet());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove a watcher from a collection's watch list.\n   *\n   * This allows Zookeeper watches to be removed if there is no interest in the\n   * collection.\n   *\n   * @param collection the collection\n   * @param watcher    the watcher\n   */\n  public void removeCollectionStateWatcher(String collection, CollectionStateWatcher watcher) {\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null)\n        return null;\n      v.stateWatchers.remove(watcher);\n      if (v.canBeRemoved())\n        return null;\n      return v;\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b366e7dd3172289251a86be96031af4002cd19c","date":1560790783,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeCollectionStateWatcher(String,CollectionStateWatcher).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeCollectionStateWatcher(String,CollectionStateWatcher).mjava","sourceNew":"  /**\n   * Remove a watcher from a collection's watch list.\n   * <p>\n   * This allows Zookeeper watches to be removed if there is no interest in the\n   * collection.\n   * </p>\n   *\n   * @see #registerCollectionStateWatcher\n   * @param collection the collection\n   * @param watcher    the watcher\n   */\n  public void removeCollectionStateWatcher(String collection, CollectionStateWatcher watcher) {\n    final DocCollectionAndLiveNodesWatcherWrapper wrapper\n      = new DocCollectionAndLiveNodesWatcherWrapper(collection, watcher);\n\n    removeDocCollectionWatcher(collection, wrapper);\n    removeLiveNodesListener(wrapper);\n  }\n\n","sourceOld":"  /**\n   * Remove a watcher from a collection's watch list.\n   *\n   * This allows Zookeeper watches to be removed if there is no interest in the\n   * collection.\n   *\n   * @param collection the collection\n   * @param watcher    the watcher\n   */\n  public void removeCollectionStateWatcher(String collection, CollectionStateWatcher watcher) {\n    AtomicBoolean reconstructState = new AtomicBoolean(false);\n    collectionWatches.compute(collection, (k, v) -> {\n      if (v == null)\n        return null;\n      v.stateWatchers.remove(watcher);\n      if (v.canBeRemoved()) {\n        watchedCollectionStates.remove(collection);\n        lazyCollectionStates.put(collection, new LazyCollectionRef(collection));\n        reconstructState.set(true);\n        return null;\n      }\n      return v;\n    });\n    if (reconstructState.get()) {\n      synchronized (getUpdateLock()) {\n        constructState(Collections.emptySet());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeCollectionStateWatcher(String,CollectionStateWatcher).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeCollectionStateWatcher(String,CollectionStateWatcher).mjava","sourceNew":"  /**\n   * Remove a watcher from a collection's watch list.\n   * <p>\n   * This allows Zookeeper watches to be removed if there is no interest in the\n   * collection.\n   * </p>\n   *\n   * @param collection the collection\n   * @param watcher    the watcher\n   * @see #registerCollectionStateWatcher\n   */\n  public void removeCollectionStateWatcher(String collection, CollectionStateWatcher watcher) {\n    final DocCollectionAndLiveNodesWatcherWrapper wrapper\n        = new DocCollectionAndLiveNodesWatcherWrapper(collection, watcher);\n\n    removeDocCollectionWatcher(collection, wrapper);\n    removeLiveNodesListener(wrapper);\n  }\n\n","sourceOld":"  /**\n   * Remove a watcher from a collection's watch list.\n   * <p>\n   * This allows Zookeeper watches to be removed if there is no interest in the\n   * collection.\n   * </p>\n   *\n   * @see #registerCollectionStateWatcher\n   * @param collection the collection\n   * @param watcher    the watcher\n   */\n  public void removeCollectionStateWatcher(String collection, CollectionStateWatcher watcher) {\n    final DocCollectionAndLiveNodesWatcherWrapper wrapper\n      = new DocCollectionAndLiveNodesWatcherWrapper(collection, watcher);\n\n    removeDocCollectionWatcher(collection, wrapper);\n    removeLiveNodesListener(wrapper);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2668c99990e4c94a78bac005aa682b7c5986d23a":["7b366e7dd3172289251a86be96031af4002cd19c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b366e7dd3172289251a86be96031af4002cd19c":["06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4"],"06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"2668c99990e4c94a78bac005aa682b7c5986d23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad30c6a479e764150a3316e57263319775f1df2","5b4df85b7268ca40452d6c01343d8eb00ed1f70a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"7b366e7dd3172289251a86be96031af4002cd19c":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4":["7b366e7dd3172289251a86be96031af4002cd19c"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}