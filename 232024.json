{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollectionRetry(String,int,int,int).mjava","commits":[{"id":"29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3","date":1460654262,"type":1,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollectionRetry(String,int,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#createCollectionRetry(String,int,int,int).mjava","sourceNew":"  protected void createCollectionRetry(String testCollectionName, int numShards, int replicationFactor, int maxShardsPerNode)\n      throws SolrServerException, IOException {\n    CollectionAdminResponse resp = createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    if (resp.getResponse().get(\"failure\") != null) {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n\n      resp = createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n\n      if (resp.getResponse().get(\"failure\") != null) {\n        fail(\"Could not create \" + testCollectionName);\n      }\n    }\n  }\n\n","sourceOld":"  private void createCollectionRetry(String testCollectionName, int numShards, int replicationFactor, int maxShardsPerNode)\n      throws SolrServerException, IOException {\n    CollectionAdminResponse resp = createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    if (resp.getResponse().get(\"failure\") != null) {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n\n      resp = createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n\n      if (resp.getResponse().get(\"failure\") != null) {\n        fail(\"Could not create \" + testCollectionName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac97ea104d893f16aab430d9904473bc1f233f3c","date":1496249396,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollectionRetry(String,int,int,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollectionRetry(String,int,int,int).mjava","sourceNew":"  protected void createCollectionRetry(String testCollectionName, int numShards, int replicationFactor, int maxShardsPerNode)\n      throws SolrServerException, IOException {\n    CollectionAdminResponse resp = createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    if (resp.getResponse().get(\"failure\") != null) {\n      CollectionAdminRequest.Delete req = CollectionAdminRequest.deleteCollection(testCollectionName);\n      req.process(cloudClient);\n\n      resp = createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n\n      if (resp.getResponse().get(\"failure\") != null) {\n        fail(\"Could not create \" + testCollectionName);\n      }\n    }\n  }\n\n","sourceOld":"  protected void createCollectionRetry(String testCollectionName, int numShards, int replicationFactor, int maxShardsPerNode)\n      throws SolrServerException, IOException {\n    CollectionAdminResponse resp = createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    if (resp.getResponse().get(\"failure\") != null) {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n\n      resp = createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n\n      if (resp.getResponse().get(\"failure\") != null) {\n        fail(\"Could not create \" + testCollectionName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3217321f3e1d7922898c6c633d17acfa840d6875","date":1496257480,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollectionRetry(String,int,int,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollectionRetry(String,int,int,int).mjava","sourceNew":"  protected void createCollectionRetry(String testCollectionName, int numShards, int replicationFactor, int maxShardsPerNode)\n      throws SolrServerException, IOException {\n    CollectionAdminResponse resp = createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    if (resp.getResponse().get(\"failure\") != null) {\n      CollectionAdminRequest.Delete req = CollectionAdminRequest.deleteCollection(testCollectionName);\n      req.process(cloudClient);\n\n      resp = createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n\n      if (resp.getResponse().get(\"failure\") != null) {\n        fail(\"Could not create \" + testCollectionName);\n      }\n    }\n  }\n\n","sourceOld":"  protected void createCollectionRetry(String testCollectionName, int numShards, int replicationFactor, int maxShardsPerNode)\n      throws SolrServerException, IOException {\n    CollectionAdminResponse resp = createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    if (resp.getResponse().get(\"failure\") != null) {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n\n      resp = createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n\n      if (resp.getResponse().get(\"failure\") != null) {\n        fail(\"Could not create \" + testCollectionName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollectionRetry(String,int,int,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollectionRetry(String,int,int,int).mjava","sourceNew":"  protected void createCollectionRetry(String testCollectionName, int numShards, int replicationFactor, int maxShardsPerNode)\n      throws SolrServerException, IOException {\n    CollectionAdminResponse resp = createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    if (resp.getResponse().get(\"failure\") != null) {\n      CollectionAdminRequest.Delete req = CollectionAdminRequest.deleteCollection(testCollectionName);\n      req.process(cloudClient);\n\n      resp = createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n\n      if (resp.getResponse().get(\"failure\") != null) {\n        fail(\"Could not create \" + testCollectionName);\n      }\n    }\n  }\n\n","sourceOld":"  protected void createCollectionRetry(String testCollectionName, int numShards, int replicationFactor, int maxShardsPerNode)\n      throws SolrServerException, IOException {\n    CollectionAdminResponse resp = createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    if (resp.getResponse().get(\"failure\") != null) {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n\n      resp = createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n\n      if (resp.getResponse().get(\"failure\") != null) {\n        fail(\"Could not create \" + testCollectionName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollectionRetry(String,int,int,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollectionRetry(String,int,int,int).mjava","sourceNew":"  protected void createCollectionRetry(String testCollectionName, int numShards, int replicationFactor, int maxShardsPerNode)\n      throws SolrServerException, IOException {\n    CollectionAdminResponse resp = createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    if (resp.getResponse().get(\"failure\") != null) {\n      CollectionAdminRequest.Delete req = CollectionAdminRequest.deleteCollection(testCollectionName);\n      req.process(cloudClient);\n\n      resp = createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n\n      if (resp.getResponse().get(\"failure\") != null) {\n        fail(\"Could not create \" + testCollectionName);\n      }\n    }\n  }\n\n","sourceOld":"  protected void createCollectionRetry(String testCollectionName, int numShards, int replicationFactor, int maxShardsPerNode)\n      throws SolrServerException, IOException {\n    CollectionAdminResponse resp = createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    if (resp.getResponse().get(\"failure\") != null) {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n\n      resp = createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n\n      if (resp.getResponse().get(\"failure\") != null) {\n        fail(\"Could not create \" + testCollectionName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollectionRetry(String,String,int,int,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollectionRetry(String,int,int,int).mjava","sourceNew":"  protected void createCollectionRetry(String testCollectionName, String configSetName, int numShards, int replicationFactor, int maxShardsPerNode)\n      throws SolrServerException, IOException {\n    CollectionAdminResponse resp = createCollection(testCollectionName, configSetName, numShards, replicationFactor, maxShardsPerNode);\n    if (resp.getResponse().get(\"failure\") != null) {\n      CollectionAdminRequest.Delete req = CollectionAdminRequest.deleteCollection(testCollectionName);\n      req.process(cloudClient);\n\n      resp = createCollection(testCollectionName, configSetName, numShards, replicationFactor, maxShardsPerNode);\n\n      if (resp.getResponse().get(\"failure\") != null) {\n        fail(\"Could not create \" + testCollectionName);\n      }\n    }\n  }\n\n","sourceOld":"  protected void createCollectionRetry(String testCollectionName, int numShards, int replicationFactor, int maxShardsPerNode)\n      throws SolrServerException, IOException {\n    CollectionAdminResponse resp = createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    if (resp.getResponse().get(\"failure\") != null) {\n      CollectionAdminRequest.Delete req = CollectionAdminRequest.deleteCollection(testCollectionName);\n      req.process(cloudClient);\n\n      resp = createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n\n      if (resp.getResponse().get(\"failure\") != null) {\n        fail(\"Could not create \" + testCollectionName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollectionRetry(String,String,int,int,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollectionRetry(String,int,int,int).mjava","sourceNew":"  protected void createCollectionRetry(String testCollectionName, String configSetName, int numShards, int replicationFactor, int maxShardsPerNode)\n      throws SolrServerException, IOException {\n    CollectionAdminResponse resp = createCollection(testCollectionName, configSetName, numShards, replicationFactor, maxShardsPerNode);\n    if (resp.getResponse().get(\"failure\") != null) {\n      CollectionAdminRequest.Delete req = CollectionAdminRequest.deleteCollection(testCollectionName);\n      req.process(cloudClient);\n\n      resp = createCollection(testCollectionName, configSetName, numShards, replicationFactor, maxShardsPerNode);\n\n      if (resp.getResponse().get(\"failure\") != null) {\n        fail(\"Could not create \" + testCollectionName);\n      }\n    }\n  }\n\n","sourceOld":"  protected void createCollectionRetry(String testCollectionName, int numShards, int replicationFactor, int maxShardsPerNode)\n      throws SolrServerException, IOException {\n    CollectionAdminResponse resp = createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    if (resp.getResponse().get(\"failure\") != null) {\n      CollectionAdminRequest.Delete req = CollectionAdminRequest.deleteCollection(testCollectionName);\n      req.process(cloudClient);\n\n      resp = createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n\n      if (resp.getResponse().get(\"failure\") != null) {\n        fail(\"Could not create \" + testCollectionName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createCollectionRetry(String,int,int,int).mjava","sourceNew":null,"sourceOld":"  protected void createCollectionRetry(String testCollectionName, int numShards, int replicationFactor, int maxShardsPerNode)\n      throws SolrServerException, IOException {\n    CollectionAdminResponse resp = createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n    if (resp.getResponse().get(\"failure\") != null) {\n      CollectionAdminRequest.Delete req = CollectionAdminRequest.deleteCollection(testCollectionName);\n      req.process(cloudClient);\n\n      resp = createCollection(testCollectionName, numShards, replicationFactor, maxShardsPerNode);\n\n      if (resp.getResponse().get(\"failure\") != null) {\n        fail(\"Could not create \" + testCollectionName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"197bbedf08450ade98a11f4a0001448059666bec":["42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["e9017cf144952056066919f1ebc7897ff9bd71b1","197bbedf08450ade98a11f4a0001448059666bec"],"3217321f3e1d7922898c6c633d17acfa840d6875":["29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3","ac97ea104d893f16aab430d9904473bc1f233f3c"],"29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["3217321f3e1d7922898c6c633d17acfa840d6875","197bbedf08450ade98a11f4a0001448059666bec"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3","3217321f3e1d7922898c6c633d17acfa840d6875"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"197bbedf08450ade98a11f4a0001448059666bec":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["3217321f3e1d7922898c6c633d17acfa840d6875"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":[],"3217321f3e1d7922898c6c633d17acfa840d6875":["28288370235ed02234a64753cdbf0c6ec096304a","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3":["e9017cf144952056066919f1ebc7897ff9bd71b1","ac97ea104d893f16aab430d9904473bc1f233f3c","3217321f3e1d7922898c6c633d17acfa840d6875","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["e9017cf144952056066919f1ebc7897ff9bd71b1","197bbedf08450ade98a11f4a0001448059666bec"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}