{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#openIndexWriter(Directory,OpenMode).mjava","commits":[{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#openIndexWriter(Directory,OpenMode).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#openLuceneIndex(Directory,OpenMode).mjava","sourceNew":"  /**\n   * A hook for extensions of this class to provide their own\n   * {@link IndexWriter} implementation or instance. Extending classes can\n   * instantiate and configure the {@link IndexWriter} as they see fit,\n   * including setting a {@link org.apache.lucene.index.MergeScheduler}, or\n   * {@link org.apache.lucene.index.IndexDeletionPolicy}, different RAM size\n   * etc.<br>\n   * <b>NOTE:</b> the instance this method returns will be closed upon calling\n   * to {@link #close()}. If you wish to do something different, you should\n   * override {@link #closeIndexWriter()}.\n   * \n   * @param directory\n   *          the {@link Directory} on top of which an {@link IndexWriter}\n   *          should be opened.\n   * @param openMode\n   *          see {@link OpenMode}\n   */\n  protected void openIndexWriter(Directory directory, OpenMode openMode)\n      throws IOException {\n    // Make sure we use a MergePolicy which merges segments in-order and thus\n    // keeps the doc IDs ordered as well (this is crucial for the taxonomy\n    // index).\n    IndexWriterConfig config = new IndexWriterConfig(Version.LUCENE_40,\n        new KeywordAnalyzer()).setOpenMode(openMode).setMergePolicy(\n        new LogByteSizeMergePolicy());\n    indexWriter = new IndexWriter(directory, config);\n  }\n\n","sourceOld":"  /**\n   * A hook for extensions of this class to provide their own\n   * {@link IndexWriter} implementation or instance. Extending classes can\n   * instantiate and configure the {@link IndexWriter} as they see fit,\n   * including setting a {@link org.apache.lucene.index.MergeScheduler}, or\n   * {@link org.apache.lucene.index.IndexDeletionPolicy}, different RAM size\n   * etc.<br>\n   * <b>NOTE:</b> the instance this method returns will be closed upon calling\n   * to {@link #close()}. If you wish to do something different, you should\n   * override {@link #closeLuceneIndex()}.\n   * \n   * @param directory the {@link Directory} on top of wich an\n   *        {@link IndexWriter} should be opened.\n   * @param openMode see {@link OpenMode}\n   */\n  protected void openLuceneIndex (Directory directory, OpenMode openMode) \n  throws CorruptIndexException, LockObtainFailedException, IOException {\n    // Make sure we use a MergePolicy which merges segments in-order and thus\n    // keeps the doc IDs ordered as well (this is crucial for the taxonomy\n    // index).\n    IndexWriterConfig config = new IndexWriterConfig(Version.LUCENE_30,\n        new KeywordAnalyzer()).setOpenMode(openMode).setMergePolicy(\n        new LogByteSizeMergePolicy());\n    indexWriter = new IndexWriter(directory, config);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ccebf8d83184ae6dc4876b9ac2a3bb68765e53f6","date":1320306100,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#openIndexWriter(Directory,OpenMode).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#openIndexWriter(Directory,OpenMode).mjava","sourceNew":"  /**\n   * A hook for extensions of this class to provide their own\n   * {@link IndexWriter} implementation or instance. Extending classes can\n   * instantiate and configure the {@link IndexWriter} as they see fit,\n   * including setting a {@link org.apache.lucene.index.MergeScheduler}, or\n   * {@link org.apache.lucene.index.IndexDeletionPolicy}, different RAM size\n   * etc.<br>\n   * <b>NOTE:</b> the instance this method returns will be closed upon calling\n   * to {@link #close()}.\n   * \n   * @param directory\n   *          the {@link Directory} on top of which an {@link IndexWriter}\n   *          should be opened.\n   * @param openMode\n   *          see {@link OpenMode}\n   */\n  protected IndexWriter openIndexWriter(Directory directory, OpenMode openMode)\n      throws IOException {\n    // Make sure we use a MergePolicy which merges segments in-order and thus\n    // keeps the doc IDs ordered as well (this is crucial for the taxonomy\n    // index).\n    IndexWriterConfig config = new IndexWriterConfig(Version.LUCENE_40,\n        new KeywordAnalyzer()).setOpenMode(openMode).setMergePolicy(\n        new LogByteSizeMergePolicy());\n    return new IndexWriter(directory, config);\n  }\n\n","sourceOld":"  /**\n   * A hook for extensions of this class to provide their own\n   * {@link IndexWriter} implementation or instance. Extending classes can\n   * instantiate and configure the {@link IndexWriter} as they see fit,\n   * including setting a {@link org.apache.lucene.index.MergeScheduler}, or\n   * {@link org.apache.lucene.index.IndexDeletionPolicy}, different RAM size\n   * etc.<br>\n   * <b>NOTE:</b> the instance this method returns will be closed upon calling\n   * to {@link #close()}. If you wish to do something different, you should\n   * override {@link #closeIndexWriter()}.\n   * \n   * @param directory\n   *          the {@link Directory} on top of which an {@link IndexWriter}\n   *          should be opened.\n   * @param openMode\n   *          see {@link OpenMode}\n   */\n  protected void openIndexWriter(Directory directory, OpenMode openMode)\n      throws IOException {\n    // Make sure we use a MergePolicy which merges segments in-order and thus\n    // keeps the doc IDs ordered as well (this is crucial for the taxonomy\n    // index).\n    IndexWriterConfig config = new IndexWriterConfig(Version.LUCENE_40,\n        new KeywordAnalyzer()).setOpenMode(openMode).setMergePolicy(\n        new LogByteSizeMergePolicy());\n    indexWriter = new IndexWriter(directory, config);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9faeb5fb9565674fd02b39d8fc365311961f1938","date":1322463944,"type":4,"author":"Doron Cohen","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#openIndexWriter(Directory,OpenMode).mjava","sourceNew":null,"sourceOld":"  /**\n   * A hook for extensions of this class to provide their own\n   * {@link IndexWriter} implementation or instance. Extending classes can\n   * instantiate and configure the {@link IndexWriter} as they see fit,\n   * including setting a {@link org.apache.lucene.index.MergeScheduler}, or\n   * {@link org.apache.lucene.index.IndexDeletionPolicy}, different RAM size\n   * etc.<br>\n   * <b>NOTE:</b> the instance this method returns will be closed upon calling\n   * to {@link #close()}.\n   * \n   * @param directory\n   *          the {@link Directory} on top of which an {@link IndexWriter}\n   *          should be opened.\n   * @param openMode\n   *          see {@link OpenMode}\n   */\n  protected IndexWriter openIndexWriter(Directory directory, OpenMode openMode)\n      throws IOException {\n    // Make sure we use a MergePolicy which merges segments in-order and thus\n    // keeps the doc IDs ordered as well (this is crucial for the taxonomy\n    // index).\n    IndexWriterConfig config = new IndexWriterConfig(Version.LUCENE_40,\n        new KeywordAnalyzer()).setOpenMode(openMode).setMergePolicy(\n        new LogByteSizeMergePolicy());\n    return new IndexWriter(directory, config);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9faeb5fb9565674fd02b39d8fc365311961f1938":["ccebf8d83184ae6dc4876b9ac2a3bb68765e53f6"],"ccebf8d83184ae6dc4876b9ac2a3bb68765e53f6":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9faeb5fb9565674fd02b39d8fc365311961f1938"]},"commit2Childs":{"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["ccebf8d83184ae6dc4876b9ac2a3bb68765e53f6"],"9faeb5fb9565674fd02b39d8fc365311961f1938":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"ccebf8d83184ae6dc4876b9ac2a3bb68765e53f6":["9faeb5fb9565674fd02b39d8fc365311961f1938"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}