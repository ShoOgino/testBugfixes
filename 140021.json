{"path":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","commits":[{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(context);\n        if (dis == null) {\n          return null;\n        }\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi = innerWeight.scorer(context, scoreDocsInOrder, topScorer, acceptDocs);\n      }\n\n      if (disi == null) {\n        return null;\n      }\n      return new ConstantScorer(disi, this, queryWeight);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context,  ScorerContext scorerContext) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(context);\n        if (dis == null) {\n          return null;\n        }\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi = innerWeight.scorer(context, scorerContext);\n      }\n\n      if (disi == null) {\n        return null;\n      }\n      return new ConstantScorer(disi, this, queryWeight);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, final Bits acceptDocs) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(context, acceptDocs);\n        if (dis == null) {\n          return null;\n        }\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi = innerWeight.scorer(context, scoreDocsInOrder, topScorer, acceptDocs);\n      }\n\n      if (disi == null) {\n        return null;\n      }\n      return new ConstantScorer(disi, this, queryWeight);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(context);\n        if (dis == null) {\n          return null;\n        }\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi = innerWeight.scorer(context, scoreDocsInOrder, topScorer, acceptDocs);\n      }\n\n      if (disi == null) {\n        return null;\n      }\n      return new ConstantScorer(disi, this, queryWeight);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, final Bits acceptDocs) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(context, acceptDocs);\n        if (dis == null) {\n          return null;\n        }\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi = innerWeight.scorer(context, scoreDocsInOrder, topScorer, acceptDocs);\n      }\n\n      if (disi == null) {\n        return null;\n      }\n      return new ConstantScorer(disi, this, queryWeight);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, final Bits acceptDocs) throws IOException {\n      final DocIdSetIterator disi;\n      if (filter != null) {\n        assert query == null;\n        final DocIdSet dis = filter.getDocIdSet(context, acceptDocs);\n        if (dis == null) {\n          return null;\n        }\n        disi = dis.iterator();\n      } else {\n        assert query != null && innerWeight != null;\n        disi = innerWeight.scorer(context, scoreDocsInOrder, topScorer, acceptDocs);\n      }\n\n      if (disi == null) {\n        return null;\n      }\n      return new ConstantScorer(disi, this, queryWeight);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6620df8541b174097b1133a4fc370adb2e570524"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["6620df8541b174097b1133a4fc370adb2e570524"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}