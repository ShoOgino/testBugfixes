{"path":"lucene/facet/src/java/org/apache/lucene/facet/simple/DocumentBuilder#build(IndexDocument).mjava","commits":[{"id":"7554009c97f9365492660c1df175b6349f7ec05c","date":1384886154,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/DocumentBuilder#build(IndexDocument).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/FacetIndexWriter#addDocument(IndexDocument).mjava","sourceNew":"  public IndexDocument build(IndexDocument doc) throws IOException {\n    // Find all FacetFields, collated by the actual field:\n    Map<String,List<FacetField>> byField = new HashMap<String,List<FacetField>>();\n\n    // ... and also all SortedSetDocValuesFacetFields:\n    Map<String,List<SortedSetDocValuesFacetField>> dvByField = new HashMap<String,List<SortedSetDocValuesFacetField>>();\n\n    // ... and also all AssociationFacetFields\n    Map<String,List<AssociationFacetField>> assocByField = new HashMap<String,List<AssociationFacetField>>();\n\n    for(IndexableField field : doc.indexableFields()) {\n      if (field.fieldType() == FacetField.TYPE) {\n        FacetField facetField = (FacetField) field;\n        FacetsConfig.DimConfig dimConfig = config.getDimConfig(facetField.dim);\n        String indexFieldName = dimConfig.indexFieldName;\n        List<FacetField> fields = byField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<FacetField>();\n          byField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n      }\n\n      if (field.fieldType() == SortedSetDocValuesFacetField.TYPE) {\n        SortedSetDocValuesFacetField facetField = (SortedSetDocValuesFacetField) field;\n        FacetsConfig.DimConfig dimConfig = config.getDimConfig(facetField.dim);\n        String indexFieldName = dimConfig.indexFieldName;\n        List<SortedSetDocValuesFacetField> fields = dvByField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<SortedSetDocValuesFacetField>();\n          dvByField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n      }\n\n      if (field.fieldType() == AssociationFacetField.TYPE) {\n        AssociationFacetField facetField = (AssociationFacetField) field;\n        FacetsConfig.DimConfig dimConfig = config.getDimConfig(facetField.dim);\n\n        // nocommit how to use a different default name for assocs?\n        String indexFieldName = dimConfig.indexFieldName;\n        List<AssociationFacetField> fields = assocByField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<AssociationFacetField>();\n          assocByField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n      }\n    }\n\n    List<Field> addedIndexedFields = new ArrayList<Field>();\n    List<Field> addedStoredFields = new ArrayList<Field>();\n\n    processFacetFields(byField, addedIndexedFields, addedStoredFields);\n    processSSDVFacetFields(dvByField, addedIndexedFields, addedStoredFields);\n    processAssocFacetFields(assocByField, addedIndexedFields, addedStoredFields);\n\n    //System.out.println(\"add stored: \" + addedStoredFields);\n\n    final List<IndexableField> allIndexedFields = new ArrayList<IndexableField>();\n    for(IndexableField field : doc.indexableFields()) {\n      IndexableFieldType ft = field.fieldType();\n      if (ft != FacetField.TYPE && ft != SortedSetDocValuesFacetField.TYPE && ft != AssociationFacetField.TYPE) {\n        allIndexedFields.add(field);\n      }\n    }\n    allIndexedFields.addAll(addedIndexedFields);\n\n    final List<StorableField> allStoredFields = new ArrayList<StorableField>();\n    for(StorableField field : doc.storableFields()) {\n      allStoredFields.add(field);\n    }\n    allStoredFields.addAll(addedStoredFields);\n\n    //System.out.println(\"all indexed: \" + allIndexedFields);\n    //System.out.println(\"all stored: \" + allStoredFields);\n\n    return new IndexDocument() {\n        @Override\n        public Iterable<IndexableField> indexableFields() {\n          return allIndexedFields;\n        }\n\n        @Override\n        public Iterable<StorableField> storableFields() {\n          return allStoredFields;\n        }\n      };\n  }\n\n","sourceOld":"  @Override\n  public void addDocument(final IndexDocument doc) throws IOException {\n\n    // Find all FacetFields, collated by the actual field:\n    Map<String,List<FacetField>> byField = new HashMap<String,List<FacetField>>();\n\n    // ... and also all SortedSetDocValuesFacetFields:\n    Map<String,List<SortedSetDocValuesFacetField>> dvByField = new HashMap<String,List<SortedSetDocValuesFacetField>>();\n\n    // ... and also all AssociationFacetFields\n    Map<String,List<AssociationFacetField>> assocByField = new HashMap<String,List<AssociationFacetField>>();\n\n    for(IndexableField field : doc.indexableFields()) {\n      if (field.fieldType() == FacetField.TYPE) {\n        FacetField facetField = (FacetField) field;\n        FacetsConfig.DimConfig dimConfig = config.getDimConfig(facetField.dim);\n        String indexFieldName = dimConfig.indexFieldName;\n        List<FacetField> fields = byField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<FacetField>();\n          byField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n      }\n\n      if (field.fieldType() == SortedSetDocValuesFacetField.TYPE) {\n        SortedSetDocValuesFacetField facetField = (SortedSetDocValuesFacetField) field;\n        FacetsConfig.DimConfig dimConfig = config.getDimConfig(facetField.dim);\n        String indexFieldName = dimConfig.indexFieldName;\n        List<SortedSetDocValuesFacetField> fields = dvByField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<SortedSetDocValuesFacetField>();\n          dvByField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n      }\n\n      if (field.fieldType() == AssociationFacetField.TYPE) {\n        AssociationFacetField facetField = (AssociationFacetField) field;\n        FacetsConfig.DimConfig dimConfig = config.getDimConfig(facetField.dim);\n\n        // nocommit how to use a different default name for assocs?\n        String indexFieldName = dimConfig.indexFieldName;\n        List<AssociationFacetField> fields = assocByField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<AssociationFacetField>();\n          assocByField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n      }\n    }\n\n    List<Field> addedIndexedFields = new ArrayList<Field>();\n    List<Field> addedStoredFields = new ArrayList<Field>();\n\n    processFacetFields(byField, addedIndexedFields, addedStoredFields);\n    processSSDVFacetFields(dvByField, addedIndexedFields, addedStoredFields);\n    processAssocFacetFields(assocByField, addedIndexedFields, addedStoredFields);\n\n    //System.out.println(\"add stored: \" + addedStoredFields);\n\n    final List<IndexableField> allIndexedFields = new ArrayList<IndexableField>();\n    for(IndexableField field : doc.indexableFields()) {\n      IndexableFieldType ft = field.fieldType();\n      if (ft != FacetField.TYPE && ft != SortedSetDocValuesFacetField.TYPE && ft != AssociationFacetField.TYPE) {\n        allIndexedFields.add(field);\n      }\n    }\n    allIndexedFields.addAll(addedIndexedFields);\n\n    final List<StorableField> allStoredFields = new ArrayList<StorableField>();\n    for(StorableField field : doc.storableFields()) {\n      allStoredFields.add(field);\n    }\n    allStoredFields.addAll(addedStoredFields);\n\n    //System.out.println(\"all indexed: \" + allIndexedFields);\n    //System.out.println(\"all stored: \" + allStoredFields);\n\n    super.addDocument(new IndexDocument() {\n        @Override\n        public Iterable<IndexableField> indexableFields() {\n          return allIndexedFields;\n        }\n\n        @Override\n        public Iterable<StorableField> storableFields() {\n          return allStoredFields;\n        }\n      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8c81e820a961f4822e9378d27ad18cb0eb3eb48","date":1384889043,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/DocumentBuilder#build(IndexDocument).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/DocumentBuilder#build(IndexDocument).mjava","sourceNew":"  public IndexDocument build(IndexDocument doc) throws IOException {\n    // Find all FacetFields, collated by the actual field:\n    Map<String,List<FacetField>> byField = new HashMap<String,List<FacetField>>();\n\n    // ... and also all SortedSetDocValuesFacetFields:\n    Map<String,List<SortedSetDocValuesFacetField>> dvByField = new HashMap<String,List<SortedSetDocValuesFacetField>>();\n\n    // ... and also all AssociationFacetFields\n    Map<String,List<AssociationFacetField>> assocByField = new HashMap<String,List<AssociationFacetField>>();\n\n    for(IndexableField field : doc.indexableFields()) {\n      if (field.fieldType() == FacetField.TYPE) {\n        FacetField facetField = (FacetField) field;\n        FacetsConfig.DimConfig dimConfig = config.getDimConfig(facetField.dim);\n        String indexFieldName = dimConfig.indexFieldName;\n        List<FacetField> fields = byField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<FacetField>();\n          byField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n      }\n\n      if (field.fieldType() == SortedSetDocValuesFacetField.TYPE) {\n        SortedSetDocValuesFacetField facetField = (SortedSetDocValuesFacetField) field;\n        FacetsConfig.DimConfig dimConfig = config.getDimConfig(facetField.dim);\n        String indexFieldName = dimConfig.indexFieldName;\n        List<SortedSetDocValuesFacetField> fields = dvByField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<SortedSetDocValuesFacetField>();\n          dvByField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n      }\n\n      if (field.fieldType() == AssociationFacetField.TYPE) {\n        AssociationFacetField facetField = (AssociationFacetField) field;\n        FacetsConfig.DimConfig dimConfig = config.getDimConfig(facetField.dim);\n\n        // nocommit how to use a different default name for assocs?\n        String indexFieldName = dimConfig.indexFieldName;\n        List<AssociationFacetField> fields = assocByField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<AssociationFacetField>();\n          assocByField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n\n        // Best effort: detect mis-matched types in same\n        // indexed field:\n        String type;\n        if (facetField instanceof IntAssociationFacetField) {\n          type = \"int\";\n        } else if (facetField instanceof FloatAssociationFacetField) {\n          type = \"float\";\n        } else {\n          type = \"bytes\";\n        }\n        // NOTE: not thread safe, but this is just best effort:\n        String curType = assocDimTypes.get(indexFieldName);\n        if (curType == null) {\n          assocDimTypes.put(indexFieldName, type);\n        } else if (!curType.equals(type)) {\n          throw new IllegalArgumentException(\"mixing incompatible types of AssocationFacetField (\" + curType + \" and \" + type + \") in indexed field \\\"\" + indexFieldName + \"\\\"; use FacetsConfig to change the indexFieldName for each dimension\");\n        }\n      }\n    }\n\n    List<Field> addedIndexedFields = new ArrayList<Field>();\n    List<Field> addedStoredFields = new ArrayList<Field>();\n\n    processFacetFields(byField, addedIndexedFields, addedStoredFields);\n    processSSDVFacetFields(dvByField, addedIndexedFields, addedStoredFields);\n    processAssocFacetFields(assocByField, addedIndexedFields, addedStoredFields);\n\n    //System.out.println(\"add stored: \" + addedStoredFields);\n\n    final List<IndexableField> allIndexedFields = new ArrayList<IndexableField>();\n    for(IndexableField field : doc.indexableFields()) {\n      IndexableFieldType ft = field.fieldType();\n      if (ft != FacetField.TYPE && ft != SortedSetDocValuesFacetField.TYPE && ft != AssociationFacetField.TYPE) {\n        allIndexedFields.add(field);\n      }\n    }\n    allIndexedFields.addAll(addedIndexedFields);\n\n    final List<StorableField> allStoredFields = new ArrayList<StorableField>();\n    for(StorableField field : doc.storableFields()) {\n      allStoredFields.add(field);\n    }\n    allStoredFields.addAll(addedStoredFields);\n\n    //System.out.println(\"all indexed: \" + allIndexedFields);\n    //System.out.println(\"all stored: \" + allStoredFields);\n\n    return new IndexDocument() {\n        @Override\n        public Iterable<IndexableField> indexableFields() {\n          return allIndexedFields;\n        }\n\n        @Override\n        public Iterable<StorableField> storableFields() {\n          return allStoredFields;\n        }\n      };\n  }\n\n","sourceOld":"  public IndexDocument build(IndexDocument doc) throws IOException {\n    // Find all FacetFields, collated by the actual field:\n    Map<String,List<FacetField>> byField = new HashMap<String,List<FacetField>>();\n\n    // ... and also all SortedSetDocValuesFacetFields:\n    Map<String,List<SortedSetDocValuesFacetField>> dvByField = new HashMap<String,List<SortedSetDocValuesFacetField>>();\n\n    // ... and also all AssociationFacetFields\n    Map<String,List<AssociationFacetField>> assocByField = new HashMap<String,List<AssociationFacetField>>();\n\n    for(IndexableField field : doc.indexableFields()) {\n      if (field.fieldType() == FacetField.TYPE) {\n        FacetField facetField = (FacetField) field;\n        FacetsConfig.DimConfig dimConfig = config.getDimConfig(facetField.dim);\n        String indexFieldName = dimConfig.indexFieldName;\n        List<FacetField> fields = byField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<FacetField>();\n          byField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n      }\n\n      if (field.fieldType() == SortedSetDocValuesFacetField.TYPE) {\n        SortedSetDocValuesFacetField facetField = (SortedSetDocValuesFacetField) field;\n        FacetsConfig.DimConfig dimConfig = config.getDimConfig(facetField.dim);\n        String indexFieldName = dimConfig.indexFieldName;\n        List<SortedSetDocValuesFacetField> fields = dvByField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<SortedSetDocValuesFacetField>();\n          dvByField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n      }\n\n      if (field.fieldType() == AssociationFacetField.TYPE) {\n        AssociationFacetField facetField = (AssociationFacetField) field;\n        FacetsConfig.DimConfig dimConfig = config.getDimConfig(facetField.dim);\n\n        // nocommit how to use a different default name for assocs?\n        String indexFieldName = dimConfig.indexFieldName;\n        List<AssociationFacetField> fields = assocByField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<AssociationFacetField>();\n          assocByField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n      }\n    }\n\n    List<Field> addedIndexedFields = new ArrayList<Field>();\n    List<Field> addedStoredFields = new ArrayList<Field>();\n\n    processFacetFields(byField, addedIndexedFields, addedStoredFields);\n    processSSDVFacetFields(dvByField, addedIndexedFields, addedStoredFields);\n    processAssocFacetFields(assocByField, addedIndexedFields, addedStoredFields);\n\n    //System.out.println(\"add stored: \" + addedStoredFields);\n\n    final List<IndexableField> allIndexedFields = new ArrayList<IndexableField>();\n    for(IndexableField field : doc.indexableFields()) {\n      IndexableFieldType ft = field.fieldType();\n      if (ft != FacetField.TYPE && ft != SortedSetDocValuesFacetField.TYPE && ft != AssociationFacetField.TYPE) {\n        allIndexedFields.add(field);\n      }\n    }\n    allIndexedFields.addAll(addedIndexedFields);\n\n    final List<StorableField> allStoredFields = new ArrayList<StorableField>();\n    for(StorableField field : doc.storableFields()) {\n      allStoredFields.add(field);\n    }\n    allStoredFields.addAll(addedStoredFields);\n\n    //System.out.println(\"all indexed: \" + allIndexedFields);\n    //System.out.println(\"all stored: \" + allStoredFields);\n\n    return new IndexDocument() {\n        @Override\n        public Iterable<IndexableField> indexableFields() {\n          return allIndexedFields;\n        }\n\n        @Override\n        public Iterable<StorableField> storableFields() {\n          return allStoredFields;\n        }\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"006838107b0cd2051371f3470740d23ec91b1886","date":1384950816,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/DocumentBuilder#build(IndexDocument).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/DocumentBuilder#build(IndexDocument).mjava","sourceNew":"  public IndexDocument build(IndexDocument doc) throws IOException {\n    // Find all FacetFields, collated by the actual field:\n    Map<String,List<FacetField>> byField = new HashMap<String,List<FacetField>>();\n\n    // ... and also all SortedSetDocValuesFacetFields:\n    Map<String,List<SortedSetDocValuesFacetField>> dvByField = new HashMap<String,List<SortedSetDocValuesFacetField>>();\n\n    // ... and also all AssociationFacetFields\n    Map<String,List<AssociationFacetField>> assocByField = new HashMap<String,List<AssociationFacetField>>();\n\n    Set<String> seenDims = new HashSet<String>();\n\n    for(IndexableField field : doc.indexableFields()) {\n      if (field.fieldType() == FacetField.TYPE) {\n        FacetField facetField = (FacetField) field;\n        FacetsConfig.DimConfig dimConfig = config.getDimConfig(facetField.dim);\n        if (dimConfig.multiValued == false) {\n          checkSeen(seenDims, facetField.dim);\n        }\n        String indexFieldName = dimConfig.indexFieldName;\n        List<FacetField> fields = byField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<FacetField>();\n          byField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n      }\n\n      if (field.fieldType() == SortedSetDocValuesFacetField.TYPE) {\n        SortedSetDocValuesFacetField facetField = (SortedSetDocValuesFacetField) field;\n        FacetsConfig.DimConfig dimConfig = config.getDimConfig(facetField.dim);\n        if (dimConfig.multiValued == false) {\n          checkSeen(seenDims, facetField.dim);\n        }\n        String indexFieldName = dimConfig.indexFieldName;\n        List<SortedSetDocValuesFacetField> fields = dvByField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<SortedSetDocValuesFacetField>();\n          dvByField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n      }\n\n      if (field.fieldType() == AssociationFacetField.TYPE) {\n        AssociationFacetField facetField = (AssociationFacetField) field;\n        FacetsConfig.DimConfig dimConfig = config.getDimConfig(facetField.dim);\n        if (dimConfig.multiValued == false) {\n          checkSeen(seenDims, facetField.dim);\n        }\n        if (dimConfig.hierarchical) {\n          throw new IllegalArgumentException(\"AssociationFacetField cannot be hierarchical (dim=\\\"\" + facetField.dim + \"\\\")\");\n        }\n        if (dimConfig.requireDimCount) {\n          throw new IllegalArgumentException(\"AssociationFacetField cannot requireDimCount (dim=\\\"\" + facetField.dim + \"\\\")\");\n        }\n\n        String indexFieldName = dimConfig.indexFieldName;\n        List<AssociationFacetField> fields = assocByField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<AssociationFacetField>();\n          assocByField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n\n        // Best effort: detect mis-matched types in same\n        // indexed field:\n        String type;\n        if (facetField instanceof IntAssociationFacetField) {\n          type = \"int\";\n        } else if (facetField instanceof FloatAssociationFacetField) {\n          type = \"float\";\n        } else {\n          type = \"bytes\";\n        }\n        // NOTE: not thread safe, but this is just best effort:\n        String curType = assocDimTypes.get(indexFieldName);\n        if (curType == null) {\n          assocDimTypes.put(indexFieldName, type);\n        } else if (!curType.equals(type)) {\n          throw new IllegalArgumentException(\"mixing incompatible types of AssocationFacetField (\" + curType + \" and \" + type + \") in indexed field \\\"\" + indexFieldName + \"\\\"; use FacetsConfig to change the indexFieldName for each dimension\");\n        }\n      }\n    }\n\n    List<Field> addedIndexedFields = new ArrayList<Field>();\n    List<Field> addedStoredFields = new ArrayList<Field>();\n\n    processFacetFields(byField, addedIndexedFields, addedStoredFields);\n    processSSDVFacetFields(dvByField, addedIndexedFields, addedStoredFields);\n    processAssocFacetFields(assocByField, addedIndexedFields, addedStoredFields);\n\n    //System.out.println(\"add stored: \" + addedStoredFields);\n\n    final List<IndexableField> allIndexedFields = new ArrayList<IndexableField>();\n    for(IndexableField field : doc.indexableFields()) {\n      IndexableFieldType ft = field.fieldType();\n      if (ft != FacetField.TYPE && ft != SortedSetDocValuesFacetField.TYPE && ft != AssociationFacetField.TYPE) {\n        allIndexedFields.add(field);\n      }\n    }\n    allIndexedFields.addAll(addedIndexedFields);\n\n    final List<StorableField> allStoredFields = new ArrayList<StorableField>();\n    for(StorableField field : doc.storableFields()) {\n      allStoredFields.add(field);\n    }\n    allStoredFields.addAll(addedStoredFields);\n\n    //System.out.println(\"all indexed: \" + allIndexedFields);\n    //System.out.println(\"all stored: \" + allStoredFields);\n\n    return new IndexDocument() {\n        @Override\n        public Iterable<IndexableField> indexableFields() {\n          return allIndexedFields;\n        }\n\n        @Override\n        public Iterable<StorableField> storableFields() {\n          return allStoredFields;\n        }\n      };\n  }\n\n","sourceOld":"  public IndexDocument build(IndexDocument doc) throws IOException {\n    // Find all FacetFields, collated by the actual field:\n    Map<String,List<FacetField>> byField = new HashMap<String,List<FacetField>>();\n\n    // ... and also all SortedSetDocValuesFacetFields:\n    Map<String,List<SortedSetDocValuesFacetField>> dvByField = new HashMap<String,List<SortedSetDocValuesFacetField>>();\n\n    // ... and also all AssociationFacetFields\n    Map<String,List<AssociationFacetField>> assocByField = new HashMap<String,List<AssociationFacetField>>();\n\n    for(IndexableField field : doc.indexableFields()) {\n      if (field.fieldType() == FacetField.TYPE) {\n        FacetField facetField = (FacetField) field;\n        FacetsConfig.DimConfig dimConfig = config.getDimConfig(facetField.dim);\n        String indexFieldName = dimConfig.indexFieldName;\n        List<FacetField> fields = byField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<FacetField>();\n          byField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n      }\n\n      if (field.fieldType() == SortedSetDocValuesFacetField.TYPE) {\n        SortedSetDocValuesFacetField facetField = (SortedSetDocValuesFacetField) field;\n        FacetsConfig.DimConfig dimConfig = config.getDimConfig(facetField.dim);\n        String indexFieldName = dimConfig.indexFieldName;\n        List<SortedSetDocValuesFacetField> fields = dvByField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<SortedSetDocValuesFacetField>();\n          dvByField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n      }\n\n      if (field.fieldType() == AssociationFacetField.TYPE) {\n        AssociationFacetField facetField = (AssociationFacetField) field;\n        FacetsConfig.DimConfig dimConfig = config.getDimConfig(facetField.dim);\n\n        // nocommit how to use a different default name for assocs?\n        String indexFieldName = dimConfig.indexFieldName;\n        List<AssociationFacetField> fields = assocByField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<AssociationFacetField>();\n          assocByField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n\n        // Best effort: detect mis-matched types in same\n        // indexed field:\n        String type;\n        if (facetField instanceof IntAssociationFacetField) {\n          type = \"int\";\n        } else if (facetField instanceof FloatAssociationFacetField) {\n          type = \"float\";\n        } else {\n          type = \"bytes\";\n        }\n        // NOTE: not thread safe, but this is just best effort:\n        String curType = assocDimTypes.get(indexFieldName);\n        if (curType == null) {\n          assocDimTypes.put(indexFieldName, type);\n        } else if (!curType.equals(type)) {\n          throw new IllegalArgumentException(\"mixing incompatible types of AssocationFacetField (\" + curType + \" and \" + type + \") in indexed field \\\"\" + indexFieldName + \"\\\"; use FacetsConfig to change the indexFieldName for each dimension\");\n        }\n      }\n    }\n\n    List<Field> addedIndexedFields = new ArrayList<Field>();\n    List<Field> addedStoredFields = new ArrayList<Field>();\n\n    processFacetFields(byField, addedIndexedFields, addedStoredFields);\n    processSSDVFacetFields(dvByField, addedIndexedFields, addedStoredFields);\n    processAssocFacetFields(assocByField, addedIndexedFields, addedStoredFields);\n\n    //System.out.println(\"add stored: \" + addedStoredFields);\n\n    final List<IndexableField> allIndexedFields = new ArrayList<IndexableField>();\n    for(IndexableField field : doc.indexableFields()) {\n      IndexableFieldType ft = field.fieldType();\n      if (ft != FacetField.TYPE && ft != SortedSetDocValuesFacetField.TYPE && ft != AssociationFacetField.TYPE) {\n        allIndexedFields.add(field);\n      }\n    }\n    allIndexedFields.addAll(addedIndexedFields);\n\n    final List<StorableField> allStoredFields = new ArrayList<StorableField>();\n    for(StorableField field : doc.storableFields()) {\n      allStoredFields.add(field);\n    }\n    allStoredFields.addAll(addedStoredFields);\n\n    //System.out.println(\"all indexed: \" + allIndexedFields);\n    //System.out.println(\"all stored: \" + allStoredFields);\n\n    return new IndexDocument() {\n        @Override\n        public Iterable<IndexableField> indexableFields() {\n          return allIndexedFields;\n        }\n\n        @Override\n        public Iterable<StorableField> storableFields() {\n          return allStoredFields;\n        }\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae75def1e2525383b6e1397ed97c44387da9941c","date":1385249238,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/FacetsConfig#build(IndexDocument).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/DocumentBuilder#build(IndexDocument).mjava","sourceNew":"  /** Translates any added {@link FacetField}s into normal\n   *  fields for indexing */\n  public IndexDocument build(IndexDocument doc) throws IOException {\n    // Find all FacetFields, collated by the actual field:\n    Map<String,List<FacetField>> byField = new HashMap<String,List<FacetField>>();\n\n    // ... and also all SortedSetDocValuesFacetFields:\n    Map<String,List<SortedSetDocValuesFacetField>> dvByField = new HashMap<String,List<SortedSetDocValuesFacetField>>();\n\n    // ... and also all AssociationFacetFields\n    Map<String,List<AssociationFacetField>> assocByField = new HashMap<String,List<AssociationFacetField>>();\n\n    Set<String> seenDims = new HashSet<String>();\n\n    for(IndexableField field : doc.indexableFields()) {\n      if (field.fieldType() == FacetField.TYPE) {\n        FacetField facetField = (FacetField) field;\n        FacetsConfig.DimConfig dimConfig = getDimConfig(facetField.dim);\n        if (dimConfig.multiValued == false) {\n          checkSeen(seenDims, facetField.dim);\n        }\n        String indexFieldName = dimConfig.indexFieldName;\n        List<FacetField> fields = byField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<FacetField>();\n          byField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n      }\n\n      if (field.fieldType() == SortedSetDocValuesFacetField.TYPE) {\n        SortedSetDocValuesFacetField facetField = (SortedSetDocValuesFacetField) field;\n        FacetsConfig.DimConfig dimConfig = getDimConfig(facetField.dim);\n        if (dimConfig.multiValued == false) {\n          checkSeen(seenDims, facetField.dim);\n        }\n        String indexFieldName = dimConfig.indexFieldName;\n        List<SortedSetDocValuesFacetField> fields = dvByField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<SortedSetDocValuesFacetField>();\n          dvByField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n      }\n\n      if (field.fieldType() == AssociationFacetField.TYPE) {\n        AssociationFacetField facetField = (AssociationFacetField) field;\n        FacetsConfig.DimConfig dimConfig = getDimConfig(facetField.dim);\n        if (dimConfig.multiValued == false) {\n          checkSeen(seenDims, facetField.dim);\n        }\n        if (dimConfig.hierarchical) {\n          throw new IllegalArgumentException(\"AssociationFacetField cannot be hierarchical (dim=\\\"\" + facetField.dim + \"\\\")\");\n        }\n        if (dimConfig.requireDimCount) {\n          throw new IllegalArgumentException(\"AssociationFacetField cannot requireDimCount (dim=\\\"\" + facetField.dim + \"\\\")\");\n        }\n\n        String indexFieldName = dimConfig.indexFieldName;\n        List<AssociationFacetField> fields = assocByField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<AssociationFacetField>();\n          assocByField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n\n        // Best effort: detect mis-matched types in same\n        // indexed field:\n        String type;\n        if (facetField instanceof IntAssociationFacetField) {\n          type = \"int\";\n        } else if (facetField instanceof FloatAssociationFacetField) {\n          type = \"float\";\n        } else {\n          type = \"bytes\";\n        }\n        // NOTE: not thread safe, but this is just best effort:\n        String curType = assocDimTypes.get(indexFieldName);\n        if (curType == null) {\n          assocDimTypes.put(indexFieldName, type);\n        } else if (!curType.equals(type)) {\n          throw new IllegalArgumentException(\"mixing incompatible types of AssocationFacetField (\" + curType + \" and \" + type + \") in indexed field \\\"\" + indexFieldName + \"\\\"; use FacetsConfig to change the indexFieldName for each dimension\");\n        }\n      }\n    }\n\n    List<Field> addedIndexedFields = new ArrayList<Field>();\n    List<Field> addedStoredFields = new ArrayList<Field>();\n\n    processFacetFields(byField, addedIndexedFields, addedStoredFields);\n    processSSDVFacetFields(dvByField, addedIndexedFields, addedStoredFields);\n    processAssocFacetFields(assocByField, addedIndexedFields, addedStoredFields);\n\n    //System.out.println(\"add stored: \" + addedStoredFields);\n\n    final List<IndexableField> allIndexedFields = new ArrayList<IndexableField>();\n    for(IndexableField field : doc.indexableFields()) {\n      IndexableFieldType ft = field.fieldType();\n      if (ft != FacetField.TYPE && ft != SortedSetDocValuesFacetField.TYPE && ft != AssociationFacetField.TYPE) {\n        allIndexedFields.add(field);\n      }\n    }\n    allIndexedFields.addAll(addedIndexedFields);\n\n    final List<StorableField> allStoredFields = new ArrayList<StorableField>();\n    for(StorableField field : doc.storableFields()) {\n      allStoredFields.add(field);\n    }\n    allStoredFields.addAll(addedStoredFields);\n\n    //System.out.println(\"all indexed: \" + allIndexedFields);\n    //System.out.println(\"all stored: \" + allStoredFields);\n\n    return new IndexDocument() {\n        @Override\n        public Iterable<IndexableField> indexableFields() {\n          return allIndexedFields;\n        }\n\n        @Override\n        public Iterable<StorableField> storableFields() {\n          return allStoredFields;\n        }\n      };\n  }\n\n","sourceOld":"  public IndexDocument build(IndexDocument doc) throws IOException {\n    // Find all FacetFields, collated by the actual field:\n    Map<String,List<FacetField>> byField = new HashMap<String,List<FacetField>>();\n\n    // ... and also all SortedSetDocValuesFacetFields:\n    Map<String,List<SortedSetDocValuesFacetField>> dvByField = new HashMap<String,List<SortedSetDocValuesFacetField>>();\n\n    // ... and also all AssociationFacetFields\n    Map<String,List<AssociationFacetField>> assocByField = new HashMap<String,List<AssociationFacetField>>();\n\n    Set<String> seenDims = new HashSet<String>();\n\n    for(IndexableField field : doc.indexableFields()) {\n      if (field.fieldType() == FacetField.TYPE) {\n        FacetField facetField = (FacetField) field;\n        FacetsConfig.DimConfig dimConfig = config.getDimConfig(facetField.dim);\n        if (dimConfig.multiValued == false) {\n          checkSeen(seenDims, facetField.dim);\n        }\n        String indexFieldName = dimConfig.indexFieldName;\n        List<FacetField> fields = byField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<FacetField>();\n          byField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n      }\n\n      if (field.fieldType() == SortedSetDocValuesFacetField.TYPE) {\n        SortedSetDocValuesFacetField facetField = (SortedSetDocValuesFacetField) field;\n        FacetsConfig.DimConfig dimConfig = config.getDimConfig(facetField.dim);\n        if (dimConfig.multiValued == false) {\n          checkSeen(seenDims, facetField.dim);\n        }\n        String indexFieldName = dimConfig.indexFieldName;\n        List<SortedSetDocValuesFacetField> fields = dvByField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<SortedSetDocValuesFacetField>();\n          dvByField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n      }\n\n      if (field.fieldType() == AssociationFacetField.TYPE) {\n        AssociationFacetField facetField = (AssociationFacetField) field;\n        FacetsConfig.DimConfig dimConfig = config.getDimConfig(facetField.dim);\n        if (dimConfig.multiValued == false) {\n          checkSeen(seenDims, facetField.dim);\n        }\n        if (dimConfig.hierarchical) {\n          throw new IllegalArgumentException(\"AssociationFacetField cannot be hierarchical (dim=\\\"\" + facetField.dim + \"\\\")\");\n        }\n        if (dimConfig.requireDimCount) {\n          throw new IllegalArgumentException(\"AssociationFacetField cannot requireDimCount (dim=\\\"\" + facetField.dim + \"\\\")\");\n        }\n\n        String indexFieldName = dimConfig.indexFieldName;\n        List<AssociationFacetField> fields = assocByField.get(indexFieldName);\n        if (fields == null) {\n          fields = new ArrayList<AssociationFacetField>();\n          assocByField.put(indexFieldName, fields);\n        }\n        fields.add(facetField);\n\n        // Best effort: detect mis-matched types in same\n        // indexed field:\n        String type;\n        if (facetField instanceof IntAssociationFacetField) {\n          type = \"int\";\n        } else if (facetField instanceof FloatAssociationFacetField) {\n          type = \"float\";\n        } else {\n          type = \"bytes\";\n        }\n        // NOTE: not thread safe, but this is just best effort:\n        String curType = assocDimTypes.get(indexFieldName);\n        if (curType == null) {\n          assocDimTypes.put(indexFieldName, type);\n        } else if (!curType.equals(type)) {\n          throw new IllegalArgumentException(\"mixing incompatible types of AssocationFacetField (\" + curType + \" and \" + type + \") in indexed field \\\"\" + indexFieldName + \"\\\"; use FacetsConfig to change the indexFieldName for each dimension\");\n        }\n      }\n    }\n\n    List<Field> addedIndexedFields = new ArrayList<Field>();\n    List<Field> addedStoredFields = new ArrayList<Field>();\n\n    processFacetFields(byField, addedIndexedFields, addedStoredFields);\n    processSSDVFacetFields(dvByField, addedIndexedFields, addedStoredFields);\n    processAssocFacetFields(assocByField, addedIndexedFields, addedStoredFields);\n\n    //System.out.println(\"add stored: \" + addedStoredFields);\n\n    final List<IndexableField> allIndexedFields = new ArrayList<IndexableField>();\n    for(IndexableField field : doc.indexableFields()) {\n      IndexableFieldType ft = field.fieldType();\n      if (ft != FacetField.TYPE && ft != SortedSetDocValuesFacetField.TYPE && ft != AssociationFacetField.TYPE) {\n        allIndexedFields.add(field);\n      }\n    }\n    allIndexedFields.addAll(addedIndexedFields);\n\n    final List<StorableField> allStoredFields = new ArrayList<StorableField>();\n    for(StorableField field : doc.storableFields()) {\n      allStoredFields.add(field);\n    }\n    allStoredFields.addAll(addedStoredFields);\n\n    //System.out.println(\"all indexed: \" + allIndexedFields);\n    //System.out.println(\"all stored: \" + allStoredFields);\n\n    return new IndexDocument() {\n        @Override\n        public Iterable<IndexableField> indexableFields() {\n          return allIndexedFields;\n        }\n\n        @Override\n        public Iterable<StorableField> storableFields() {\n          return allStoredFields;\n        }\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7554009c97f9365492660c1df175b6349f7ec05c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a8c81e820a961f4822e9378d27ad18cb0eb3eb48":["7554009c97f9365492660c1df175b6349f7ec05c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"006838107b0cd2051371f3470740d23ec91b1886":["a8c81e820a961f4822e9378d27ad18cb0eb3eb48"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae75def1e2525383b6e1397ed97c44387da9941c":["006838107b0cd2051371f3470740d23ec91b1886"]},"commit2Childs":{"7554009c97f9365492660c1df175b6349f7ec05c":["a8c81e820a961f4822e9378d27ad18cb0eb3eb48"],"a8c81e820a961f4822e9378d27ad18cb0eb3eb48":["006838107b0cd2051371f3470740d23ec91b1886"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7554009c97f9365492660c1df175b6349f7ec05c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"006838107b0cd2051371f3470740d23ec91b1886":["ae75def1e2525383b6e1397ed97c44387da9941c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ae75def1e2525383b6e1397ed97c44387da9941c":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","ae75def1e2525383b6e1397ed97c44387da9941c"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}