{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","sourceNew":"    public void testEnablingNorms() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, pre flush\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      for(int j=0;j<10;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 8) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"field\", \"aaa\");\n\n      IndexReader reader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(10, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, post flush\n      for(int j=0;j<27;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 26) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n      reader = IndexReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(27, hits.length);\n      reader.close();\n\n      reader = IndexReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    public void testEnablingNorms() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, pre flush\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      for(int j=0;j<10;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 8) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"field\", \"aaa\");\n\n      IndexReader reader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(10, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, post flush\n      for(int j=0;j<27;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 26) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n      reader = IndexReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(27, hits.length);\n      reader.close();\n\n      reader = IndexReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","sourceNew":"    public void testEnablingNorms() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, pre flush\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      for(int j=0;j<10;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 8) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"field\", \"aaa\");\n\n      IndexReader reader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(10, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, post flush\n      for(int j=0;j<27;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 26) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n      reader = IndexReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(27, hits.length);\n      reader.close();\n\n      reader = IndexReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    public void testEnablingNorms() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, pre flush\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      for(int j=0;j<10;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 8) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"field\", \"aaa\");\n\n      IndexReader reader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(10, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, post flush\n      for(int j=0;j<27;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 26) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n      reader = IndexReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(27, hits.length);\n      reader.close();\n\n      reader = IndexReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","sourceNew":"    public void testEnablingNorms() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, pre flush\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      for(int j=0;j<10;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 8) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"field\", \"aaa\");\n\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(10, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, post flush\n      for(int j=0;j<27;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 26) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(27, hits.length);\n      reader.close();\n\n      reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    public void testEnablingNorms() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, pre flush\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      for(int j=0;j<10;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 8) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"field\", \"aaa\");\n\n      IndexReader reader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(10, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, post flush\n      for(int j=0;j<27;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 26) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n      reader = IndexReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(27, hits.length);\n      reader.close();\n\n      reader = IndexReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","sourceNew":"    public void testEnablingNorms() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, pre flush\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      for(int j=0;j<10;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 8) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"field\", \"aaa\");\n\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(10, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, post flush\n      for(int j=0;j<27;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 26) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(27, hits.length);\n      reader.close();\n\n      reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    public void testEnablingNorms() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, pre flush\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      for(int j=0;j<10;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 8) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"field\", \"aaa\");\n\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(10, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, post flush\n      for(int j=0;j<27;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 26) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(27, hits.length);\n      reader.close();\n\n      reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","sourceNew":"    public void testEnablingNorms() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, pre flush\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      for(int j=0;j<10;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 8) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"field\", \"aaa\");\n\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(10, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, post flush\n      for(int j=0;j<27;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 26) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(27, hits.length);\n      reader.close();\n\n      reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    public void testEnablingNorms() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, pre flush\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      for(int j=0;j<10;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 8) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"field\", \"aaa\");\n\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(10, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, post flush\n      for(int j=0;j<27;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 26) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(27, hits.length);\n      reader.close();\n\n      reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","sourceNew":"    public void testEnablingNorms() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, pre flush\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      for(int j=0;j<10;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 8) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"field\", \"aaa\");\n\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(10, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, post flush\n      for(int j=0;j<27;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 26) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(27, hits.length);\n      reader.close();\n\n      reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    public void testEnablingNorms() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, pre flush\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      for(int j=0;j<10;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 8) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"field\", \"aaa\");\n\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(10, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, post flush\n      for(int j=0;j<27;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 26) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(27, hits.length);\n      reader.close();\n\n      reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","sourceNew":"    public void testEnablingNorms() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, pre flush\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      for(int j=0;j<10;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 8) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"field\", \"aaa\");\n\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(10, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, post flush\n      for(int j=0;j<27;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 26) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n      reader = DirectoryReader.open(dir);\n      searcher = newSearcher(reader);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(27, hits.length);\n      reader.close();\n\n      reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    public void testEnablingNorms() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, pre flush\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      for(int j=0;j<10;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 8) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"field\", \"aaa\");\n\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(10, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, post flush\n      for(int j=0;j<27;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 26) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n      reader = DirectoryReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(27, hits.length);\n      reader.close();\n\n      reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","sourceNew":"    public void testEnablingNorms() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, pre flush\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      for(int j=0;j<10;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 8) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.shutdown();\n\n      Term searchTerm = new Term(\"field\", \"aaa\");\n\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(10, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, post flush\n      for(int j=0;j<27;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 26) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.shutdown();\n      reader = DirectoryReader.open(dir);\n      searcher = newSearcher(reader);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(27, hits.length);\n      reader.close();\n\n      reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    public void testEnablingNorms() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, pre flush\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      for(int j=0;j<10;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 8) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"field\", \"aaa\");\n\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(10, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, post flush\n      for(int j=0;j<27;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 26) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n      reader = DirectoryReader.open(dir);\n      searcher = newSearcher(reader);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(27, hits.length);\n      reader.close();\n\n      reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","sourceNew":"    public void testEnablingNorms() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                   .setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, pre flush\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      for(int j=0;j<10;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 8) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.shutdown();\n\n      Term searchTerm = new Term(\"field\", \"aaa\");\n\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(10, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                      .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, post flush\n      for(int j=0;j<27;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 26) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.shutdown();\n      reader = DirectoryReader.open(dir);\n      searcher = newSearcher(reader);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(27, hits.length);\n      reader.close();\n\n      reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    public void testEnablingNorms() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, pre flush\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      for(int j=0;j<10;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 8) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.shutdown();\n\n      Term searchTerm = new Term(\"field\", \"aaa\");\n\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(10, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, post flush\n      for(int j=0;j<27;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 26) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.shutdown();\n      reader = DirectoryReader.open(dir);\n      searcher = newSearcher(reader);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(27, hits.length);\n      reader.close();\n\n      reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","sourceNew":"    public void testEnablingNorms() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                   .setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, pre flush\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      for(int j=0;j<10;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 8) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"field\", \"aaa\");\n\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(10, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                      .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, post flush\n      for(int j=0;j<27;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 26) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n      reader = DirectoryReader.open(dir);\n      searcher = newSearcher(reader);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(27, hits.length);\n      reader.close();\n\n      reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    public void testEnablingNorms() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                   .setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, pre flush\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      for(int j=0;j<10;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 8) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.shutdown();\n\n      Term searchTerm = new Term(\"field\", \"aaa\");\n\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(10, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                      .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, post flush\n      for(int j=0;j<27;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 26) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.shutdown();\n      reader = DirectoryReader.open(dir);\n      searcher = newSearcher(reader);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(27, hits.length);\n      reader.close();\n\n      reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","sourceNew":"    public void testEnablingNorms() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                   .setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, pre flush\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      for(int j=0;j<10;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 8) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"field\", \"aaa\");\n\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n      assertEquals(10, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                      .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, post flush\n      for(int j=0;j<27;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 26) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n      reader = DirectoryReader.open(dir);\n      searcher = newSearcher(reader);\n      hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n      assertEquals(27, hits.length);\n      reader.close();\n\n      reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    public void testEnablingNorms() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                   .setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, pre flush\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      for(int j=0;j<10;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 8) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"field\", \"aaa\");\n\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(10, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                      .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, post flush\n      for(int j=0;j<27;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 26) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n      reader = DirectoryReader.open(dir);\n      searcher = newSearcher(reader);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(27, hits.length);\n      reader.close();\n\n      reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","sourceNew":"  public void testEnablingNorms() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                          .setMaxBufferedDocs(10));\n    // Enable norms for only 1 doc, pre flush\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setOmitNorms(true);\n    for(int j=0;j<10;j++) {\n      Document doc = new Document();\n      Field f = null;\n      if (j != 8) {\n        f = newField(\"field\", \"aaa\", customType);\n      }\n      else {\n        f = newField(\"field\", \"aaa\", storedTextType);\n      }\n      doc.add(f);\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"field\", \"aaa\");\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                             .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    // Enable norms for only 1 doc, post flush\n    for(int j=0;j<27;j++) {\n      Document doc = new Document();\n      Field f = null;\n      if (j != 26) {\n        f = newField(\"field\", \"aaa\", customType);\n      }\n      else {\n        f = newField(\"field\", \"aaa\", storedTextType);\n      }\n      doc.add(f);\n      writer.addDocument(doc);\n    }\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(27, hits.length);\n    reader.close();\n\n    reader = DirectoryReader.open(dir);\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"    public void testEnablingNorms() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                   .setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, pre flush\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      for(int j=0;j<10;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 8) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"field\", \"aaa\");\n\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n      assertEquals(10, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                      .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, post flush\n      for(int j=0;j<27;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 26) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n      reader = DirectoryReader.open(dir);\n      searcher = newSearcher(reader);\n      hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n      assertEquals(27, hits.length);\n      reader.close();\n\n      reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","sourceNew":"  public void testEnablingNorms() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                          .setMaxBufferedDocs(10));\n    // Enable norms for only 1 doc, pre flush\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setOmitNorms(true);\n    for(int j=0;j<10;j++) {\n      Document doc = new Document();\n      Field f = null;\n      if (j != 8) {\n        f = newField(\"field\", \"aaa\", customType);\n      }\n      else {\n        f = newField(\"field\", \"aaa\", storedTextType);\n      }\n      doc.add(f);\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"field\", \"aaa\");\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                             .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    // Enable norms for only 1 doc, post flush\n    for(int j=0;j<27;j++) {\n      Document doc = new Document();\n      Field f = null;\n      if (j != 26) {\n        f = newField(\"field\", \"aaa\", customType);\n      }\n      else {\n        f = newField(\"field\", \"aaa\", storedTextType);\n      }\n      doc.add(f);\n      writer.addDocument(doc);\n    }\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(27, hits.length);\n    reader.close();\n\n    reader = DirectoryReader.open(dir);\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"    public void testEnablingNorms() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                   .setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, pre flush\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      for(int j=0;j<10;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 8) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"field\", \"aaa\");\n\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n      assertEquals(10, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                      .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, post flush\n      for(int j=0;j<27;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 26) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n      reader = DirectoryReader.open(dir);\n      searcher = newSearcher(reader);\n      hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n      assertEquals(27, hits.length);\n      reader.close();\n\n      reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","sourceNew":"  public void testEnablingNorms() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                          .setMaxBufferedDocs(10));\n    // Enable norms for only 1 doc, pre flush\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setOmitNorms(true);\n    for(int j=0;j<10;j++) {\n      Document doc = new Document();\n      Field f = null;\n      if (j != 8) {\n        f = newField(\"field\", \"aaa\", customType);\n      }\n      else {\n        f = newField(\"field\", \"aaa\", storedTextType);\n      }\n      doc.add(f);\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"field\", \"aaa\");\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                             .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    // Enable norms for only 1 doc, post flush\n    for(int j=0;j<27;j++) {\n      Document doc = new Document();\n      Field f = null;\n      if (j != 26) {\n        f = newField(\"field\", \"aaa\", customType);\n      }\n      else {\n        f = newField(\"field\", \"aaa\", storedTextType);\n      }\n      doc.add(f);\n      writer.addDocument(doc);\n    }\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(27, hits.length);\n    reader.close();\n\n    reader = DirectoryReader.open(dir);\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"    public void testEnablingNorms() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                   .setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, pre flush\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      for(int j=0;j<10;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 8) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"field\", \"aaa\");\n\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n      assertEquals(10, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                      .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, post flush\n      for(int j=0;j<27;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 26) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n      reader = DirectoryReader.open(dir);\n      searcher = newSearcher(reader);\n      hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n      assertEquals(27, hits.length);\n      reader.close();\n\n      reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","sourceNew":"  public void testEnablingNorms() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                          .setMaxBufferedDocs(10));\n    // Enable norms for only 1 doc, pre flush\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setOmitNorms(true);\n    for(int j=0;j<10;j++) {\n      Document doc = new Document();\n      Field f = null;\n      if (j != 8) {\n        f = newField(\"field\", \"aaa\", customType);\n      }\n      else {\n        f = newField(\"field\", \"aaa\", storedTextType);\n      }\n      doc.add(f);\n      writer.addDocument(doc);\n    }\n    writer.close();\n\n    Term searchTerm = new Term(\"field\", \"aaa\");\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(10, hits.length);\n    reader.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                             .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    // Enable norms for only 1 doc, post flush\n    for(int j=0;j<27;j++) {\n      Document doc = new Document();\n      Field f = null;\n      if (j != 26) {\n        f = newField(\"field\", \"aaa\", customType);\n      }\n      else {\n        f = newField(\"field\", \"aaa\", storedTextType);\n      }\n      doc.add(f);\n      writer.addDocument(doc);\n    }\n    writer.close();\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n    assertEquals(27, hits.length);\n    reader.close();\n\n    reader = DirectoryReader.open(dir);\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"    public void testEnablingNorms() throws IOException {\n      Directory dir = newDirectory();\n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                   .setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, pre flush\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      for(int j=0;j<10;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 8) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"field\", \"aaa\");\n\n      IndexReader reader = DirectoryReader.open(dir);\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n      assertEquals(10, hits.length);\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                      .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n      // Enable norms for only 1 doc, post flush\n      for(int j=0;j<27;j++) {\n        Document doc = new Document();\n        Field f = null;\n        if (j != 26) {\n          f = newField(\"field\", \"aaa\", customType);\n        }\n        else {\n          f = newField(\"field\", \"aaa\", storedTextType);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n      reader = DirectoryReader.open(dir);\n      searcher = newSearcher(reader);\n      hits = searcher.search(new TermQuery(searchTerm), 1000).scoreDocs;\n      assertEquals(27, hits.length);\n      reader.close();\n\n      reader = DirectoryReader.open(dir);\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","b470f36a9372c97283360b1304eacbde22df6c0d"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"aba371508186796cc6151d8223a5b4e16d02e26e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","d19974432be9aed28ee7dca73bdf01d139e763a9"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"b470f36a9372c97283360b1304eacbde22df6c0d":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","d19974432be9aed28ee7dca73bdf01d139e763a9"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["aba371508186796cc6151d8223a5b4e16d02e26e","d19974432be9aed28ee7dca73bdf01d139e763a9","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}