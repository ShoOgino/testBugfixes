{"path":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#scorer(LeafReaderContext).mjava","commits":[{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n\n      // Initialize the enums; null for a given slot means that term didn't appear in this reader\n      EnumAndScorer[] enums = new EnumAndScorer[idToTerm.size()];\n\n      for(Map.Entry<Integer,TermContext> ent : termStates.entrySet()) {\n        TermContext termContext = ent.getValue();\n        assert termContext.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termContext.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        BytesRef term = idToTerm.get(ent.getKey());\n        TermState state = termContext.get(context.ord);\n        if (state != null) {\n\n          TermsEnum termsEnum = context.reader().terms(field).iterator();\n          termsEnum.seekExact(term, state);\n          enums[ent.getKey()] = new EnumAndScorer(ent.getKey(), termsEnum.postings(null, PostingsEnum.POSITIONS));\n        }\n      }\n\n      return new TermAutomatonScorer(this, enums, anyTermID, idToTerm, similarity.simScorer(stats, context));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n      // Initialize the enums; null for a given slot means that term didn't appear in this reader\n      EnumAndScorer[] enums = new EnumAndScorer[idToTerm.size()];\n\n      for(Map.Entry<Integer,TermContext> ent : termStates.entrySet()) {\n        TermContext termContext = ent.getValue();\n        assert termContext.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termContext.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        BytesRef term = idToTerm.get(ent.getKey());\n        TermState state = termContext.get(context.ord);\n        if (state != null) {\n\n          TermsEnum termsEnum = context.reader().terms(field).iterator();\n          termsEnum.seekExact(term, state);\n          enums[ent.getKey()] = new EnumAndScorer(ent.getKey(), termsEnum.postings(acceptDocs, null, PostingsEnum.POSITIONS));\n        }\n      }\n\n      return new TermAutomatonScorer(this, enums, anyTermID, idToTerm, similarity.simScorer(stats, context));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"778044e6175d398c3f128227b96c5f3ad32184f0","date":1436004867,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n\n      // Initialize the enums; null for a given slot means that term didn't appear in this reader\n      EnumAndScorer[] enums = new EnumAndScorer[idToTerm.size()];\n\n      boolean any = false;\n      for(Map.Entry<Integer,TermContext> ent : termStates.entrySet()) {\n        TermContext termContext = ent.getValue();\n        assert termContext.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termContext.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        BytesRef term = idToTerm.get(ent.getKey());\n        TermState state = termContext.get(context.ord);\n        if (state != null) {\n          TermsEnum termsEnum = context.reader().terms(field).iterator();\n          termsEnum.seekExact(term, state);\n          enums[ent.getKey()] = new EnumAndScorer(ent.getKey(), termsEnum.postings(null, PostingsEnum.POSITIONS));\n          any = true;\n        }\n      }\n\n      if (any) {\n        return new TermAutomatonScorer(this, enums, anyTermID, idToTerm, similarity.simScorer(stats, context));\n      } else {\n        return null;\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n\n      // Initialize the enums; null for a given slot means that term didn't appear in this reader\n      EnumAndScorer[] enums = new EnumAndScorer[idToTerm.size()];\n\n      for(Map.Entry<Integer,TermContext> ent : termStates.entrySet()) {\n        TermContext termContext = ent.getValue();\n        assert termContext.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termContext.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        BytesRef term = idToTerm.get(ent.getKey());\n        TermState state = termContext.get(context.ord);\n        if (state != null) {\n\n          TermsEnum termsEnum = context.reader().terms(field).iterator();\n          termsEnum.seekExact(term, state);\n          enums[ent.getKey()] = new EnumAndScorer(ent.getKey(), termsEnum.postings(null, PostingsEnum.POSITIONS));\n        }\n      }\n\n      return new TermAutomatonScorer(this, enums, anyTermID, idToTerm, similarity.simScorer(stats, context));\n    }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bd3db3e8f35bef1d4d3f0411933b3190297302a","date":1485357107,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n\n      // Initialize the enums; null for a given slot means that term didn't appear in this reader\n      EnumAndScorer[] enums = new EnumAndScorer[idToTerm.size()];\n\n      boolean any = false;\n      for(Map.Entry<Integer,TermContext> ent : termStates.entrySet()) {\n        TermContext termContext = ent.getValue();\n        assert termContext.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        BytesRef term = idToTerm.get(ent.getKey());\n        TermState state = termContext.get(context.ord);\n        if (state != null) {\n          TermsEnum termsEnum = context.reader().terms(field).iterator();\n          termsEnum.seekExact(term, state);\n          enums[ent.getKey()] = new EnumAndScorer(ent.getKey(), termsEnum.postings(null, PostingsEnum.POSITIONS));\n          any = true;\n        }\n      }\n\n      if (any) {\n        return new TermAutomatonScorer(this, enums, anyTermID, idToTerm, similarity.simScorer(stats, context));\n      } else {\n        return null;\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n\n      // Initialize the enums; null for a given slot means that term didn't appear in this reader\n      EnumAndScorer[] enums = new EnumAndScorer[idToTerm.size()];\n\n      boolean any = false;\n      for(Map.Entry<Integer,TermContext> ent : termStates.entrySet()) {\n        TermContext termContext = ent.getValue();\n        assert termContext.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termContext.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        BytesRef term = idToTerm.get(ent.getKey());\n        TermState state = termContext.get(context.ord);\n        if (state != null) {\n          TermsEnum termsEnum = context.reader().terms(field).iterator();\n          termsEnum.seekExact(term, state);\n          enums[ent.getKey()] = new EnumAndScorer(ent.getKey(), termsEnum.postings(null, PostingsEnum.POSITIONS));\n          any = true;\n        }\n      }\n\n      if (any) {\n        return new TermAutomatonScorer(this, enums, anyTermID, idToTerm, similarity.simScorer(stats, context));\n      } else {\n        return null;\n      }\n    }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n\n      // Initialize the enums; null for a given slot means that term didn't appear in this reader\n      EnumAndScorer[] enums = new EnumAndScorer[idToTerm.size()];\n\n      boolean any = false;\n      for(Map.Entry<Integer,TermContext> ent : termStates.entrySet()) {\n        TermContext termContext = ent.getValue();\n        assert termContext.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        BytesRef term = idToTerm.get(ent.getKey());\n        TermState state = termContext.get(context.ord);\n        if (state != null) {\n          TermsEnum termsEnum = context.reader().terms(field).iterator();\n          termsEnum.seekExact(term, state);\n          enums[ent.getKey()] = new EnumAndScorer(ent.getKey(), termsEnum.postings(null, PostingsEnum.POSITIONS));\n          any = true;\n        }\n      }\n\n      if (any) {\n        return new TermAutomatonScorer(this, enums, anyTermID, idToTerm, similarity.simScorer(stats, context));\n      } else {\n        return null;\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n\n      // Initialize the enums; null for a given slot means that term didn't appear in this reader\n      EnumAndScorer[] enums = new EnumAndScorer[idToTerm.size()];\n\n      boolean any = false;\n      for(Map.Entry<Integer,TermContext> ent : termStates.entrySet()) {\n        TermContext termContext = ent.getValue();\n        assert termContext.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termContext.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        BytesRef term = idToTerm.get(ent.getKey());\n        TermState state = termContext.get(context.ord);\n        if (state != null) {\n          TermsEnum termsEnum = context.reader().terms(field).iterator();\n          termsEnum.seekExact(term, state);\n          enums[ent.getKey()] = new EnumAndScorer(ent.getKey(), termsEnum.postings(null, PostingsEnum.POSITIONS));\n          any = true;\n        }\n      }\n\n      if (any) {\n        return new TermAutomatonScorer(this, enums, anyTermID, idToTerm, similarity.simScorer(stats, context));\n      } else {\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n\n      // Initialize the enums; null for a given slot means that term didn't appear in this reader\n      EnumAndScorer[] enums = new EnumAndScorer[idToTerm.size()];\n\n      boolean any = false;\n      for(Map.Entry<Integer,TermContext> ent : termStates.entrySet()) {\n        TermContext termContext = ent.getValue();\n        assert termContext.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        BytesRef term = idToTerm.get(ent.getKey());\n        TermState state = termContext.get(context.ord);\n        if (state != null) {\n          TermsEnum termsEnum = context.reader().terms(field).iterator();\n          termsEnum.seekExact(term, state);\n          enums[ent.getKey()] = new EnumAndScorer(ent.getKey(), termsEnum.postings(null, PostingsEnum.POSITIONS));\n          any = true;\n        }\n      }\n\n      if (any) {\n        return new TermAutomatonScorer(this, enums, anyTermID, idToTerm, new LeafSimScorer(stats, context.reader(), true, Float.POSITIVE_INFINITY));\n      } else {\n        return null;\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n\n      // Initialize the enums; null for a given slot means that term didn't appear in this reader\n      EnumAndScorer[] enums = new EnumAndScorer[idToTerm.size()];\n\n      boolean any = false;\n      for(Map.Entry<Integer,TermContext> ent : termStates.entrySet()) {\n        TermContext termContext = ent.getValue();\n        assert termContext.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        BytesRef term = idToTerm.get(ent.getKey());\n        TermState state = termContext.get(context.ord);\n        if (state != null) {\n          TermsEnum termsEnum = context.reader().terms(field).iterator();\n          termsEnum.seekExact(term, state);\n          enums[ent.getKey()] = new EnumAndScorer(ent.getKey(), termsEnum.postings(null, PostingsEnum.POSITIONS));\n          any = true;\n        }\n      }\n\n      if (any) {\n        return new TermAutomatonScorer(this, enums, anyTermID, idToTerm, similarity.simScorer(stats, context));\n      } else {\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n\n      // Initialize the enums; null for a given slot means that term didn't appear in this reader\n      EnumAndScorer[] enums = new EnumAndScorer[idToTerm.size()];\n\n      boolean any = false;\n      for(Map.Entry<Integer,TermStates> ent : termStates.entrySet()) {\n        TermStates termStates = ent.getValue();\n        assert termStates.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        BytesRef term = idToTerm.get(ent.getKey());\n        TermState state = termStates.get(context);\n        if (state != null) {\n          TermsEnum termsEnum = context.reader().terms(field).iterator();\n          termsEnum.seekExact(term, state);\n          enums[ent.getKey()] = new EnumAndScorer(ent.getKey(), termsEnum.postings(null, PostingsEnum.POSITIONS));\n          any = true;\n        }\n      }\n\n      if (any) {\n        return new TermAutomatonScorer(this, enums, anyTermID, idToTerm, new LeafSimScorer(stats, context.reader(), true, Float.POSITIVE_INFINITY));\n      } else {\n        return null;\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n\n      // Initialize the enums; null for a given slot means that term didn't appear in this reader\n      EnumAndScorer[] enums = new EnumAndScorer[idToTerm.size()];\n\n      boolean any = false;\n      for(Map.Entry<Integer,TermContext> ent : termStates.entrySet()) {\n        TermContext termContext = ent.getValue();\n        assert termContext.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        BytesRef term = idToTerm.get(ent.getKey());\n        TermState state = termContext.get(context.ord);\n        if (state != null) {\n          TermsEnum termsEnum = context.reader().terms(field).iterator();\n          termsEnum.seekExact(term, state);\n          enums[ent.getKey()] = new EnumAndScorer(ent.getKey(), termsEnum.postings(null, PostingsEnum.POSITIONS));\n          any = true;\n        }\n      }\n\n      if (any) {\n        return new TermAutomatonScorer(this, enums, anyTermID, idToTerm, new LeafSimScorer(stats, context.reader(), true, Float.POSITIVE_INFINITY));\n      } else {\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c68bfb3354451a11c895b36484af94f27530b79","date":1515505336,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n\n      // Initialize the enums; null for a given slot means that term didn't appear in this reader\n      EnumAndScorer[] enums = new EnumAndScorer[idToTerm.size()];\n\n      boolean any = false;\n      for(Map.Entry<Integer,TermStates> ent : termStates.entrySet()) {\n        TermStates termStates = ent.getValue();\n        assert termStates.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        BytesRef term = idToTerm.get(ent.getKey());\n        TermState state = termStates.get(context);\n        if (state != null) {\n          TermsEnum termsEnum = context.reader().terms(field).iterator();\n          termsEnum.seekExact(term, state);\n          enums[ent.getKey()] = new EnumAndScorer(ent.getKey(), termsEnum.postings(null, PostingsEnum.POSITIONS));\n          any = true;\n        }\n      }\n\n      if (any) {\n        return new TermAutomatonScorer(this, enums, anyTermID, idToTerm, new LeafSimScorer(stats, context.reader(), true, Float.MAX_VALUE));\n      } else {\n        return null;\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n\n      // Initialize the enums; null for a given slot means that term didn't appear in this reader\n      EnumAndScorer[] enums = new EnumAndScorer[idToTerm.size()];\n\n      boolean any = false;\n      for(Map.Entry<Integer,TermStates> ent : termStates.entrySet()) {\n        TermStates termStates = ent.getValue();\n        assert termStates.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        BytesRef term = idToTerm.get(ent.getKey());\n        TermState state = termStates.get(context);\n        if (state != null) {\n          TermsEnum termsEnum = context.reader().terms(field).iterator();\n          termsEnum.seekExact(term, state);\n          enums[ent.getKey()] = new EnumAndScorer(ent.getKey(), termsEnum.postings(null, PostingsEnum.POSITIONS));\n          any = true;\n        }\n      }\n\n      if (any) {\n        return new TermAutomatonScorer(this, enums, anyTermID, idToTerm, new LeafSimScorer(stats, context.reader(), true, Float.POSITIVE_INFINITY));\n      } else {\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n\n      // Initialize the enums; null for a given slot means that term didn't appear in this reader\n      EnumAndScorer[] enums = new EnumAndScorer[idToTerm.size()];\n\n      boolean any = false;\n      for(Map.Entry<Integer,TermStates> ent : termStates.entrySet()) {\n        TermStates termStates = ent.getValue();\n        assert termStates.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        BytesRef term = idToTerm.get(ent.getKey());\n        TermState state = termStates.get(context);\n        if (state != null) {\n          TermsEnum termsEnum = context.reader().terms(field).iterator();\n          termsEnum.seekExact(term, state);\n          enums[ent.getKey()] = new EnumAndScorer(ent.getKey(), termsEnum.postings(null, PostingsEnum.POSITIONS));\n          any = true;\n        }\n      }\n\n      if (any) {\n        return new TermAutomatonScorer(this, enums, anyTermID, idToTerm, new LeafSimScorer(stats, context.reader(), true, Float.MAX_VALUE));\n      } else {\n        return null;\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n\n      // Initialize the enums; null for a given slot means that term didn't appear in this reader\n      EnumAndScorer[] enums = new EnumAndScorer[idToTerm.size()];\n\n      boolean any = false;\n      for(Map.Entry<Integer,TermContext> ent : termStates.entrySet()) {\n        TermContext termContext = ent.getValue();\n        assert termContext.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        BytesRef term = idToTerm.get(ent.getKey());\n        TermState state = termContext.get(context.ord);\n        if (state != null) {\n          TermsEnum termsEnum = context.reader().terms(field).iterator();\n          termsEnum.seekExact(term, state);\n          enums[ent.getKey()] = new EnumAndScorer(ent.getKey(), termsEnum.postings(null, PostingsEnum.POSITIONS));\n          any = true;\n        }\n      }\n\n      if (any) {\n        return new TermAutomatonScorer(this, enums, anyTermID, idToTerm, similarity.simScorer(stats, context));\n      } else {\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ea90bc076fbe82be472db33fc80b00eb0bff44f","date":1526486036,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n\n      // Initialize the enums; null for a given slot means that term didn't appear in this reader\n      EnumAndScorer[] enums = new EnumAndScorer[idToTerm.size()];\n\n      boolean any = false;\n      for(Map.Entry<Integer,TermStates> ent : termStates.entrySet()) {\n        TermStates termStates = ent.getValue();\n        assert termStates.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        BytesRef term = idToTerm.get(ent.getKey());\n        TermState state = termStates.get(context);\n        if (state != null) {\n          TermsEnum termsEnum = context.reader().terms(field).iterator();\n          termsEnum.seekExact(term, state);\n          enums[ent.getKey()] = new EnumAndScorer(ent.getKey(), termsEnum.postings(null, PostingsEnum.POSITIONS));\n          any = true;\n        }\n      }\n\n      if (any) {\n        return new TermAutomatonScorer(this, enums, anyTermID, idToTerm, new LeafSimScorer(stats, context.reader(), field, true));\n      } else {\n        return null;\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n\n      // Initialize the enums; null for a given slot means that term didn't appear in this reader\n      EnumAndScorer[] enums = new EnumAndScorer[idToTerm.size()];\n\n      boolean any = false;\n      for(Map.Entry<Integer,TermStates> ent : termStates.entrySet()) {\n        TermStates termStates = ent.getValue();\n        assert termStates.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n        BytesRef term = idToTerm.get(ent.getKey());\n        TermState state = termStates.get(context);\n        if (state != null) {\n          TermsEnum termsEnum = context.reader().terms(field).iterator();\n          termsEnum.seekExact(term, state);\n          enums[ent.getKey()] = new EnumAndScorer(ent.getKey(), termsEnum.postings(null, PostingsEnum.POSITIONS));\n          any = true;\n        }\n      }\n\n      if (any) {\n        return new TermAutomatonScorer(this, enums, anyTermID, idToTerm, new LeafSimScorer(stats, context.reader(), true, Float.MAX_VALUE));\n      } else {\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c68bfb3354451a11c895b36484af94f27530b79":["a6e9f769521480a623f897c0d59089b919fa4239"],"b94236357aaa22b76c10629851fe4e376e0cea82":["3bd3db3e8f35bef1d4d3f0411933b3190297302a","0c68bfb3354451a11c895b36484af94f27530b79"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["3bd3db3e8f35bef1d4d3f0411933b3190297302a"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a6e9f769521480a623f897c0d59089b919fa4239":["68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["778044e6175d398c3f128227b96c5f3ad32184f0","3bd3db3e8f35bef1d4d3f0411933b3190297302a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ea90bc076fbe82be472db33fc80b00eb0bff44f":["b94236357aaa22b76c10629851fe4e376e0cea82"],"3bd3db3e8f35bef1d4d3f0411933b3190297302a":["778044e6175d398c3f128227b96c5f3ad32184f0"],"778044e6175d398c3f128227b96c5f3ad32184f0":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6ea90bc076fbe82be472db33fc80b00eb0bff44f"]},"commit2Childs":{"0c68bfb3354451a11c895b36484af94f27530b79":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b94236357aaa22b76c10629851fe4e376e0cea82":["6ea90bc076fbe82be472db33fc80b00eb0bff44f"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["a6e9f769521480a623f897c0d59089b919fa4239"],"a6e9f769521480a623f897c0d59089b919fa4239":["0c68bfb3354451a11c895b36484af94f27530b79"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["778044e6175d398c3f128227b96c5f3ad32184f0"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"6ea90bc076fbe82be472db33fc80b00eb0bff44f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3bd3db3e8f35bef1d4d3f0411933b3190297302a":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6","598b5d23aa7c9732bf473c21a9cd309c44599394"],"778044e6175d398c3f128227b96c5f3ad32184f0":["598b5d23aa7c9732bf473c21a9cd309c44599394","3bd3db3e8f35bef1d4d3f0411933b3190297302a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}