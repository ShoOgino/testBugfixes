{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#fromPath(double[],double[],double).mjava","commits":[{"id":"f32db9456b1759bf570a512581f5cea321f69f73","date":1463520039,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#fromPath(double[],double[],double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Convert input parameters to a path.\n   * @param pathLatitudes latitude values for points of the path: must be within standard +/-90 coordinate bounds.\n   * @param pathLongitudes longitude values for points of the path: must be within standard +/-180 coordinate bounds.\n   * @param pathWidthMeters width of the path in meters.\n   * @return the path.\n   */\n  static GeoPath fromPath(final double[] pathLatitudes, final double[] pathLongitudes, final double pathWidthMeters) {\n    if (pathLatitudes.length != pathLongitudes.length) {\n      throw new IllegalArgumentException(\"same number of latitudes and longitudes required\");\n    }\n    final GeoPoint[] points = new GeoPoint[pathLatitudes.length];\n    for (int i = 0; i < pathLatitudes.length; i++) {\n      final double latitude = pathLatitudes[i];\n      final double longitude = pathLongitudes[i];\n      GeoUtils.checkLatitude(latitude);\n      GeoUtils.checkLongitude(longitude);\n      points[i] = new GeoPoint(PlanetModel.WGS84, fromDegrees(latitude), fromDegrees(longitude));\n    }\n    return GeoPathFactory.makeGeoPath(PlanetModel.WGS84, fromMeters(pathWidthMeters), points);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c9819d04ff44d2877a5a19257cd662751284a5f","date":1463541580,"type":0,"author":"David Smiley","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#fromPath(double[],double[],double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Convert input parameters to a path.\n   * @param pathLatitudes latitude values for points of the path: must be within standard +/-90 coordinate bounds.\n   * @param pathLongitudes longitude values for points of the path: must be within standard +/-180 coordinate bounds.\n   * @param pathWidthMeters width of the path in meters.\n   * @return the path.\n   */\n  static GeoPath fromPath(final double[] pathLatitudes, final double[] pathLongitudes, final double pathWidthMeters) {\n    if (pathLatitudes.length != pathLongitudes.length) {\n      throw new IllegalArgumentException(\"same number of latitudes and longitudes required\");\n    }\n    final GeoPoint[] points = new GeoPoint[pathLatitudes.length];\n    for (int i = 0; i < pathLatitudes.length; i++) {\n      final double latitude = pathLatitudes[i];\n      final double longitude = pathLongitudes[i];\n      GeoUtils.checkLatitude(latitude);\n      GeoUtils.checkLongitude(longitude);\n      points[i] = new GeoPoint(PlanetModel.WGS84, fromDegrees(latitude), fromDegrees(longitude));\n    }\n    return GeoPathFactory.makeGeoPath(PlanetModel.WGS84, fromMeters(pathWidthMeters), points);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#fromPath(double[],double[],double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Convert input parameters to a path.\n   * @param pathLatitudes latitude values for points of the path: must be within standard +/-90 coordinate bounds.\n   * @param pathLongitudes longitude values for points of the path: must be within standard +/-180 coordinate bounds.\n   * @param pathWidthMeters width of the path in meters.\n   * @return the path.\n   */\n  static GeoPath fromPath(final double[] pathLatitudes, final double[] pathLongitudes, final double pathWidthMeters) {\n    if (pathLatitudes.length != pathLongitudes.length) {\n      throw new IllegalArgumentException(\"same number of latitudes and longitudes required\");\n    }\n    final GeoPoint[] points = new GeoPoint[pathLatitudes.length];\n    for (int i = 0; i < pathLatitudes.length; i++) {\n      final double latitude = pathLatitudes[i];\n      final double longitude = pathLongitudes[i];\n      GeoUtils.checkLatitude(latitude);\n      GeoUtils.checkLongitude(longitude);\n      points[i] = new GeoPoint(PlanetModel.WGS84, fromDegrees(latitude), fromDegrees(longitude));\n    }\n    return GeoPathFactory.makeGeoPath(PlanetModel.WGS84, fromMeters(pathWidthMeters), points);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#fromPath(double[],double[],double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Convert input parameters to a path.\n   * @param pathLatitudes latitude values for points of the path: must be within standard +/-90 coordinate bounds.\n   * @param pathLongitudes longitude values for points of the path: must be within standard +/-180 coordinate bounds.\n   * @param pathWidthMeters width of the path in meters.\n   * @return the path.\n   */\n  static GeoPath fromPath(final double[] pathLatitudes, final double[] pathLongitudes, final double pathWidthMeters) {\n    if (pathLatitudes.length != pathLongitudes.length) {\n      throw new IllegalArgumentException(\"same number of latitudes and longitudes required\");\n    }\n    final GeoPoint[] points = new GeoPoint[pathLatitudes.length];\n    for (int i = 0; i < pathLatitudes.length; i++) {\n      final double latitude = pathLatitudes[i];\n      final double longitude = pathLongitudes[i];\n      GeoUtils.checkLatitude(latitude);\n      GeoUtils.checkLongitude(longitude);\n      points[i] = new GeoPoint(PlanetModel.WGS84, fromDegrees(latitude), fromDegrees(longitude));\n    }\n    return GeoPathFactory.makeGeoPath(PlanetModel.WGS84, fromMeters(pathWidthMeters), points);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","date":1583186777,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#fromPath(PlanetModel,double[],double[],double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#fromPath(double[],double[],double).mjava","sourceNew":"  /**\n   * Convert input parameters to a path.\n   * @param pathLatitudes latitude values for points of the path: must be within standard +/-90 coordinate bounds.\n   * @param pathLongitudes longitude values for points of the path: must be within standard +/-180 coordinate bounds.\n   * @param pathWidthMeters width of the path in meters.\n   * @return the path.\n   */\n  static GeoPath fromPath(final PlanetModel planetModel, final double[] pathLatitudes, final double[] pathLongitudes, final double pathWidthMeters) {\n    if (pathLatitudes.length != pathLongitudes.length) {\n      throw new IllegalArgumentException(\"same number of latitudes and longitudes required\");\n    }\n    final GeoPoint[] points = new GeoPoint[pathLatitudes.length];\n    for (int i = 0; i < pathLatitudes.length; i++) {\n      final double latitude = pathLatitudes[i];\n      final double longitude = pathLongitudes[i];\n      GeoUtils.checkLatitude(latitude);\n      GeoUtils.checkLongitude(longitude);\n      points[i] = new GeoPoint(planetModel, fromDegrees(latitude), fromDegrees(longitude));\n    }\n    return GeoPathFactory.makeGeoPath(planetModel, planetModel.fromMeters(pathWidthMeters), points);\n  }\n\n","sourceOld":"  /**\n   * Convert input parameters to a path.\n   * @param pathLatitudes latitude values for points of the path: must be within standard +/-90 coordinate bounds.\n   * @param pathLongitudes longitude values for points of the path: must be within standard +/-180 coordinate bounds.\n   * @param pathWidthMeters width of the path in meters.\n   * @return the path.\n   */\n  static GeoPath fromPath(final double[] pathLatitudes, final double[] pathLongitudes, final double pathWidthMeters) {\n    if (pathLatitudes.length != pathLongitudes.length) {\n      throw new IllegalArgumentException(\"same number of latitudes and longitudes required\");\n    }\n    final GeoPoint[] points = new GeoPoint[pathLatitudes.length];\n    for (int i = 0; i < pathLatitudes.length; i++) {\n      final double latitude = pathLatitudes[i];\n      final double longitude = pathLongitudes[i];\n      GeoUtils.checkLatitude(latitude);\n      GeoUtils.checkLongitude(longitude);\n      points[i] = new GeoPoint(PlanetModel.WGS84, fromDegrees(latitude), fromDegrees(longitude));\n    }\n    return GeoPathFactory.makeGeoPath(PlanetModel.WGS84, fromMeters(pathWidthMeters), points);\n  }\n\n","bugFix":null,"bugIntro":["66817073345fa8e6416a3654a58a741c14745c40"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9c9819d04ff44d2877a5a19257cd662751284a5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f32db9456b1759bf570a512581f5cea321f69f73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"f32db9456b1759bf570a512581f5cea321f69f73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f32db9456b1759bf570a512581f5cea321f69f73"]},"commit2Childs":{"9c9819d04ff44d2877a5a19257cd662751284a5f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9c9819d04ff44d2877a5a19257cd662751284a5f","f32db9456b1759bf570a512581f5cea321f69f73","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"f32db9456b1759bf570a512581f5cea321f69f73":["9c9819d04ff44d2877a5a19257cd662751284a5f","d470c8182e92b264680e34081b75e70a9f2b3c89"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9c9819d04ff44d2877a5a19257cd662751284a5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}