{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testRequestParamsAsFieldName().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testRequestParamsAsFieldName().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder2#testRequestParamsAsFieldName().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testRequestParamsAsFieldName() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"mypk\", \"101\", \"text\", \"ApacheSolr\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n            \"debug\", \"on\", \"clean\", \"true\", \"commit\", \"true\",\n            \"mypk\", \"id\", \"text\", \"desc\",\n            \"dataConfig\", dataConfigWithTemplatizedFieldNames);\n    h.query(\"/dataimport\", request);\n    assertQ(req(\"id:101\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testRequestParamsAsFieldName() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"mypk\", \"101\", \"text\", \"ApacheSolr\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n            \"debug\", \"on\", \"clean\", \"true\", \"commit\", \"true\",\n            \"mypk\", \"id\", \"text\", \"desc\",\n            \"dataConfig\", dataConfigWithTemplatizedFieldNames);\n    h.query(\"/dataimport\", request);\n    assertQ(req(\"id:101\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testRequestParamsAsFieldName().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder2#testRequestParamsAsFieldName().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testRequestParamsAsFieldName() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"mypk\", \"101\", \"text\", \"ApacheSolr\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n            \"debug\", \"on\", \"clean\", \"true\", \"commit\", \"true\",\n            \"mypk\", \"id\", \"text\", \"desc\",\n            \"dataConfig\", dataConfigWithTemplatizedFieldNames);\n    h.query(\"/dataimport\", request);\n    assertQ(req(\"id:101\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testRequestParamsAsFieldName() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"mypk\", \"101\", \"text\", \"ApacheSolr\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n            \"debug\", \"on\", \"clean\", \"true\", \"commit\", \"true\",\n            \"mypk\", \"id\", \"text\", \"desc\",\n            \"dataConfig\", dataConfigWithTemplatizedFieldNames);\n    h.query(\"/dataimport\", request);\n    assertQ(req(\"id:101\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testRequestParamsAsFieldName().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testRequestParamsAsFieldName().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testRequestParamsAsFieldName() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"mypk\", \"101\", \"text\", \"ApacheSolr\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n            \"debug\", \"on\", \"clean\", \"true\", \"commit\", \"true\",\n            \"mypk\", \"id\", \"text\", \"desc\",\n            \"dataConfig\", DATA_CONFIG_WITH_TEMPLATIZED_FIELD_NAMES);\n    h.query(\"/dataimport\", request);\n    assertQ(req(\"id:101\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testRequestParamsAsFieldName() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"mypk\", \"101\", \"text\", \"ApacheSolr\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n            \"debug\", \"on\", \"clean\", \"true\", \"commit\", \"true\",\n            \"mypk\", \"id\", \"text\", \"desc\",\n            \"dataConfig\", dataConfigWithTemplatizedFieldNames);\n    h.query(\"/dataimport\", request);\n    assertQ(req(\"id:101\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testRequestParamsAsFieldName().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testRequestParamsAsFieldName().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testRequestParamsAsFieldName() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"mypk\", \"101\", \"text\", \"ApacheSolr\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n            \"debug\", \"on\", \"clean\", \"true\", \"commit\", \"true\",\n            \"mypk\", \"id\", \"text\", \"desc\",\n            \"dataConfig\", DATA_CONFIG_WITH_TEMPLATIZED_FIELD_NAMES);\n    h.query(\"/dataimport\", request);\n    assertQ(req(\"id:101\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testRequestParamsAsFieldName() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"mypk\", \"101\", \"text\", \"ApacheSolr\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n            \"debug\", \"on\", \"clean\", \"true\", \"commit\", \"true\",\n            \"mypk\", \"id\", \"text\", \"desc\",\n            \"dataConfig\", dataConfigWithTemplatizedFieldNames);\n    h.query(\"/dataimport\", request);\n    assertQ(req(\"id:101\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testRequestParamsAsFieldName().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testRequestParamsAsFieldName().mjava","sourceNew":"  @Test\n  public void testRequestParamsAsFieldName() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"mypk\", \"101\", \"text\", \"ApacheSolr\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n            \"debug\", \"on\", \"clean\", \"true\", \"commit\", \"true\",\n            \"mypk\", \"id\", \"text\", \"desc\",\n            \"dataConfig\", DATA_CONFIG_WITH_TEMPLATIZED_FIELD_NAMES);\n    h.query(\"/dataimport\", request);\n    assertQ(req(\"id:101\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testRequestParamsAsFieldName() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"mypk\", \"101\", \"text\", \"ApacheSolr\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n            \"debug\", \"on\", \"clean\", \"true\", \"commit\", \"true\",\n            \"mypk\", \"id\", \"text\", \"desc\",\n            \"dataConfig\", DATA_CONFIG_WITH_TEMPLATIZED_FIELD_NAMES);\n    h.query(\"/dataimport\", request);\n    assertQ(req(\"id:101\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testRequestParamsAsFieldName().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testRequestParamsAsFieldName().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testRequestParamsAsFieldName() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"mypk\", \"101\", \"text\", \"ApacheSolr\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n            \"debug\", \"on\", \"clean\", \"true\", \"commit\", \"true\",\n            \"mypk\", \"id\", \"text\", \"desc\",\n            \"dataConfig\", DATA_CONFIG_WITH_TEMPLATIZED_FIELD_NAMES);\n    h.query(\"/dataimport\", request);\n    assertQ(req(\"id:101\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  public void testRequestParamsAsFieldName() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"mypk\", \"101\", \"text\", \"ApacheSolr\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n            \"debug\", \"on\", \"clean\", \"true\", \"commit\", \"true\",\n            \"mypk\", \"id\", \"text\", \"desc\",\n            \"dataConfig\", DATA_CONFIG_WITH_TEMPLATIZED_FIELD_NAMES);\n    h.query(\"/dataimport\", request);\n    assertQ(req(\"id:101\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024e13388acbf5562fcbb77a129620982a5e2d79","date":1591531835,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testRequestParamsAsFieldName().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testRequestParamsAsFieldName().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testRequestParamsAsFieldName() throws Exception {\n    @SuppressWarnings({\"rawtypes\"})\n    List rows = new ArrayList();\n    rows.add(createMap(\"mypk\", \"101\", \"text\", \"ApacheSolr\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n            \"debug\", \"on\", \"clean\", \"true\", \"commit\", \"true\",\n            \"mypk\", \"id\", \"text\", \"desc\",\n            \"dataConfig\", DATA_CONFIG_WITH_TEMPLATIZED_FIELD_NAMES);\n    h.query(\"/dataimport\", request);\n    assertQ(req(\"id:101\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testRequestParamsAsFieldName() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"mypk\", \"101\", \"text\", \"ApacheSolr\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n            \"debug\", \"on\", \"clean\", \"true\", \"commit\", \"true\",\n            \"mypk\", \"id\", \"text\", \"desc\",\n            \"dataConfig\", DATA_CONFIG_WITH_TEMPLATIZED_FIELD_NAMES);\n    h.query(\"/dataimport\", request);\n    assertQ(req(\"id:101\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testRequestParamsAsFieldName().mjava","sourceNew":null,"sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testRequestParamsAsFieldName() throws Exception {\n    @SuppressWarnings({\"rawtypes\"})\n    List rows = new ArrayList();\n    rows.add(createMap(\"mypk\", \"101\", \"text\", \"ApacheSolr\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n            \"debug\", \"on\", \"clean\", \"true\", \"commit\", \"true\",\n            \"mypk\", \"id\", \"text\", \"desc\",\n            \"dataConfig\", DATA_CONFIG_WITH_TEMPLATIZED_FIELD_NAMES);\n    h.query(\"/dataimport\", request);\n    assertQ(req(\"id:101\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"024e13388acbf5562fcbb77a129620982a5e2d79":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["5de502b5478255493125e7e801411ba17a6682ec"],"5de502b5478255493125e7e801411ba17a6682ec":["c26f00b574427b55127e869b935845554afde1fa"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"024e13388acbf5562fcbb77a129620982a5e2d79":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"5de502b5478255493125e7e801411ba17a6682ec":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["024e13388acbf5562fcbb77a129620982a5e2d79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6f20fd35e3055a0c5b387df0b986a68d65d86441","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}