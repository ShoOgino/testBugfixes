{"path":"src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,NamedList).mjava","commits":[{"id":"72795268249b27583ff50fb731db1179e4d4bdce","date":1253625275,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  public static void invokeSetters(Object bean, NamedList initArgs) {\n    Class clazz = bean.getClass();\n    Method[] methods = clazz.getMethods();\n    Iterator<Map.Entry<String, Object>> iterator = initArgs.iterator();\n    while (iterator.hasNext()) {\n      Map.Entry<String, Object> entry = iterator.next();\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      Method method = null;\n      try {\n        for (Method m : methods) {\n          if (m.getName().equals(setterName) && m.getParameterTypes().length == 1) { \n            method = m;\n            break;\n          }\n        }\n        if (method == null) {\n          throw new RuntimeException(\"no setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n        }\n        Class pClazz = method.getParameterTypes()[0];\n        Object val = entry.getValue();\n        method.invoke(bean, val);\n      } catch (InvocationTargetException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \"on class : \" + clazz.getName(), e1);\n      } catch (IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \"on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"619c44e13c78a9a91eb5aafca38bced76d514cc4","date":1253687440,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,NamedList).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,NamedList).mjava","sourceNew":"  public static void invokeSetters(Object bean, NamedList initArgs) {\n    if (initArgs == null) return;\n    Class clazz = bean.getClass();\n    Method[] methods = clazz.getMethods();\n    Iterator<Map.Entry<String, Object>> iterator = initArgs.iterator();\n    while (iterator.hasNext()) {\n      Map.Entry<String, Object> entry = iterator.next();\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      Method method = null;\n      try {\n        for (Method m : methods) {\n          if (m.getName().equals(setterName) && m.getParameterTypes().length == 1) { \n            method = m;\n            break;\n          }\n        }\n        if (method == null) {\n          throw new RuntimeException(\"no setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n        }\n        Class pClazz = method.getParameterTypes()[0];\n        Object val = entry.getValue();\n        method.invoke(bean, val);\n      } catch (InvocationTargetException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \"on class : \" + clazz.getName(), e1);\n      } catch (IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \"on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","sourceOld":"  public static void invokeSetters(Object bean, NamedList initArgs) {\n    Class clazz = bean.getClass();\n    Method[] methods = clazz.getMethods();\n    Iterator<Map.Entry<String, Object>> iterator = initArgs.iterator();\n    while (iterator.hasNext()) {\n      Map.Entry<String, Object> entry = iterator.next();\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      Method method = null;\n      try {\n        for (Method m : methods) {\n          if (m.getName().equals(setterName) && m.getParameterTypes().length == 1) { \n            method = m;\n            break;\n          }\n        }\n        if (method == null) {\n          throw new RuntimeException(\"no setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n        }\n        Class pClazz = method.getParameterTypes()[0];\n        Object val = entry.getValue();\n        method.invoke(bean, val);\n      } catch (InvocationTargetException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \"on class : \" + clazz.getName(), e1);\n      } catch (IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \"on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27890aad0806632a85efc5f13a73686f7f51acfc","date":1268619790,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,NamedList).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,NamedList).mjava","sourceNew":"  public static void invokeSetters(Object bean, NamedList initArgs) {\n    if (initArgs == null) return;\n    Class clazz = bean.getClass();\n    Method[] methods = clazz.getMethods();\n    Iterator<Map.Entry<String, Object>> iterator = initArgs.iterator();\n    while (iterator.hasNext()) {\n      Map.Entry<String, Object> entry = iterator.next();\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      Method method = null;\n      try {\n        for (Method m : methods) {\n          if (m.getName().equals(setterName) && m.getParameterTypes().length == 1) { \n            method = m;\n            break;\n          }\n        }\n        if (method == null) {\n          throw new RuntimeException(\"no setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n        }\n        Class pClazz = method.getParameterTypes()[0];\n        Object val = entry.getValue();\n        method.invoke(bean, val);\n      } catch (InvocationTargetException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      } catch (IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","sourceOld":"  public static void invokeSetters(Object bean, NamedList initArgs) {\n    if (initArgs == null) return;\n    Class clazz = bean.getClass();\n    Method[] methods = clazz.getMethods();\n    Iterator<Map.Entry<String, Object>> iterator = initArgs.iterator();\n    while (iterator.hasNext()) {\n      Map.Entry<String, Object> entry = iterator.next();\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      Method method = null;\n      try {\n        for (Method m : methods) {\n          if (m.getName().equals(setterName) && m.getParameterTypes().length == 1) { \n            method = m;\n            break;\n          }\n        }\n        if (method == null) {\n          throw new RuntimeException(\"no setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n        }\n        Class pClazz = method.getParameterTypes()[0];\n        Object val = entry.getValue();\n        method.invoke(bean, val);\n      } catch (InvocationTargetException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \"on class : \" + clazz.getName(), e1);\n      } catch (IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \"on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,NamedList).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#invokeSetters(Object,NamedList).mjava","sourceNew":"  public static void invokeSetters(Object bean, NamedList initArgs) {\n    if (initArgs == null) return;\n    Class clazz = bean.getClass();\n    Method[] methods = clazz.getMethods();\n    Iterator<Map.Entry<String, Object>> iterator = initArgs.iterator();\n    while (iterator.hasNext()) {\n      Map.Entry<String, Object> entry = iterator.next();\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      Method method = null;\n      try {\n        for (Method m : methods) {\n          if (m.getName().equals(setterName) && m.getParameterTypes().length == 1) { \n            method = m;\n            break;\n          }\n        }\n        if (method == null) {\n          throw new RuntimeException(\"no setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n        }\n        Class pClazz = method.getParameterTypes()[0];\n        Object val = entry.getValue();\n        method.invoke(bean, val);\n      } catch (InvocationTargetException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      } catch (IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","sourceOld":"  public static void invokeSetters(Object bean, NamedList initArgs) {\n    if (initArgs == null) return;\n    Class clazz = bean.getClass();\n    Method[] methods = clazz.getMethods();\n    Iterator<Map.Entry<String, Object>> iterator = initArgs.iterator();\n    while (iterator.hasNext()) {\n      Map.Entry<String, Object> entry = iterator.next();\n      String key = entry.getKey();\n      String setterName = \"set\" + String.valueOf(Character.toUpperCase(key.charAt(0))) + key.substring(1);\n      Method method = null;\n      try {\n        for (Method m : methods) {\n          if (m.getName().equals(setterName) && m.getParameterTypes().length == 1) { \n            method = m;\n            break;\n          }\n        }\n        if (method == null) {\n          throw new RuntimeException(\"no setter corrresponding to '\" + key + \"' in \" + clazz.getName());\n        }\n        Class pClazz = method.getParameterTypes()[0];\n        Object val = entry.getValue();\n        method.invoke(bean, val);\n      } catch (InvocationTargetException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      } catch (IllegalAccessException e1) {\n        throw new RuntimeException(\"Error invoking setter \" + setterName + \" on class : \" + clazz.getName(), e1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"72795268249b27583ff50fb731db1179e4d4bdce":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["27890aad0806632a85efc5f13a73686f7f51acfc"],"619c44e13c78a9a91eb5aafca38bced76d514cc4":["72795268249b27583ff50fb731db1179e4d4bdce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"27890aad0806632a85efc5f13a73686f7f51acfc":["619c44e13c78a9a91eb5aafca38bced76d514cc4"]},"commit2Childs":{"72795268249b27583ff50fb731db1179e4d4bdce":["619c44e13c78a9a91eb5aafca38bced76d514cc4"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["72795268249b27583ff50fb731db1179e4d4bdce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"619c44e13c78a9a91eb5aafca38bced76d514cc4":["27890aad0806632a85efc5f13a73686f7f51acfc"],"27890aad0806632a85efc5f13a73686f7f51acfc":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}