{"path":"solr/core/src/test/org/apache/solr/search/function/SortByFunctionTest#testFieldSortSpecifiedAsFunction().mjava","commits":[{"id":"3f7f81a15cd0183e4e6262806b2e491a130e63db","date":1438643602,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/SortByFunctionTest#testFieldSortSpecifiedAsFunction().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sort by function normally compares the double value, but if a function is specified that identifies\n   * a single field, we should use the underlying field's SortField to save of a lot of type converstion \n   * (and RAM), and keep the sort precision as high as possible\n   */\n  public void testFieldSortSpecifiedAsFunction() throws Exception {\n    final long A = Long.MIN_VALUE;\n    final long B = A + 1L;\n    final long C = B + 1L;\n    \n    final long Z = Long.MAX_VALUE;\n    final long Y = Z - 1L;\n    final long X = Y - 1L;\n    \n    // test is predicated on the idea that if long -> double converstion is happening under the hood\n    // then we lose precision in sorting; so lets sanity check that our JVM isn't doing something wacky\n    // in converstion that violates the principle of the test\n    \n    assertEquals(\"WTF? small longs cast to double aren't equivilent?\",\n                 (double)A, (double)B, 0.0D);\n    assertEquals(\"WTF? small longs cast to double aren't equivilent?\",\n                 (double)A, (double)C, 0.0D);\n    \n    assertEquals(\"WTF? big longs cast to double aren't equivilent?\",\n                 (double)Z, (double)Y, 0.0D);\n    assertEquals(\"WTF? big longs cast to double aren't equivilent?\",\n                 (double)Z, (double)X, 0.0D);\n    \n    int docId = 0;\n    for (int i = 0; i < 3; i++) {\n      assertU(adoc(sdoc(\"id\", ++docId, \"primary_tl1\", X, \"secondary_tl1\", i,\n                        \"multi_l_dv\", X, \"multi_l_dv\", A)));\n      assertU(adoc(sdoc(\"id\", ++docId, \"primary_tl1\", Y, \"secondary_tl1\", i,\n                        \"multi_l_dv\", Y, \"multi_l_dv\", B)));\n      assertU(adoc(sdoc(\"id\", ++docId, \"primary_tl1\", Z, \"secondary_tl1\", i,\n                        \"multi_l_dv\", Z, \"multi_l_dv\", C)));\n    }\n    assertU(commit());\n\n    // all of these sorts should result in the exact same order\n    for (String primarySort : new String[] { \"primary_tl1\", \"field(primary_tl1)\",\n                                             \"field(multi_l_dv,max)\", \"field(multi_l_dv,min)\" }) {\n      assertQ(req(\"q\", \"*:*\",\n                  \"sort\", primarySort + \" asc, secondary_tl1 asc\")\n              , \"//*[@numFound='9']\"\n              //\n              , \"//result/doc[1]/long[@name='primary_tl1'][.='\"+X+\"']\"\n              , \"//result/doc[1]/long[@name='secondary_tl1'][.='0']\"\n              , \"//result/doc[2]/long[@name='primary_tl1'][.='\"+X+\"']\"\n              , \"//result/doc[2]/long[@name='secondary_tl1'][.='1']\"\n              , \"//result/doc[3]/long[@name='primary_tl1'][.='\"+X+\"']\"\n              , \"//result/doc[3]/long[@name='secondary_tl1'][.='2']\"\n              //\n              , \"//result/doc[4]/long[@name='primary_tl1'][.='\"+Y+\"']\"\n              , \"//result/doc[4]/long[@name='secondary_tl1'][.='0']\"\n              , \"//result/doc[5]/long[@name='primary_tl1'][.='\"+Y+\"']\"\n              , \"//result/doc[5]/long[@name='secondary_tl1'][.='1']\"\n              , \"//result/doc[6]/long[@name='primary_tl1'][.='\"+Y+\"']\"\n              , \"//result/doc[6]/long[@name='secondary_tl1'][.='2']\"\n              //\n              , \"//result/doc[7]/long[@name='primary_tl1'][.='\"+Z+\"']\"\n              , \"//result/doc[7]/long[@name='secondary_tl1'][.='0']\"\n              , \"//result/doc[8]/long[@name='primary_tl1'][.='\"+Z+\"']\"\n              , \"//result/doc[8]/long[@name='secondary_tl1'][.='1']\"\n              , \"//result/doc[9]/long[@name='primary_tl1'][.='\"+Z+\"']\"\n              , \"//result/doc[9]/long[@name='secondary_tl1'][.='2']\"\n              );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9f4251f14d2db68330fc1e6f0495c053a905d560"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1569154d9022ce8af675619dd6fd98464503d846","date":1438708795,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/SortByFunctionTest#testFieldSortSpecifiedAsFunction().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/SortByFunctionTest#testFieldSortSpecifiedAsFunction().mjava","sourceNew":"  /**\n   * Sort by function normally compares the double value, but if a function is specified that identifies\n   * a single field, we should use the underlying field's SortField to save of a lot of type converstion \n   * (and RAM), and keep the sort precision as high as possible\n   *\n   * @see #getFieldFunctionClausesToTest\n   */\n  public void testFieldSortSpecifiedAsFunction() throws Exception {\n    final long A = Long.MIN_VALUE;\n    final long B = A + 1L;\n    final long C = B + 1L;\n    \n    final long Z = Long.MAX_VALUE;\n    final long Y = Z - 1L;\n    final long X = Y - 1L;\n    \n    // test is predicated on the idea that if long -> double converstion is happening under the hood\n    // then we lose precision in sorting; so lets sanity check that our JVM isn't doing something wacky\n    // in converstion that violates the principle of the test\n    \n    assertEquals(\"WTF? small longs cast to double aren't equivilent?\",\n                 (double)A, (double)B, 0.0D);\n    assertEquals(\"WTF? small longs cast to double aren't equivilent?\",\n                 (double)A, (double)C, 0.0D);\n    \n    assertEquals(\"WTF? big longs cast to double aren't equivilent?\",\n                 (double)Z, (double)Y, 0.0D);\n    assertEquals(\"WTF? big longs cast to double aren't equivilent?\",\n                 (double)Z, (double)X, 0.0D);\n    \n    int docId = 0;\n    for (int i = 0; i < 3; i++) {\n      assertU(adoc(sdoc(\"id\", ++docId, \"primary_tl1\", X, \"secondary_tl1\", i,\n                        \"multi_l_dv\", X, \"multi_l_dv\", A)));\n      assertU(adoc(sdoc(\"id\", ++docId, \"primary_tl1\", Y, \"secondary_tl1\", i,\n                        \"multi_l_dv\", Y, \"multi_l_dv\", B)));\n      assertU(adoc(sdoc(\"id\", ++docId, \"primary_tl1\", Z, \"secondary_tl1\", i,\n                        \"multi_l_dv\", Z, \"multi_l_dv\", C)));\n    }\n    assertU(commit());\n\n    // all of these sorts should result in the exact same order\n    // min/max of a field is tested in TestSortByMinMaxFunction\n    for (String primarySort : getFieldFunctionClausesToTest()) {\n\n      assertQ(req(\"q\", \"*:*\",\n                  \"sort\", primarySort + \" asc, secondary_tl1 asc\")\n              , \"//*[@numFound='9']\"\n              //\n              , \"//result/doc[1]/long[@name='primary_tl1'][.='\"+X+\"']\"\n              , \"//result/doc[1]/long[@name='secondary_tl1'][.='0']\"\n              , \"//result/doc[2]/long[@name='primary_tl1'][.='\"+X+\"']\"\n              , \"//result/doc[2]/long[@name='secondary_tl1'][.='1']\"\n              , \"//result/doc[3]/long[@name='primary_tl1'][.='\"+X+\"']\"\n              , \"//result/doc[3]/long[@name='secondary_tl1'][.='2']\"\n              //\n              , \"//result/doc[4]/long[@name='primary_tl1'][.='\"+Y+\"']\"\n              , \"//result/doc[4]/long[@name='secondary_tl1'][.='0']\"\n              , \"//result/doc[5]/long[@name='primary_tl1'][.='\"+Y+\"']\"\n              , \"//result/doc[5]/long[@name='secondary_tl1'][.='1']\"\n              , \"//result/doc[6]/long[@name='primary_tl1'][.='\"+Y+\"']\"\n              , \"//result/doc[6]/long[@name='secondary_tl1'][.='2']\"\n              //\n              , \"//result/doc[7]/long[@name='primary_tl1'][.='\"+Z+\"']\"\n              , \"//result/doc[7]/long[@name='secondary_tl1'][.='0']\"\n              , \"//result/doc[8]/long[@name='primary_tl1'][.='\"+Z+\"']\"\n              , \"//result/doc[8]/long[@name='secondary_tl1'][.='1']\"\n              , \"//result/doc[9]/long[@name='primary_tl1'][.='\"+Z+\"']\"\n              , \"//result/doc[9]/long[@name='secondary_tl1'][.='2']\"\n              );\n    }\n  }\n\n","sourceOld":"  /**\n   * Sort by function normally compares the double value, but if a function is specified that identifies\n   * a single field, we should use the underlying field's SortField to save of a lot of type converstion \n   * (and RAM), and keep the sort precision as high as possible\n   */\n  public void testFieldSortSpecifiedAsFunction() throws Exception {\n    final long A = Long.MIN_VALUE;\n    final long B = A + 1L;\n    final long C = B + 1L;\n    \n    final long Z = Long.MAX_VALUE;\n    final long Y = Z - 1L;\n    final long X = Y - 1L;\n    \n    // test is predicated on the idea that if long -> double converstion is happening under the hood\n    // then we lose precision in sorting; so lets sanity check that our JVM isn't doing something wacky\n    // in converstion that violates the principle of the test\n    \n    assertEquals(\"WTF? small longs cast to double aren't equivilent?\",\n                 (double)A, (double)B, 0.0D);\n    assertEquals(\"WTF? small longs cast to double aren't equivilent?\",\n                 (double)A, (double)C, 0.0D);\n    \n    assertEquals(\"WTF? big longs cast to double aren't equivilent?\",\n                 (double)Z, (double)Y, 0.0D);\n    assertEquals(\"WTF? big longs cast to double aren't equivilent?\",\n                 (double)Z, (double)X, 0.0D);\n    \n    int docId = 0;\n    for (int i = 0; i < 3; i++) {\n      assertU(adoc(sdoc(\"id\", ++docId, \"primary_tl1\", X, \"secondary_tl1\", i,\n                        \"multi_l_dv\", X, \"multi_l_dv\", A)));\n      assertU(adoc(sdoc(\"id\", ++docId, \"primary_tl1\", Y, \"secondary_tl1\", i,\n                        \"multi_l_dv\", Y, \"multi_l_dv\", B)));\n      assertU(adoc(sdoc(\"id\", ++docId, \"primary_tl1\", Z, \"secondary_tl1\", i,\n                        \"multi_l_dv\", Z, \"multi_l_dv\", C)));\n    }\n    assertU(commit());\n\n    // all of these sorts should result in the exact same order\n    for (String primarySort : new String[] { \"primary_tl1\", \"field(primary_tl1)\",\n                                             \"field(multi_l_dv,max)\", \"field(multi_l_dv,min)\" }) {\n      assertQ(req(\"q\", \"*:*\",\n                  \"sort\", primarySort + \" asc, secondary_tl1 asc\")\n              , \"//*[@numFound='9']\"\n              //\n              , \"//result/doc[1]/long[@name='primary_tl1'][.='\"+X+\"']\"\n              , \"//result/doc[1]/long[@name='secondary_tl1'][.='0']\"\n              , \"//result/doc[2]/long[@name='primary_tl1'][.='\"+X+\"']\"\n              , \"//result/doc[2]/long[@name='secondary_tl1'][.='1']\"\n              , \"//result/doc[3]/long[@name='primary_tl1'][.='\"+X+\"']\"\n              , \"//result/doc[3]/long[@name='secondary_tl1'][.='2']\"\n              //\n              , \"//result/doc[4]/long[@name='primary_tl1'][.='\"+Y+\"']\"\n              , \"//result/doc[4]/long[@name='secondary_tl1'][.='0']\"\n              , \"//result/doc[5]/long[@name='primary_tl1'][.='\"+Y+\"']\"\n              , \"//result/doc[5]/long[@name='secondary_tl1'][.='1']\"\n              , \"//result/doc[6]/long[@name='primary_tl1'][.='\"+Y+\"']\"\n              , \"//result/doc[6]/long[@name='secondary_tl1'][.='2']\"\n              //\n              , \"//result/doc[7]/long[@name='primary_tl1'][.='\"+Z+\"']\"\n              , \"//result/doc[7]/long[@name='secondary_tl1'][.='0']\"\n              , \"//result/doc[8]/long[@name='primary_tl1'][.='\"+Z+\"']\"\n              , \"//result/doc[8]/long[@name='secondary_tl1'][.='1']\"\n              , \"//result/doc[9]/long[@name='primary_tl1'][.='\"+Z+\"']\"\n              , \"//result/doc[9]/long[@name='secondary_tl1'][.='2']\"\n              );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9f4251f14d2db68330fc1e6f0495c053a905d560","date":1537116380,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/SortByFunctionTest#testFieldSortSpecifiedAsFunction().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/SortByFunctionTest#testFieldSortSpecifiedAsFunction().mjava","sourceNew":"  /**\n   * Sort by function normally compares the double value, but if a function is specified that identifies\n   * a single field, we should use the underlying field's SortField to save of a lot of type converstion \n   * (and RAM), and keep the sort precision as high as possible\n   *\n   * @see #getFieldFunctionClausesToTest\n   */\n  public void testFieldSortSpecifiedAsFunction() throws Exception {\n    final long A = Long.MIN_VALUE;\n    final long B = A + 1L;\n    final long C = B + 1L;\n    \n    final long Z = Long.MAX_VALUE;\n    final long Y = Z - 1L;\n    final long X = Y - 1L;\n    \n    // test is predicated on the idea that if long -> double converstion is happening under the hood\n    // then we lose precision in sorting; so lets sanity check that our JVM isn't doing something wacky\n    // in converstion that violates the principle of the test\n    \n    assertEquals(\"WTF? small longs cast to double aren't equivalent?\",\n                 (double)A, (double)B, 0.0D);\n    assertEquals(\"WTF? small longs cast to double aren't equivalent?\",\n                 (double)A, (double)C, 0.0D);\n    \n    assertEquals(\"WTF? big longs cast to double aren't equivalent?\",\n                 (double)Z, (double)Y, 0.0D);\n    assertEquals(\"WTF? big longs cast to double aren't equivalent?\",\n                 (double)Z, (double)X, 0.0D);\n    \n    int docId = 0;\n    for (int i = 0; i < 3; i++) {\n      assertU(adoc(sdoc(\"id\", ++docId, \"primary_tl1\", X, \"secondary_tl1\", i,\n                        \"multi_l_dv\", X, \"multi_l_dv\", A)));\n      assertU(adoc(sdoc(\"id\", ++docId, \"primary_tl1\", Y, \"secondary_tl1\", i,\n                        \"multi_l_dv\", Y, \"multi_l_dv\", B)));\n      assertU(adoc(sdoc(\"id\", ++docId, \"primary_tl1\", Z, \"secondary_tl1\", i,\n                        \"multi_l_dv\", Z, \"multi_l_dv\", C)));\n    }\n    assertU(commit());\n\n    // all of these sorts should result in the exact same order\n    // min/max of a field is tested in TestSortByMinMaxFunction\n    for (String primarySort : getFieldFunctionClausesToTest()) {\n\n      assertQ(req(\"q\", \"*:*\",\n                  \"sort\", primarySort + \" asc, secondary_tl1 asc\")\n              , \"//*[@numFound='9']\"\n              //\n              , \"//result/doc[1]/long[@name='primary_tl1'][.='\"+X+\"']\"\n              , \"//result/doc[1]/long[@name='secondary_tl1'][.='0']\"\n              , \"//result/doc[2]/long[@name='primary_tl1'][.='\"+X+\"']\"\n              , \"//result/doc[2]/long[@name='secondary_tl1'][.='1']\"\n              , \"//result/doc[3]/long[@name='primary_tl1'][.='\"+X+\"']\"\n              , \"//result/doc[3]/long[@name='secondary_tl1'][.='2']\"\n              //\n              , \"//result/doc[4]/long[@name='primary_tl1'][.='\"+Y+\"']\"\n              , \"//result/doc[4]/long[@name='secondary_tl1'][.='0']\"\n              , \"//result/doc[5]/long[@name='primary_tl1'][.='\"+Y+\"']\"\n              , \"//result/doc[5]/long[@name='secondary_tl1'][.='1']\"\n              , \"//result/doc[6]/long[@name='primary_tl1'][.='\"+Y+\"']\"\n              , \"//result/doc[6]/long[@name='secondary_tl1'][.='2']\"\n              //\n              , \"//result/doc[7]/long[@name='primary_tl1'][.='\"+Z+\"']\"\n              , \"//result/doc[7]/long[@name='secondary_tl1'][.='0']\"\n              , \"//result/doc[8]/long[@name='primary_tl1'][.='\"+Z+\"']\"\n              , \"//result/doc[8]/long[@name='secondary_tl1'][.='1']\"\n              , \"//result/doc[9]/long[@name='primary_tl1'][.='\"+Z+\"']\"\n              , \"//result/doc[9]/long[@name='secondary_tl1'][.='2']\"\n              );\n    }\n  }\n\n","sourceOld":"  /**\n   * Sort by function normally compares the double value, but if a function is specified that identifies\n   * a single field, we should use the underlying field's SortField to save of a lot of type converstion \n   * (and RAM), and keep the sort precision as high as possible\n   *\n   * @see #getFieldFunctionClausesToTest\n   */\n  public void testFieldSortSpecifiedAsFunction() throws Exception {\n    final long A = Long.MIN_VALUE;\n    final long B = A + 1L;\n    final long C = B + 1L;\n    \n    final long Z = Long.MAX_VALUE;\n    final long Y = Z - 1L;\n    final long X = Y - 1L;\n    \n    // test is predicated on the idea that if long -> double converstion is happening under the hood\n    // then we lose precision in sorting; so lets sanity check that our JVM isn't doing something wacky\n    // in converstion that violates the principle of the test\n    \n    assertEquals(\"WTF? small longs cast to double aren't equivilent?\",\n                 (double)A, (double)B, 0.0D);\n    assertEquals(\"WTF? small longs cast to double aren't equivilent?\",\n                 (double)A, (double)C, 0.0D);\n    \n    assertEquals(\"WTF? big longs cast to double aren't equivilent?\",\n                 (double)Z, (double)Y, 0.0D);\n    assertEquals(\"WTF? big longs cast to double aren't equivilent?\",\n                 (double)Z, (double)X, 0.0D);\n    \n    int docId = 0;\n    for (int i = 0; i < 3; i++) {\n      assertU(adoc(sdoc(\"id\", ++docId, \"primary_tl1\", X, \"secondary_tl1\", i,\n                        \"multi_l_dv\", X, \"multi_l_dv\", A)));\n      assertU(adoc(sdoc(\"id\", ++docId, \"primary_tl1\", Y, \"secondary_tl1\", i,\n                        \"multi_l_dv\", Y, \"multi_l_dv\", B)));\n      assertU(adoc(sdoc(\"id\", ++docId, \"primary_tl1\", Z, \"secondary_tl1\", i,\n                        \"multi_l_dv\", Z, \"multi_l_dv\", C)));\n    }\n    assertU(commit());\n\n    // all of these sorts should result in the exact same order\n    // min/max of a field is tested in TestSortByMinMaxFunction\n    for (String primarySort : getFieldFunctionClausesToTest()) {\n\n      assertQ(req(\"q\", \"*:*\",\n                  \"sort\", primarySort + \" asc, secondary_tl1 asc\")\n              , \"//*[@numFound='9']\"\n              //\n              , \"//result/doc[1]/long[@name='primary_tl1'][.='\"+X+\"']\"\n              , \"//result/doc[1]/long[@name='secondary_tl1'][.='0']\"\n              , \"//result/doc[2]/long[@name='primary_tl1'][.='\"+X+\"']\"\n              , \"//result/doc[2]/long[@name='secondary_tl1'][.='1']\"\n              , \"//result/doc[3]/long[@name='primary_tl1'][.='\"+X+\"']\"\n              , \"//result/doc[3]/long[@name='secondary_tl1'][.='2']\"\n              //\n              , \"//result/doc[4]/long[@name='primary_tl1'][.='\"+Y+\"']\"\n              , \"//result/doc[4]/long[@name='secondary_tl1'][.='0']\"\n              , \"//result/doc[5]/long[@name='primary_tl1'][.='\"+Y+\"']\"\n              , \"//result/doc[5]/long[@name='secondary_tl1'][.='1']\"\n              , \"//result/doc[6]/long[@name='primary_tl1'][.='\"+Y+\"']\"\n              , \"//result/doc[6]/long[@name='secondary_tl1'][.='2']\"\n              //\n              , \"//result/doc[7]/long[@name='primary_tl1'][.='\"+Z+\"']\"\n              , \"//result/doc[7]/long[@name='secondary_tl1'][.='0']\"\n              , \"//result/doc[8]/long[@name='primary_tl1'][.='\"+Z+\"']\"\n              , \"//result/doc[8]/long[@name='secondary_tl1'][.='1']\"\n              , \"//result/doc[9]/long[@name='primary_tl1'][.='\"+Z+\"']\"\n              , \"//result/doc[9]/long[@name='secondary_tl1'][.='2']\"\n              );\n    }\n  }\n\n","bugFix":["3f7f81a15cd0183e4e6262806b2e491a130e63db"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9f4251f14d2db68330fc1e6f0495c053a905d560":["1569154d9022ce8af675619dd6fd98464503d846"],"3f7f81a15cd0183e4e6262806b2e491a130e63db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1569154d9022ce8af675619dd6fd98464503d846":["3f7f81a15cd0183e4e6262806b2e491a130e63db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9f4251f14d2db68330fc1e6f0495c053a905d560"]},"commit2Childs":{"9f4251f14d2db68330fc1e6f0495c053a905d560":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f7f81a15cd0183e4e6262806b2e491a130e63db":["1569154d9022ce8af675619dd6fd98464503d846"],"1569154d9022ce8af675619dd6fd98464503d846":["9f4251f14d2db68330fc1e6f0495c053a905d560"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f7f81a15cd0183e4e6262806b2e491a130e63db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}