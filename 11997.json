{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempPulsingPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,int).mjava","commits":[{"id":"4f8633b56150a205774ee3e2adf1452a81b0d904","date":1376926002,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempPulsingPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, BlockTermState _termState, Bits liveDocs, DocsAndPositionsEnum reuse,\n                                               int flags) throws IOException {\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        // the 'reuse' is actually the wrapped enum\n        PulsingDocsAndPositionsEnum previous = (PulsingDocsAndPositionsEnum) getOther(reuse);\n        if (previous != null && previous.canReuse(field)) {\n          postings = previous;\n        } else {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      }\n      if (reuse != postings) {\n        setOther(postings, reuse); // postings.other = reuse \n      }\n      return postings.reset(liveDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        DocsAndPositionsEnum wrapped = wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, (DocsAndPositionsEnum) getOther(reuse),\n                                                                              flags);\n        setOther(wrapped, reuse); // wrapped.other = reuse\n        return wrapped;\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, reuse, flags);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempPulsingPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, BlockTermState _termState, Bits liveDocs, DocsAndPositionsEnum reuse,\n                                               int flags) throws IOException {\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        // the 'reuse' is actually the wrapped enum\n        PulsingDocsAndPositionsEnum previous = (PulsingDocsAndPositionsEnum) getOther(reuse);\n        if (previous != null && previous.canReuse(field)) {\n          postings = previous;\n        } else {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      }\n      if (reuse != postings) {\n        setOther(postings, reuse); // postings.other = reuse \n      }\n      return postings.reset(liveDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        DocsAndPositionsEnum wrapped = wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, (DocsAndPositionsEnum) getOther(reuse),\n                                                                              flags);\n        setOther(wrapped, reuse); // wrapped.other = reuse\n        return wrapped;\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, reuse, flags);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["4f8633b56150a205774ee3e2adf1452a81b0d904"],"4f8633b56150a205774ee3e2adf1452a81b0d904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4f8633b56150a205774ee3e2adf1452a81b0d904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"4f8633b56150a205774ee3e2adf1452a81b0d904":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}