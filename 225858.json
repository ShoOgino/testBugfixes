{"path":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.SortedDocValuesImpl#iterator().mjava","commits":[{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.SortedDocValuesImpl#iterator().mjava","pathOld":"/dev/null","sourceNew":"    public SortedDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new SortedDocValues() {\n\n        @Override\n        public int getValueCount() {\n          return numOrd;\n        }\n\n        @Override\n        public int getOrd(int docID) {\n          // Subtract 1, matching the 1+ord we did when\n          // storing, so that missing values, which are 0 in the\n          // packed ints, are returned as -1 ord:\n          return (int) docToTermOrd.get(docID)-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          if (ord < 0) {\n            throw new IllegalArgumentException(\"ord must be >=0 (got ord=\" + ord + \")\");\n          }\n          bytes.fill(term, termOrdToBytesOffset.get(ord));\n          return term;\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.SortedDocValuesImpl#iterator().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.SortedDocValuesImpl#iterator().mjava","sourceNew":"    public SortedDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new SortedDocValues() {\n\n        @Override\n        public int getValueCount() {\n          return numOrd;\n        }\n\n        @Override\n        public int getOrd(int docID) {\n          // Subtract 1, matching the 1+ord we did when\n          // storing, so that missing values, which are 0 in the\n          // packed ints, are returned as -1 ord:\n          return (int) docToTermOrd.get(docID)-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          if (ord < 0) {\n            throw new IllegalArgumentException(\"ord must be >=0 (got ord=\" + ord + \")\");\n          }\n          bytes.fill(term, termOrdToBytesOffset.get(ord));\n          return term;\n        }\n      };\n    }\n\n","sourceOld":"    public SortedDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new SortedDocValues() {\n\n        @Override\n        public int getValueCount() {\n          return numOrd;\n        }\n\n        @Override\n        public int getOrd(int docID) {\n          // Subtract 1, matching the 1+ord we did when\n          // storing, so that missing values, which are 0 in the\n          // packed ints, are returned as -1 ord:\n          return (int) docToTermOrd.get(docID)-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          if (ord < 0) {\n            throw new IllegalArgumentException(\"ord must be >=0 (got ord=\" + ord + \")\");\n          }\n          bytes.fill(term, termOrdToBytesOffset.get(ord));\n          return term;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.SortedDocValuesImpl#iterator().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.SortedDocValuesImpl#iterator().mjava","sourceNew":"    public SortedDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new SortedDocValues() {\n\n        @Override\n        public int getValueCount() {\n          return numOrd;\n        }\n\n        @Override\n        public int getOrd(int docID) {\n          // Subtract 1, matching the 1+ord we did when\n          // storing, so that missing values, which are 0 in the\n          // packed ints, are returned as -1 ord:\n          return (int) docToTermOrd.get(docID)-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          if (ord < 0) {\n            throw new IllegalArgumentException(\"ord must be >=0 (got ord=\" + ord + \")\");\n          }\n          bytes.fill(term, termOrdToBytesOffset.get(ord));\n          return term;\n        }\n      };\n    }\n\n","sourceOld":"    public SortedDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new SortedDocValues() {\n\n        @Override\n        public int getValueCount() {\n          return numOrd;\n        }\n\n        @Override\n        public int getOrd(int docID) {\n          // Subtract 1, matching the 1+ord we did when\n          // storing, so that missing values, which are 0 in the\n          // packed ints, are returned as -1 ord:\n          return (int) docToTermOrd.get(docID)-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          if (ord < 0) {\n            throw new IllegalArgumentException(\"ord must be >=0 (got ord=\" + ord + \")\");\n          }\n          bytes.fill(term, termOrdToBytesOffset.get(ord));\n          return term;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.SortedDocValuesImpl#iterator().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.SortedDocValuesImpl#iterator().mjava","sourceNew":"    public SortedDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new SortedDocValues() {\n\n        @Override\n        public int getValueCount() {\n          return numOrd;\n        }\n\n        @Override\n        public int getOrd(int docID) {\n          // Subtract 1, matching the 1+ord we did when\n          // storing, so that missing values, which are 0 in the\n          // packed ints, are returned as -1 ord:\n          return (int) docToTermOrd.get(docID)-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          if (ord < 0) {\n            throw new IllegalArgumentException(\"ord must be >=0 (got ord=\" + ord + \")\");\n          }\n          bytes.fill(term, termOrdToBytesOffset.get(ord));\n          return term;\n        }\n      };\n    }\n\n","sourceOld":"    public SortedDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new SortedDocValues() {\n\n        @Override\n        public int getValueCount() {\n          return numOrd;\n        }\n\n        @Override\n        public int getOrd(int docID) {\n          // Subtract 1, matching the 1+ord we did when\n          // storing, so that missing values, which are 0 in the\n          // packed ints, are returned as -1 ord:\n          return (int) docToTermOrd.get(docID)-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          if (ord < 0) {\n            throw new IllegalArgumentException(\"ord must be >=0 (got ord=\" + ord + \")\");\n          }\n          bytes.fill(term, termOrdToBytesOffset.get(ord));\n          return term;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.SortedDocValuesImpl#iterator().mjava","sourceNew":null,"sourceOld":"    public SortedDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new SortedDocValues() {\n\n        @Override\n        public int getValueCount() {\n          return numOrd;\n        }\n\n        @Override\n        public int getOrd(int docID) {\n          // Subtract 1, matching the 1+ord we did when\n          // storing, so that missing values, which are 0 in the\n          // packed ints, are returned as -1 ord:\n          return (int) docToTermOrd.get(docID)-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          if (ord < 0) {\n            throw new IllegalArgumentException(\"ord must be >=0 (got ord=\" + ord + \")\");\n          }\n          bytes.fill(term, termOrdToBytesOffset.get(ord));\n          return term;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83870855d82aba6819217abeff5a40779dbb28b4":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}