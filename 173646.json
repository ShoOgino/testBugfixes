{"path":"lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest#testHashCodeAndEquals().mjava","commits":[{"id":"285b9ca1f111d4ee6cc336e5fe7db6ab94a16a70","date":1374000182,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest#testHashCodeAndEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testHashCodeAndEquals() {\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      String field1 = \"field\" + i;\n      String field2 = \"field\" + i + num;\n      String value1 = _TestUtil.randomRealisticUnicodeString(random());\n      String value2 = _TestUtil.randomRealisticUnicodeString(random());\n\n      TermFilter filter1 = termFilter(field1, value1);\n      TermFilter filter2 = termFilter(field1, value2);\n      TermFilter filter3 = termFilter(field2, value1);\n      TermFilter filter4 = termFilter(field2, value2);\n      TermFilter[] filters = new TermFilter[]{filter1, filter2, filter3, filter4};\n      for (int j = 0; j < filters.length; j++) {\n        TermFilter termFilter = filters[j];\n        for (int k = 0; k < filters.length; k++) {\n          TermFilter otherTermFilter = filters[k];\n          if (j == k) {\n            assertEquals(termFilter, otherTermFilter);\n            assertEquals(termFilter.hashCode(), otherTermFilter.hashCode());\n            assertTrue(termFilter.equals(otherTermFilter));\n          } else {\n            assertFalse(termFilter.equals(otherTermFilter));\n          }\n        }\n      }\n\n      TermFilter filter5 = termFilter(field2, value2);\n      assertEquals(filter5, filter4);\n      assertEquals(filter5.hashCode(), filter4.hashCode());\n      assertTrue(filter5.equals(filter4));\n\n      assertEquals(filter5, filter4);\n      assertTrue(filter5.equals(filter4));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fd4c9f3bb9eb42603e638a1e6e231d7819c0bbb","date":1374002124,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest#testHashCodeAndEquals().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest#testHashCodeAndEquals().mjava","sourceNew":"  public void testHashCodeAndEquals() {\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      String field1 = \"field\" + i;\n      String field2 = \"field\" + i + num;\n      String value1 = _TestUtil.randomRealisticUnicodeString(random());\n      String value2 = _TestUtil.randomRealisticUnicodeString(random()) + \"x\"; // this must be not equal to value1\n\n      TermFilter filter1 = termFilter(field1, value1);\n      TermFilter filter2 = termFilter(field1, value2);\n      TermFilter filter3 = termFilter(field2, value1);\n      TermFilter filter4 = termFilter(field2, value2);\n      TermFilter[] filters = new TermFilter[]{filter1, filter2, filter3, filter4};\n      for (int j = 0; j < filters.length; j++) {\n        TermFilter termFilter = filters[j];\n        for (int k = 0; k < filters.length; k++) {\n          TermFilter otherTermFilter = filters[k];\n          if (j == k) {\n            assertEquals(termFilter, otherTermFilter);\n            assertEquals(termFilter.hashCode(), otherTermFilter.hashCode());\n            assertTrue(termFilter.equals(otherTermFilter));\n          } else {\n            System.out.println(termFilter);\n            System.out.println(otherTermFilter);\n            assertFalse(termFilter.equals(otherTermFilter));\n          }\n        }\n      }\n\n      TermFilter filter5 = termFilter(field2, value2);\n      assertEquals(filter5, filter4);\n      assertEquals(filter5.hashCode(), filter4.hashCode());\n      assertTrue(filter5.equals(filter4));\n\n      assertEquals(filter5, filter4);\n      assertTrue(filter5.equals(filter4));\n    }\n  }\n\n","sourceOld":"  public void testHashCodeAndEquals() {\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      String field1 = \"field\" + i;\n      String field2 = \"field\" + i + num;\n      String value1 = _TestUtil.randomRealisticUnicodeString(random());\n      String value2 = _TestUtil.randomRealisticUnicodeString(random());\n\n      TermFilter filter1 = termFilter(field1, value1);\n      TermFilter filter2 = termFilter(field1, value2);\n      TermFilter filter3 = termFilter(field2, value1);\n      TermFilter filter4 = termFilter(field2, value2);\n      TermFilter[] filters = new TermFilter[]{filter1, filter2, filter3, filter4};\n      for (int j = 0; j < filters.length; j++) {\n        TermFilter termFilter = filters[j];\n        for (int k = 0; k < filters.length; k++) {\n          TermFilter otherTermFilter = filters[k];\n          if (j == k) {\n            assertEquals(termFilter, otherTermFilter);\n            assertEquals(termFilter.hashCode(), otherTermFilter.hashCode());\n            assertTrue(termFilter.equals(otherTermFilter));\n          } else {\n            assertFalse(termFilter.equals(otherTermFilter));\n          }\n        }\n      }\n\n      TermFilter filter5 = termFilter(field2, value2);\n      assertEquals(filter5, filter4);\n      assertEquals(filter5.hashCode(), filter4.hashCode());\n      assertTrue(filter5.equals(filter4));\n\n      assertEquals(filter5, filter4);\n      assertTrue(filter5.equals(filter4));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3af5e5e9a6d2ce7d4e4f90a45f562b9b02f2bf7","date":1374003072,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest#testHashCodeAndEquals().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest#testHashCodeAndEquals().mjava","sourceNew":"  public void testHashCodeAndEquals() {\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      String field1 = \"field\" + i;\n      String field2 = \"field\" + i + num;\n      String value1 = _TestUtil.randomRealisticUnicodeString(random());\n      String value2 = _TestUtil.randomRealisticUnicodeString(random()) + \"x\"; // this must be not equal to value1\n\n      TermFilter filter1 = termFilter(field1, value1);\n      TermFilter filter2 = termFilter(field1, value2);\n      TermFilter filter3 = termFilter(field2, value1);\n      TermFilter filter4 = termFilter(field2, value2);\n      TermFilter[] filters = new TermFilter[]{filter1, filter2, filter3, filter4};\n      for (int j = 0; j < filters.length; j++) {\n        TermFilter termFilter = filters[j];\n        for (int k = 0; k < filters.length; k++) {\n          TermFilter otherTermFilter = filters[k];\n          if (j == k) {\n            assertEquals(termFilter, otherTermFilter);\n            assertEquals(termFilter.hashCode(), otherTermFilter.hashCode());\n            assertTrue(termFilter.equals(otherTermFilter));\n          } else {\n            assertFalse(termFilter.equals(otherTermFilter));\n          }\n        }\n      }\n\n      TermFilter filter5 = termFilter(field2, value2);\n      assertEquals(filter5, filter4);\n      assertEquals(filter5.hashCode(), filter4.hashCode());\n      assertTrue(filter5.equals(filter4));\n\n      assertEquals(filter5, filter4);\n      assertTrue(filter5.equals(filter4));\n    }\n  }\n\n","sourceOld":"  public void testHashCodeAndEquals() {\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      String field1 = \"field\" + i;\n      String field2 = \"field\" + i + num;\n      String value1 = _TestUtil.randomRealisticUnicodeString(random());\n      String value2 = _TestUtil.randomRealisticUnicodeString(random()) + \"x\"; // this must be not equal to value1\n\n      TermFilter filter1 = termFilter(field1, value1);\n      TermFilter filter2 = termFilter(field1, value2);\n      TermFilter filter3 = termFilter(field2, value1);\n      TermFilter filter4 = termFilter(field2, value2);\n      TermFilter[] filters = new TermFilter[]{filter1, filter2, filter3, filter4};\n      for (int j = 0; j < filters.length; j++) {\n        TermFilter termFilter = filters[j];\n        for (int k = 0; k < filters.length; k++) {\n          TermFilter otherTermFilter = filters[k];\n          if (j == k) {\n            assertEquals(termFilter, otherTermFilter);\n            assertEquals(termFilter.hashCode(), otherTermFilter.hashCode());\n            assertTrue(termFilter.equals(otherTermFilter));\n          } else {\n            System.out.println(termFilter);\n            System.out.println(otherTermFilter);\n            assertFalse(termFilter.equals(otherTermFilter));\n          }\n        }\n      }\n\n      TermFilter filter5 = termFilter(field2, value2);\n      assertEquals(filter5, filter4);\n      assertEquals(filter5.hashCode(), filter4.hashCode());\n      assertTrue(filter5.equals(filter4));\n\n      assertEquals(filter5, filter4);\n      assertTrue(filter5.equals(filter4));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c676fe6933a007f694a857ab920bdb598c13b5d8","date":1374011337,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest#testHashCodeAndEquals().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest#testHashCodeAndEquals().mjava","sourceNew":"  public void testHashCodeAndEquals() {\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      String field1 = \"field\" + i;\n      String field2 = \"field\" + i + num;\n      String value1 = _TestUtil.randomRealisticUnicodeString(random());\n      String value2 = value1 + \"x\"; // this must be not equal to value1\n\n      TermFilter filter1 = termFilter(field1, value1);\n      TermFilter filter2 = termFilter(field1, value2);\n      TermFilter filter3 = termFilter(field2, value1);\n      TermFilter filter4 = termFilter(field2, value2);\n      TermFilter[] filters = new TermFilter[]{filter1, filter2, filter3, filter4};\n      for (int j = 0; j < filters.length; j++) {\n        TermFilter termFilter = filters[j];\n        for (int k = 0; k < filters.length; k++) {\n          TermFilter otherTermFilter = filters[k];\n          if (j == k) {\n            assertEquals(termFilter, otherTermFilter);\n            assertEquals(termFilter.hashCode(), otherTermFilter.hashCode());\n            assertTrue(termFilter.equals(otherTermFilter));\n          } else {\n            assertFalse(termFilter.equals(otherTermFilter));\n          }\n        }\n      }\n\n      TermFilter filter5 = termFilter(field2, value2);\n      assertEquals(filter5, filter4);\n      assertEquals(filter5.hashCode(), filter4.hashCode());\n      assertTrue(filter5.equals(filter4));\n\n      assertEquals(filter5, filter4);\n      assertTrue(filter5.equals(filter4));\n    }\n  }\n\n","sourceOld":"  public void testHashCodeAndEquals() {\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      String field1 = \"field\" + i;\n      String field2 = \"field\" + i + num;\n      String value1 = _TestUtil.randomRealisticUnicodeString(random());\n      String value2 = _TestUtil.randomRealisticUnicodeString(random()) + \"x\"; // this must be not equal to value1\n\n      TermFilter filter1 = termFilter(field1, value1);\n      TermFilter filter2 = termFilter(field1, value2);\n      TermFilter filter3 = termFilter(field2, value1);\n      TermFilter filter4 = termFilter(field2, value2);\n      TermFilter[] filters = new TermFilter[]{filter1, filter2, filter3, filter4};\n      for (int j = 0; j < filters.length; j++) {\n        TermFilter termFilter = filters[j];\n        for (int k = 0; k < filters.length; k++) {\n          TermFilter otherTermFilter = filters[k];\n          if (j == k) {\n            assertEquals(termFilter, otherTermFilter);\n            assertEquals(termFilter.hashCode(), otherTermFilter.hashCode());\n            assertTrue(termFilter.equals(otherTermFilter));\n          } else {\n            assertFalse(termFilter.equals(otherTermFilter));\n          }\n        }\n      }\n\n      TermFilter filter5 = termFilter(field2, value2);\n      assertEquals(filter5, filter4);\n      assertEquals(filter5.hashCode(), filter4.hashCode());\n      assertTrue(filter5.equals(filter4));\n\n      assertEquals(filter5, filter4);\n      assertTrue(filter5.equals(filter4));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest#testHashCodeAndEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testHashCodeAndEquals() {\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      String field1 = \"field\" + i;\n      String field2 = \"field\" + i + num;\n      String value1 = _TestUtil.randomRealisticUnicodeString(random());\n      String value2 = value1 + \"x\"; // this must be not equal to value1\n\n      TermFilter filter1 = termFilter(field1, value1);\n      TermFilter filter2 = termFilter(field1, value2);\n      TermFilter filter3 = termFilter(field2, value1);\n      TermFilter filter4 = termFilter(field2, value2);\n      TermFilter[] filters = new TermFilter[]{filter1, filter2, filter3, filter4};\n      for (int j = 0; j < filters.length; j++) {\n        TermFilter termFilter = filters[j];\n        for (int k = 0; k < filters.length; k++) {\n          TermFilter otherTermFilter = filters[k];\n          if (j == k) {\n            assertEquals(termFilter, otherTermFilter);\n            assertEquals(termFilter.hashCode(), otherTermFilter.hashCode());\n            assertTrue(termFilter.equals(otherTermFilter));\n          } else {\n            assertFalse(termFilter.equals(otherTermFilter));\n          }\n        }\n      }\n\n      TermFilter filter5 = termFilter(field2, value2);\n      assertEquals(filter5, filter4);\n      assertEquals(filter5.hashCode(), filter4.hashCode());\n      assertTrue(filter5.equals(filter4));\n\n      assertEquals(filter5, filter4);\n      assertTrue(filter5.equals(filter4));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest#testHashCodeAndEquals().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest#testHashCodeAndEquals().mjava","sourceNew":"  public void testHashCodeAndEquals() {\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      String field1 = \"field\" + i;\n      String field2 = \"field\" + i + num;\n      String value1 = TestUtil.randomRealisticUnicodeString(random());\n      String value2 = value1 + \"x\"; // this must be not equal to value1\n\n      TermFilter filter1 = termFilter(field1, value1);\n      TermFilter filter2 = termFilter(field1, value2);\n      TermFilter filter3 = termFilter(field2, value1);\n      TermFilter filter4 = termFilter(field2, value2);\n      TermFilter[] filters = new TermFilter[]{filter1, filter2, filter3, filter4};\n      for (int j = 0; j < filters.length; j++) {\n        TermFilter termFilter = filters[j];\n        for (int k = 0; k < filters.length; k++) {\n          TermFilter otherTermFilter = filters[k];\n          if (j == k) {\n            assertEquals(termFilter, otherTermFilter);\n            assertEquals(termFilter.hashCode(), otherTermFilter.hashCode());\n            assertTrue(termFilter.equals(otherTermFilter));\n          } else {\n            assertFalse(termFilter.equals(otherTermFilter));\n          }\n        }\n      }\n\n      TermFilter filter5 = termFilter(field2, value2);\n      assertEquals(filter5, filter4);\n      assertEquals(filter5.hashCode(), filter4.hashCode());\n      assertTrue(filter5.equals(filter4));\n\n      assertEquals(filter5, filter4);\n      assertTrue(filter5.equals(filter4));\n    }\n  }\n\n","sourceOld":"  public void testHashCodeAndEquals() {\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      String field1 = \"field\" + i;\n      String field2 = \"field\" + i + num;\n      String value1 = _TestUtil.randomRealisticUnicodeString(random());\n      String value2 = value1 + \"x\"; // this must be not equal to value1\n\n      TermFilter filter1 = termFilter(field1, value1);\n      TermFilter filter2 = termFilter(field1, value2);\n      TermFilter filter3 = termFilter(field2, value1);\n      TermFilter filter4 = termFilter(field2, value2);\n      TermFilter[] filters = new TermFilter[]{filter1, filter2, filter3, filter4};\n      for (int j = 0; j < filters.length; j++) {\n        TermFilter termFilter = filters[j];\n        for (int k = 0; k < filters.length; k++) {\n          TermFilter otherTermFilter = filters[k];\n          if (j == k) {\n            assertEquals(termFilter, otherTermFilter);\n            assertEquals(termFilter.hashCode(), otherTermFilter.hashCode());\n            assertTrue(termFilter.equals(otherTermFilter));\n          } else {\n            assertFalse(termFilter.equals(otherTermFilter));\n          }\n        }\n      }\n\n      TermFilter filter5 = termFilter(field2, value2);\n      assertEquals(filter5, filter4);\n      assertEquals(filter5.hashCode(), filter4.hashCode());\n      assertTrue(filter5.equals(filter4));\n\n      assertEquals(filter5, filter4);\n      assertTrue(filter5.equals(filter4));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"589f939c50213ffd758060ded12e334c85ef6a87","date":1423239999,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermFilterTest#testHashCodeAndEquals().mjava","sourceNew":null,"sourceOld":"  public void testHashCodeAndEquals() {\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      String field1 = \"field\" + i;\n      String field2 = \"field\" + i + num;\n      String value1 = TestUtil.randomRealisticUnicodeString(random());\n      String value2 = value1 + \"x\"; // this must be not equal to value1\n\n      TermFilter filter1 = termFilter(field1, value1);\n      TermFilter filter2 = termFilter(field1, value2);\n      TermFilter filter3 = termFilter(field2, value1);\n      TermFilter filter4 = termFilter(field2, value2);\n      TermFilter[] filters = new TermFilter[]{filter1, filter2, filter3, filter4};\n      for (int j = 0; j < filters.length; j++) {\n        TermFilter termFilter = filters[j];\n        for (int k = 0; k < filters.length; k++) {\n          TermFilter otherTermFilter = filters[k];\n          if (j == k) {\n            assertEquals(termFilter, otherTermFilter);\n            assertEquals(termFilter.hashCode(), otherTermFilter.hashCode());\n            assertTrue(termFilter.equals(otherTermFilter));\n          } else {\n            assertFalse(termFilter.equals(otherTermFilter));\n          }\n        }\n      }\n\n      TermFilter filter5 = termFilter(field2, value2);\n      assertEquals(filter5, filter4);\n      assertEquals(filter5.hashCode(), filter4.hashCode());\n      assertTrue(filter5.equals(filter4));\n\n      assertEquals(filter5, filter4);\n      assertTrue(filter5.equals(filter4));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"285b9ca1f111d4ee6cc336e5fe7db6ab94a16a70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6613659748fe4411a7dcf85266e55db1f95f7315":["c676fe6933a007f694a857ab920bdb598c13b5d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c676fe6933a007f694a857ab920bdb598c13b5d8":["e3af5e5e9a6d2ce7d4e4f90a45f562b9b02f2bf7"],"e3af5e5e9a6d2ce7d4e4f90a45f562b9b02f2bf7":["1fd4c9f3bb9eb42603e638a1e6e231d7819c0bbb"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"589f939c50213ffd758060ded12e334c85ef6a87":["6613659748fe4411a7dcf85266e55db1f95f7315"],"1fd4c9f3bb9eb42603e638a1e6e231d7819c0bbb":["285b9ca1f111d4ee6cc336e5fe7db6ab94a16a70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["589f939c50213ffd758060ded12e334c85ef6a87"]},"commit2Childs":{"285b9ca1f111d4ee6cc336e5fe7db6ab94a16a70":["1fd4c9f3bb9eb42603e638a1e6e231d7819c0bbb"],"6613659748fe4411a7dcf85266e55db1f95f7315":["589f939c50213ffd758060ded12e334c85ef6a87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["285b9ca1f111d4ee6cc336e5fe7db6ab94a16a70","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"c676fe6933a007f694a857ab920bdb598c13b5d8":["6613659748fe4411a7dcf85266e55db1f95f7315"],"e3af5e5e9a6d2ce7d4e4f90a45f562b9b02f2bf7":["c676fe6933a007f694a857ab920bdb598c13b5d8"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"589f939c50213ffd758060ded12e334c85ef6a87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1fd4c9f3bb9eb42603e638a1e6e231d7819c0bbb":["e3af5e5e9a6d2ce7d4e4f90a45f562b9b02f2bf7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}