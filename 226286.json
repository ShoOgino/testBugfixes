{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testPolygonWithHole().mjava","commits":[{"id":"c312ee0a541562afddf7fdc6d95cf64dbca27792","date":1532104607,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testPolygonWithHole().mjava","pathOld":"/dev/null","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-8418\")\n  /** test random polygons with a single hole */\n  public void testPolygonWithHole() throws Exception {\n    int numVertices = TestUtil.nextInt(random(), 50, 100);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a random polygon with a hole\n    Polygon inner = new Polygon(new double[] {-1d, -1d, 1d, 1d, -1d},\n        new double[] {-91d, -89d, -89d, -91.0, -91.0});\n    Polygon outer = GeoTestUtil.createRegularPolygon(0, -90, atLeast(1000000), numVertices);\n\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, new Polygon(outer.getPolyLats(), outer.getPolyLons(), inner));\n    writer.addDocument(document);\n\n    ///// search //////\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    // search a bbox in the hole\n    Query q = newRectQuery(FIELDNAME, inner.minLat + 1e-6, inner.maxLat - 1e-6, inner.minLon + 1e-6, inner.maxLon - 1e-6);\n    assertEquals(0, searcher.count(q));\n\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["62608383871b832d79e6dc58a3c783d7300f64d5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"62608383871b832d79e6dc58a3c783d7300f64d5","date":1532707246,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testPolygonWithHole().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testPolygonWithHole().mjava","sourceNew":"  /** test random polygons with a single hole */\n  public void testPolygonWithHole() throws Exception {\n    int numVertices = TestUtil.nextInt(random(), 50, 100);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a random polygon with a hole\n    Polygon inner = new Polygon(new double[] {-1d, -1d, 1d, 1d, -1d},\n        new double[] {-91d, -89d, -89d, -91.0, -91.0});\n    Polygon outer = GeoTestUtil.createRegularPolygon(0, -90, atLeast(1000000), numVertices);\n\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, new Polygon(outer.getPolyLats(), outer.getPolyLons(), inner));\n    writer.addDocument(document);\n\n    ///// search //////\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    // search a bbox in the hole\n    Query q = newRectQuery(FIELDNAME, inner.minLat + 1e-6, inner.maxLat - 1e-6, inner.minLon + 1e-6, inner.maxLon - 1e-6);\n    assertEquals(0, searcher.count(q));\n\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-8418\")\n  /** test random polygons with a single hole */\n  public void testPolygonWithHole() throws Exception {\n    int numVertices = TestUtil.nextInt(random(), 50, 100);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a random polygon with a hole\n    Polygon inner = new Polygon(new double[] {-1d, -1d, 1d, 1d, -1d},\n        new double[] {-91d, -89d, -89d, -91.0, -91.0});\n    Polygon outer = GeoTestUtil.createRegularPolygon(0, -90, atLeast(1000000), numVertices);\n\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, new Polygon(outer.getPolyLats(), outer.getPolyLons(), inner));\n    writer.addDocument(document);\n\n    ///// search //////\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    // search a bbox in the hole\n    Query q = newRectQuery(FIELDNAME, inner.minLat + 1e-6, inner.maxLat - 1e-6, inner.minLon + 1e-6, inner.maxLon - 1e-6);\n    assertEquals(0, searcher.count(q));\n\n    IOUtils.close(reader, dir);\n  }\n\n","bugFix":["c312ee0a541562afddf7fdc6d95cf64dbca27792"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestLatLonShape#testPolygonWithHole().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testPolygonWithHole().mjava","sourceNew":"  /** test random polygons with a single hole */\n  public void testPolygonWithHole() throws Exception {\n    int numVertices = TestUtil.nextInt(random(), 50, 100);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a random polygon with a hole\n    Polygon inner = new Polygon(new double[] {-1d, -1d, 1d, 1d, -1d},\n        new double[] {-91d, -89d, -89d, -91.0, -91.0});\n    Polygon outer = GeoTestUtil.createRegularPolygon(0, -90, atLeast(1000000), numVertices);\n\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, new Polygon(outer.getPolyLats(), outer.getPolyLons(), inner));\n    writer.addDocument(document);\n\n    ///// search //////\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    // search a bbox in the hole\n    Query q = newRectQuery(FIELDNAME, inner.minLat + 1e-6, inner.maxLat - 1e-6, inner.minLon + 1e-6, inner.maxLon - 1e-6);\n    assertEquals(0, searcher.count(q));\n\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":"  /** test random polygons with a single hole */\n  public void testPolygonWithHole() throws Exception {\n    int numVertices = TestUtil.nextInt(random(), 50, 100);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a random polygon with a hole\n    Polygon inner = new Polygon(new double[] {-1d, -1d, 1d, 1d, -1d},\n        new double[] {-91d, -89d, -89d, -91.0, -91.0});\n    Polygon outer = GeoTestUtil.createRegularPolygon(0, -90, atLeast(1000000), numVertices);\n\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, new Polygon(outer.getPolyLats(), outer.getPolyLons(), inner));\n    writer.addDocument(document);\n\n    ///// search //////\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    // search a bbox in the hole\n    Query q = newRectQuery(FIELDNAME, inner.minLat + 1e-6, inner.maxLat - 1e-6, inner.minLon + 1e-6, inner.maxLon - 1e-6);\n    assertEquals(0, searcher.count(q));\n\n    IOUtils.close(reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"62608383871b832d79e6dc58a3c783d7300f64d5":["c312ee0a541562afddf7fdc6d95cf64dbca27792"],"c312ee0a541562afddf7fdc6d95cf64dbca27792":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["62608383871b832d79e6dc58a3c783d7300f64d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"62608383871b832d79e6dc58a3c783d7300f64d5":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"c312ee0a541562afddf7fdc6d95cf64dbca27792":["62608383871b832d79e6dc58a3c783d7300f64d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c312ee0a541562afddf7fdc6d95cf64dbca27792"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}