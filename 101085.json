{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#applySlop(Query,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#applySlop(Query,int).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#applySlop(Query,int).mjava","sourceNew":"  private void applySlop(Query q, int slop) {\n    if (q instanceof PhraseQuery) {\n      ((PhraseQuery) q).setSlop(slop);\n    } else if (q instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) q).setSlop(slop);\n    }\n  }\n\n","sourceOld":"  private void applySlop(Query q, int slop) {\n    if (q instanceof PhraseQuery) {\n      ((PhraseQuery) q).setSlop(slop);\n    } else if (q instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) q).setSlop(slop);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#applySlop(Query,int).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#applySlop(Query,int).mjava","sourceNew":"  private Query applySlop(Query q, int slop) {\n    if (q instanceof PhraseQuery) {\n      PhraseQuery.Builder builder = new PhraseQuery.Builder();\n      builder.setSlop(slop);\n      PhraseQuery pq = (PhraseQuery) q;\n      org.apache.lucene.index.Term[] terms = pq.getTerms();\n      int[] positions = pq.getPositions();\n      for (int i = 0; i < terms.length; ++i) {\n        builder.add(terms[i], positions[i]);\n      }\n      q = builder.build();\n      q.setBoost(pq.getBoost());\n    } else if (q instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) q).setSlop(slop);\n    }\n    return q;\n  }\n\n","sourceOld":"  private void applySlop(Query q, int slop) {\n    if (q instanceof PhraseQuery) {\n      ((PhraseQuery) q).setSlop(slop);\n    } else if (q instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) q).setSlop(slop);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#applySlop(Query,int).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#applySlop(Query,int).mjava","sourceNew":"  private Query applySlop(Query q, int slop) {\n    if (q instanceof PhraseQuery) {\n      PhraseQuery.Builder builder = new PhraseQuery.Builder();\n      builder.setSlop(slop);\n      PhraseQuery pq = (PhraseQuery) q;\n      org.apache.lucene.index.Term[] terms = pq.getTerms();\n      int[] positions = pq.getPositions();\n      for (int i = 0; i < terms.length; ++i) {\n        builder.add(terms[i], positions[i]);\n      }\n      q = builder.build();\n    } else if (q instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) q).setSlop(slop);\n    }\n    return q;\n  }\n\n","sourceOld":"  private Query applySlop(Query q, int slop) {\n    if (q instanceof PhraseQuery) {\n      PhraseQuery.Builder builder = new PhraseQuery.Builder();\n      builder.setSlop(slop);\n      PhraseQuery pq = (PhraseQuery) q;\n      org.apache.lucene.index.Term[] terms = pq.getTerms();\n      int[] positions = pq.getPositions();\n      for (int i = 0; i < terms.length; ++i) {\n        builder.add(terms[i], positions[i]);\n      }\n      q = builder.build();\n      q.setBoost(pq.getBoost());\n    } else if (q instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) q).setSlop(slop);\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92b4a131f1796dd57cc6698aae3d589d32a29deb","date":1457087316,"type":3,"author":"Luc Vanlerberghe","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#applySlop(Query,int).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#applySlop(Query,int).mjava","sourceNew":"  private Query applySlop(Query q, int slop) {\n    if (q instanceof PhraseQuery) {\n      PhraseQuery.Builder builder = new PhraseQuery.Builder();\n      builder.setSlop(slop);\n      PhraseQuery pq = (PhraseQuery) q;\n      org.apache.lucene.index.Term[] terms = pq.getTerms();\n      int[] positions = pq.getPositions();\n      for (int i = 0; i < terms.length; ++i) {\n        builder.add(terms[i], positions[i]);\n      }\n      q = builder.build();\n    } else if (q instanceof MultiPhraseQuery) {\n      MultiPhraseQuery mpq = (MultiPhraseQuery)q;\n      \n      if (slop != mpq.getSlop()) {\n        q = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n      }\n    }\n    return q;\n  }\n\n","sourceOld":"  private Query applySlop(Query q, int slop) {\n    if (q instanceof PhraseQuery) {\n      PhraseQuery.Builder builder = new PhraseQuery.Builder();\n      builder.setSlop(slop);\n      PhraseQuery pq = (PhraseQuery) q;\n      org.apache.lucene.index.Term[] terms = pq.getTerms();\n      int[] positions = pq.getPositions();\n      for (int i = 0; i < terms.length; ++i) {\n        builder.add(terms[i], positions[i]);\n      }\n      q = builder.build();\n    } else if (q instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) q).setSlop(slop);\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#applySlop(Query,int).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#applySlop(Query,int).mjava","sourceNew":"  private Query applySlop(Query q, int slop) {\n    if (q instanceof PhraseQuery) {\n      PhraseQuery.Builder builder = new PhraseQuery.Builder();\n      builder.setSlop(slop);\n      PhraseQuery pq = (PhraseQuery) q;\n      org.apache.lucene.index.Term[] terms = pq.getTerms();\n      int[] positions = pq.getPositions();\n      for (int i = 0; i < terms.length; ++i) {\n        builder.add(terms[i], positions[i]);\n      }\n      q = builder.build();\n    } else if (q instanceof MultiPhraseQuery) {\n      MultiPhraseQuery mpq = (MultiPhraseQuery)q;\n      \n      if (slop != mpq.getSlop()) {\n        q = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n      }\n    }\n    return q;\n  }\n\n","sourceOld":"  private Query applySlop(Query q, int slop) {\n    if (q instanceof PhraseQuery) {\n      PhraseQuery.Builder builder = new PhraseQuery.Builder();\n      builder.setSlop(slop);\n      PhraseQuery pq = (PhraseQuery) q;\n      org.apache.lucene.index.Term[] terms = pq.getTerms();\n      int[] positions = pq.getPositions();\n      for (int i = 0; i < terms.length; ++i) {\n        builder.add(terms[i], positions[i]);\n      }\n      q = builder.build();\n    } else if (q instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) q).setSlop(slop);\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"e9e1499c5d26c936238506df90a3c02c76707722":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["e9e1499c5d26c936238506df90a3c02c76707722"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["2dfdf766e55e943d942055d7de53c7ad6bc45283","92b4a131f1796dd57cc6698aae3d589d32a29deb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e9e1499c5d26c936238506df90a3c02c76707722"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"e9e1499c5d26c936238506df90a3c02c76707722":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["92b4a131f1796dd57cc6698aae3d589d32a29deb","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}