{"path":"src/java/org/apache/lucene/store/RAMOutputStream[RAMDirectory]#flushBuffer(byte[],int).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMOutputStream[RAMDirectory]#flushBuffer(byte[],int).mjava","pathOld":"/dev/null","sourceNew":"  /** output methods: */\n  public final void flushBuffer(byte[] src, int len) {\n    int bufferNumber = pointer/OutputStream.BUFFER_SIZE;\n    int bufferOffset = pointer%OutputStream.BUFFER_SIZE;\n    int bytesInBuffer = OutputStream.BUFFER_SIZE - bufferOffset;\n    int bytesToCopy = bytesInBuffer >= len ? len : bytesInBuffer;\n\n    if (bufferNumber == file.buffers.size())\n      file.buffers.addElement(new byte[OutputStream.BUFFER_SIZE]);\n\n    byte[] buffer = (byte[])file.buffers.elementAt(bufferNumber);\n    System.arraycopy(src, 0, buffer, bufferOffset, bytesToCopy);\n\n    if (bytesToCopy < len) {\t\t\t  // not all in one buffer\n      int srcOffset = bytesToCopy;\n      bytesToCopy = len - bytesToCopy;\t\t  // remaining bytes\n      bufferNumber++;\n      if (bufferNumber == file.buffers.size())\n\tfile.buffers.addElement(new byte[OutputStream.BUFFER_SIZE]);\n      buffer = (byte[])file.buffers.elementAt(bufferNumber);\n      System.arraycopy(src, srcOffset, buffer, 0, bytesToCopy);\n    }\n    pointer += len;\n    if (pointer > file.length)\n      file.length = pointer;\n\n    file.lastModified = System.currentTimeMillis();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"501fc3e181d3b5245ce8a7b168b5a5d0f32b0bbb","date":1064526358,"type":3,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMOutputStream[RAMDirectory]#flushBuffer(byte[],int).mjava","pathOld":"src/java/org/apache/lucene/store/RAMOutputStream[RAMDirectory]#flushBuffer(byte[],int).mjava","sourceNew":"  /** output methods: */\n  public final void flushBuffer(byte[] src, int len) {\n    int bufferNumber = pointer/OutputStream.BUFFER_SIZE;\n    int bufferOffset = pointer%OutputStream.BUFFER_SIZE;\n    int bytesInBuffer = OutputStream.BUFFER_SIZE - bufferOffset;\n    int bytesToCopy = bytesInBuffer >= len ? len : bytesInBuffer;\n\n    if (bufferNumber == file.buffers.size())\n      file.buffers.addElement(new byte[OutputStream.BUFFER_SIZE]);\n\n    byte[] buffer = (byte[])file.buffers.elementAt(bufferNumber);\n    System.arraycopy(src, 0, buffer, bufferOffset, bytesToCopy);\n\n    if (bytesToCopy < len) {\t\t\t  // not all in one buffer\n      int srcOffset = bytesToCopy;\n      bytesToCopy = len - bytesToCopy;\t\t  // remaining bytes\n      bufferNumber++;\n      if (bufferNumber == file.buffers.size())\n        file.buffers.addElement(new byte[OutputStream.BUFFER_SIZE]);\n      buffer = (byte[])file.buffers.elementAt(bufferNumber);\n      System.arraycopy(src, srcOffset, buffer, 0, bytesToCopy);\n    }\n    pointer += len;\n    if (pointer > file.length)\n      file.length = pointer;\n\n    file.lastModified = System.currentTimeMillis();\n  }\n\n","sourceOld":"  /** output methods: */\n  public final void flushBuffer(byte[] src, int len) {\n    int bufferNumber = pointer/OutputStream.BUFFER_SIZE;\n    int bufferOffset = pointer%OutputStream.BUFFER_SIZE;\n    int bytesInBuffer = OutputStream.BUFFER_SIZE - bufferOffset;\n    int bytesToCopy = bytesInBuffer >= len ? len : bytesInBuffer;\n\n    if (bufferNumber == file.buffers.size())\n      file.buffers.addElement(new byte[OutputStream.BUFFER_SIZE]);\n\n    byte[] buffer = (byte[])file.buffers.elementAt(bufferNumber);\n    System.arraycopy(src, 0, buffer, bufferOffset, bytesToCopy);\n\n    if (bytesToCopy < len) {\t\t\t  // not all in one buffer\n      int srcOffset = bytesToCopy;\n      bytesToCopy = len - bytesToCopy;\t\t  // remaining bytes\n      bufferNumber++;\n      if (bufferNumber == file.buffers.size())\n\tfile.buffers.addElement(new byte[OutputStream.BUFFER_SIZE]);\n      buffer = (byte[])file.buffers.elementAt(bufferNumber);\n      System.arraycopy(src, srcOffset, buffer, 0, bytesToCopy);\n    }\n    pointer += len;\n    if (pointer > file.length)\n      file.length = pointer;\n\n    file.lastModified = System.currentTimeMillis();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15c469602973ef1a33c9a07367a380d278ffab20","date":1074206555,"type":5,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMOutputStream#flushBuffer(byte[],int).mjava","pathOld":"src/java/org/apache/lucene/store/RAMOutputStream[RAMDirectory]#flushBuffer(byte[],int).mjava","sourceNew":"  public void flushBuffer(byte[] src, int len) {\n    int bufferNumber = pointer/BUFFER_SIZE;\n    int bufferOffset = pointer%BUFFER_SIZE;\n    int bytesInBuffer = BUFFER_SIZE - bufferOffset;\n    int bytesToCopy = bytesInBuffer >= len ? len : bytesInBuffer;\n\n    if (bufferNumber == file.buffers.size())\n      file.buffers.addElement(new byte[BUFFER_SIZE]);\n\n    byte[] buffer = (byte[])file.buffers.elementAt(bufferNumber);\n    System.arraycopy(src, 0, buffer, bufferOffset, bytesToCopy);\n\n    if (bytesToCopy < len) {\t\t\t  // not all in one buffer\n      int srcOffset = bytesToCopy;\n      bytesToCopy = len - bytesToCopy;\t\t  // remaining bytes\n      bufferNumber++;\n      if (bufferNumber == file.buffers.size())\n        file.buffers.addElement(new byte[BUFFER_SIZE]);\n      buffer = (byte[])file.buffers.elementAt(bufferNumber);\n      System.arraycopy(src, srcOffset, buffer, 0, bytesToCopy);\n    }\n    pointer += len;\n    if (pointer > file.length)\n      file.length = pointer;\n\n    file.lastModified = System.currentTimeMillis();\n  }\n\n","sourceOld":"  /** output methods: */\n  public final void flushBuffer(byte[] src, int len) {\n    int bufferNumber = pointer/OutputStream.BUFFER_SIZE;\n    int bufferOffset = pointer%OutputStream.BUFFER_SIZE;\n    int bytesInBuffer = OutputStream.BUFFER_SIZE - bufferOffset;\n    int bytesToCopy = bytesInBuffer >= len ? len : bytesInBuffer;\n\n    if (bufferNumber == file.buffers.size())\n      file.buffers.addElement(new byte[OutputStream.BUFFER_SIZE]);\n\n    byte[] buffer = (byte[])file.buffers.elementAt(bufferNumber);\n    System.arraycopy(src, 0, buffer, bufferOffset, bytesToCopy);\n\n    if (bytesToCopy < len) {\t\t\t  // not all in one buffer\n      int srcOffset = bytesToCopy;\n      bytesToCopy = len - bytesToCopy;\t\t  // remaining bytes\n      bufferNumber++;\n      if (bufferNumber == file.buffers.size())\n        file.buffers.addElement(new byte[OutputStream.BUFFER_SIZE]);\n      buffer = (byte[])file.buffers.elementAt(bufferNumber);\n      System.arraycopy(src, srcOffset, buffer, 0, bytesToCopy);\n    }\n    pointer += len;\n    if (pointer > file.length)\n      file.length = pointer;\n\n    file.lastModified = System.currentTimeMillis();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["15c469602973ef1a33c9a07367a380d278ffab20"],"15c469602973ef1a33c9a07367a380d278ffab20":["501fc3e181d3b5245ce8a7b168b5a5d0f32b0bbb"],"501fc3e181d3b5245ce8a7b168b5a5d0f32b0bbb":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"]},"commit2Childs":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["501fc3e181d3b5245ce8a7b168b5a5d0f32b0bbb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"15c469602973ef1a33c9a07367a380d278ffab20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"501fc3e181d3b5245ce8a7b168b5a5d0f32b0bbb":["15c469602973ef1a33c9a07367a380d278ffab20"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}