{"path":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"51cb88215648c6da23e00f2ffb57a5e3e1ef14be","date":1309303947,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/OrdFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader;\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(topReader, field);\n    return new IntDocValues(this) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.numOrd();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = sindex.getOrd(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader;\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(topReader, field);\n    return new IntDocValues(this) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.numOrd();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = sindex.getOrd(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/OrdFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader;\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(topReader, field);\n    return new IntDocValues(this) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.numOrd();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = sindex.getOrd(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader;\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(topReader, field);\n    return new IntDocValues(this) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.numOrd();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = sindex.getOrd(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/OrdFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader;\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(topReader, field);\n    return new IntDocValues(this) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.numOrd();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = sindex.getOrd(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader;\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(topReader, field);\n    return new IntDocValues(this) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.numOrd();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = sindex.getOrd(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32e7c2a80dad193a76a03ec46b878969d469ff6c","date":1323722006,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader;\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(topReader, field);\n    return new IntDocValues(this) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.numOrd();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = sindex.getOrd(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader;\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(topReader, field);\n    return new IntDocValues(this) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.numOrd();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = sindex.getOrd(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader;\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(topReader, field);\n    return new IntDocValues(this) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.numOrd();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = sindex.getOrd(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader;\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(topReader, field);\n    return new IntDocValues(this) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.numOrd();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = sindex.getOrd(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2dd6ecb8250c497ed227653279d6a4f470bfbb31","date":1326814483,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  // TODO: this is trappy? perhaps this query instead should make you pass a slow reader yourself?\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader;\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(new SlowMultiReaderWrapper(topReader), field);\n    return new IntDocValues(this) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.numOrd();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = sindex.getOrd(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader;\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(topReader, field);\n    return new IntDocValues(this) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.numOrd();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = sindex.getOrd(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"61e20f33ce8ff701576366fdb03955eded5f209b","date":1327852832,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  // TODO: this is trappy? perhaps this query instead should make you pass a slow reader yourself?\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n    final AtomicIndexReader r = topReader instanceof CompositeIndexReader \n        ? new SlowCompositeReaderWrapper((CompositeIndexReader)topReader) \n        : (AtomicIndexReader) topReader;\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(r, field);\n    return new IntDocValues(this) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.numOrd();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = sindex.getOrd(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  // TODO: this is trappy? perhaps this query instead should make you pass a slow reader yourself?\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader;\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(new SlowMultiReaderWrapper(topReader), field);\n    return new IntDocValues(this) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.numOrd();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = sindex.getOrd(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  // TODO: this is trappy? perhaps this query instead should make you pass a slow reader yourself?\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n    final AtomicReader r = topReader instanceof CompositeReader \n        ? new SlowCompositeReaderWrapper((CompositeReader)topReader) \n        : (AtomicReader) topReader;\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(r, field);\n    return new IntDocValues(this) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.numOrd();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = sindex.getOrd(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  // TODO: this is trappy? perhaps this query instead should make you pass a slow reader yourself?\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n    final AtomicIndexReader r = topReader instanceof CompositeIndexReader \n        ? new SlowCompositeReaderWrapper((CompositeIndexReader)topReader) \n        : (AtomicIndexReader) topReader;\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(r, field);\n    return new IntDocValues(this) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.numOrd();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = sindex.getOrd(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  // TODO: this is trappy? perhaps this query instead should make you pass a slow reader yourself?\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n    final AtomicReader r = topReader instanceof CompositeReader \n        ? new SlowCompositeReaderWrapper((CompositeReader)topReader) \n        : (AtomicReader) topReader;\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(r, field);\n    return new IntDocValues(this) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.numOrd();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = sindex.getOrd(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  // TODO: this is trappy? perhaps this query instead should make you pass a slow reader yourself?\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader;\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(new SlowMultiReaderWrapper(topReader), field);\n    return new IntDocValues(this) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.numOrd();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = sindex.getOrd(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/OrdFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  // TODO: this is trappy? perhaps this query instead should make you pass a slow reader yourself?\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n    final AtomicReader r = topReader instanceof CompositeReader \n        ? new SlowCompositeReaderWrapper((CompositeReader)topReader) \n        : (AtomicReader) topReader;\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(r, field);\n    return new IntDocValues(this) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.numOrd();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = sindex.getOrd(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  // TODO: this is trappy? perhaps this query instead should make you pass a slow reader yourself?\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n    final AtomicReader r = topReader instanceof CompositeReader \n        ? new SlowCompositeReaderWrapper((CompositeReader)topReader) \n        : (AtomicReader) topReader;\n    final FieldCache.DocTermsIndex sindex = FieldCache.DEFAULT.getTermsIndex(r, field);\n    return new IntDocValues(this) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.numOrd();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = sindex.getOrd(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["61e20f33ce8ff701576366fdb03955eded5f209b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"61e20f33ce8ff701576366fdb03955eded5f209b":["2dd6ecb8250c497ed227653279d6a4f470bfbb31"],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"2dd6ecb8250c497ed227653279d6a4f470bfbb31":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["2dd6ecb8250c497ed227653279d6a4f470bfbb31","da6d5ac19a80d65b1e864251f155d30960353b7e"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"51cb88215648c6da23e00f2ffb57a5e3e1ef14be":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["51cb88215648c6da23e00f2ffb57a5e3e1ef14be","32e7c2a80dad193a76a03ec46b878969d469ff6c"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"61e20f33ce8ff701576366fdb03955eded5f209b":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2dd6ecb8250c497ed227653279d6a4f470bfbb31":["61e20f33ce8ff701576366fdb03955eded5f209b","5cab9a86bd67202d20b6adc463008c8e982b070a"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"51cb88215648c6da23e00f2ffb57a5e3e1ef14be":["32e7c2a80dad193a76a03ec46b878969d469ff6c","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["2dd6ecb8250c497ed227653279d6a4f470bfbb31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}