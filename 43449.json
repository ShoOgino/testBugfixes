{"path":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","commits":[{"id":"1085ea837da8f1e96697e17cf73e1d08e7329261","date":1281469548,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  private void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        deletedDocs.write(directory(), delFileName);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen(core.fieldInfos.size());\n      for (final Norm norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e317b8d092c204fc631b73733452ae0984c1d6d","date":1285505180,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","sourceNew":"  private void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert deletedDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        deletedDocs.write(directory(), delFileName);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen(core.fieldInfos.size());\n      for (final Norm norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","sourceOld":"  private void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        deletedDocs.write(directory(), delFileName);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen(core.fieldInfos.size());\n      for (final Norm norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  private void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert deletedDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        deletedDocs.write(directory(), delFileName);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen(core.fieldInfos.size());\n      for (final Norm norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0c7a8f7304b75b1528814c5820fa23a96816c27","date":1298314239,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","sourceNew":"  private void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert deletedDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        deletedDocs.write(directory(), delFileName);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen();\n      for (final Norm norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","sourceOld":"  private void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert deletedDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        deletedDocs.write(directory(), delFileName);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen(core.fieldInfos.size());\n      for (final Norm norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","sourceNew":"  private void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert deletedDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        deletedDocs.write(directory(), delFileName);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen();\n      for (final Norm norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","sourceOld":"  private void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert deletedDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        deletedDocs.write(directory(), delFileName);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen(core.fieldInfos.size());\n      for (final Norm norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14ec33385f6fbb6ce172882d14605790418a5d31","date":1298910796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","sourceNew":"  private void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert deletedDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        deletedDocs.write(directory(), delFileName);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen(core.fieldInfos.size());\n      for (final Norm norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","sourceOld":"  private void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert deletedDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        deletedDocs.write(directory(), delFileName);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen();\n      for (final Norm norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91824676e57e2d1c945918662b835813385cd291","date":1299972146,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","sourceNew":"  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert deletedDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        deletedDocs.write(directory(), delFileName);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen(core.fieldInfos.size());\n      for (final Norm norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","sourceOld":"  private void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert deletedDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        deletedDocs.write(directory(), delFileName);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen(core.fieldInfos.size());\n      for (final Norm norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1224a4027481acce15495b03bce9b48b93b42722","date":1300792329,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","sourceNew":"  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert deletedDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        deletedDocs.write(directory(), delFileName);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen();\n      for (final Norm norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","sourceOld":"  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert deletedDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        deletedDocs.write(directory(), delFileName);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen(core.fieldInfos.size());\n      for (final Norm norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","sourceNew":"  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert deletedDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        deletedDocs.write(directory(), delFileName);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen();\n      for (final Norm norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","sourceOld":"  private void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert deletedDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        deletedDocs.write(directory(), delFileName);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen(core.fieldInfos.size());\n      for (final Norm norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","sourceNew":"  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert deletedDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        deletedDocs.write(directory(), delFileName);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen();\n      for (final Norm norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","sourceOld":"  private void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert deletedDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        deletedDocs.write(directory(), delFileName);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen();\n      for (final Norm norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b5e0eebe355b14693e24007d721da78a79d8170","date":1305898401,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","sourceNew":"  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert deletedDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        deletedDocs.write(directory(), delFileName);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen();\n      for (final SegmentNorms norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","sourceOld":"  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert deletedDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        deletedDocs.write(directory(), delFileName);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen();\n      for (final Norm norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","sourceNew":"  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert deletedDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        deletedDocs.write(directory(), delFileName);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen();\n      for (final SegmentNorms norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","sourceOld":"  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert deletedDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        deletedDocs.write(directory(), delFileName);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen();\n      for (final Norm norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","date":1306150983,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","sourceNew":"  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert deletedDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        deletedDocs.write(directory(), delFileName);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen();\n      for (final SegmentNorms norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","sourceOld":"  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert deletedDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        deletedDocs.write(directory(), delFileName);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen();\n      for (final Norm norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","sourceNew":"  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert deletedDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        deletedDocs.write(directory(), delFileName, IOContext.DEFAULT);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen();\n      for (final SegmentNorms norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","sourceOld":"  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert deletedDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        deletedDocs.write(directory(), delFileName);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen();\n      for (final SegmentNorms norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","sourceNew":"  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (liveDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert liveDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        liveDocs.write(directory(), delFileName);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert (maxDoc()-liveDocs.count()) == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + (maxDoc()-liveDocs.count());\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen();\n      for (final SegmentNorms norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    liveDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","sourceOld":"  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert deletedDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        deletedDocs.write(directory(), delFileName);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen();\n      for (final SegmentNorms norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","sourceNew":"  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (liveDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert liveDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        liveDocs.write(directory(), delFileName);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert (maxDoc()-liveDocs.count()) == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + (maxDoc()-liveDocs.count());\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen();\n      for (final SegmentNorms norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    liveDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","sourceOld":"  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert deletedDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        deletedDocs.write(directory(), delFileName);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen();\n      for (final SegmentNorms norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","sourceNew":"  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (liveDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert liveDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        liveDocs.write(directory(), delFileName, IOContext.DEFAULT);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert (maxDoc()-liveDocs.count()) == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + (maxDoc()-liveDocs.count());\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen();\n      for (final SegmentNorms norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    liveDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","sourceOld":"  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (deletedDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert deletedDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        deletedDocs.write(directory(), delFileName, IOContext.DEFAULT);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen();\n      for (final SegmentNorms norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    deletedDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","sourceNew":"  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (liveDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert liveDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        liveDocs.write(directory(), delFileName, IOContext.DEFAULT);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert (maxDoc()-liveDocs.count()) == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + (maxDoc()-liveDocs.count());\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen();\n      for (final SegmentNorms norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    liveDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","sourceOld":"  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (liveDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert liveDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        liveDocs.write(directory(), delFileName);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert (maxDoc()-liveDocs.count()) == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + (maxDoc()-liveDocs.count());\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen();\n      for (final SegmentNorms norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    liveDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","sourceNew":"  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (liveDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert liveDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        liveDocs.write(directory(), delFileName, IOContext.DEFAULT);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert (maxDoc()-liveDocs.count()) == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + (maxDoc()-liveDocs.count());\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen();\n      for (final SegmentNorms norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    liveDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","sourceOld":"  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (liveDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert liveDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        liveDocs.write(directory(), delFileName);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert (maxDoc()-liveDocs.count()) == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + (maxDoc()-liveDocs.count());\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen();\n      for (final SegmentNorms norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    liveDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4122a26e1fd0457a340616673a3d3aada370f713","date":1322955654,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","sourceNew":"  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (liveDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert liveDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        liveDocs.write(directory(), delFileName, IOContext.DEFAULT);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert (maxDoc()-liveDocs.count()) == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + (maxDoc()-liveDocs.count());\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    liveDocsDirty = false;\n    hasChanges = false;\n  }\n\n","sourceOld":"  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (liveDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert liveDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        liveDocs.write(directory(), delFileName, IOContext.DEFAULT);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert (maxDoc()-liveDocs.count()) == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + (maxDoc()-liveDocs.count());\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen();\n      for (final SegmentNorms norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    liveDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75ec8c9aaa10ac00b30fd4c2465409770c838f7b","date":1323020115,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","sourceNew":"  // nocommit: remove deletions from SR\n  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (liveDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert liveDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        liveDocs.write(directory(), delFileName, IOContext.DEFAULT);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert (maxDoc()-liveDocs.count()) == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + (maxDoc()-liveDocs.count());\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    liveDocsDirty = false;\n    hasChanges = false;\n  }\n\n","sourceOld":"  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (liveDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert liveDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        liveDocs.write(directory(), delFileName, IOContext.DEFAULT);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert (maxDoc()-liveDocs.count()) == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + (maxDoc()-liveDocs.count());\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    liveDocsDirty = false;\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1f693ce507c40f77e3a92acd16c6b79cdd730e4","date":1323036169,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","sourceNew":"  // nocommit: remove deletions from SR\n  private synchronized void commitChanges() throws IOException {\n    if (liveDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert liveDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        liveDocs.write(directory(), delFileName, IOContext.DEFAULT);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert (maxDoc()-liveDocs.count()) == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + (maxDoc()-liveDocs.count());\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    liveDocsDirty = false;\n    hasChanges = false;\n  }\n\n","sourceOld":"  // nocommit: remove deletions from SR\n  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (liveDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert liveDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        liveDocs.write(directory(), delFileName, IOContext.DEFAULT);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert (maxDoc()-liveDocs.count()) == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + (maxDoc()-liveDocs.count());\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    liveDocsDirty = false;\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","sourceNew":"  // TODO: remove deletions from SR\n  private synchronized void commitChanges() throws IOException {\n    if (liveDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert liveDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        liveDocs.write(directory(), delFileName, IOContext.DEFAULT);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert (maxDoc()-liveDocs.count()) == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + (maxDoc()-liveDocs.count());\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    liveDocsDirty = false;\n    hasChanges = false;\n  }\n\n","sourceOld":"  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (liveDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert liveDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        liveDocs.write(directory(), delFileName, IOContext.DEFAULT);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert (maxDoc()-liveDocs.count()) == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + (maxDoc()-liveDocs.count());\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen();\n      for (final SegmentNorms norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    liveDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","sourceNew":"  // TODO: remove deletions from SR\n  private synchronized void commitChanges() throws IOException {\n    if (liveDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert liveDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        liveDocs.write(directory(), delFileName, IOContext.DEFAULT);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert (maxDoc()-liveDocs.count()) == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + (maxDoc()-liveDocs.count());\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    liveDocsDirty = false;\n    hasChanges = false;\n  }\n\n","sourceOld":"  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (liveDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert liveDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        liveDocs.write(directory(), delFileName, IOContext.DEFAULT);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert (maxDoc()-liveDocs.count()) == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + (maxDoc()-liveDocs.count());\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen();\n      for (final SegmentNorms norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    liveDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":["d619839baa8ce5503e496b94a9e42ad6f079293f","8b5e0eebe355b14693e24007d721da78a79d8170"],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["4122a26e1fd0457a340616673a3d3aada370f713"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["ddc4c914be86e34b54f70023f45a60fa7f04e929","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["8b5e0eebe355b14693e24007d721da78a79d8170"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["8b5e0eebe355b14693e24007d721da78a79d8170"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6e317b8d092c204fc631b73733452ae0984c1d6d"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","1224a4027481acce15495b03bce9b48b93b42722"],"14ec33385f6fbb6ce172882d14605790418a5d31":["b0c7a8f7304b75b1528814c5820fa23a96816c27"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["817d8435e9135b756f08ce6710ab0baac51bdf88","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b0c7a8f7304b75b1528814c5820fa23a96816c27"],"1224a4027481acce15495b03bce9b48b93b42722":["91824676e57e2d1c945918662b835813385cd291"],"1085ea837da8f1e96697e17cf73e1d08e7329261":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a3776dccca01c11e7046323cfad46a3b4a471233","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"6e317b8d092c204fc631b73733452ae0984c1d6d":["1085ea837da8f1e96697e17cf73e1d08e7329261"],"8b5e0eebe355b14693e24007d721da78a79d8170":["1224a4027481acce15495b03bce9b48b93b42722"],"e1f693ce507c40f77e3a92acd16c6b79cdd730e4":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["6e317b8d092c204fc631b73733452ae0984c1d6d","1224a4027481acce15495b03bce9b48b93b42722"],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["6e317b8d092c204fc631b73733452ae0984c1d6d"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1224a4027481acce15495b03bce9b48b93b42722","8b5e0eebe355b14693e24007d721da78a79d8170"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ddc4c914be86e34b54f70023f45a60fa7f04e929","e1f693ce507c40f77e3a92acd16c6b79cdd730e4"],"91824676e57e2d1c945918662b835813385cd291":["14ec33385f6fbb6ce172882d14605790418a5d31"],"4122a26e1fd0457a340616673a3d3aada370f713":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"]},"commit2Childs":{"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":[],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["e1f693ce507c40f77e3a92acd16c6b79cdd730e4"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["ddc4c914be86e34b54f70023f45a60fa7f04e929","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["d083e83f225b11e5fdd900e83d26ddb385b6955c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"14ec33385f6fbb6ce172882d14605790418a5d31":["91824676e57e2d1c945918662b835813385cd291"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1085ea837da8f1e96697e17cf73e1d08e7329261"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5d004d0e0b3f65bb40da76d476d659d7888270e8","3615ce4a1f785ae1b779244de52c6a7d99227e60","4122a26e1fd0457a340616673a3d3aada370f713"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"1224a4027481acce15495b03bce9b48b93b42722":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","8b5e0eebe355b14693e24007d721da78a79d8170","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"1085ea837da8f1e96697e17cf73e1d08e7329261":["6e317b8d092c204fc631b73733452ae0984c1d6d"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"6e317b8d092c204fc631b73733452ae0984c1d6d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d619839baa8ce5503e496b94a9e42ad6f079293f","b0c7a8f7304b75b1528814c5820fa23a96816c27"],"8b5e0eebe355b14693e24007d721da78a79d8170":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","a3776dccca01c11e7046323cfad46a3b4a471233"],"e1f693ce507c40f77e3a92acd16c6b79cdd730e4":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a"],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["14ec33385f6fbb6ce172882d14605790418a5d31","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a3776dccca01c11e7046323cfad46a3b4a471233":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"91824676e57e2d1c945918662b835813385cd291":["1224a4027481acce15495b03bce9b48b93b42722"],"4122a26e1fd0457a340616673a3d3aada370f713":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}