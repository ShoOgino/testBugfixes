{"path":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeGraph(TokenStream,BooleanClause.Occur,String,boolean,int).mjava","commits":[{"id":"e52c30617998e1bc2a946cc226f52e9b35162b1e","date":1483438353,"type":0,"author":"Matt Weber","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeGraph(TokenStream,BooleanClause.Occur,String,boolean,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a query from a graph token stream by extracting all the finite strings from the graph and using them to create the query.\n   */\n  protected Query analyzeGraph(TokenStream source, BooleanClause.Occur operator, String field, boolean quoted, int phraseSlop)\n      throws IOException {\n    source.reset();\n    List<TokenStream> tokenStreams = GraphTokenStreamFiniteStrings.getTokenStreams(source);\n\n    if (tokenStreams.isEmpty()) {\n      return null;\n    }\n\n    List<Query> queries = new ArrayList<>(tokenStreams.size());\n    for (TokenStream ts : tokenStreams) {\n      Query query = createFieldQuery(ts, operator, field, quoted, phraseSlop);\n      if (query != null) {\n        queries.add(query);\n      }\n    }\n\n    return new GraphQuery(queries.toArray(new Query[0]));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeGraph(TokenStream,BooleanClause.Occur,String,boolean,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a query from a graph token stream by extracting all the finite strings from the graph and using them to create the query.\n   */\n  protected Query analyzeGraph(TokenStream source, BooleanClause.Occur operator, String field, boolean quoted, int phraseSlop)\n      throws IOException {\n    source.reset();\n    List<TokenStream> tokenStreams = GraphTokenStreamFiniteStrings.getTokenStreams(source);\n\n    if (tokenStreams.isEmpty()) {\n      return null;\n    }\n\n    List<Query> queries = new ArrayList<>(tokenStreams.size());\n    for (TokenStream ts : tokenStreams) {\n      Query query = createFieldQuery(ts, operator, field, quoted, phraseSlop);\n      if (query != null) {\n        queries.add(query);\n      }\n    }\n\n    return new GraphQuery(queries.toArray(new Query[0]));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db","date":1486463279,"type":5,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeGraphPhrase(TokenStream,BooleanClause.Occur,String,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeGraph(TokenStream,BooleanClause.Occur,String,boolean,int).mjava","sourceNew":"  /**\n   * Creates a query from a graph token stream by extracting all the finite strings from the graph and using them to create the query.\n   */\n  protected Query analyzeGraphPhrase(TokenStream source, BooleanClause.Occur operator, String field, int phraseSlop)\n      throws IOException {\n    source.reset();\n    GraphTokenStreamFiniteStrings visitor = new GraphTokenStreamFiniteStrings(source);\n    Iterator<TokenStream> it = visitor.getFiniteStrings();\n    List<Query> queries = new ArrayList<>();\n    while (it.hasNext()) {\n      Query query = createFieldQuery(it.next(), operator, field, true, phraseSlop);\n      if (query != null) {\n        queries.add(query);\n      }\n    }\n    return new GraphQuery(queries.toArray(new Query[0]));\n  }\n\n","sourceOld":"  /**\n   * Creates a query from a graph token stream by extracting all the finite strings from the graph and using them to create the query.\n   */\n  protected Query analyzeGraph(TokenStream source, BooleanClause.Occur operator, String field, boolean quoted, int phraseSlop)\n      throws IOException {\n    source.reset();\n    List<TokenStream> tokenStreams = GraphTokenStreamFiniteStrings.getTokenStreams(source);\n\n    if (tokenStreams.isEmpty()) {\n      return null;\n    }\n\n    List<Query> queries = new ArrayList<>(tokenStreams.size());\n    for (TokenStream ts : tokenStreams) {\n      Query query = createFieldQuery(ts, operator, field, quoted, phraseSlop);\n      if (query != null) {\n        queries.add(query);\n      }\n    }\n\n    return new GraphQuery(queries.toArray(new Query[0]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e52c30617998e1bc2a946cc226f52e9b35162b1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e0d75d7d3cda2b33e79d0eb0e716169cebec4db"],"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db":["e52c30617998e1bc2a946cc226f52e9b35162b1e"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e52c30617998e1bc2a946cc226f52e9b35162b1e"]},"commit2Childs":{"e52c30617998e1bc2a946cc226f52e9b35162b1e":["7e0d75d7d3cda2b33e79d0eb0e716169cebec4db","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e52c30617998e1bc2a946cc226f52e9b35162b1e","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}