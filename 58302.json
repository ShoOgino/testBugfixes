{"path":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      // Pass true for \"scoresDocsInOrder\", because we\n      // require in-order scoring, even if caller does not,\n      // since we call advance on the valSrcScorers.  Pass\n      // false for \"topScorer\" because we will not invoke\n      // score(Collector) on these scorers:\n      Scorer subQueryScorer = subQueryWeight.scorer(context, true, false, acceptDocs);\n      if (subQueryScorer == null) {\n        return null;\n      }\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(context, true, topScorer, acceptDocs);\n      }\n      return new CustomScorer(CustomScoreQuery.this.getCustomScoreProvider(context), this, getBoost(), subQueryScorer, valSrcScorers);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      // Pass true for \"scoresDocsInOrder\", because we\n      // require in-order scoring, even if caller does not,\n      // since we call advance on the valSrcScorers.  Pass\n      // false for \"topScorer\" because we will not invoke\n      // score(Collector) on these scorers:\n      Scorer subQueryScorer = subQueryWeight.scorer(context, true, false, acceptDocs);\n      if (subQueryScorer == null) {\n        return null;\n      }\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(context, true, topScorer, acceptDocs);\n      }\n      return new CustomScorer(CustomScoreQuery.this.getCustomScoreProvider(context), this, getBoost(), subQueryScorer, valSrcScorers);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a10390f57e4f8d3ada1cb03f9d43ce1bd13ebd7","date":1366210710,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      // Pass true for \"scoresDocsInOrder\", because we\n      // require in-order scoring, even if caller does not,\n      // since we call advance on the valSrcScorers.  Pass\n      // false for \"topScorer\" because we will not invoke\n      // score(Collector) on these scorers:\n      Scorer subQueryScorer = subQueryWeight.scorer(context, true, false, acceptDocs);\n      if (subQueryScorer == null) {\n        return null;\n      }\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(context, true, topScorer, acceptDocs);\n      }\n      return new CustomScorer(CustomScoreQuery.this.getCustomScoreProvider(context), this, queryWeight, subQueryScorer, valSrcScorers);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      // Pass true for \"scoresDocsInOrder\", because we\n      // require in-order scoring, even if caller does not,\n      // since we call advance on the valSrcScorers.  Pass\n      // false for \"topScorer\" because we will not invoke\n      // score(Collector) on these scorers:\n      Scorer subQueryScorer = subQueryWeight.scorer(context, true, false, acceptDocs);\n      if (subQueryScorer == null) {\n        return null;\n      }\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(context, true, topScorer, acceptDocs);\n      }\n      return new CustomScorer(CustomScoreQuery.this.getCustomScoreProvider(context), this, getBoost(), subQueryScorer, valSrcScorers);\n    }\n\n","bugFix":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      // Pass true for \"scoresDocsInOrder\", because we\n      // require in-order scoring, even if caller does not,\n      // since we call advance on the valSrcScorers.  Pass\n      // false for \"topScorer\" because we will not invoke\n      // score(Collector) on these scorers:\n      Scorer subQueryScorer = subQueryWeight.scorer(context, true, false, acceptDocs);\n      if (subQueryScorer == null) {\n        return null;\n      }\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(context, true, topScorer, acceptDocs);\n      }\n      return new CustomScorer(CustomScoreQuery.this.getCustomScoreProvider(context), this, queryWeight, subQueryScorer, valSrcScorers);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      // Pass true for \"scoresDocsInOrder\", because we\n      // require in-order scoring, even if caller does not,\n      // since we call advance on the valSrcScorers.  Pass\n      // false for \"topScorer\" because we will not invoke\n      // score(Collector) on these scorers:\n      Scorer subQueryScorer = subQueryWeight.scorer(context, true, false, acceptDocs);\n      if (subQueryScorer == null) {\n        return null;\n      }\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(context, true, topScorer, acceptDocs);\n      }\n      return new CustomScorer(CustomScoreQuery.this.getCustomScoreProvider(context), this, queryWeight, subQueryScorer, valSrcScorers);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      // Pass true for \"scoresDocsInOrder\", because we\n      // require in-order scoring, even if caller does not,\n      // since we call advance on the valSrcScorers.  Pass\n      // false for \"topScorer\" because we will not invoke\n      // score(Collector) on these scorers:\n      Scorer subQueryScorer = subQueryWeight.scorer(context, true, false, acceptDocs);\n      if (subQueryScorer == null) {\n        return null;\n      }\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(context, true, topScorer, acceptDocs);\n      }\n      return new CustomScorer(CustomScoreQuery.this.getCustomScoreProvider(context), this, queryWeight, subQueryScorer, valSrcScorers);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      // Pass true for \"scoresDocsInOrder\", because we\n      // require in-order scoring, even if caller does not,\n      // since we call advance on the valSrcScorers.  Pass\n      // false for \"topScorer\" because we will not invoke\n      // score(Collector) on these scorers:\n      Scorer subQueryScorer = subQueryWeight.scorer(context, true, false, acceptDocs);\n      if (subQueryScorer == null) {\n        return null;\n      }\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(context, true, topScorer, acceptDocs);\n      }\n      return new CustomScorer(CustomScoreQuery.this.getCustomScoreProvider(context), this, queryWeight, subQueryScorer, valSrcScorers);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      Scorer subQueryScorer = subQueryWeight.scorer(context, acceptDocs);\n      if (subQueryScorer == null) {\n        return null;\n      }\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(context, acceptDocs);\n      }\n      return new CustomScorer(CustomScoreQuery.this.getCustomScoreProvider(context), this, queryWeight, subQueryScorer, valSrcScorers);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      // Pass true for \"scoresDocsInOrder\", because we\n      // require in-order scoring, even if caller does not,\n      // since we call advance on the valSrcScorers.  Pass\n      // false for \"topScorer\" because we will not invoke\n      // score(Collector) on these scorers:\n      Scorer subQueryScorer = subQueryWeight.scorer(context, true, false, acceptDocs);\n      if (subQueryScorer == null) {\n        return null;\n      }\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(context, true, topScorer, acceptDocs);\n      }\n      return new CustomScorer(CustomScoreQuery.this.getCustomScoreProvider(context), this, queryWeight, subQueryScorer, valSrcScorers);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      Scorer subQueryScorer = subQueryWeight.scorer(context, acceptDocs);\n      if (subQueryScorer == null) {\n        return null;\n      }\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(context, acceptDocs);\n      }\n      return new CustomScorer(CustomScoreQuery.this.getCustomScoreProvider(context), this, queryWeight, subQueryScorer, valSrcScorers);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      // Pass true for \"scoresDocsInOrder\", because we\n      // require in-order scoring, even if caller does not,\n      // since we call advance on the valSrcScorers.  Pass\n      // false for \"topScorer\" because we will not invoke\n      // score(Collector) on these scorers:\n      Scorer subQueryScorer = subQueryWeight.scorer(context, true, false, acceptDocs);\n      if (subQueryScorer == null) {\n        return null;\n      }\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(context, true, topScorer, acceptDocs);\n      }\n      return new CustomScorer(CustomScoreQuery.this.getCustomScoreProvider(context), this, queryWeight, subQueryScorer, valSrcScorers);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["2a10390f57e4f8d3ada1cb03f9d43ce1bd13ebd7"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["2a10390f57e4f8d3ada1cb03f9d43ce1bd13ebd7"],"2a10390f57e4f8d3ada1cb03f9d43ce1bd13ebd7":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["19275ba31e621f6da1b83bf13af75233876fd3d4","2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acf00221f44c5f08ccea014f2492b53af15ecd66"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["2a10390f57e4f8d3ada1cb03f9d43ce1bd13ebd7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"2a10390f57e4f8d3ada1cb03f9d43ce1bd13ebd7":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}