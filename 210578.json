{"path":"solr/core/src/java/org/apache/solr/cloud/CreateAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createAlias(Aliases,ZkNodeProps).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results)\n      throws Exception {\n    String aliasName = message.getStr(NAME);\n    String collections = message.getStr(\"collections\");\n\n    Map<String, Map<String, String>> newAliasesMap = new HashMap<>();\n    Map<String, String> newCollectionAliasesMap = new HashMap<>();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Map<String, String> prevColAliases = zkStateReader.getAliases().getCollectionAliasMap();\n    if (prevColAliases != null) {\n      newCollectionAliasesMap.putAll(prevColAliases);\n    }\n    newCollectionAliasesMap.put(aliasName, collections);\n    newAliasesMap.put(\"collection\", newCollectionAliasesMap);\n    Aliases newAliases = new Aliases(newAliasesMap);\n    byte[] jsonBytes = null;\n    if (newAliases.collectionAliasSize() > 0) { // only sub map right now\n      jsonBytes = Utils.toJSON(newAliases.getAliasMap());\n    }\n    try {\n      zkStateReader.getZkClient().setData(ZkStateReader.ALIASES, jsonBytes, true);\n\n      checkForAlias(aliasName, collections);\n      // some fudge for other nodes\n      Thread.sleep(100);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      log.warn(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  private void createAlias(Aliases aliases, ZkNodeProps message) {\n    String aliasName = message.getStr(NAME);\n    String collections = message.getStr(\"collections\");\n    \n    Map<String,Map<String,String>> newAliasesMap = new HashMap<>();\n    Map<String,String> newCollectionAliasesMap = new HashMap<>();\n    Map<String,String> prevColAliases = aliases.getCollectionAliasMap();\n    if (prevColAliases != null) {\n      newCollectionAliasesMap.putAll(prevColAliases);\n    }\n    newCollectionAliasesMap.put(aliasName, collections);\n    newAliasesMap.put(\"collection\", newCollectionAliasesMap);\n    Aliases newAliases = new Aliases(newAliasesMap);\n    byte[] jsonBytes = null;\n    if (newAliases.collectionAliasSize() > 0) { // only sub map right now\n      jsonBytes = Utils.toJSON(newAliases.getAliasMap());\n    }\n    try {\n      zkStateReader.getZkClient().setData(ZkStateReader.ALIASES, jsonBytes, true);\n      \n      checkForAlias(aliasName, collections);\n      // some fudge for other nodes\n      Thread.sleep(100);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      log.warn(\"\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createAlias(Aliases,ZkNodeProps).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results)\n      throws Exception {\n    String aliasName = message.getStr(NAME);\n    String collections = message.getStr(\"collections\");\n\n    Map<String, Map<String, String>> newAliasesMap = new HashMap<>();\n    Map<String, String> newCollectionAliasesMap = new HashMap<>();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Map<String, String> prevColAliases = zkStateReader.getAliases().getCollectionAliasMap();\n    if (prevColAliases != null) {\n      newCollectionAliasesMap.putAll(prevColAliases);\n    }\n    newCollectionAliasesMap.put(aliasName, collections);\n    newAliasesMap.put(\"collection\", newCollectionAliasesMap);\n    Aliases newAliases = new Aliases(newAliasesMap);\n    byte[] jsonBytes = null;\n    if (newAliases.collectionAliasSize() > 0) { // only sub map right now\n      jsonBytes = Utils.toJSON(newAliases.getAliasMap());\n    }\n    try {\n      zkStateReader.getZkClient().setData(ZkStateReader.ALIASES, jsonBytes, true);\n\n      checkForAlias(aliasName, collections);\n      // some fudge for other nodes\n      Thread.sleep(100);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      log.warn(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  private void createAlias(Aliases aliases, ZkNodeProps message) {\n    String aliasName = message.getStr(NAME);\n    String collections = message.getStr(\"collections\");\n    \n    Map<String,Map<String,String>> newAliasesMap = new HashMap<>();\n    Map<String,String> newCollectionAliasesMap = new HashMap<>();\n    Map<String,String> prevColAliases = aliases.getCollectionAliasMap();\n    if (prevColAliases != null) {\n      newCollectionAliasesMap.putAll(prevColAliases);\n    }\n    newCollectionAliasesMap.put(aliasName, collections);\n    newAliasesMap.put(\"collection\", newCollectionAliasesMap);\n    Aliases newAliases = new Aliases(newAliasesMap);\n    byte[] jsonBytes = null;\n    if (newAliases.collectionAliasSize() > 0) { // only sub map right now\n      jsonBytes = Utils.toJSON(newAliases.getAliasMap());\n    }\n    try {\n      zkStateReader.getZkClient().setData(ZkStateReader.ALIASES, jsonBytes, true);\n      \n      checkForAlias(aliasName, collections);\n      // some fudge for other nodes\n      Thread.sleep(100);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      log.warn(\"\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results)\n      throws Exception {\n    String aliasName = message.getStr(NAME);\n    String collections = message.getStr(\"collections\");\n\n    Map<String, Map<String, String>> newAliasesMap = new HashMap<>();\n    Map<String, String> newCollectionAliasesMap = new HashMap<>();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Map<String, String> prevColAliases = zkStateReader.getAliases().getCollectionAliasMap();\n    if (prevColAliases != null) {\n      newCollectionAliasesMap.putAll(prevColAliases);\n    }\n    newCollectionAliasesMap.put(aliasName, collections);\n    newAliasesMap.put(\"collection\", newCollectionAliasesMap);\n    Aliases newAliases = new Aliases(newAliasesMap);\n    byte[] jsonBytes = null;\n    if (newAliases.collectionAliasSize() > 0) { // only sub map right now\n      jsonBytes = Utils.toJSON(newAliases.getAliasMap());\n    }\n    try {\n      zkStateReader.getZkClient().setData(ZkStateReader.ALIASES, jsonBytes, true);\n\n      checkForAlias(aliasName, collections);\n      // some fudge for other nodes\n      Thread.sleep(100);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      log.warn(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af87133b5bdb246b06c4321f36cd76d947357ab6","date":1482195253,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results)\n      throws Exception {\n    String aliasName = message.getStr(NAME);\n    String collections = message.getStr(\"collections\");\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Map<String, String> prevColAliases = zkStateReader.getAliases().getCollectionAliasMap();\n    validateAllCollectionsExist(collections, prevColAliases, zkStateReader.getClusterState());\n\n    Map<String, Map<String, String>> newAliasesMap = new HashMap<>();\n    Map<String, String> newCollectionAliasesMap = new HashMap<>();\n    if (prevColAliases != null) {\n      newCollectionAliasesMap.putAll(prevColAliases);\n    }\n    newCollectionAliasesMap.put(aliasName, collections);\n    newAliasesMap.put(\"collection\", newCollectionAliasesMap);\n    Aliases newAliases = new Aliases(newAliasesMap);\n    byte[] jsonBytes = null;\n    if (newAliases.collectionAliasSize() > 0) { // only sub map right now\n      jsonBytes = Utils.toJSON(newAliases.getAliasMap());\n    }\n    try {\n      zkStateReader.getZkClient().setData(ZkStateReader.ALIASES, jsonBytes, true);\n\n      checkForAlias(aliasName, collections);\n      // some fudge for other nodes\n      Thread.sleep(100);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      log.warn(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results)\n      throws Exception {\n    String aliasName = message.getStr(NAME);\n    String collections = message.getStr(\"collections\");\n\n    Map<String, Map<String, String>> newAliasesMap = new HashMap<>();\n    Map<String, String> newCollectionAliasesMap = new HashMap<>();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Map<String, String> prevColAliases = zkStateReader.getAliases().getCollectionAliasMap();\n    if (prevColAliases != null) {\n      newCollectionAliasesMap.putAll(prevColAliases);\n    }\n    newCollectionAliasesMap.put(aliasName, collections);\n    newAliasesMap.put(\"collection\", newCollectionAliasesMap);\n    Aliases newAliases = new Aliases(newAliasesMap);\n    byte[] jsonBytes = null;\n    if (newAliases.collectionAliasSize() > 0) { // only sub map right now\n      jsonBytes = Utils.toJSON(newAliases.getAliasMap());\n    }\n    try {\n      zkStateReader.getZkClient().setData(ZkStateReader.ALIASES, jsonBytes, true);\n\n      checkForAlias(aliasName, collections);\n      // some fudge for other nodes\n      Thread.sleep(100);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      log.warn(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results)\n      throws Exception {\n    String aliasName = message.getStr(NAME);\n    String collections = message.getStr(\"collections\");\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Map<String, String> prevColAliases = zkStateReader.getAliases().getCollectionAliasMap();\n    validateAllCollectionsExist(collections, prevColAliases, zkStateReader.getClusterState());\n\n    Map<String, Map<String, String>> newAliasesMap = new HashMap<>();\n    Map<String, String> newCollectionAliasesMap = new HashMap<>();\n    if (prevColAliases != null) {\n      newCollectionAliasesMap.putAll(prevColAliases);\n    }\n    newCollectionAliasesMap.put(aliasName, collections);\n    newAliasesMap.put(\"collection\", newCollectionAliasesMap);\n    Aliases newAliases = new Aliases(newAliasesMap);\n    byte[] jsonBytes = null;\n    if (newAliases.collectionAliasSize() > 0) { // only sub map right now\n      jsonBytes = Utils.toJSON(newAliases.getAliasMap());\n    }\n    try {\n      zkStateReader.getZkClient().setData(ZkStateReader.ALIASES, jsonBytes, true);\n\n      checkForAlias(aliasName, collections);\n      // some fudge for other nodes\n      Thread.sleep(100);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      log.warn(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results)\n      throws Exception {\n    String aliasName = message.getStr(NAME);\n    String collections = message.getStr(\"collections\");\n\n    Map<String, Map<String, String>> newAliasesMap = new HashMap<>();\n    Map<String, String> newCollectionAliasesMap = new HashMap<>();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Map<String, String> prevColAliases = zkStateReader.getAliases().getCollectionAliasMap();\n    if (prevColAliases != null) {\n      newCollectionAliasesMap.putAll(prevColAliases);\n    }\n    newCollectionAliasesMap.put(aliasName, collections);\n    newAliasesMap.put(\"collection\", newCollectionAliasesMap);\n    Aliases newAliases = new Aliases(newAliasesMap);\n    byte[] jsonBytes = null;\n    if (newAliases.collectionAliasSize() > 0) { // only sub map right now\n      jsonBytes = Utils.toJSON(newAliases.getAliasMap());\n    }\n    try {\n      zkStateReader.getZkClient().setData(ZkStateReader.ALIASES, jsonBytes, true);\n\n      checkForAlias(aliasName, collections);\n      // some fudge for other nodes\n      Thread.sleep(100);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      log.warn(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b824daa61db3f30b91a22213d6c04e1fa2e2b06","date":1508385744,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results)\n      throws Exception {\n    String aliasName = message.getStr(NAME);\n    String collections = message.getStr(\"collections\"); // could be comma delimited list\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    validateAllCollectionsExistAndNoDups(collections, zkStateReader);\n\n    byte[] jsonBytes = zkStateReader.getAliases().cloneWithCollectionAlias(aliasName, collections).toJSON();\n    try {\n      zkStateReader.getZkClient().setData(ZkStateReader.ALIASES, jsonBytes, true);\n\n      checkForAlias(aliasName, collections);\n      // some fudge for other nodes\n      Thread.sleep(100);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      log.warn(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results)\n      throws Exception {\n    String aliasName = message.getStr(NAME);\n    String collections = message.getStr(\"collections\");\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Map<String, String> prevColAliases = zkStateReader.getAliases().getCollectionAliasMap();\n    validateAllCollectionsExist(collections, prevColAliases, zkStateReader.getClusterState());\n\n    Map<String, Map<String, String>> newAliasesMap = new HashMap<>();\n    Map<String, String> newCollectionAliasesMap = new HashMap<>();\n    if (prevColAliases != null) {\n      newCollectionAliasesMap.putAll(prevColAliases);\n    }\n    newCollectionAliasesMap.put(aliasName, collections);\n    newAliasesMap.put(\"collection\", newCollectionAliasesMap);\n    Aliases newAliases = new Aliases(newAliasesMap);\n    byte[] jsonBytes = null;\n    if (newAliases.collectionAliasSize() > 0) { // only sub map right now\n      jsonBytes = Utils.toJSON(newAliases.getAliasMap());\n    }\n    try {\n      zkStateReader.getZkClient().setData(ZkStateReader.ALIASES, jsonBytes, true);\n\n      checkForAlias(aliasName, collections);\n      // some fudge for other nodes\n      Thread.sleep(100);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      log.warn(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["f2f5f46d1d0ebd4c0522e96d55ee60f0b57fbecc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"215e40821821b2df2e69355e208532c05ef095a5","date":1510858642,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results)\n      throws Exception {\n    String aliasName = message.getStr(NAME);\n    String collections = message.getStr(\"collections\"); // could be comma delimited list\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    validateAllCollectionsExistAndNoDups(collections, zkStateReader);\n\n    zkStateReader.aliasesHolder.applyModificationAndExportToZk(aliases -> aliases.cloneWithCollectionAlias(aliasName, collections));\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results)\n      throws Exception {\n    String aliasName = message.getStr(NAME);\n    String collections = message.getStr(\"collections\"); // could be comma delimited list\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    validateAllCollectionsExistAndNoDups(collections, zkStateReader);\n\n    byte[] jsonBytes = zkStateReader.getAliases().cloneWithCollectionAlias(aliasName, collections).toJSON();\n    try {\n      zkStateReader.getZkClient().setData(ZkStateReader.ALIASES, jsonBytes, true);\n\n      checkForAlias(aliasName, collections);\n      // some fudge for other nodes\n      Thread.sleep(100);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      log.warn(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["f2f5f46d1d0ebd4c0522e96d55ee60f0b57fbecc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"26da72979d4068fce4939aeb5c8e16773874f38c","date":1510957208,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results)\n      throws Exception {\n    String aliasName = message.getStr(NAME);\n    String collections = message.getStr(\"collections\"); // could be comma delimited list\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    validateAllCollectionsExistAndNoDups(collections, zkStateReader);\n\n    zkStateReader.aliasesHolder.applyModificationAndExportToZk(aliases -> aliases.cloneWithCollectionAlias(aliasName, collections));\n\n    // Sleep a bit to allow ZooKeeper state propagation.\n    //\n    // THIS IS A KLUDGE.\n    //\n    // Solr's view of the cluster is eventually consistent. *Eventually* all nodes and CloudSolrClients will be aware of\n    // alias changes, but not immediately. If a newly created alias is queried, things should work right away since Solr\n    // will attempt to see if it needs to get the latest aliases when it can't otherwise resolve the name.  However\n    // modifications to an alias will take some time.\n    //\n    // We could levy this requirement on the client but they would probably always add an obligatory sleep, which is\n    // just kicking the can down the road.  Perhaps ideally at this juncture here we could somehow wait until all\n    // Solr nodes in the cluster have the latest aliases?\n    Thread.sleep(100);\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results)\n      throws Exception {\n    String aliasName = message.getStr(NAME);\n    String collections = message.getStr(\"collections\"); // could be comma delimited list\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    validateAllCollectionsExistAndNoDups(collections, zkStateReader);\n\n    zkStateReader.aliasesHolder.applyModificationAndExportToZk(aliases -> aliases.cloneWithCollectionAlias(aliasName, collections));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2f5f46d1d0ebd4c0522e96d55ee60f0b57fbecc","date":1512662150,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results)\n      throws Exception {\n    final String aliasName = message.getStr(NAME);\n    final List<String> canonicalCollectionList = parseCollectionsParameter(message.get(\"collections\"));\n    final String canonicalCollectionsString = StrUtils.join(canonicalCollectionList, ',');\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    validateAllCollectionsExistAndNoDups(canonicalCollectionList, zkStateReader);\n\n    zkStateReader.aliasesHolder.applyModificationAndExportToZk(aliases -> aliases.cloneWithCollectionAlias(aliasName, canonicalCollectionsString));\n\n    // Sleep a bit to allow ZooKeeper state propagation.\n    //\n    // THIS IS A KLUDGE.\n    //\n    // Solr's view of the cluster is eventually consistent. *Eventually* all nodes and CloudSolrClients will be aware of\n    // alias changes, but not immediately. If a newly created alias is queried, things should work right away since Solr\n    // will attempt to see if it needs to get the latest aliases when it can't otherwise resolve the name.  However\n    // modifications to an alias will take some time.\n    //\n    // We could levy this requirement on the client but they would probably always add an obligatory sleep, which is\n    // just kicking the can down the road.  Perhaps ideally at this juncture here we could somehow wait until all\n    // Solr nodes in the cluster have the latest aliases?\n    Thread.sleep(100);\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results)\n      throws Exception {\n    String aliasName = message.getStr(NAME);\n    String collections = message.getStr(\"collections\"); // could be comma delimited list\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    validateAllCollectionsExistAndNoDups(collections, zkStateReader);\n\n    zkStateReader.aliasesHolder.applyModificationAndExportToZk(aliases -> aliases.cloneWithCollectionAlias(aliasName, collections));\n\n    // Sleep a bit to allow ZooKeeper state propagation.\n    //\n    // THIS IS A KLUDGE.\n    //\n    // Solr's view of the cluster is eventually consistent. *Eventually* all nodes and CloudSolrClients will be aware of\n    // alias changes, but not immediately. If a newly created alias is queried, things should work right away since Solr\n    // will attempt to see if it needs to get the latest aliases when it can't otherwise resolve the name.  However\n    // modifications to an alias will take some time.\n    //\n    // We could levy this requirement on the client but they would probably always add an obligatory sleep, which is\n    // just kicking the can down the road.  Perhaps ideally at this juncture here we could somehow wait until all\n    // Solr nodes in the cluster have the latest aliases?\n    Thread.sleep(100);\n  }\n\n","bugFix":["1390137e395d2f07f9ba5b8c43d293befe84d563","6b824daa61db3f30b91a22213d6c04e1fa2e2b06","215e40821821b2df2e69355e208532c05ef095a5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results)\n      throws Exception {\n    final String aliasName = message.getStr(NAME);\n    final List<String> canonicalCollectionList = parseCollectionsParameter(message.get(\"collections\"));\n    final String canonicalCollectionsString = StrUtils.join(canonicalCollectionList, ',');\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    validateAllCollectionsExistAndNoDups(canonicalCollectionList, zkStateReader);\n\n    zkStateReader.aliasesHolder.applyModificationAndExportToZk(aliases -> aliases.cloneWithCollectionAlias(aliasName, canonicalCollectionsString));\n\n    // Sleep a bit to allow ZooKeeper state propagation.\n    //\n    // THIS IS A KLUDGE.\n    //\n    // Solr's view of the cluster is eventually consistent. *Eventually* all nodes and CloudSolrClients will be aware of\n    // alias changes, but not immediately. If a newly created alias is queried, things should work right away since Solr\n    // will attempt to see if it needs to get the latest aliases when it can't otherwise resolve the name.  However\n    // modifications to an alias will take some time.\n    //\n    // We could levy this requirement on the client but they would probably always add an obligatory sleep, which is\n    // just kicking the can down the road.  Perhaps ideally at this juncture here we could somehow wait until all\n    // Solr nodes in the cluster have the latest aliases?\n    Thread.sleep(100);\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results)\n      throws Exception {\n    String aliasName = message.getStr(NAME);\n    String collections = message.getStr(\"collections\"); // could be comma delimited list\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    validateAllCollectionsExistAndNoDups(collections, zkStateReader);\n\n    zkStateReader.aliasesHolder.applyModificationAndExportToZk(aliases -> aliases.cloneWithCollectionAlias(aliasName, collections));\n\n    // Sleep a bit to allow ZooKeeper state propagation.\n    //\n    // THIS IS A KLUDGE.\n    //\n    // Solr's view of the cluster is eventually consistent. *Eventually* all nodes and CloudSolrClients will be aware of\n    // alias changes, but not immediately. If a newly created alias is queried, things should work right away since Solr\n    // will attempt to see if it needs to get the latest aliases when it can't otherwise resolve the name.  However\n    // modifications to an alias will take some time.\n    //\n    // We could levy this requirement on the client but they would probably always add an obligatory sleep, which is\n    // just kicking the can down the road.  Perhaps ideally at this juncture here we could somehow wait until all\n    // Solr nodes in the cluster have the latest aliases?\n    Thread.sleep(100);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results)\n      throws Exception {\n    final String aliasName = message.getStr(NAME);\n    final List<String> canonicalCollectionList = parseCollectionsParameter(message.get(\"collections\"));\n    final String canonicalCollectionsString = StrUtils.join(canonicalCollectionList, ',');\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    validateAllCollectionsExistAndNoDups(canonicalCollectionList, zkStateReader);\n\n    zkStateReader.aliasesHolder.applyModificationAndExportToZk(aliases -> aliases.cloneWithCollectionAlias(aliasName, canonicalCollectionsString));\n\n    // Sleep a bit to allow ZooKeeper state propagation.\n    //\n    // THIS IS A KLUDGE.\n    //\n    // Solr's view of the cluster is eventually consistent. *Eventually* all nodes and CloudSolrClients will be aware of\n    // alias changes, but not immediately. If a newly created alias is queried, things should work right away since Solr\n    // will attempt to see if it needs to get the latest aliases when it can't otherwise resolve the name.  However\n    // modifications to an alias will take some time.\n    //\n    // We could levy this requirement on the client but they would probably always add an obligatory sleep, which is\n    // just kicking the can down the road.  Perhaps ideally at this juncture here we could somehow wait until all\n    // Solr nodes in the cluster have the latest aliases?\n    Thread.sleep(100);\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results)\n      throws Exception {\n    final String aliasName = message.getStr(NAME);\n    final List<String> canonicalCollectionList = parseCollectionsParameter(message.get(\"collections\"));\n    final String canonicalCollectionsString = StrUtils.join(canonicalCollectionList, ',');\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    validateAllCollectionsExistAndNoDups(canonicalCollectionList, zkStateReader);\n\n    zkStateReader.aliasesHolder.applyModificationAndExportToZk(aliases -> aliases.cloneWithCollectionAlias(aliasName, canonicalCollectionsString));\n\n    // Sleep a bit to allow ZooKeeper state propagation.\n    //\n    // THIS IS A KLUDGE.\n    //\n    // Solr's view of the cluster is eventually consistent. *Eventually* all nodes and CloudSolrClients will be aware of\n    // alias changes, but not immediately. If a newly created alias is queried, things should work right away since Solr\n    // will attempt to see if it needs to get the latest aliases when it can't otherwise resolve the name.  However\n    // modifications to an alias will take some time.\n    //\n    // We could levy this requirement on the client but they would probably always add an obligatory sleep, which is\n    // just kicking the can down the road.  Perhaps ideally at this juncture here we could somehow wait until all\n    // Solr nodes in the cluster have the latest aliases?\n    Thread.sleep(100);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results)\n      throws Exception {\n    final String aliasName = message.getStr(NAME);\n    final List<String> canonicalCollectionList = parseCollectionsParameter(message.get(\"collections\"));\n    final String canonicalCollectionsString = StrUtils.join(canonicalCollectionList, ',');\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    validateAllCollectionsExistAndNoDups(canonicalCollectionList, zkStateReader);\n\n    zkStateReader.aliasesHolder.applyModificationAndExportToZk(aliases -> aliases.cloneWithCollectionAlias(aliasName, canonicalCollectionsString));\n\n    // Sleep a bit to allow ZooKeeper state propagation.\n    //\n    // THIS IS A KLUDGE.\n    //\n    // Solr's view of the cluster is eventually consistent. *Eventually* all nodes and CloudSolrClients will be aware of\n    // alias changes, but not immediately. If a newly created alias is queried, things should work right away since Solr\n    // will attempt to see if it needs to get the latest aliases when it can't otherwise resolve the name.  However\n    // modifications to an alias will take some time.\n    //\n    // We could levy this requirement on the client but they would probably always add an obligatory sleep, which is\n    // just kicking the can down the road.  Perhaps ideally at this juncture here we could somehow wait until all\n    // Solr nodes in the cluster have the latest aliases?\n    Thread.sleep(100);\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results)\n      throws Exception {\n    final String aliasName = message.getStr(NAME);\n    final List<String> canonicalCollectionList = parseCollectionsParameter(message.get(\"collections\"));\n    final String canonicalCollectionsString = StrUtils.join(canonicalCollectionList, ',');\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    validateAllCollectionsExistAndNoDups(canonicalCollectionList, zkStateReader);\n\n    zkStateReader.aliasesHolder.applyModificationAndExportToZk(aliases -> aliases.cloneWithCollectionAlias(aliasName, canonicalCollectionsString));\n\n    // Sleep a bit to allow ZooKeeper state propagation.\n    //\n    // THIS IS A KLUDGE.\n    //\n    // Solr's view of the cluster is eventually consistent. *Eventually* all nodes and CloudSolrClients will be aware of\n    // alias changes, but not immediately. If a newly created alias is queried, things should work right away since Solr\n    // will attempt to see if it needs to get the latest aliases when it can't otherwise resolve the name.  However\n    // modifications to an alias will take some time.\n    //\n    // We could levy this requirement on the client but they would probably always add an obligatory sleep, which is\n    // just kicking the can down the road.  Perhaps ideally at this juncture here we could somehow wait until all\n    // Solr nodes in the cluster have the latest aliases?\n    Thread.sleep(100);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["417142ff08fda9cf0b72d5133e63097a166c6458","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"26da72979d4068fce4939aeb5c8e16773874f38c":["215e40821821b2df2e69355e208532c05ef095a5"],"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["af87133b5bdb246b06c4321f36cd76d947357ab6"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"f2f5f46d1d0ebd4c0522e96d55ee60f0b57fbecc":["26da72979d4068fce4939aeb5c8e16773874f38c"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["417142ff08fda9cf0b72d5133e63097a166c6458"],"af87133b5bdb246b06c4321f36cd76d947357ab6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"417142ff08fda9cf0b72d5133e63097a166c6458":["26da72979d4068fce4939aeb5c8e16773874f38c","f2f5f46d1d0ebd4c0522e96d55ee60f0b57fbecc"],"215e40821821b2df2e69355e208532c05ef095a5":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","af87133b5bdb246b06c4321f36cd76d947357ab6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"26da72979d4068fce4939aeb5c8e16773874f38c":["f2f5f46d1d0ebd4c0522e96d55ee60f0b57fbecc","417142ff08fda9cf0b72d5133e63097a166c6458"],"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["215e40821821b2df2e69355e208532c05ef095a5"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["af87133b5bdb246b06c4321f36cd76d947357ab6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f2f5f46d1d0ebd4c0522e96d55ee60f0b57fbecc":["417142ff08fda9cf0b72d5133e63097a166c6458"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"af87133b5bdb246b06c4321f36cd76d947357ab6":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"417142ff08fda9cf0b72d5133e63097a166c6458":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"215e40821821b2df2e69355e208532c05ef095a5":["26da72979d4068fce4939aeb5c8e16773874f38c"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["403d05f7f8d69b65659157eff1bc1d2717f04c66","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}