{"path":"lucene/src/test/org/apache/lucene/index/TestTieredMergePolicy#testExpungeDeletes().mjava","commits":[{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTieredMergePolicy#testExpungeDeletes().mjava","pathOld":"/dev/null","sourceNew":"  public void testExpungeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    TieredMergePolicy tmp = newTieredMergePolicy();\n    conf.setMergePolicy(tmp);\n    conf.setMaxBufferedDocs(4);\n    tmp.setMaxMergeAtOnce(100);\n    tmp.setSegmentsPerTier(100);\n    tmp.setExpungeDeletesPctAllowed(30.0);\n    IndexWriter w = new IndexWriter(dir, conf);\n    w.setInfoStream(VERBOSE ? System.out : null);\n    for(int i=0;i<80;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa \" + (i%4), Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n    }\n    assertEquals(80, w.maxDoc());\n    assertEquals(80, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete docs\");\n    }\n    w.deleteDocuments(new Term(\"content\", \"0\"));\n    w.expungeDeletes();\n\n    assertEquals(80, w.maxDoc());\n    assertEquals(60, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: expunge2\");\n    }\n    tmp.setExpungeDeletesPctAllowed(10.0);\n    w.expungeDeletes();\n    assertEquals(60, w.maxDoc());\n    assertEquals(60, w.numDocs());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTieredMergePolicy#testExpungeDeletes().mjava","pathOld":"/dev/null","sourceNew":"  public void testExpungeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    TieredMergePolicy tmp = newTieredMergePolicy();\n    conf.setMergePolicy(tmp);\n    conf.setMaxBufferedDocs(4);\n    tmp.setMaxMergeAtOnce(100);\n    tmp.setSegmentsPerTier(100);\n    tmp.setExpungeDeletesPctAllowed(30.0);\n    IndexWriter w = new IndexWriter(dir, conf);\n    w.setInfoStream(VERBOSE ? System.out : null);\n    for(int i=0;i<80;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa \" + (i%4), Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n    }\n    assertEquals(80, w.maxDoc());\n    assertEquals(80, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete docs\");\n    }\n    w.deleteDocuments(new Term(\"content\", \"0\"));\n    w.expungeDeletes();\n\n    assertEquals(80, w.maxDoc());\n    assertEquals(60, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: expunge2\");\n    }\n    tmp.setExpungeDeletesPctAllowed(10.0);\n    w.expungeDeletes();\n    assertEquals(60, w.maxDoc());\n    assertEquals(60, w.numDocs());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTieredMergePolicy#testExpungeDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTieredMergePolicy#testExpungeDeletes().mjava","sourceNew":"  public void testExpungeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    TieredMergePolicy tmp = newTieredMergePolicy();\n    conf.setMergePolicy(tmp);\n    conf.setMaxBufferedDocs(4);\n    tmp.setMaxMergeAtOnce(100);\n    tmp.setSegmentsPerTier(100);\n    tmp.setExpungeDeletesPctAllowed(30.0);\n    IndexWriter w = new IndexWriter(dir, conf);\n    w.setInfoStream(VERBOSE ? System.out : null);\n    for(int i=0;i<80;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa \" + (i%4), Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n    }\n    assertEquals(80, w.maxDoc());\n    assertEquals(80, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete docs\");\n    }\n    w.deleteDocuments(new Term(\"content\", \"0\"));\n    w.expungeDeletes();\n\n    assertEquals(80, w.maxDoc());\n    assertEquals(60, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: expunge2\");\n    }\n    tmp.setExpungeDeletesPctAllowed(10.0);\n    w.expungeDeletes();\n    assertEquals(60, w.maxDoc());\n    assertEquals(60, w.numDocs());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testExpungeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    TieredMergePolicy tmp = newTieredMergePolicy();\n    conf.setMergePolicy(tmp);\n    conf.setMaxBufferedDocs(4);\n    tmp.setMaxMergeAtOnce(100);\n    tmp.setSegmentsPerTier(100);\n    tmp.setExpungeDeletesPctAllowed(30.0);\n    IndexWriter w = new IndexWriter(dir, conf);\n    w.setInfoStream(VERBOSE ? System.out : null);\n    for(int i=0;i<80;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa \" + (i%4), Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n    }\n    assertEquals(80, w.maxDoc());\n    assertEquals(80, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete docs\");\n    }\n    w.deleteDocuments(new Term(\"content\", \"0\"));\n    w.expungeDeletes();\n\n    assertEquals(80, w.maxDoc());\n    assertEquals(60, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: expunge2\");\n    }\n    tmp.setExpungeDeletesPctAllowed(10.0);\n    w.expungeDeletes();\n    assertEquals(60, w.maxDoc());\n    assertEquals(60, w.numDocs());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTieredMergePolicy#testExpungeDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTieredMergePolicy#testExpungeDeletes().mjava","sourceNew":"  public void testExpungeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    TieredMergePolicy tmp = newTieredMergePolicy();\n    conf.setMergePolicy(tmp);\n    conf.setMaxBufferedDocs(4);\n    tmp.setMaxMergeAtOnce(100);\n    tmp.setSegmentsPerTier(100);\n    tmp.setExpungeDeletesPctAllowed(30.0);\n    IndexWriter w = new IndexWriter(dir, conf);\n    w.setInfoStream(VERBOSE ? System.out : null);\n    for(int i=0;i<80;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa \" + (i%4), Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n    }\n    assertEquals(80, w.maxDoc());\n    assertEquals(80, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete docs\");\n    }\n    w.deleteDocuments(new Term(\"content\", \"0\"));\n    w.expungeDeletes();\n\n    assertEquals(80, w.maxDoc());\n    assertEquals(60, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: expunge2\");\n    }\n    tmp.setExpungeDeletesPctAllowed(10.0);\n    w.expungeDeletes();\n    assertEquals(60, w.maxDoc());\n    assertEquals(60, w.numDocs());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testExpungeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    TieredMergePolicy tmp = newTieredMergePolicy();\n    conf.setMergePolicy(tmp);\n    conf.setMaxBufferedDocs(4);\n    tmp.setMaxMergeAtOnce(100);\n    tmp.setSegmentsPerTier(100);\n    tmp.setExpungeDeletesPctAllowed(30.0);\n    IndexWriter w = new IndexWriter(dir, conf);\n    w.setInfoStream(VERBOSE ? System.out : null);\n    for(int i=0;i<80;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa \" + (i%4), Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n    }\n    assertEquals(80, w.maxDoc());\n    assertEquals(80, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete docs\");\n    }\n    w.deleteDocuments(new Term(\"content\", \"0\"));\n    w.expungeDeletes();\n\n    assertEquals(80, w.maxDoc());\n    assertEquals(60, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: expunge2\");\n    }\n    tmp.setExpungeDeletesPctAllowed(10.0);\n    w.expungeDeletes();\n    assertEquals(60, w.maxDoc());\n    assertEquals(60, w.numDocs());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTieredMergePolicy#testExpungeDeletes().mjava","pathOld":"/dev/null","sourceNew":"  public void testExpungeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    TieredMergePolicy tmp = newTieredMergePolicy();\n    conf.setMergePolicy(tmp);\n    conf.setMaxBufferedDocs(4);\n    tmp.setMaxMergeAtOnce(100);\n    tmp.setSegmentsPerTier(100);\n    tmp.setExpungeDeletesPctAllowed(30.0);\n    IndexWriter w = new IndexWriter(dir, conf);\n    w.setInfoStream(VERBOSE ? System.out : null);\n    for(int i=0;i<80;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa \" + (i%4), Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n    }\n    assertEquals(80, w.maxDoc());\n    assertEquals(80, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete docs\");\n    }\n    w.deleteDocuments(new Term(\"content\", \"0\"));\n    w.expungeDeletes();\n\n    assertEquals(80, w.maxDoc());\n    assertEquals(60, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: expunge2\");\n    }\n    tmp.setExpungeDeletesPctAllowed(10.0);\n    w.expungeDeletes();\n    assertEquals(60, w.maxDoc());\n    assertEquals(60, w.numDocs());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTieredMergePolicy#testExpungeDeletes().mjava","pathOld":"/dev/null","sourceNew":"  public void testExpungeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    TieredMergePolicy tmp = newTieredMergePolicy();\n    conf.setMergePolicy(tmp);\n    conf.setMaxBufferedDocs(4);\n    tmp.setMaxMergeAtOnce(100);\n    tmp.setSegmentsPerTier(100);\n    tmp.setExpungeDeletesPctAllowed(30.0);\n    IndexWriter w = new IndexWriter(dir, conf);\n    w.setInfoStream(VERBOSE ? System.out : null);\n    for(int i=0;i<80;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa \" + (i%4), Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n    }\n    assertEquals(80, w.maxDoc());\n    assertEquals(80, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete docs\");\n    }\n    w.deleteDocuments(new Term(\"content\", \"0\"));\n    w.expungeDeletes();\n\n    assertEquals(80, w.maxDoc());\n    assertEquals(60, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: expunge2\");\n    }\n    tmp.setExpungeDeletesPctAllowed(10.0);\n    w.expungeDeletes();\n    assertEquals(60, w.maxDoc());\n    assertEquals(60, w.numDocs());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTieredMergePolicy#testExpungeDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTieredMergePolicy#testExpungeDeletes().mjava","sourceNew":"  public void testExpungeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    TieredMergePolicy tmp = newTieredMergePolicy();\n    conf.setMergePolicy(tmp);\n    conf.setMaxBufferedDocs(4);\n    tmp.setMaxMergeAtOnce(100);\n    tmp.setSegmentsPerTier(100);\n    tmp.setExpungeDeletesPctAllowed(30.0);\n    IndexWriter w = new IndexWriter(dir, conf);\n    w.setInfoStream(VERBOSE ? System.out : null);\n    for(int i=0;i<80;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa \" + (i%4), TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n    assertEquals(80, w.maxDoc());\n    assertEquals(80, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete docs\");\n    }\n    w.deleteDocuments(new Term(\"content\", \"0\"));\n    w.expungeDeletes();\n\n    assertEquals(80, w.maxDoc());\n    assertEquals(60, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: expunge2\");\n    }\n    tmp.setExpungeDeletesPctAllowed(10.0);\n    w.expungeDeletes();\n    assertEquals(60, w.maxDoc());\n    assertEquals(60, w.numDocs());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testExpungeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    TieredMergePolicy tmp = newTieredMergePolicy();\n    conf.setMergePolicy(tmp);\n    conf.setMaxBufferedDocs(4);\n    tmp.setMaxMergeAtOnce(100);\n    tmp.setSegmentsPerTier(100);\n    tmp.setExpungeDeletesPctAllowed(30.0);\n    IndexWriter w = new IndexWriter(dir, conf);\n    w.setInfoStream(VERBOSE ? System.out : null);\n    for(int i=0;i<80;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa \" + (i%4), Field.Store.NO, Field.Index.ANALYZED));\n      w.addDocument(doc);\n    }\n    assertEquals(80, w.maxDoc());\n    assertEquals(80, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete docs\");\n    }\n    w.deleteDocuments(new Term(\"content\", \"0\"));\n    w.expungeDeletes();\n\n    assertEquals(80, w.maxDoc());\n    assertEquals(60, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: expunge2\");\n    }\n    tmp.setExpungeDeletesPctAllowed(10.0);\n    w.expungeDeletes();\n    assertEquals(60, w.maxDoc());\n    assertEquals(60, w.numDocs());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTieredMergePolicy#testExpungeDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTieredMergePolicy#testExpungeDeletes().mjava","sourceNew":"  public void testExpungeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    TieredMergePolicy tmp = newTieredMergePolicy();\n    conf.setMergePolicy(tmp);\n    conf.setMaxBufferedDocs(4);\n    tmp.setMaxMergeAtOnce(100);\n    tmp.setSegmentsPerTier(100);\n    tmp.setExpungeDeletesPctAllowed(30.0);\n    IndexWriter w = new IndexWriter(dir, conf);\n    for(int i=0;i<80;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa \" + (i%4), TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n    assertEquals(80, w.maxDoc());\n    assertEquals(80, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete docs\");\n    }\n    w.deleteDocuments(new Term(\"content\", \"0\"));\n    w.expungeDeletes();\n\n    assertEquals(80, w.maxDoc());\n    assertEquals(60, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: expunge2\");\n    }\n    tmp.setExpungeDeletesPctAllowed(10.0);\n    w.expungeDeletes();\n    assertEquals(60, w.maxDoc());\n    assertEquals(60, w.numDocs());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testExpungeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    TieredMergePolicy tmp = newTieredMergePolicy();\n    conf.setMergePolicy(tmp);\n    conf.setMaxBufferedDocs(4);\n    tmp.setMaxMergeAtOnce(100);\n    tmp.setSegmentsPerTier(100);\n    tmp.setExpungeDeletesPctAllowed(30.0);\n    IndexWriter w = new IndexWriter(dir, conf);\n    w.setInfoStream(VERBOSE ? System.out : null);\n    for(int i=0;i<80;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa \" + (i%4), TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n    assertEquals(80, w.maxDoc());\n    assertEquals(80, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete docs\");\n    }\n    w.deleteDocuments(new Term(\"content\", \"0\"));\n    w.expungeDeletes();\n\n    assertEquals(80, w.maxDoc());\n    assertEquals(60, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: expunge2\");\n    }\n    tmp.setExpungeDeletesPctAllowed(10.0);\n    w.expungeDeletes();\n    assertEquals(60, w.maxDoc());\n    assertEquals(60, w.numDocs());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"34ce7c842452c79b12c45a8feb64e4597c7110e8","date":1321637224,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForceMergeDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTieredMergePolicy#testExpungeDeletes().mjava","sourceNew":"  public void testForceMergeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    TieredMergePolicy tmp = newTieredMergePolicy();\n    conf.setMergePolicy(tmp);\n    conf.setMaxBufferedDocs(4);\n    tmp.setMaxMergeAtOnce(100);\n    tmp.setSegmentsPerTier(100);\n    tmp.setForceMergeDeletesPctAllowed(30.0);\n    IndexWriter w = new IndexWriter(dir, conf);\n    for(int i=0;i<80;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa \" + (i%4), TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n    assertEquals(80, w.maxDoc());\n    assertEquals(80, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete docs\");\n    }\n    w.deleteDocuments(new Term(\"content\", \"0\"));\n    w.forceMergeDeletes();\n\n    assertEquals(80, w.maxDoc());\n    assertEquals(60, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: forceMergeDeletes2\");\n    }\n    tmp.setForceMergeDeletesPctAllowed(10.0);\n    w.forceMergeDeletes();\n    assertEquals(60, w.maxDoc());\n    assertEquals(60, w.numDocs());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testExpungeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    TieredMergePolicy tmp = newTieredMergePolicy();\n    conf.setMergePolicy(tmp);\n    conf.setMaxBufferedDocs(4);\n    tmp.setMaxMergeAtOnce(100);\n    tmp.setSegmentsPerTier(100);\n    tmp.setExpungeDeletesPctAllowed(30.0);\n    IndexWriter w = new IndexWriter(dir, conf);\n    for(int i=0;i<80;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa \" + (i%4), TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n    assertEquals(80, w.maxDoc());\n    assertEquals(80, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete docs\");\n    }\n    w.deleteDocuments(new Term(\"content\", \"0\"));\n    w.expungeDeletes();\n\n    assertEquals(80, w.maxDoc());\n    assertEquals(60, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: expunge2\");\n    }\n    tmp.setExpungeDeletesPctAllowed(10.0);\n    w.expungeDeletes();\n    assertEquals(60, w.maxDoc());\n    assertEquals(60, w.numDocs());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["0791b41f65aecff2e75db0c1ebf95d745a5ab1b1"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"01e5948db9a07144112d2f08f28ca2e3cd880348":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"06584e6e98d592b34e1329b384182f368d2025e8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["45669a651c970812a680841b97a77cce06af559f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"45669a651c970812a680841b97a77cce06af559f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","01e5948db9a07144112d2f08f28ca2e3cd880348"],"34ce7c842452c79b12c45a8feb64e4597c7110e8":["06584e6e98d592b34e1329b384182f368d2025e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["34ce7c842452c79b12c45a8feb64e4597c7110e8"]},"commit2Childs":{"01e5948db9a07144112d2f08f28ca2e3cd880348":["f2c5f0cb44df114db4228c8f77861714b5cabaea","45669a651c970812a680841b97a77cce06af559f"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"06584e6e98d592b34e1329b384182f368d2025e8":["34ce7c842452c79b12c45a8feb64e4597c7110e8"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["01e5948db9a07144112d2f08f28ca2e3cd880348","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"962d04139994fce5193143ef35615499a9a96d78":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["06584e6e98d592b34e1329b384182f368d2025e8"],"45669a651c970812a680841b97a77cce06af559f":["962d04139994fce5193143ef35615499a9a96d78"],"34ce7c842452c79b12c45a8feb64e4597c7110e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}