{"path":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#setupSolrCluster(int,int,int).mjava","commits":[{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#setupSolrCluster(int,int,int).mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#setupSolrCluster(int,int,int,int).mjava","sourceNew":"  private void setupSolrCluster(int numShards, int numReplicas, int numServers) throws Exception {\n    JettyConfig jc = buildJettyConfig(\"/solr\");\n    jc = JettyConfig.builder(jc).withServlets(extraServlets).build();\n    solrCluster = new MiniSolrCloudCluster(numServers, tmpSolrHome.toPath(), jc);\n    File configDir = tmpSolrHome.toPath().resolve(\"collection1/conf\").toFile();\n    solrCluster.uploadConfigSet(configDir.toPath(), \"conf1\");\n\n    solrCluster.getSolrClient().setDefaultCollection(COLLECTION);\n\n    createCollection(COLLECTION, \"conf1\", numShards, numReplicas);\n    indexDocuments(COLLECTION);\n    for (JettySolrRunner solrRunner : solrCluster.getJettySolrRunners()) {\n      if (!solrRunner.getCoreContainer().getCores().isEmpty()){\n        String coreName = solrRunner.getCoreContainer().getCores().iterator().next().getName();\n        restTestHarness = new RestTestHarness(() -> solrRunner.getBaseUrl().toString() + \"/\" + coreName);\n        break;\n      }\n    }\n    loadModelsAndFeatures();\n  }\n\n","sourceOld":"  private void setupSolrCluster(int numShards, int numReplicas, int numServers, int maxShardsPerNode) throws Exception {\n    JettyConfig jc = buildJettyConfig(\"/solr\");\n    jc = JettyConfig.builder(jc).withServlets(extraServlets).build();\n    solrCluster = new MiniSolrCloudCluster(numServers, tmpSolrHome.toPath(), jc);\n    File configDir = tmpSolrHome.toPath().resolve(\"collection1/conf\").toFile();\n    solrCluster.uploadConfigSet(configDir.toPath(), \"conf1\");\n\n    solrCluster.getSolrClient().setDefaultCollection(COLLECTION);\n\n    createCollection(COLLECTION, \"conf1\", numShards, numReplicas, maxShardsPerNode);\n    indexDocuments(COLLECTION);\n    for (JettySolrRunner solrRunner : solrCluster.getJettySolrRunners()) {\n      if (!solrRunner.getCoreContainer().getCores().isEmpty()){\n        String coreName = solrRunner.getCoreContainer().getCores().iterator().next().getName();\n        restTestHarness = new RestTestHarness(() -> solrRunner.getBaseUrl().toString() + \"/\" + coreName);\n        break;\n      }\n    }\n    loadModelsAndFeatures();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}