{"path":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = (SolrSpellChecker) loader.newInstance(className);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.warn(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion)\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = (SolrSpellChecker) loader.newInstance(className);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.warn(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion)\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = (SolrSpellChecker) loader.newInstance(className);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.warn(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion)\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = (SolrSpellChecker) loader.newInstance(className);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.warn(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion)\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = (SolrSpellChecker) loader.newInstance(className);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.warn(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion)\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = (SolrSpellChecker) loader.newInstance(className);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.warn(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion)\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6133e5d5a3f75167f8c5580d5c45c55876f15075","date":1312804503,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          // TODO: this is a little bit sneaky: warn if class isnt supplied\n          // so that its mandatory in a future release?\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = (SolrSpellChecker) loader.newInstance(className);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.warn(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion)\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = (SolrSpellChecker) loader.newInstance(className);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.warn(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion)\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a5469a71486c4c1e313c7fcb08188d7111195c2","date":1333407337,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          // TODO: this is a little bit sneaky: warn if class isnt supplied\n          // so that its mandatory in a future release?\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = (SolrSpellChecker) loader.newInstance(className);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.info(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion)\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          // TODO: this is a little bit sneaky: warn if class isnt supplied\n          // so that its mandatory in a future release?\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = (SolrSpellChecker) loader.newInstance(className);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.warn(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion)\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["920f2ffa4bb284c0da3b90ae24b15222b3b922cb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41","date":1334628185,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          // TODO: this is a little bit sneaky: warn if class isnt supplied\n          // so that its mandatory in a future release?\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = loader.newInstance(className, SolrSpellChecker.class);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.info(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion)\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          // TODO: this is a little bit sneaky: warn if class isnt supplied\n          // so that its mandatory in a future release?\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = (SolrSpellChecker) loader.newInstance(className);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.info(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion)\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          // TODO: this is a little bit sneaky: warn if class isnt supplied\n          // so that its mandatory in a future release?\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = loader.newInstance(className, SolrSpellChecker.class);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.info(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion)\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          // TODO: this is a little bit sneaky: warn if class isnt supplied\n          // so that its mandatory in a future release?\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = loader.newInstance(className, SolrSpellChecker.class);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.info(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion)\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          // TODO: this is a little bit sneaky: warn if class isnt supplied\n          // so that its mandatory in a future release?\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = loader.newInstance(className, SolrSpellChecker.class);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.info(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion)\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          // TODO: this is a little bit sneaky: warn if class isnt supplied\n          // so that its mandatory in a future release?\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = loader.newInstance(className, SolrSpellChecker.class);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.info(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion)\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          // TODO: this is a little bit sneaky: warn if class isnt supplied\n          // so that its mandatory in a future release?\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = loader.newInstance(className, SolrSpellChecker.class);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.info(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getLatestSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion)\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          // TODO: this is a little bit sneaky: warn if class isnt supplied\n          // so that its mandatory in a future release?\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = loader.newInstance(className, SolrSpellChecker.class);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.info(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion)\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          // TODO: this is a little bit sneaky: warn if class isnt supplied\n          // so that its mandatory in a future release?\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = loader.newInstance(className, SolrSpellChecker.class);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.info(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getLatestSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion)\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          // TODO: this is a little bit sneaky: warn if class isnt supplied\n          // so that its mandatory in a future release?\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = loader.newInstance(className, SolrSpellChecker.class);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<String, QueryConverter>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.info(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getLatestSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion)\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          // TODO: this is a little bit sneaky: warn if class isnt supplied\n          // so that its mandatory in a future release?\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = loader.newInstance(className, SolrSpellChecker.class);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.info(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getLatestSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          // TODO: this is a little bit sneaky: warn if class isnt supplied\n          // so that its mandatory in a future release?\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = loader.newInstance(className, SolrSpellChecker.class);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.info(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getLatestSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion)\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          // TODO: this is a little bit sneaky: warn if class isnt supplied\n          // so that its mandatory in a future release?\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = loader.newInstance(className, SolrSpellChecker.class);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.info(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getLatestSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion)\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          // TODO: this is a little bit sneaky: warn if class isnt supplied\n          // so that its mandatory in a future release?\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = loader.newInstance(className, SolrSpellChecker.class);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.info(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getLatestSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          // TODO: this is a little bit sneaky: warn if class isnt supplied\n          // so that its mandatory in a future release?\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = loader.newInstance(className, SolrSpellChecker.class);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.info(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getLatestSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          // TODO: this is a little bit sneaky: warn if class isnt supplied\n          // so that its mandatory in a future release?\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = loader.newInstance(className, SolrSpellChecker.class);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.info(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getLatestSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion)\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          // TODO: this is a little bit sneaky: warn if class isnt supplied\n          // so that it's mandatory in a future release?\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = loader.newInstance(className, SolrSpellChecker.class);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.info(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getLatestSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          // TODO: this is a little bit sneaky: warn if class isnt supplied\n          // so that its mandatory in a future release?\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = loader.newInstance(className, SolrSpellChecker.class);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.info(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getLatestSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ba46b57f67b4eb7246bdc86cfdeb15b78306b90","date":1443533495,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          Object cfg = initParams.getVal(i);\n          if (cfg instanceof NamedList) {\n            addSpellChecker(core, hasDefault, (NamedList) cfg);\n          } else if (cfg instanceof Map) {\n            System.out.println(\"##mapspellchecker\");//todo nocommit\n            addSpellChecker(core, hasDefault, new NamedList((Map) cfg));\n          } else if (cfg instanceof List) {\n            for (Object o : (List) cfg) {\n              if (o instanceof Map) {\n                addSpellChecker(core, hasDefault, new NamedList((Map) o));\n              }\n            }\n          }\n        }\n      }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.info(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getLatestSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          NamedList spellchecker = (NamedList) initParams.getVal(i);\n          String className = (String) spellchecker.get(\"classname\");\n          // TODO: this is a little bit sneaky: warn if class isnt supplied\n          // so that it's mandatory in a future release?\n          if (className == null)\n            className = IndexBasedSpellChecker.class.getName();\n          SolrResourceLoader loader = core.getResourceLoader();\n          SolrSpellChecker checker = loader.newInstance(className, SolrSpellChecker.class);\n          if (checker != null) {\n            String dictionary = checker.init(spellchecker, core);\n            if (dictionary != null) {\n              boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n              if (isDefault == true && hasDefault == false){\n                hasDefault = true;\n              } else if (isDefault == true && hasDefault == true){\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n              spellCheckers.put(dictionary, checker);\n            } else {\n              if (hasDefault == false){\n                spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n                hasDefault = true;\n              } else {\n                throw new RuntimeException(\"More than one dictionary is missing name.\");\n              }\n            }\n            // Register event listeners for this SpellChecker\n            core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n            boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n            boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n            if (buildOnCommit || buildOnOptimize)   {\n              LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n              core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n            }\n          } else {\n            throw new RuntimeException(\"Can't load spell checker: \" + className);\n          }\n        }\n     }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.info(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getLatestSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["ce3bd29b9ff809a3e130ac30d5b1974d1f2bf94d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ce3bd29b9ff809a3e130ac30d5b1974d1f2bf94d","date":1443533611,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          Object cfg = initParams.getVal(i);\n          if (cfg instanceof NamedList) {\n            addSpellChecker(core, hasDefault, (NamedList) cfg);\n          } else if (cfg instanceof Map) {\n            addSpellChecker(core, hasDefault, new NamedList((Map) cfg));\n          } else if (cfg instanceof List) {\n            for (Object o : (List) cfg) {\n              if (o instanceof Map) {\n                addSpellChecker(core, hasDefault, new NamedList((Map) o));\n              }\n            }\n          }\n        }\n      }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.info(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getLatestSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          Object cfg = initParams.getVal(i);\n          if (cfg instanceof NamedList) {\n            addSpellChecker(core, hasDefault, (NamedList) cfg);\n          } else if (cfg instanceof Map) {\n            System.out.println(\"##mapspellchecker\");//todo nocommit\n            addSpellChecker(core, hasDefault, new NamedList((Map) cfg));\n          } else if (cfg instanceof List) {\n            for (Object o : (List) cfg) {\n              if (o instanceof Map) {\n                addSpellChecker(core, hasDefault, new NamedList((Map) o));\n              }\n            }\n          }\n        }\n      }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.info(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getLatestSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","bugFix":["5ba46b57f67b4eb7246bdc86cfdeb15b78306b90"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"920f2ffa4bb284c0da3b90ae24b15222b3b922cb","date":1475485505,"type":3,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          Object cfg = initParams.getVal(i);\n          if (cfg instanceof NamedList) {\n            addSpellChecker(core, hasDefault, (NamedList) cfg);\n          } else if (cfg instanceof Map) {\n            addSpellChecker(core, hasDefault, new NamedList((Map) cfg));\n          } else if (cfg instanceof List) {\n            for (Object o : (List) cfg) {\n              if (o instanceof Map) {\n                addSpellChecker(core, hasDefault, new NamedList((Map) o));\n              }\n            }\n          }\n        }\n      }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.trace(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getLatestSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          Object cfg = initParams.getVal(i);\n          if (cfg instanceof NamedList) {\n            addSpellChecker(core, hasDefault, (NamedList) cfg);\n          } else if (cfg instanceof Map) {\n            addSpellChecker(core, hasDefault, new NamedList((Map) cfg));\n          } else if (cfg instanceof List) {\n            for (Object o : (List) cfg) {\n              if (o instanceof Map) {\n                addSpellChecker(core, hasDefault, new NamedList((Map) o));\n              }\n            }\n          }\n        }\n      }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.info(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getLatestSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","bugFix":["4a5469a71486c4c1e313c7fcb08188d7111195c2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"983d291ee2bfe37c4da242344f285eec568af2d0","date":1475520532,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          Object cfg = initParams.getVal(i);\n          if (cfg instanceof NamedList) {\n            addSpellChecker(core, hasDefault, (NamedList) cfg);\n          } else if (cfg instanceof Map) {\n            addSpellChecker(core, hasDefault, new NamedList((Map) cfg));\n          } else if (cfg instanceof List) {\n            for (Object o : (List) cfg) {\n              if (o instanceof Map) {\n                addSpellChecker(core, hasDefault, new NamedList((Map) o));\n              }\n            }\n          }\n        }\n      }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.trace(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getLatestSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          Object cfg = initParams.getVal(i);\n          if (cfg instanceof NamedList) {\n            addSpellChecker(core, hasDefault, (NamedList) cfg);\n          } else if (cfg instanceof Map) {\n            addSpellChecker(core, hasDefault, new NamedList((Map) cfg));\n          } else if (cfg instanceof List) {\n            for (Object o : (List) cfg) {\n              if (o instanceof Map) {\n                addSpellChecker(core, hasDefault, new NamedList((Map) o));\n              }\n            }\n          }\n        }\n      }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.info(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getLatestSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          Object cfg = initParams.getVal(i);\n          if (cfg instanceof NamedList) {\n            addSpellChecker(core, hasDefault, (NamedList) cfg);\n          } else if (cfg instanceof Map) {\n            addSpellChecker(core, hasDefault, new NamedList((Map) cfg));\n          } else if (cfg instanceof List) {\n            for (Object o : (List) cfg) {\n              if (o instanceof Map) {\n                addSpellChecker(core, hasDefault, new NamedList((Map) o));\n              }\n            }\n          }\n        }\n      }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.trace(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getLatestSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          Object cfg = initParams.getVal(i);\n          if (cfg instanceof NamedList) {\n            addSpellChecker(core, hasDefault, (NamedList) cfg);\n          } else if (cfg instanceof Map) {\n            addSpellChecker(core, hasDefault, new NamedList((Map) cfg));\n          } else if (cfg instanceof List) {\n            for (Object o : (List) cfg) {\n              if (o instanceof Map) {\n                addSpellChecker(core, hasDefault, new NamedList((Map) o));\n              }\n            }\n          }\n        }\n      }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.info(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getLatestSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      log.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          Object cfg = initParams.getVal(i);\n          if (cfg instanceof NamedList) {\n            addSpellChecker(core, hasDefault, (NamedList) cfg);\n          } else if (cfg instanceof Map) {\n            addSpellChecker(core, hasDefault, new NamedList((Map) cfg));\n          } else if (cfg instanceof List) {\n            for (Object o : (List) cfg) {\n              if (o instanceof Map) {\n                addSpellChecker(core, hasDefault, new NamedList((Map) o));\n              }\n            }\n          }\n        }\n      }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        log.trace(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getLatestSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      LOG.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          Object cfg = initParams.getVal(i);\n          if (cfg instanceof NamedList) {\n            addSpellChecker(core, hasDefault, (NamedList) cfg);\n          } else if (cfg instanceof Map) {\n            addSpellChecker(core, hasDefault, new NamedList((Map) cfg));\n          } else if (cfg instanceof List) {\n            for (Object o : (List) cfg) {\n              if (o instanceof Map) {\n                addSpellChecker(core, hasDefault, new NamedList((Map) o));\n              }\n            }\n          }\n        }\n      }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        LOG.trace(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getLatestSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      log.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          Object cfg = initParams.getVal(i);\n          if (cfg instanceof NamedList) {\n            addSpellChecker(core, hasDefault, (NamedList) cfg);\n          } else if (cfg instanceof Map) {\n            addSpellChecker(core, hasDefault, new NamedList((Map) cfg));\n          } else if (cfg instanceof List) {\n            for (Object o : (List) cfg) {\n              if (o instanceof Map) {\n                addSpellChecker(core, hasDefault, new NamedList((Map) o));\n              }\n            }\n          }\n        }\n      }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        log.trace(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getLatestSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    if (initParams != null) {\n      log.info(\"Initializing spell checkers\");\n      boolean hasDefault = false;\n      for (int i = 0; i < initParams.size(); i++) {\n        if (initParams.getName(i).equals(\"spellchecker\")) {\n          Object cfg = initParams.getVal(i);\n          if (cfg instanceof NamedList) {\n            addSpellChecker(core, hasDefault, (NamedList) cfg);\n          } else if (cfg instanceof Map) {\n            addSpellChecker(core, hasDefault, new NamedList((Map) cfg));\n          } else if (cfg instanceof List) {\n            for (Object o : (List) cfg) {\n              if (o instanceof Map) {\n                addSpellChecker(core, hasDefault, new NamedList((Map) o));\n              }\n            }\n          }\n        }\n      }\n\n      Map<String, QueryConverter> queryConverters = new HashMap<>();\n      core.initPlugins(queryConverters,QueryConverter.class);\n\n      //ensure that there is at least one query converter defined\n      if (queryConverters.size() == 0) {\n        log.trace(\"No queryConverter defined, using default converter\");\n        queryConverters.put(\"queryConverter\", new SpellingQueryConverter());\n      }\n\n      //there should only be one\n      if (queryConverters.size() == 1) {\n        queryConverter = queryConverters.values().iterator().next();\n        IndexSchema schema = core.getLatestSchema();\n        String fieldTypeName = (String) initParams.get(\"queryAnalyzerFieldType\");\n        FieldType fieldType = schema.getFieldTypes().get(fieldTypeName);\n        Analyzer analyzer = fieldType == null ? new WhitespaceAnalyzer()\n                : fieldType.getQueryAnalyzer();\n        //TODO: There's got to be a better way!  Where's Spring when you need it?\n        queryConverter.setAnalyzer(analyzer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41","7530de27b87b961b51f01bd1299b7004d46e8823"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["08970e5b8411182a29412c177eff67ec1110095b"],"6133e5d5a3f75167f8c5580d5c45c55876f15075":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"5ba46b57f67b4eb7246bdc86cfdeb15b78306b90":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"983d291ee2bfe37c4da242344f285eec568af2d0":["ce3bd29b9ff809a3e130ac30d5b1974d1f2bf94d","920f2ffa4bb284c0da3b90ae24b15222b3b922cb"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ce3bd29b9ff809a3e130ac30d5b1974d1f2bf94d","983d291ee2bfe37c4da242344f285eec568af2d0"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"08970e5b8411182a29412c177eff67ec1110095b":["7530de27b87b961b51f01bd1299b7004d46e8823"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"920f2ffa4bb284c0da3b90ae24b15222b3b922cb":["ce3bd29b9ff809a3e130ac30d5b1974d1f2bf94d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4a5469a71486c4c1e313c7fcb08188d7111195c2":["6133e5d5a3f75167f8c5580d5c45c55876f15075"],"ce3bd29b9ff809a3e130ac30d5b1974d1f2bf94d":["5ba46b57f67b4eb7246bdc86cfdeb15b78306b90"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["4a5469a71486c4c1e313c7fcb08188d7111195c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"7530de27b87b961b51f01bd1299b7004d46e8823":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["983d291ee2bfe37c4da242344f285eec568af2d0"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"6133e5d5a3f75167f8c5580d5c45c55876f15075":["4a5469a71486c4c1e313c7fcb08188d7111195c2"],"c26f00b574427b55127e869b935845554afde1fa":["6133e5d5a3f75167f8c5580d5c45c55876f15075"],"5ba46b57f67b4eb7246bdc86cfdeb15b78306b90":["ce3bd29b9ff809a3e130ac30d5b1974d1f2bf94d"],"983d291ee2bfe37c4da242344f285eec568af2d0":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"08970e5b8411182a29412c177eff67ec1110095b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["5ba46b57f67b4eb7246bdc86cfdeb15b78306b90"],"920f2ffa4bb284c0da3b90ae24b15222b3b922cb":["983d291ee2bfe37c4da242344f285eec568af2d0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"4a5469a71486c4c1e313c7fcb08188d7111195c2":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"ce3bd29b9ff809a3e130ac30d5b1974d1f2bf94d":["983d291ee2bfe37c4da242344f285eec568af2d0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","920f2ffa4bb284c0da3b90ae24b15222b3b922cb"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","08970e5b8411182a29412c177eff67ec1110095b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}