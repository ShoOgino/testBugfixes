{"path":"solr/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = new CacheRegenerator() {\n      public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache,\n                                    SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n        newCache.put(oldKey, oldVal);\n        return true;\n      }\n    };\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    NamedList nl = sc.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","sourceNew":null,"sourceOld":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = new CacheRegenerator() {\n      public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache,\n                                    SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n        newCache.put(oldKey, oldVal);\n        return true;\n      }\n    };\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    NamedList nl = sc.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","pathOld":"src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","sourceNew":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = new CacheRegenerator() {\n      public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache,\n                                    SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n        newCache.put(oldKey, oldVal);\n        return true;\n      }\n    };\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    NamedList nl = sc.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","sourceOld":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = new CacheRegenerator() {\n      public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache,\n                                    SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n        newCache.put(oldKey, oldVal);\n        return true;\n      }\n    };\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    NamedList nl = sc.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = new CacheRegenerator() {\n      public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache,\n                                    SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n        newCache.put(oldKey, oldVal);\n        return true;\n      }\n    };\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    NamedList nl = sc.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b870d11eae2250e41b4ed48d248bc043cbbd7711","date":1272408055,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","sourceNew":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    NamedList nl = sc.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","sourceOld":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = new CacheRegenerator() {\n      public boolean regenerateItem(SolrIndexSearcher newSearcher, SolrCache newCache,\n                                    SolrCache oldCache, Object oldKey, Object oldVal) throws IOException {\n        newCache.put(oldKey, oldVal);\n        return true;\n      }\n    };\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    NamedList nl = sc.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","sourceNew":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    NamedList nl = sc.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","sourceOld":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    NamedList nl = sc.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","sourceNew":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    NamedList nl = sc.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","sourceOld":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    NamedList nl = sc.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","sourceNew":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    NamedList nl = sc.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","sourceOld":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    NamedList nl = sc.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["b870d11eae2250e41b4ed48d248bc043cbbd7711"],"c26f00b574427b55127e869b935845554afde1fa":["b870d11eae2250e41b4ed48d248bc043cbbd7711","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"b870d11eae2250e41b4ed48d248bc043cbbd7711":["1da8d55113b689b06716246649de6f62430f15c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["b870d11eae2250e41b4ed48d248bc043cbbd7711"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["b870d11eae2250e41b4ed48d248bc043cbbd7711"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"b870d11eae2250e41b4ed48d248bc043cbbd7711":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}