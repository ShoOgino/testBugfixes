{"path":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","commits":[{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#testExpandedCloseToRoot().mjava","sourceNew":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copy(w);\n          b.add(term, nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (fst.targetHasArcs(arc)) {\n          int childCount = 0;\n          for (arc = fst.readFirstTargetArc(arc, arc);; \n               arc = fst.readNextArc(arc), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc);\n            int children = verifyStateAndBelow(fst, new FST.Arc<Object>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<String>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<Object>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","sourceOld":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copy(w);\n          b.add(term, nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (fst.targetHasArcs(arc)) {\n          int childCount = 0;\n          for (arc = fst.readFirstTargetArc(arc, arc);; \n               arc = fst.readNextArc(arc), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc);\n            int children = verifyStateAndBelow(fst, new FST.Arc<Object>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<String>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<Object>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#testExpandedCloseToRoot().mjava","sourceNew":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copy(w);\n          b.add(term, nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (fst.targetHasArcs(arc)) {\n          int childCount = 0;\n          for (arc = fst.readFirstTargetArc(arc, arc);; \n               arc = fst.readNextArc(arc), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc);\n            int children = verifyStateAndBelow(fst, new FST.Arc<Object>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<String>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<Object>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","sourceOld":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copy(w);\n          b.add(term, nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (fst.targetHasArcs(arc)) {\n          int childCount = 0;\n          for (arc = fst.readFirstTargetArc(arc, arc);; \n               arc = fst.readNextArc(arc), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc);\n            int children = verifyStateAndBelow(fst, new FST.Arc<Object>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<String>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<Object>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#testExpandedCloseToRoot().mjava","sourceNew":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copy(w);\n          b.add(term, nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (fst.targetHasArcs(arc)) {\n          int childCount = 0;\n          for (arc = fst.readFirstTargetArc(arc, arc);; \n               arc = fst.readNextArc(arc), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc);\n            int children = verifyStateAndBelow(fst, new FST.Arc<Object>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<String>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<Object>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","sourceOld":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copy(w);\n          b.add(term, nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (fst.targetHasArcs(arc)) {\n          int childCount = 0;\n          for (arc = fst.readFirstTargetArc(arc, arc);; \n               arc = fst.readNextArc(arc), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc);\n            int children = verifyStateAndBelow(fst, new FST.Arc<Object>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<String>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<Object>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f2bf10c11daad40c1e46fabd0d414c19a3e605b","date":1310410393,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","sourceNew":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copy(w);\n          b.add(term, nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (fst.targetHasArcs(arc)) {\n          int childCount = 0;\n          for (arc = fst.readFirstTargetArc(arc, arc);; \n               arc = fst.readNextArc(arc), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc);\n            int children = verifyStateAndBelow(fst, new FST.Arc<Object>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<String>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<Object>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","sourceOld":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copy(w);\n          b.add(term, nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (fst.targetHasArcs(arc)) {\n          int childCount = 0;\n          for (arc = fst.readFirstTargetArc(arc, arc);; \n               arc = fst.readNextArc(arc), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc);\n            int children = verifyStateAndBelow(fst, new FST.Arc<Object>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<String>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<Object>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e6e919043fa85ee891123768dd655a98edbbf63c","date":1322225413,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","sourceNew":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(term, nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (fst.targetHasArcs(arc)) {\n          int childCount = 0;\n          for (arc = fst.readFirstTargetArc(arc, arc);; \n               arc = fst.readNextArc(arc), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc);\n            int children = verifyStateAndBelow(fst, new FST.Arc<Object>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<String>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<Object>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","sourceOld":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copy(w);\n          b.add(term, nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (fst.targetHasArcs(arc)) {\n          int childCount = 0;\n          for (arc = fst.readFirstTargetArc(arc, arc);; \n               arc = fst.readNextArc(arc), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc);\n            int children = verifyStateAndBelow(fst, new FST.Arc<Object>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<String>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<Object>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ec890fad2ea96317f4429e0aa0085bb25673641","date":1326669938,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","sourceNew":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        final IntsRef scratchIntsRef = new IntsRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(Util.toIntsRef(term, scratchIntsRef), nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (fst.targetHasArcs(arc)) {\n          int childCount = 0;\n          for (arc = fst.readFirstTargetArc(arc, arc);; \n               arc = fst.readNextArc(arc), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc);\n            int children = verifyStateAndBelow(fst, new FST.Arc<Object>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<String>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<Object>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","sourceOld":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(term, nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (fst.targetHasArcs(arc)) {\n          int childCount = 0;\n          for (arc = fst.readFirstTargetArc(arc, arc);; \n               arc = fst.readNextArc(arc), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc);\n            int children = verifyStateAndBelow(fst, new FST.Arc<Object>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<String>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<Object>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","bugFix":["66a31a416e3550794ff2e245570885b7193952b6"],"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testExpandedCloseToRoot().mjava","sourceNew":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        final IntsRef scratchIntsRef = new IntsRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(Util.toIntsRef(term, scratchIntsRef), nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (fst.targetHasArcs(arc)) {\n          int childCount = 0;\n          for (arc = fst.readFirstTargetArc(arc, arc);; \n               arc = fst.readNextArc(arc), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc);\n            int children = verifyStateAndBelow(fst, new FST.Arc<Object>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<String>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<Object>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","sourceOld":"  /**\n   * Test state expansion (array format) on close-to-root states. Creates\n   * synthetic input that has one expanded state on each level.\n   * \n   * @see \"https://issues.apache.org/jira/browse/LUCENE-2933\" \n   */\n  public void testExpandedCloseToRoot() throws Exception {\n    class SyntheticData {\n      FST<Object> compile(String[] lines) throws IOException {\n        final NoOutputs outputs = NoOutputs.getSingleton();\n        final Object nothing = outputs.getNoOutput();\n        final Builder<Object> b = new Builder<Object>(FST.INPUT_TYPE.BYTE1, outputs);\n\n        int line = 0;\n        final BytesRef term = new BytesRef();\n        final IntsRef scratchIntsRef = new IntsRef();\n        while (line < lines.length) {\n          String w = lines[line++];\n          if (w == null) {\n            break;\n          }\n          term.copyChars(w);\n          b.add(Util.toIntsRef(term, scratchIntsRef), nothing);\n        }\n        \n        return b.finish();\n      }\n      \n      void generate(ArrayList<String> out, StringBuilder b, char from, char to,\n          int depth) {\n        if (depth == 0 || from == to) {\n          String seq = b.toString() + \"_\" + out.size() + \"_end\";\n          out.add(seq);\n        } else {\n          for (char c = from; c <= to; c++) {\n            b.append(c);\n            generate(out, b, from, c == to ? to : from, depth - 1);\n            b.deleteCharAt(b.length() - 1);\n          }\n        }\n      }\n\n      public int verifyStateAndBelow(FST<Object> fst, Arc<Object> arc, int depth) \n        throws IOException {\n        if (fst.targetHasArcs(arc)) {\n          int childCount = 0;\n          for (arc = fst.readFirstTargetArc(arc, arc);; \n               arc = fst.readNextArc(arc), childCount++)\n          {\n            boolean expanded = fst.isExpandedTarget(arc);\n            int children = verifyStateAndBelow(fst, new FST.Arc<Object>().copyFrom(arc), depth + 1);\n\n            assertEquals(\n                expanded,\n                (depth <= FST.FIXED_ARRAY_SHALLOW_DISTANCE && \n                    children >= FST.FIXED_ARRAY_NUM_ARCS_SHALLOW) ||\n                 children >= FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n            if (arc.isLast()) break;\n          }\n\n          return childCount;\n        }\n        return 0;\n      }\n    }\n\n    // Sanity check.\n    assertTrue(FST.FIXED_ARRAY_NUM_ARCS_SHALLOW < FST.FIXED_ARRAY_NUM_ARCS_DEEP);\n    assertTrue(FST.FIXED_ARRAY_SHALLOW_DISTANCE >= 0);\n\n    SyntheticData s = new SyntheticData();\n\n    ArrayList<String> out = new ArrayList<String>();\n    StringBuilder b = new StringBuilder();\n    s.generate(out, b, 'a', 'i', 10);\n    String[] input = out.toArray(new String[out.size()]);\n    Arrays.sort(input);\n    FST<Object> fst = s.compile(input);\n    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<Object>());\n    s.verifyStateAndBelow(fst, arc, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ec890fad2ea96317f4429e0aa0085bb25673641"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4f2bf10c11daad40c1e46fabd0d414c19a3e605b":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"e6e919043fa85ee891123768dd655a98edbbf63c":["4f2bf10c11daad40c1e46fabd0d414c19a3e605b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1ec890fad2ea96317f4429e0aa0085bb25673641":["e6e919043fa85ee891123768dd655a98edbbf63c"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","4f2bf10c11daad40c1e46fabd0d414c19a3e605b","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"4f2bf10c11daad40c1e46fabd0d414c19a3e605b":["e6e919043fa85ee891123768dd655a98edbbf63c"],"e6e919043fa85ee891123768dd655a98edbbf63c":["1ec890fad2ea96317f4429e0aa0085bb25673641"],"1ec890fad2ea96317f4429e0aa0085bb25673641":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}