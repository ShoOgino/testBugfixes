{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene410/TestLucene410DocValuesFormat#assertEquals(long,TermsEnum,TermsEnum).mjava","commits":[{"id":"d6a3823714ed5de938fb4f3fc814824fe0f95e1a","date":1413422458,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene410/TestLucene410DocValuesFormat#assertEquals(long,TermsEnum,TermsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene410/TestLucene410DocValuesFormat#assertEquals(long,TermsEnum,TermsEnum).mjava","sourceNew":"  private void assertEquals(long numOrds, TermsEnum expected, TermsEnum actual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = expected.next()) != null) {\n      assertEquals(ref, actual.next());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(actual.next());\n    \n    // sequential seekExact(ord) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      actual.seekExact(i);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(ord)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(randomOrd);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = expected.seekCeil(target);\n      assertEquals(expectedStatus, actual.seekCeil(target));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.ord(), actual.ord());\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(long numOrds, TermsEnum expected, TermsEnum actual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = expected.next()) != null) {\n      assertEquals(ref, actual.next());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(actual.next());\n    \n    // sequential seekExact(ord) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      actual.seekExact(i);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(ord)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(randomOrd);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = expected.seekCeil(target);\n      assertEquals(expectedStatus, actual.seekCeil(target));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.ord(), actual.ord());\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene410/TestLucene410DocValuesFormat#assertEquals(long,TermsEnum,TermsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene410/TestLucene410DocValuesFormat#assertEquals(long,TermsEnum,TermsEnum).mjava","sourceNew":"  private void assertEquals(long numOrds, TermsEnum expected, TermsEnum actual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = expected.next()) != null) {\n      assertEquals(ref, actual.next());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(actual.next());\n    \n    // sequential seekExact(ord) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      actual.seekExact(i);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(ord)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(randomOrd);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = expected.seekCeil(target);\n      assertEquals(expectedStatus, actual.seekCeil(target));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.ord(), actual.ord());\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(long numOrds, TermsEnum expected, TermsEnum actual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = expected.next()) != null) {\n      assertEquals(ref, actual.next());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(actual.next());\n    \n    // sequential seekExact(ord) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      actual.seekExact(i);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(ord)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(randomOrd);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = expected.seekCeil(target);\n      assertEquals(expectedStatus, actual.seekCeil(target));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.ord(), actual.ord());\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene410/TestLucene410DocValuesFormat#assertEquals(long,TermsEnum,TermsEnum).mjava","sourceNew":null,"sourceOld":"  private void assertEquals(long numOrds, TermsEnum expected, TermsEnum actual) throws Exception {\n    BytesRef ref;\n    \n    // sequential next() through all terms\n    while ((ref = expected.next()) != null) {\n      assertEquals(ref, actual.next());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    assertNull(actual.next());\n    \n    // sequential seekExact(ord) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      actual.seekExact(i);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekExact(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertTrue(actual.seekExact(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // sequential seekCeil(BytesRef) through all terms\n    for (long i = 0; i < numOrds; i++) {\n      expected.seekExact(i);\n      assertEquals(SeekStatus.FOUND, actual.seekCeil(expected.term()));\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(ord)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(randomOrd);\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekExact(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      long randomOrd = TestUtil.nextLong(random(), 0, numOrds - 1);\n      expected.seekExact(randomOrd);\n      actual.seekExact(expected.term());\n      assertEquals(expected.ord(), actual.ord());\n      assertEquals(expected.term(), actual.term());\n    }\n    \n    // random seekCeil(BytesRef)\n    for (long i = 0; i < numOrds; i++) {\n      BytesRef target = new BytesRef(TestUtil.randomUnicodeString(random()));\n      SeekStatus expectedStatus = expected.seekCeil(target);\n      assertEquals(expectedStatus, actual.seekCeil(target));\n      if (expectedStatus != SeekStatus.END) {\n        assertEquals(expected.ord(), actual.ord());\n        assertEquals(expected.term(), actual.term());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}