{"path":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#request(SolrRequest).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#request(SolrRequest).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    if( !(request instanceof UpdateRequest) ) {\n      return super.request( request );\n    }\n    UpdateRequest req = (UpdateRequest)request;\n    \n    // this happens for commit...\n    if( req.getDocuments()==null || req.getDocuments().isEmpty() ) {\n      blockUntilFinished();\n      return super.request( request );\n    }\n\n    SolrParams params = req.getParams();\n    if( params != null ) {\n      // check if it is waiting for the searcher\n      if( params.getBool( UpdateParams.WAIT_SEARCHER, false ) ) {\n        log.info( \"blocking for commit/optimize\" );\n        blockUntilFinished();  // empty the queue\n        return super.request( request );\n      }\n    }\n    \n    try {\n      CountDownLatch tmpLock = lock;\n      if( tmpLock != null ) {\n        tmpLock.await();\n      }\n\n      queue.put( req );\n      \n        synchronized( runners ) {\n      if( runners.isEmpty() \n        || (queue.remainingCapacity() < queue.size() \n         && runners.size() < threadCount) ) \n      {\n          Runner r = new Runner();\n          scheduler.execute( r );\n          runners.add( r );\n        }\n      }\n    } \n    catch (InterruptedException e) {\n      log.error( \"interrupted\", e );\n      throw new IOException( e.getLocalizedMessage() );\n    }\n    \n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<Object>();\n    dummy.add( \"NOTE\", \"the request is processed in a background stream\" );\n    return dummy;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#request(SolrRequest).mjava","sourceNew":null,"sourceOld":"  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    if( !(request instanceof UpdateRequest) ) {\n      return super.request( request );\n    }\n    UpdateRequest req = (UpdateRequest)request;\n    \n    // this happens for commit...\n    if( req.getDocuments()==null || req.getDocuments().isEmpty() ) {\n      blockUntilFinished();\n      return super.request( request );\n    }\n\n    SolrParams params = req.getParams();\n    if( params != null ) {\n      // check if it is waiting for the searcher\n      if( params.getBool( UpdateParams.WAIT_SEARCHER, false ) ) {\n        log.info( \"blocking for commit/optimize\" );\n        blockUntilFinished();  // empty the queue\n        return super.request( request );\n      }\n    }\n    \n    try {\n      CountDownLatch tmpLock = lock;\n      if( tmpLock != null ) {\n        tmpLock.await();\n      }\n\n      queue.put( req );\n      \n        synchronized( runners ) {\n      if( runners.isEmpty() \n        || (queue.remainingCapacity() < queue.size() \n         && runners.size() < threadCount) ) \n      {\n          Runner r = new Runner();\n          scheduler.execute( r );\n          runners.add( r );\n        }\n      }\n    } \n    catch (InterruptedException e) {\n      log.error( \"interrupted\", e );\n      throw new IOException( e.getLocalizedMessage() );\n    }\n    \n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<Object>();\n    dummy.add( \"NOTE\", \"the request is processed in a background stream\" );\n    return dummy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#request(SolrRequest).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    if( !(request instanceof UpdateRequest) ) {\n      return super.request( request );\n    }\n    UpdateRequest req = (UpdateRequest)request;\n    \n    // this happens for commit...\n    if( req.getDocuments()==null || req.getDocuments().isEmpty() ) {\n      blockUntilFinished();\n      return super.request( request );\n    }\n\n    SolrParams params = req.getParams();\n    if( params != null ) {\n      // check if it is waiting for the searcher\n      if( params.getBool( UpdateParams.WAIT_SEARCHER, false ) ) {\n        log.info( \"blocking for commit/optimize\" );\n        blockUntilFinished();  // empty the queue\n        return super.request( request );\n      }\n    }\n    \n    try {\n      CountDownLatch tmpLock = lock;\n      if( tmpLock != null ) {\n        tmpLock.await();\n      }\n\n      queue.put( req );\n      \n        synchronized( runners ) {\n      if( runners.isEmpty() \n        || (queue.remainingCapacity() < queue.size() \n         && runners.size() < threadCount) ) \n      {\n          Runner r = new Runner();\n          scheduler.execute( r );\n          runners.add( r );\n        }\n      }\n    } \n    catch (InterruptedException e) {\n      log.error( \"interrupted\", e );\n      throw new IOException( e.getLocalizedMessage() );\n    }\n    \n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<Object>();\n    dummy.add( \"NOTE\", \"the request is processed in a background stream\" );\n    return dummy;\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    if( !(request instanceof UpdateRequest) ) {\n      return super.request( request );\n    }\n    UpdateRequest req = (UpdateRequest)request;\n    \n    // this happens for commit...\n    if( req.getDocuments()==null || req.getDocuments().isEmpty() ) {\n      blockUntilFinished();\n      return super.request( request );\n    }\n\n    SolrParams params = req.getParams();\n    if( params != null ) {\n      // check if it is waiting for the searcher\n      if( params.getBool( UpdateParams.WAIT_SEARCHER, false ) ) {\n        log.info( \"blocking for commit/optimize\" );\n        blockUntilFinished();  // empty the queue\n        return super.request( request );\n      }\n    }\n    \n    try {\n      CountDownLatch tmpLock = lock;\n      if( tmpLock != null ) {\n        tmpLock.await();\n      }\n\n      queue.put( req );\n      \n        synchronized( runners ) {\n      if( runners.isEmpty() \n        || (queue.remainingCapacity() < queue.size() \n         && runners.size() < threadCount) ) \n      {\n          Runner r = new Runner();\n          scheduler.execute( r );\n          runners.add( r );\n        }\n      }\n    } \n    catch (InterruptedException e) {\n      log.error( \"interrupted\", e );\n      throw new IOException( e.getLocalizedMessage() );\n    }\n    \n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<Object>();\n    dummy.add( \"NOTE\", \"the request is processed in a background stream\" );\n    return dummy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#request(SolrRequest).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    if( !(request instanceof UpdateRequest) ) {\n      return super.request( request );\n    }\n    UpdateRequest req = (UpdateRequest)request;\n    \n    // this happens for commit...\n    if( req.getDocuments()==null || req.getDocuments().isEmpty() ) {\n      blockUntilFinished();\n      return super.request( request );\n    }\n\n    SolrParams params = req.getParams();\n    if( params != null ) {\n      // check if it is waiting for the searcher\n      if( params.getBool( UpdateParams.WAIT_SEARCHER, false ) ) {\n        log.info( \"blocking for commit/optimize\" );\n        blockUntilFinished();  // empty the queue\n        return super.request( request );\n      }\n    }\n    \n    try {\n      CountDownLatch tmpLock = lock;\n      if( tmpLock != null ) {\n        tmpLock.await();\n      }\n\n      queue.put( req );\n      \n        synchronized( runners ) {\n      if( runners.isEmpty() \n        || (queue.remainingCapacity() < queue.size() \n         && runners.size() < threadCount) ) \n      {\n          Runner r = new Runner();\n          scheduler.execute( r );\n          runners.add( r );\n        }\n      }\n    } \n    catch (InterruptedException e) {\n      log.error( \"interrupted\", e );\n      throw new IOException( e.getLocalizedMessage() );\n    }\n    \n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<Object>();\n    dummy.add( \"NOTE\", \"the request is processed in a background stream\" );\n    return dummy;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"977d34a6bc0681279dcf43103c4a1bc02e8656b4","date":1296075425,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    if( !(request instanceof UpdateRequest) ) {\n      return super.request( request );\n    }\n    UpdateRequest req = (UpdateRequest)request;\n    \n    // this happens for commit...\n    if( req.getDocuments()==null || req.getDocuments().isEmpty() ) {\n      blockUntilFinished();\n      return super.request( request );\n    }\n\n    SolrParams params = req.getParams();\n    if( params != null ) {\n      // check if it is waiting for the searcher\n      if( params.getBool( UpdateParams.WAIT_SEARCHER, false ) ) {\n        log.info( \"blocking for commit/optimize\" );\n        blockUntilFinished();  // empty the queue\n        return super.request( request );\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if( tmpLock != null ) {\n        tmpLock.await();\n      }\n\n      queue.put( req );\n\n      synchronized( runners ) {\n        if( runners.isEmpty()\n                || (queue.remainingCapacity() < queue.size()\n                && runners.size() < threadCount) )\n        {\n          Runner r = new Runner();\n          scheduler.execute( r );\n          runners.add( r );\n        }\n      }\n    }\n    catch (InterruptedException e) {\n      log.error( \"interrupted\", e );\n      throw new IOException( e.getLocalizedMessage() );\n    }\n    \n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<Object>();\n    dummy.add( \"NOTE\", \"the request is processed in a background stream\" );\n    return dummy;\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    if( !(request instanceof UpdateRequest) ) {\n      return super.request( request );\n    }\n    UpdateRequest req = (UpdateRequest)request;\n    \n    // this happens for commit...\n    if( req.getDocuments()==null || req.getDocuments().isEmpty() ) {\n      blockUntilFinished();\n      return super.request( request );\n    }\n\n    SolrParams params = req.getParams();\n    if( params != null ) {\n      // check if it is waiting for the searcher\n      if( params.getBool( UpdateParams.WAIT_SEARCHER, false ) ) {\n        log.info( \"blocking for commit/optimize\" );\n        blockUntilFinished();  // empty the queue\n        return super.request( request );\n      }\n    }\n    \n    try {\n      CountDownLatch tmpLock = lock;\n      if( tmpLock != null ) {\n        tmpLock.await();\n      }\n\n      queue.put( req );\n      \n        synchronized( runners ) {\n      if( runners.isEmpty() \n        || (queue.remainingCapacity() < queue.size() \n         && runners.size() < threadCount) ) \n      {\n          Runner r = new Runner();\n          scheduler.execute( r );\n          runners.add( r );\n        }\n      }\n    } \n    catch (InterruptedException e) {\n      log.error( \"interrupted\", e );\n      throw new IOException( e.getLocalizedMessage() );\n    }\n    \n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<Object>();\n    dummy.add( \"NOTE\", \"the request is processed in a background stream\" );\n    return dummy;\n  }\n\n","bugFix":null,"bugIntro":["67ecb9d23ff772533efca1970925175ae7620dc4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    if( !(request instanceof UpdateRequest) ) {\n      return super.request( request );\n    }\n    UpdateRequest req = (UpdateRequest)request;\n    \n    // this happens for commit...\n    if( req.getDocuments()==null || req.getDocuments().isEmpty() ) {\n      blockUntilFinished();\n      return super.request( request );\n    }\n\n    SolrParams params = req.getParams();\n    if( params != null ) {\n      // check if it is waiting for the searcher\n      if( params.getBool( UpdateParams.WAIT_SEARCHER, false ) ) {\n        log.info( \"blocking for commit/optimize\" );\n        blockUntilFinished();  // empty the queue\n        return super.request( request );\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if( tmpLock != null ) {\n        tmpLock.await();\n      }\n\n      queue.put( req );\n\n      synchronized( runners ) {\n        if( runners.isEmpty()\n                || (queue.remainingCapacity() < queue.size()\n                && runners.size() < threadCount) )\n        {\n          Runner r = new Runner();\n          scheduler.execute( r );\n          runners.add( r );\n        }\n      }\n    }\n    catch (InterruptedException e) {\n      log.error( \"interrupted\", e );\n      throw new IOException( e.getLocalizedMessage() );\n    }\n    \n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<Object>();\n    dummy.add( \"NOTE\", \"the request is processed in a background stream\" );\n    return dummy;\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    if( !(request instanceof UpdateRequest) ) {\n      return super.request( request );\n    }\n    UpdateRequest req = (UpdateRequest)request;\n    \n    // this happens for commit...\n    if( req.getDocuments()==null || req.getDocuments().isEmpty() ) {\n      blockUntilFinished();\n      return super.request( request );\n    }\n\n    SolrParams params = req.getParams();\n    if( params != null ) {\n      // check if it is waiting for the searcher\n      if( params.getBool( UpdateParams.WAIT_SEARCHER, false ) ) {\n        log.info( \"blocking for commit/optimize\" );\n        blockUntilFinished();  // empty the queue\n        return super.request( request );\n      }\n    }\n    \n    try {\n      CountDownLatch tmpLock = lock;\n      if( tmpLock != null ) {\n        tmpLock.await();\n      }\n\n      queue.put( req );\n      \n        synchronized( runners ) {\n      if( runners.isEmpty() \n        || (queue.remainingCapacity() < queue.size() \n         && runners.size() < threadCount) ) \n      {\n          Runner r = new Runner();\n          scheduler.execute( r );\n          runners.add( r );\n        }\n      }\n    } \n    catch (InterruptedException e) {\n      log.error( \"interrupted\", e );\n      throw new IOException( e.getLocalizedMessage() );\n    }\n    \n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<Object>();\n    dummy.add( \"NOTE\", \"the request is processed in a background stream\" );\n    return dummy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"67ecb9d23ff772533efca1970925175ae7620dc4","date":1297805341,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    if( !(request instanceof UpdateRequest) ) {\n      return super.request( request );\n    }\n    UpdateRequest req = (UpdateRequest)request;\n    \n    // this happens for commit...\n    if( req.getDocuments()==null || req.getDocuments().isEmpty() ) {\n      blockUntilFinished();\n      return super.request( request );\n    }\n\n    SolrParams params = req.getParams();\n    if( params != null ) {\n      // check if it is waiting for the searcher\n      if( params.getBool( UpdateParams.WAIT_SEARCHER, false ) ) {\n        log.info( \"blocking for commit/optimize\" );\n        blockUntilFinished();  // empty the queue\n        return super.request( request );\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if( tmpLock != null ) {\n        tmpLock.await();\n      }\n\n      boolean success = queue.offer(req);\n\n      for(;;) {\n        synchronized( runners ) {\n          if( runners.isEmpty()\n                  || (queue.remainingCapacity() < queue.size()    // queue is half full and we can add more runners\n                  && runners.size() < threadCount) )\n          {\n            // We need more runners, so start a new one.\n            Runner r = new Runner();\n            runners.add( r );\n            scheduler.execute( r );\n          } else {\n            // break out of the retry loop if we added the element to the queue successfully, *and*\n            // while we are still holding the runners lock to prevent race conditions.\n            // race conditions.\n            if (success) break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all runners stopped.\n        // In all cases, we should loop back to the top to see if we need to start more runners.\n        //\n        if (!success) {\n          success = queue.offer(req, 100, TimeUnit.MILLISECONDS);\n        }\n\n      }\n\n\n    }\n    catch (InterruptedException e) {\n      log.error( \"interrupted\", e );\n      throw new IOException( e.getLocalizedMessage() );\n    }\n    \n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<Object>();\n    dummy.add( \"NOTE\", \"the request is processed in a background stream\" );\n    return dummy;\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    if( !(request instanceof UpdateRequest) ) {\n      return super.request( request );\n    }\n    UpdateRequest req = (UpdateRequest)request;\n    \n    // this happens for commit...\n    if( req.getDocuments()==null || req.getDocuments().isEmpty() ) {\n      blockUntilFinished();\n      return super.request( request );\n    }\n\n    SolrParams params = req.getParams();\n    if( params != null ) {\n      // check if it is waiting for the searcher\n      if( params.getBool( UpdateParams.WAIT_SEARCHER, false ) ) {\n        log.info( \"blocking for commit/optimize\" );\n        blockUntilFinished();  // empty the queue\n        return super.request( request );\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if( tmpLock != null ) {\n        tmpLock.await();\n      }\n\n      queue.put( req );\n\n      synchronized( runners ) {\n        if( runners.isEmpty()\n                || (queue.remainingCapacity() < queue.size()\n                && runners.size() < threadCount) )\n        {\n          Runner r = new Runner();\n          scheduler.execute( r );\n          runners.add( r );\n        }\n      }\n    }\n    catch (InterruptedException e) {\n      log.error( \"interrupted\", e );\n      throw new IOException( e.getLocalizedMessage() );\n    }\n    \n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<Object>();\n    dummy.add( \"NOTE\", \"the request is processed in a background stream\" );\n    return dummy;\n  }\n\n","bugFix":["8cd2638c91e278a2831e83135b2c895d04defa90","977d34a6bc0681279dcf43103c4a1bc02e8656b4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    if( !(request instanceof UpdateRequest) ) {\n      return super.request( request );\n    }\n    UpdateRequest req = (UpdateRequest)request;\n    \n    // this happens for commit...\n    if( req.getDocuments()==null || req.getDocuments().isEmpty() ) {\n      blockUntilFinished();\n      return super.request( request );\n    }\n\n    SolrParams params = req.getParams();\n    if( params != null ) {\n      // check if it is waiting for the searcher\n      if( params.getBool( UpdateParams.WAIT_SEARCHER, false ) ) {\n        log.info( \"blocking for commit/optimize\" );\n        blockUntilFinished();  // empty the queue\n        return super.request( request );\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if( tmpLock != null ) {\n        tmpLock.await();\n      }\n\n      boolean success = queue.offer(req);\n\n      for(;;) {\n        synchronized( runners ) {\n          if( runners.isEmpty()\n                  || (queue.remainingCapacity() < queue.size()    // queue is half full and we can add more runners\n                  && runners.size() < threadCount) )\n          {\n            // We need more runners, so start a new one.\n            Runner r = new Runner();\n            runners.add( r );\n            scheduler.execute( r );\n          } else {\n            // break out of the retry loop if we added the element to the queue successfully, *and*\n            // while we are still holding the runners lock to prevent race conditions.\n            // race conditions.\n            if (success) break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all runners stopped.\n        // In all cases, we should loop back to the top to see if we need to start more runners.\n        //\n        if (!success) {\n          success = queue.offer(req, 100, TimeUnit.MILLISECONDS);\n        }\n\n      }\n\n\n    }\n    catch (InterruptedException e) {\n      log.error( \"interrupted\", e );\n      throw new IOException( e.getLocalizedMessage() );\n    }\n    \n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<Object>();\n    dummy.add( \"NOTE\", \"the request is processed in a background stream\" );\n    return dummy;\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    if( !(request instanceof UpdateRequest) ) {\n      return super.request( request );\n    }\n    UpdateRequest req = (UpdateRequest)request;\n    \n    // this happens for commit...\n    if( req.getDocuments()==null || req.getDocuments().isEmpty() ) {\n      blockUntilFinished();\n      return super.request( request );\n    }\n\n    SolrParams params = req.getParams();\n    if( params != null ) {\n      // check if it is waiting for the searcher\n      if( params.getBool( UpdateParams.WAIT_SEARCHER, false ) ) {\n        log.info( \"blocking for commit/optimize\" );\n        blockUntilFinished();  // empty the queue\n        return super.request( request );\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if( tmpLock != null ) {\n        tmpLock.await();\n      }\n\n      queue.put( req );\n\n      synchronized( runners ) {\n        if( runners.isEmpty()\n                || (queue.remainingCapacity() < queue.size()\n                && runners.size() < threadCount) )\n        {\n          Runner r = new Runner();\n          scheduler.execute( r );\n          runners.add( r );\n        }\n      }\n    }\n    catch (InterruptedException e) {\n      log.error( \"interrupted\", e );\n      throw new IOException( e.getLocalizedMessage() );\n    }\n    \n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<Object>();\n    dummy.add( \"NOTE\", \"the request is processed in a background stream\" );\n    return dummy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    if( !(request instanceof UpdateRequest) ) {\n      return super.request( request );\n    }\n    UpdateRequest req = (UpdateRequest)request;\n    \n    // this happens for commit...\n    if( req.getDocuments()==null || req.getDocuments().isEmpty() ) {\n      blockUntilFinished();\n      return super.request( request );\n    }\n\n    SolrParams params = req.getParams();\n    if( params != null ) {\n      // check if it is waiting for the searcher\n      if( params.getBool( UpdateParams.WAIT_SEARCHER, false ) ) {\n        log.info( \"blocking for commit/optimize\" );\n        blockUntilFinished();  // empty the queue\n        return super.request( request );\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if( tmpLock != null ) {\n        tmpLock.await();\n      }\n\n      boolean success = queue.offer(req);\n\n      for(;;) {\n        synchronized( runners ) {\n          if( runners.isEmpty()\n                  || (queue.remainingCapacity() < queue.size()    // queue is half full and we can add more runners\n                  && runners.size() < threadCount) )\n          {\n            // We need more runners, so start a new one.\n            Runner r = new Runner();\n            runners.add( r );\n            scheduler.execute( r );\n          } else {\n            // break out of the retry loop if we added the element to the queue successfully, *and*\n            // while we are still holding the runners lock to prevent race conditions.\n            // race conditions.\n            if (success) break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all runners stopped.\n        // In all cases, we should loop back to the top to see if we need to start more runners.\n        //\n        if (!success) {\n          success = queue.offer(req, 100, TimeUnit.MILLISECONDS);\n        }\n\n      }\n\n\n    }\n    catch (InterruptedException e) {\n      log.error( \"interrupted\", e );\n      throw new IOException( e.getLocalizedMessage() );\n    }\n    \n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<Object>();\n    dummy.add( \"NOTE\", \"the request is processed in a background stream\" );\n    return dummy;\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    if( !(request instanceof UpdateRequest) ) {\n      return super.request( request );\n    }\n    UpdateRequest req = (UpdateRequest)request;\n    \n    // this happens for commit...\n    if( req.getDocuments()==null || req.getDocuments().isEmpty() ) {\n      blockUntilFinished();\n      return super.request( request );\n    }\n\n    SolrParams params = req.getParams();\n    if( params != null ) {\n      // check if it is waiting for the searcher\n      if( params.getBool( UpdateParams.WAIT_SEARCHER, false ) ) {\n        log.info( \"blocking for commit/optimize\" );\n        blockUntilFinished();  // empty the queue\n        return super.request( request );\n      }\n    }\n    \n    try {\n      CountDownLatch tmpLock = lock;\n      if( tmpLock != null ) {\n        tmpLock.await();\n      }\n\n      queue.put( req );\n      \n        synchronized( runners ) {\n      if( runners.isEmpty() \n        || (queue.remainingCapacity() < queue.size() \n         && runners.size() < threadCount) ) \n      {\n          Runner r = new Runner();\n          scheduler.execute( r );\n          runners.add( r );\n        }\n      }\n    } \n    catch (InterruptedException e) {\n      log.error( \"interrupted\", e );\n      throw new IOException( e.getLocalizedMessage() );\n    }\n    \n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<Object>();\n    dummy.add( \"NOTE\", \"the request is processed in a background stream\" );\n    return dummy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    if( !(request instanceof UpdateRequest) ) {\n      return super.request( request );\n    }\n    UpdateRequest req = (UpdateRequest)request;\n    \n    // this happens for commit...\n    if( req.getDocuments()==null || req.getDocuments().isEmpty() ) {\n      blockUntilFinished();\n      return super.request( request );\n    }\n\n    SolrParams params = req.getParams();\n    if( params != null ) {\n      // check if it is waiting for the searcher\n      if( params.getBool( UpdateParams.WAIT_SEARCHER, false ) ) {\n        log.info( \"blocking for commit/optimize\" );\n        blockUntilFinished();  // empty the queue\n        return super.request( request );\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if( tmpLock != null ) {\n        tmpLock.await();\n      }\n\n      boolean success = queue.offer(req);\n\n      for(;;) {\n        synchronized( runners ) {\n          if( runners.isEmpty()\n                  || (queue.remainingCapacity() < queue.size()    // queue is half full and we can add more runners\n                  && runners.size() < threadCount) )\n          {\n            // We need more runners, so start a new one.\n            Runner r = new Runner();\n            runners.add( r );\n            scheduler.execute( r );\n          } else {\n            // break out of the retry loop if we added the element to the queue successfully, *and*\n            // while we are still holding the runners lock to prevent race conditions.\n            // race conditions.\n            if (success) break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all runners stopped.\n        // In all cases, we should loop back to the top to see if we need to start more runners.\n        //\n        if (!success) {\n          success = queue.offer(req, 100, TimeUnit.MILLISECONDS);\n        }\n\n      }\n\n\n    }\n    catch (InterruptedException e) {\n      log.error( \"interrupted\", e );\n      throw new IOException( e.getLocalizedMessage() );\n    }\n    \n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<Object>();\n    dummy.add( \"NOTE\", \"the request is processed in a background stream\" );\n    return dummy;\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    if( !(request instanceof UpdateRequest) ) {\n      return super.request( request );\n    }\n    UpdateRequest req = (UpdateRequest)request;\n    \n    // this happens for commit...\n    if( req.getDocuments()==null || req.getDocuments().isEmpty() ) {\n      blockUntilFinished();\n      return super.request( request );\n    }\n\n    SolrParams params = req.getParams();\n    if( params != null ) {\n      // check if it is waiting for the searcher\n      if( params.getBool( UpdateParams.WAIT_SEARCHER, false ) ) {\n        log.info( \"blocking for commit/optimize\" );\n        blockUntilFinished();  // empty the queue\n        return super.request( request );\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if( tmpLock != null ) {\n        tmpLock.await();\n      }\n\n      boolean success = queue.offer(req);\n\n      for(;;) {\n        synchronized( runners ) {\n          if( runners.isEmpty()\n                  || (queue.remainingCapacity() < queue.size()    // queue is half full and we can add more runners\n                  && runners.size() < threadCount) )\n          {\n            // We need more runners, so start a new one.\n            Runner r = new Runner();\n            runners.add( r );\n            scheduler.execute( r );\n          } else {\n            // break out of the retry loop if we added the element to the queue successfully, *and*\n            // while we are still holding the runners lock to prevent race conditions.\n            // race conditions.\n            if (success) break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all runners stopped.\n        // In all cases, we should loop back to the top to see if we need to start more runners.\n        //\n        if (!success) {\n          success = queue.offer(req, 100, TimeUnit.MILLISECONDS);\n        }\n\n      }\n\n\n    }\n    catch (InterruptedException e) {\n      log.error( \"interrupted\", e );\n      throw new IOException( e.getLocalizedMessage() );\n    }\n    \n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<Object>();\n    dummy.add( \"NOTE\", \"the request is processed in a background stream\" );\n    return dummy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    if( !(request instanceof UpdateRequest) ) {\n      return super.request( request );\n    }\n    UpdateRequest req = (UpdateRequest)request;\n    \n    // this happens for commit...\n    if( req.getDocuments()==null || req.getDocuments().isEmpty() ) {\n      blockUntilFinished();\n      return super.request( request );\n    }\n\n    SolrParams params = req.getParams();\n    if( params != null ) {\n      // check if it is waiting for the searcher\n      if( params.getBool( UpdateParams.WAIT_SEARCHER, false ) ) {\n        log.info( \"blocking for commit/optimize\" );\n        blockUntilFinished();  // empty the queue\n        return super.request( request );\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if( tmpLock != null ) {\n        tmpLock.await();\n      }\n\n      boolean success = queue.offer(req);\n\n      for(;;) {\n        synchronized( runners ) {\n          if( runners.isEmpty()\n                  || (queue.remainingCapacity() < queue.size()    // queue is half full and we can add more runners\n                  && runners.size() < threadCount) )\n          {\n            // We need more runners, so start a new one.\n            Runner r = new Runner();\n            runners.add( r );\n            scheduler.execute( r );\n          } else {\n            // break out of the retry loop if we added the element to the queue successfully, *and*\n            // while we are still holding the runners lock to prevent race conditions.\n            // race conditions.\n            if (success) break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all runners stopped.\n        // In all cases, we should loop back to the top to see if we need to start more runners.\n        //\n        if (!success) {\n          success = queue.offer(req, 100, TimeUnit.MILLISECONDS);\n        }\n\n      }\n\n\n    }\n    catch (InterruptedException e) {\n      log.error( \"interrupted\", e );\n      throw new IOException( e.getLocalizedMessage() );\n    }\n    \n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<Object>();\n    dummy.add( \"NOTE\", \"the request is processed in a background stream\" );\n    return dummy;\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    if( !(request instanceof UpdateRequest) ) {\n      return super.request( request );\n    }\n    UpdateRequest req = (UpdateRequest)request;\n    \n    // this happens for commit...\n    if( req.getDocuments()==null || req.getDocuments().isEmpty() ) {\n      blockUntilFinished();\n      return super.request( request );\n    }\n\n    SolrParams params = req.getParams();\n    if( params != null ) {\n      // check if it is waiting for the searcher\n      if( params.getBool( UpdateParams.WAIT_SEARCHER, false ) ) {\n        log.info( \"blocking for commit/optimize\" );\n        blockUntilFinished();  // empty the queue\n        return super.request( request );\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if( tmpLock != null ) {\n        tmpLock.await();\n      }\n\n      boolean success = queue.offer(req);\n\n      for(;;) {\n        synchronized( runners ) {\n          if( runners.isEmpty()\n                  || (queue.remainingCapacity() < queue.size()    // queue is half full and we can add more runners\n                  && runners.size() < threadCount) )\n          {\n            // We need more runners, so start a new one.\n            Runner r = new Runner();\n            runners.add( r );\n            scheduler.execute( r );\n          } else {\n            // break out of the retry loop if we added the element to the queue successfully, *and*\n            // while we are still holding the runners lock to prevent race conditions.\n            // race conditions.\n            if (success) break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all runners stopped.\n        // In all cases, we should loop back to the top to see if we need to start more runners.\n        //\n        if (!success) {\n          success = queue.offer(req, 100, TimeUnit.MILLISECONDS);\n        }\n\n      }\n\n\n    }\n    catch (InterruptedException e) {\n      log.error( \"interrupted\", e );\n      throw new IOException( e.getLocalizedMessage() );\n    }\n    \n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<Object>();\n    dummy.add( \"NOTE\", \"the request is processed in a background stream\" );\n    return dummy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    if( !(request instanceof UpdateRequest) ) {\n      return super.request( request );\n    }\n    UpdateRequest req = (UpdateRequest)request;\n    \n    // this happens for commit...\n    if( req.getDocuments()==null || req.getDocuments().isEmpty() ) {\n      blockUntilFinished();\n      return super.request( request );\n    }\n\n    SolrParams params = req.getParams();\n    if( params != null ) {\n      // check if it is waiting for the searcher\n      if( params.getBool( UpdateParams.WAIT_SEARCHER, false ) ) {\n        log.info( \"blocking for commit/optimize\" );\n        blockUntilFinished();  // empty the queue\n        return super.request( request );\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if( tmpLock != null ) {\n        tmpLock.await();\n      }\n\n      boolean success = queue.offer(req);\n\n      for(;;) {\n        synchronized( runners ) {\n          if( runners.isEmpty()\n                  || (queue.remainingCapacity() < queue.size()    // queue is half full and we can add more runners\n                  && runners.size() < threadCount) )\n          {\n            // We need more runners, so start a new one.\n            Runner r = new Runner();\n            runners.add( r );\n            scheduler.execute( r );\n          } else {\n            // break out of the retry loop if we added the element to the queue successfully, *and*\n            // while we are still holding the runners lock to prevent race conditions.\n            // race conditions.\n            if (success) break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all runners stopped.\n        // In all cases, we should loop back to the top to see if we need to start more runners.\n        //\n        if (!success) {\n          success = queue.offer(req, 100, TimeUnit.MILLISECONDS);\n        }\n\n      }\n\n\n    }\n    catch (InterruptedException e) {\n      log.error( \"interrupted\", e );\n      throw new IOException( e.getLocalizedMessage() );\n    }\n    \n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<Object>();\n    dummy.add( \"NOTE\", \"the request is processed in a background stream\" );\n    return dummy;\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request( final SolrRequest request ) throws SolrServerException, IOException\n  {\n    if( !(request instanceof UpdateRequest) ) {\n      return super.request( request );\n    }\n    UpdateRequest req = (UpdateRequest)request;\n    \n    // this happens for commit...\n    if( req.getDocuments()==null || req.getDocuments().isEmpty() ) {\n      blockUntilFinished();\n      return super.request( request );\n    }\n\n    SolrParams params = req.getParams();\n    if( params != null ) {\n      // check if it is waiting for the searcher\n      if( params.getBool( UpdateParams.WAIT_SEARCHER, false ) ) {\n        log.info( \"blocking for commit/optimize\" );\n        blockUntilFinished();  // empty the queue\n        return super.request( request );\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if( tmpLock != null ) {\n        tmpLock.await();\n      }\n\n      boolean success = queue.offer(req);\n\n      for(;;) {\n        synchronized( runners ) {\n          if( runners.isEmpty()\n                  || (queue.remainingCapacity() < queue.size()    // queue is half full and we can add more runners\n                  && runners.size() < threadCount) )\n          {\n            // We need more runners, so start a new one.\n            Runner r = new Runner();\n            runners.add( r );\n            scheduler.execute( r );\n          } else {\n            // break out of the retry loop if we added the element to the queue successfully, *and*\n            // while we are still holding the runners lock to prevent race conditions.\n            // race conditions.\n            if (success) break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all runners stopped.\n        // In all cases, we should loop back to the top to see if we need to start more runners.\n        //\n        if (!success) {\n          success = queue.offer(req, 100, TimeUnit.MILLISECONDS);\n        }\n\n      }\n\n\n    }\n    catch (InterruptedException e) {\n      log.error( \"interrupted\", e );\n      throw new IOException( e.getLocalizedMessage() );\n    }\n    \n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<Object>();\n    dummy.add( \"NOTE\", \"the request is processed in a background stream\" );\n    return dummy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","67ecb9d23ff772533efca1970925175ae7620dc4"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["67ecb9d23ff772533efca1970925175ae7620dc4","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"67ecb9d23ff772533efca1970925175ae7620dc4":["977d34a6bc0681279dcf43103c4a1bc02e8656b4"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["67ecb9d23ff772533efca1970925175ae7620dc4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","977d34a6bc0681279dcf43103c4a1bc02e8656b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["67ecb9d23ff772533efca1970925175ae7620dc4"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"977d34a6bc0681279dcf43103c4a1bc02e8656b4":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["1da8d55113b689b06716246649de6f62430f15c0","67ecb9d23ff772533efca1970925175ae7620dc4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"67ecb9d23ff772533efca1970925175ae7620dc4":["f1bdbf92da222965b46c0a942c3857ba56e5c638","c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"1da8d55113b689b06716246649de6f62430f15c0":["29ef99d61cda9641b6250bf9567329a6e65f901d","977d34a6bc0681279dcf43103c4a1bc02e8656b4","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"977d34a6bc0681279dcf43103c4a1bc02e8656b4":["67ecb9d23ff772533efca1970925175ae7620dc4","29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}