{"path":"lucene/core/src/java/org/apache/lucene/index/DocValuesFieldUpdates#finish().mjava","commits":[{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesFieldUpdates#finish().mjava","pathOld":"/dev/null","sourceNew":"  /** Freezes internal data structures and sorts updates by docID for efficient iteration. */\n  public abstract void finish();\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesFieldUpdates#finish().mjava","pathOld":"/dev/null","sourceNew":"  /** Freezes internal data structures and sorts updates by docID for efficient iteration. */\n  public abstract void finish();\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesFieldUpdates#finish().mjava","pathOld":"/dev/null","sourceNew":"  /** Freezes internal data structures and sorts updates by docID for efficient iteration. */\n  public abstract void finish();\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e129bd6cb34a236558a49edf108a49d5c15e0e1","date":1525081316,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesFieldUpdates#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesFieldUpdates#finish().mjava","sourceNew":"  /** Freezes internal data structures and sorts updates by docID for efficient iteration. */\n  abstract void finish();\n\n","sourceOld":"  /** Freezes internal data structures and sorts updates by docID for efficient iteration. */\n  public abstract void finish();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f42883db49d143abc1a0f176ba47e3388dafb608","date":1525083166,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesFieldUpdates#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesFieldUpdates#finish().mjava","sourceNew":"  /** Freezes internal data structures and sorts updates by docID for efficient iteration. */\n  abstract void finish();\n\n","sourceOld":"  /** Freezes internal data structures and sorts updates by docID for efficient iteration. */\n  public abstract void finish();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62389a101dca1b996a7d6ca10d23bfb747924e06","date":1525274565,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesFieldUpdates#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesFieldUpdates#finish().mjava","sourceNew":"  /** Freezes internal data structures and sorts updates by docID for efficient iteration. */\n  final synchronized void finish() {\n    if (finished) {\n      throw new IllegalStateException(\"already finished\");\n    }\n    finished = true;\n\n    // shrink wrap\n    if (size < docs.size()) {\n      resize(size);\n    }\n    new InPlaceMergeSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        DocValuesFieldUpdates.this.swap(i, j);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        // increasing docID order:\n        // NOTE: we can have ties here, when the same docID was updated in the same segment, in which case we rely on sort being\n        // stable and preserving original order so the last update to that docID wins\n        return Long.compare(docs.get(i), docs.get(j));\n      }\n    }.sort(0, size);\n  }\n\n","sourceOld":"  /** Freezes internal data structures and sorts updates by docID for efficient iteration. */\n  abstract void finish();\n\n","bugFix":null,"bugIntro":["af08e9e692a7d133c6a60b1164563d53e13a1631"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af08e9e692a7d133c6a60b1164563d53e13a1631","date":1544167492,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesFieldUpdates#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesFieldUpdates#finish().mjava","sourceNew":"  /** Freezes internal data structures and sorts updates by docID for efficient iteration. */\n  final synchronized void finish() {\n    if (finished) {\n      throw new IllegalStateException(\"already finished\");\n    }\n    finished = true;\n\n    // shrink wrap\n    if (size < docs.size()) {\n      resize(size);\n    }\n    new InPlaceMergeSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        DocValuesFieldUpdates.this.swap(i, j);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        // increasing docID order:\n        // NOTE: we can have ties here, when the same docID was updated in the same segment, in which case we rely on sort being\n        // stable and preserving original order so the last update to that docID wins\n        return Long.compare(docs.get(i)>>>1, docs.get(j)>>>1);\n      }\n    }.sort(0, size);\n  }\n\n","sourceOld":"  /** Freezes internal data structures and sorts updates by docID for efficient iteration. */\n  final synchronized void finish() {\n    if (finished) {\n      throw new IllegalStateException(\"already finished\");\n    }\n    finished = true;\n\n    // shrink wrap\n    if (size < docs.size()) {\n      resize(size);\n    }\n    new InPlaceMergeSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        DocValuesFieldUpdates.this.swap(i, j);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        // increasing docID order:\n        // NOTE: we can have ties here, when the same docID was updated in the same segment, in which case we rely on sort being\n        // stable and preserving original order so the last update to that docID wins\n        return Long.compare(docs.get(i), docs.get(j));\n      }\n    }.sort(0, size);\n  }\n\n","bugFix":["62389a101dca1b996a7d6ca10d23bfb747924e06"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d10066de45b1b0d13af2eaf9294225d47a3c452b","date":1544466028,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesFieldUpdates#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesFieldUpdates#finish().mjava","sourceNew":"  /** Freezes internal data structures and sorts updates by docID for efficient iteration. */\n  final synchronized void finish() {\n    if (finished) {\n      throw new IllegalStateException(\"already finished\");\n    }\n    finished = true;\n    // shrink wrap\n    if (size < docs.size()) {\n      resize(size);\n    }\n    new InPlaceMergeSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        DocValuesFieldUpdates.this.swap(i, j);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        // increasing docID order:\n        // NOTE: we can have ties here, when the same docID was updated in the same segment, in which case we rely on sort being\n        // stable and preserving original order so the last update to that docID wins\n        return Long.compare(docs.get(i)>>>1, docs.get(j)>>>1);\n      }\n    }.sort(0, size);\n  }\n\n","sourceOld":"  /** Freezes internal data structures and sorts updates by docID for efficient iteration. */\n  final synchronized void finish() {\n    if (finished) {\n      throw new IllegalStateException(\"already finished\");\n    }\n    finished = true;\n\n    // shrink wrap\n    if (size < docs.size()) {\n      resize(size);\n    }\n    new InPlaceMergeSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        DocValuesFieldUpdates.this.swap(i, j);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        // increasing docID order:\n        // NOTE: we can have ties here, when the same docID was updated in the same segment, in which case we rely on sort being\n        // stable and preserving original order so the last update to that docID wins\n        return Long.compare(docs.get(i)>>>1, docs.get(j)>>>1);\n      }\n    }.sort(0, size);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fd7779c009bd4f21808396f2dc9e0fcdd762c85","date":1544617237,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesFieldUpdates#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesFieldUpdates#finish().mjava","sourceNew":"  /** Freezes internal data structures and sorts updates by docID for efficient iteration. */\n  final synchronized void finish() {\n    if (finished) {\n      throw new IllegalStateException(\"already finished\");\n    }\n    finished = true;\n\n    // Swaps and comparisons are quite costly with all these packed ints,\n    // so we use TimSorter instead of InPlaceMergeSorter, which has the nice\n    // property of doing fewer swaps/copies at the expense of a higher memory\n    // usage\n    final int tempSlotsOffset = size;\n    // we grow the current structures to get temporary storage\n    resize(Math.addExact(size, size / 2)); // 50% extra memory for temp slots\n    final int numTempSlots = Math.toIntExact(docs.size() - size);\n    new TimSorter(numTempSlots) {\n\n      @Override\n      protected void swap(int i, int j) {\n        DocValuesFieldUpdates.this.swap(i, j);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        // increasing docID order:\n        // NOTE: we can have ties here, when the same docID was updated in the same segment, in which case we rely on sort being\n        // stable and preserving original order so the last update to that docID wins\n        return Long.compare(docs.get(i)>>>1, docs.get(j)>>>1);\n      }\n\n      @Override\n      protected void save(int i, int len) {\n        assert len <= numTempSlots;\n        for (int k = 0; k < len; ++k) {\n          copy(i + k, tempSlotsOffset + k);\n        }\n      }\n\n      @Override\n      protected void restore(int src, int dest) {\n        copy(tempSlotsOffset + src, dest);\n      }\n\n      @Override\n      protected void copy(int src, int dest) {\n        DocValuesFieldUpdates.this.copy(src, dest);\n      }\n\n      @Override\n      protected int compareSaved(int i, int j) {\n        return compare(tempSlotsOffset + i, j);\n      }\n    }.sort(0, size);\n\n    // shrink wrap to save memory, this will also release temporary storage\n    resize(size);\n  }\n\n","sourceOld":"  /** Freezes internal data structures and sorts updates by docID for efficient iteration. */\n  final synchronized void finish() {\n    if (finished) {\n      throw new IllegalStateException(\"already finished\");\n    }\n    finished = true;\n    // shrink wrap\n    if (size < docs.size()) {\n      resize(size);\n    }\n    new InPlaceMergeSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        DocValuesFieldUpdates.this.swap(i, j);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        // increasing docID order:\n        // NOTE: we can have ties here, when the same docID was updated in the same segment, in which case we rely on sort being\n        // stable and preserving original order so the last update to that docID wins\n        return Long.compare(docs.get(i)>>>1, docs.get(j)>>>1);\n      }\n    }.sort(0, size);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25ad0598e48a10c150de9e6086e4e243f5dc500c","date":1544617237,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesFieldUpdates#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesFieldUpdates#finish().mjava","sourceNew":"  /** Freezes internal data structures and sorts updates by docID for efficient iteration. */\n  final synchronized void finish() {\n    if (finished) {\n      throw new IllegalStateException(\"already finished\");\n    }\n    finished = true;\n    // shrink wrap\n    if (size < docs.size()) {\n      resize(size);\n    }\n    new InPlaceMergeSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        DocValuesFieldUpdates.this.swap(i, j);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        // increasing docID order:\n        // NOTE: we can have ties here, when the same docID was updated in the same segment, in which case we rely on sort being\n        // stable and preserving original order so the last update to that docID wins\n        return Long.compare(docs.get(i)>>>1, docs.get(j)>>>1);\n      }\n    }.sort(0, size);\n  }\n\n","sourceOld":"  /** Freezes internal data structures and sorts updates by docID for efficient iteration. */\n  final synchronized void finish() {\n    if (finished) {\n      throw new IllegalStateException(\"already finished\");\n    }\n    finished = true;\n\n    // Swaps and comparisons are quite costly with all these packed ints,\n    // so we use TimSorter instead of InPlaceMergeSorter, which has the nice\n    // property of doing fewer swaps/copies at the expense of a higher memory\n    // usage\n    final int tempSlotsOffset = size;\n    // we grow the current structures to get temporary storage\n    resize(Math.addExact(size, size / 2)); // 50% extra memory for temp slots\n    final int numTempSlots = Math.toIntExact(docs.size() - size);\n    new TimSorter(numTempSlots) {\n\n      @Override\n      protected void swap(int i, int j) {\n        DocValuesFieldUpdates.this.swap(i, j);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        // increasing docID order:\n        // NOTE: we can have ties here, when the same docID was updated in the same segment, in which case we rely on sort being\n        // stable and preserving original order so the last update to that docID wins\n        return Long.compare(docs.get(i)>>>1, docs.get(j)>>>1);\n      }\n\n      @Override\n      protected void save(int i, int len) {\n        assert len <= numTempSlots;\n        for (int k = 0; k < len; ++k) {\n          copy(i + k, tempSlotsOffset + k);\n        }\n      }\n\n      @Override\n      protected void restore(int src, int dest) {\n        copy(tempSlotsOffset + src, dest);\n      }\n\n      @Override\n      protected void copy(int src, int dest) {\n        DocValuesFieldUpdates.this.copy(src, dest);\n      }\n\n      @Override\n      protected int compareSaved(int i, int j) {\n        return compare(tempSlotsOffset + i, j);\n      }\n    }.sort(0, size);\n\n    // shrink wrap to save memory, this will also release temporary storage\n    resize(size);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df23940a6cdf0f3970e0f00abadfa9533f2a4cdd","date":1545151517,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesFieldUpdates#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesFieldUpdates#finish().mjava","sourceNew":"  /** Freezes internal data structures and sorts updates by docID for efficient iteration. */\n  final synchronized void finish() {\n    if (finished) {\n      throw new IllegalStateException(\"already finished\");\n    }\n    finished = true;\n    // shrink wrap\n    if (size < docs.size()) {\n      resize(size);\n    }\n    if (size > 0) {\n      // We need a stable sort but InPlaceMergeSorter performs lots of swaps\n      // which hurts performance due to all the packed ints we are using.\n      // Another option would be TimSorter, but it needs additional API (copy to\n      // temp storage, compare with item in temp storage, etc.) so we instead\n      // use quicksort and record ords of each update to guarantee stability.\n      final PackedInts.Mutable ords = PackedInts.getMutable(size, PackedInts.bitsRequired(size - 1), PackedInts.DEFAULT);\n      for (int i = 0; i < size; ++i) {\n        ords.set(i, i);\n      }\n      new IntroSorter() {\n        @Override\n        protected void swap(int i, int j) {\n          final long tmpOrd = ords.get(i);\n          ords.set(i, ords.get(j));\n          ords.set(j, tmpOrd);\n\n          DocValuesFieldUpdates.this.swap(i, j);\n        }\n\n        @Override\n        protected int compare(int i, int j) {\n          // increasing docID order:\n          // NOTE: we can have ties here, when the same docID was updated in the same segment, in which case we rely on sort being\n          // stable and preserving original order so the last update to that docID wins\n          int cmp = Long.compare(docs.get(i)>>>1, docs.get(j)>>>1);\n          if (cmp == 0) {\n            cmp = (int) (ords.get(i) - ords.get(j));\n          }\n          return cmp;\n        }\n\n        long pivotDoc;\n        int pivotOrd;\n\n        @Override\n        protected void setPivot(int i) {\n          pivotDoc = docs.get(i) >>> 1;\n          pivotOrd = (int) ords.get(i);\n        }\n\n        @Override\n        protected int comparePivot(int j) {\n          int cmp = Long.compare(pivotDoc, docs.get(j) >>> 1);\n          if (cmp == 0) {\n            cmp = pivotOrd - (int) ords.get(j);\n          }\n          return cmp;\n        }\n      }.sort(0, size);\n    }\n  }\n\n","sourceOld":"  /** Freezes internal data structures and sorts updates by docID for efficient iteration. */\n  final synchronized void finish() {\n    if (finished) {\n      throw new IllegalStateException(\"already finished\");\n    }\n    finished = true;\n    // shrink wrap\n    if (size < docs.size()) {\n      resize(size);\n    }\n    new InPlaceMergeSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        DocValuesFieldUpdates.this.swap(i, j);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        // increasing docID order:\n        // NOTE: we can have ties here, when the same docID was updated in the same segment, in which case we rely on sort being\n        // stable and preserving original order so the last update to that docID wins\n        return Long.compare(docs.get(i)>>>1, docs.get(j)>>>1);\n      }\n    }.sort(0, size);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7e129bd6cb34a236558a49edf108a49d5c15e0e1":["28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"df23940a6cdf0f3970e0f00abadfa9533f2a4cdd":["25ad0598e48a10c150de9e6086e4e243f5dc500c"],"25ad0598e48a10c150de9e6086e4e243f5dc500c":["6fd7779c009bd4f21808396f2dc9e0fcdd762c85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"d10066de45b1b0d13af2eaf9294225d47a3c452b":["af08e9e692a7d133c6a60b1164563d53e13a1631"],"af08e9e692a7d133c6a60b1164563d53e13a1631":["62389a101dca1b996a7d6ca10d23bfb747924e06"],"6fd7779c009bd4f21808396f2dc9e0fcdd762c85":["d10066de45b1b0d13af2eaf9294225d47a3c452b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"62389a101dca1b996a7d6ca10d23bfb747924e06":["f42883db49d143abc1a0f176ba47e3388dafb608"],"f42883db49d143abc1a0f176ba47e3388dafb608":["28288370235ed02234a64753cdbf0c6ec096304a","7e129bd6cb34a236558a49edf108a49d5c15e0e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df23940a6cdf0f3970e0f00abadfa9533f2a4cdd"]},"commit2Childs":{"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"7e129bd6cb34a236558a49edf108a49d5c15e0e1":["f42883db49d143abc1a0f176ba47e3388dafb608"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["7e129bd6cb34a236558a49edf108a49d5c15e0e1","f42883db49d143abc1a0f176ba47e3388dafb608"],"df23940a6cdf0f3970e0f00abadfa9533f2a4cdd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"25ad0598e48a10c150de9e6086e4e243f5dc500c":["df23940a6cdf0f3970e0f00abadfa9533f2a4cdd"],"d10066de45b1b0d13af2eaf9294225d47a3c452b":["6fd7779c009bd4f21808396f2dc9e0fcdd762c85"],"af08e9e692a7d133c6a60b1164563d53e13a1631":["d10066de45b1b0d13af2eaf9294225d47a3c452b"],"6fd7779c009bd4f21808396f2dc9e0fcdd762c85":["25ad0598e48a10c150de9e6086e4e243f5dc500c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"62389a101dca1b996a7d6ca10d23bfb747924e06":["af08e9e692a7d133c6a60b1164563d53e13a1631"],"f42883db49d143abc1a0f176ba47e3388dafb608":["62389a101dca1b996a7d6ca10d23bfb747924e06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}