{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#testExtFieldUnqoted().mjava","commits":[{"id":"a53a291ad9b1cc050d846b68758c061a55d52734","date":1310437344,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#testExtFieldUnqoted().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/ext/TestExtendableQueryParser#testExtFieldUnqoted().mjava","sourceNew":"  public void testExtFieldUnqoted() throws Exception {\n    for (int i = 0; i < DELIMITERS.length; i++) {\n      Extensions ext = newExtensions(DELIMITERS[i]);\n      ext.add(\"testExt\", new ExtensionStub());\n      ExtendableQueryParser parser = (ExtendableQueryParser) getParser(null,\n          ext);\n      String field = ext.buildExtensionField(\"testExt\", \"aField\");\n      Query query = parser.parse(String.format(\"%s:foo bar\", field));\n      assertTrue(\"expected instance of BooleanQuery but was \"\n          + query.getClass(), query instanceof BooleanQuery);\n      BooleanQuery bquery = (BooleanQuery) query;\n      BooleanClause[] clauses = bquery.getClauses();\n      assertEquals(2, clauses.length);\n      BooleanClause booleanClause = clauses[0];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      TermQuery tquery = (TermQuery) query;\n      assertEquals(\"aField\", tquery.getTerm()\n          .field());\n      assertEquals(\"foo\", tquery.getTerm().text());\n\n      booleanClause = clauses[1];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      tquery = (TermQuery) query;\n      assertEquals(\"field\", tquery.getTerm().field());\n      assertEquals(\"bar\", tquery.getTerm().text());\n    }\n  }\n\n","sourceOld":"  public void testExtFieldUnqoted() throws Exception {\n    for (int i = 0; i < DELIMITERS.length; i++) {\n      Extensions ext = newExtensions(DELIMITERS[i]);\n      ext.add(\"testExt\", new ExtensionStub());\n      ExtendableQueryParser parser = (ExtendableQueryParser) getParser(null,\n          ext);\n      String field = ext.buildExtensionField(\"testExt\", \"aField\");\n      Query query = parser.parse(String.format(\"%s:foo bar\", field));\n      assertTrue(\"expected instance of BooleanQuery but was \"\n          + query.getClass(), query instanceof BooleanQuery);\n      BooleanQuery bquery = (BooleanQuery) query;\n      BooleanClause[] clauses = bquery.getClauses();\n      assertEquals(2, clauses.length);\n      BooleanClause booleanClause = clauses[0];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      TermQuery tquery = (TermQuery) query;\n      assertEquals(\"aField\", tquery.getTerm()\n          .field());\n      assertEquals(\"foo\", tquery.getTerm().text());\n\n      booleanClause = clauses[1];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      tquery = (TermQuery) query;\n      assertEquals(\"field\", tquery.getTerm().field());\n      assertEquals(\"bar\", tquery.getTerm().text());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#testExtFieldUnqoted().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#testExtFieldUnqoted().mjava","sourceNew":"  public void testExtFieldUnqoted() throws Exception {\n    for (int i = 0; i < DELIMITERS.length; i++) {\n      Extensions ext = newExtensions(DELIMITERS[i]);\n      ext.add(\"testExt\", new ExtensionStub());\n      ExtendableQueryParser parser = (ExtendableQueryParser) getParser(null,\n          ext);\n      String field = ext.buildExtensionField(\"testExt\", \"aField\");\n      Query query = parser.parse(String.format(\"%s:foo bar\", field));\n      assertTrue(\"expected instance of BooleanQuery but was \"\n          + query.getClass(), query instanceof BooleanQuery);\n      BooleanQuery bquery = (BooleanQuery) query;\n      BooleanClause[] clauses = bquery.getClauses();\n      assertEquals(2, clauses.length);\n      BooleanClause booleanClause = clauses[0];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      TermQuery tquery = (TermQuery) query;\n      assertEquals(\"aField\", tquery.getTerm()\n          .field());\n      assertEquals(\"foo\", tquery.getTerm().text());\n\n      booleanClause = clauses[1];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      tquery = (TermQuery) query;\n      assertEquals(\"field\", tquery.getTerm().field());\n      assertEquals(\"bar\", tquery.getTerm().text());\n    }\n  }\n\n","sourceOld":"  public void testExtFieldUnqoted() throws Exception {\n    for (int i = 0; i < DELIMITERS.length; i++) {\n      Extensions ext = newExtensions(DELIMITERS[i]);\n      ext.add(\"testExt\", new ExtensionStub());\n      ExtendableQueryParser parser = (ExtendableQueryParser) getParser(null,\n          ext);\n      String field = ext.buildExtensionField(\"testExt\", \"aField\");\n      Query query = parser.parse(String.format(\"%s:foo bar\", field));\n      assertTrue(\"expected instance of BooleanQuery but was \"\n          + query.getClass(), query instanceof BooleanQuery);\n      BooleanQuery bquery = (BooleanQuery) query;\n      BooleanClause[] clauses = bquery.getClauses();\n      assertEquals(2, clauses.length);\n      BooleanClause booleanClause = clauses[0];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      TermQuery tquery = (TermQuery) query;\n      assertEquals(\"aField\", tquery.getTerm()\n          .field());\n      assertEquals(\"foo\", tquery.getTerm().text());\n\n      booleanClause = clauses[1];\n      query = booleanClause.getQuery();\n      assertTrue(\"expected instance of TermQuery but was \" + query.getClass(),\n          query instanceof TermQuery);\n      tquery = (TermQuery) query;\n      assertEquals(\"field\", tquery.getTerm().field());\n      assertEquals(\"bar\", tquery.getTerm().text());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a53a291ad9b1cc050d846b68758c061a55d52734"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a53a291ad9b1cc050d846b68758c061a55d52734":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a53a291ad9b1cc050d846b68758c061a55d52734"],"a53a291ad9b1cc050d846b68758c061a55d52734":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}