{"path":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCoreUrl(String,String,ClusterState,Collection[Slice],boolean,boolean).mjava","commits":[{"id":"a760e2135dfe20a04dea360873d4de1c6a0280bb","date":1430762855,"type":1,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCoreUrl(String,String,ClusterState,Collection[Slice],boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreUrl(CoreContainer,String,String,ClusterState,Collection[Slice],boolean,boolean).mjava","sourceNew":"  private String getCoreUrl(String collectionName,\n                            String origCorename, ClusterState clusterState, Collection<Slice> slices,\n                            boolean byCoreName, boolean activeReplicas) {\n    String coreUrl;\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    for (Slice slice : slices) {\n      Map<String, Replica> sliceShards = slice.getReplicasMap();\n      for (Replica replica : sliceShards.values()) {\n        if (!activeReplicas || (liveNodes.contains(replica.getNodeName())\n            && replica.getState() == Replica.State.ACTIVE)) {\n\n          if (byCoreName && !collectionName.equals(replica.getStr(CORE_NAME_PROP))) {\n            // if it's by core name, make sure they match\n            continue;\n          }\n          if (replica.getStr(BASE_URL_PROP).equals(cores.getZkController().getBaseUrl())) {\n            // don't count a local core\n            continue;\n          }\n\n          if (origCorename != null) {\n            coreUrl = replica.getStr(BASE_URL_PROP) + \"/\" + origCorename;\n          } else {\n            coreUrl = replica.getCoreUrl();\n            if (coreUrl.endsWith(\"/\")) {\n              coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n            }\n          }\n\n          return coreUrl;\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private String getCoreUrl(CoreContainer cores, String collectionName,\n      String origCorename, ClusterState clusterState, Collection<Slice> slices,\n      boolean byCoreName, boolean activeReplicas) {\n    String coreUrl;\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    for (Slice slice : slices) {\n      Map<String,Replica> sliceShards = slice.getReplicasMap();\n      for (Replica replica : sliceShards.values()) {\n        if (!activeReplicas || (liveNodes.contains(replica.getNodeName())\n            && replica.getState() == Replica.State.ACTIVE)) {\n\n          if (byCoreName && !collectionName.equals(replica.getStr(ZkStateReader.CORE_NAME_PROP))) {\n            // if it's by core name, make sure they match\n            continue;\n          }\n          if (replica.getStr(ZkStateReader.BASE_URL_PROP).equals(cores.getZkController().getBaseUrl())) {\n            // don't count a local core\n            continue;\n          }\n\n          if (origCorename != null) {\n            coreUrl = replica.getStr(ZkStateReader.BASE_URL_PROP) + \"/\" + origCorename;\n          } else {\n            coreUrl = replica.getCoreUrl();\n            if (coreUrl.endsWith(\"/\")) {\n              coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n            }\n          }\n\n          return coreUrl;\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"166170a424a34de012e5bfe2f46f82466c6c2f3f","date":1433621012,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCoreUrl(String,String,ClusterState,Collection[Slice],boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCoreUrl(String,String,ClusterState,Collection[Slice],boolean,boolean).mjava","sourceNew":"  private String getCoreUrl(String collectionName,\n                            String origCorename, ClusterState clusterState, Collection<Slice> slices,\n                            boolean byCoreName, boolean activeReplicas) {\n    String coreUrl;\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    List<Slice> randomizedSlices = new ArrayList<>(slices.size());\n    randomizedSlices.addAll(slices);\n    Collections.shuffle(randomizedSlices, random);\n\n    for (Slice slice : randomizedSlices) {\n      List<Replica> randomizedReplicas = new ArrayList<>();\n      randomizedReplicas.addAll(slice.getReplicas());\n      Collections.shuffle(randomizedReplicas, random);\n\n      for (Replica replica : randomizedReplicas) {\n        if (!activeReplicas || (liveNodes.contains(replica.getNodeName())\n            && replica.getState() == Replica.State.ACTIVE)) {\n\n          if (byCoreName && !collectionName.equals(replica.getStr(CORE_NAME_PROP))) {\n            // if it's by core name, make sure they match\n            continue;\n          }\n          if (replica.getStr(BASE_URL_PROP).equals(cores.getZkController().getBaseUrl())) {\n            // don't count a local core\n            continue;\n          }\n\n          if (origCorename != null) {\n            coreUrl = replica.getStr(BASE_URL_PROP) + \"/\" + origCorename;\n          } else {\n            coreUrl = replica.getCoreUrl();\n            if (coreUrl.endsWith(\"/\")) {\n              coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n            }\n          }\n\n          return coreUrl;\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private String getCoreUrl(String collectionName,\n                            String origCorename, ClusterState clusterState, Collection<Slice> slices,\n                            boolean byCoreName, boolean activeReplicas) {\n    String coreUrl;\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    for (Slice slice : slices) {\n      Map<String, Replica> sliceShards = slice.getReplicasMap();\n      for (Replica replica : sliceShards.values()) {\n        if (!activeReplicas || (liveNodes.contains(replica.getNodeName())\n            && replica.getState() == Replica.State.ACTIVE)) {\n\n          if (byCoreName && !collectionName.equals(replica.getStr(CORE_NAME_PROP))) {\n            // if it's by core name, make sure they match\n            continue;\n          }\n          if (replica.getStr(BASE_URL_PROP).equals(cores.getZkController().getBaseUrl())) {\n            // don't count a local core\n            continue;\n          }\n\n          if (origCorename != null) {\n            coreUrl = replica.getStr(BASE_URL_PROP) + \"/\" + origCorename;\n          } else {\n            coreUrl = replica.getCoreUrl();\n            if (coreUrl.endsWith(\"/\")) {\n              coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n            }\n          }\n\n          return coreUrl;\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c84df91ca6a2e8d6f26f185663112546a27f6b45","date":1536077760,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCoreUrl(String,String,ClusterState,List[Slice],boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCoreUrl(String,String,ClusterState,Collection[Slice],boolean,boolean).mjava","sourceNew":"  private String getCoreUrl(String collectionName,\n                            String origCorename, ClusterState clusterState, List<Slice> slices,\n                            boolean byCoreName, boolean activeReplicas) {\n    String coreUrl;\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    Collections.shuffle(slices, random);\n\n    for (Slice slice : slices) {\n      List<Replica> randomizedReplicas = new ArrayList<>();\n      randomizedReplicas.addAll(slice.getReplicas());\n      Collections.shuffle(randomizedReplicas, random);\n\n      for (Replica replica : randomizedReplicas) {\n        if (!activeReplicas || (liveNodes.contains(replica.getNodeName())\n            && replica.getState() == Replica.State.ACTIVE)) {\n\n          if (byCoreName && !collectionName.equals(replica.getStr(CORE_NAME_PROP))) {\n            // if it's by core name, make sure they match\n            continue;\n          }\n          if (replica.getStr(BASE_URL_PROP).equals(cores.getZkController().getBaseUrl())) {\n            // don't count a local core\n            continue;\n          }\n\n          if (origCorename != null) {\n            coreUrl = replica.getStr(BASE_URL_PROP) + \"/\" + origCorename;\n          } else {\n            coreUrl = replica.getCoreUrl();\n            if (coreUrl.endsWith(\"/\")) {\n              coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n            }\n          }\n\n          return coreUrl;\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private String getCoreUrl(String collectionName,\n                            String origCorename, ClusterState clusterState, Collection<Slice> slices,\n                            boolean byCoreName, boolean activeReplicas) {\n    String coreUrl;\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    List<Slice> randomizedSlices = new ArrayList<>(slices.size());\n    randomizedSlices.addAll(slices);\n    Collections.shuffle(randomizedSlices, random);\n\n    for (Slice slice : randomizedSlices) {\n      List<Replica> randomizedReplicas = new ArrayList<>();\n      randomizedReplicas.addAll(slice.getReplicas());\n      Collections.shuffle(randomizedReplicas, random);\n\n      for (Replica replica : randomizedReplicas) {\n        if (!activeReplicas || (liveNodes.contains(replica.getNodeName())\n            && replica.getState() == Replica.State.ACTIVE)) {\n\n          if (byCoreName && !collectionName.equals(replica.getStr(CORE_NAME_PROP))) {\n            // if it's by core name, make sure they match\n            continue;\n          }\n          if (replica.getStr(BASE_URL_PROP).equals(cores.getZkController().getBaseUrl())) {\n            // don't count a local core\n            continue;\n          }\n\n          if (origCorename != null) {\n            coreUrl = replica.getStr(BASE_URL_PROP) + \"/\" + origCorename;\n          } else {\n            coreUrl = replica.getCoreUrl();\n            if (coreUrl.endsWith(\"/\")) {\n              coreUrl = coreUrl.substring(0, coreUrl.length() - 1);\n            }\n          }\n\n          return coreUrl;\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c84df91ca6a2e8d6f26f185663112546a27f6b45":["166170a424a34de012e5bfe2f46f82466c6c2f3f"],"166170a424a34de012e5bfe2f46f82466c6c2f3f":["a760e2135dfe20a04dea360873d4de1c6a0280bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c84df91ca6a2e8d6f26f185663112546a27f6b45"]},"commit2Childs":{"c84df91ca6a2e8d6f26f185663112546a27f6b45":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"166170a424a34de012e5bfe2f46f82466c6c2f3f":["c84df91ca6a2e8d6f26f185663112546a27f6b45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a760e2135dfe20a04dea360873d4de1c6a0280bb"],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["166170a424a34de012e5bfe2f46f82466c6c2f3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}