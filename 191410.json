{"path":"lucene/backwards/src/java/org/apache/lucene/index/DirectoryReader.MultiTermDocs#read(int[],int[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/DirectoryReader.MultiTermDocs#read(int[],int[]).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/DirectoryReader.MultiTermDocs#read(int[],int[]).mjava","sourceNew":"    /** Optimized implementation. */\n    public int read(final int[] docs, final int[] freqs) throws IOException {\n      while (true) {\n        while (current == null) {\n          if (pointer < readers.length) {      // try next segment\n            if (tenum != null) {\n              smi = tenum.matchingSegments[matchingSegmentPos++];\n              if (smi==null) {\n                pointer = readers.length;\n                return 0;\n              }\n              pointer = smi.ord;\n            }\n            base = starts[pointer];\n            current = termDocs(pointer++);\n          } else {\n            return 0;\n          }\n        }\n        int end = current.read(docs, freqs);\n        if (end == 0) {          // none left in segment\n          current = null;\n        } else {            // got some\n          final int b = base;        // adjust doc numbers\n          for (int i = 0; i < end; i++)\n           docs[i] += b;\n          return end;\n        }\n      }\n    }\n\n","sourceOld":"    /** Optimized implementation. */\n    public int read(final int[] docs, final int[] freqs) throws IOException {\n      while (true) {\n        while (current == null) {\n          if (pointer < readers.length) {      // try next segment\n            if (tenum != null) {\n              smi = tenum.matchingSegments[matchingSegmentPos++];\n              if (smi==null) {\n                pointer = readers.length;\n                return 0;\n              }\n              pointer = smi.ord;\n            }\n            base = starts[pointer];\n            current = termDocs(pointer++);\n          } else {\n            return 0;\n          }\n        }\n        int end = current.read(docs, freqs);\n        if (end == 0) {          // none left in segment\n          current = null;\n        } else {            // got some\n          final int b = base;        // adjust doc numbers\n          for (int i = 0; i < end; i++)\n           docs[i] += b;\n          return end;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/DirectoryReader.MultiTermDocs#read(int[],int[]).mjava","sourceNew":null,"sourceOld":"    /** Optimized implementation. */\n    public int read(final int[] docs, final int[] freqs) throws IOException {\n      while (true) {\n        while (current == null) {\n          if (pointer < readers.length) {      // try next segment\n            if (tenum != null) {\n              smi = tenum.matchingSegments[matchingSegmentPos++];\n              if (smi==null) {\n                pointer = readers.length;\n                return 0;\n              }\n              pointer = smi.ord;\n            }\n            base = starts[pointer];\n            current = termDocs(pointer++);\n          } else {\n            return 0;\n          }\n        }\n        int end = current.read(docs, freqs);\n        if (end == 0) {          // none left in segment\n          current = null;\n        } else {            // got some\n          final int b = base;        // adjust doc numbers\n          for (int i = 0; i < end; i++)\n           docs[i] += b;\n          return end;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}