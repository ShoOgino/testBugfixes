{"path":"src/java/org/apache/lucene/index/CompoundFileReader.CSInputStream#readInternal(byte[],int,int).mjava","commits":[{"id":"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1","date":1064527311,"type":0,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/CompoundFileReader.CSInputStream#readInternal(byte[],int,int).mjava","pathOld":"/dev/null","sourceNew":"        /** Expert: implements buffer refill.  Reads bytes from the current \n         *  position in the input.\n         * @param b the array to read bytes into\n         * @param offset the offset in the array to start storing bytes\n         * @param length the number of bytes to read\n         */\n        protected void readInternal(byte[] b, int offset, int len)\n        throws IOException \n        {\n            base.readBytes(b, offset, len);\n        }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a67f534c1db9eb255bc5a5137c7bf362ff90c276","date":1066054684,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/CompoundFileReader.CSInputStream#readInternal(byte[],int,int).mjava","pathOld":"src/java/org/apache/lucene/index/CompoundFileReader.CSInputStream#readInternal(byte[],int,int).mjava","sourceNew":"        /** Expert: implements buffer refill.  Reads bytes from the current\n         *  position in the input.\n         * @param b the array to read bytes into\n         * @param offset the offset in the array to start storing bytes\n         * @param length the number of bytes to read\n         */\n        protected void readInternal(byte[] b, int offset, int len)\n        throws IOException\n        {\n            base.readBytes(b, offset, len);\n        }\n\n","sourceOld":"        /** Expert: implements buffer refill.  Reads bytes from the current \n         *  position in the input.\n         * @param b the array to read bytes into\n         * @param offset the offset in the array to start storing bytes\n         * @param length the number of bytes to read\n         */\n        protected void readInternal(byte[] b, int offset, int len)\n        throws IOException \n        {\n            base.readBytes(b, offset, len);\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e03c5e981c4cba6eeb493ff5749260a2204cd2f5","date":1069354904,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/CompoundFileReader.CSInputStream#readInternal(byte[],int,int).mjava","pathOld":"src/java/org/apache/lucene/index/CompoundFileReader.CSInputStream#readInternal(byte[],int,int).mjava","sourceNew":"        /** Expert: implements buffer refill.  Reads bytes from the current\n         *  position in the input.\n         * @param b the array to read bytes into\n         * @param offset the offset in the array to start storing bytes\n         * @param length the number of bytes to read\n         */\n        protected void readInternal(byte[] b, int offset, int len)\n        throws IOException\n        {\n            synchronized (base) {\n              long start = getFilePointer();\n              if(start + len > length)\n                throw new IOException(\"read past EOF\");\n              base.seek(fileOffset + start);\n              base.readBytes(b, offset, len);\n            }\n        }\n\n","sourceOld":"        /** Expert: implements buffer refill.  Reads bytes from the current\n         *  position in the input.\n         * @param b the array to read bytes into\n         * @param offset the offset in the array to start storing bytes\n         * @param length the number of bytes to read\n         */\n        protected void readInternal(byte[] b, int offset, int len)\n        throws IOException\n        {\n            base.readBytes(b, offset, len);\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b7588c0a4ce53d5d6256d0cc34eaac2bcc970c5","date":1091877002,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/CompoundFileReader.CSInputStream#readInternal(byte[],int,int).mjava","pathOld":"src/java/org/apache/lucene/index/CompoundFileReader.CSInputStream#readInternal(byte[],int,int).mjava","sourceNew":"        /** Expert: implements buffer refill.  Reads bytes from the current\n         *  position in the input.\n         * @param b the array to read bytes into\n         * @param offset the offset in the array to start storing bytes\n         * @param len the number of bytes to read\n         */\n        protected void readInternal(byte[] b, int offset, int len)\n        throws IOException\n        {\n            synchronized (base) {\n              long start = getFilePointer();\n              if(start + len > length)\n                throw new IOException(\"read past EOF\");\n              base.seek(fileOffset + start);\n              base.readBytes(b, offset, len);\n            }\n        }\n\n","sourceOld":"        /** Expert: implements buffer refill.  Reads bytes from the current\n         *  position in the input.\n         * @param b the array to read bytes into\n         * @param offset the offset in the array to start storing bytes\n         * @param length the number of bytes to read\n         */\n        protected void readInternal(byte[] b, int offset, int len)\n        throws IOException\n        {\n            synchronized (base) {\n              long start = getFilePointer();\n              if(start + len > length)\n                throw new IOException(\"read past EOF\");\n              base.seek(fileOffset + start);\n              base.readBytes(b, offset, len);\n            }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"591e76e4f4581ee94453dd46609d65b9c2e825ee","date":1092775126,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/CompoundFileReader.CSInputStream#readInternal(byte[],int,int).mjava","pathOld":"src/java/org/apache/lucene/index/CompoundFileReader.CSInputStream#readInternal(byte[],int,int).mjava","sourceNew":"        /** Expert: implements buffer refill.  Reads bytes from the current\n         *  position in the input.\n         * @param b the array to read bytes into\n         * @param offset the offset in the array to start storing bytes\n         * @param length the number of bytes to read\n         */\n        protected void readInternal(byte[] b, int offset, int len)\n        throws IOException\n        {\n            synchronized (base) {\n              long start = getFilePointer();\n              if(start + len > length)\n                throw new IOException(\"read past EOF\");\n              base.seek(fileOffset + start);\n              base.readBytes(b, offset, len);\n            }\n        }\n\n","sourceOld":"        /** Expert: implements buffer refill.  Reads bytes from the current\n         *  position in the input.\n         * @param b the array to read bytes into\n         * @param offset the offset in the array to start storing bytes\n         * @param len the number of bytes to read\n         */\n        protected void readInternal(byte[] b, int offset, int len)\n        throws IOException\n        {\n            synchronized (base) {\n              long start = getFilePointer();\n              if(start + len > length)\n                throw new IOException(\"read past EOF\");\n              base.seek(fileOffset + start);\n              base.readBytes(b, offset, len);\n            }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9373725904771cecbc190d7634764040caeba922","date":1092776363,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/CompoundFileReader.CSInputStream#readInternal(byte[],int,int).mjava","pathOld":"src/java/org/apache/lucene/index/CompoundFileReader.CSInputStream#readInternal(byte[],int,int).mjava","sourceNew":"        /** Expert: implements buffer refill.  Reads bytes from the current\n         *  position in the input.\n         * @param b the array to read bytes into\n         * @param offset the offset in the array to start storing bytes\n         * @param len the number of bytes to read\n         */\n        protected void readInternal(byte[] b, int offset, int len)\n        throws IOException\n        {\n            synchronized (base) {\n              long start = getFilePointer();\n              if(start + len > length)\n                throw new IOException(\"read past EOF\");\n              base.seek(fileOffset + start);\n              base.readBytes(b, offset, len);\n            }\n        }\n\n","sourceOld":"        /** Expert: implements buffer refill.  Reads bytes from the current\n         *  position in the input.\n         * @param b the array to read bytes into\n         * @param offset the offset in the array to start storing bytes\n         * @param length the number of bytes to read\n         */\n        protected void readInternal(byte[] b, int offset, int len)\n        throws IOException\n        {\n            synchronized (base) {\n              long start = getFilePointer();\n              if(start + len > length)\n                throw new IOException(\"read past EOF\");\n              base.seek(fileOffset + start);\n              base.readBytes(b, offset, len);\n            }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e971ba25509e21a130fef61f0687be0446ca27a0","date":1095369217,"type":5,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/CompoundFileReader.CSIndexInput#readInternal(byte[],int,int).mjava","pathOld":"src/java/org/apache/lucene/index/CompoundFileReader.CSInputStream#readInternal(byte[],int,int).mjava","sourceNew":"        /** Expert: implements buffer refill.  Reads bytes from the current\n         *  position in the input.\n         * @param b the array to read bytes into\n         * @param offset the offset in the array to start storing bytes\n         * @param len the number of bytes to read\n         */\n        protected void readInternal(byte[] b, int offset, int len)\n        throws IOException\n        {\n            synchronized (base) {\n              long start = getFilePointer();\n              if(start + len > length)\n                throw new IOException(\"read past EOF\");\n              base.seek(fileOffset + start);\n              base.readBytes(b, offset, len);\n            }\n        }\n\n","sourceOld":"        /** Expert: implements buffer refill.  Reads bytes from the current\n         *  position in the input.\n         * @param b the array to read bytes into\n         * @param offset the offset in the array to start storing bytes\n         * @param len the number of bytes to read\n         */\n        protected void readInternal(byte[] b, int offset, int len)\n        throws IOException\n        {\n            synchronized (base) {\n              long start = getFilePointer();\n              if(start + len > length)\n                throw new IOException(\"read past EOF\");\n              base.seek(fileOffset + start);\n              base.readBytes(b, offset, len);\n            }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b7588c0a4ce53d5d6256d0cc34eaac2bcc970c5":["e03c5e981c4cba6eeb493ff5749260a2204cd2f5"],"e971ba25509e21a130fef61f0687be0446ca27a0":["9373725904771cecbc190d7634764040caeba922"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e03c5e981c4cba6eeb493ff5749260a2204cd2f5":["a67f534c1db9eb255bc5a5137c7bf362ff90c276"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"591e76e4f4581ee94453dd46609d65b9c2e825ee":["3b7588c0a4ce53d5d6256d0cc34eaac2bcc970c5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e971ba25509e21a130fef61f0687be0446ca27a0"],"9373725904771cecbc190d7634764040caeba922":["591e76e4f4581ee94453dd46609d65b9c2e825ee"],"a67f534c1db9eb255bc5a5137c7bf362ff90c276":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"]},"commit2Childs":{"3b7588c0a4ce53d5d6256d0cc34eaac2bcc970c5":["591e76e4f4581ee94453dd46609d65b9c2e825ee"],"e971ba25509e21a130fef61f0687be0446ca27a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"e03c5e981c4cba6eeb493ff5749260a2204cd2f5":["3b7588c0a4ce53d5d6256d0cc34eaac2bcc970c5"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["a67f534c1db9eb255bc5a5137c7bf362ff90c276"],"591e76e4f4581ee94453dd46609d65b9c2e825ee":["9373725904771cecbc190d7634764040caeba922"],"9373725904771cecbc190d7634764040caeba922":["e971ba25509e21a130fef61f0687be0446ca27a0"],"a67f534c1db9eb255bc5a5137c7bf362ff90c276":["e03c5e981c4cba6eeb493ff5749260a2204cd2f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}