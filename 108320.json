{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerm(Term,ThreadState).mjava","commits":[{"id":"14975dba6846360ff627c6797726fa4899a3413d","date":1295174738,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerm(Term,ThreadState).mjava","pathOld":"/dev/null","sourceNew":"  boolean deleteTerm(final Term term, ThreadState exclude) {\n    Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n\n    boolean deleted = false;\n    while (threadsIterator.hasNext()) {\n      deleted = true;\n      ThreadState state = threadsIterator.next();\n      if (state != exclude) {\n        state.lock();\n        try {\n          state.perThread.deleteTerm(term);\n        } finally {\n          state.unlock();\n        }\n      }\n    }\n\n    return deleted;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86c34ea6a885f625f2e464756450d45b72653ef3","date":1295256222,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerm(Term,ThreadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerm(Term,ThreadState).mjava","sourceNew":"  boolean deleteTerm(final Term term, ThreadState exclude) {\n    Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n\n    boolean deleted = false;\n    while (threadsIterator.hasNext()) {\n      deleted = true;\n      ThreadState state = threadsIterator.next();\n      if (state != exclude) {\n        state.lock();\n        try {\n          state.perThread.deleteTerms(term);\n        } finally {\n          state.unlock();\n        }\n      }\n    }\n\n    return deleted;\n  }\n\n","sourceOld":"  boolean deleteTerm(final Term term, ThreadState exclude) {\n    Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n\n    boolean deleted = false;\n    while (threadsIterator.hasNext()) {\n      deleted = true;\n      ThreadState state = threadsIterator.next();\n      if (state != exclude) {\n        state.lock();\n        try {\n          state.perThread.deleteTerm(term);\n        } finally {\n          state.unlock();\n        }\n      }\n    }\n\n    return deleted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf","date":1298618128,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerm(Term,ThreadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerm(Term,ThreadState).mjava","sourceNew":"  void deleteTerm(final Term term, ThreadState exclude) {\n    synchronized(this) {\n      pendingDeletes.addTerm(term, BufferedDeletes.MAX_INT);\n    }\n\n    Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n\n    while (threadsIterator.hasNext()) {\n      ThreadState state = threadsIterator.next();\n      if (state != exclude) {\n        state.lock();\n        try {\n          state.perThread.deleteTerms(term);\n        } finally {\n          state.unlock();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  boolean deleteTerm(final Term term, ThreadState exclude) {\n    Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n\n    boolean deleted = false;\n    while (threadsIterator.hasNext()) {\n      deleted = true;\n      ThreadState state = threadsIterator.next();\n      if (state != exclude) {\n        state.lock();\n        try {\n          state.perThread.deleteTerms(term);\n        } finally {\n          state.unlock();\n        }\n      }\n    }\n\n    return deleted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2ed1b9b7b46829fe3199afe9a8bc203f201b175","date":1301491807,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerm(Term,ThreadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerm(Term,ThreadState).mjava","sourceNew":"  void deleteTerm(final Term term, ThreadState exclude) throws IOException {\n    synchronized(this) {\n      pendingDeletes.addTerm(term, BufferedDeletes.MAX_INT);\n    }\n\n    Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n\n    while (threadsIterator.hasNext()) {\n      ThreadState state = threadsIterator.next();\n      if (state != exclude) {\n        state.lock();\n        try {\n          state.perThread.deleteTerms(term);\n          flushControl.doOnDelete(state);\n        } finally {\n          state.unlock();\n        }\n      }\n    }\n    if (flushControl.flushDeletes.getAndSet(false)) {\n      flushDeletes();\n    }\n  }\n\n","sourceOld":"  void deleteTerm(final Term term, ThreadState exclude) {\n    synchronized(this) {\n      pendingDeletes.addTerm(term, BufferedDeletes.MAX_INT);\n    }\n\n    Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n\n    while (threadsIterator.hasNext()) {\n      ThreadState state = threadsIterator.next();\n      if (state != exclude) {\n        state.lock();\n        try {\n          state.perThread.deleteTerms(term);\n        } finally {\n          state.unlock();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a14804b9a6af0e91d3c979f2a531bd324c421157","date":1301661727,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerm(Term,ThreadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerm(Term,ThreadState).mjava","sourceNew":"  void deleteTerm(final Term term, ThreadState exclude) throws IOException {\n    synchronized(this) {\n      pendingDeletes.addTerm(term, BufferedDeletes.MAX_INT);\n    }\n\n    final Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n\n    while (threadsIterator.hasNext()) {\n      ThreadState state = threadsIterator.next();\n      if (state != exclude) {\n        state.lock();\n        try {\n          state.perThread.deleteTerms(term);\n          flushControl.doOnDelete(state);\n        } finally {\n          state.unlock();\n        }\n      }\n    }\n    if (flushControl.flushDeletes.getAndSet(false)) {\n      flushDeletes();\n    }\n  }\n\n","sourceOld":"  void deleteTerm(final Term term, ThreadState exclude) throws IOException {\n    synchronized(this) {\n      pendingDeletes.addTerm(term, BufferedDeletes.MAX_INT);\n    }\n\n    Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n\n    while (threadsIterator.hasNext()) {\n      ThreadState state = threadsIterator.next();\n      if (state != exclude) {\n        state.lock();\n        try {\n          state.perThread.deleteTerms(term);\n          flushControl.doOnDelete(state);\n        } finally {\n          state.unlock();\n        }\n      }\n    }\n    if (flushControl.flushDeletes.getAndSet(false)) {\n      flushDeletes();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"327863a2fd61e831028b6c56c8fef6b00a44eb0b","date":1302686439,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteTerm(Term,ThreadState).mjava","sourceNew":null,"sourceOld":"  void deleteTerm(final Term term, ThreadState exclude) throws IOException {\n    synchronized(this) {\n      pendingDeletes.addTerm(term, BufferedDeletes.MAX_INT);\n    }\n\n    final Iterator<ThreadState> threadsIterator = perThreadPool.getActivePerThreadsIterator();\n\n    while (threadsIterator.hasNext()) {\n      ThreadState state = threadsIterator.next();\n      if (state != exclude) {\n        state.lock();\n        try {\n          state.perThread.deleteTerms(term);\n          flushControl.doOnDelete(state);\n        } finally {\n          state.unlock();\n        }\n      }\n    }\n    if (flushControl.flushDeletes.getAndSet(false)) {\n      flushDeletes();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"86c34ea6a885f625f2e464756450d45b72653ef3":["14975dba6846360ff627c6797726fa4899a3413d"],"bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf":["86c34ea6a885f625f2e464756450d45b72653ef3"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["a14804b9a6af0e91d3c979f2a531bd324c421157"],"14975dba6846360ff627c6797726fa4899a3413d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a14804b9a6af0e91d3c979f2a531bd324c421157":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["a14804b9a6af0e91d3c979f2a531bd324c421157"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["14975dba6846360ff627c6797726fa4899a3413d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86c34ea6a885f625f2e464756450d45b72653ef3":["bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf"],"bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"14975dba6846360ff627c6797726fa4899a3413d":["86c34ea6a885f625f2e464756450d45b72653ef3"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":[],"a14804b9a6af0e91d3c979f2a531bd324c421157":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["327863a2fd61e831028b6c56c8fef6b00a44eb0b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}