{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilterFactory#LengthFilterFactory(Map[String,String]).mjava","commits":[{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilterFactory#LengthFilterFactory(Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates a new LengthFilterFactory */\n  public LengthFilterFactory(Map<String, String> args) {\n    super(args);\n    min = getInt(args, MIN_KEY, 0, false);\n    max = getInt(args, MAX_KEY, 0, false);\n    enablePositionIncrements = getBoolean(args, \"enablePositionIncrements\", false);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcae30df9fe9300569835aef42ec65802c7c0afb","date":1364859933,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilterFactory#LengthFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilterFactory#LengthFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new LengthFilterFactory */\n  public LengthFilterFactory(Map<String, String> args) {\n    super(args);\n    min = requireInt(args, MIN_KEY);\n    max = requireInt(args, MAX_KEY);\n    enablePositionIncrements = getBoolean(args, \"enablePositionIncrements\", false);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new LengthFilterFactory */\n  public LengthFilterFactory(Map<String, String> args) {\n    super(args);\n    min = getInt(args, MIN_KEY, 0, false);\n    max = getInt(args, MAX_KEY, 0, false);\n    enablePositionIncrements = getBoolean(args, \"enablePositionIncrements\", false);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eafa8c5eabc3dacd34680054e6a33bda024080ac","date":1367691488,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilterFactory#LengthFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilterFactory#LengthFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new LengthFilterFactory */\n  public LengthFilterFactory(Map<String, String> args) {\n    super(args);\n    min = requireInt(args, MIN_KEY);\n    max = requireInt(args, MAX_KEY);\n    enablePositionIncrements = getBoolean(args, \"enablePositionIncrements\", true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new LengthFilterFactory */\n  public LengthFilterFactory(Map<String, String> args) {\n    super(args);\n    min = requireInt(args, MIN_KEY);\n    max = requireInt(args, MAX_KEY);\n    enablePositionIncrements = getBoolean(args, \"enablePositionIncrements\", false);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"192e49c0445803405b0bc0eebc8b758485480c21","date":1367699151,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilterFactory#LengthFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LengthFilterFactory#LengthFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new LengthFilterFactory */\n  public LengthFilterFactory(Map<String, String> args) {\n    super(args);\n    min = requireInt(args, MIN_KEY);\n    max = requireInt(args, MAX_KEY);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new LengthFilterFactory */\n  public LengthFilterFactory(Map<String, String> args) {\n    super(args);\n    min = requireInt(args, MIN_KEY);\n    max = requireInt(args, MAX_KEY);\n    enablePositionIncrements = getBoolean(args, \"enablePositionIncrements\", true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"192e49c0445803405b0bc0eebc8b758485480c21":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"dcae30df9fe9300569835aef42ec65802c7c0afb":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["dcae30df9fe9300569835aef42ec65802c7c0afb"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["192e49c0445803405b0bc0eebc8b758485480c21"]},"commit2Childs":{"192e49c0445803405b0bc0eebc8b758485480c21":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dcae30df9fe9300569835aef42ec65802c7c0afb":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["192e49c0445803405b0bc0eebc8b758485480c21"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["dcae30df9fe9300569835aef42ec65802c7c0afb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}