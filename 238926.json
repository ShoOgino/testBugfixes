{"path":"lucene/core/src/java/org/apache/lucene/search/Weight#matches(LeafReaderContext,int).mjava","commits":[{"id":"657704b225b01c6ff4bada5b6667f1f60aaaad0f","date":1523436207,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Weight#matches(LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns {@link Matches} for a specific document, or {@code null} if the document\n   * does not match the parent query\n   *\n   * A query match that contains no position information (for example, a Point or\n   * DocValues query) will return {@link Matches#MATCH_WITH_NO_TERMS}\n   *\n   * @param context the reader's context to create the {@link Matches} for\n   * @param doc     the document's id relative to the given context's reader\n   */\n  public Matches matches(LeafReaderContext context, int doc) throws IOException {\n    Scorer scorer = scorer(context);\n    if (scorer == null) {\n      return null;\n    }\n    final TwoPhaseIterator twoPhase = scorer.twoPhaseIterator();\n    if (twoPhase == null) {\n      if (scorer.iterator().advance(doc) != doc) {\n        return null;\n      }\n    }\n    else {\n      if (twoPhase.approximation().advance(doc) != doc || twoPhase.matches() == false) {\n        return null;\n      }\n    }\n    return Matches.MATCH_WITH_NO_TERMS;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Weight#matches(LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns {@link Matches} for a specific document, or {@code null} if the document\n   * does not match the parent query\n   *\n   * A query match that contains no position information (for example, a Point or\n   * DocValues query) will return {@link Matches#MATCH_WITH_NO_TERMS}\n   *\n   * @param context the reader's context to create the {@link Matches} for\n   * @param doc     the document's id relative to the given context's reader\n   */\n  public Matches matches(LeafReaderContext context, int doc) throws IOException {\n    Scorer scorer = scorer(context);\n    if (scorer == null) {\n      return null;\n    }\n    final TwoPhaseIterator twoPhase = scorer.twoPhaseIterator();\n    if (twoPhase == null) {\n      if (scorer.iterator().advance(doc) != doc) {\n        return null;\n      }\n    }\n    else {\n      if (twoPhase.approximation().advance(doc) != doc || twoPhase.matches() == false) {\n        return null;\n      }\n    }\n    return Matches.MATCH_WITH_NO_TERMS;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f096f495a4a51c97c82cf6fd06e107c12f797b","date":1523545198,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Weight#matches(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Weight#matches(LeafReaderContext,int).mjava","sourceNew":"  /**\n   * Returns {@link Matches} for a specific document, or {@code null} if the document\n   * does not match the parent query\n   *\n   * A query match that contains no position information (for example, a Point or\n   * DocValues query) will return {@link Matches#MATCH_WITH_NO_TERMS}\n   *\n   * @param context the reader's context to create the {@link Matches} for\n   * @param doc     the document's id relative to the given context's reader\n   * @lucene.experimental\n   */\n  public Matches matches(LeafReaderContext context, int doc) throws IOException {\n    Scorer scorer = scorer(context);\n    if (scorer == null) {\n      return null;\n    }\n    final TwoPhaseIterator twoPhase = scorer.twoPhaseIterator();\n    if (twoPhase == null) {\n      if (scorer.iterator().advance(doc) != doc) {\n        return null;\n      }\n    }\n    else {\n      if (twoPhase.approximation().advance(doc) != doc || twoPhase.matches() == false) {\n        return null;\n      }\n    }\n    return Matches.MATCH_WITH_NO_TERMS;\n  }\n\n","sourceOld":"  /**\n   * Returns {@link Matches} for a specific document, or {@code null} if the document\n   * does not match the parent query\n   *\n   * A query match that contains no position information (for example, a Point or\n   * DocValues query) will return {@link Matches#MATCH_WITH_NO_TERMS}\n   *\n   * @param context the reader's context to create the {@link Matches} for\n   * @param doc     the document's id relative to the given context's reader\n   */\n  public Matches matches(LeafReaderContext context, int doc) throws IOException {\n    Scorer scorer = scorer(context);\n    if (scorer == null) {\n      return null;\n    }\n    final TwoPhaseIterator twoPhase = scorer.twoPhaseIterator();\n    if (twoPhase == null) {\n      if (scorer.iterator().advance(doc) != doc) {\n        return null;\n      }\n    }\n    else {\n      if (twoPhase.approximation().advance(doc) != doc || twoPhase.matches() == false) {\n        return null;\n      }\n    }\n    return Matches.MATCH_WITH_NO_TERMS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2375622520a4e480775e3104a2f9a423536755b4","date":1536005521,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Weight#matches(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Weight#matches(LeafReaderContext,int).mjava","sourceNew":"  /**\n   * Returns {@link Matches} for a specific document, or {@code null} if the document\n   * does not match the parent query\n   *\n   * A query match that contains no position information (for example, a Point or\n   * DocValues query) will return {@link MatchesUtils#MATCH_WITH_NO_TERMS}\n   *\n   * @param context the reader's context to create the {@link Matches} for\n   * @param doc     the document's id relative to the given context's reader\n   * @lucene.experimental\n   */\n  public Matches matches(LeafReaderContext context, int doc) throws IOException {\n    Scorer scorer = scorer(context);\n    if (scorer == null) {\n      return null;\n    }\n    final TwoPhaseIterator twoPhase = scorer.twoPhaseIterator();\n    if (twoPhase == null) {\n      if (scorer.iterator().advance(doc) != doc) {\n        return null;\n      }\n    }\n    else {\n      if (twoPhase.approximation().advance(doc) != doc || twoPhase.matches() == false) {\n        return null;\n      }\n    }\n    return MatchesUtils.MATCH_WITH_NO_TERMS;\n  }\n\n","sourceOld":"  /**\n   * Returns {@link Matches} for a specific document, or {@code null} if the document\n   * does not match the parent query\n   *\n   * A query match that contains no position information (for example, a Point or\n   * DocValues query) will return {@link Matches#MATCH_WITH_NO_TERMS}\n   *\n   * @param context the reader's context to create the {@link Matches} for\n   * @param doc     the document's id relative to the given context's reader\n   * @lucene.experimental\n   */\n  public Matches matches(LeafReaderContext context, int doc) throws IOException {\n    Scorer scorer = scorer(context);\n    if (scorer == null) {\n      return null;\n    }\n    final TwoPhaseIterator twoPhase = scorer.twoPhaseIterator();\n    if (twoPhase == null) {\n      if (scorer.iterator().advance(doc) != doc) {\n        return null;\n      }\n    }\n    else {\n      if (twoPhase.approximation().advance(doc) != doc || twoPhase.matches() == false) {\n        return null;\n      }\n    }\n    return Matches.MATCH_WITH_NO_TERMS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"663d52bb0579393854db3d03369d8c099b8fbccc","date":1554891602,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Weight#matches(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Weight#matches(LeafReaderContext,int).mjava","sourceNew":"  /**\n   * Returns {@link Matches} for a specific document, or {@code null} if the document\n   * does not match the parent query\n   *\n   * A query match that contains no position information (for example, a Point or\n   * DocValues query) will return {@link MatchesUtils#MATCH_WITH_NO_TERMS}\n   *\n   * @param context the reader's context to create the {@link Matches} for\n   * @param doc     the document's id relative to the given context's reader\n   * @lucene.experimental\n   */\n  public Matches matches(LeafReaderContext context, int doc) throws IOException {\n    ScorerSupplier scorerSupplier = scorerSupplier(context);\n    if (scorerSupplier == null) {\n      return null;\n    }\n    Scorer scorer = scorerSupplier.get(1);\n    final TwoPhaseIterator twoPhase = scorer.twoPhaseIterator();\n    if (twoPhase == null) {\n      if (scorer.iterator().advance(doc) != doc) {\n        return null;\n      }\n    }\n    else {\n      if (twoPhase.approximation().advance(doc) != doc || twoPhase.matches() == false) {\n        return null;\n      }\n    }\n    return MatchesUtils.MATCH_WITH_NO_TERMS;\n  }\n\n","sourceOld":"  /**\n   * Returns {@link Matches} for a specific document, or {@code null} if the document\n   * does not match the parent query\n   *\n   * A query match that contains no position information (for example, a Point or\n   * DocValues query) will return {@link MatchesUtils#MATCH_WITH_NO_TERMS}\n   *\n   * @param context the reader's context to create the {@link Matches} for\n   * @param doc     the document's id relative to the given context's reader\n   * @lucene.experimental\n   */\n  public Matches matches(LeafReaderContext context, int doc) throws IOException {\n    Scorer scorer = scorer(context);\n    if (scorer == null) {\n      return null;\n    }\n    final TwoPhaseIterator twoPhase = scorer.twoPhaseIterator();\n    if (twoPhase == null) {\n      if (scorer.iterator().advance(doc) != doc) {\n        return null;\n      }\n    }\n    else {\n      if (twoPhase.approximation().advance(doc) != doc || twoPhase.matches() == false) {\n        return null;\n      }\n    }\n    return MatchesUtils.MATCH_WITH_NO_TERMS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2375622520a4e480775e3104a2f9a423536755b4":["70f096f495a4a51c97c82cf6fd06e107c12f797b"],"663d52bb0579393854db3d03369d8c099b8fbccc":["2375622520a4e480775e3104a2f9a423536755b4"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","657704b225b01c6ff4bada5b6667f1f60aaaad0f"],"70f096f495a4a51c97c82cf6fd06e107c12f797b":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["663d52bb0579393854db3d03369d8c099b8fbccc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["657704b225b01c6ff4bada5b6667f1f60aaaad0f","43345f1452f9510f8aaadae6156fe0c834e7d957"],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"2375622520a4e480775e3104a2f9a423536755b4":["663d52bb0579393854db3d03369d8c099b8fbccc"],"663d52bb0579393854db3d03369d8c099b8fbccc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["70f096f495a4a51c97c82cf6fd06e107c12f797b"],"70f096f495a4a51c97c82cf6fd06e107c12f797b":["2375622520a4e480775e3104a2f9a423536755b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}