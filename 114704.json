{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#readFields(IndexInput).mjava","commits":[{"id":"9f2be786bbf3746ffcd9720e0b473f4b121c4228","date":1359663177,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#readFields(IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  private void readFields(IndexInput meta) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == DiskDocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == DiskDocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == DiskDocValuesFormat.SORTED) {\n        // sorted = binary + numeric\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#readFields(IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  private void readFields(IndexInput meta) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == DiskDocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == DiskDocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == DiskDocValuesFormat.SORTED) {\n        // sorted = binary + numeric\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56fca4cf418a84a71d0701bbb6fda4db84fa5796","date":1361031660,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#readFields(IndexInput).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#readFields(IndexInput).mjava","sourceNew":"  private void readFields(IndexInput meta) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == DiskDocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == DiskDocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == DiskDocValuesFormat.SORTED) {\n        // sorted = binary + numeric\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      } else if (type == DiskDocValuesFormat.SORTED_SET) {\n        // sortedset = binary + numeric + ordIndex\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n1 = readNumericEntry(meta);\n        ords.put(fieldNumber, n1);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n2 = readNumericEntry(meta);\n        ordIndexes.put(fieldNumber, n2);\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == DiskDocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == DiskDocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == DiskDocValuesFormat.SORTED) {\n        // sorted = binary + numeric\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#readFields(IndexInput).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#readFields(IndexInput).mjava","sourceNew":"  private void readFields(IndexInput meta) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == DiskDocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == DiskDocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == DiskDocValuesFormat.SORTED) {\n        // sorted = binary + numeric\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      } else if (type == DiskDocValuesFormat.SORTED_SET) {\n        // sortedset = binary + numeric + ordIndex\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n1 = readNumericEntry(meta);\n        ords.put(fieldNumber, n1);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n2 = readNumericEntry(meta);\n        ordIndexes.put(fieldNumber, n2);\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == DiskDocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == DiskDocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == DiskDocValuesFormat.SORTED) {\n        // sorted = binary + numeric\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#readFields(IndexInput).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#readFields(IndexInput).mjava","sourceNew":"  private void readFields(IndexInput meta) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == Lucene45DocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == Lucene45DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == Lucene45DocValuesFormat.SORTED) {\n        // sorted = binary + numeric\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      } else if (type == Lucene45DocValuesFormat.SORTED_SET) {\n        // sortedset = binary + numeric + ordIndex\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n1 = readNumericEntry(meta);\n        ords.put(fieldNumber, n1);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != Lucene45DocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n2 = readNumericEntry(meta);\n        ordIndexes.put(fieldNumber, n2);\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == DiskDocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == DiskDocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == DiskDocValuesFormat.SORTED) {\n        // sorted = binary + numeric\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      } else if (type == DiskDocValuesFormat.SORTED_SET) {\n        // sortedset = binary + numeric + ordIndex\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n1 = readNumericEntry(meta);\n        ords.put(fieldNumber, n1);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n2 = readNumericEntry(meta);\n        ordIndexes.put(fieldNumber, n2);\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#readFields(IndexInput).mjava","sourceNew":null,"sourceOld":"  private void readFields(IndexInput meta) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == DiskDocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == DiskDocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == DiskDocValuesFormat.SORTED) {\n        // sorted = binary + numeric\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      } else if (type == DiskDocValuesFormat.SORTED_SET) {\n        // sortedset = binary + numeric + ordIndex\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n1 = readNumericEntry(meta);\n        ords.put(fieldNumber, n1);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n2 = readNumericEntry(meta);\n        ordIndexes.put(fieldNumber, n2);\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/cheapbastard/CheapBastardDocValuesProducer#readFields(IndexInput).mjava","sourceNew":null,"sourceOld":"  private void readFields(IndexInput meta) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      byte type = meta.readByte();\n      if (type == DiskDocValuesFormat.NUMERIC) {\n        numerics.put(fieldNumber, readNumericEntry(meta));\n      } else if (type == DiskDocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n      } else if (type == DiskDocValuesFormat.SORTED) {\n        // sorted = binary + numeric\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sorted entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n = readNumericEntry(meta);\n        ords.put(fieldNumber, n);\n      } else if (type == DiskDocValuesFormat.SORTED_SET) {\n        // sortedset = binary + numeric + ordIndex\n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.BINARY) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        BinaryEntry b = readBinaryEntry(meta);\n        binaries.put(fieldNumber, b);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n1 = readNumericEntry(meta);\n        ords.put(fieldNumber, n1);\n        \n        if (meta.readVInt() != fieldNumber) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        if (meta.readByte() != DiskDocValuesFormat.NUMERIC) {\n          throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt\");\n        }\n        NumericEntry n2 = readNumericEntry(meta);\n        ordIndexes.put(fieldNumber, n2);\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type + \", resource=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11a746437bc5c0a0b3df0337ed249c387c812871":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9f2be786bbf3746ffcd9720e0b473f4b121c4228"],"9f2be786bbf3746ffcd9720e0b473f4b121c4228":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["ddbb72a33557d2b5bc22ee95daf3281c43560502","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"56fca4cf418a84a71d0701bbb6fda4db84fa5796":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["ddbb72a33557d2b5bc22ee95daf3281c43560502","11a746437bc5c0a0b3df0337ed249c387c812871"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["d4d69c535930b5cce125cff868d40f6373dc27d4","56fca4cf418a84a71d0701bbb6fda4db84fa5796"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"]},"commit2Childs":{"11a746437bc5c0a0b3df0337ed249c387c812871":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["56fca4cf418a84a71d0701bbb6fda4db84fa5796","ddbb72a33557d2b5bc22ee95daf3281c43560502"],"9f2be786bbf3746ffcd9720e0b473f4b121c4228":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","9f2be786bbf3746ffcd9720e0b473f4b121c4228"],"56fca4cf418a84a71d0701bbb6fda4db84fa5796":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["11a746437bc5c0a0b3df0337ed249c387c812871","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}