{"path":"lucene/test-framework/src/java/org/apache/lucene/search/spans/SpanTestUtil#spanNearUnorderedQuery(String,int,String...).mjava","commits":[{"id":"c4f600f812447b5512daeaf8e5c9df5dbcc4a254","date":1428874774,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/spans/SpanTestUtil#spanNearUnorderedQuery(String,int,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Makes a new unordered SpanNearQuery (with additional asserts) from the provided {@code terms}\n   */\n  public static SpanQuery spanNearUnorderedQuery(String field, int slop, String... terms) {\n    SpanQuery[] subqueries = new SpanQuery[terms.length];\n    for (int i = 0; i < terms.length; i++) {\n      subqueries[i] = spanTermQuery(field, terms[i]);\n    }\n    return spanNearUnorderedQuery(slop, subqueries);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d93cbfb813cfdd4c109bb21027667b71ad40e0a2","date":1438704905,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/spans/SpanTestUtil#spanNearUnorderedQuery(String,int,String...).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/spans/SpanTestUtil#spanNearUnorderedQuery(String,int,String...).mjava","sourceNew":"  /**\n   * Makes a new unordered SpanNearQuery (with additional asserts) from the provided {@code terms}\n   */\n  public static SpanQuery spanNearUnorderedQuery(String field, int slop, String... terms) {\n    SpanNearQuery.Builder builder = SpanNearQuery.newUnorderedNearQuery(field);\n    builder.setSlop(slop);\n    for (String term : terms) {\n      builder.addClause(new SpanTermQuery(new Term(field, term)));\n    }\n    return spanQuery(builder.build());\n  }\n\n","sourceOld":"  /**\n   * Makes a new unordered SpanNearQuery (with additional asserts) from the provided {@code terms}\n   */\n  public static SpanQuery spanNearUnorderedQuery(String field, int slop, String... terms) {\n    SpanQuery[] subqueries = new SpanQuery[terms.length];\n    for (int i = 0; i < terms.length; i++) {\n      subqueries[i] = spanTermQuery(field, terms[i]);\n    }\n    return spanNearUnorderedQuery(slop, subqueries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d93cbfb813cfdd4c109bb21027667b71ad40e0a2":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d93cbfb813cfdd4c109bb21027667b71ad40e0a2"]},"commit2Childs":{"d93cbfb813cfdd4c109bb21027667b71ad40e0a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["d93cbfb813cfdd4c109bb21027667b71ad40e0a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}