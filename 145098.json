{"path":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testBoolean2().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testBoolean2().mjava","pathOld":"src/test/org/apache/lucene/search/TestFilteredQuery#testBoolean2().mjava","sourceNew":"  // Make sure BooleanQuery, which does out-of-order\n  // scoring, inside FilteredQuery, works\n  public void testBoolean2() throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    Query query = new FilteredQuery(bq,\n        new SingleDocTestFilter(0));\n    bq.add(new TermQuery(new Term(\"field\", \"one\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"two\")), BooleanClause.Occur.SHOULD);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);    \n  }\n\n","sourceOld":"  // Make sure BooleanQuery, which does out-of-order\n  // scoring, inside FilteredQuery, works\n  public void testBoolean2() throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    Query query = new FilteredQuery(bq,\n        new SingleDocTestFilter(0));\n    bq.add(new TermQuery(new Term(\"field\", \"one\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"two\")), BooleanClause.Occur.SHOULD);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testBoolean2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testBoolean2().mjava","sourceNew":"  // Make sure BooleanQuery, which does out-of-order\n  // scoring, inside FilteredQuery, works\n  public void testBoolean2() throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    Query query = new FilteredQuery(bq,\n        new SingleDocTestFilter(0));\n    bq.add(new TermQuery(new Term(\"field\", \"one\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"two\")), BooleanClause.Occur.SHOULD);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);    \n  }\n\n","sourceOld":"  // Make sure BooleanQuery, which does out-of-order\n  // scoring, inside FilteredQuery, works\n  public void testBoolean2() throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    Query query = new FilteredQuery(bq,\n        new SingleDocTestFilter(0));\n    bq.add(new TermQuery(new Term(\"field\", \"one\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"two\")), BooleanClause.Occur.SHOULD);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testBoolean2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testBoolean2().mjava","sourceNew":"  // Make sure BooleanQuery, which does out-of-order\n  // scoring, inside FilteredQuery, works\n  public void testBoolean2() throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    Query query = new FilteredQuery(bq,\n        new SingleDocTestFilter(0));\n    bq.add(new TermQuery(new Term(\"field\", \"one\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"two\")), BooleanClause.Occur.SHOULD);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);    \n  }\n\n","sourceOld":"  // Make sure BooleanQuery, which does out-of-order\n  // scoring, inside FilteredQuery, works\n  public void testBoolean2() throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    Query query = new FilteredQuery(bq,\n        new SingleDocTestFilter(0));\n    bq.add(new TermQuery(new Term(\"field\", \"one\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"two\")), BooleanClause.Occur.SHOULD);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testBoolean2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testBoolean2().mjava","sourceNew":"  // Make sure BooleanQuery, which does out-of-order\n  // scoring, inside FilteredQuery, works\n  public void testBoolean2() throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    Query query = new FilteredQuery(bq,\n        new SingleDocTestFilter(0));\n    bq.add(new TermQuery(new Term(\"field\", \"one\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"two\")), BooleanClause.Occur.SHOULD);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);    \n  }\n\n","sourceOld":"  // Make sure BooleanQuery, which does out-of-order\n  // scoring, inside FilteredQuery, works\n  public void testBoolean2() throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    Query query = new FilteredQuery(bq,\n        new SingleDocTestFilter(0));\n    bq.add(new TermQuery(new Term(\"field\", \"one\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"two\")), BooleanClause.Occur.SHOULD);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(query,searcher);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testBoolean2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testBoolean2().mjava","sourceNew":"  // Make sure BooleanQuery, which does out-of-order\n  // scoring, inside FilteredQuery, works\n  public void testBoolean2() throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    Query query = new FilteredQuery(bq,\n        new SingleDocTestFilter(0));\n    bq.add(new TermQuery(new Term(\"field\", \"one\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"two\")), BooleanClause.Occur.SHOULD);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query, searcher);    \n  }\n\n","sourceOld":"  // Make sure BooleanQuery, which does out-of-order\n  // scoring, inside FilteredQuery, works\n  public void testBoolean2() throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    Query query = new FilteredQuery(bq,\n        new SingleDocTestFilter(0));\n    bq.add(new TermQuery(new Term(\"field\", \"one\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"two\")), BooleanClause.Occur.SHOULD);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testBoolean2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testBoolean2().mjava","sourceNew":"  // Make sure BooleanQuery, which does out-of-order\n  // scoring, inside FilteredQuery, works\n  public void testBoolean2() throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    Query query = new FilteredQuery(bq,\n        new SingleDocTestFilter(0));\n    bq.add(new TermQuery(new Term(\"field\", \"one\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"two\")), BooleanClause.Occur.SHOULD);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query, searcher);    \n  }\n\n","sourceOld":"  // Make sure BooleanQuery, which does out-of-order\n  // scoring, inside FilteredQuery, works\n  public void testBoolean2() throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    Query query = new FilteredQuery(bq,\n        new SingleDocTestFilter(0));\n    bq.add(new TermQuery(new Term(\"field\", \"one\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"two\")), BooleanClause.Occur.SHOULD);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testBoolean2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testBoolean2().mjava","sourceNew":"  // Make sure BooleanQuery, which does out-of-order\n  // scoring, inside FilteredQuery, works\n  public void testBoolean2() throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    Query query = new FilteredQuery(bq,\n        new SingleDocTestFilter(0));\n    bq.add(new TermQuery(new Term(\"field\", \"one\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"two\")), BooleanClause.Occur.SHOULD);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query, searcher);    \n  }\n\n","sourceOld":"  // Make sure BooleanQuery, which does out-of-order\n  // scoring, inside FilteredQuery, works\n  public void testBoolean2() throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    Query query = new FilteredQuery(bq,\n        new SingleDocTestFilter(0));\n    bq.add(new TermQuery(new Term(\"field\", \"one\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"two\")), BooleanClause.Occur.SHOULD);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query,searcher);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testBoolean2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testBoolean2().mjava","sourceNew":"  // Make sure BooleanQuery, which does out-of-order\n  // scoring, inside FilteredQuery, works\n  public void testBoolean2() throws Exception {\n    // force the filter to be executed as bits\n    tBoolean2(true);\n    // force the filter to be executed as iterator\n    tBoolean2(false);\n  }\n\n","sourceOld":"  // Make sure BooleanQuery, which does out-of-order\n  // scoring, inside FilteredQuery, works\n  public void testBoolean2() throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    Query query = new FilteredQuery(bq,\n        new SingleDocTestFilter(0));\n    bq.add(new TermQuery(new Term(\"field\", \"one\")), BooleanClause.Occur.SHOULD);\n    bq.add(new TermQuery(new Term(\"field\", \"two\")), BooleanClause.Occur.SHOULD);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    QueryUtils.check(random, query, searcher);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#testBoolean2().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testBoolean2().mjava","sourceNew":"  // Make sure BooleanQuery, which does out-of-order\n  // scoring, inside FilteredQuery, works\n  public void testBoolean2() throws Exception {\n    // force the filter to be executed as bits\n    tBoolean2(true);\n    // force the filter to be executed as iterator\n    tBoolean2(false);\n  }\n\n","sourceOld":"  // Make sure BooleanQuery, which does out-of-order\n  // scoring, inside FilteredQuery, works\n  public void testBoolean2() throws Exception {\n    // force the filter to be executed as bits\n    tBoolean2(true);\n    // force the filter to be executed as iterator\n    tBoolean2(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"53a31399f2471493d67b19a95c028a74e0113b6a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["9454a6510e2db155fb01faa5c049b06ece95fab9","53a31399f2471493d67b19a95c028a74e0113b6a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6620df8541b174097b1133a4fc370adb2e570524"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["53a31399f2471493d67b19a95c028a74e0113b6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","53a31399f2471493d67b19a95c028a74e0113b6a"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"53a31399f2471493d67b19a95c028a74e0113b6a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","2dadf0f3286a34a0fee6e788ffce88624bf2984e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["6620df8541b174097b1133a4fc370adb2e570524","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["53a31399f2471493d67b19a95c028a74e0113b6a","9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}