{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,LeafReaderContext).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  private ScaleInfo createScaleInfo(Map context, LeafReaderContext readerContext) throws IOException {\n    final List<LeafReaderContext> leaves = ReaderUtil.getTopLevelContext(readerContext).leaves();\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (LeafReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader().maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(ScaleFloatFunction.this, scaleInfo);\n    return scaleInfo;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a701a7aab388afa1412a3dc23b4115c321f478c4","date":1413486320,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,LeafReaderContext).mjava","sourceNew":"  private ScaleInfo createScaleInfo(Map context, LeafReaderContext readerContext) throws IOException {\n    final List<LeafReaderContext> leaves = ReaderUtil.getTopLevelContext(readerContext).leaves();\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (LeafReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader().maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n        if ( ! vals.exists(i) ) {\n          continue;\n        }\n        float val = vals.floatVal(i);\n        if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n          // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n          // which don't make sense to factor into the scale function\n          continue;\n        }\n        if (val < minVal) {\n          minVal = val;\n        }\n        if (val > maxVal) {\n          maxVal = val;\n        }\n      }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(ScaleFloatFunction.this, scaleInfo);\n    return scaleInfo;\n  }\n\n","sourceOld":"  private ScaleInfo createScaleInfo(Map context, LeafReaderContext readerContext) throws IOException {\n    final List<LeafReaderContext> leaves = ReaderUtil.getTopLevelContext(readerContext).leaves();\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (LeafReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader().maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(ScaleFloatFunction.this, scaleInfo);\n    return scaleInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,LeafReaderContext).mjava","sourceNew":"  private ScaleInfo createScaleInfo(Map context, LeafReaderContext readerContext) throws IOException {\n    final List<LeafReaderContext> leaves = ReaderUtil.getTopLevelContext(readerContext).leaves();\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (LeafReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader().maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n        if ( ! vals.exists(i) ) {\n          continue;\n        }\n        float val = vals.floatVal(i);\n        if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n          // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n          // which don't make sense to factor into the scale function\n          continue;\n        }\n        if (val < minVal) {\n          minVal = val;\n        }\n        if (val > maxVal) {\n          maxVal = val;\n        }\n      }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(ScaleFloatFunction.this, scaleInfo);\n    return scaleInfo;\n  }\n\n","sourceOld":"  private ScaleInfo createScaleInfo(Map context, LeafReaderContext readerContext) throws IOException {\n    final List<LeafReaderContext> leaves = ReaderUtil.getTopLevelContext(readerContext).leaves();\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (LeafReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader().maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(ScaleFloatFunction.this, scaleInfo);\n    return scaleInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,LeafReaderContext).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private ScaleInfo createScaleInfo(Map context, LeafReaderContext readerContext) throws IOException {\n    final List<LeafReaderContext> leaves = ReaderUtil.getTopLevelContext(readerContext).leaves();\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (LeafReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader().maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n        if ( ! vals.exists(i) ) {\n          continue;\n        }\n        float val = vals.floatVal(i);\n        if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n          // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n          // which don't make sense to factor into the scale function\n          continue;\n        }\n        if (val < minVal) {\n          minVal = val;\n        }\n        if (val > maxVal) {\n          maxVal = val;\n        }\n      }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(ScaleFloatFunction.this, scaleInfo);\n    return scaleInfo;\n  }\n\n","sourceOld":"  private ScaleInfo createScaleInfo(Map context, LeafReaderContext readerContext) throws IOException {\n    final List<LeafReaderContext> leaves = ReaderUtil.getTopLevelContext(readerContext).leaves();\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (LeafReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader().maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n        if ( ! vals.exists(i) ) {\n          continue;\n        }\n        float val = vals.floatVal(i);\n        if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n          // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n          // which don't make sense to factor into the scale function\n          continue;\n        }\n        if (val < minVal) {\n          minVal = val;\n        }\n        if (val > maxVal) {\n          maxVal = val;\n        }\n      }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(ScaleFloatFunction.this, scaleInfo);\n    return scaleInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,LeafReaderContext).mjava","sourceNew":"  private ScaleInfo createScaleInfo(Map context, LeafReaderContext readerContext) throws IOException {\n    final List<LeafReaderContext> leaves = ReaderUtil.getTopLevelContext(readerContext).leaves();\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (LeafReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader().maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n        if ( ! vals.exists(i) ) {\n          continue;\n        }\n        float val = vals.floatVal(i);\n        if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n          // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n          // which don't make sense to factor into the scale function\n          continue;\n        }\n        if (val < minVal) {\n          minVal = val;\n        }\n        if (val > maxVal) {\n          maxVal = val;\n        }\n      }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(ScaleFloatFunction.this, scaleInfo);\n    return scaleInfo;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private ScaleInfo createScaleInfo(Map context, LeafReaderContext readerContext) throws IOException {\n    final List<LeafReaderContext> leaves = ReaderUtil.getTopLevelContext(readerContext).leaves();\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (LeafReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader().maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n        if ( ! vals.exists(i) ) {\n          continue;\n        }\n        float val = vals.floatVal(i);\n        if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n          // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n          // which don't make sense to factor into the scale function\n          continue;\n        }\n        if (val < minVal) {\n          minVal = val;\n        }\n        if (val > maxVal) {\n          maxVal = val;\n        }\n      }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(ScaleFloatFunction.this, scaleInfo);\n    return scaleInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":5,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map[Object,Object],LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,LeafReaderContext).mjava","sourceNew":"  private ScaleInfo createScaleInfo(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n    final List<LeafReaderContext> leaves = ReaderUtil.getTopLevelContext(readerContext).leaves();\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (LeafReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader().maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n        if ( ! vals.exists(i) ) {\n          continue;\n        }\n        float val = vals.floatVal(i);\n        if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n          // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n          // which don't make sense to factor into the scale function\n          continue;\n        }\n        if (val < minVal) {\n          minVal = val;\n        }\n        if (val > maxVal) {\n          maxVal = val;\n        }\n      }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(ScaleFloatFunction.this, scaleInfo);\n    return scaleInfo;\n  }\n\n","sourceOld":"  private ScaleInfo createScaleInfo(Map context, LeafReaderContext readerContext) throws IOException {\n    final List<LeafReaderContext> leaves = ReaderUtil.getTopLevelContext(readerContext).leaves();\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (LeafReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader().maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n        if ( ! vals.exists(i) ) {\n          continue;\n        }\n        float val = vals.floatVal(i);\n        if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n          // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n          // which don't make sense to factor into the scale function\n          continue;\n        }\n        if (val < minVal) {\n          minVal = val;\n        }\n        if (val > maxVal) {\n          maxVal = val;\n        }\n      }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(ScaleFloatFunction.this, scaleInfo);\n    return scaleInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["a701a7aab388afa1412a3dc23b4115c321f478c4"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["c9fb5f46e264daf5ba3860defe623a89d202dd87","a701a7aab388afa1412a3dc23b4115c321f478c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a701a7aab388afa1412a3dc23b4115c321f478c4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a701a7aab388afa1412a3dc23b4115c321f478c4":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","a701a7aab388afa1412a3dc23b4115c321f478c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}