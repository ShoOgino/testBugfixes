{"path":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.GroupExpandCollector#getLeafCollector(AtomicReaderContext).mjava","commits":[{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.GroupExpandCollector#getLeafCollector(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    public LeafCollector getLeafCollector(AtomicReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      final IntObjectMap<LeafCollector> leafCollectors = new IntObjectOpenHashMap<>();\n      for (IntObjectCursor<Collector> entry : groups) {\n        leafCollectors.put(entry.key, entry.value.getLeafCollector(context));\n      }\n      return new LeafCollector() {\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          for (ObjectCursor<LeafCollector> c : leafCollectors.values()) {\n            c.value.setScorer(scorer);\n          }\n        }\n        \n        @Override\n        public void collect(int docId) throws IOException {\n          int doc = docId+docBase;\n          int ord = docValues.getOrd(doc);\n          if(ord > -1 && groupBits.get(ord) && !collapsedSet.contains(doc)) {\n            LeafCollector c = leafCollectors.get(ord);\n            c.collect(docId);\n          }\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.GroupExpandCollector#getLeafCollector(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    public LeafCollector getLeafCollector(AtomicReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      final IntObjectMap<LeafCollector> leafCollectors = new IntObjectOpenHashMap<>();\n      for (IntObjectCursor<Collector> entry : groups) {\n        leafCollectors.put(entry.key, entry.value.getLeafCollector(context));\n      }\n      return new LeafCollector() {\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          for (ObjectCursor<LeafCollector> c : leafCollectors.values()) {\n            c.value.setScorer(scorer);\n          }\n        }\n        \n        @Override\n        public void collect(int docId) throws IOException {\n          int doc = docId+docBase;\n          int ord = docValues.getOrd(doc);\n          if(ord > -1 && groupBits.get(ord) && !collapsedSet.contains(doc)) {\n            LeafCollector c = leafCollectors.get(ord);\n            c.collect(docId);\n          }\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb518e3b5dddd136bbd532fe2e2890ac3f48e682","date":1401310344,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.GroupExpandCollector#getLeafCollector(AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.GroupExpandCollector#getLeafCollector(AtomicReaderContext).mjava","sourceNew":"    public LeafCollector getLeafCollector(AtomicReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      final IntObjectMap<LeafCollector> leafCollectors = new IntObjectOpenHashMap<>();\n      for (IntObjectCursor<Collector> entry : groups) {\n        leafCollectors.put(entry.key, entry.value.getLeafCollector(context));\n      }\n      return new LeafCollector() {\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          for (ObjectCursor<LeafCollector> c : leafCollectors.values()) {\n            c.value.setScorer(scorer);\n          }\n        }\n\n        @Override\n        public void collect(int docId) throws IOException {\n          int doc = docId+docBase;\n          int ord = docValues.getOrd(doc);\n          if(ord > -1 && groupBits.get(ord) && !collapsedSet.contains(doc)) {\n            LeafCollector c = leafCollectors.get(ord);\n            c.collect(docId);\n          }\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      };\n    }\n\n","sourceOld":"    public LeafCollector getLeafCollector(AtomicReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      final IntObjectMap<LeafCollector> leafCollectors = new IntObjectOpenHashMap<>();\n      for (IntObjectCursor<Collector> entry : groups) {\n        leafCollectors.put(entry.key, entry.value.getLeafCollector(context));\n      }\n      return new LeafCollector() {\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          for (ObjectCursor<LeafCollector> c : leafCollectors.values()) {\n            c.value.setScorer(scorer);\n          }\n        }\n        \n        @Override\n        public void collect(int docId) throws IOException {\n          int doc = docId+docBase;\n          int ord = docValues.getOrd(doc);\n          if(ord > -1 && groupBits.get(ord) && !collapsedSet.contains(doc)) {\n            LeafCollector c = leafCollectors.get(ord);\n            c.collect(docId);\n          }\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53c4b316b8c254e1bdf99a58a6b30856012f995d","date":1401311743,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.GroupExpandCollector#getLeafCollector(AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.GroupExpandCollector#getLeafCollector(AtomicReaderContext).mjava","sourceNew":"    public LeafCollector getLeafCollector(AtomicReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      final IntObjectMap<LeafCollector> leafCollectors = new IntObjectOpenHashMap<>();\n      for (IntObjectCursor<Collector> entry : groups) {\n        leafCollectors.put(entry.key, entry.value.getLeafCollector(context));\n      }\n      return new LeafCollector() {\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          for (ObjectCursor<LeafCollector> c : leafCollectors.values()) {\n            c.value.setScorer(scorer);\n          }\n        }\n\n        @Override\n        public void collect(int docId) throws IOException {\n          int doc = docId + docBase;\n          int ord = docValues.getOrd(doc);\n          if (ord > -1 && groupBits.get(ord) && !collapsedSet.contains(doc)) {\n            LeafCollector c = leafCollectors.get(ord);\n            c.collect(docId);\n          }\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      };\n    }\n\n","sourceOld":"    public LeafCollector getLeafCollector(AtomicReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      final IntObjectMap<LeafCollector> leafCollectors = new IntObjectOpenHashMap<>();\n      for (IntObjectCursor<Collector> entry : groups) {\n        leafCollectors.put(entry.key, entry.value.getLeafCollector(context));\n      }\n      return new LeafCollector() {\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          for (ObjectCursor<LeafCollector> c : leafCollectors.values()) {\n            c.value.setScorer(scorer);\n          }\n        }\n\n        @Override\n        public void collect(int docId) throws IOException {\n          int doc = docId+docBase;\n          int ord = docValues.getOrd(doc);\n          if(ord > -1 && groupBits.get(ord) && !collapsedSet.contains(doc)) {\n            LeafCollector c = leafCollectors.get(ord);\n            c.collect(docId);\n          }\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.GroupExpandCollector#getLeafCollector(AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"    public LeafCollector getLeafCollector(AtomicReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      final IntObjectMap<LeafCollector> leafCollectors = new IntObjectOpenHashMap<>();\n      for (IntObjectCursor<Collector> entry : groups) {\n        leafCollectors.put(entry.key, entry.value.getLeafCollector(context));\n      }\n      return new LeafCollector() {\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          for (ObjectCursor<LeafCollector> c : leafCollectors.values()) {\n            c.value.setScorer(scorer);\n          }\n        }\n\n        @Override\n        public void collect(int docId) throws IOException {\n          int doc = docId + docBase;\n          int ord = docValues.getOrd(doc);\n          if (ord > -1 && groupBits.get(ord) && !collapsedSet.contains(doc)) {\n            LeafCollector c = leafCollectors.get(ord);\n            c.collect(docId);\n          }\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eb518e3b5dddd136bbd532fe2e2890ac3f48e682":["ae73da626f97850c922c42736f808d0378e165f0"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["53c4b316b8c254e1bdf99a58a6b30856012f995d"],"53c4b316b8c254e1bdf99a58a6b30856012f995d":["eb518e3b5dddd136bbd532fe2e2890ac3f48e682"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"eb518e3b5dddd136bbd532fe2e2890ac3f48e682":["53c4b316b8c254e1bdf99a58a6b30856012f995d"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"ae73da626f97850c922c42736f808d0378e165f0":["eb518e3b5dddd136bbd532fe2e2890ac3f48e682","15e323346eac5e4685c0a9f2df85eb96b4239bbb"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"53c4b316b8c254e1bdf99a58a6b30856012f995d":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}