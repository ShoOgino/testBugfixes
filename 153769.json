{"path":"solr/core/src/java/org/apache/solr/highlight/BreakIteratorBoundaryScanner#get(String,SolrParams).mjava","commits":[{"id":"93ebcbd0a745c480ddb4d98779055ca8ff71de79","date":1316007529,"type":0,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/BreakIteratorBoundaryScanner#get(String,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected BoundaryScanner get(String fieldName, SolrParams params) {\n    // construct Locale\n    String language = params.getFieldParam(fieldName, HighlightParams.BS_LANGUAGE);\n    String country = params.getFieldParam(fieldName, HighlightParams.BS_COUNTRY);\n    if(country != null && language == null){\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          HighlightParams.BS_LANGUAGE + \" parameter cannot be null when you specify \" + HighlightParams.BS_COUNTRY);\n    }\n    Locale locale = null;\n    if(language != null){\n      locale = country == null ? new Locale(language) : new Locale(language, country);\n    }\n\n    // construct BreakIterator\n    String type = params.getFieldParam(fieldName, HighlightParams.BS_TYPE, \"WORD\").toLowerCase();\n    BreakIterator bi = null;\n    if(type.equals(\"character\")){\n      bi = locale == null ? BreakIterator.getCharacterInstance() : BreakIterator.getCharacterInstance(locale);\n    }\n    else if(type.equals(\"word\")){\n      bi = locale == null ? BreakIterator.getWordInstance() : BreakIterator.getWordInstance(locale);\n    }\n    else if(type.equals(\"line\")){\n      bi = locale == null ? BreakIterator.getLineInstance() : BreakIterator.getLineInstance(locale);\n    }\n    else if(type.equals(\"sentence\")){\n      bi = locale == null ? BreakIterator.getSentenceInstance() : BreakIterator.getSentenceInstance(locale);\n    }\n    else\n      throw new SolrException(ErrorCode.BAD_REQUEST, type + \" is invalid for parameter \" + HighlightParams.BS_TYPE);\n\n    return new org.apache.lucene.search.vectorhighlight.BreakIteratorBoundaryScanner(bi);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b","date":1341673943,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/BreakIteratorBoundaryScanner#get(String,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/BreakIteratorBoundaryScanner#get(String,SolrParams).mjava","sourceNew":"  @Override\n  protected BoundaryScanner get(String fieldName, SolrParams params) {\n    // construct Locale\n    String language = params.getFieldParam(fieldName, HighlightParams.BS_LANGUAGE);\n    String country = params.getFieldParam(fieldName, HighlightParams.BS_COUNTRY);\n    if(country != null && language == null){\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          HighlightParams.BS_LANGUAGE + \" parameter cannot be null when you specify \" + HighlightParams.BS_COUNTRY);\n    }\n    Locale locale = null;\n    if(language != null){\n      locale = country == null ? new Locale(language) : new Locale(language, country);\n    }\n\n    // construct BreakIterator\n    String type = params.getFieldParam(fieldName, HighlightParams.BS_TYPE, \"WORD\").toLowerCase(Locale.ROOT);\n    BreakIterator bi = null;\n    if(type.equals(\"character\")){\n      bi = locale == null ? BreakIterator.getCharacterInstance() : BreakIterator.getCharacterInstance(locale);\n    }\n    else if(type.equals(\"word\")){\n      bi = locale == null ? BreakIterator.getWordInstance() : BreakIterator.getWordInstance(locale);\n    }\n    else if(type.equals(\"line\")){\n      bi = locale == null ? BreakIterator.getLineInstance() : BreakIterator.getLineInstance(locale);\n    }\n    else if(type.equals(\"sentence\")){\n      bi = locale == null ? BreakIterator.getSentenceInstance() : BreakIterator.getSentenceInstance(locale);\n    }\n    else\n      throw new SolrException(ErrorCode.BAD_REQUEST, type + \" is invalid for parameter \" + HighlightParams.BS_TYPE);\n\n    return new org.apache.lucene.search.vectorhighlight.BreakIteratorBoundaryScanner(bi);\n  }\n\n","sourceOld":"  @Override\n  protected BoundaryScanner get(String fieldName, SolrParams params) {\n    // construct Locale\n    String language = params.getFieldParam(fieldName, HighlightParams.BS_LANGUAGE);\n    String country = params.getFieldParam(fieldName, HighlightParams.BS_COUNTRY);\n    if(country != null && language == null){\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          HighlightParams.BS_LANGUAGE + \" parameter cannot be null when you specify \" + HighlightParams.BS_COUNTRY);\n    }\n    Locale locale = null;\n    if(language != null){\n      locale = country == null ? new Locale(language) : new Locale(language, country);\n    }\n\n    // construct BreakIterator\n    String type = params.getFieldParam(fieldName, HighlightParams.BS_TYPE, \"WORD\").toLowerCase();\n    BreakIterator bi = null;\n    if(type.equals(\"character\")){\n      bi = locale == null ? BreakIterator.getCharacterInstance() : BreakIterator.getCharacterInstance(locale);\n    }\n    else if(type.equals(\"word\")){\n      bi = locale == null ? BreakIterator.getWordInstance() : BreakIterator.getWordInstance(locale);\n    }\n    else if(type.equals(\"line\")){\n      bi = locale == null ? BreakIterator.getLineInstance() : BreakIterator.getLineInstance(locale);\n    }\n    else if(type.equals(\"sentence\")){\n      bi = locale == null ? BreakIterator.getSentenceInstance() : BreakIterator.getSentenceInstance(locale);\n    }\n    else\n      throw new SolrException(ErrorCode.BAD_REQUEST, type + \" is invalid for parameter \" + HighlightParams.BS_TYPE);\n\n    return new org.apache.lucene.search.vectorhighlight.BreakIteratorBoundaryScanner(bi);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"448a213c5dfd8b9baaf143dcbf9e633d8d7d1d5e","date":1341842777,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/BreakIteratorBoundaryScanner#get(String,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/BreakIteratorBoundaryScanner#get(String,SolrParams).mjava","sourceNew":"  @Override\n  protected BoundaryScanner get(String fieldName, SolrParams params) {\n    // construct Locale\n    String language = params.getFieldParam(fieldName, HighlightParams.BS_LANGUAGE);\n    String country = params.getFieldParam(fieldName, HighlightParams.BS_COUNTRY);\n    if(country != null && language == null){\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          HighlightParams.BS_LANGUAGE + \" parameter cannot be null when you specify \" + HighlightParams.BS_COUNTRY);\n    }\n    Locale locale = null;\n    if(language != null){\n      locale = country == null ? new Locale(language) : new Locale(language, country);\n    } else {\n      locale = Locale.ROOT;\n    }\n\n    // construct BreakIterator\n    String type = params.getFieldParam(fieldName, HighlightParams.BS_TYPE, \"WORD\").toLowerCase(Locale.ROOT);\n    BreakIterator bi = null;\n    if(type.equals(\"character\")){\n      bi = BreakIterator.getCharacterInstance(locale);\n    }\n    else if(type.equals(\"word\")){\n      bi = BreakIterator.getWordInstance(locale);\n    }\n    else if(type.equals(\"line\")){\n      bi = BreakIterator.getLineInstance(locale);\n    }\n    else if(type.equals(\"sentence\")){\n      bi = BreakIterator.getSentenceInstance(locale);\n    }\n    else\n      throw new SolrException(ErrorCode.BAD_REQUEST, type + \" is invalid for parameter \" + HighlightParams.BS_TYPE);\n\n    return new org.apache.lucene.search.vectorhighlight.BreakIteratorBoundaryScanner(bi);\n  }\n\n","sourceOld":"  @Override\n  protected BoundaryScanner get(String fieldName, SolrParams params) {\n    // construct Locale\n    String language = params.getFieldParam(fieldName, HighlightParams.BS_LANGUAGE);\n    String country = params.getFieldParam(fieldName, HighlightParams.BS_COUNTRY);\n    if(country != null && language == null){\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          HighlightParams.BS_LANGUAGE + \" parameter cannot be null when you specify \" + HighlightParams.BS_COUNTRY);\n    }\n    Locale locale = null;\n    if(language != null){\n      locale = country == null ? new Locale(language) : new Locale(language, country);\n    }\n\n    // construct BreakIterator\n    String type = params.getFieldParam(fieldName, HighlightParams.BS_TYPE, \"WORD\").toLowerCase(Locale.ROOT);\n    BreakIterator bi = null;\n    if(type.equals(\"character\")){\n      bi = locale == null ? BreakIterator.getCharacterInstance() : BreakIterator.getCharacterInstance(locale);\n    }\n    else if(type.equals(\"word\")){\n      bi = locale == null ? BreakIterator.getWordInstance() : BreakIterator.getWordInstance(locale);\n    }\n    else if(type.equals(\"line\")){\n      bi = locale == null ? BreakIterator.getLineInstance() : BreakIterator.getLineInstance(locale);\n    }\n    else if(type.equals(\"sentence\")){\n      bi = locale == null ? BreakIterator.getSentenceInstance() : BreakIterator.getSentenceInstance(locale);\n    }\n    else\n      throw new SolrException(ErrorCode.BAD_REQUEST, type + \" is invalid for parameter \" + HighlightParams.BS_TYPE);\n\n    return new org.apache.lucene.search.vectorhighlight.BreakIteratorBoundaryScanner(bi);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/BreakIteratorBoundaryScanner#get(String,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/BreakIteratorBoundaryScanner#get(String,SolrParams).mjava","sourceNew":"  @Override\n  protected BoundaryScanner get(String fieldName, SolrParams params) {\n    // construct Locale\n    String language = params.getFieldParam(fieldName, HighlightParams.BS_LANGUAGE);\n    String country = params.getFieldParam(fieldName, HighlightParams.BS_COUNTRY);\n    if(country != null && language == null){\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          HighlightParams.BS_LANGUAGE + \" parameter cannot be null when you specify \" + HighlightParams.BS_COUNTRY);\n    }\n    Locale locale = null;\n    if(language != null){\n      locale = country == null ? new Locale(language) : new Locale(language, country);\n    } else {\n      locale = Locale.ROOT;\n    }\n\n    // construct BreakIterator\n    String type = params.getFieldParam(fieldName, HighlightParams.BS_TYPE, \"WORD\").toLowerCase(Locale.ROOT);\n    BreakIterator bi = null;\n    if(type.equals(\"character\")){\n      bi = BreakIterator.getCharacterInstance(locale);\n    }\n    else if(type.equals(\"word\")){\n      bi = BreakIterator.getWordInstance(locale);\n    }\n    else if(type.equals(\"line\")){\n      bi = BreakIterator.getLineInstance(locale);\n    }\n    else if(type.equals(\"sentence\")){\n      bi = BreakIterator.getSentenceInstance(locale);\n    }\n    else\n      throw new SolrException(ErrorCode.BAD_REQUEST, type + \" is invalid for parameter \" + HighlightParams.BS_TYPE);\n\n    return new org.apache.lucene.search.vectorhighlight.BreakIteratorBoundaryScanner(bi);\n  }\n\n","sourceOld":"  @Override\n  protected BoundaryScanner get(String fieldName, SolrParams params) {\n    // construct Locale\n    String language = params.getFieldParam(fieldName, HighlightParams.BS_LANGUAGE);\n    String country = params.getFieldParam(fieldName, HighlightParams.BS_COUNTRY);\n    if(country != null && language == null){\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          HighlightParams.BS_LANGUAGE + \" parameter cannot be null when you specify \" + HighlightParams.BS_COUNTRY);\n    }\n    Locale locale = null;\n    if(language != null){\n      locale = country == null ? new Locale(language) : new Locale(language, country);\n    }\n\n    // construct BreakIterator\n    String type = params.getFieldParam(fieldName, HighlightParams.BS_TYPE, \"WORD\").toLowerCase();\n    BreakIterator bi = null;\n    if(type.equals(\"character\")){\n      bi = locale == null ? BreakIterator.getCharacterInstance() : BreakIterator.getCharacterInstance(locale);\n    }\n    else if(type.equals(\"word\")){\n      bi = locale == null ? BreakIterator.getWordInstance() : BreakIterator.getWordInstance(locale);\n    }\n    else if(type.equals(\"line\")){\n      bi = locale == null ? BreakIterator.getLineInstance() : BreakIterator.getLineInstance(locale);\n    }\n    else if(type.equals(\"sentence\")){\n      bi = locale == null ? BreakIterator.getSentenceInstance() : BreakIterator.getSentenceInstance(locale);\n    }\n    else\n      throw new SolrException(ErrorCode.BAD_REQUEST, type + \" is invalid for parameter \" + HighlightParams.BS_TYPE);\n\n    return new org.apache.lucene.search.vectorhighlight.BreakIteratorBoundaryScanner(bi);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/BreakIteratorBoundaryScanner#get(String,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/BreakIteratorBoundaryScanner#get(String,SolrParams).mjava","sourceNew":"  @Override\n  protected BoundaryScanner get(String fieldName, SolrParams params) {\n    // construct Locale\n    String language = params.getFieldParam(fieldName, HighlightParams.BS_LANGUAGE);\n    String country = params.getFieldParam(fieldName, HighlightParams.BS_COUNTRY);\n    if(country != null && language == null){\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          HighlightParams.BS_LANGUAGE + \" parameter cannot be null when you specify \" + HighlightParams.BS_COUNTRY);\n    }\n    Locale locale = null;\n    if(language != null){\n      locale = country == null ? new Locale(language) : new Locale(language, country);\n    } else {\n      locale = Locale.ROOT;\n    }\n\n    // construct BreakIterator\n    String type = params.getFieldParam(fieldName, HighlightParams.BS_TYPE, \"WORD\").toLowerCase(Locale.ROOT);\n    BreakIterator bi = null;\n    if(type.equals(\"character\")){\n      bi = BreakIterator.getCharacterInstance(locale);\n    }\n    else if(type.equals(\"word\")){\n      bi = BreakIterator.getWordInstance(locale);\n    }\n    else if(type.equals(\"line\")){\n      bi = BreakIterator.getLineInstance(locale);\n    }\n    else if(type.equals(\"sentence\")){\n      bi = BreakIterator.getSentenceInstance(locale);\n    }\n    else\n      throw new SolrException(ErrorCode.BAD_REQUEST, type + \" is invalid for parameter \" + HighlightParams.BS_TYPE);\n\n    return new org.apache.lucene.search.vectorhighlight.BreakIteratorBoundaryScanner(bi);\n  }\n\n","sourceOld":"  @Override\n  protected BoundaryScanner get(String fieldName, SolrParams params) {\n    // construct Locale\n    String language = params.getFieldParam(fieldName, HighlightParams.BS_LANGUAGE);\n    String country = params.getFieldParam(fieldName, HighlightParams.BS_COUNTRY);\n    if(country != null && language == null){\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          HighlightParams.BS_LANGUAGE + \" parameter cannot be null when you specify \" + HighlightParams.BS_COUNTRY);\n    }\n    Locale locale = null;\n    if(language != null){\n      locale = country == null ? new Locale(language) : new Locale(language, country);\n    }\n\n    // construct BreakIterator\n    String type = params.getFieldParam(fieldName, HighlightParams.BS_TYPE, \"WORD\").toLowerCase();\n    BreakIterator bi = null;\n    if(type.equals(\"character\")){\n      bi = locale == null ? BreakIterator.getCharacterInstance() : BreakIterator.getCharacterInstance(locale);\n    }\n    else if(type.equals(\"word\")){\n      bi = locale == null ? BreakIterator.getWordInstance() : BreakIterator.getWordInstance(locale);\n    }\n    else if(type.equals(\"line\")){\n      bi = locale == null ? BreakIterator.getLineInstance() : BreakIterator.getLineInstance(locale);\n    }\n    else if(type.equals(\"sentence\")){\n      bi = locale == null ? BreakIterator.getSentenceInstance() : BreakIterator.getSentenceInstance(locale);\n    }\n    else\n      throw new SolrException(ErrorCode.BAD_REQUEST, type + \" is invalid for parameter \" + HighlightParams.BS_TYPE);\n\n    return new org.apache.lucene.search.vectorhighlight.BreakIteratorBoundaryScanner(bi);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/BreakIteratorBoundaryScanner#get(String,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/BreakIteratorBoundaryScanner#get(String,SolrParams).mjava","sourceNew":"  @Override\n  protected BoundaryScanner get(String fieldName, SolrParams params) {\n    // construct Locale\n    String language = params.getFieldParam(fieldName, HighlightParams.BS_LANGUAGE);\n    String country = params.getFieldParam(fieldName, HighlightParams.BS_COUNTRY);\n    if(country != null && language == null){\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          HighlightParams.BS_LANGUAGE + \" parameter cannot be null when you specify \" + HighlightParams.BS_COUNTRY);\n    }\n    Locale locale = null;\n    if(language != null){\n      locale = country == null ? new Locale(language) : new Locale(language, country);\n    } else {\n      locale = Locale.ROOT;\n    }\n\n    // construct BreakIterator\n    String type = params.getFieldParam(fieldName, HighlightParams.BS_TYPE, \"WORD\").toLowerCase(Locale.ROOT);\n    BreakIterator bi = null;\n    if(type.equals(\"character\")){\n      bi = BreakIterator.getCharacterInstance(locale);\n    }\n    else if(type.equals(\"word\")){\n      bi = BreakIterator.getWordInstance(locale);\n    }\n    else if(type.equals(\"line\")){\n      bi = BreakIterator.getLineInstance(locale);\n    }\n    else if(type.equals(\"sentence\")){\n      bi = BreakIterator.getSentenceInstance(locale);\n    }\n    else\n      throw new SolrException(ErrorCode.BAD_REQUEST, type + \" is invalid for parameter \" + HighlightParams.BS_TYPE);\n\n    return new org.apache.lucene.search.vectorhighlight.BreakIteratorBoundaryScanner(bi);\n  }\n\n","sourceOld":"  @Override\n  protected BoundaryScanner get(String fieldName, SolrParams params) {\n    // construct Locale\n    String language = params.getFieldParam(fieldName, HighlightParams.BS_LANGUAGE);\n    String country = params.getFieldParam(fieldName, HighlightParams.BS_COUNTRY);\n    if(country != null && language == null){\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          HighlightParams.BS_LANGUAGE + \" parameter cannot be null when you specify \" + HighlightParams.BS_COUNTRY);\n    }\n    Locale locale = null;\n    if(language != null){\n      locale = country == null ? new Locale(language) : new Locale(language, country);\n    }\n\n    // construct BreakIterator\n    String type = params.getFieldParam(fieldName, HighlightParams.BS_TYPE, \"WORD\").toLowerCase();\n    BreakIterator bi = null;\n    if(type.equals(\"character\")){\n      bi = locale == null ? BreakIterator.getCharacterInstance() : BreakIterator.getCharacterInstance(locale);\n    }\n    else if(type.equals(\"word\")){\n      bi = locale == null ? BreakIterator.getWordInstance() : BreakIterator.getWordInstance(locale);\n    }\n    else if(type.equals(\"line\")){\n      bi = locale == null ? BreakIterator.getLineInstance() : BreakIterator.getLineInstance(locale);\n    }\n    else if(type.equals(\"sentence\")){\n      bi = locale == null ? BreakIterator.getSentenceInstance() : BreakIterator.getSentenceInstance(locale);\n    }\n    else\n      throw new SolrException(ErrorCode.BAD_REQUEST, type + \" is invalid for parameter \" + HighlightParams.BS_TYPE);\n\n    return new org.apache.lucene.search.vectorhighlight.BreakIteratorBoundaryScanner(bi);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93ebcbd0a745c480ddb4d98779055ca8ff71de79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"448a213c5dfd8b9baaf143dcbf9e633d8d7d1d5e":["b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b"],"b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b":["93ebcbd0a745c480ddb4d98779055ca8ff71de79"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["93ebcbd0a745c480ddb4d98779055ca8ff71de79","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2acf500f78aa12b92e371fd89c719291986b6b90":["93ebcbd0a745c480ddb4d98779055ca8ff71de79","448a213c5dfd8b9baaf143dcbf9e633d8d7d1d5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2acf500f78aa12b92e371fd89c719291986b6b90"],"46d8ada1fff8d18cb197c38c7983225162599948":["93ebcbd0a745c480ddb4d98779055ca8ff71de79","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"93ebcbd0a745c480ddb4d98779055ca8ff71de79":["b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b","fe33227f6805edab2036cbb80645cc4e2d1fa424","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"448a213c5dfd8b9baaf143dcbf9e633d8d7d1d5e":["2acf500f78aa12b92e371fd89c719291986b6b90"],"b4c18e3a5a8908e0fa2ea7c1a3507a214b70153b":["448a213c5dfd8b9baaf143dcbf9e633d8d7d1d5e"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93ebcbd0a745c480ddb4d98779055ca8ff71de79"],"2acf500f78aa12b92e371fd89c719291986b6b90":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}