{"path":"lucene/src/java/org/apache/lucene/util/OpenBitSetIterator#nextDoc().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/OpenBitSetIterator#nextDoc().mjava","pathOld":"src/java/org/apache/lucene/util/OpenBitSetIterator#nextDoc().mjava","sourceNew":"  /***** alternate shift implementations\n  // 32 bit shifts, but a long shift needed at the end\n  private void shift2() {\n    int y = (int)word;\n    if (y==0) {wordShift +=32; y = (int)(word >>>32); }\n    if ((y & 0x0000FFFF) == 0) { wordShift +=16; y>>>=16; }\n    if ((y & 0x000000FF) == 0) { wordShift +=8; y>>>=8; }\n    indexArray = bitlist[y & 0xff];\n    word >>>= (wordShift +1);\n  }\n\n  private void shift3() {\n    int lower = (int)word;\n    int lowByte = lower & 0xff;\n    if (lowByte != 0) {\n      indexArray=bitlist[lowByte];\n      return;\n    }\n    shift();\n  }\n  ******/\n\n  @Override\n  public int nextDoc() {\n    if (indexArray == 0) {\n      if (word != 0) {\n        word >>>= 8;\n        wordShift += 8;\n      }\n\n      while (word == 0) {\n        if (++i >= words) {\n          return curDocId = NO_MORE_DOCS;\n        }\n        word = arr[i];\n        wordShift = -1; // loop invariant code motion should move this\n      }\n\n      // after the first time, should I go with a linear search, or\n      // stick with the binary search in shift?\n      shift();\n    }\n\n    int bitIndex = (indexArray & 0x0f) + wordShift;\n    indexArray >>>= 4;\n    // should i<<6 be cached as a separate variable?\n    // it would only save one cycle in the best circumstances.\n    return curDocId = (i<<6) + bitIndex;\n  }\n\n","sourceOld":"  /***** alternate shift implementations\n  // 32 bit shifts, but a long shift needed at the end\n  private void shift2() {\n    int y = (int)word;\n    if (y==0) {wordShift +=32; y = (int)(word >>>32); }\n    if ((y & 0x0000FFFF) == 0) { wordShift +=16; y>>>=16; }\n    if ((y & 0x000000FF) == 0) { wordShift +=8; y>>>=8; }\n    indexArray = bitlist[y & 0xff];\n    word >>>= (wordShift +1);\n  }\n\n  private void shift3() {\n    int lower = (int)word;\n    int lowByte = lower & 0xff;\n    if (lowByte != 0) {\n      indexArray=bitlist[lowByte];\n      return;\n    }\n    shift();\n  }\n  ******/\n\n  @Override\n  public int nextDoc() {\n    if (indexArray == 0) {\n      if (word != 0) {\n        word >>>= 8;\n        wordShift += 8;\n      }\n\n      while (word == 0) {\n        if (++i >= words) {\n          return curDocId = NO_MORE_DOCS;\n        }\n        word = arr[i];\n        wordShift = -1; // loop invariant code motion should move this\n      }\n\n      // after the first time, should I go with a linear search, or\n      // stick with the binary search in shift?\n      shift();\n    }\n\n    int bitIndex = (indexArray & 0x0f) + wordShift;\n    indexArray >>>= 4;\n    // should i<<6 be cached as a separate variable?\n    // it would only save one cycle in the best circumstances.\n    return curDocId = (i<<6) + bitIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OpenBitSetIterator#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/OpenBitSetIterator#nextDoc().mjava","sourceNew":"  /***** alternate shift implementations\n  // 32 bit shifts, but a long shift needed at the end\n  private void shift2() {\n    int y = (int)word;\n    if (y==0) {wordShift +=32; y = (int)(word >>>32); }\n    if ((y & 0x0000FFFF) == 0) { wordShift +=16; y>>>=16; }\n    if ((y & 0x000000FF) == 0) { wordShift +=8; y>>>=8; }\n    indexArray = bitlist[y & 0xff];\n    word >>>= (wordShift +1);\n  }\n\n  private void shift3() {\n    int lower = (int)word;\n    int lowByte = lower & 0xff;\n    if (lowByte != 0) {\n      indexArray=bitlist[lowByte];\n      return;\n    }\n    shift();\n  }\n  ******/\n\n  @Override\n  public int nextDoc() {\n    if (indexArray == 0) {\n      if (word != 0) {\n        word >>>= 8;\n        wordShift += 8;\n      }\n\n      while (word == 0) {\n        if (++i >= words) {\n          return curDocId = NO_MORE_DOCS;\n        }\n        word = arr[i];\n        wordShift = -1; // loop invariant code motion should move this\n      }\n\n      // after the first time, should I go with a linear search, or\n      // stick with the binary search in shift?\n      shift();\n    }\n\n    int bitIndex = (indexArray & 0x0f) + wordShift;\n    indexArray >>>= 4;\n    // should i<<6 be cached as a separate variable?\n    // it would only save one cycle in the best circumstances.\n    return curDocId = (i<<6) + bitIndex;\n  }\n\n","sourceOld":"  /***** alternate shift implementations\n  // 32 bit shifts, but a long shift needed at the end\n  private void shift2() {\n    int y = (int)word;\n    if (y==0) {wordShift +=32; y = (int)(word >>>32); }\n    if ((y & 0x0000FFFF) == 0) { wordShift +=16; y>>>=16; }\n    if ((y & 0x000000FF) == 0) { wordShift +=8; y>>>=8; }\n    indexArray = bitlist[y & 0xff];\n    word >>>= (wordShift +1);\n  }\n\n  private void shift3() {\n    int lower = (int)word;\n    int lowByte = lower & 0xff;\n    if (lowByte != 0) {\n      indexArray=bitlist[lowByte];\n      return;\n    }\n    shift();\n  }\n  ******/\n\n  @Override\n  public int nextDoc() {\n    if (indexArray == 0) {\n      if (word != 0) {\n        word >>>= 8;\n        wordShift += 8;\n      }\n\n      while (word == 0) {\n        if (++i >= words) {\n          return curDocId = NO_MORE_DOCS;\n        }\n        word = arr[i];\n        wordShift = -1; // loop invariant code motion should move this\n      }\n\n      // after the first time, should I go with a linear search, or\n      // stick with the binary search in shift?\n      shift();\n    }\n\n    int bitIndex = (indexArray & 0x0f) + wordShift;\n    indexArray >>>= 4;\n    // should i<<6 be cached as a separate variable?\n    // it would only save one cycle in the best circumstances.\n    return curDocId = (i<<6) + bitIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}