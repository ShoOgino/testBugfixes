{"path":"backwards/src/test/org/apache/lucene/index/TestCompoundFile#demo_FSIndexInputBug(Directory,String).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestCompoundFile#demo_FSIndexInputBug(Directory,String).mjava","pathOld":"/dev/null","sourceNew":"    private void demo_FSIndexInputBug(Directory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        IndexOutput os = fsdir.createOutput(file);\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        IndexInput in = fsdir.openInput(file);\n\n        // This read primes the buffer in IndexInput\n        byte b = in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        b = in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            b = in.readByte();\n            fail(\"expected readByte() to throw exception\");\n        } catch (IOException e) {\n          // expected exception\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestCompoundFile#demo_FSIndexInputBug(Directory,String).mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestCompoundFile#demo_FSIndexInputBug(Directory,String).mjava","sourceNew":"    private void demo_FSIndexInputBug(Directory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        IndexOutput os = fsdir.createOutput(file);\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        IndexInput in = fsdir.openInput(file);\n\n        // This read primes the buffer in IndexInput\n        byte b = in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        b = in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            b = in.readByte();\n            fail(\"expected readByte() to throw exception\");\n        } catch (IOException e) {\n          // expected exception\n        }\n    }\n\n","sourceOld":"    private void demo_FSIndexInputBug(Directory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        IndexOutput os = fsdir.createOutput(file);\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        IndexInput in = fsdir.openInput(file);\n\n        // This read primes the buffer in IndexInput\n        byte b = in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        b = in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            b = in.readByte();\n            fail(\"expected readByte() to throw exception\");\n        } catch (IOException e) {\n          // expected exception\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}