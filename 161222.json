{"path":"lucene/core/src/java/org/apache/lucene/search/TopDocs#merge(Sort,int,TopDocs[]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs#merge(Sort,int,TopDocs[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TopDocs#merge(Sort,int,TopDocs[]).mjava","sourceNew":"  /** Returns a new TopDocs, containing topN results across\n   *  the provided TopDocs, sorting by the specified {@link\n   *  Sort}.  Each of the TopDocs must have been sorted by\n   *  the same Sort, and sort field values must have been\n   *  filled (ie, <code>fillFields=true</code> must be\n   *  passed to {@link\n   *  TopFieldCollector#create}.\n   *\n   * <p>Pass sort=null to merge sort by score descending.\n   *\n   * @lucene.experimental */\n  public static TopDocs merge(Sort sort, int topN, TopDocs[] shardHits) throws IOException {\n\n    final PriorityQueue<ShardRef> queue;\n    if (sort == null) {\n      queue = new ScoreMergeSortQueue(shardHits);\n    } else {\n      queue = new MergeSortQueue(sort, shardHits);\n    }\n\n    int totalHitCount = 0;\n    int availHitCount = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n      final TopDocs shard = shardHits[shardIDX];\n      // totalHits can be non-zero even if no hits were\n      // collected, when searchAfter was used:\n      totalHitCount += shard.totalHits;\n      if (shard.scoreDocs != null && shard.scoreDocs.length > 0) {\n        availHitCount += shard.scoreDocs.length;\n        queue.add(new ShardRef(shardIDX));\n        maxScore = Math.max(maxScore, shard.getMaxScore());\n        //System.out.println(\"  maxScore now \" + maxScore + \" vs \" + shard.getMaxScore());\n      }\n    }\n\n    if (availHitCount == 0) {\n      maxScore = Float.NaN;\n    }\n\n    final ScoreDoc[] hits = new ScoreDoc[Math.min(topN, availHitCount)];\n\n    int hitUpto = 0;\n    while(hitUpto < hits.length) {\n      assert queue.size() > 0;\n      ShardRef ref = queue.pop();\n      final ScoreDoc hit = shardHits[ref.shardIndex].scoreDocs[ref.hitIndex++];\n      hit.shardIndex = ref.shardIndex;\n      hits[hitUpto] = hit;\n\n      //System.out.println(\"  hitUpto=\" + hitUpto);\n      //System.out.println(\"    doc=\" + hits[hitUpto].doc + \" score=\" + hits[hitUpto].score);\n\n      hitUpto++;\n\n      if (ref.hitIndex < shardHits[ref.shardIndex].scoreDocs.length) {\n        // Not done with this these TopDocs yet:\n        queue.add(ref);\n      }\n    }\n\n    if (sort == null) {\n      return new TopDocs(totalHitCount, hits, maxScore);\n    } else {\n      return new TopFieldDocs(totalHitCount, hits, sort.getSort(), maxScore);\n    }\n  }\n\n","sourceOld":"  /** Returns a new TopDocs, containing topN results across\n   *  the provided TopDocs, sorting by the specified {@link\n   *  Sort}.  Each of the TopDocs must have been sorted by\n   *  the same Sort, and sort field values must have been\n   *  filled (ie, <code>fillFields=true</code> must be\n   *  passed to {@link\n   *  TopFieldCollector#create}.\n   *\n   * <p>Pass sort=null to merge sort by score descending.\n   *\n   * @lucene.experimental */\n  public static TopDocs merge(Sort sort, int topN, TopDocs[] shardHits) throws IOException {\n\n    final PriorityQueue<ShardRef> queue;\n    if (sort == null) {\n      queue = new ScoreMergeSortQueue(shardHits);\n    } else {\n      queue = new MergeSortQueue(sort, shardHits);\n    }\n\n    int totalHitCount = 0;\n    int availHitCount = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n      final TopDocs shard = shardHits[shardIDX];\n      // totalHits can be non-zero even if no hits were\n      // collected, when searchAfter was used:\n      totalHitCount += shard.totalHits;\n      if (shard.scoreDocs != null && shard.scoreDocs.length > 0) {\n        availHitCount += shard.scoreDocs.length;\n        queue.add(new ShardRef(shardIDX));\n        maxScore = Math.max(maxScore, shard.getMaxScore());\n        //System.out.println(\"  maxScore now \" + maxScore + \" vs \" + shard.getMaxScore());\n      }\n    }\n\n    if (availHitCount == 0) {\n      maxScore = Float.NaN;\n    }\n\n    final ScoreDoc[] hits = new ScoreDoc[Math.min(topN, availHitCount)];\n\n    int hitUpto = 0;\n    while(hitUpto < hits.length) {\n      assert queue.size() > 0;\n      ShardRef ref = queue.pop();\n      final ScoreDoc hit = shardHits[ref.shardIndex].scoreDocs[ref.hitIndex++];\n      hit.shardIndex = ref.shardIndex;\n      hits[hitUpto] = hit;\n\n      //System.out.println(\"  hitUpto=\" + hitUpto);\n      //System.out.println(\"    doc=\" + hits[hitUpto].doc + \" score=\" + hits[hitUpto].score);\n\n      hitUpto++;\n\n      if (ref.hitIndex < shardHits[ref.shardIndex].scoreDocs.length) {\n        // Not done with this these TopDocs yet:\n        queue.add(ref);\n      }\n    }\n\n    if (sort == null) {\n      return new TopDocs(totalHitCount, hits, maxScore);\n    } else {\n      return new TopFieldDocs(totalHitCount, hits, sort.getSort(), maxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a74d5a8515f3d6fa070474ac1cc0f86dbd1485a5","date":1395042605,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs#merge(Sort,int,TopDocs[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs#merge(Sort,int,TopDocs[]).mjava","sourceNew":"  /** Returns a new TopDocs, containing topN results across\n   *  the provided TopDocs, sorting by the specified {@link\n   *  Sort}.  Each of the TopDocs must have been sorted by\n   *  the same Sort, and sort field values must have been\n   *  filled (ie, <code>fillFields=true</code> must be\n   *  passed to {@link\n   *  TopFieldCollector#create}.\n   *\n   * <p>Pass sort=null to merge sort by score descending.\n   *\n   * @lucene.experimental */\n  public static TopDocs merge(Sort sort, int topN, TopDocs[] shardHits) throws IOException {\n    return merge(sort, 0, topN, shardHits);\n  }\n\n","sourceOld":"  /** Returns a new TopDocs, containing topN results across\n   *  the provided TopDocs, sorting by the specified {@link\n   *  Sort}.  Each of the TopDocs must have been sorted by\n   *  the same Sort, and sort field values must have been\n   *  filled (ie, <code>fillFields=true</code> must be\n   *  passed to {@link\n   *  TopFieldCollector#create}.\n   *\n   * <p>Pass sort=null to merge sort by score descending.\n   *\n   * @lucene.experimental */\n  public static TopDocs merge(Sort sort, int topN, TopDocs[] shardHits) throws IOException {\n\n    final PriorityQueue<ShardRef> queue;\n    if (sort == null) {\n      queue = new ScoreMergeSortQueue(shardHits);\n    } else {\n      queue = new MergeSortQueue(sort, shardHits);\n    }\n\n    int totalHitCount = 0;\n    int availHitCount = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n      final TopDocs shard = shardHits[shardIDX];\n      // totalHits can be non-zero even if no hits were\n      // collected, when searchAfter was used:\n      totalHitCount += shard.totalHits;\n      if (shard.scoreDocs != null && shard.scoreDocs.length > 0) {\n        availHitCount += shard.scoreDocs.length;\n        queue.add(new ShardRef(shardIDX));\n        maxScore = Math.max(maxScore, shard.getMaxScore());\n        //System.out.println(\"  maxScore now \" + maxScore + \" vs \" + shard.getMaxScore());\n      }\n    }\n\n    if (availHitCount == 0) {\n      maxScore = Float.NaN;\n    }\n\n    final ScoreDoc[] hits = new ScoreDoc[Math.min(topN, availHitCount)];\n\n    int hitUpto = 0;\n    while(hitUpto < hits.length) {\n      assert queue.size() > 0;\n      ShardRef ref = queue.pop();\n      final ScoreDoc hit = shardHits[ref.shardIndex].scoreDocs[ref.hitIndex++];\n      hit.shardIndex = ref.shardIndex;\n      hits[hitUpto] = hit;\n\n      //System.out.println(\"  hitUpto=\" + hitUpto);\n      //System.out.println(\"    doc=\" + hits[hitUpto].doc + \" score=\" + hits[hitUpto].score);\n\n      hitUpto++;\n\n      if (ref.hitIndex < shardHits[ref.shardIndex].scoreDocs.length) {\n        // Not done with this these TopDocs yet:\n        queue.add(ref);\n      }\n    }\n\n    if (sort == null) {\n      return new TopDocs(totalHitCount, hits, maxScore);\n    } else {\n      return new TopFieldDocs(totalHitCount, hits, sort.getSort(), maxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs#merge(Sort,int,TopFieldDocs[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs#merge(Sort,int,TopDocs[]).mjava","sourceNew":"  /** Returns a new TopFieldDocs, containing topN results across\n   *  the provided TopFieldDocs, sorting by the specified {@link\n   *  Sort}.  Each of the TopDocs must have been sorted by\n   *  the same Sort, and sort field values must have been\n   *  filled (ie, <code>fillFields=true</code> must be\n   *  passed to {@link TopFieldCollector#create}).\n   * @lucene.experimental */\n  public static TopFieldDocs merge(Sort sort, int topN, TopFieldDocs[] shardHits) throws IOException {\n    return merge(sort, 0, topN, shardHits);\n  }\n\n","sourceOld":"  /** Returns a new TopDocs, containing topN results across\n   *  the provided TopDocs, sorting by the specified {@link\n   *  Sort}.  Each of the TopDocs must have been sorted by\n   *  the same Sort, and sort field values must have been\n   *  filled (ie, <code>fillFields=true</code> must be\n   *  passed to {@link\n   *  TopFieldCollector#create}.\n   *\n   * <p>Pass sort=null to merge sort by score descending.\n   *\n   * @lucene.experimental */\n  public static TopDocs merge(Sort sort, int topN, TopDocs[] shardHits) throws IOException {\n    return merge(sort, 0, topN, shardHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a74d5a8515f3d6fa070474ac1cc0f86dbd1485a5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fb17639909a369c1e64866842e5c213440acc17e":["a74d5a8515f3d6fa070474ac1cc0f86dbd1485a5"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb17639909a369c1e64866842e5c213440acc17e"]},"commit2Childs":{"a74d5a8515f3d6fa070474ac1cc0f86dbd1485a5":["fb17639909a369c1e64866842e5c213440acc17e"],"fb17639909a369c1e64866842e5c213440acc17e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a74d5a8515f3d6fa070474ac1cc0f86dbd1485a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}