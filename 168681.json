{"path":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testZDouble().mjava","commits":[{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testZDouble().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testZDouble().mjava","sourceNew":"  public void testZDouble() throws Exception {\n    byte buffer[] = new byte[9]; // we never need more than 9 bytes\n    ByteArrayDataOutput out = new ByteArrayDataOutput(buffer);\n    ByteArrayDataInput in = new ByteArrayDataInput(buffer);\n\n    // round-trip small integer values\n    for (int i = Short.MIN_VALUE; i < Short.MAX_VALUE; i++) {\n      double x = (double) i;\n      CompressingStoredFieldsWriter.writeZDouble(out, x);\n      in.reset(buffer, 0, out.getPosition());\n      double y = CompressingStoredFieldsReader.readZDouble(in);\n      assertTrue(in.eof());\n      assertEquals(Double.doubleToLongBits(x), Double.doubleToLongBits(y));\n\n      // check that compression actually works\n      if (i >= -1 && i <= 124) {\n        assertEquals(1, out.getPosition()); // single byte compression\n      }\n      out.reset(buffer);\n    }\n\n    // round-trip special values\n    double special[] = {\n        -0.0d,\n        +0.0d,\n        Double.NEGATIVE_INFINITY,\n        Double.POSITIVE_INFINITY,\n        Double.MIN_VALUE,\n        Double.MAX_VALUE,\n        Double.NaN\n    };\n\n    for (double x : special) {\n      CompressingStoredFieldsWriter.writeZDouble(out, x);\n      in.reset(buffer, 0, out.getPosition());\n      double y = CompressingStoredFieldsReader.readZDouble(in);\n      assertTrue(in.eof());\n      assertEquals(Double.doubleToLongBits(x), Double.doubleToLongBits(y));\n      out.reset(buffer);\n    }\n\n    // round-trip random values\n    Random r = random();\n    for (int i = 0; i < 100000; i++) {\n      double x = r.nextDouble() * (random().nextInt(100) - 50);\n      CompressingStoredFieldsWriter.writeZDouble(out, x);\n      assertTrue(\"length=\" + out.getPosition() + \", d=\" + x, out.getPosition() <= (x < 0 ? 9 : 8));\n      in.reset(buffer, 0, out.getPosition());\n      double y = CompressingStoredFieldsReader.readZDouble(in);\n      assertTrue(in.eof());\n      assertEquals(Double.doubleToLongBits(x), Double.doubleToLongBits(y));\n      out.reset(buffer);\n    }\n\n    // same with floats\n    for (int i = 0; i < 100000; i++) {\n      double x = (double) (r.nextFloat() * (random().nextInt(100) - 50));\n      CompressingStoredFieldsWriter.writeZDouble(out, x);\n      assertTrue(\"length=\" + out.getPosition() + \", d=\" + x, out.getPosition() <= 5);\n      in.reset(buffer, 0, out.getPosition());\n      double y = CompressingStoredFieldsReader.readZDouble(in);\n      assertTrue(in.eof());\n      assertEquals(Double.doubleToLongBits(x), Double.doubleToLongBits(y));\n      out.reset(buffer);\n    }\n  }\n\n","sourceOld":"  public void testZDouble() throws Exception {\n    byte buffer[] = new byte[9]; // we never need more than 9 bytes\n    ByteArrayDataOutput out = new ByteArrayDataOutput(buffer);\n    ByteArrayDataInput in = new ByteArrayDataInput(buffer);\n\n    // round-trip small integer values\n    for (int i = Short.MIN_VALUE; i < Short.MAX_VALUE; i++) {\n      double x = (double) i;\n      CompressingStoredFieldsWriter.writeZDouble(out, x);\n      in.reset(buffer, 0, out.getPosition());\n      double y = CompressingStoredFieldsReader.readZDouble(in);\n      assertTrue(in.eof());\n      assertEquals(Double.doubleToLongBits(x), Double.doubleToLongBits(y));\n\n      // check that compression actually works\n      if (i >= -1 && i <= 124) {\n        assertEquals(1, out.getPosition()); // single byte compression\n      }\n      out.reset(buffer);\n    }\n\n    // round-trip special values\n    double special[] = {\n        -0.0d,\n        +0.0d,\n        Double.NEGATIVE_INFINITY,\n        Double.POSITIVE_INFINITY,\n        Double.MIN_VALUE,\n        Double.MAX_VALUE,\n        Double.NaN\n    };\n\n    for (double x : special) {\n      CompressingStoredFieldsWriter.writeZDouble(out, x);\n      in.reset(buffer, 0, out.getPosition());\n      double y = CompressingStoredFieldsReader.readZDouble(in);\n      assertTrue(in.eof());\n      assertEquals(Double.doubleToLongBits(x), Double.doubleToLongBits(y));\n      out.reset(buffer);\n    }\n\n    // round-trip random values\n    Random r = random();\n    for (int i = 0; i < 100000; i++) {\n      double x = r.nextDouble() * (random().nextInt(100) - 50);\n      CompressingStoredFieldsWriter.writeZDouble(out, x);\n      assertTrue(\"length=\" + out.getPosition() + \", d=\" + x, out.getPosition() <= (x < 0 ? 9 : 8));\n      in.reset(buffer, 0, out.getPosition());\n      double y = CompressingStoredFieldsReader.readZDouble(in);\n      assertTrue(in.eof());\n      assertEquals(Double.doubleToLongBits(x), Double.doubleToLongBits(y));\n      out.reset(buffer);\n    }\n\n    // same with floats\n    for (int i = 0; i < 100000; i++) {\n      double x = (double) (r.nextFloat() * (random().nextInt(100) - 50));\n      CompressingStoredFieldsWriter.writeZDouble(out, x);\n      assertTrue(\"length=\" + out.getPosition() + \", d=\" + x, out.getPosition() <= 5);\n      in.reset(buffer, 0, out.getPosition());\n      double y = CompressingStoredFieldsReader.readZDouble(in);\n      assertTrue(in.eof());\n      assertEquals(Double.doubleToLongBits(x), Double.doubleToLongBits(y));\n      out.reset(buffer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}