{"path":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader#PrefixCodedTermsReader(TermsIndexReaderBase,Directory,FieldInfos,String,PostingsReaderBase,int,Comparator[BytesRef],int,String).mjava","commits":[{"id":"16c697f6ca5cdc82f918f753317a4ac9c70d259f","date":1289840486,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader#PrefixCodedTermsReader(TermsIndexReaderBase,Directory,FieldInfos,String,PostingsReaderBase,int,Comparator[BytesRef],int,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader#PrefixCodedTermsReader(TermsIndexReaderBase,Directory,FieldInfos,String,PostingsReaderBase,int,Comparator[BytesRef],int).mjava","sourceNew":"  public PrefixCodedTermsReader(TermsIndexReaderBase indexReader, Directory dir, FieldInfos fieldInfos, String segment, PostingsReaderBase postingsReader, int readBufferSize,\n                                 Comparator<BytesRef> termComp, int termsCacheSize, String codecId)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n    termsCache = new DoubleBarrelLRUCache<FieldAndTerm,TermState>(termsCacheSize);\n\n    this.termComp = termComp;\n    \n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, PrefixCodedTermsWriter.TERMS_EXTENSION),\n                       readBufferSize);\n\n    boolean success = false;\n    try {\n      readHeader(in);\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final long numTerms = in.readLong();\n        assert numTerms >= 0;\n        final long termsStartPointer = in.readLong();\n        final TermsIndexReaderBase.FieldReader fieldIndexReader;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fieldIndexReader = indexReader.getField(fieldInfo);\n        if (numTerms > 0) {\n          assert !fields.containsKey(fieldInfo.name);\n          fields.put(fieldInfo.name, new FieldReader(fieldIndexReader, fieldInfo, numTerms, termsStartPointer));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        in.close();\n      }\n    }\n\n    this.indexReader = indexReader;\n  }\n\n","sourceOld":"  public PrefixCodedTermsReader(TermsIndexReaderBase indexReader, Directory dir, FieldInfos fieldInfos, String segment, PostingsReaderBase postingsReader, int readBufferSize,\n                                 Comparator<BytesRef> termComp, int termsCacheSize)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n    termsCache = new DoubleBarrelLRUCache<FieldAndTerm,TermState>(termsCacheSize);\n\n    this.termComp = termComp;\n    \n    in = dir.openInput(IndexFileNames.segmentFileName(segment, \"\", PrefixCodedTermsWriter.TERMS_EXTENSION),\n                       readBufferSize);\n\n    boolean success = false;\n    try {\n      readHeader(in);\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final long numTerms = in.readLong();\n        assert numTerms >= 0;\n        final long termsStartPointer = in.readLong();\n        final TermsIndexReaderBase.FieldReader fieldIndexReader;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fieldIndexReader = indexReader.getField(fieldInfo);\n        if (numTerms > 0) {\n          assert !fields.containsKey(fieldInfo.name);\n          fields.put(fieldInfo.name, new FieldReader(fieldIndexReader, fieldInfo, numTerms, termsStartPointer));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        in.close();\n      }\n    }\n\n    this.indexReader = indexReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader#PrefixCodedTermsReader(TermsIndexReaderBase,Directory,FieldInfos,String,PostingsReaderBase,int,Comparator[BytesRef],int,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader#PrefixCodedTermsReader(TermsIndexReaderBase,Directory,FieldInfos,String,PostingsReaderBase,int,Comparator[BytesRef],int).mjava","sourceNew":"  public PrefixCodedTermsReader(TermsIndexReaderBase indexReader, Directory dir, FieldInfos fieldInfos, String segment, PostingsReaderBase postingsReader, int readBufferSize,\n                                 Comparator<BytesRef> termComp, int termsCacheSize, String codecId)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n    termsCache = new DoubleBarrelLRUCache<FieldAndTerm,TermState>(termsCacheSize);\n\n    this.termComp = termComp;\n    \n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, PrefixCodedTermsWriter.TERMS_EXTENSION),\n                       readBufferSize);\n\n    boolean success = false;\n    try {\n      readHeader(in);\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final long numTerms = in.readLong();\n        assert numTerms >= 0;\n        final long termsStartPointer = in.readLong();\n        final TermsIndexReaderBase.FieldReader fieldIndexReader;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fieldIndexReader = indexReader.getField(fieldInfo);\n        if (numTerms > 0) {\n          assert !fields.containsKey(fieldInfo.name);\n          fields.put(fieldInfo.name, new FieldReader(fieldIndexReader, fieldInfo, numTerms, termsStartPointer));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        in.close();\n      }\n    }\n\n    this.indexReader = indexReader;\n  }\n\n","sourceOld":"  public PrefixCodedTermsReader(TermsIndexReaderBase indexReader, Directory dir, FieldInfos fieldInfos, String segment, PostingsReaderBase postingsReader, int readBufferSize,\n                                 Comparator<BytesRef> termComp, int termsCacheSize)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n    termsCache = new DoubleBarrelLRUCache<FieldAndTerm,TermState>(termsCacheSize);\n\n    this.termComp = termComp;\n    \n    in = dir.openInput(IndexFileNames.segmentFileName(segment, \"\", PrefixCodedTermsWriter.TERMS_EXTENSION),\n                       readBufferSize);\n\n    boolean success = false;\n    try {\n      readHeader(in);\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final long numTerms = in.readLong();\n        assert numTerms >= 0;\n        final long termsStartPointer = in.readLong();\n        final TermsIndexReaderBase.FieldReader fieldIndexReader;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fieldIndexReader = indexReader.getField(fieldInfo);\n        if (numTerms > 0) {\n          assert !fields.containsKey(fieldInfo.name);\n          fields.put(fieldInfo.name, new FieldReader(fieldIndexReader, fieldInfo, numTerms, termsStartPointer));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        in.close();\n      }\n    }\n\n    this.indexReader = indexReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader#PrefixCodedTermsReader(TermsIndexReaderBase,Directory,FieldInfos,String,PostingsReaderBase,int,Comparator[BytesRef],int,String).mjava","pathOld":"/dev/null","sourceNew":"  public PrefixCodedTermsReader(TermsIndexReaderBase indexReader, Directory dir, FieldInfos fieldInfos, String segment, PostingsReaderBase postingsReader, int readBufferSize,\n                                 Comparator<BytesRef> termComp, int termsCacheSize, String codecId)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n    termsCache = new DoubleBarrelLRUCache<FieldAndTerm,TermState>(termsCacheSize);\n\n    this.termComp = termComp;\n    \n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, PrefixCodedTermsWriter.TERMS_EXTENSION),\n                       readBufferSize);\n\n    boolean success = false;\n    try {\n      readHeader(in);\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final long numTerms = in.readLong();\n        assert numTerms >= 0;\n        final long termsStartPointer = in.readLong();\n        final TermsIndexReaderBase.FieldReader fieldIndexReader;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fieldIndexReader = indexReader.getField(fieldInfo);\n        if (numTerms > 0) {\n          assert !fields.containsKey(fieldInfo.name);\n          fields.put(fieldInfo.name, new FieldReader(fieldIndexReader, fieldInfo, numTerms, termsStartPointer));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        in.close();\n      }\n    }\n\n    this.indexReader = indexReader;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader#PrefixCodedTermsReader(TermsIndexReaderBase,Directory,FieldInfos,String,PostingsReaderBase,int,Comparator[BytesRef],int,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader#PrefixCodedTermsReader(TermsIndexReaderBase,Directory,FieldInfos,String,PostingsReaderBase,int,Comparator[BytesRef],int,String).mjava","sourceNew":"  public PrefixCodedTermsReader(TermsIndexReaderBase indexReader, Directory dir, FieldInfos fieldInfos, String segment, PostingsReaderBase postingsReader, int readBufferSize,\n                                 Comparator<BytesRef> termComp, int termsCacheSize, String codecId)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n    termsCache = new DoubleBarrelLRUCache<FieldAndTerm,TermState>(termsCacheSize);\n\n    this.termComp = termComp;\n    \n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, PrefixCodedTermsWriter.TERMS_EXTENSION),\n                       readBufferSize);\n\n    boolean success = false;\n    try {\n      readHeader(in);\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final long numTerms = in.readLong();\n        assert numTerms >= 0;\n        final long termsStartPointer = in.readLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        if (numTerms > 0) {\n          assert !fields.containsKey(fieldInfo.name);\n          fields.put(fieldInfo.name, new FieldReader(fieldInfo, numTerms, termsStartPointer));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        in.close();\n      }\n    }\n\n    this.indexReader = indexReader;\n  }\n\n","sourceOld":"  public PrefixCodedTermsReader(TermsIndexReaderBase indexReader, Directory dir, FieldInfos fieldInfos, String segment, PostingsReaderBase postingsReader, int readBufferSize,\n                                 Comparator<BytesRef> termComp, int termsCacheSize, String codecId)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n    termsCache = new DoubleBarrelLRUCache<FieldAndTerm,TermState>(termsCacheSize);\n\n    this.termComp = termComp;\n    \n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, PrefixCodedTermsWriter.TERMS_EXTENSION),\n                       readBufferSize);\n\n    boolean success = false;\n    try {\n      readHeader(in);\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final long numTerms = in.readLong();\n        assert numTerms >= 0;\n        final long termsStartPointer = in.readLong();\n        final TermsIndexReaderBase.FieldReader fieldIndexReader;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fieldIndexReader = indexReader.getField(fieldInfo);\n        if (numTerms > 0) {\n          assert !fields.containsKey(fieldInfo.name);\n          fields.put(fieldInfo.name, new FieldReader(fieldIndexReader, fieldInfo, numTerms, termsStartPointer));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        in.close();\n      }\n    }\n\n    this.indexReader = indexReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader#PrefixCodedTermsReader(TermsIndexReaderBase,Directory,FieldInfos,String,PostingsReaderBase,int,Comparator[BytesRef],int,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader#PrefixCodedTermsReader(TermsIndexReaderBase,Directory,FieldInfos,String,PostingsReaderBase,int,Comparator[BytesRef],int,String).mjava","sourceNew":"  public PrefixCodedTermsReader(TermsIndexReaderBase indexReader, Directory dir, FieldInfos fieldInfos, String segment, PostingsReaderBase postingsReader, int readBufferSize,\n                                 Comparator<BytesRef> termComp, int termsCacheSize, String codecId)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n    termsCache = new DoubleBarrelLRUCache<FieldAndTerm,TermState>(termsCacheSize);\n\n    this.termComp = termComp;\n    \n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, PrefixCodedTermsWriter.TERMS_EXTENSION),\n                       readBufferSize);\n\n    boolean success = false;\n    try {\n      readHeader(in);\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final long numTerms = in.readLong();\n        assert numTerms >= 0;\n        final long termsStartPointer = in.readLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        if (numTerms > 0) {\n          assert !fields.containsKey(fieldInfo.name);\n          fields.put(fieldInfo.name, new FieldReader(fieldInfo, numTerms, termsStartPointer));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        in.close();\n      }\n    }\n\n    this.indexReader = indexReader;\n  }\n\n","sourceOld":"  public PrefixCodedTermsReader(TermsIndexReaderBase indexReader, Directory dir, FieldInfos fieldInfos, String segment, PostingsReaderBase postingsReader, int readBufferSize,\n                                 Comparator<BytesRef> termComp, int termsCacheSize, String codecId)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n    termsCache = new DoubleBarrelLRUCache<FieldAndTerm,TermState>(termsCacheSize);\n\n    this.termComp = termComp;\n    \n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, PrefixCodedTermsWriter.TERMS_EXTENSION),\n                       readBufferSize);\n\n    boolean success = false;\n    try {\n      readHeader(in);\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final long numTerms = in.readLong();\n        assert numTerms >= 0;\n        final long termsStartPointer = in.readLong();\n        final TermsIndexReaderBase.FieldReader fieldIndexReader;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fieldIndexReader = indexReader.getField(fieldInfo);\n        if (numTerms > 0) {\n          assert !fields.containsKey(fieldInfo.name);\n          fields.put(fieldInfo.name, new FieldReader(fieldIndexReader, fieldInfo, numTerms, termsStartPointer));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        in.close();\n      }\n    }\n\n    this.indexReader = indexReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa1a999d6674423e5c4ac858b410283f6fe03f20","date":1294868331,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader#PrefixCodedTermsReader(TermsIndexReaderBase,Directory,FieldInfos,String,PostingsReaderBase,int,Comparator[BytesRef],int,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader#PrefixCodedTermsReader(TermsIndexReaderBase,Directory,FieldInfos,String,PostingsReaderBase,int,Comparator[BytesRef],int,String).mjava","sourceNew":"  public PrefixCodedTermsReader(TermsIndexReaderBase indexReader, Directory dir, FieldInfos fieldInfos, String segment, PostingsReaderBase postingsReader, int readBufferSize,\n                                 Comparator<BytesRef> termComp, int termsCacheSize, String codecId)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n    termsCache = new DoubleBarrelLRUCache<FieldAndTerm,PrefixCodedTermState>(termsCacheSize);\n\n    this.termComp = termComp;\n    \n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, PrefixCodedTermsWriter.TERMS_EXTENSION),\n                       readBufferSize);\n\n    boolean success = false;\n    try {\n      readHeader(in);\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final long numTerms = in.readLong();\n        assert numTerms >= 0;\n        final long termsStartPointer = in.readLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        if (numTerms > 0) {\n          assert !fields.containsKey(fieldInfo.name);\n          fields.put(fieldInfo.name, new FieldReader(fieldInfo, numTerms, termsStartPointer));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        in.close();\n      }\n    }\n\n    this.indexReader = indexReader;\n  }\n\n","sourceOld":"  public PrefixCodedTermsReader(TermsIndexReaderBase indexReader, Directory dir, FieldInfos fieldInfos, String segment, PostingsReaderBase postingsReader, int readBufferSize,\n                                 Comparator<BytesRef> termComp, int termsCacheSize, String codecId)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n    termsCache = new DoubleBarrelLRUCache<FieldAndTerm,TermState>(termsCacheSize);\n\n    this.termComp = termComp;\n    \n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, PrefixCodedTermsWriter.TERMS_EXTENSION),\n                       readBufferSize);\n\n    boolean success = false;\n    try {\n      readHeader(in);\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final long numTerms = in.readLong();\n        assert numTerms >= 0;\n        final long termsStartPointer = in.readLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        if (numTerms > 0) {\n          assert !fields.containsKey(fieldInfo.name);\n          fields.put(fieldInfo.name, new FieldReader(fieldInfo, numTerms, termsStartPointer));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        in.close();\n      }\n    }\n\n    this.indexReader = indexReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader#PrefixCodedTermsReader(TermsIndexReaderBase,Directory,FieldInfos,String,PostingsReaderBase,int,Comparator[BytesRef],int,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader#PrefixCodedTermsReader(TermsIndexReaderBase,Directory,FieldInfos,String,PostingsReaderBase,int,Comparator[BytesRef],int,String).mjava","sourceNew":"  public PrefixCodedTermsReader(TermsIndexReaderBase indexReader, Directory dir, FieldInfos fieldInfos, String segment, PostingsReaderBase postingsReader, int readBufferSize,\n                                 Comparator<BytesRef> termComp, int termsCacheSize, String codecId)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n    termsCache = new DoubleBarrelLRUCache<FieldAndTerm,PrefixCodedTermState>(termsCacheSize);\n\n    this.termComp = termComp;\n    \n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, PrefixCodedTermsWriter.TERMS_EXTENSION),\n                       readBufferSize);\n\n    boolean success = false;\n    try {\n      readHeader(in);\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final long numTerms = in.readLong();\n        assert numTerms >= 0;\n        final long termsStartPointer = in.readLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        if (numTerms > 0) {\n          assert !fields.containsKey(fieldInfo.name);\n          fields.put(fieldInfo.name, new FieldReader(fieldInfo, numTerms, termsStartPointer));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        in.close();\n      }\n    }\n\n    this.indexReader = indexReader;\n  }\n\n","sourceOld":"  public PrefixCodedTermsReader(TermsIndexReaderBase indexReader, Directory dir, FieldInfos fieldInfos, String segment, PostingsReaderBase postingsReader, int readBufferSize,\n                                 Comparator<BytesRef> termComp, int termsCacheSize, String codecId)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n    termsCache = new DoubleBarrelLRUCache<FieldAndTerm,TermState>(termsCacheSize);\n\n    this.termComp = termComp;\n    \n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, PrefixCodedTermsWriter.TERMS_EXTENSION),\n                       readBufferSize);\n\n    boolean success = false;\n    try {\n      readHeader(in);\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final long numTerms = in.readLong();\n        assert numTerms >= 0;\n        final long termsStartPointer = in.readLong();\n        final TermsIndexReaderBase.FieldReader fieldIndexReader;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fieldIndexReader = indexReader.getField(fieldInfo);\n        if (numTerms > 0) {\n          assert !fields.containsKey(fieldInfo.name);\n          fields.put(fieldInfo.name, new FieldReader(fieldIndexReader, fieldInfo, numTerms, termsStartPointer));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        in.close();\n      }\n    }\n\n    this.indexReader = indexReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ecd298fdc085e7eba27afa7fae58df1ba1a2808","date":1295102557,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader#PrefixCodedTermsReader(TermsIndexReaderBase,Directory,FieldInfos,String,PostingsReaderBase,int,Comparator[BytesRef],int,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader#PrefixCodedTermsReader(TermsIndexReaderBase,Directory,FieldInfos,String,PostingsReaderBase,int,Comparator[BytesRef],int,String).mjava","sourceNew":"  public PrefixCodedTermsReader(TermsIndexReaderBase indexReader, Directory dir, FieldInfos fieldInfos, String segment, PostingsReaderBase postingsReader, int readBufferSize,\n                                 Comparator<BytesRef> termComp, int termsCacheSize, String codecId)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n    termsCache = new DoubleBarrelLRUCache<FieldAndTerm,PrefixCodedTermState>(termsCacheSize);\n\n    this.termComp = termComp;\n    \n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, PrefixCodedTermsWriter.TERMS_EXTENSION),\n                       readBufferSize);\n\n    boolean success = false;\n    try {\n      readHeader(in);\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n\n      final int numFields = in.readVInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long numTerms = in.readVLong();\n        assert numTerms >= 0;\n        final long termsStartPointer = in.readVLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        final long sumTotalTermFreq = fieldInfo.omitTermFreqAndPositions ? -1 : in.readVLong();\n        assert !fields.containsKey(fieldInfo.name);\n        fields.put(fieldInfo.name, new FieldReader(fieldInfo, numTerms, termsStartPointer, sumTotalTermFreq));\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        in.close();\n      }\n    }\n\n    this.indexReader = indexReader;\n  }\n\n","sourceOld":"  public PrefixCodedTermsReader(TermsIndexReaderBase indexReader, Directory dir, FieldInfos fieldInfos, String segment, PostingsReaderBase postingsReader, int readBufferSize,\n                                 Comparator<BytesRef> termComp, int termsCacheSize, String codecId)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n    termsCache = new DoubleBarrelLRUCache<FieldAndTerm,PrefixCodedTermState>(termsCacheSize);\n\n    this.termComp = termComp;\n    \n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, PrefixCodedTermsWriter.TERMS_EXTENSION),\n                       readBufferSize);\n\n    boolean success = false;\n    try {\n      readHeader(in);\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final long numTerms = in.readLong();\n        assert numTerms >= 0;\n        final long termsStartPointer = in.readLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        if (numTerms > 0) {\n          assert !fields.containsKey(fieldInfo.name);\n          fields.put(fieldInfo.name, new FieldReader(fieldInfo, numTerms, termsStartPointer));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        in.close();\n      }\n    }\n\n    this.indexReader = indexReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16843358872ed92ba92888ab99df297550b9a36a","date":1295144724,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader#PrefixCodedTermsReader(TermsIndexReaderBase,Directory,FieldInfos,String,PostingsReaderBase,int,Comparator[BytesRef],int,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader#PrefixCodedTermsReader(TermsIndexReaderBase,Directory,FieldInfos,String,PostingsReaderBase,int,Comparator[BytesRef],int,String).mjava","sourceNew":"  public PrefixCodedTermsReader(TermsIndexReaderBase indexReader, Directory dir, FieldInfos fieldInfos, String segment, PostingsReaderBase postingsReader, int readBufferSize,\n                                 Comparator<BytesRef> termComp, int termsCacheSize, String codecId)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n    termsCache = new DoubleBarrelLRUCache<FieldAndTerm,PrefixCodedTermState>(termsCacheSize);\n\n    this.termComp = termComp;\n    \n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, PrefixCodedTermsWriter.TERMS_EXTENSION),\n                       readBufferSize);\n\n    boolean success = false;\n    try {\n      readHeader(in);\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n\n      final int numFields = in.readVInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long numTerms = in.readVLong();\n        assert numTerms >= 0;\n        final long termsStartPointer = in.readVLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        final long sumTotalTermFreq = fieldInfo.omitTermFreqAndPositions ? -1 : in.readVLong();\n        assert !fields.containsKey(fieldInfo.name);\n        fields.put(fieldInfo.name, new FieldReader(fieldInfo, numTerms, termsStartPointer, sumTotalTermFreq));\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        in.close();\n      }\n    }\n\n    this.indexReader = indexReader;\n  }\n\n","sourceOld":"  public PrefixCodedTermsReader(TermsIndexReaderBase indexReader, Directory dir, FieldInfos fieldInfos, String segment, PostingsReaderBase postingsReader, int readBufferSize,\n                                 Comparator<BytesRef> termComp, int termsCacheSize, String codecId)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n    termsCache = new DoubleBarrelLRUCache<FieldAndTerm,PrefixCodedTermState>(termsCacheSize);\n\n    this.termComp = termComp;\n    \n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, PrefixCodedTermsWriter.TERMS_EXTENSION),\n                       readBufferSize);\n\n    boolean success = false;\n    try {\n      readHeader(in);\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final long numTerms = in.readLong();\n        assert numTerms >= 0;\n        final long termsStartPointer = in.readLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        if (numTerms > 0) {\n          assert !fields.containsKey(fieldInfo.name);\n          fields.put(fieldInfo.name, new FieldReader(fieldInfo, numTerms, termsStartPointer));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        in.close();\n      }\n    }\n\n    this.indexReader = indexReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader#BlockTermsReader(TermsIndexReaderBase,Directory,FieldInfos,String,PostingsReaderBase,int,Comparator[BytesRef],int,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader#PrefixCodedTermsReader(TermsIndexReaderBase,Directory,FieldInfos,String,PostingsReaderBase,int,Comparator[BytesRef],int,String).mjava","sourceNew":"  public BlockTermsReader(TermsIndexReaderBase indexReader, Directory dir, FieldInfos fieldInfos, String segment, PostingsReaderBase postingsReader, int readBufferSize,\n                          Comparator<BytesRef> termComp, int termsCacheSize, String codecId)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n    termsCache = new DoubleBarrelLRUCache<FieldAndTerm,BlockTermState>(termsCacheSize);\n\n    this.termComp = termComp;\n    this.segment = segment;\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, BlockTermsWriter.TERMS_EXTENSION),\n                       readBufferSize);\n\n    boolean success = false;\n    try {\n      readHeader(in);\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n\n      final int numFields = in.readVInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long numTerms = in.readVLong();\n        assert numTerms >= 0;\n        final long termsStartPointer = in.readVLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        final long sumTotalTermFreq = fieldInfo.omitTermFreqAndPositions ? -1 : in.readVLong();\n        assert !fields.containsKey(fieldInfo.name);\n        fields.put(fieldInfo.name, new FieldReader(fieldInfo, numTerms, termsStartPointer, sumTotalTermFreq));\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        in.close();\n      }\n    }\n\n    this.indexReader = indexReader;\n  }\n\n","sourceOld":"  public PrefixCodedTermsReader(TermsIndexReaderBase indexReader, Directory dir, FieldInfos fieldInfos, String segment, PostingsReaderBase postingsReader, int readBufferSize,\n                                 Comparator<BytesRef> termComp, int termsCacheSize, String codecId)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n    termsCache = new DoubleBarrelLRUCache<FieldAndTerm,PrefixCodedTermState>(termsCacheSize);\n\n    this.termComp = termComp;\n    \n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, PrefixCodedTermsWriter.TERMS_EXTENSION),\n                       readBufferSize);\n\n    boolean success = false;\n    try {\n      readHeader(in);\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n\n      final int numFields = in.readVInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long numTerms = in.readVLong();\n        assert numTerms >= 0;\n        final long termsStartPointer = in.readVLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        final long sumTotalTermFreq = fieldInfo.omitTermFreqAndPositions ? -1 : in.readVLong();\n        assert !fields.containsKey(fieldInfo.name);\n        fields.put(fieldInfo.name, new FieldReader(fieldInfo, numTerms, termsStartPointer, sumTotalTermFreq));\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        in.close();\n      }\n    }\n\n    this.indexReader = indexReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader#PrefixCodedTermsReader(TermsIndexReaderBase,Directory,FieldInfos,String,PostingsReaderBase,int,Comparator[BytesRef],int,String).mjava","sourceNew":null,"sourceOld":"  public PrefixCodedTermsReader(TermsIndexReaderBase indexReader, Directory dir, FieldInfos fieldInfos, String segment, PostingsReaderBase postingsReader, int readBufferSize,\n                                 Comparator<BytesRef> termComp, int termsCacheSize, String codecId)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n    termsCache = new DoubleBarrelLRUCache<FieldAndTerm,PrefixCodedTermState>(termsCacheSize);\n\n    this.termComp = termComp;\n    \n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, PrefixCodedTermsWriter.TERMS_EXTENSION),\n                       readBufferSize);\n\n    boolean success = false;\n    try {\n      readHeader(in);\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n\n      final int numFields = in.readVInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long numTerms = in.readVLong();\n        assert numTerms >= 0;\n        final long termsStartPointer = in.readVLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        final long sumTotalTermFreq = fieldInfo.omitTermFreqAndPositions ? -1 : in.readVLong();\n        assert !fields.containsKey(fieldInfo.name);\n        fields.put(fieldInfo.name, new FieldReader(fieldInfo, numTerms, termsStartPointer, sumTotalTermFreq));\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        in.close();\n      }\n    }\n\n    this.indexReader = indexReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader#PrefixCodedTermsReader(TermsIndexReaderBase,Directory,FieldInfos,String,PostingsReaderBase,int,Comparator[BytesRef],int,String).mjava","sourceNew":null,"sourceOld":"  public PrefixCodedTermsReader(TermsIndexReaderBase indexReader, Directory dir, FieldInfos fieldInfos, String segment, PostingsReaderBase postingsReader, int readBufferSize,\n                                 Comparator<BytesRef> termComp, int termsCacheSize, String codecId)\n    throws IOException {\n    \n    this.postingsReader = postingsReader;\n    termsCache = new DoubleBarrelLRUCache<FieldAndTerm,TermState>(termsCacheSize);\n\n    this.termComp = termComp;\n    \n    in = dir.openInput(IndexFileNames.segmentFileName(segment, codecId, PrefixCodedTermsWriter.TERMS_EXTENSION),\n                       readBufferSize);\n\n    boolean success = false;\n    try {\n      readHeader(in);\n\n      // Have PostingsReader init itself\n      postingsReader.init(in);\n\n      // Read per-field details\n      seekDir(in, dirOffset);\n\n      final int numFields = in.readInt();\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readInt();\n        final long numTerms = in.readLong();\n        assert numTerms >= 0;\n        final long termsStartPointer = in.readLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        if (numTerms > 0) {\n          assert !fields.containsKey(fieldInfo.name);\n          fields.put(fieldInfo.name, new FieldReader(fieldInfo, numTerms, termsStartPointer));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        in.close();\n      }\n    }\n\n    this.indexReader = indexReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","56da903869515527852ee21ea7ef7bfe414cd40d"],"16c697f6ca5cdc82f918f753317a4ac9c70d259f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","16c697f6ca5cdc82f918f753317a4ac9c70d259f"],"16843358872ed92ba92888ab99df297550b9a36a":["868da859b43505d9d2a023bfeae6dd0c795f5295","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","16c697f6ca5cdc82f918f753317a4ac9c70d259f"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["16843358872ed92ba92888ab99df297550b9a36a","b1add9ddc0005b07550d4350720aac22dc9886b3"],"56da903869515527852ee21ea7ef7bfe414cd40d":["16c697f6ca5cdc82f918f753317a4ac9c70d259f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["56da903869515527852ee21ea7ef7bfe414cd40d"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["fa1a999d6674423e5c4ac858b410283f6fe03f20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b1add9ddc0005b07550d4350720aac22dc9886b3"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["70ad682703b8585f5d0a637efec044d57ec05efb"],"16c697f6ca5cdc82f918f753317a4ac9c70d259f":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"16843358872ed92ba92888ab99df297550b9a36a":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["e79a6d080bdd5b2a8f56342cf571b5476de04180","29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16c697f6ca5cdc82f918f753317a4ac9c70d259f","9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["868da859b43505d9d2a023bfeae6dd0c795f5295","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["16843358872ed92ba92888ab99df297550b9a36a"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["16843358872ed92ba92888ab99df297550b9a36a","b1add9ddc0005b07550d4350720aac22dc9886b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e79a6d080bdd5b2a8f56342cf571b5476de04180","29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}