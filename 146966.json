{"path":"solr/core/src/test/org/apache/solr/cloud/AsyncMigrateRouteKeyTest#sendStatusRequestWithRetry(ModifiableSolrParams,int).mjava","commits":[{"id":"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211","date":1394784078,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AsyncMigrateRouteKeyTest#sendStatusRequestWithRetry(ModifiableSolrParams,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Helper method to send a status request with specific retry limit and return\n   * the message/null from the success response.\n   */\n  private String sendStatusRequestWithRetry(ModifiableSolrParams params, int maxCounter)\n      throws SolrServerException, IOException {\n    NamedList status = null;\n    String state = null;\n    String message = null;\n    NamedList r;\n    while (maxCounter-- > 0) {\n      r = sendRequest(params);\n      status = (NamedList) r.get(\"status\");\n      state = (String) status.get(\"state\");\n      message = (String) status.get(\"msg\");\n\n      if (state.equals(\"completed\") || state.equals(\"failed\"))\n        return (String) status.get(\"msg\");\n\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n\n      }\n\n    }\n    // Return last state?\n    return message;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb7299fddbea34e76b950854f150f14b895ba68","date":1396327974,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AsyncMigrateRouteKeyTest#sendStatusRequestWithRetry(ModifiableSolrParams,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AsyncMigrateRouteKeyTest#sendStatusRequestWithRetry(ModifiableSolrParams,int).mjava","sourceNew":"  /**\n   * Helper method to send a status request with specific retry limit and return\n   * the message/null from the success response.\n   */\n  private String sendStatusRequestWithRetry(ModifiableSolrParams params, int maxCounter)\n      throws SolrServerException, IOException {\n    NamedList status = null;\n    String state = null;\n    String message = null;\n    NamedList r;\n    while (maxCounter-- > 0) {\n      r = sendRequest(params);\n      status = (NamedList) r.get(\"status\");\n      state = (String) status.get(\"state\");\n      message = (String) status.get(\"msg\");\n\n      if (state.equals(\"completed\") || state.equals(\"failed\"))\n        return (String) status.get(\"msg\");\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n\n      }\n\n    }\n    // Return last state?\n    return message;\n  }\n\n","sourceOld":"  /**\n   * Helper method to send a status request with specific retry limit and return\n   * the message/null from the success response.\n   */\n  private String sendStatusRequestWithRetry(ModifiableSolrParams params, int maxCounter)\n      throws SolrServerException, IOException {\n    NamedList status = null;\n    String state = null;\n    String message = null;\n    NamedList r;\n    while (maxCounter-- > 0) {\n      r = sendRequest(params);\n      status = (NamedList) r.get(\"status\");\n      state = (String) status.get(\"state\");\n      message = (String) status.get(\"msg\");\n\n      if (state.equals(\"completed\") || state.equals(\"failed\"))\n        return (String) status.get(\"msg\");\n\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n\n      }\n\n    }\n    // Return last state?\n    return message;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AsyncMigrateRouteKeyTest#sendStatusRequestWithRetry(ModifiableSolrParams,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AsyncMigrateRouteKeyTest#sendStatusRequestWithRetry(ModifiableSolrParams,int).mjava","sourceNew":"  /**\n   * Helper method to send a status request with specific retry limit and return\n   * the message/null from the success response.\n   */\n  private String sendStatusRequestWithRetry(ModifiableSolrParams params, int maxCounter)\n      throws SolrServerException, IOException {\n    NamedList status = null;\n    String state = null;\n    String message = null;\n    NamedList r;\n    while (maxCounter-- > 0) {\n      r = sendRequest(params);\n      status = (NamedList) r.get(\"status\");\n      state = (String) status.get(\"state\");\n      message = (String) status.get(\"msg\");\n\n      if (state.equals(\"completed\") || state.equals(\"failed\"))\n        return (String) status.get(\"msg\");\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n\n      }\n\n    }\n    // Return last state?\n    return message;\n  }\n\n","sourceOld":"  /**\n   * Helper method to send a status request with specific retry limit and return\n   * the message/null from the success response.\n   */\n  private String sendStatusRequestWithRetry(ModifiableSolrParams params, int maxCounter)\n      throws SolrServerException, IOException {\n    NamedList status = null;\n    String state = null;\n    String message = null;\n    NamedList r;\n    while (maxCounter-- > 0) {\n      r = sendRequest(params);\n      status = (NamedList) r.get(\"status\");\n      state = (String) status.get(\"state\");\n      message = (String) status.get(\"msg\");\n\n      if (state.equals(\"completed\") || state.equals(\"failed\"))\n        return (String) status.get(\"msg\");\n\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n\n      }\n\n    }\n    // Return last state?\n    return message;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3088cdaa24ffe3ef44713ac9484114bd56eca2af","date":1453441194,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AsyncMigrateRouteKeyTest#sendStatusRequestWithRetry(ModifiableSolrParams,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AsyncMigrateRouteKeyTest#sendStatusRequestWithRetry(ModifiableSolrParams,int).mjava","sourceNew":"  /**\n   * Helper method to send a status request with specific retry limit and return\n   * the message/null from the success response.\n   */\n  private String sendStatusRequestWithRetry(ModifiableSolrParams params, int maxCounter)\n      throws SolrServerException, IOException {\n    NamedList status = null;\n    RequestStatusState state = null;\n    String message = null;\n    NamedList r;\n    while (maxCounter-- > 0) {\n      r = sendRequest(params);\n      status = (NamedList) r.get(\"status\");\n      state = RequestStatusState.fromKey((String) status.get(\"state\"));\n      message = (String) status.get(\"msg\");\n\n      if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n        return (String) status.get(\"msg\");\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n\n      }\n\n    }\n    // Return last state?\n    return message;\n  }\n\n","sourceOld":"  /**\n   * Helper method to send a status request with specific retry limit and return\n   * the message/null from the success response.\n   */\n  private String sendStatusRequestWithRetry(ModifiableSolrParams params, int maxCounter)\n      throws SolrServerException, IOException {\n    NamedList status = null;\n    String state = null;\n    String message = null;\n    NamedList r;\n    while (maxCounter-- > 0) {\n      r = sendRequest(params);\n      status = (NamedList) r.get(\"status\");\n      state = (String) status.get(\"state\");\n      message = (String) status.get(\"msg\");\n\n      if (state.equals(\"completed\") || state.equals(\"failed\"))\n        return (String) status.get(\"msg\");\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n\n      }\n\n    }\n    // Return last state?\n    return message;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a02c54923e5f4de08097fa9028e09e8cf5caa82","date":1475573567,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/AsyncMigrateRouteKeyTest#sendStatusRequestWithRetry(ModifiableSolrParams,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Helper method to send a status request with specific retry limit and return\n   * the message/null from the success response.\n   */\n  private String sendStatusRequestWithRetry(ModifiableSolrParams params, int maxCounter)\n      throws SolrServerException, IOException {\n    NamedList status = null;\n    RequestStatusState state = null;\n    String message = null;\n    NamedList r;\n    while (maxCounter-- > 0) {\n      r = sendRequest(params);\n      status = (NamedList) r.get(\"status\");\n      state = RequestStatusState.fromKey((String) status.get(\"state\"));\n      message = (String) status.get(\"msg\");\n\n      if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n        return (String) status.get(\"msg\");\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n\n      }\n\n    }\n    // Return last state?\n    return message;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/AsyncMigrateRouteKeyTest#sendStatusRequestWithRetry(ModifiableSolrParams,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Helper method to send a status request with specific retry limit and return\n   * the message/null from the success response.\n   */\n  private String sendStatusRequestWithRetry(ModifiableSolrParams params, int maxCounter)\n      throws SolrServerException, IOException {\n    NamedList status = null;\n    RequestStatusState state = null;\n    String message = null;\n    NamedList r;\n    while (maxCounter-- > 0) {\n      r = sendRequest(params);\n      status = (NamedList) r.get(\"status\");\n      state = RequestStatusState.fromKey((String) status.get(\"state\"));\n      message = (String) status.get(\"msg\");\n\n      if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n        return (String) status.get(\"msg\");\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n\n      }\n\n    }\n    // Return last state?\n    return message;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/AsyncMigrateRouteKeyTest#sendStatusRequestWithRetry(ModifiableSolrParams,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Helper method to send a status request with specific retry limit and return\n   * the message/null from the success response.\n   */\n  private String sendStatusRequestWithRetry(ModifiableSolrParams params, int maxCounter)\n      throws SolrServerException, IOException {\n    NamedList status = null;\n    RequestStatusState state = null;\n    String message = null;\n    NamedList r;\n    while (maxCounter-- > 0) {\n      r = sendRequest(params);\n      status = (NamedList) r.get(\"status\");\n      state = RequestStatusState.fromKey((String) status.get(\"state\"));\n      message = (String) status.get(\"msg\");\n\n      if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n        return (String) status.get(\"msg\");\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n\n      }\n\n    }\n    // Return last state?\n    return message;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb7299fddbea34e76b950854f150f14b895ba68":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"5eb2511ababf862ea11e10761c70ee560cd84510":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211","5eb7299fddbea34e76b950854f150f14b895ba68"],"3088cdaa24ffe3ef44713ac9484114bd56eca2af":["5eb7299fddbea34e76b950854f150f14b895ba68"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["3088cdaa24ffe3ef44713ac9484114bd56eca2af","5a02c54923e5f4de08097fa9028e09e8cf5caa82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["3088cdaa24ffe3ef44713ac9484114bd56eca2af"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3088cdaa24ffe3ef44713ac9484114bd56eca2af","1967bed916cc89da82a1c2085f27976da6d08cbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1967bed916cc89da82a1c2085f27976da6d08cbd"]},"commit2Childs":{"5eb7299fddbea34e76b950854f150f14b895ba68":["5eb2511ababf862ea11e10761c70ee560cd84510","3088cdaa24ffe3ef44713ac9484114bd56eca2af"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"3088cdaa24ffe3ef44713ac9484114bd56eca2af":["1967bed916cc89da82a1c2085f27976da6d08cbd","5a02c54923e5f4de08097fa9028e09e8cf5caa82","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211":["5eb7299fddbea34e76b950854f150f14b895ba68","5eb2511ababf862ea11e10761c70ee560cd84510"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}