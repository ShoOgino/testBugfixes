{"path":"solr/core/src/test/org/apache/solr/schema/NumericFieldsTest#testSortMissingFirstLast().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/NumericFieldsTest#testSortMissingFirstLast().mjava","pathOld":"solr/src/test/org/apache/solr/schema/NumericFieldsTest#testSortMissingFirstLast().mjava","sourceNew":"  @Test\n  public void testSortMissingFirstLast() \n  {\n    clearIndex();\n    \n    assertU(adoc(\"id\", \"M1\" ));\n    assertU(adoc( getDoc( \"+4\",  4 ) ));\n    assertU(adoc( getDoc( \"+5\",  5 ) ));\n    assertU(adoc( getDoc( \"-3\", -3 ) ));\n    assertU(adoc(\"id\", \"M2\" ));\n    assertU(commit());\n\n    // 'normal' sorting.  Missing Values are 0\n    String suffix = \"\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='-3']\",\n              \"//result/doc[2]/str[@name='id'][.='M1']\",\n              \"//result/doc[3]/str[@name='id'][.='M2']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n      \n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='+5']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='M1']\",\n              \"//result/doc[4]/str[@name='id'][.='M2']\",\n              \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n    \n    \n    // sortMissingLast = true \n    suffix = \"_last\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='-3']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='+5']\",\n              \"//result/doc[4]/str[@name='id'][.='M1']\",\n              \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n      \n      // This does not match\n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='+5']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='-3']\",\n              \"//result/doc[4]/str[@name='id'][.='M1']\",\n              \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n    }\n\n    // sortMissingFirst = true \n    suffix = \"_first\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='M1']\",\n              \"//result/doc[2]/str[@name='id'][.='M2']\",\n              \"//result/doc[3]/str[@name='id'][.='-3']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n      \n      // This does not match\n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='M1']\",\n              \"//result/doc[2]/str[@name='id'][.='M2']\",\n              \"//result/doc[3]/str[@name='id'][.='+5']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSortMissingFirstLast() \n  {\n    clearIndex();\n    \n    assertU(adoc(\"id\", \"M1\" ));\n    assertU(adoc( getDoc( \"+4\",  4 ) ));\n    assertU(adoc( getDoc( \"+5\",  5 ) ));\n    assertU(adoc( getDoc( \"-3\", -3 ) ));\n    assertU(adoc(\"id\", \"M2\" ));\n    assertU(commit());\n\n    // 'normal' sorting.  Missing Values are 0\n    String suffix = \"\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='-3']\",\n              \"//result/doc[2]/str[@name='id'][.='M1']\",\n              \"//result/doc[3]/str[@name='id'][.='M2']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n      \n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='+5']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='M1']\",\n              \"//result/doc[4]/str[@name='id'][.='M2']\",\n              \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n    \n    \n    // sortMissingLast = true \n    suffix = \"_last\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='-3']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='+5']\",\n              \"//result/doc[4]/str[@name='id'][.='M1']\",\n              \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n      \n      // This does not match\n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='+5']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='-3']\",\n              \"//result/doc[4]/str[@name='id'][.='M1']\",\n              \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n    }\n\n    // sortMissingFirst = true \n    suffix = \"_first\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='M1']\",\n              \"//result/doc[2]/str[@name='id'][.='M2']\",\n              \"//result/doc[3]/str[@name='id'][.='-3']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n      \n      // This does not match\n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='M1']\",\n              \"//result/doc[2]/str[@name='id'][.='M2']\",\n              \"//result/doc[3]/str[@name='id'][.='+5']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/NumericFieldsTest#testSortMissingFirstLast().mjava","pathOld":"solr/src/test/org/apache/solr/schema/NumericFieldsTest#testSortMissingFirstLast().mjava","sourceNew":"  @Test\n  public void testSortMissingFirstLast() \n  {\n    clearIndex();\n    \n    assertU(adoc(\"id\", \"M1\" ));\n    assertU(adoc( getDoc( \"+4\",  4 ) ));\n    assertU(adoc( getDoc( \"+5\",  5 ) ));\n    assertU(adoc( getDoc( \"-3\", -3 ) ));\n    assertU(adoc(\"id\", \"M2\" ));\n    assertU(commit());\n\n    // 'normal' sorting.  Missing Values are 0\n    String suffix = \"\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='-3']\",\n              \"//result/doc[2]/str[@name='id'][.='M1']\",\n              \"//result/doc[3]/str[@name='id'][.='M2']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n      \n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='+5']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='M1']\",\n              \"//result/doc[4]/str[@name='id'][.='M2']\",\n              \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n    \n    \n    // sortMissingLast = true \n    suffix = \"_last\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='-3']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='+5']\",\n              \"//result/doc[4]/str[@name='id'][.='M1']\",\n              \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n      \n      // This does not match\n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='+5']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='-3']\",\n              \"//result/doc[4]/str[@name='id'][.='M1']\",\n              \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n    }\n\n    // sortMissingFirst = true \n    suffix = \"_first\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='M1']\",\n              \"//result/doc[2]/str[@name='id'][.='M2']\",\n              \"//result/doc[3]/str[@name='id'][.='-3']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n      \n      // This does not match\n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='M1']\",\n              \"//result/doc[2]/str[@name='id'][.='M2']\",\n              \"//result/doc[3]/str[@name='id'][.='+5']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSortMissingFirstLast() \n  {\n    clearIndex();\n    \n    assertU(adoc(\"id\", \"M1\" ));\n    assertU(adoc( getDoc( \"+4\",  4 ) ));\n    assertU(adoc( getDoc( \"+5\",  5 ) ));\n    assertU(adoc( getDoc( \"-3\", -3 ) ));\n    assertU(adoc(\"id\", \"M2\" ));\n    assertU(commit());\n\n    // 'normal' sorting.  Missing Values are 0\n    String suffix = \"\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='-3']\",\n              \"//result/doc[2]/str[@name='id'][.='M1']\",\n              \"//result/doc[3]/str[@name='id'][.='M2']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n      \n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='+5']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='M1']\",\n              \"//result/doc[4]/str[@name='id'][.='M2']\",\n              \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n    \n    \n    // sortMissingLast = true \n    suffix = \"_last\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='-3']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='+5']\",\n              \"//result/doc[4]/str[@name='id'][.='M1']\",\n              \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n      \n      // This does not match\n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='+5']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='-3']\",\n              \"//result/doc[4]/str[@name='id'][.='M1']\",\n              \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n    }\n\n    // sortMissingFirst = true \n    suffix = \"_first\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='M1']\",\n              \"//result/doc[2]/str[@name='id'][.='M2']\",\n              \"//result/doc[3]/str[@name='id'][.='-3']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n      \n      // This does not match\n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='M1']\",\n              \"//result/doc[2]/str[@name='id'][.='M2']\",\n              \"//result/doc[3]/str[@name='id'][.='+5']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/NumericFieldsTest#testSortMissingFirstLast().mjava","pathOld":"solr/src/test/org/apache/solr/schema/NumericFieldsTest#testSortMissingFirstLast().mjava","sourceNew":"  @Test\n  public void testSortMissingFirstLast() \n  {\n    clearIndex();\n    \n    assertU(adoc(\"id\", \"M1\" ));\n    assertU(adoc( getDoc( \"+4\",  4 ) ));\n    assertU(adoc( getDoc( \"+5\",  5 ) ));\n    assertU(adoc( getDoc( \"-3\", -3 ) ));\n    assertU(adoc(\"id\", \"M2\" ));\n    assertU(commit());\n\n    // 'normal' sorting.  Missing Values are 0\n    String suffix = \"\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='-3']\",\n              \"//result/doc[2]/str[@name='id'][.='M1']\",\n              \"//result/doc[3]/str[@name='id'][.='M2']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n      \n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='+5']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='M1']\",\n              \"//result/doc[4]/str[@name='id'][.='M2']\",\n              \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n    \n    \n    // sortMissingLast = true \n    suffix = \"_last\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='-3']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='+5']\",\n              \"//result/doc[4]/str[@name='id'][.='M1']\",\n              \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n      \n      // This does not match\n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='+5']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='-3']\",\n              \"//result/doc[4]/str[@name='id'][.='M1']\",\n              \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n    }\n\n    // sortMissingFirst = true \n    suffix = \"_first\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='M1']\",\n              \"//result/doc[2]/str[@name='id'][.='M2']\",\n              \"//result/doc[3]/str[@name='id'][.='-3']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n      \n      // This does not match\n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='M1']\",\n              \"//result/doc[2]/str[@name='id'][.='M2']\",\n              \"//result/doc[3]/str[@name='id'][.='+5']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSortMissingFirstLast() \n  {\n    clearIndex();\n    \n    assertU(adoc(\"id\", \"M1\" ));\n    assertU(adoc( getDoc( \"+4\",  4 ) ));\n    assertU(adoc( getDoc( \"+5\",  5 ) ));\n    assertU(adoc( getDoc( \"-3\", -3 ) ));\n    assertU(adoc(\"id\", \"M2\" ));\n    assertU(commit());\n\n    // 'normal' sorting.  Missing Values are 0\n    String suffix = \"\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='-3']\",\n              \"//result/doc[2]/str[@name='id'][.='M1']\",\n              \"//result/doc[3]/str[@name='id'][.='M2']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n      \n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='+5']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='M1']\",\n              \"//result/doc[4]/str[@name='id'][.='M2']\",\n              \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n    \n    \n    // sortMissingLast = true \n    suffix = \"_last\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='-3']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='+5']\",\n              \"//result/doc[4]/str[@name='id'][.='M1']\",\n              \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n      \n      // This does not match\n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='+5']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='-3']\",\n              \"//result/doc[4]/str[@name='id'][.='M1']\",\n              \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n    }\n\n    // sortMissingFirst = true \n    suffix = \"_first\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='M1']\",\n              \"//result/doc[2]/str[@name='id'][.='M2']\",\n              \"//result/doc[3]/str[@name='id'][.='-3']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n      \n      // This does not match\n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='M1']\",\n              \"//result/doc[2]/str[@name='id'][.='M2']\",\n              \"//result/doc[3]/str[@name='id'][.='+5']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ad1be4e8b9dcee71e07100ce21c98fcfd73234f","date":1321212557,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/NumericFieldsTest#testSortMissingFirstLast().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/NumericFieldsTest#testSortMissingFirstLast().mjava","sourceNew":"  @Test\n  public void testSortMissingFirstLast() {\n    clearIndex();\n\n    assertU(adoc(\"id\", \"M1\"));\n    assertU(adoc(getDoc(\"+4\", 4, \"2011-04-04T00:00:00Z\")));\n    assertU(adoc(getDoc(\"+5\", 5, \"2011-05-05T00:00:00Z\")));\n    assertU(adoc(getDoc(\"-3\", -3, \"2011-01-01T00:00:00Z\")));\n    assertU(adoc(\"id\", \"M2\"));\n    assertU(commit());\n    // 'normal' sorting.  Missing Values are 0\n    String suffix = \"\";\n    for (String t : types) {\n      if (\"date\".equals(t)) {\n        assertQ(\"Sorting Asc: \" + t + suffix,\n            req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" asc\"),\n            \"//*[@numFound='5']\",\n            \"//result/doc[1]/str[@name='id'][.='M1']\",\n            \"//result/doc[2]/str[@name='id'][.='M2']\",\n            \"//result/doc[3]/str[@name='id'][.='-3']\",\n            \"//result/doc[4]/str[@name='id'][.='+4']\",\n            \"//result/doc[5]/str[@name='id'][.='+5']\"\n        );\n\n        assertQ(\"Sorting Desc: \" + t + suffix,\n            req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" desc\"),\n            \"//*[@numFound='5']\",\n            \"//result/doc[1]/str[@name='id'][.='+5']\",\n            \"//result/doc[2]/str[@name='id'][.='+4']\",\n            \"//result/doc[3]/str[@name='id'][.='-3']\",\n            \"//result/doc[4]/str[@name='id'][.='M1']\",\n            \"//result/doc[5]/str[@name='id'][.='M2']\"\n        );\n      } else {\n        assertQ(\"Sorting Asc: \" + t + suffix,\n            req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" asc\"),\n            \"//*[@numFound='5']\",\n            \"//result/doc[1]/str[@name='id'][.='-3']\",\n            \"//result/doc[2]/str[@name='id'][.='M1']\",\n            \"//result/doc[3]/str[@name='id'][.='M2']\",\n            \"//result/doc[4]/str[@name='id'][.='+4']\",\n            \"//result/doc[5]/str[@name='id'][.='+5']\"\n        );\n\n        assertQ(\"Sorting Desc: \" + t + suffix,\n            req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" desc\"),\n            \"//*[@numFound='5']\",\n            \"//result/doc[1]/str[@name='id'][.='+5']\",\n            \"//result/doc[2]/str[@name='id'][.='+4']\",\n            \"//result/doc[3]/str[@name='id'][.='M1']\",\n            \"//result/doc[4]/str[@name='id'][.='M2']\",\n            \"//result/doc[5]/str[@name='id'][.='-3']\"\n        );\n\n      }\n    }\n\n\n    // sortMissingLast = true\n    suffix = \"_last\";\n    for (String t : types) {\n      assertQ(\"Sorting Asc: \" + t + suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" asc\"),\n          \"//*[@numFound='5']\",\n          \"//result/doc[1]/str[@name='id'][.='-3']\",\n          \"//result/doc[2]/str[@name='id'][.='+4']\",\n          \"//result/doc[3]/str[@name='id'][.='+5']\",\n          \"//result/doc[4]/str[@name='id'][.='M1']\",\n          \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n\n      // This does not match\n      assertQ(\"Sorting Desc: \" + t + suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" desc\", \"indent\", \"on\"),\n          \"//*[@numFound='5']\",\n          \"//result/doc[1]/str[@name='id'][.='+5']\",\n          \"//result/doc[2]/str[@name='id'][.='+4']\",\n          \"//result/doc[3]/str[@name='id'][.='-3']\",\n          \"//result/doc[4]/str[@name='id'][.='M1']\",\n          \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n    }\n\n    // sortMissingFirst = true\n    suffix = \"_first\";\n    for (String t : types) {\n      assertQ(\"Sorting Asc: \" + t + suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" asc\", \"indent\", \"on\"),\n          \"//*[@numFound='5']\",\n          \"//result/doc[1]/str[@name='id'][.='M1']\",\n          \"//result/doc[2]/str[@name='id'][.='M2']\",\n          \"//result/doc[3]/str[@name='id'][.='-3']\",\n          \"//result/doc[4]/str[@name='id'][.='+4']\",\n          \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n\n      // This does not match\n      assertQ(\"Sorting Desc: \" + t + suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" desc\", \"indent\", \"on\"),\n          \"//*[@numFound='5']\",\n          \"//result/doc[1]/str[@name='id'][.='M1']\",\n          \"//result/doc[2]/str[@name='id'][.='M2']\",\n          \"//result/doc[3]/str[@name='id'][.='+5']\",\n          \"//result/doc[4]/str[@name='id'][.='+4']\",\n          \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSortMissingFirstLast() \n  {\n    clearIndex();\n    \n    assertU(adoc(\"id\", \"M1\" ));\n    assertU(adoc( getDoc( \"+4\",  4 ) ));\n    assertU(adoc( getDoc( \"+5\",  5 ) ));\n    assertU(adoc( getDoc( \"-3\", -3 ) ));\n    assertU(adoc(\"id\", \"M2\" ));\n    assertU(commit());\n\n    // 'normal' sorting.  Missing Values are 0\n    String suffix = \"\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='-3']\",\n              \"//result/doc[2]/str[@name='id'][.='M1']\",\n              \"//result/doc[3]/str[@name='id'][.='M2']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n      \n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='+5']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='M1']\",\n              \"//result/doc[4]/str[@name='id'][.='M2']\",\n              \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n    \n    \n    // sortMissingLast = true \n    suffix = \"_last\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='-3']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='+5']\",\n              \"//result/doc[4]/str[@name='id'][.='M1']\",\n              \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n      \n      // This does not match\n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='+5']\",\n              \"//result/doc[2]/str[@name='id'][.='+4']\",\n              \"//result/doc[3]/str[@name='id'][.='-3']\",\n              \"//result/doc[4]/str[@name='id'][.='M1']\",\n              \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n    }\n\n    // sortMissingFirst = true \n    suffix = \"_first\";\n    for( String t : types ) {\n      assertQ( \"Sorting Asc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" asc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='M1']\",\n              \"//result/doc[2]/str[@name='id'][.='M2']\",\n              \"//result/doc[3]/str[@name='id'][.='-3']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n      \n      // This does not match\n      assertQ( \"Sorting Desc: \"+t+suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t+suffix)+\" desc\", \"indent\", \"on\" ),\n              \"//*[@numFound='5']\",\n              \"//result/doc[1]/str[@name='id'][.='M1']\",\n              \"//result/doc[2]/str[@name='id'][.='M2']\",\n              \"//result/doc[3]/str[@name='id'][.='+5']\",\n              \"//result/doc[4]/str[@name='id'][.='+4']\",\n              \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"041c92b2d706f21d6e18289f5661254b5c8bb8ca","date":1490318890,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/NumericFieldsTest#testSortMissingFirstLast().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/NumericFieldsTest#testSortMissingFirstLast().mjava","sourceNew":"  @Test\n  public void testSortMissingFirstLast() {\n    clearIndex();\n\n    // NOTE: segments may be merged in any order, so we can't make any assumptions about\n    // the relative order of M1 vs M2 unless we have a secondary sort\n    assertU(adoc(\"id\", \"M1\"));\n    assertU(adoc(getDoc(\"+4\", 4, \"2011-04-04T00:00:00Z\")));\n    assertU(adoc(getDoc(\"+5\", 5, \"2011-05-05T00:00:00Z\")));\n    assertU(adoc(getDoc(\"-3\", -3, \"2011-01-01T00:00:00Z\")));\n    assertU(adoc(\"id\", \"M2\"));\n    assertU(commit());\n    \n    // 'normal' sorting.  Missing Values are 0\n    String suffix = \"\";\n    for (String t : types) {\n      if (\"date\".equals(t)) {\n        assertQ(\"Sorting Asc: \" + t + suffix,\n            req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" asc\"),\n            \"//*[@numFound='5']\",\n            \"//result/doc[1]/str[@name='id'][starts-with(.,'M')]\",\n            \"//result/doc[2]/str[@name='id'][starts-with(.,'M')]\",\n            \"//result/doc[3]/str[@name='id'][.='-3']\",\n            \"//result/doc[4]/str[@name='id'][.='+4']\",\n            \"//result/doc[5]/str[@name='id'][.='+5']\"\n        );\n\n        assertQ(\"Sorting Desc: \" + t + suffix,\n            req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" desc\"),\n            \"//*[@numFound='5']\",\n            \"//result/doc[1]/str[@name='id'][.='+5']\",\n            \"//result/doc[2]/str[@name='id'][.='+4']\",\n            \"//result/doc[3]/str[@name='id'][.='-3']\",\n            \"//result/doc[4]/str[@name='id'][starts-with(.,'M')]\",\n            \"//result/doc[5]/str[@name='id'][starts-with(.,'M')]\"\n        );\n        \n        assertQ(\"Sorting Asc w/secondary on id desc: \" + t + suffix,\n            req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" asc, id desc\"),\n            \"//*[@numFound='5']\",\n            \"//result/doc[1]/str[@name='id'][.='M2']\",\n            \"//result/doc[2]/str[@name='id'][.='M1']\",\n            \"//result/doc[3]/str[@name='id'][.='-3']\",\n            \"//result/doc[4]/str[@name='id'][.='+4']\",\n            \"//result/doc[5]/str[@name='id'][.='+5']\"\n        );\n\n        assertQ(\"Sorting Desc w/secondary on id asc: \" + t + suffix,\n            req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" desc, id asc\"),\n            \"//*[@numFound='5']\",\n            \"//result/doc[1]/str[@name='id'][.='+5']\",\n            \"//result/doc[2]/str[@name='id'][.='+4']\",\n            \"//result/doc[3]/str[@name='id'][.='-3']\",\n            \"//result/doc[4]/str[@name='id'][.='M1']\",\n            \"//result/doc[5]/str[@name='id'][.='M2']\"\n        );\n      } else {\n        assertQ(\"Sorting Asc: \" + t + suffix,\n            req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" asc\"),\n            \"//*[@numFound='5']\",\n            \"//result/doc[1]/str[@name='id'][.='-3']\",\n            \"//result/doc[2]/str[@name='id'][starts-with(.,'M')]\",\n            \"//result/doc[3]/str[@name='id'][starts-with(.,'M')]\",\n            \"//result/doc[4]/str[@name='id'][.='+4']\",\n            \"//result/doc[5]/str[@name='id'][.='+5']\"\n        );\n\n        assertQ(\"Sorting Desc: \" + t + suffix,\n            req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" desc\"),\n            \"//*[@numFound='5']\",\n            \"//result/doc[1]/str[@name='id'][.='+5']\",\n            \"//result/doc[2]/str[@name='id'][.='+4']\",\n            \"//result/doc[3]/str[@name='id'][starts-with(.,'M')]\",\n            \"//result/doc[4]/str[@name='id'][starts-with(.,'M')]\",\n            \"//result/doc[5]/str[@name='id'][.='-3']\"\n        );\n        \n        assertQ(\"Sorting Asc w/secondary on id desc: \" + t + suffix,\n            req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" asc, id desc\"),\n            \"//*[@numFound='5']\",\n            \"//result/doc[1]/str[@name='id'][.='-3']\",\n            \"//result/doc[2]/str[@name='id'][.='M2']\",\n            \"//result/doc[3]/str[@name='id'][.='M1']\",\n            \"//result/doc[4]/str[@name='id'][.='+4']\",\n            \"//result/doc[5]/str[@name='id'][.='+5']\"\n        );\n\n        assertQ(\"Sorting Desc w/secondary on id asc: \" + t + suffix,\n            req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" desc, id asc\"),\n            \"//*[@numFound='5']\",\n            \"//result/doc[1]/str[@name='id'][.='+5']\",\n            \"//result/doc[2]/str[@name='id'][.='+4']\",\n            \"//result/doc[3]/str[@name='id'][.='M1']\",\n            \"//result/doc[4]/str[@name='id'][.='M2']\",\n            \"//result/doc[5]/str[@name='id'][.='-3']\"\n        );\n\n      }\n    }\n\n\n    // sortMissingLast = true\n    suffix = \"_last\";\n    for (String t : types) {\n      assertQ(\"Sorting Asc: \" + t + suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" asc\"),\n          \"//*[@numFound='5']\",\n          \"//result/doc[1]/str[@name='id'][.='-3']\",\n          \"//result/doc[2]/str[@name='id'][.='+4']\",\n          \"//result/doc[3]/str[@name='id'][.='+5']\",\n          \"//result/doc[4]/str[@name='id'][starts-with(.,'M')]\",\n          \"//result/doc[5]/str[@name='id'][starts-with(.,'M')]\"\n      );\n\n      assertQ(\"Sorting Desc: \" + t + suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" desc\"),\n          \"//*[@numFound='5']\",\n          \"//result/doc[1]/str[@name='id'][.='+5']\",\n          \"//result/doc[2]/str[@name='id'][.='+4']\",\n          \"//result/doc[3]/str[@name='id'][.='-3']\",\n          \"//result/doc[4]/str[@name='id'][starts-with(.,'M')]\",\n          \"//result/doc[5]/str[@name='id'][starts-with(.,'M')]\"\n      );\n\n      assertQ(\"Sorting Asc w/secondary on id desc: \" + t + suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" asc, id desc\"),\n          \"//*[@numFound='5']\",\n          \"//result/doc[1]/str[@name='id'][.='-3']\",\n          \"//result/doc[2]/str[@name='id'][.='+4']\",\n          \"//result/doc[3]/str[@name='id'][.='+5']\",\n          \"//result/doc[4]/str[@name='id'][.='M2']\",\n          \"//result/doc[5]/str[@name='id'][.='M1']\"\n      );\n\n      assertQ(\"Sorting Desc w/secondary on id asc: \" + t + suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" desc, id asc\"),\n          \"//*[@numFound='5']\",\n          \"//result/doc[1]/str[@name='id'][.='+5']\",\n          \"//result/doc[2]/str[@name='id'][.='+4']\",\n          \"//result/doc[3]/str[@name='id'][.='-3']\",\n          \"//result/doc[4]/str[@name='id'][.='M1']\",\n          \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n    }\n\n    // sortMissingFirst = true\n    suffix = \"_first\";\n    for (String t : types) {\n      assertQ(\"Sorting Asc: \" + t + suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" asc\"),\n          \"//*[@numFound='5']\",\n          \"//result/doc[1]/str[@name='id'][starts-with(.,'M')]\",\n          \"//result/doc[2]/str[@name='id'][starts-with(.,'M')]\",\n          \"//result/doc[3]/str[@name='id'][.='-3']\",\n          \"//result/doc[4]/str[@name='id'][.='+4']\",\n          \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n\n      assertQ(\"Sorting Desc: \" + t + suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" desc\"),\n          \"//*[@numFound='5']\",\n          \"//result/doc[1]/str[@name='id'][starts-with(.,'M')]\",\n          \"//result/doc[2]/str[@name='id'][starts-with(.,'M')]\",\n          \"//result/doc[3]/str[@name='id'][.='+5']\",\n          \"//result/doc[4]/str[@name='id'][.='+4']\",\n          \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n\n      assertQ(\"Sorting Asc w/secondary on id desc: \" + t + suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" asc, id desc\"),\n          \"//*[@numFound='5']\",\n          \"//result/doc[1]/str[@name='id'][.='M2']\",\n          \"//result/doc[2]/str[@name='id'][.='M1']\",\n          \"//result/doc[3]/str[@name='id'][.='-3']\",\n          \"//result/doc[4]/str[@name='id'][.='+4']\",\n          \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n\n      assertQ(\"Sorting Desc w/secondary on id asc: \" + t + suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" desc, id asc\"),\n          \"//*[@numFound='5']\",\n          \"//result/doc[1]/str[@name='id'][.='M1']\",\n          \"//result/doc[2]/str[@name='id'][.='M2']\",\n          \"//result/doc[3]/str[@name='id'][.='+5']\",\n          \"//result/doc[4]/str[@name='id'][.='+4']\",\n          \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSortMissingFirstLast() {\n    clearIndex();\n\n    assertU(adoc(\"id\", \"M1\"));\n    assertU(adoc(getDoc(\"+4\", 4, \"2011-04-04T00:00:00Z\")));\n    assertU(adoc(getDoc(\"+5\", 5, \"2011-05-05T00:00:00Z\")));\n    assertU(adoc(getDoc(\"-3\", -3, \"2011-01-01T00:00:00Z\")));\n    assertU(adoc(\"id\", \"M2\"));\n    assertU(commit());\n    // 'normal' sorting.  Missing Values are 0\n    String suffix = \"\";\n    for (String t : types) {\n      if (\"date\".equals(t)) {\n        assertQ(\"Sorting Asc: \" + t + suffix,\n            req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" asc\"),\n            \"//*[@numFound='5']\",\n            \"//result/doc[1]/str[@name='id'][.='M1']\",\n            \"//result/doc[2]/str[@name='id'][.='M2']\",\n            \"//result/doc[3]/str[@name='id'][.='-3']\",\n            \"//result/doc[4]/str[@name='id'][.='+4']\",\n            \"//result/doc[5]/str[@name='id'][.='+5']\"\n        );\n\n        assertQ(\"Sorting Desc: \" + t + suffix,\n            req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" desc\"),\n            \"//*[@numFound='5']\",\n            \"//result/doc[1]/str[@name='id'][.='+5']\",\n            \"//result/doc[2]/str[@name='id'][.='+4']\",\n            \"//result/doc[3]/str[@name='id'][.='-3']\",\n            \"//result/doc[4]/str[@name='id'][.='M1']\",\n            \"//result/doc[5]/str[@name='id'][.='M2']\"\n        );\n      } else {\n        assertQ(\"Sorting Asc: \" + t + suffix,\n            req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" asc\"),\n            \"//*[@numFound='5']\",\n            \"//result/doc[1]/str[@name='id'][.='-3']\",\n            \"//result/doc[2]/str[@name='id'][.='M1']\",\n            \"//result/doc[3]/str[@name='id'][.='M2']\",\n            \"//result/doc[4]/str[@name='id'][.='+4']\",\n            \"//result/doc[5]/str[@name='id'][.='+5']\"\n        );\n\n        assertQ(\"Sorting Desc: \" + t + suffix,\n            req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" desc\"),\n            \"//*[@numFound='5']\",\n            \"//result/doc[1]/str[@name='id'][.='+5']\",\n            \"//result/doc[2]/str[@name='id'][.='+4']\",\n            \"//result/doc[3]/str[@name='id'][.='M1']\",\n            \"//result/doc[4]/str[@name='id'][.='M2']\",\n            \"//result/doc[5]/str[@name='id'][.='-3']\"\n        );\n\n      }\n    }\n\n\n    // sortMissingLast = true\n    suffix = \"_last\";\n    for (String t : types) {\n      assertQ(\"Sorting Asc: \" + t + suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" asc\"),\n          \"//*[@numFound='5']\",\n          \"//result/doc[1]/str[@name='id'][.='-3']\",\n          \"//result/doc[2]/str[@name='id'][.='+4']\",\n          \"//result/doc[3]/str[@name='id'][.='+5']\",\n          \"//result/doc[4]/str[@name='id'][.='M1']\",\n          \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n\n      // This does not match\n      assertQ(\"Sorting Desc: \" + t + suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" desc\", \"indent\", \"on\"),\n          \"//*[@numFound='5']\",\n          \"//result/doc[1]/str[@name='id'][.='+5']\",\n          \"//result/doc[2]/str[@name='id'][.='+4']\",\n          \"//result/doc[3]/str[@name='id'][.='-3']\",\n          \"//result/doc[4]/str[@name='id'][.='M1']\",\n          \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n    }\n\n    // sortMissingFirst = true\n    suffix = \"_first\";\n    for (String t : types) {\n      assertQ(\"Sorting Asc: \" + t + suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" asc\", \"indent\", \"on\"),\n          \"//*[@numFound='5']\",\n          \"//result/doc[1]/str[@name='id'][.='M1']\",\n          \"//result/doc[2]/str[@name='id'][.='M2']\",\n          \"//result/doc[3]/str[@name='id'][.='-3']\",\n          \"//result/doc[4]/str[@name='id'][.='+4']\",\n          \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n\n      // This does not match\n      assertQ(\"Sorting Desc: \" + t + suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" desc\", \"indent\", \"on\"),\n          \"//*[@numFound='5']\",\n          \"//result/doc[1]/str[@name='id'][.='M1']\",\n          \"//result/doc[2]/str[@name='id'][.='M2']\",\n          \"//result/doc[3]/str[@name='id'][.='+5']\",\n          \"//result/doc[4]/str[@name='id'][.='+4']\",\n          \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27b0d5dfc06e18ec503f79e86b6435f89ca1b1d3","date":1490594650,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/NumericFieldsTest#testSortMissingFirstLast().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/NumericFieldsTest#testSortMissingFirstLast().mjava","sourceNew":"  @Test\n  public void testSortMissingFirstLast() {\n    clearIndex();\n\n    // NOTE: segments may be merged in any order, so we can't make any assumptions about\n    // the relative order of M1 vs M2 unless we have a secondary sort\n    assertU(adoc(\"id\", \"M1\"));\n    assertU(adoc(getDoc(\"+4\", 4, \"2011-04-04T00:00:00Z\")));\n    assertU(adoc(getDoc(\"+5\", 5, \"2011-05-05T00:00:00Z\")));\n    assertU(adoc(getDoc(\"-3\", -3, \"2011-01-01T00:00:00Z\")));\n    assertU(adoc(\"id\", \"M2\"));\n    assertU(commit());\n    \n    // 'normal' sorting.  Missing Values are 0\n    String suffix = \"\";\n    for (String t : types) {\n      if (\"date\".equals(t)) {\n        assertQ(\"Sorting Asc: \" + t + suffix,\n            req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" asc\"),\n            \"//*[@numFound='5']\",\n            \"//result/doc[1]/str[@name='id'][starts-with(.,'M')]\",\n            \"//result/doc[2]/str[@name='id'][starts-with(.,'M')]\",\n            \"//result/doc[3]/str[@name='id'][.='-3']\",\n            \"//result/doc[4]/str[@name='id'][.='+4']\",\n            \"//result/doc[5]/str[@name='id'][.='+5']\"\n        );\n\n        assertQ(\"Sorting Desc: \" + t + suffix,\n            req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" desc\"),\n            \"//*[@numFound='5']\",\n            \"//result/doc[1]/str[@name='id'][.='+5']\",\n            \"//result/doc[2]/str[@name='id'][.='+4']\",\n            \"//result/doc[3]/str[@name='id'][.='-3']\",\n            \"//result/doc[4]/str[@name='id'][starts-with(.,'M')]\",\n            \"//result/doc[5]/str[@name='id'][starts-with(.,'M')]\"\n        );\n        \n        assertQ(\"Sorting Asc w/secondary on id desc: \" + t + suffix,\n            req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" asc, id desc\"),\n            \"//*[@numFound='5']\",\n            \"//result/doc[1]/str[@name='id'][.='M2']\",\n            \"//result/doc[2]/str[@name='id'][.='M1']\",\n            \"//result/doc[3]/str[@name='id'][.='-3']\",\n            \"//result/doc[4]/str[@name='id'][.='+4']\",\n            \"//result/doc[5]/str[@name='id'][.='+5']\"\n        );\n\n        assertQ(\"Sorting Desc w/secondary on id asc: \" + t + suffix,\n            req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" desc, id asc\"),\n            \"//*[@numFound='5']\",\n            \"//result/doc[1]/str[@name='id'][.='+5']\",\n            \"//result/doc[2]/str[@name='id'][.='+4']\",\n            \"//result/doc[3]/str[@name='id'][.='-3']\",\n            \"//result/doc[4]/str[@name='id'][.='M1']\",\n            \"//result/doc[5]/str[@name='id'][.='M2']\"\n        );\n      } else {\n        assertQ(\"Sorting Asc: \" + t + suffix,\n            req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" asc\"),\n            \"//*[@numFound='5']\",\n            \"//result/doc[1]/str[@name='id'][.='-3']\",\n            \"//result/doc[2]/str[@name='id'][starts-with(.,'M')]\",\n            \"//result/doc[3]/str[@name='id'][starts-with(.,'M')]\",\n            \"//result/doc[4]/str[@name='id'][.='+4']\",\n            \"//result/doc[5]/str[@name='id'][.='+5']\"\n        );\n\n        assertQ(\"Sorting Desc: \" + t + suffix,\n            req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" desc\"),\n            \"//*[@numFound='5']\",\n            \"//result/doc[1]/str[@name='id'][.='+5']\",\n            \"//result/doc[2]/str[@name='id'][.='+4']\",\n            \"//result/doc[3]/str[@name='id'][starts-with(.,'M')]\",\n            \"//result/doc[4]/str[@name='id'][starts-with(.,'M')]\",\n            \"//result/doc[5]/str[@name='id'][.='-3']\"\n        );\n        \n        assertQ(\"Sorting Asc w/secondary on id desc: \" + t + suffix,\n            req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" asc, id desc\"),\n            \"//*[@numFound='5']\",\n            \"//result/doc[1]/str[@name='id'][.='-3']\",\n            \"//result/doc[2]/str[@name='id'][.='M2']\",\n            \"//result/doc[3]/str[@name='id'][.='M1']\",\n            \"//result/doc[4]/str[@name='id'][.='+4']\",\n            \"//result/doc[5]/str[@name='id'][.='+5']\"\n        );\n\n        assertQ(\"Sorting Desc w/secondary on id asc: \" + t + suffix,\n            req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" desc, id asc\"),\n            \"//*[@numFound='5']\",\n            \"//result/doc[1]/str[@name='id'][.='+5']\",\n            \"//result/doc[2]/str[@name='id'][.='+4']\",\n            \"//result/doc[3]/str[@name='id'][.='M1']\",\n            \"//result/doc[4]/str[@name='id'][.='M2']\",\n            \"//result/doc[5]/str[@name='id'][.='-3']\"\n        );\n\n      }\n    }\n\n\n    // sortMissingLast = true\n    suffix = \"_last\";\n    for (String t : types) {\n      assertQ(\"Sorting Asc: \" + t + suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" asc\"),\n          \"//*[@numFound='5']\",\n          \"//result/doc[1]/str[@name='id'][.='-3']\",\n          \"//result/doc[2]/str[@name='id'][.='+4']\",\n          \"//result/doc[3]/str[@name='id'][.='+5']\",\n          \"//result/doc[4]/str[@name='id'][starts-with(.,'M')]\",\n          \"//result/doc[5]/str[@name='id'][starts-with(.,'M')]\"\n      );\n\n      assertQ(\"Sorting Desc: \" + t + suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" desc\"),\n          \"//*[@numFound='5']\",\n          \"//result/doc[1]/str[@name='id'][.='+5']\",\n          \"//result/doc[2]/str[@name='id'][.='+4']\",\n          \"//result/doc[3]/str[@name='id'][.='-3']\",\n          \"//result/doc[4]/str[@name='id'][starts-with(.,'M')]\",\n          \"//result/doc[5]/str[@name='id'][starts-with(.,'M')]\"\n      );\n\n      assertQ(\"Sorting Asc w/secondary on id desc: \" + t + suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" asc, id desc\"),\n          \"//*[@numFound='5']\",\n          \"//result/doc[1]/str[@name='id'][.='-3']\",\n          \"//result/doc[2]/str[@name='id'][.='+4']\",\n          \"//result/doc[3]/str[@name='id'][.='+5']\",\n          \"//result/doc[4]/str[@name='id'][.='M2']\",\n          \"//result/doc[5]/str[@name='id'][.='M1']\"\n      );\n\n      assertQ(\"Sorting Desc w/secondary on id asc: \" + t + suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" desc, id asc\"),\n          \"//*[@numFound='5']\",\n          \"//result/doc[1]/str[@name='id'][.='+5']\",\n          \"//result/doc[2]/str[@name='id'][.='+4']\",\n          \"//result/doc[3]/str[@name='id'][.='-3']\",\n          \"//result/doc[4]/str[@name='id'][.='M1']\",\n          \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n    }\n\n    // sortMissingFirst = true\n    suffix = \"_first\";\n    for (String t : types) {\n      assertQ(\"Sorting Asc: \" + t + suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" asc\"),\n          \"//*[@numFound='5']\",\n          \"//result/doc[1]/str[@name='id'][starts-with(.,'M')]\",\n          \"//result/doc[2]/str[@name='id'][starts-with(.,'M')]\",\n          \"//result/doc[3]/str[@name='id'][.='-3']\",\n          \"//result/doc[4]/str[@name='id'][.='+4']\",\n          \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n\n      assertQ(\"Sorting Desc: \" + t + suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" desc\"),\n          \"//*[@numFound='5']\",\n          \"//result/doc[1]/str[@name='id'][starts-with(.,'M')]\",\n          \"//result/doc[2]/str[@name='id'][starts-with(.,'M')]\",\n          \"//result/doc[3]/str[@name='id'][.='+5']\",\n          \"//result/doc[4]/str[@name='id'][.='+4']\",\n          \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n\n      assertQ(\"Sorting Asc w/secondary on id desc: \" + t + suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" asc, id desc\"),\n          \"//*[@numFound='5']\",\n          \"//result/doc[1]/str[@name='id'][.='M2']\",\n          \"//result/doc[2]/str[@name='id'][.='M1']\",\n          \"//result/doc[3]/str[@name='id'][.='-3']\",\n          \"//result/doc[4]/str[@name='id'][.='+4']\",\n          \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n\n      assertQ(\"Sorting Desc w/secondary on id asc: \" + t + suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" desc, id asc\"),\n          \"//*[@numFound='5']\",\n          \"//result/doc[1]/str[@name='id'][.='M1']\",\n          \"//result/doc[2]/str[@name='id'][.='M2']\",\n          \"//result/doc[3]/str[@name='id'][.='+5']\",\n          \"//result/doc[4]/str[@name='id'][.='+4']\",\n          \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSortMissingFirstLast() {\n    clearIndex();\n\n    assertU(adoc(\"id\", \"M1\"));\n    assertU(adoc(getDoc(\"+4\", 4, \"2011-04-04T00:00:00Z\")));\n    assertU(adoc(getDoc(\"+5\", 5, \"2011-05-05T00:00:00Z\")));\n    assertU(adoc(getDoc(\"-3\", -3, \"2011-01-01T00:00:00Z\")));\n    assertU(adoc(\"id\", \"M2\"));\n    assertU(commit());\n    // 'normal' sorting.  Missing Values are 0\n    String suffix = \"\";\n    for (String t : types) {\n      if (\"date\".equals(t)) {\n        assertQ(\"Sorting Asc: \" + t + suffix,\n            req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" asc\"),\n            \"//*[@numFound='5']\",\n            \"//result/doc[1]/str[@name='id'][.='M1']\",\n            \"//result/doc[2]/str[@name='id'][.='M2']\",\n            \"//result/doc[3]/str[@name='id'][.='-3']\",\n            \"//result/doc[4]/str[@name='id'][.='+4']\",\n            \"//result/doc[5]/str[@name='id'][.='+5']\"\n        );\n\n        assertQ(\"Sorting Desc: \" + t + suffix,\n            req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" desc\"),\n            \"//*[@numFound='5']\",\n            \"//result/doc[1]/str[@name='id'][.='+5']\",\n            \"//result/doc[2]/str[@name='id'][.='+4']\",\n            \"//result/doc[3]/str[@name='id'][.='-3']\",\n            \"//result/doc[4]/str[@name='id'][.='M1']\",\n            \"//result/doc[5]/str[@name='id'][.='M2']\"\n        );\n      } else {\n        assertQ(\"Sorting Asc: \" + t + suffix,\n            req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" asc\"),\n            \"//*[@numFound='5']\",\n            \"//result/doc[1]/str[@name='id'][.='-3']\",\n            \"//result/doc[2]/str[@name='id'][.='M1']\",\n            \"//result/doc[3]/str[@name='id'][.='M2']\",\n            \"//result/doc[4]/str[@name='id'][.='+4']\",\n            \"//result/doc[5]/str[@name='id'][.='+5']\"\n        );\n\n        assertQ(\"Sorting Desc: \" + t + suffix,\n            req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" desc\"),\n            \"//*[@numFound='5']\",\n            \"//result/doc[1]/str[@name='id'][.='+5']\",\n            \"//result/doc[2]/str[@name='id'][.='+4']\",\n            \"//result/doc[3]/str[@name='id'][.='M1']\",\n            \"//result/doc[4]/str[@name='id'][.='M2']\",\n            \"//result/doc[5]/str[@name='id'][.='-3']\"\n        );\n\n      }\n    }\n\n\n    // sortMissingLast = true\n    suffix = \"_last\";\n    for (String t : types) {\n      assertQ(\"Sorting Asc: \" + t + suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" asc\"),\n          \"//*[@numFound='5']\",\n          \"//result/doc[1]/str[@name='id'][.='-3']\",\n          \"//result/doc[2]/str[@name='id'][.='+4']\",\n          \"//result/doc[3]/str[@name='id'][.='+5']\",\n          \"//result/doc[4]/str[@name='id'][.='M1']\",\n          \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n\n      // This does not match\n      assertQ(\"Sorting Desc: \" + t + suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" desc\", \"indent\", \"on\"),\n          \"//*[@numFound='5']\",\n          \"//result/doc[1]/str[@name='id'][.='+5']\",\n          \"//result/doc[2]/str[@name='id'][.='+4']\",\n          \"//result/doc[3]/str[@name='id'][.='-3']\",\n          \"//result/doc[4]/str[@name='id'][.='M1']\",\n          \"//result/doc[5]/str[@name='id'][.='M2']\"\n      );\n    }\n\n    // sortMissingFirst = true\n    suffix = \"_first\";\n    for (String t : types) {\n      assertQ(\"Sorting Asc: \" + t + suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" asc\", \"indent\", \"on\"),\n          \"//*[@numFound='5']\",\n          \"//result/doc[1]/str[@name='id'][.='M1']\",\n          \"//result/doc[2]/str[@name='id'][.='M2']\",\n          \"//result/doc[3]/str[@name='id'][.='-3']\",\n          \"//result/doc[4]/str[@name='id'][.='+4']\",\n          \"//result/doc[5]/str[@name='id'][.='+5']\"\n      );\n\n      // This does not match\n      assertQ(\"Sorting Desc: \" + t + suffix,\n          req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", (t + suffix) + \" desc\", \"indent\", \"on\"),\n          \"//*[@numFound='5']\",\n          \"//result/doc[1]/str[@name='id'][.='M1']\",\n          \"//result/doc[2]/str[@name='id'][.='M2']\",\n          \"//result/doc[3]/str[@name='id'][.='+5']\",\n          \"//result/doc[4]/str[@name='id'][.='+4']\",\n          \"//result/doc[5]/str[@name='id'][.='-3']\"\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"27b0d5dfc06e18ec503f79e86b6435f89ca1b1d3":["1ad1be4e8b9dcee71e07100ce21c98fcfd73234f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"041c92b2d706f21d6e18289f5661254b5c8bb8ca":["1ad1be4e8b9dcee71e07100ce21c98fcfd73234f"],"1ad1be4e8b9dcee71e07100ce21c98fcfd73234f":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["041c92b2d706f21d6e18289f5661254b5c8bb8ca"]},"commit2Childs":{"27b0d5dfc06e18ec503f79e86b6435f89ca1b1d3":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"1ad1be4e8b9dcee71e07100ce21c98fcfd73234f":["27b0d5dfc06e18ec503f79e86b6435f89ca1b1d3","041c92b2d706f21d6e18289f5661254b5c8bb8ca"],"041c92b2d706f21d6e18289f5661254b5c8bb8ca":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c26f00b574427b55127e869b935845554afde1fa":["1ad1be4e8b9dcee71e07100ce21c98fcfd73234f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["27b0d5dfc06e18ec503f79e86b6435f89ca1b1d3","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}