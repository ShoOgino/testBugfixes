{"path":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#init(Map[String,Object]).mjava","commits":[{"id":"bb3e075eaa5788b2762ec235bf72b069cefe3f50","date":1548244981,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#init(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(Map<String, Object> pluginConfig) {\n    List<String> unknownKeys = pluginConfig.keySet().stream().filter(k -> !PROPS.contains(k)).collect(Collectors.toList());\n    unknownKeys.remove(\"class\");\n    unknownKeys.remove(\"\");\n    if (!unknownKeys.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid JwtAuth configuration parameter \" + unknownKeys); \n    }\n\n    blockUnknown = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_BLOCK_UNKNOWN, false)));\n    clientId = (String) pluginConfig.get(PARAM_CLIENT_ID);\n    requireSubject = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_REQUIRE_SUBJECT, \"true\")));\n    requireExpirationTime = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_REQUIRE_EXPIRATIONTIME, \"true\")));\n    principalClaim = (String) pluginConfig.getOrDefault(PARAM_PRINCIPAL_CLAIM, \"sub\");\n    confIdpConfigUrl = (String) pluginConfig.get(PARAM_WELL_KNOWN_URL);\n    Object redirectUrisObj = pluginConfig.get(PARAM_REDIRECT_URIS);\n    redirectUris = Collections.emptyList();\n    if (redirectUrisObj != null) {\n      if (redirectUrisObj instanceof String) {\n        redirectUris = Collections.singletonList((String) redirectUrisObj);\n      } else if (redirectUrisObj instanceof List) {\n        redirectUris = (List<String>) redirectUrisObj;\n      }\n    } \n    \n    if (confIdpConfigUrl != null) {\n      log.debug(\"Initializing well-known oidc config from {}\", confIdpConfigUrl);\n      oidcDiscoveryConfig = WellKnownDiscoveryConfig.parse(confIdpConfigUrl);\n      iss = oidcDiscoveryConfig.getIssuer();\n      authorizationEndpoint = oidcDiscoveryConfig.getAuthorizationEndpoint();\n    }\n    \n    if (pluginConfig.containsKey(PARAM_ISSUER)) {\n      if (iss != null) {\n        log.debug(\"Explicitly setting required issuer instead of using issuer from well-known config\");\n      }\n      iss = (String) pluginConfig.get(PARAM_ISSUER);\n    }\n\n    if (pluginConfig.containsKey(PARAM_AUTHORIZATION_ENDPOINT)) {\n      if (authorizationEndpoint != null) {\n        log.debug(\"Explicitly setting authorizationEndpoint instead of using issuer from well-known config\");\n      }\n      authorizationEndpoint = (String) pluginConfig.get(PARAM_AUTHORIZATION_ENDPOINT);\n    }\n    \n    if (pluginConfig.containsKey(PARAM_AUDIENCE)) {\n      if (clientId != null) {\n        log.debug(\"Explicitly setting required audience instead of using configured clientId\");\n      }\n      aud = (String) pluginConfig.get(PARAM_AUDIENCE);\n    } else {\n      aud = clientId;\n    }\n    \n    algWhitelist = (List<String>) pluginConfig.get(PARAM_ALG_WHITELIST);\n\n    String requiredScopesStr = (String) pluginConfig.get(PARAM_SCOPE);\n    if (!StringUtils.isEmpty(requiredScopesStr)) {\n      requiredScopes = Arrays.asList(requiredScopesStr.split(\"\\\\s+\"));\n    }\n    \n    adminUiScope = (String) pluginConfig.get(PARAM_ADMINUI_SCOPE);\n    if (adminUiScope == null && requiredScopes.size() > 0) {\n      adminUiScope = requiredScopes.get(0);\n      log.warn(\"No adminUiScope given, using first scope in 'scope' list as required scope for accessing Admin UI\");\n    }\n    \n    if (adminUiScope == null) {\n      adminUiScope = \"solr\";\n      log.warn(\"Warning: No adminUiScope provided, fallback to 'solr' as required scope. If this is not correct, the Admin UI login may not work\");\n    }\n    \n    Map<String, String> claimsMatch = (Map<String, String>) pluginConfig.get(PARAM_CLAIMS_MATCH);\n    claimsMatchCompiled = new HashMap<>();\n    if (claimsMatch != null) {\n      for (Map.Entry<String, String> entry : claimsMatch.entrySet()) {\n        claimsMatchCompiled.put(entry.getKey(), Pattern.compile(entry.getValue()));\n      }\n    }\n\n    initJwk(pluginConfig);\n\n    lastInitTime = Instant.now();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#init(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(Map<String, Object> pluginConfig) {\n    List<String> unknownKeys = pluginConfig.keySet().stream().filter(k -> !PROPS.contains(k)).collect(Collectors.toList());\n    unknownKeys.remove(\"class\");\n    unknownKeys.remove(\"\");\n    if (!unknownKeys.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid JwtAuth configuration parameter \" + unknownKeys); \n    }\n\n    blockUnknown = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_BLOCK_UNKNOWN, false)));\n    clientId = (String) pluginConfig.get(PARAM_CLIENT_ID);\n    requireSubject = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_REQUIRE_SUBJECT, \"true\")));\n    requireExpirationTime = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_REQUIRE_EXPIRATIONTIME, \"true\")));\n    principalClaim = (String) pluginConfig.getOrDefault(PARAM_PRINCIPAL_CLAIM, \"sub\");\n    confIdpConfigUrl = (String) pluginConfig.get(PARAM_WELL_KNOWN_URL);\n    Object redirectUrisObj = pluginConfig.get(PARAM_REDIRECT_URIS);\n    redirectUris = Collections.emptyList();\n    if (redirectUrisObj != null) {\n      if (redirectUrisObj instanceof String) {\n        redirectUris = Collections.singletonList((String) redirectUrisObj);\n      } else if (redirectUrisObj instanceof List) {\n        redirectUris = (List<String>) redirectUrisObj;\n      }\n    } \n    \n    if (confIdpConfigUrl != null) {\n      log.debug(\"Initializing well-known oidc config from {}\", confIdpConfigUrl);\n      oidcDiscoveryConfig = WellKnownDiscoveryConfig.parse(confIdpConfigUrl);\n      iss = oidcDiscoveryConfig.getIssuer();\n      authorizationEndpoint = oidcDiscoveryConfig.getAuthorizationEndpoint();\n    }\n    \n    if (pluginConfig.containsKey(PARAM_ISSUER)) {\n      if (iss != null) {\n        log.debug(\"Explicitly setting required issuer instead of using issuer from well-known config\");\n      }\n      iss = (String) pluginConfig.get(PARAM_ISSUER);\n    }\n\n    if (pluginConfig.containsKey(PARAM_AUTHORIZATION_ENDPOINT)) {\n      if (authorizationEndpoint != null) {\n        log.debug(\"Explicitly setting authorizationEndpoint instead of using issuer from well-known config\");\n      }\n      authorizationEndpoint = (String) pluginConfig.get(PARAM_AUTHORIZATION_ENDPOINT);\n    }\n    \n    if (pluginConfig.containsKey(PARAM_AUDIENCE)) {\n      if (clientId != null) {\n        log.debug(\"Explicitly setting required audience instead of using configured clientId\");\n      }\n      aud = (String) pluginConfig.get(PARAM_AUDIENCE);\n    } else {\n      aud = clientId;\n    }\n    \n    algWhitelist = (List<String>) pluginConfig.get(PARAM_ALG_WHITELIST);\n\n    String requiredScopesStr = (String) pluginConfig.get(PARAM_SCOPE);\n    if (!StringUtils.isEmpty(requiredScopesStr)) {\n      requiredScopes = Arrays.asList(requiredScopesStr.split(\"\\\\s+\"));\n    }\n    \n    adminUiScope = (String) pluginConfig.get(PARAM_ADMINUI_SCOPE);\n    if (adminUiScope == null && requiredScopes.size() > 0) {\n      adminUiScope = requiredScopes.get(0);\n      log.warn(\"No adminUiScope given, using first scope in 'scope' list as required scope for accessing Admin UI\");\n    }\n    \n    if (adminUiScope == null) {\n      adminUiScope = \"solr\";\n      log.warn(\"Warning: No adminUiScope provided, fallback to 'solr' as required scope. If this is not correct, the Admin UI login may not work\");\n    }\n    \n    Map<String, String> claimsMatch = (Map<String, String>) pluginConfig.get(PARAM_CLAIMS_MATCH);\n    claimsMatchCompiled = new HashMap<>();\n    if (claimsMatch != null) {\n      for (Map.Entry<String, String> entry : claimsMatch.entrySet()) {\n        claimsMatchCompiled.put(entry.getKey(), Pattern.compile(entry.getValue()));\n      }\n    }\n\n    initJwk(pluginConfig);\n\n    lastInitTime = Instant.now();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f67fad1a752e06d753afa1c41bcc27141d258f5","date":1555055351,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#init(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#init(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(Map<String, Object> pluginConfig) {\n    List<String> unknownKeys = pluginConfig.keySet().stream().filter(k -> !PROPS.contains(k)).collect(Collectors.toList());\n    unknownKeys.remove(\"class\");\n    unknownKeys.remove(\"\");\n    if (!unknownKeys.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid JwtAuth configuration parameter \" + unknownKeys); \n    }\n\n    blockUnknown = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_BLOCK_UNKNOWN, false)));\n    clientId = (String) pluginConfig.get(PARAM_CLIENT_ID);\n    requireSubject = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_REQUIRE_SUBJECT, \"true\")));\n    requireExpirationTime = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_REQUIRE_EXPIRATIONTIME, \"true\")));\n    principalClaim = (String) pluginConfig.getOrDefault(PARAM_PRINCIPAL_CLAIM, \"sub\");\n    confIdpConfigUrl = (String) pluginConfig.get(PARAM_WELL_KNOWN_URL);\n    Object redirectUrisObj = pluginConfig.get(PARAM_REDIRECT_URIS);\n    redirectUris = Collections.emptyList();\n    if (redirectUrisObj != null) {\n      if (redirectUrisObj instanceof String) {\n        redirectUris = Collections.singletonList((String) redirectUrisObj);\n      } else if (redirectUrisObj instanceof List) {\n        redirectUris = (List<String>) redirectUrisObj;\n      }\n    } \n    \n    if (confIdpConfigUrl != null) {\n      log.debug(\"Initializing well-known oidc config from {}\", confIdpConfigUrl);\n      oidcDiscoveryConfig = WellKnownDiscoveryConfig.parse(confIdpConfigUrl);\n      iss = oidcDiscoveryConfig.getIssuer();\n      authorizationEndpoint = oidcDiscoveryConfig.getAuthorizationEndpoint();\n    }\n    \n    if (pluginConfig.containsKey(PARAM_ISSUER)) {\n      if (iss != null) {\n        log.debug(\"Explicitly setting required issuer instead of using issuer from well-known config\");\n      }\n      iss = (String) pluginConfig.get(PARAM_ISSUER);\n    }\n\n    if (pluginConfig.containsKey(PARAM_AUTHORIZATION_ENDPOINT)) {\n      if (authorizationEndpoint != null) {\n        log.debug(\"Explicitly setting authorizationEndpoint instead of using issuer from well-known config\");\n      }\n      authorizationEndpoint = (String) pluginConfig.get(PARAM_AUTHORIZATION_ENDPOINT);\n    }\n    \n    if (pluginConfig.containsKey(PARAM_AUDIENCE)) {\n      if (clientId != null) {\n        log.debug(\"Explicitly setting required audience instead of using configured clientId\");\n      }\n      aud = (String) pluginConfig.get(PARAM_AUDIENCE);\n    } else {\n      aud = clientId;\n    }\n    \n    algWhitelist = (List<String>) pluginConfig.get(PARAM_ALG_WHITELIST);\n\n    String requiredScopesStr = (String) pluginConfig.get(PARAM_SCOPE);\n    if (!StringUtils.isEmpty(requiredScopesStr)) {\n      requiredScopes = Arrays.asList(requiredScopesStr.split(\"\\\\s+\"));\n    }\n    \n    adminUiScope = (String) pluginConfig.get(PARAM_ADMINUI_SCOPE);\n    if (adminUiScope == null && requiredScopes.size() > 0) {\n      adminUiScope = requiredScopes.get(0);\n      log.warn(\"No adminUiScope given, using first scope in 'scope' list as required scope for accessing Admin UI\");\n    }\n    \n    if (adminUiScope == null) {\n      adminUiScope = \"solr\";\n      log.warn(\"Warning: No adminUiScope provided, fallback to 'solr' as required scope. If this is not correct, the Admin UI login may not work\");\n    }\n    \n    Map<String, String> claimsMatch = (Map<String, String>) pluginConfig.get(PARAM_CLAIMS_MATCH);\n    claimsMatchCompiled = new HashMap<>();\n    if (claimsMatch != null) {\n      for (Map.Entry<String, String> entry : claimsMatch.entrySet()) {\n        claimsMatchCompiled.put(entry.getKey(), Pattern.compile(entry.getValue()));\n      }\n    }\n\n    initJwk(pluginConfig);\n\n    lastInitTime = Instant.now();\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, Object> pluginConfig) {\n    List<String> unknownKeys = pluginConfig.keySet().stream().filter(k -> !PROPS.contains(k)).collect(Collectors.toList());\n    unknownKeys.remove(\"class\");\n    unknownKeys.remove(\"\");\n    if (!unknownKeys.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid JwtAuth configuration parameter \" + unknownKeys); \n    }\n\n    blockUnknown = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_BLOCK_UNKNOWN, false)));\n    clientId = (String) pluginConfig.get(PARAM_CLIENT_ID);\n    requireSubject = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_REQUIRE_SUBJECT, \"true\")));\n    requireExpirationTime = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_REQUIRE_EXPIRATIONTIME, \"true\")));\n    principalClaim = (String) pluginConfig.getOrDefault(PARAM_PRINCIPAL_CLAIM, \"sub\");\n    confIdpConfigUrl = (String) pluginConfig.get(PARAM_WELL_KNOWN_URL);\n    Object redirectUrisObj = pluginConfig.get(PARAM_REDIRECT_URIS);\n    redirectUris = Collections.emptyList();\n    if (redirectUrisObj != null) {\n      if (redirectUrisObj instanceof String) {\n        redirectUris = Collections.singletonList((String) redirectUrisObj);\n      } else if (redirectUrisObj instanceof List) {\n        redirectUris = (List<String>) redirectUrisObj;\n      }\n    } \n    \n    if (confIdpConfigUrl != null) {\n      log.debug(\"Initializing well-known oidc config from {}\", confIdpConfigUrl);\n      oidcDiscoveryConfig = WellKnownDiscoveryConfig.parse(confIdpConfigUrl);\n      iss = oidcDiscoveryConfig.getIssuer();\n      authorizationEndpoint = oidcDiscoveryConfig.getAuthorizationEndpoint();\n    }\n    \n    if (pluginConfig.containsKey(PARAM_ISSUER)) {\n      if (iss != null) {\n        log.debug(\"Explicitly setting required issuer instead of using issuer from well-known config\");\n      }\n      iss = (String) pluginConfig.get(PARAM_ISSUER);\n    }\n\n    if (pluginConfig.containsKey(PARAM_AUTHORIZATION_ENDPOINT)) {\n      if (authorizationEndpoint != null) {\n        log.debug(\"Explicitly setting authorizationEndpoint instead of using issuer from well-known config\");\n      }\n      authorizationEndpoint = (String) pluginConfig.get(PARAM_AUTHORIZATION_ENDPOINT);\n    }\n    \n    if (pluginConfig.containsKey(PARAM_AUDIENCE)) {\n      if (clientId != null) {\n        log.debug(\"Explicitly setting required audience instead of using configured clientId\");\n      }\n      aud = (String) pluginConfig.get(PARAM_AUDIENCE);\n    } else {\n      aud = clientId;\n    }\n    \n    algWhitelist = (List<String>) pluginConfig.get(PARAM_ALG_WHITELIST);\n\n    String requiredScopesStr = (String) pluginConfig.get(PARAM_SCOPE);\n    if (!StringUtils.isEmpty(requiredScopesStr)) {\n      requiredScopes = Arrays.asList(requiredScopesStr.split(\"\\\\s+\"));\n    }\n    \n    adminUiScope = (String) pluginConfig.get(PARAM_ADMINUI_SCOPE);\n    if (adminUiScope == null && requiredScopes.size() > 0) {\n      adminUiScope = requiredScopes.get(0);\n      log.warn(\"No adminUiScope given, using first scope in 'scope' list as required scope for accessing Admin UI\");\n    }\n    \n    if (adminUiScope == null) {\n      adminUiScope = \"solr\";\n      log.warn(\"Warning: No adminUiScope provided, fallback to 'solr' as required scope. If this is not correct, the Admin UI login may not work\");\n    }\n    \n    Map<String, String> claimsMatch = (Map<String, String>) pluginConfig.get(PARAM_CLAIMS_MATCH);\n    claimsMatchCompiled = new HashMap<>();\n    if (claimsMatch != null) {\n      for (Map.Entry<String, String> entry : claimsMatch.entrySet()) {\n        claimsMatchCompiled.put(entry.getKey(), Pattern.compile(entry.getValue()));\n      }\n    }\n\n    initJwk(pluginConfig);\n\n    lastInitTime = Instant.now();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ac780c217504f0ca673ac5dcb98768984267c60","date":1568879420,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#init(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#init(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(Map<String, Object> pluginConfig) {\n    this.pluginConfig = pluginConfig;\n    this.issuerConfigs = null;\n    List<String> unknownKeys = pluginConfig.keySet().stream().filter(k -> !PROPS.contains(k)).collect(Collectors.toList());\n    unknownKeys.remove(\"class\");\n    unknownKeys.remove(\"\");\n    if (!unknownKeys.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid JwtAuth configuration parameter \" + unknownKeys); \n    }\n\n    blockUnknown = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_BLOCK_UNKNOWN, false)));\n    requireIssuer = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_REQUIRE_ISSUER, \"true\")));\n    requireExpirationTime = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_REQUIRE_EXPIRATIONTIME, \"true\")));\n    if (pluginConfig.get(PARAM_REQUIRE_SUBJECT) != null) {\n      log.warn(\"Parameter {} is no longer used and may generate error in a later version. A subject claim is now always required\",\n          PARAM_REQUIRE_SUBJECT);\n    }\n    principalClaim = (String) pluginConfig.getOrDefault(PARAM_PRINCIPAL_CLAIM, \"sub\");\n    algWhitelist = (List<String>) pluginConfig.get(PARAM_ALG_WHITELIST);\n    realm = (String) pluginConfig.getOrDefault(PARAM_REALM, DEFAULT_AUTH_REALM);\n\n    Map<String, String> claimsMatch = (Map<String, String>) pluginConfig.get(PARAM_CLAIMS_MATCH);\n    claimsMatchCompiled = new HashMap<>();\n    if (claimsMatch != null) {\n      for (Map.Entry<String, String> entry : claimsMatch.entrySet()) {\n        claimsMatchCompiled.put(entry.getKey(), Pattern.compile(entry.getValue()));\n      }\n    }\n\n    String requiredScopesStr = (String) pluginConfig.get(PARAM_SCOPE);\n    if (!StringUtils.isEmpty(requiredScopesStr)) {\n      requiredScopes = Arrays.asList(requiredScopesStr.split(\"\\\\s+\"));\n    }\n\n    long jwkCacheDuration = Long.parseLong((String) pluginConfig.getOrDefault(PARAM_JWK_CACHE_DURATION, \"3600\"));\n    JWTIssuerConfig.setHttpsJwksFactory(new JWTIssuerConfig.HttpsJwksFactory(jwkCacheDuration, DEFAULT_REFRESH_REPRIEVE_THRESHOLD));\n\n    issuerConfigs = new ArrayList<>();\n\n    // Try to parse an issuer from top level config, and add first (primary issuer)\n    Optional<JWTIssuerConfig> topLevelIssuer = parseIssuerFromTopLevelConfig(pluginConfig);\n    topLevelIssuer.ifPresent(ic -> {\n      issuerConfigs.add(ic);\n      log.warn(\"JWTAuthPlugin issuer is configured using top-level configuration keys. Please consider using the 'issuers' array instead.\");\n    });\n\n    // Add issuers from 'issuers' key\n    issuerConfigs.addAll(parseIssuers(pluginConfig));\n    verificationKeyResolver = new JWTVerificationkeyResolver(issuerConfigs, requireIssuer);\n\n    if (issuerConfigs.size() > 0 && getPrimaryIssuer().getAuthorizationEndpoint() != null) {\n      adminUiScope = (String) pluginConfig.get(PARAM_ADMINUI_SCOPE);\n      if (adminUiScope == null && requiredScopes.size() > 0) {\n        adminUiScope = requiredScopes.get(0);\n        log.warn(\"No adminUiScope given, using first scope in 'scope' list as required scope for accessing Admin UI\");\n      }\n\n      if (adminUiScope == null) {\n        adminUiScope = \"solr\";\n        log.info(\"No adminUiScope provided, fallback to 'solr' as required scope for Admin UI login may not work\");\n      }\n\n      Object redirectUrisObj = pluginConfig.get(PARAM_REDIRECT_URIS);\n      redirectUris = Collections.emptyList();\n      if (redirectUrisObj != null) {\n        if (redirectUrisObj instanceof String) {\n          redirectUris = Collections.singletonList((String) redirectUrisObj);\n        } else if (redirectUrisObj instanceof List) {\n          redirectUris = (List<String>) redirectUrisObj;\n        }\n      }\n    }\n\n    initConsumer();\n\n    lastInitTime = Instant.now();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(Map<String, Object> pluginConfig) {\n    List<String> unknownKeys = pluginConfig.keySet().stream().filter(k -> !PROPS.contains(k)).collect(Collectors.toList());\n    unknownKeys.remove(\"class\");\n    unknownKeys.remove(\"\");\n    if (!unknownKeys.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid JwtAuth configuration parameter \" + unknownKeys); \n    }\n\n    blockUnknown = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_BLOCK_UNKNOWN, false)));\n    clientId = (String) pluginConfig.get(PARAM_CLIENT_ID);\n    requireSubject = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_REQUIRE_SUBJECT, \"true\")));\n    requireExpirationTime = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_REQUIRE_EXPIRATIONTIME, \"true\")));\n    principalClaim = (String) pluginConfig.getOrDefault(PARAM_PRINCIPAL_CLAIM, \"sub\");\n    confIdpConfigUrl = (String) pluginConfig.get(PARAM_WELL_KNOWN_URL);\n    Object redirectUrisObj = pluginConfig.get(PARAM_REDIRECT_URIS);\n    redirectUris = Collections.emptyList();\n    if (redirectUrisObj != null) {\n      if (redirectUrisObj instanceof String) {\n        redirectUris = Collections.singletonList((String) redirectUrisObj);\n      } else if (redirectUrisObj instanceof List) {\n        redirectUris = (List<String>) redirectUrisObj;\n      }\n    } \n    \n    if (confIdpConfigUrl != null) {\n      log.debug(\"Initializing well-known oidc config from {}\", confIdpConfigUrl);\n      oidcDiscoveryConfig = WellKnownDiscoveryConfig.parse(confIdpConfigUrl);\n      iss = oidcDiscoveryConfig.getIssuer();\n      authorizationEndpoint = oidcDiscoveryConfig.getAuthorizationEndpoint();\n    }\n    \n    if (pluginConfig.containsKey(PARAM_ISSUER)) {\n      if (iss != null) {\n        log.debug(\"Explicitly setting required issuer instead of using issuer from well-known config\");\n      }\n      iss = (String) pluginConfig.get(PARAM_ISSUER);\n    }\n\n    if (pluginConfig.containsKey(PARAM_AUTHORIZATION_ENDPOINT)) {\n      if (authorizationEndpoint != null) {\n        log.debug(\"Explicitly setting authorizationEndpoint instead of using issuer from well-known config\");\n      }\n      authorizationEndpoint = (String) pluginConfig.get(PARAM_AUTHORIZATION_ENDPOINT);\n    }\n    \n    if (pluginConfig.containsKey(PARAM_AUDIENCE)) {\n      if (clientId != null) {\n        log.debug(\"Explicitly setting required audience instead of using configured clientId\");\n      }\n      aud = (String) pluginConfig.get(PARAM_AUDIENCE);\n    } else {\n      aud = clientId;\n    }\n    \n    algWhitelist = (List<String>) pluginConfig.get(PARAM_ALG_WHITELIST);\n\n    String requiredScopesStr = (String) pluginConfig.get(PARAM_SCOPE);\n    if (!StringUtils.isEmpty(requiredScopesStr)) {\n      requiredScopes = Arrays.asList(requiredScopesStr.split(\"\\\\s+\"));\n    }\n    \n    adminUiScope = (String) pluginConfig.get(PARAM_ADMINUI_SCOPE);\n    if (adminUiScope == null && requiredScopes.size() > 0) {\n      adminUiScope = requiredScopes.get(0);\n      log.warn(\"No adminUiScope given, using first scope in 'scope' list as required scope for accessing Admin UI\");\n    }\n    \n    if (adminUiScope == null) {\n      adminUiScope = \"solr\";\n      log.warn(\"Warning: No adminUiScope provided, fallback to 'solr' as required scope. If this is not correct, the Admin UI login may not work\");\n    }\n    \n    Map<String, String> claimsMatch = (Map<String, String>) pluginConfig.get(PARAM_CLAIMS_MATCH);\n    claimsMatchCompiled = new HashMap<>();\n    if (claimsMatch != null) {\n      for (Map.Entry<String, String> entry : claimsMatch.entrySet()) {\n        claimsMatchCompiled.put(entry.getKey(), Pattern.compile(entry.getValue()));\n      }\n    }\n\n    initJwk(pluginConfig);\n\n    lastInitTime = Instant.now();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8076096f334b0665d0a69a63ee98ac09baad402b","date":1589405373,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#init(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#init(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(Map<String, Object> pluginConfig) {\n    this.pluginConfig = pluginConfig;\n    this.issuerConfigs = null;\n    List<String> unknownKeys = pluginConfig.keySet().stream().filter(k -> !PROPS.contains(k)).collect(Collectors.toList());\n    unknownKeys.remove(\"class\");\n    unknownKeys.remove(\"\");\n    if (!unknownKeys.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid JwtAuth configuration parameter \" + unknownKeys); \n    }\n\n    blockUnknown = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_BLOCK_UNKNOWN, false)));\n    requireIssuer = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_REQUIRE_ISSUER, \"true\")));\n    requireExpirationTime = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_REQUIRE_EXPIRATIONTIME, \"true\")));\n    if (pluginConfig.get(PARAM_REQUIRE_SUBJECT) != null) {\n      log.warn(\"Parameter {} is no longer used and may generate error in a later version. A subject claim is now always required\",\n          PARAM_REQUIRE_SUBJECT);\n    }\n    principalClaim = (String) pluginConfig.getOrDefault(PARAM_PRINCIPAL_CLAIM, \"sub\");\n\n    rolesClaim = (String) pluginConfig.get(PARAM_ROLES_CLAIM);\n    algWhitelist = (List<String>) pluginConfig.get(PARAM_ALG_WHITELIST);\n    realm = (String) pluginConfig.getOrDefault(PARAM_REALM, DEFAULT_AUTH_REALM);\n\n    Map<String, String> claimsMatch = (Map<String, String>) pluginConfig.get(PARAM_CLAIMS_MATCH);\n    claimsMatchCompiled = new HashMap<>();\n    if (claimsMatch != null) {\n      for (Map.Entry<String, String> entry : claimsMatch.entrySet()) {\n        claimsMatchCompiled.put(entry.getKey(), Pattern.compile(entry.getValue()));\n      }\n    }\n\n    String requiredScopesStr = (String) pluginConfig.get(PARAM_SCOPE);\n    if (!StringUtils.isEmpty(requiredScopesStr)) {\n      requiredScopes = Arrays.asList(requiredScopesStr.split(\"\\\\s+\"));\n    }\n\n    long jwkCacheDuration = Long.parseLong((String) pluginConfig.getOrDefault(PARAM_JWK_CACHE_DURATION, \"3600\"));\n    JWTIssuerConfig.setHttpsJwksFactory(new JWTIssuerConfig.HttpsJwksFactory(jwkCacheDuration, DEFAULT_REFRESH_REPRIEVE_THRESHOLD));\n\n    issuerConfigs = new ArrayList<>();\n\n    // Try to parse an issuer from top level config, and add first (primary issuer)\n    Optional<JWTIssuerConfig> topLevelIssuer = parseIssuerFromTopLevelConfig(pluginConfig);\n    topLevelIssuer.ifPresent(ic -> {\n      issuerConfigs.add(ic);\n      log.warn(\"JWTAuthPlugin issuer is configured using top-level configuration keys. Please consider using the 'issuers' array instead.\");\n    });\n\n    // Add issuers from 'issuers' key\n    issuerConfigs.addAll(parseIssuers(pluginConfig));\n    verificationKeyResolver = new JWTVerificationkeyResolver(issuerConfigs, requireIssuer);\n\n    if (issuerConfigs.size() > 0 && getPrimaryIssuer().getAuthorizationEndpoint() != null) {\n      adminUiScope = (String) pluginConfig.get(PARAM_ADMINUI_SCOPE);\n      if (adminUiScope == null && requiredScopes.size() > 0) {\n        adminUiScope = requiredScopes.get(0);\n        log.warn(\"No adminUiScope given, using first scope in 'scope' list as required scope for accessing Admin UI\");\n      }\n\n      if (adminUiScope == null) {\n        adminUiScope = \"solr\";\n        log.info(\"No adminUiScope provided, fallback to 'solr' as required scope for Admin UI login may not work\");\n      }\n\n      Object redirectUrisObj = pluginConfig.get(PARAM_REDIRECT_URIS);\n      redirectUris = Collections.emptyList();\n      if (redirectUrisObj != null) {\n        if (redirectUrisObj instanceof String) {\n          redirectUris = Collections.singletonList((String) redirectUrisObj);\n        } else if (redirectUrisObj instanceof List) {\n          redirectUris = (List<String>) redirectUrisObj;\n        }\n      }\n    }\n\n    initConsumer();\n\n    lastInitTime = Instant.now();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(Map<String, Object> pluginConfig) {\n    this.pluginConfig = pluginConfig;\n    this.issuerConfigs = null;\n    List<String> unknownKeys = pluginConfig.keySet().stream().filter(k -> !PROPS.contains(k)).collect(Collectors.toList());\n    unknownKeys.remove(\"class\");\n    unknownKeys.remove(\"\");\n    if (!unknownKeys.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid JwtAuth configuration parameter \" + unknownKeys); \n    }\n\n    blockUnknown = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_BLOCK_UNKNOWN, false)));\n    requireIssuer = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_REQUIRE_ISSUER, \"true\")));\n    requireExpirationTime = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_REQUIRE_EXPIRATIONTIME, \"true\")));\n    if (pluginConfig.get(PARAM_REQUIRE_SUBJECT) != null) {\n      log.warn(\"Parameter {} is no longer used and may generate error in a later version. A subject claim is now always required\",\n          PARAM_REQUIRE_SUBJECT);\n    }\n    principalClaim = (String) pluginConfig.getOrDefault(PARAM_PRINCIPAL_CLAIM, \"sub\");\n    algWhitelist = (List<String>) pluginConfig.get(PARAM_ALG_WHITELIST);\n    realm = (String) pluginConfig.getOrDefault(PARAM_REALM, DEFAULT_AUTH_REALM);\n\n    Map<String, String> claimsMatch = (Map<String, String>) pluginConfig.get(PARAM_CLAIMS_MATCH);\n    claimsMatchCompiled = new HashMap<>();\n    if (claimsMatch != null) {\n      for (Map.Entry<String, String> entry : claimsMatch.entrySet()) {\n        claimsMatchCompiled.put(entry.getKey(), Pattern.compile(entry.getValue()));\n      }\n    }\n\n    String requiredScopesStr = (String) pluginConfig.get(PARAM_SCOPE);\n    if (!StringUtils.isEmpty(requiredScopesStr)) {\n      requiredScopes = Arrays.asList(requiredScopesStr.split(\"\\\\s+\"));\n    }\n\n    long jwkCacheDuration = Long.parseLong((String) pluginConfig.getOrDefault(PARAM_JWK_CACHE_DURATION, \"3600\"));\n    JWTIssuerConfig.setHttpsJwksFactory(new JWTIssuerConfig.HttpsJwksFactory(jwkCacheDuration, DEFAULT_REFRESH_REPRIEVE_THRESHOLD));\n\n    issuerConfigs = new ArrayList<>();\n\n    // Try to parse an issuer from top level config, and add first (primary issuer)\n    Optional<JWTIssuerConfig> topLevelIssuer = parseIssuerFromTopLevelConfig(pluginConfig);\n    topLevelIssuer.ifPresent(ic -> {\n      issuerConfigs.add(ic);\n      log.warn(\"JWTAuthPlugin issuer is configured using top-level configuration keys. Please consider using the 'issuers' array instead.\");\n    });\n\n    // Add issuers from 'issuers' key\n    issuerConfigs.addAll(parseIssuers(pluginConfig));\n    verificationKeyResolver = new JWTVerificationkeyResolver(issuerConfigs, requireIssuer);\n\n    if (issuerConfigs.size() > 0 && getPrimaryIssuer().getAuthorizationEndpoint() != null) {\n      adminUiScope = (String) pluginConfig.get(PARAM_ADMINUI_SCOPE);\n      if (adminUiScope == null && requiredScopes.size() > 0) {\n        adminUiScope = requiredScopes.get(0);\n        log.warn(\"No adminUiScope given, using first scope in 'scope' list as required scope for accessing Admin UI\");\n      }\n\n      if (adminUiScope == null) {\n        adminUiScope = \"solr\";\n        log.info(\"No adminUiScope provided, fallback to 'solr' as required scope for Admin UI login may not work\");\n      }\n\n      Object redirectUrisObj = pluginConfig.get(PARAM_REDIRECT_URIS);\n      redirectUris = Collections.emptyList();\n      if (redirectUrisObj != null) {\n        if (redirectUrisObj instanceof String) {\n          redirectUris = Collections.singletonList((String) redirectUrisObj);\n        } else if (redirectUrisObj instanceof List) {\n          redirectUris = (List<String>) redirectUrisObj;\n        }\n      }\n    }\n\n    initConsumer();\n\n    lastInitTime = Instant.now();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d7e78bc3558a41a6be6a28c1b9cacbedbbd9bbf","date":1600273675,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#init(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#init(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(Map<String, Object> pluginConfig) {\n    this.pluginConfig = pluginConfig;\n    this.issuerConfigs = null;\n    List<String> unknownKeys = pluginConfig.keySet().stream().filter(k -> !PROPS.contains(k)).collect(Collectors.toList());\n    unknownKeys.remove(\"class\");\n    unknownKeys.remove(\"\");\n    if (!unknownKeys.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid JwtAuth configuration parameter \" + unknownKeys); \n    }\n\n    blockUnknown = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_BLOCK_UNKNOWN, false)));\n    requireIssuer = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_REQUIRE_ISSUER, \"true\")));\n    requireExpirationTime = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_REQUIRE_EXPIRATIONTIME, \"true\")));\n    principalClaim = (String) pluginConfig.getOrDefault(PARAM_PRINCIPAL_CLAIM, \"sub\");\n\n    rolesClaim = (String) pluginConfig.get(PARAM_ROLES_CLAIM);\n    algWhitelist = (List<String>) pluginConfig.get(PARAM_ALG_WHITELIST);\n    realm = (String) pluginConfig.getOrDefault(PARAM_REALM, DEFAULT_AUTH_REALM);\n\n    Map<String, String> claimsMatch = (Map<String, String>) pluginConfig.get(PARAM_CLAIMS_MATCH);\n    claimsMatchCompiled = new HashMap<>();\n    if (claimsMatch != null) {\n      for (Map.Entry<String, String> entry : claimsMatch.entrySet()) {\n        claimsMatchCompiled.put(entry.getKey(), Pattern.compile(entry.getValue()));\n      }\n    }\n\n    String requiredScopesStr = (String) pluginConfig.get(PARAM_SCOPE);\n    if (!StringUtils.isEmpty(requiredScopesStr)) {\n      requiredScopes = Arrays.asList(requiredScopesStr.split(\"\\\\s+\"));\n    }\n\n    long jwkCacheDuration = Long.parseLong((String) pluginConfig.getOrDefault(PARAM_JWK_CACHE_DURATION, \"3600\"));\n    JWTIssuerConfig.setHttpsJwksFactory(new JWTIssuerConfig.HttpsJwksFactory(jwkCacheDuration, DEFAULT_REFRESH_REPRIEVE_THRESHOLD));\n\n    issuerConfigs = new ArrayList<>();\n\n    // Try to parse an issuer from top level config, and add first (primary issuer)\n    Optional<JWTIssuerConfig> topLevelIssuer = parseIssuerFromTopLevelConfig(pluginConfig);\n    topLevelIssuer.ifPresent(ic -> {\n      issuerConfigs.add(ic);\n      log.warn(\"JWTAuthPlugin issuer is configured using top-level configuration keys. Please consider using the 'issuers' array instead.\");\n    });\n\n    // Add issuers from 'issuers' key\n    issuerConfigs.addAll(parseIssuers(pluginConfig));\n    verificationKeyResolver = new JWTVerificationkeyResolver(issuerConfigs, requireIssuer);\n\n    if (issuerConfigs.size() > 0 && getPrimaryIssuer().getAuthorizationEndpoint() != null) {\n      adminUiScope = (String) pluginConfig.get(PARAM_ADMINUI_SCOPE);\n      if (adminUiScope == null && requiredScopes.size() > 0) {\n        adminUiScope = requiredScopes.get(0);\n        log.warn(\"No adminUiScope given, using first scope in 'scope' list as required scope for accessing Admin UI\");\n      }\n\n      if (adminUiScope == null) {\n        adminUiScope = \"solr\";\n        log.info(\"No adminUiScope provided, fallback to 'solr' as required scope for Admin UI login may not work\");\n      }\n\n      Object redirectUrisObj = pluginConfig.get(PARAM_REDIRECT_URIS);\n      redirectUris = Collections.emptyList();\n      if (redirectUrisObj != null) {\n        if (redirectUrisObj instanceof String) {\n          redirectUris = Collections.singletonList((String) redirectUrisObj);\n        } else if (redirectUrisObj instanceof List) {\n          redirectUris = (List<String>) redirectUrisObj;\n        }\n      }\n    }\n\n    initConsumer();\n\n    lastInitTime = Instant.now();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(Map<String, Object> pluginConfig) {\n    this.pluginConfig = pluginConfig;\n    this.issuerConfigs = null;\n    List<String> unknownKeys = pluginConfig.keySet().stream().filter(k -> !PROPS.contains(k)).collect(Collectors.toList());\n    unknownKeys.remove(\"class\");\n    unknownKeys.remove(\"\");\n    if (!unknownKeys.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid JwtAuth configuration parameter \" + unknownKeys); \n    }\n\n    blockUnknown = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_BLOCK_UNKNOWN, false)));\n    requireIssuer = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_REQUIRE_ISSUER, \"true\")));\n    requireExpirationTime = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_REQUIRE_EXPIRATIONTIME, \"true\")));\n    if (pluginConfig.get(PARAM_REQUIRE_SUBJECT) != null) {\n      log.warn(\"Parameter {} is no longer used and may generate error in a later version. A subject claim is now always required\",\n          PARAM_REQUIRE_SUBJECT);\n    }\n    principalClaim = (String) pluginConfig.getOrDefault(PARAM_PRINCIPAL_CLAIM, \"sub\");\n\n    rolesClaim = (String) pluginConfig.get(PARAM_ROLES_CLAIM);\n    algWhitelist = (List<String>) pluginConfig.get(PARAM_ALG_WHITELIST);\n    realm = (String) pluginConfig.getOrDefault(PARAM_REALM, DEFAULT_AUTH_REALM);\n\n    Map<String, String> claimsMatch = (Map<String, String>) pluginConfig.get(PARAM_CLAIMS_MATCH);\n    claimsMatchCompiled = new HashMap<>();\n    if (claimsMatch != null) {\n      for (Map.Entry<String, String> entry : claimsMatch.entrySet()) {\n        claimsMatchCompiled.put(entry.getKey(), Pattern.compile(entry.getValue()));\n      }\n    }\n\n    String requiredScopesStr = (String) pluginConfig.get(PARAM_SCOPE);\n    if (!StringUtils.isEmpty(requiredScopesStr)) {\n      requiredScopes = Arrays.asList(requiredScopesStr.split(\"\\\\s+\"));\n    }\n\n    long jwkCacheDuration = Long.parseLong((String) pluginConfig.getOrDefault(PARAM_JWK_CACHE_DURATION, \"3600\"));\n    JWTIssuerConfig.setHttpsJwksFactory(new JWTIssuerConfig.HttpsJwksFactory(jwkCacheDuration, DEFAULT_REFRESH_REPRIEVE_THRESHOLD));\n\n    issuerConfigs = new ArrayList<>();\n\n    // Try to parse an issuer from top level config, and add first (primary issuer)\n    Optional<JWTIssuerConfig> topLevelIssuer = parseIssuerFromTopLevelConfig(pluginConfig);\n    topLevelIssuer.ifPresent(ic -> {\n      issuerConfigs.add(ic);\n      log.warn(\"JWTAuthPlugin issuer is configured using top-level configuration keys. Please consider using the 'issuers' array instead.\");\n    });\n\n    // Add issuers from 'issuers' key\n    issuerConfigs.addAll(parseIssuers(pluginConfig));\n    verificationKeyResolver = new JWTVerificationkeyResolver(issuerConfigs, requireIssuer);\n\n    if (issuerConfigs.size() > 0 && getPrimaryIssuer().getAuthorizationEndpoint() != null) {\n      adminUiScope = (String) pluginConfig.get(PARAM_ADMINUI_SCOPE);\n      if (adminUiScope == null && requiredScopes.size() > 0) {\n        adminUiScope = requiredScopes.get(0);\n        log.warn(\"No adminUiScope given, using first scope in 'scope' list as required scope for accessing Admin UI\");\n      }\n\n      if (adminUiScope == null) {\n        adminUiScope = \"solr\";\n        log.info(\"No adminUiScope provided, fallback to 'solr' as required scope for Admin UI login may not work\");\n      }\n\n      Object redirectUrisObj = pluginConfig.get(PARAM_REDIRECT_URIS);\n      redirectUris = Collections.emptyList();\n      if (redirectUrisObj != null) {\n        if (redirectUrisObj instanceof String) {\n          redirectUris = Collections.singletonList((String) redirectUrisObj);\n        } else if (redirectUrisObj instanceof List) {\n          redirectUris = (List<String>) redirectUrisObj;\n        }\n      }\n    }\n\n    initConsumer();\n\n    lastInitTime = Instant.now();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a3a6f400917112d3dce0eac8fd81d052f700564","date":1600274703,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#init(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#init(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(Map<String, Object> pluginConfig) {\n    this.pluginConfig = pluginConfig;\n    this.issuerConfigs = null;\n    List<String> unknownKeys = pluginConfig.keySet().stream().filter(k -> !PROPS.contains(k)).collect(Collectors.toList());\n    unknownKeys.remove(\"class\");\n    unknownKeys.remove(\"\");\n    if (!unknownKeys.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid JwtAuth configuration parameter \" + unknownKeys); \n    }\n\n    blockUnknown = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_BLOCK_UNKNOWN, false)));\n    requireIssuer = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_REQUIRE_ISSUER, \"true\")));\n    requireExpirationTime = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_REQUIRE_EXPIRATIONTIME, \"true\")));\n    if (pluginConfig.get(PARAM_REQUIRE_SUBJECT) != null) {\n      log.warn(\"Parameter {} is no longer used and may generate error in a later version. A subject claim is now always required\",\n          PARAM_REQUIRE_SUBJECT);\n    }\n    principalClaim = (String) pluginConfig.getOrDefault(PARAM_PRINCIPAL_CLAIM, \"sub\");\n\n    rolesClaim = (String) pluginConfig.get(PARAM_ROLES_CLAIM);\n    algWhitelist = (List<String>) pluginConfig.get(PARAM_ALG_WHITELIST);\n    realm = (String) pluginConfig.getOrDefault(PARAM_REALM, DEFAULT_AUTH_REALM);\n\n    Map<String, String> claimsMatch = (Map<String, String>) pluginConfig.get(PARAM_CLAIMS_MATCH);\n    claimsMatchCompiled = new HashMap<>();\n    if (claimsMatch != null) {\n      for (Map.Entry<String, String> entry : claimsMatch.entrySet()) {\n        claimsMatchCompiled.put(entry.getKey(), Pattern.compile(entry.getValue()));\n      }\n    }\n\n    String requiredScopesStr = (String) pluginConfig.get(PARAM_SCOPE);\n    if (!StringUtils.isEmpty(requiredScopesStr)) {\n      requiredScopes = Arrays.asList(requiredScopesStr.split(\"\\\\s+\"));\n    }\n\n    long jwkCacheDuration = Long.parseLong((String) pluginConfig.getOrDefault(PARAM_JWK_CACHE_DURATION, \"3600\"));\n    JWTIssuerConfig.setHttpsJwksFactory(new JWTIssuerConfig.HttpsJwksFactory(jwkCacheDuration, DEFAULT_REFRESH_REPRIEVE_THRESHOLD));\n\n    issuerConfigs = new ArrayList<>();\n\n    // Try to parse an issuer from top level config, and add first (primary issuer)\n    Optional<JWTIssuerConfig> topLevelIssuer = parseIssuerFromTopLevelConfig(pluginConfig);\n    topLevelIssuer.ifPresent(ic -> {\n      issuerConfigs.add(ic);\n      log.warn(\"JWTAuthPlugin issuer is configured using top-level configuration keys. Please consider using the 'issuers' array instead.\");\n    });\n\n    // Add issuers from 'issuers' key\n    issuerConfigs.addAll(parseIssuers(pluginConfig));\n    verificationKeyResolver = new JWTVerificationkeyResolver(issuerConfigs, requireIssuer);\n\n    if (issuerConfigs.size() > 0 && getPrimaryIssuer().getAuthorizationEndpoint() != null) {\n      adminUiScope = (String) pluginConfig.get(PARAM_ADMINUI_SCOPE);\n      if (adminUiScope == null && requiredScopes.size() > 0) {\n        adminUiScope = requiredScopes.get(0);\n        log.warn(\"No adminUiScope given, using first scope in 'scope' list as required scope for accessing Admin UI\");\n      }\n\n      if (adminUiScope == null) {\n        adminUiScope = \"solr\";\n        log.info(\"No adminUiScope provided, fallback to 'solr' as required scope for Admin UI login may not work\");\n      }\n\n      Object redirectUrisObj = pluginConfig.get(PARAM_REDIRECT_URIS);\n      redirectUris = Collections.emptyList();\n      if (redirectUrisObj != null) {\n        if (redirectUrisObj instanceof String) {\n          redirectUris = Collections.singletonList((String) redirectUrisObj);\n        } else if (redirectUrisObj instanceof List) {\n          redirectUris = (List<String>) redirectUrisObj;\n        }\n      }\n    }\n\n    initConsumer();\n\n    lastInitTime = Instant.now();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(Map<String, Object> pluginConfig) {\n    this.pluginConfig = pluginConfig;\n    this.issuerConfigs = null;\n    List<String> unknownKeys = pluginConfig.keySet().stream().filter(k -> !PROPS.contains(k)).collect(Collectors.toList());\n    unknownKeys.remove(\"class\");\n    unknownKeys.remove(\"\");\n    if (!unknownKeys.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid JwtAuth configuration parameter \" + unknownKeys); \n    }\n\n    blockUnknown = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_BLOCK_UNKNOWN, false)));\n    requireIssuer = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_REQUIRE_ISSUER, \"true\")));\n    requireExpirationTime = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_REQUIRE_EXPIRATIONTIME, \"true\")));\n    principalClaim = (String) pluginConfig.getOrDefault(PARAM_PRINCIPAL_CLAIM, \"sub\");\n\n    rolesClaim = (String) pluginConfig.get(PARAM_ROLES_CLAIM);\n    algWhitelist = (List<String>) pluginConfig.get(PARAM_ALG_WHITELIST);\n    realm = (String) pluginConfig.getOrDefault(PARAM_REALM, DEFAULT_AUTH_REALM);\n\n    Map<String, String> claimsMatch = (Map<String, String>) pluginConfig.get(PARAM_CLAIMS_MATCH);\n    claimsMatchCompiled = new HashMap<>();\n    if (claimsMatch != null) {\n      for (Map.Entry<String, String> entry : claimsMatch.entrySet()) {\n        claimsMatchCompiled.put(entry.getKey(), Pattern.compile(entry.getValue()));\n      }\n    }\n\n    String requiredScopesStr = (String) pluginConfig.get(PARAM_SCOPE);\n    if (!StringUtils.isEmpty(requiredScopesStr)) {\n      requiredScopes = Arrays.asList(requiredScopesStr.split(\"\\\\s+\"));\n    }\n\n    long jwkCacheDuration = Long.parseLong((String) pluginConfig.getOrDefault(PARAM_JWK_CACHE_DURATION, \"3600\"));\n    JWTIssuerConfig.setHttpsJwksFactory(new JWTIssuerConfig.HttpsJwksFactory(jwkCacheDuration, DEFAULT_REFRESH_REPRIEVE_THRESHOLD));\n\n    issuerConfigs = new ArrayList<>();\n\n    // Try to parse an issuer from top level config, and add first (primary issuer)\n    Optional<JWTIssuerConfig> topLevelIssuer = parseIssuerFromTopLevelConfig(pluginConfig);\n    topLevelIssuer.ifPresent(ic -> {\n      issuerConfigs.add(ic);\n      log.warn(\"JWTAuthPlugin issuer is configured using top-level configuration keys. Please consider using the 'issuers' array instead.\");\n    });\n\n    // Add issuers from 'issuers' key\n    issuerConfigs.addAll(parseIssuers(pluginConfig));\n    verificationKeyResolver = new JWTVerificationkeyResolver(issuerConfigs, requireIssuer);\n\n    if (issuerConfigs.size() > 0 && getPrimaryIssuer().getAuthorizationEndpoint() != null) {\n      adminUiScope = (String) pluginConfig.get(PARAM_ADMINUI_SCOPE);\n      if (adminUiScope == null && requiredScopes.size() > 0) {\n        adminUiScope = requiredScopes.get(0);\n        log.warn(\"No adminUiScope given, using first scope in 'scope' list as required scope for accessing Admin UI\");\n      }\n\n      if (adminUiScope == null) {\n        adminUiScope = \"solr\";\n        log.info(\"No adminUiScope provided, fallback to 'solr' as required scope for Admin UI login may not work\");\n      }\n\n      Object redirectUrisObj = pluginConfig.get(PARAM_REDIRECT_URIS);\n      redirectUris = Collections.emptyList();\n      if (redirectUrisObj != null) {\n        if (redirectUrisObj instanceof String) {\n          redirectUris = Collections.singletonList((String) redirectUrisObj);\n        } else if (redirectUrisObj instanceof List) {\n          redirectUris = (List<String>) redirectUrisObj;\n        }\n      }\n    }\n\n    initConsumer();\n\n    lastInitTime = Instant.now();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9b6f2c802ecb6bf126c65c7863b01099d520ba5","date":1600278079,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#init(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#init(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(Map<String, Object> pluginConfig) {\n    this.pluginConfig = pluginConfig;\n    this.issuerConfigs = null;\n    List<String> unknownKeys = pluginConfig.keySet().stream().filter(k -> !PROPS.contains(k)).collect(Collectors.toList());\n    unknownKeys.remove(\"class\");\n    unknownKeys.remove(\"\");\n    if (!unknownKeys.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid JwtAuth configuration parameter \" + unknownKeys); \n    }\n\n    blockUnknown = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_BLOCK_UNKNOWN, false)));\n    requireIssuer = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_REQUIRE_ISSUER, \"true\")));\n    requireExpirationTime = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_REQUIRE_EXPIRATIONTIME, \"true\")));\n    principalClaim = (String) pluginConfig.getOrDefault(PARAM_PRINCIPAL_CLAIM, \"sub\");\n\n    rolesClaim = (String) pluginConfig.get(PARAM_ROLES_CLAIM);\n    algWhitelist = (List<String>) pluginConfig.get(PARAM_ALG_WHITELIST);\n    realm = (String) pluginConfig.getOrDefault(PARAM_REALM, DEFAULT_AUTH_REALM);\n\n    Map<String, String> claimsMatch = (Map<String, String>) pluginConfig.get(PARAM_CLAIMS_MATCH);\n    claimsMatchCompiled = new HashMap<>();\n    if (claimsMatch != null) {\n      for (Map.Entry<String, String> entry : claimsMatch.entrySet()) {\n        claimsMatchCompiled.put(entry.getKey(), Pattern.compile(entry.getValue()));\n      }\n    }\n\n    String requiredScopesStr = (String) pluginConfig.get(PARAM_SCOPE);\n    if (!StringUtils.isEmpty(requiredScopesStr)) {\n      requiredScopes = Arrays.asList(requiredScopesStr.split(\"\\\\s+\"));\n    }\n\n    long jwkCacheDuration = Long.parseLong((String) pluginConfig.getOrDefault(PARAM_JWK_CACHE_DURATION, \"3600\"));\n    JWTIssuerConfig.setHttpsJwksFactory(new JWTIssuerConfig.HttpsJwksFactory(jwkCacheDuration, DEFAULT_REFRESH_REPRIEVE_THRESHOLD));\n\n    issuerConfigs = new ArrayList<>();\n\n    // Try to parse an issuer from top level config, and add first (primary issuer)\n    Optional<JWTIssuerConfig> topLevelIssuer = parseIssuerFromTopLevelConfig(pluginConfig);\n    topLevelIssuer.ifPresent(ic -> {\n      issuerConfigs.add(ic);\n      log.warn(\"JWTAuthPlugin issuer is configured using top-level configuration keys. Please consider using the 'issuers' array instead.\");\n    });\n\n    // Add issuers from 'issuers' key\n    issuerConfigs.addAll(parseIssuers(pluginConfig));\n    verificationKeyResolver = new JWTVerificationkeyResolver(issuerConfigs, requireIssuer);\n\n    if (issuerConfigs.size() > 0 && getPrimaryIssuer().getAuthorizationEndpoint() != null) {\n      adminUiScope = (String) pluginConfig.get(PARAM_ADMINUI_SCOPE);\n      if (adminUiScope == null && requiredScopes.size() > 0) {\n        adminUiScope = requiredScopes.get(0);\n        log.warn(\"No adminUiScope given, using first scope in 'scope' list as required scope for accessing Admin UI\");\n      }\n\n      if (adminUiScope == null) {\n        adminUiScope = \"solr\";\n        log.info(\"No adminUiScope provided, fallback to 'solr' as required scope for Admin UI login may not work\");\n      }\n\n      Object redirectUrisObj = pluginConfig.get(PARAM_REDIRECT_URIS);\n      redirectUris = Collections.emptyList();\n      if (redirectUrisObj != null) {\n        if (redirectUrisObj instanceof String) {\n          redirectUris = Collections.singletonList((String) redirectUrisObj);\n        } else if (redirectUrisObj instanceof List) {\n          redirectUris = (List<String>) redirectUrisObj;\n        }\n      }\n    }\n\n    initConsumer();\n\n    lastInitTime = Instant.now();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(Map<String, Object> pluginConfig) {\n    this.pluginConfig = pluginConfig;\n    this.issuerConfigs = null;\n    List<String> unknownKeys = pluginConfig.keySet().stream().filter(k -> !PROPS.contains(k)).collect(Collectors.toList());\n    unknownKeys.remove(\"class\");\n    unknownKeys.remove(\"\");\n    if (!unknownKeys.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid JwtAuth configuration parameter \" + unknownKeys); \n    }\n\n    blockUnknown = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_BLOCK_UNKNOWN, false)));\n    requireIssuer = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_REQUIRE_ISSUER, \"true\")));\n    requireExpirationTime = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_REQUIRE_EXPIRATIONTIME, \"true\")));\n    if (pluginConfig.get(PARAM_REQUIRE_SUBJECT) != null) {\n      log.warn(\"Parameter {} is no longer used and may generate error in a later version. A subject claim is now always required\",\n          PARAM_REQUIRE_SUBJECT);\n    }\n    principalClaim = (String) pluginConfig.getOrDefault(PARAM_PRINCIPAL_CLAIM, \"sub\");\n\n    rolesClaim = (String) pluginConfig.get(PARAM_ROLES_CLAIM);\n    algWhitelist = (List<String>) pluginConfig.get(PARAM_ALG_WHITELIST);\n    realm = (String) pluginConfig.getOrDefault(PARAM_REALM, DEFAULT_AUTH_REALM);\n\n    Map<String, String> claimsMatch = (Map<String, String>) pluginConfig.get(PARAM_CLAIMS_MATCH);\n    claimsMatchCompiled = new HashMap<>();\n    if (claimsMatch != null) {\n      for (Map.Entry<String, String> entry : claimsMatch.entrySet()) {\n        claimsMatchCompiled.put(entry.getKey(), Pattern.compile(entry.getValue()));\n      }\n    }\n\n    String requiredScopesStr = (String) pluginConfig.get(PARAM_SCOPE);\n    if (!StringUtils.isEmpty(requiredScopesStr)) {\n      requiredScopes = Arrays.asList(requiredScopesStr.split(\"\\\\s+\"));\n    }\n\n    long jwkCacheDuration = Long.parseLong((String) pluginConfig.getOrDefault(PARAM_JWK_CACHE_DURATION, \"3600\"));\n    JWTIssuerConfig.setHttpsJwksFactory(new JWTIssuerConfig.HttpsJwksFactory(jwkCacheDuration, DEFAULT_REFRESH_REPRIEVE_THRESHOLD));\n\n    issuerConfigs = new ArrayList<>();\n\n    // Try to parse an issuer from top level config, and add first (primary issuer)\n    Optional<JWTIssuerConfig> topLevelIssuer = parseIssuerFromTopLevelConfig(pluginConfig);\n    topLevelIssuer.ifPresent(ic -> {\n      issuerConfigs.add(ic);\n      log.warn(\"JWTAuthPlugin issuer is configured using top-level configuration keys. Please consider using the 'issuers' array instead.\");\n    });\n\n    // Add issuers from 'issuers' key\n    issuerConfigs.addAll(parseIssuers(pluginConfig));\n    verificationKeyResolver = new JWTVerificationkeyResolver(issuerConfigs, requireIssuer);\n\n    if (issuerConfigs.size() > 0 && getPrimaryIssuer().getAuthorizationEndpoint() != null) {\n      adminUiScope = (String) pluginConfig.get(PARAM_ADMINUI_SCOPE);\n      if (adminUiScope == null && requiredScopes.size() > 0) {\n        adminUiScope = requiredScopes.get(0);\n        log.warn(\"No adminUiScope given, using first scope in 'scope' list as required scope for accessing Admin UI\");\n      }\n\n      if (adminUiScope == null) {\n        adminUiScope = \"solr\";\n        log.info(\"No adminUiScope provided, fallback to 'solr' as required scope for Admin UI login may not work\");\n      }\n\n      Object redirectUrisObj = pluginConfig.get(PARAM_REDIRECT_URIS);\n      redirectUris = Collections.emptyList();\n      if (redirectUrisObj != null) {\n        if (redirectUrisObj instanceof String) {\n          redirectUris = Collections.singletonList((String) redirectUrisObj);\n        } else if (redirectUrisObj instanceof List) {\n          redirectUris = (List<String>) redirectUrisObj;\n        }\n      }\n    }\n\n    initConsumer();\n\n    lastInitTime = Instant.now();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65352f844eb9e9a677ec4eb2abced4404f08181d","date":1600297608,"type":3,"author":"noblepaul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#init(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#init(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(Map<String, Object> pluginConfig) {\n    this.pluginConfig = pluginConfig;\n    this.issuerConfigs = null;\n    List<String> unknownKeys = pluginConfig.keySet().stream().filter(k -> !PROPS.contains(k)).collect(Collectors.toList());\n    unknownKeys.remove(\"class\");\n    unknownKeys.remove(\"\");\n    if (!unknownKeys.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid JwtAuth configuration parameter \" + unknownKeys); \n    }\n\n    blockUnknown = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_BLOCK_UNKNOWN, false)));\n    requireIssuer = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_REQUIRE_ISSUER, \"true\")));\n    requireExpirationTime = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_REQUIRE_EXPIRATIONTIME, \"true\")));\n    principalClaim = (String) pluginConfig.getOrDefault(PARAM_PRINCIPAL_CLAIM, \"sub\");\n\n    rolesClaim = (String) pluginConfig.get(PARAM_ROLES_CLAIM);\n    algWhitelist = (List<String>) pluginConfig.get(PARAM_ALG_WHITELIST);\n    realm = (String) pluginConfig.getOrDefault(PARAM_REALM, DEFAULT_AUTH_REALM);\n\n    Map<String, String> claimsMatch = (Map<String, String>) pluginConfig.get(PARAM_CLAIMS_MATCH);\n    claimsMatchCompiled = new HashMap<>();\n    if (claimsMatch != null) {\n      for (Map.Entry<String, String> entry : claimsMatch.entrySet()) {\n        claimsMatchCompiled.put(entry.getKey(), Pattern.compile(entry.getValue()));\n      }\n    }\n\n    String requiredScopesStr = (String) pluginConfig.get(PARAM_SCOPE);\n    if (!StringUtils.isEmpty(requiredScopesStr)) {\n      requiredScopes = Arrays.asList(requiredScopesStr.split(\"\\\\s+\"));\n    }\n\n    long jwkCacheDuration = Long.parseLong((String) pluginConfig.getOrDefault(PARAM_JWK_CACHE_DURATION, \"3600\"));\n    JWTIssuerConfig.setHttpsJwksFactory(new JWTIssuerConfig.HttpsJwksFactory(jwkCacheDuration, DEFAULT_REFRESH_REPRIEVE_THRESHOLD));\n\n    issuerConfigs = new ArrayList<>();\n\n    // Try to parse an issuer from top level config, and add first (primary issuer)\n    Optional<JWTIssuerConfig> topLevelIssuer = parseIssuerFromTopLevelConfig(pluginConfig);\n    topLevelIssuer.ifPresent(ic -> {\n      issuerConfigs.add(ic);\n      log.warn(\"JWTAuthPlugin issuer is configured using top-level configuration keys. Please consider using the 'issuers' array instead.\");\n    });\n\n    // Add issuers from 'issuers' key\n    issuerConfigs.addAll(parseIssuers(pluginConfig));\n    verificationKeyResolver = new JWTVerificationkeyResolver(issuerConfigs, requireIssuer);\n\n    if (issuerConfigs.size() > 0 && getPrimaryIssuer().getAuthorizationEndpoint() != null) {\n      adminUiScope = (String) pluginConfig.get(PARAM_ADMINUI_SCOPE);\n      if (adminUiScope == null && requiredScopes.size() > 0) {\n        adminUiScope = requiredScopes.get(0);\n        log.warn(\"No adminUiScope given, using first scope in 'scope' list as required scope for accessing Admin UI\");\n      }\n\n      if (adminUiScope == null) {\n        adminUiScope = \"solr\";\n        log.info(\"No adminUiScope provided, fallback to 'solr' as required scope for Admin UI login may not work\");\n      }\n\n      Object redirectUrisObj = pluginConfig.get(PARAM_REDIRECT_URIS);\n      redirectUris = Collections.emptyList();\n      if (redirectUrisObj != null) {\n        if (redirectUrisObj instanceof String) {\n          redirectUris = Collections.singletonList((String) redirectUrisObj);\n        } else if (redirectUrisObj instanceof List) {\n          redirectUris = (List<String>) redirectUrisObj;\n        }\n      }\n    }\n\n    initConsumer();\n\n    lastInitTime = Instant.now();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(Map<String, Object> pluginConfig) {\n    this.pluginConfig = pluginConfig;\n    this.issuerConfigs = null;\n    List<String> unknownKeys = pluginConfig.keySet().stream().filter(k -> !PROPS.contains(k)).collect(Collectors.toList());\n    unknownKeys.remove(\"class\");\n    unknownKeys.remove(\"\");\n    if (!unknownKeys.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid JwtAuth configuration parameter \" + unknownKeys); \n    }\n\n    blockUnknown = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_BLOCK_UNKNOWN, false)));\n    requireIssuer = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_REQUIRE_ISSUER, \"true\")));\n    requireExpirationTime = Boolean.parseBoolean(String.valueOf(pluginConfig.getOrDefault(PARAM_REQUIRE_EXPIRATIONTIME, \"true\")));\n    if (pluginConfig.get(PARAM_REQUIRE_SUBJECT) != null) {\n      log.warn(\"Parameter {} is no longer used and may generate error in a later version. A subject claim is now always required\",\n          PARAM_REQUIRE_SUBJECT);\n    }\n    principalClaim = (String) pluginConfig.getOrDefault(PARAM_PRINCIPAL_CLAIM, \"sub\");\n\n    rolesClaim = (String) pluginConfig.get(PARAM_ROLES_CLAIM);\n    algWhitelist = (List<String>) pluginConfig.get(PARAM_ALG_WHITELIST);\n    realm = (String) pluginConfig.getOrDefault(PARAM_REALM, DEFAULT_AUTH_REALM);\n\n    Map<String, String> claimsMatch = (Map<String, String>) pluginConfig.get(PARAM_CLAIMS_MATCH);\n    claimsMatchCompiled = new HashMap<>();\n    if (claimsMatch != null) {\n      for (Map.Entry<String, String> entry : claimsMatch.entrySet()) {\n        claimsMatchCompiled.put(entry.getKey(), Pattern.compile(entry.getValue()));\n      }\n    }\n\n    String requiredScopesStr = (String) pluginConfig.get(PARAM_SCOPE);\n    if (!StringUtils.isEmpty(requiredScopesStr)) {\n      requiredScopes = Arrays.asList(requiredScopesStr.split(\"\\\\s+\"));\n    }\n\n    long jwkCacheDuration = Long.parseLong((String) pluginConfig.getOrDefault(PARAM_JWK_CACHE_DURATION, \"3600\"));\n    JWTIssuerConfig.setHttpsJwksFactory(new JWTIssuerConfig.HttpsJwksFactory(jwkCacheDuration, DEFAULT_REFRESH_REPRIEVE_THRESHOLD));\n\n    issuerConfigs = new ArrayList<>();\n\n    // Try to parse an issuer from top level config, and add first (primary issuer)\n    Optional<JWTIssuerConfig> topLevelIssuer = parseIssuerFromTopLevelConfig(pluginConfig);\n    topLevelIssuer.ifPresent(ic -> {\n      issuerConfigs.add(ic);\n      log.warn(\"JWTAuthPlugin issuer is configured using top-level configuration keys. Please consider using the 'issuers' array instead.\");\n    });\n\n    // Add issuers from 'issuers' key\n    issuerConfigs.addAll(parseIssuers(pluginConfig));\n    verificationKeyResolver = new JWTVerificationkeyResolver(issuerConfigs, requireIssuer);\n\n    if (issuerConfigs.size() > 0 && getPrimaryIssuer().getAuthorizationEndpoint() != null) {\n      adminUiScope = (String) pluginConfig.get(PARAM_ADMINUI_SCOPE);\n      if (adminUiScope == null && requiredScopes.size() > 0) {\n        adminUiScope = requiredScopes.get(0);\n        log.warn(\"No adminUiScope given, using first scope in 'scope' list as required scope for accessing Admin UI\");\n      }\n\n      if (adminUiScope == null) {\n        adminUiScope = \"solr\";\n        log.info(\"No adminUiScope provided, fallback to 'solr' as required scope for Admin UI login may not work\");\n      }\n\n      Object redirectUrisObj = pluginConfig.get(PARAM_REDIRECT_URIS);\n      redirectUris = Collections.emptyList();\n      if (redirectUrisObj != null) {\n        if (redirectUrisObj instanceof String) {\n          redirectUris = Collections.singletonList((String) redirectUrisObj);\n        } else if (redirectUrisObj instanceof List) {\n          redirectUris = (List<String>) redirectUrisObj;\n        }\n      }\n    }\n\n    initConsumer();\n\n    lastInitTime = Instant.now();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a3a6f400917112d3dce0eac8fd81d052f700564":["9d7e78bc3558a41a6be6a28c1b9cacbedbbd9bbf"],"8076096f334b0665d0a69a63ee98ac09baad402b":["1ac780c217504f0ca673ac5dcb98768984267c60"],"1ac780c217504f0ca673ac5dcb98768984267c60":["3f67fad1a752e06d753afa1c41bcc27141d258f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"65352f844eb9e9a677ec4eb2abced4404f08181d":["8076096f334b0665d0a69a63ee98ac09baad402b","b9b6f2c802ecb6bf126c65c7863b01099d520ba5"],"9d7e78bc3558a41a6be6a28c1b9cacbedbbd9bbf":["8076096f334b0665d0a69a63ee98ac09baad402b"],"b9b6f2c802ecb6bf126c65c7863b01099d520ba5":["9a3a6f400917112d3dce0eac8fd81d052f700564"],"3f67fad1a752e06d753afa1c41bcc27141d258f5":["bb3e075eaa5788b2762ec235bf72b069cefe3f50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65352f844eb9e9a677ec4eb2abced4404f08181d"],"bb3e075eaa5788b2762ec235bf72b069cefe3f50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bb3e075eaa5788b2762ec235bf72b069cefe3f50"]},"commit2Childs":{"9a3a6f400917112d3dce0eac8fd81d052f700564":["b9b6f2c802ecb6bf126c65c7863b01099d520ba5"],"8076096f334b0665d0a69a63ee98ac09baad402b":["65352f844eb9e9a677ec4eb2abced4404f08181d","9d7e78bc3558a41a6be6a28c1b9cacbedbbd9bbf"],"1ac780c217504f0ca673ac5dcb98768984267c60":["8076096f334b0665d0a69a63ee98ac09baad402b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb3e075eaa5788b2762ec235bf72b069cefe3f50","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"9d7e78bc3558a41a6be6a28c1b9cacbedbbd9bbf":["9a3a6f400917112d3dce0eac8fd81d052f700564"],"65352f844eb9e9a677ec4eb2abced4404f08181d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b9b6f2c802ecb6bf126c65c7863b01099d520ba5":["65352f844eb9e9a677ec4eb2abced4404f08181d"],"3f67fad1a752e06d753afa1c41bcc27141d258f5":["1ac780c217504f0ca673ac5dcb98768984267c60"],"bb3e075eaa5788b2762ec235bf72b069cefe3f50":["3f67fad1a752e06d753afa1c41bcc27141d258f5","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}