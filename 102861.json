{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonTree#relate(LatLonTree[],double,double,double,double).mjava","commits":[{"id":"034996547ca41c5004216fdd0178acbf06438da2","date":1461284133,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonTree#relate(LatLonTree[],double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the multipolygon relation for the rectangle */\n  static Relation relate(LatLonTree[] polygons, double minLat, double maxLat, double minLon, double maxLon) {\n    for (LatLonTree polygon : polygons) {\n      Relation relation = polygon.relate(minLat, maxLat, minLon, maxLon);\n      if (relation != Relation.CELL_OUTSIDE_QUERY) {\n        // note: we optimize for non-overlapping multipolygons. so if we cross one,\n        // we won't keep iterating to try to find a contains.\n        return relation;\n      }\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","date":1461308643,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonTree#relate(LatLonTree[],double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the multipolygon relation for the rectangle */\n  static Relation relate(LatLonTree[] polygons, double minLat, double maxLat, double minLon, double maxLon) {\n    for (LatLonTree polygon : polygons) {\n      Relation relation = polygon.relate(minLat, maxLat, minLon, maxLon);\n      if (relation != Relation.CELL_OUTSIDE_QUERY) {\n        // note: we optimize for non-overlapping multipolygons. so if we cross one,\n        // we won't keep iterating to try to find a contains.\n        return relation;\n      }\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"925fce43f3bac029d912b9b7de03c789e258a333","date":1461612714,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonTree#relate(LatLonTree[],double,double,double,double).mjava","sourceNew":null,"sourceOld":"  /** Returns the multipolygon relation for the rectangle */\n  static Relation relate(LatLonTree[] polygons, double minLat, double maxLat, double minLon, double maxLon) {\n    for (LatLonTree polygon : polygons) {\n      Relation relation = polygon.relate(minLat, maxLat, minLon, maxLon);\n      if (relation != Relation.CELL_OUTSIDE_QUERY) {\n        // note: we optimize for non-overlapping multipolygons. so if we cross one,\n        // we won't keep iterating to try to find a contains.\n        return relation;\n      }\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonTree#relate(LatLonTree[],double,double,double,double).mjava","sourceNew":null,"sourceOld":"  /** Returns the multipolygon relation for the rectangle */\n  static Relation relate(LatLonTree[] polygons, double minLat, double maxLat, double minLon, double maxLon) {\n    for (LatLonTree polygon : polygons) {\n      Relation relation = polygon.relate(minLat, maxLat, minLon, maxLon);\n      if (relation != Relation.CELL_OUTSIDE_QUERY) {\n        // note: we optimize for non-overlapping multipolygons. so if we cross one,\n        // we won't keep iterating to try to find a contains.\n        return relation;\n      }\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","034996547ca41c5004216fdd0178acbf06438da2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","925fce43f3bac029d912b9b7de03c789e258a333"],"034996547ca41c5004216fdd0178acbf06438da2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"925fce43f3bac029d912b9b7de03c789e258a333":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"]},"commit2Childs":{"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","925fce43f3bac029d912b9b7de03c789e258a333"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","034996547ca41c5004216fdd0178acbf06438da2"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"034996547ca41c5004216fdd0178acbf06438da2":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"],"925fce43f3bac029d912b9b7de03c789e258a333":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}