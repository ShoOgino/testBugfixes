{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#setMergeFactor(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#setMergeFactor(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#setMergeFactor(int).mjava","sourceNew":"  /** Determines how often segment indices are merged by addDocument().  With\n   * smaller values, less RAM is used while indexing, and searches on\n   * unoptimized indices are faster, but indexing speed is slower.  With larger\n   * values, more RAM is used during indexing, and while searches on unoptimized\n   * indices are slower, indexing is faster.  Thus larger values (> 10) are best\n   * for batch index creation, and smaller values (< 10) for indices that are\n   * interactively maintained.\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.setMergeFactor as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * <p>This must never be less than 2.  The default value is 10.\n   * @deprecated use {@link LogMergePolicy#setMergeFactor(int)} directly.\n   */\n  public void setMergeFactor(int mergeFactor) {\n    getLogMergePolicy().setMergeFactor(mergeFactor);\n  }\n\n","sourceOld":"  /** Determines how often segment indices are merged by addDocument().  With\n   * smaller values, less RAM is used while indexing, and searches on\n   * unoptimized indices are faster, but indexing speed is slower.  With larger\n   * values, more RAM is used during indexing, and while searches on unoptimized\n   * indices are slower, indexing is faster.  Thus larger values (> 10) are best\n   * for batch index creation, and smaller values (< 10) for indices that are\n   * interactively maintained.\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.setMergeFactor as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * <p>This must never be less than 2.  The default value is 10.\n   * @deprecated use {@link LogMergePolicy#setMergeFactor(int)} directly.\n   */\n  public void setMergeFactor(int mergeFactor) {\n    getLogMergePolicy().setMergeFactor(mergeFactor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"068265517d1fbc623f5aeaee57fcd8df925678e4","date":1286043654,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#setMergeFactor(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#setMergeFactor(int).mjava","sourceNew":"  /** Determines how often segment indices are merged by addDocument().  With\n   * smaller values, less RAM is used while indexing, and searches on\n   * unoptimized indices are faster, but indexing speed is slower.  With larger\n   * values, more RAM is used during indexing, and while searches on unoptimized\n   * indices are slower, indexing is faster.  Thus larger values (> 10) are best\n   * for batch index creation, and smaller values (< 10) for indices that are\n   * interactively maintained.\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.setMergeFactor as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * <p>This must never be less than 2.  The default value is 10.\n   * @deprecated use {@link LogMergePolicy#setMergeFactor(int)} directly.\n   */\n  @Deprecated\n  public void setMergeFactor(int mergeFactor) {\n    getLogMergePolicy().setMergeFactor(mergeFactor);\n  }\n\n","sourceOld":"  /** Determines how often segment indices are merged by addDocument().  With\n   * smaller values, less RAM is used while indexing, and searches on\n   * unoptimized indices are faster, but indexing speed is slower.  With larger\n   * values, more RAM is used during indexing, and while searches on unoptimized\n   * indices are slower, indexing is faster.  Thus larger values (> 10) are best\n   * for batch index creation, and smaller values (< 10) for indices that are\n   * interactively maintained.\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.setMergeFactor as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * <p>This must never be less than 2.  The default value is 10.\n   * @deprecated use {@link LogMergePolicy#setMergeFactor(int)} directly.\n   */\n  public void setMergeFactor(int mergeFactor) {\n    getLogMergePolicy().setMergeFactor(mergeFactor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#setMergeFactor(int).mjava","sourceNew":null,"sourceOld":"  /** Determines how often segment indices are merged by addDocument().  With\n   * smaller values, less RAM is used while indexing, and searches on\n   * unoptimized indices are faster, but indexing speed is slower.  With larger\n   * values, more RAM is used during indexing, and while searches on unoptimized\n   * indices are slower, indexing is faster.  Thus larger values (> 10) are best\n   * for batch index creation, and smaller values (< 10) for indices that are\n   * interactively maintained.\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.setMergeFactor as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * <p>This must never be less than 2.  The default value is 10.\n   * @deprecated use {@link LogMergePolicy#setMergeFactor(int)} directly.\n   */\n  @Deprecated\n  public void setMergeFactor(int mergeFactor) {\n    getLogMergePolicy().setMergeFactor(mergeFactor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#setMergeFactor(int).mjava","sourceNew":null,"sourceOld":"  /** Determines how often segment indices are merged by addDocument().  With\n   * smaller values, less RAM is used while indexing, and searches on\n   * unoptimized indices are faster, but indexing speed is slower.  With larger\n   * values, more RAM is used during indexing, and while searches on unoptimized\n   * indices are slower, indexing is faster.  Thus larger values (> 10) are best\n   * for batch index creation, and smaller values (< 10) for indices that are\n   * interactively maintained.\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.setMergeFactor as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * <p>This must never be less than 2.  The default value is 10.\n   * @deprecated use {@link LogMergePolicy#setMergeFactor(int)} directly.\n   */\n  @Deprecated\n  public void setMergeFactor(int mergeFactor) {\n    getLogMergePolicy().setMergeFactor(mergeFactor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#setMergeFactor(int).mjava","sourceNew":null,"sourceOld":"  /** Determines how often segment indices are merged by addDocument().  With\n   * smaller values, less RAM is used while indexing, and searches on\n   * unoptimized indices are faster, but indexing speed is slower.  With larger\n   * values, more RAM is used during indexing, and while searches on unoptimized\n   * indices are slower, indexing is faster.  Thus larger values (> 10) are best\n   * for batch index creation, and smaller values (< 10) for indices that are\n   * interactively maintained.\n   *\n   * <p>Note that this method is a convenience method: it\n   * just calls mergePolicy.setMergeFactor as long as\n   * mergePolicy is an instance of {@link LogMergePolicy}.\n   * Otherwise an IllegalArgumentException is thrown.</p>\n   *\n   * <p>This must never be less than 2.  The default value is 10.\n   * @deprecated use {@link LogMergePolicy#setMergeFactor(int)} directly.\n   */\n  public void setMergeFactor(int mergeFactor) {\n    getLogMergePolicy().setMergeFactor(mergeFactor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"068265517d1fbc623f5aeaee57fcd8df925678e4":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["068265517d1fbc623f5aeaee57fcd8df925678e4","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["068265517d1fbc623f5aeaee57fcd8df925678e4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"068265517d1fbc623f5aeaee57fcd8df925678e4":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["068265517d1fbc623f5aeaee57fcd8df925678e4","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}