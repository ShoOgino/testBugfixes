{"path":"src/lucene_extras/org/apache/lucene/analysis/TestSynonymFilter#testMapMerge().mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/lucene_extras/org/apache/lucene/analysis/TestSynonymFilter#testMapMerge().mjava","pathOld":"/dev/null","sourceNew":"  public void testMapMerge() throws IOException {\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n    map.add(strings(\"a\"), tokens(\"a5,5\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"a3,3\"), orig, merge);\n    // System.out.println(map);\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"a3 a5,2\"));\n\n    map.add(strings(\"b\"), tokens(\"b3,3\"), orig, merge);\n    map.add(strings(\"b\"), tokens(\"b5,5\"), orig, merge);\n    //System.out.println(map);\n    assertTokEqual(getTokList(map,\"b\",false), tokens(\"b3 b5,2\"));\n\n\n    map.add(strings(\"a\"), tokens(\"A3,3\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"A5,5\"), orig, merge);\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"a3/A3 a5,2/A5\"));\n\n    map.add(strings(\"a\"), tokens(\"a1\"), orig, merge);\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"a1 a3,2/A3 a5,2/A5\"));\n\n    map.add(strings(\"a\"), tokens(\"a2,2\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"a4,4 a6,2\"), orig, merge);\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"a1 a2 a3/A3 a4 a5/A5 a6\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4494badf9b14fe0d151e58b627ae27bb543278b","date":1138579258,"type":4,"author":"Yoav Shapira","isMerge":false,"pathNew":"/dev/null","pathOld":"src/lucene_extras/org/apache/lucene/analysis/TestSynonymFilter#testMapMerge().mjava","sourceNew":null,"sourceOld":"  public void testMapMerge() throws IOException {\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n    map.add(strings(\"a\"), tokens(\"a5,5\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"a3,3\"), orig, merge);\n    // System.out.println(map);\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"a3 a5,2\"));\n\n    map.add(strings(\"b\"), tokens(\"b3,3\"), orig, merge);\n    map.add(strings(\"b\"), tokens(\"b5,5\"), orig, merge);\n    //System.out.println(map);\n    assertTokEqual(getTokList(map,\"b\",false), tokens(\"b3 b5,2\"));\n\n\n    map.add(strings(\"a\"), tokens(\"A3,3\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"A5,5\"), orig, merge);\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"a3/A3 a5,2/A5\"));\n\n    map.add(strings(\"a\"), tokens(\"a1\"), orig, merge);\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"a1 a3,2/A3 a5,2/A5\"));\n\n    map.add(strings(\"a\"), tokens(\"a2,2\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"a4,4 a6,2\"), orig, merge);\n    assertTokEqual(getTokList(map,\"a\",false), tokens(\"a1 a2 a3/A3 a4 a5/A5 a6\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"d4494badf9b14fe0d151e58b627ae27bb543278b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["d4494badf9b14fe0d151e58b627ae27bb543278b"],"d4494badf9b14fe0d151e58b627ae27bb543278b":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d4494badf9b14fe0d151e58b627ae27bb543278b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}