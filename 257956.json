{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#addStopWords(IndexReader,float).mjava","commits":[{"id":"79b567157855b86f9f11384706e3d2a5544660ce","date":1202393618,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#addStopWords(IndexReader,float).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Automatically adds stop words for all fields with terms exceeding the maxDocFreqPercent\n   *\n   * @param reader        The IndexReader class which will be consulted to identify potential stop words that\n   *                      exceed the required document frequency\n   * @param maxPercentDocs The maximum percentage (between 0.0 and 1.0) of index documents which\n   *                      contain a term, after which the word is considered to be a stop word.\n   * @return The number of stop words identified.\n   * @throws IOException\n   */\n  public int addStopWords(IndexReader reader, float maxPercentDocs) throws IOException {\n    int numStopWords = 0;\n    Collection fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n    for (Iterator iter = fieldNames.iterator(); iter.hasNext();) {\n      String fieldName = (String) iter.next();\n      numStopWords += addStopWords(reader, fieldName, maxPercentDocs);\n    }\n    return numStopWords;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#addStopWords(IndexReader,float).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#addStopWords(IndexReader,float).mjava","sourceNew":"  /**\n   * Automatically adds stop words for all fields with terms exceeding the maxDocFreqPercent\n   *\n   * @param reader        The IndexReader class which will be consulted to identify potential stop words that\n   *                      exceed the required document frequency\n   * @param maxPercentDocs The maximum percentage (between 0.0 and 1.0) of index documents which\n   *                      contain a term, after which the word is considered to be a stop word.\n   * @return The number of stop words identified.\n   * @throws IOException\n   */\n  public int addStopWords(IndexReader reader, float maxPercentDocs) throws IOException {\n    int numStopWords = 0;\n    Collection fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n    for (Iterator iter = fieldNames.iterator(); iter.hasNext();) {\n      String fieldName = (String) iter.next();\n      numStopWords += addStopWords(reader, fieldName, maxPercentDocs);\n    }\n    return numStopWords;\n  }\n\n","sourceOld":"  /**\n   * Automatically adds stop words for all fields with terms exceeding the maxDocFreqPercent\n   *\n   * @param reader        The IndexReader class which will be consulted to identify potential stop words that\n   *                      exceed the required document frequency\n   * @param maxPercentDocs The maximum percentage (between 0.0 and 1.0) of index documents which\n   *                      contain a term, after which the word is considered to be a stop word.\n   * @return The number of stop words identified.\n   * @throws IOException\n   */\n  public int addStopWords(IndexReader reader, float maxPercentDocs) throws IOException {\n    int numStopWords = 0;\n    Collection fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);\n    for (Iterator iter = fieldNames.iterator(); iter.hasNext();) {\n      String fieldName = (String) iter.next();\n      numStopWords += addStopWords(reader, fieldName, maxPercentDocs);\n    }\n    return numStopWords;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["79b567157855b86f9f11384706e3d2a5544660ce"],"79b567157855b86f9f11384706e3d2a5544660ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"79b567157855b86f9f11384706e3d2a5544660ce":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["79b567157855b86f9f11384706e3d2a5544660ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}