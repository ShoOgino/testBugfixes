{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanOr#scorer(int...).mjava","commits":[{"id":"e166cc9c5f45f78a8dd02332b5ac100221063fd8","date":1421678965,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanOr#scorer(int...).mjava","pathOld":"/dev/null","sourceNew":"  private static BulkScorer scorer(int... matches) {\n    return new BulkScorer() {\n      final FakeScorer scorer = new FakeScorer();\n      int i = 0;\n      @Override\n      public int score(LeafCollector collector, int min, int max) throws IOException {\n        collector.setScorer(scorer);\n        while (i < matches.length && matches[i] < min) {\n          i += 1;\n        }\n        while (i < matches.length && matches[i] < max) {\n          scorer.doc = matches[i];\n          collector.collect(scorer.doc);\n          i += 1;\n        }\n        if (i == matches.length) {\n          return DocIdSetIterator.NO_MORE_DOCS;\n        }\n        return RandomInts.randomIntBetween(random(), max, matches[i]);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251e6911800e3a02e1da3bfd4dc49a914aef9778","date":1423063783,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanOr#scorer(int...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanOr#scorer(int...).mjava","sourceNew":"  private static BulkScorer scorer(int... matches) {\n    return new BulkScorer() {\n      final FakeScorer scorer = new FakeScorer();\n      int i = 0;\n      @Override\n      public int score(LeafCollector collector, int min, int max) throws IOException {\n        collector.setScorer(scorer);\n        while (i < matches.length && matches[i] < min) {\n          i += 1;\n        }\n        while (i < matches.length && matches[i] < max) {\n          scorer.doc = matches[i];\n          collector.collect(scorer.doc);\n          i += 1;\n        }\n        if (i == matches.length) {\n          return DocIdSetIterator.NO_MORE_DOCS;\n        }\n        return RandomInts.randomIntBetween(random(), max, matches[i]);\n      }\n      @Override\n      public long cost() {\n        return matches.length;\n      }\n    };\n  }\n\n","sourceOld":"  private static BulkScorer scorer(int... matches) {\n    return new BulkScorer() {\n      final FakeScorer scorer = new FakeScorer();\n      int i = 0;\n      @Override\n      public int score(LeafCollector collector, int min, int max) throws IOException {\n        collector.setScorer(scorer);\n        while (i < matches.length && matches[i] < min) {\n          i += 1;\n        }\n        while (i < matches.length && matches[i] < max) {\n          scorer.doc = matches[i];\n          collector.collect(scorer.doc);\n          i += 1;\n        }\n        if (i == matches.length) {\n          return DocIdSetIterator.NO_MORE_DOCS;\n        }\n        return RandomInts.randomIntBetween(random(), max, matches[i]);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanOr#scorer(int...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanOr#scorer(int...).mjava","sourceNew":"  private static BulkScorer scorer(int... matches) {\n    return new BulkScorer() {\n      final FakeScorer scorer = new FakeScorer();\n      int i = 0;\n      @Override\n      public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n        collector.setScorer(scorer);\n        while (i < matches.length && matches[i] < min) {\n          i += 1;\n        }\n        while (i < matches.length && matches[i] < max) {\n          scorer.doc = matches[i];\n          if (acceptDocs == null || acceptDocs.get(scorer.doc)) {\n            collector.collect(scorer.doc);\n          }\n          i += 1;\n        }\n        if (i == matches.length) {\n          return DocIdSetIterator.NO_MORE_DOCS;\n        }\n        return RandomInts.randomIntBetween(random(), max, matches[i]);\n      }\n      @Override\n      public long cost() {\n        return matches.length;\n      }\n    };\n  }\n\n","sourceOld":"  private static BulkScorer scorer(int... matches) {\n    return new BulkScorer() {\n      final FakeScorer scorer = new FakeScorer();\n      int i = 0;\n      @Override\n      public int score(LeafCollector collector, int min, int max) throws IOException {\n        collector.setScorer(scorer);\n        while (i < matches.length && matches[i] < min) {\n          i += 1;\n        }\n        while (i < matches.length && matches[i] < max) {\n          scorer.doc = matches[i];\n          collector.collect(scorer.doc);\n          i += 1;\n        }\n        if (i == matches.length) {\n          return DocIdSetIterator.NO_MORE_DOCS;\n        }\n        return RandomInts.randomIntBetween(random(), max, matches[i]);\n      }\n      @Override\n      public long cost() {\n        return matches.length;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6448f67be45147de82a85cd903fec34e8930da75","date":1477041277,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanOr#scorer(int...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanOr#scorer(int...).mjava","sourceNew":"  private static BulkScorer scorer(int... matches) {\n    return new BulkScorer() {\n      final FakeScorer scorer = new FakeScorer();\n      int i = 0;\n      @Override\n      public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n        collector.setScorer(scorer);\n        while (i < matches.length && matches[i] < min) {\n          i += 1;\n        }\n        while (i < matches.length && matches[i] < max) {\n          scorer.doc = matches[i];\n          if (acceptDocs == null || acceptDocs.get(scorer.doc)) {\n            collector.collect(scorer.doc);\n          }\n          i += 1;\n        }\n        if (i == matches.length) {\n          return DocIdSetIterator.NO_MORE_DOCS;\n        }\n        return RandomNumbers.randomIntBetween(random(), max, matches[i]);\n      }\n      @Override\n      public long cost() {\n        return matches.length;\n      }\n    };\n  }\n\n","sourceOld":"  private static BulkScorer scorer(int... matches) {\n    return new BulkScorer() {\n      final FakeScorer scorer = new FakeScorer();\n      int i = 0;\n      @Override\n      public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n        collector.setScorer(scorer);\n        while (i < matches.length && matches[i] < min) {\n          i += 1;\n        }\n        while (i < matches.length && matches[i] < max) {\n          scorer.doc = matches[i];\n          if (acceptDocs == null || acceptDocs.get(scorer.doc)) {\n            collector.collect(scorer.doc);\n          }\n          i += 1;\n        }\n        if (i == matches.length) {\n          return DocIdSetIterator.NO_MORE_DOCS;\n        }\n        return RandomInts.randomIntBetween(random(), max, matches[i]);\n      }\n      @Override\n      public long cost() {\n        return matches.length;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanOr#scorer(int...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanOr#scorer(int...).mjava","sourceNew":"  private static BulkScorer scorer(int... matches) {\n    return new BulkScorer() {\n      final FakeScorer scorer = new FakeScorer();\n      int i = 0;\n      @Override\n      public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n        collector.setScorer(scorer);\n        while (i < matches.length && matches[i] < min) {\n          i += 1;\n        }\n        while (i < matches.length && matches[i] < max) {\n          scorer.doc = matches[i];\n          if (acceptDocs == null || acceptDocs.get(scorer.doc)) {\n            collector.collect(scorer.doc);\n          }\n          i += 1;\n        }\n        if (i == matches.length) {\n          return DocIdSetIterator.NO_MORE_DOCS;\n        }\n        return RandomNumbers.randomIntBetween(random(), max, matches[i]);\n      }\n      @Override\n      public long cost() {\n        return matches.length;\n      }\n    };\n  }\n\n","sourceOld":"  private static BulkScorer scorer(int... matches) {\n    return new BulkScorer() {\n      final FakeScorer scorer = new FakeScorer();\n      int i = 0;\n      @Override\n      public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n        collector.setScorer(scorer);\n        while (i < matches.length && matches[i] < min) {\n          i += 1;\n        }\n        while (i < matches.length && matches[i] < max) {\n          scorer.doc = matches[i];\n          if (acceptDocs == null || acceptDocs.get(scorer.doc)) {\n            collector.collect(scorer.doc);\n          }\n          i += 1;\n        }\n        if (i == matches.length) {\n          return DocIdSetIterator.NO_MORE_DOCS;\n        }\n        return RandomInts.randomIntBetween(random(), max, matches[i]);\n      }\n      @Override\n      public long cost() {\n        return matches.length;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","date":1536316907,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanOr#scorer(int...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanOr#scorer(int...).mjava","sourceNew":"  private static BulkScorer scorer(int... matches) {\n    return new BulkScorer() {\n      final ScoreAndDoc scorer = new ScoreAndDoc();\n      int i = 0;\n      @Override\n      public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n        collector.setScorer(scorer);\n        while (i < matches.length && matches[i] < min) {\n          i += 1;\n        }\n        while (i < matches.length && matches[i] < max) {\n          scorer.doc = matches[i];\n          if (acceptDocs == null || acceptDocs.get(scorer.doc)) {\n            collector.collect(scorer.doc);\n          }\n          i += 1;\n        }\n        if (i == matches.length) {\n          return DocIdSetIterator.NO_MORE_DOCS;\n        }\n        return RandomNumbers.randomIntBetween(random(), max, matches[i]);\n      }\n      @Override\n      public long cost() {\n        return matches.length;\n      }\n    };\n  }\n\n","sourceOld":"  private static BulkScorer scorer(int... matches) {\n    return new BulkScorer() {\n      final FakeScorer scorer = new FakeScorer();\n      int i = 0;\n      @Override\n      public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n        collector.setScorer(scorer);\n        while (i < matches.length && matches[i] < min) {\n          i += 1;\n        }\n        while (i < matches.length && matches[i] < max) {\n          scorer.doc = matches[i];\n          if (acceptDocs == null || acceptDocs.get(scorer.doc)) {\n            collector.collect(scorer.doc);\n          }\n          i += 1;\n        }\n        if (i == matches.length) {\n          return DocIdSetIterator.NO_MORE_DOCS;\n        }\n        return RandomNumbers.randomIntBetween(random(), max, matches[i]);\n      }\n      @Override\n      public long cost() {\n        return matches.length;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"251e6911800e3a02e1da3bfd4dc49a914aef9778":["e166cc9c5f45f78a8dd02332b5ac100221063fd8"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"e166cc9c5f45f78a8dd02332b5ac100221063fd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6448f67be45147de82a85cd903fec34e8930da75":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["0f4464508ee83288c8c4585b533f9faaa93aa314","6448f67be45147de82a85cd903fec34e8930da75"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["6448f67be45147de82a85cd903fec34e8930da75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"]},"commit2Childs":{"251e6911800e3a02e1da3bfd4dc49a914aef9778":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"e166cc9c5f45f78a8dd02332b5ac100221063fd8":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["6448f67be45147de82a85cd903fec34e8930da75","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e166cc9c5f45f78a8dd02332b5ac100221063fd8"],"6448f67be45147de82a85cd903fec34e8930da75":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}