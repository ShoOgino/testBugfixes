{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T],boolean,float,boolean,int).mjava","commits":[{"id":"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","date":1358188277,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T],boolean,float,boolean,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T],boolean,float,boolean).mjava","sourceNew":"  // make a new empty FST, for building; Builder invokes\n  // this ctor\n  FST(INPUT_TYPE inputType, Outputs<T> outputs, boolean willPackFST, float acceptableOverheadRatio, boolean allowArrayArcs, int bytesPageBits) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    this.allowArrayArcs = allowArrayArcs;\n    version = VERSION_CURRENT;\n    // 32 KB blocks:\n    bytes = new BytesStore(bytesPageBits);\n    // pad: ensure no node gets address 0 which is reserved to mean\n    // the stop state w/ no arcs\n    bytes.writeByte((byte) 0);\n    NO_OUTPUT = outputs.getNoOutput();\n    if (willPackFST) {\n      nodeAddress = new GrowableWriter(15, 8, acceptableOverheadRatio);\n      inCounts = new GrowableWriter(1, 8, acceptableOverheadRatio);\n    } else {\n      nodeAddress = null;\n      inCounts = null;\n    }\n\n    emptyOutput = null;\n    packed = false;\n    nodeRefToAddress = null;\n  }\n\n","sourceOld":"  // make a new empty FST, for building; Builder invokes\n  // this ctor\n  FST(INPUT_TYPE inputType, Outputs<T> outputs, boolean willPackFST, float acceptableOverheadRatio, boolean allowArrayArcs) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    this.allowArrayArcs = allowArrayArcs;\n    version = VERSION_CURRENT;\n    // 32 KB blocks:\n    bytes = new BytesStore(15);\n    // pad: ensure no node gets address 0 which is reserved to mean\n    // the stop state w/ no arcs\n    bytes.writeByte((byte) 0);\n    NO_OUTPUT = outputs.getNoOutput();\n    if (willPackFST) {\n      nodeAddress = new GrowableWriter(15, 8, acceptableOverheadRatio);\n      inCounts = new GrowableWriter(1, 8, acceptableOverheadRatio);\n    } else {\n      nodeAddress = null;\n      inCounts = null;\n    }\n\n    emptyOutput = null;\n    packed = false;\n    nodeRefToAddress = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T],boolean,float,boolean,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T],boolean,float,boolean).mjava","sourceNew":"  // make a new empty FST, for building; Builder invokes\n  // this ctor\n  FST(INPUT_TYPE inputType, Outputs<T> outputs, boolean willPackFST, float acceptableOverheadRatio, boolean allowArrayArcs, int bytesPageBits) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    this.allowArrayArcs = allowArrayArcs;\n    version = VERSION_CURRENT;\n    // 32 KB blocks:\n    bytes = new BytesStore(bytesPageBits);\n    // pad: ensure no node gets address 0 which is reserved to mean\n    // the stop state w/ no arcs\n    bytes.writeByte((byte) 0);\n    NO_OUTPUT = outputs.getNoOutput();\n    if (willPackFST) {\n      nodeAddress = new GrowableWriter(15, 8, acceptableOverheadRatio);\n      inCounts = new GrowableWriter(1, 8, acceptableOverheadRatio);\n    } else {\n      nodeAddress = null;\n      inCounts = null;\n    }\n\n    emptyOutput = null;\n    packed = false;\n    nodeRefToAddress = null;\n  }\n\n","sourceOld":"  // make a new empty FST, for building; Builder invokes\n  // this ctor\n  FST(INPUT_TYPE inputType, Outputs<T> outputs, boolean willPackFST, float acceptableOverheadRatio, boolean allowArrayArcs) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    this.allowArrayArcs = allowArrayArcs;\n    bytes = new byte[128];\n    NO_OUTPUT = outputs.getNoOutput();\n    if (willPackFST) {\n      nodeAddress = new GrowableWriter(PackedInts.bitsRequired(bytes.length - 1), 8, acceptableOverheadRatio);\n      inCounts = new GrowableWriter(1, 8, acceptableOverheadRatio);\n    } else {\n      nodeAddress = null;\n      inCounts = null;\n    }\n    \n    writer = new DefaultBytesWriter();\n\n    emptyOutput = null;\n    packed = false;\n    nodeRefToAddress = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"651a27b35167c2ea81f87f4749722e52b7d5b750","date":1359669118,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T],boolean,float,boolean,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T],boolean,float,boolean,int).mjava","sourceNew":"  // make a new empty FST, for building; Builder invokes\n  // this ctor\n  FST(INPUT_TYPE inputType, Outputs<T> outputs, boolean willPackFST, float acceptableOverheadRatio, boolean allowArrayArcs, int bytesPageBits) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    this.allowArrayArcs = allowArrayArcs;\n    version = VERSION_CURRENT;\n    bytes = new BytesStore(bytesPageBits);\n    // pad: ensure no node gets address 0 which is reserved to mean\n    // the stop state w/ no arcs\n    bytes.writeByte((byte) 0);\n    NO_OUTPUT = outputs.getNoOutput();\n    if (willPackFST) {\n      nodeAddress = new GrowableWriter(15, 8, acceptableOverheadRatio);\n      inCounts = new GrowableWriter(1, 8, acceptableOverheadRatio);\n    } else {\n      nodeAddress = null;\n      inCounts = null;\n    }\n\n    emptyOutput = null;\n    packed = false;\n    nodeRefToAddress = null;\n  }\n\n","sourceOld":"  // make a new empty FST, for building; Builder invokes\n  // this ctor\n  FST(INPUT_TYPE inputType, Outputs<T> outputs, boolean willPackFST, float acceptableOverheadRatio, boolean allowArrayArcs, int bytesPageBits) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    this.allowArrayArcs = allowArrayArcs;\n    version = VERSION_CURRENT;\n    // 32 KB blocks:\n    bytes = new BytesStore(bytesPageBits);\n    // pad: ensure no node gets address 0 which is reserved to mean\n    // the stop state w/ no arcs\n    bytes.writeByte((byte) 0);\n    NO_OUTPUT = outputs.getNoOutput();\n    if (willPackFST) {\n      nodeAddress = new GrowableWriter(15, 8, acceptableOverheadRatio);\n      inCounts = new GrowableWriter(1, 8, acceptableOverheadRatio);\n    } else {\n      nodeAddress = null;\n      inCounts = null;\n    }\n\n    emptyOutput = null;\n    packed = false;\n    nodeRefToAddress = null;\n  }\n\n","bugFix":["87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86","date":1359670147,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T],boolean,float,boolean,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T],boolean,float,boolean,int).mjava","sourceNew":"  // make a new empty FST, for building; Builder invokes\n  // this ctor\n  FST(INPUT_TYPE inputType, Outputs<T> outputs, boolean willPackFST, float acceptableOverheadRatio, boolean allowArrayArcs, int bytesPageBits) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    this.allowArrayArcs = allowArrayArcs;\n    version = VERSION_CURRENT;\n    bytes = new BytesStore(bytesPageBits);\n    // pad: ensure no node gets address 0 which is reserved to mean\n    // the stop state w/ no arcs\n    bytes.writeByte((byte) 0);\n    NO_OUTPUT = outputs.getNoOutput();\n    if (willPackFST) {\n      nodeAddress = new GrowableWriter(15, 8, acceptableOverheadRatio);\n      inCounts = new GrowableWriter(1, 8, acceptableOverheadRatio);\n    } else {\n      nodeAddress = null;\n      inCounts = null;\n    }\n\n    emptyOutput = null;\n    packed = false;\n    nodeRefToAddress = null;\n  }\n\n","sourceOld":"  // make a new empty FST, for building; Builder invokes\n  // this ctor\n  FST(INPUT_TYPE inputType, Outputs<T> outputs, boolean willPackFST, float acceptableOverheadRatio, boolean allowArrayArcs, int bytesPageBits) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    this.allowArrayArcs = allowArrayArcs;\n    version = VERSION_CURRENT;\n    // 32 KB blocks:\n    bytes = new BytesStore(bytesPageBits);\n    // pad: ensure no node gets address 0 which is reserved to mean\n    // the stop state w/ no arcs\n    bytes.writeByte((byte) 0);\n    NO_OUTPUT = outputs.getNoOutput();\n    if (willPackFST) {\n      nodeAddress = new GrowableWriter(15, 8, acceptableOverheadRatio);\n      inCounts = new GrowableWriter(1, 8, acceptableOverheadRatio);\n    } else {\n      nodeAddress = null;\n      inCounts = null;\n    }\n\n    emptyOutput = null;\n    packed = false;\n    nodeRefToAddress = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1abb939fb41b2fe4f89fd518f3da288c0213341d","date":1435657417,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T],boolean,float,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T],boolean,float,boolean,int).mjava","sourceNew":"  // make a new empty FST, for building; Builder invokes\n  // this ctor\n  FST(INPUT_TYPE inputType, Outputs<T> outputs, boolean willPackFST, float acceptableOverheadRatio, int bytesPageBits) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    version = VERSION_CURRENT;\n    bytesArray = null;\n    bytes = new BytesStore(bytesPageBits);\n    // pad: ensure no node gets address 0 which is reserved to mean\n    // the stop state w/ no arcs\n    bytes.writeByte((byte) 0);\n    if (willPackFST) {\n      nodeAddress = new GrowableWriter(15, 8, acceptableOverheadRatio);\n      inCounts = new GrowableWriter(1, 8, acceptableOverheadRatio);\n    } else {\n      nodeAddress = null;\n      inCounts = null;\n    }\n\n    emptyOutput = null;\n    packed = false;\n    nodeRefToAddress = null;\n  }\n\n","sourceOld":"  // make a new empty FST, for building; Builder invokes\n  // this ctor\n  FST(INPUT_TYPE inputType, Outputs<T> outputs, boolean willPackFST, float acceptableOverheadRatio, boolean allowArrayArcs, int bytesPageBits) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    this.allowArrayArcs = allowArrayArcs;\n    version = VERSION_CURRENT;\n    bytes = new BytesStore(bytesPageBits);\n    // pad: ensure no node gets address 0 which is reserved to mean\n    // the stop state w/ no arcs\n    bytes.writeByte((byte) 0);\n    NO_OUTPUT = outputs.getNoOutput();\n    if (willPackFST) {\n      nodeAddress = new GrowableWriter(15, 8, acceptableOverheadRatio);\n      inCounts = new GrowableWriter(1, 8, acceptableOverheadRatio);\n    } else {\n      nodeAddress = null;\n      inCounts = null;\n    }\n\n    emptyOutput = null;\n    packed = false;\n    nodeRefToAddress = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1abb939fb41b2fe4f89fd518f3da288c0213341d":["651a27b35167c2ea81f87f4749722e52b7d5b750"],"b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86":["8917bfede3b4ca30f4305c1e391e9218959cd723","651a27b35167c2ea81f87f4749722e52b7d5b750"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"651a27b35167c2ea81f87f4749722e52b7d5b750":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1abb939fb41b2fe4f89fd518f3da288c0213341d"]},"commit2Childs":{"1abb939fb41b2fe4f89fd518f3da288c0213341d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86":[],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["8917bfede3b4ca30f4305c1e391e9218959cd723","651a27b35167c2ea81f87f4749722e52b7d5b750"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","8917bfede3b4ca30f4305c1e391e9218959cd723"],"651a27b35167c2ea81f87f4749722e52b7d5b750":["1abb939fb41b2fe4f89fd518f3da288c0213341d","b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}