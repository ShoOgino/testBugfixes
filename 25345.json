{"path":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testWithExceptions().mjava","commits":[{"id":"e3ce1ef883d26aa73919aa2d53991726e96caa13","date":1445421402,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testWithExceptions().mjava","pathOld":"/dev/null","sourceNew":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    double maxMBHeap = 0.05;\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          if (dir instanceof MockDirectoryWrapper) {\n            dir.setEnableVirusScanner(false);\n          }\n          verify(dir, docValues, null, numDims, numBytesPerDim, 50, maxMBHeap);\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n          System.out.println(\"  more heap\");\n          maxMBHeap *= 1.25;\n        } catch (IOException ioe) {\n          if (ioe.getMessage().contains(\"a random IOException\")) {\n            // BKDWriter should fully clean up after itself:\n            done = true;\n          } else {\n            throw ioe;\n          }\n        }\n\n        String[] files = dir.listAll();\n        assertTrue(\"files=\" + Arrays.toString(files), files.length == 0 || Arrays.equals(files, new String[] {\"extra0\"}));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testWithExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testWithExceptions().mjava","sourceNew":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    double maxMBHeap = 0.05;\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          if (dir instanceof MockDirectoryWrapper) {\n            dir.setEnableVirusScanner(false);\n          }\n          verify(dir, docValues, null, numDims, numBytesPerDim, 50, maxMBHeap);\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n          maxMBHeap *= 1.25;\n        } catch (IOException ioe) {\n          if (ioe.getMessage().contains(\"a random IOException\")) {\n            // BKDWriter should fully clean up after itself:\n            done = true;\n          } else {\n            throw ioe;\n          }\n        }\n\n        String[] files = dir.listAll();\n        assertTrue(\"files=\" + Arrays.toString(files), files.length == 0 || Arrays.equals(files, new String[] {\"extra0\"}));\n      }\n    }\n  }\n\n","sourceOld":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    double maxMBHeap = 0.05;\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          if (dir instanceof MockDirectoryWrapper) {\n            dir.setEnableVirusScanner(false);\n          }\n          verify(dir, docValues, null, numDims, numBytesPerDim, 50, maxMBHeap);\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n          System.out.println(\"  more heap\");\n          maxMBHeap *= 1.25;\n        } catch (IOException ioe) {\n          if (ioe.getMessage().contains(\"a random IOException\")) {\n            // BKDWriter should fully clean up after itself:\n            done = true;\n          } else {\n            throw ioe;\n          }\n        }\n\n        String[] files = dir.listAll();\n        assertTrue(\"files=\" + Arrays.toString(files), files.length == 0 || Arrays.equals(files, new String[] {\"extra0\"}));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testWithExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testWithExceptions().mjava","sourceNew":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    double maxMBHeap = 0.05;\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          verify(dir, docValues, null, numDims, numBytesPerDim, 50, maxMBHeap);\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n          maxMBHeap *= 1.25;\n        } catch (IOException ioe) {\n          if (ioe.getMessage().contains(\"a random IOException\")) {\n            // BKDWriter should fully clean up after itself:\n            done = true;\n          } else {\n            throw ioe;\n          }\n        }\n\n        String[] files = dir.listAll();\n        assertTrue(\"files=\" + Arrays.toString(files), files.length == 0 || Arrays.equals(files, new String[] {\"extra0\"}));\n      }\n    }\n  }\n\n","sourceOld":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    double maxMBHeap = 0.05;\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          if (dir instanceof MockDirectoryWrapper) {\n            dir.setEnableVirusScanner(false);\n          }\n          verify(dir, docValues, null, numDims, numBytesPerDim, 50, maxMBHeap);\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n          maxMBHeap *= 1.25;\n        } catch (IOException ioe) {\n          if (ioe.getMessage().contains(\"a random IOException\")) {\n            // BKDWriter should fully clean up after itself:\n            done = true;\n          } else {\n            throw ioe;\n          }\n        }\n\n        String[] files = dir.listAll();\n        assertTrue(\"files=\" + Arrays.toString(files), files.length == 0 || Arrays.equals(files, new String[] {\"extra0\"}));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testWithExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testWithExceptions().mjava","sourceNew":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    double maxMBHeap = 0.05;\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          verify(dir, docValues, null, numDims, numBytesPerDim, 50, maxMBHeap);\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n          maxMBHeap *= 1.25;\n        } catch (IOException ioe) {\n          if (ioe.getMessage().contains(\"a random IOException\")) {\n            // BKDWriter should fully clean up after itself:\n            done = true;\n          } else {\n            throw ioe;\n          }\n        }\n\n        String[] files = dir.listAll();\n        assertTrue(\"files=\" + Arrays.toString(files), files.length == 0 || Arrays.equals(files, new String[] {\"extra0\"}));\n      }\n    }\n  }\n\n","sourceOld":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    double maxMBHeap = 0.05;\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          if (dir instanceof MockDirectoryWrapper) {\n            dir.setEnableVirusScanner(false);\n          }\n          verify(dir, docValues, null, numDims, numBytesPerDim, 50, maxMBHeap);\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n          maxMBHeap *= 1.25;\n        } catch (IOException ioe) {\n          if (ioe.getMessage().contains(\"a random IOException\")) {\n            // BKDWriter should fully clean up after itself:\n            done = true;\n          } else {\n            throw ioe;\n          }\n        }\n\n        String[] files = dir.listAll();\n        assertTrue(\"files=\" + Arrays.toString(files), files.length == 0 || Arrays.equals(files, new String[] {\"extra0\"}));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testWithExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testWithExceptions().mjava","sourceNew":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    double maxMBHeap = 0.05;\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          verify(dir, docValues, null, numDims, numBytesPerDim, 50, maxMBHeap);\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n          maxMBHeap *= 1.25;\n        } catch (IOException ioe) {\n          if (ioe.getMessage().contains(\"a random IOException\")) {\n            // BKDWriter should fully clean up after itself:\n            done = true;\n          } else {\n            throw ioe;\n          }\n        }\n\n        String[] files = dir.listAll();\n        assertTrue(\"files=\" + Arrays.toString(files), files.length == 0 || Arrays.equals(files, new String[] {\"extra0\"}));\n      }\n    }\n  }\n\n","sourceOld":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    double maxMBHeap = 0.05;\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          if (dir instanceof MockDirectoryWrapper) {\n            dir.setEnableVirusScanner(false);\n          }\n          verify(dir, docValues, null, numDims, numBytesPerDim, 50, maxMBHeap);\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n          maxMBHeap *= 1.25;\n        } catch (IOException ioe) {\n          if (ioe.getMessage().contains(\"a random IOException\")) {\n            // BKDWriter should fully clean up after itself:\n            done = true;\n          } else {\n            throw ioe;\n          }\n        }\n\n        String[] files = dir.listAll();\n        assertTrue(\"files=\" + Arrays.toString(files), files.length == 0 || Arrays.equals(files, new String[] {\"extra0\"}));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testWithExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testWithExceptions().mjava","sourceNew":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    double maxMBHeap = 0.05;\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          verify(dir, docValues, null, numDims, numBytesPerDim, 50, maxMBHeap);\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n          maxMBHeap *= 1.25;\n        } catch (IOException ioe) {\n          if (ioe.getMessage().contains(\"a random IOException\")) {\n            // BKDWriter should fully clean up after itself:\n            done = true;\n          } else {\n            throw ioe;\n          }\n        }\n\n        String[] files = dir.listAll();\n        assertTrue(\"files=\" + Arrays.toString(files), files.length == 0 || Arrays.equals(files, new String[] {\"extra0\"}));\n      }\n    }\n  }\n\n","sourceOld":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    double maxMBHeap = 0.05;\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          if (dir instanceof MockDirectoryWrapper) {\n            dir.setEnableVirusScanner(false);\n          }\n          verify(dir, docValues, null, numDims, numBytesPerDim, 50, maxMBHeap);\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n          maxMBHeap *= 1.25;\n        } catch (IOException ioe) {\n          if (ioe.getMessage().contains(\"a random IOException\")) {\n            // BKDWriter should fully clean up after itself:\n            done = true;\n          } else {\n            throw ioe;\n          }\n        }\n\n        String[] files = dir.listAll();\n        assertTrue(\"files=\" + Arrays.toString(files), files.length == 0 || Arrays.equals(files, new String[] {\"extra0\"}));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"950b7a6881d14da782b60444c11295e3ec50d41a","date":1458379095,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testWithExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testWithExceptions().mjava","sourceNew":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    double maxMBHeap = 0.05;\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      MockDirectoryWrapper dir = newMockFSDirectory(createTempDir());\n      try {\n        dir.setRandomIOExceptionRate(0.05);\n        dir.setRandomIOExceptionRateOnOpen(0.05);\n        verify(dir, docValues, null, numDims, numBytesPerDim, 50, maxMBHeap);\n      } catch (IllegalArgumentException iae) {\n        // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n        assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        maxMBHeap *= 1.25;\n      } catch (IOException ioe) {\n        if (ioe.getMessage().contains(\"a random IOException\")) {\n          // BKDWriter should fully clean up after itself:\n          done = true;\n        } else {\n          throw ioe;\n        }\n      }\n\n      String[] files = dir.listAll();\n      assertTrue(\"files=\" + Arrays.toString(files), files.length == 0 || Arrays.equals(files, new String[] {\"extra0\"}));\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    double maxMBHeap = 0.05;\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          verify(dir, docValues, null, numDims, numBytesPerDim, 50, maxMBHeap);\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n          maxMBHeap *= 1.25;\n        } catch (IOException ioe) {\n          if (ioe.getMessage().contains(\"a random IOException\")) {\n            // BKDWriter should fully clean up after itself:\n            done = true;\n          } else {\n            throw ioe;\n          }\n        }\n\n        String[] files = dir.listAll();\n        assertTrue(\"files=\" + Arrays.toString(files), files.length == 0 || Arrays.equals(files, new String[] {\"extra0\"}));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3adea0022cffaaa592081efed775a7b8bf86b51","date":1532414870,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testWithExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testWithExceptions().mjava","sourceNew":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    double maxMBHeap = 0.05;\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      MockDirectoryWrapper dir = newMockFSDirectory(createTempDir());\n      try {\n        dir.setRandomIOExceptionRate(0.05);\n        dir.setRandomIOExceptionRateOnOpen(0.05);\n        verify(dir, docValues, null, numDims, numBytesPerDim, 50, maxMBHeap);\n      } catch (IllegalArgumentException iae) {\n        // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n        assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        maxMBHeap *= 1.25;\n      } catch (IOException ioe) {\n        if (ioe.getMessage().contains(\"a random IOException\")) {\n          // BKDWriter should fully clean up after itself:\n          done = true;\n        } else {\n          throw ioe;\n        }\n      }\n\n      String[] files = Arrays.stream(dir.listAll())\n          .filter(file -> !ExtrasFS.isExtra(file))\n          .toArray(String[]::new);\n      assertTrue(\"files=\" + Arrays.toString(files), files.length == 0);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    double maxMBHeap = 0.05;\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      MockDirectoryWrapper dir = newMockFSDirectory(createTempDir());\n      try {\n        dir.setRandomIOExceptionRate(0.05);\n        dir.setRandomIOExceptionRateOnOpen(0.05);\n        verify(dir, docValues, null, numDims, numBytesPerDim, 50, maxMBHeap);\n      } catch (IllegalArgumentException iae) {\n        // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n        assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        maxMBHeap *= 1.25;\n      } catch (IOException ioe) {\n        if (ioe.getMessage().contains(\"a random IOException\")) {\n          // BKDWriter should fully clean up after itself:\n          done = true;\n        } else {\n          throw ioe;\n        }\n      }\n\n      String[] files = dir.listAll();\n      assertTrue(\"files=\" + Arrays.toString(files), files.length == 0 || Arrays.equals(files, new String[] {\"extra0\"}));\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testWithExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testWithExceptions().mjava","sourceNew":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDataDims = TestUtil.nextInt(random(), 1, 5);\n    int numIndexDims = TestUtil.nextInt(random(), 1, numDataDims);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDataDims][];\n      for(int dim=0;dim<numDataDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    double maxMBHeap = 0.05;\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      MockDirectoryWrapper dir = newMockFSDirectory(createTempDir());\n      try {\n        dir.setRandomIOExceptionRate(0.05);\n        dir.setRandomIOExceptionRateOnOpen(0.05);\n        verify(dir, docValues, null, numDataDims, numIndexDims, numBytesPerDim, 50, maxMBHeap);\n      } catch (IllegalArgumentException iae) {\n        // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n        assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        maxMBHeap *= 1.25;\n      } catch (IOException ioe) {\n        if (ioe.getMessage().contains(\"a random IOException\")) {\n          // BKDWriter should fully clean up after itself:\n          done = true;\n        } else {\n          throw ioe;\n        }\n      }\n\n      String[] files = Arrays.stream(dir.listAll())\n          .filter(file -> !ExtrasFS.isExtra(file))\n          .toArray(String[]::new);\n      assertTrue(\"files=\" + Arrays.toString(files), files.length == 0);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    double maxMBHeap = 0.05;\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      MockDirectoryWrapper dir = newMockFSDirectory(createTempDir());\n      try {\n        dir.setRandomIOExceptionRate(0.05);\n        dir.setRandomIOExceptionRateOnOpen(0.05);\n        verify(dir, docValues, null, numDims, numBytesPerDim, 50, maxMBHeap);\n      } catch (IllegalArgumentException iae) {\n        // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n        assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        maxMBHeap *= 1.25;\n      } catch (IOException ioe) {\n        if (ioe.getMessage().contains(\"a random IOException\")) {\n          // BKDWriter should fully clean up after itself:\n          done = true;\n        } else {\n          throw ioe;\n        }\n      }\n\n      String[] files = Arrays.stream(dir.listAll())\n          .filter(file -> !ExtrasFS.isExtra(file))\n          .toArray(String[]::new);\n      assertTrue(\"files=\" + Arrays.toString(files), files.length == 0);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testWithExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testWithExceptions().mjava","sourceNew":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDataDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n    int numIndexDims = Math.min(TestUtil.nextInt(random(), 1, numDataDims), PointValues.MAX_INDEX_DIMENSIONS);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDataDims][];\n      for(int dim=0;dim<numDataDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    double maxMBHeap = 0.05;\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      MockDirectoryWrapper dir = newMockFSDirectory(createTempDir());\n      try {\n        dir.setRandomIOExceptionRate(0.05);\n        dir.setRandomIOExceptionRateOnOpen(0.05);\n        verify(dir, docValues, null, numDataDims, numIndexDims, numBytesPerDim, 50, maxMBHeap);\n      } catch (IllegalArgumentException iae) {\n        // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n        assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        maxMBHeap *= 1.25;\n      } catch (IOException ioe) {\n        if (ioe.getMessage().contains(\"a random IOException\")) {\n          // BKDWriter should fully clean up after itself:\n          done = true;\n        } else {\n          throw ioe;\n        }\n      }\n\n      String[] files = Arrays.stream(dir.listAll())\n          .filter(file -> !ExtrasFS.isExtra(file))\n          .toArray(String[]::new);\n      assertTrue(\"files=\" + Arrays.toString(files), files.length == 0);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDataDims = TestUtil.nextInt(random(), 1, 5);\n    int numIndexDims = TestUtil.nextInt(random(), 1, numDataDims);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDataDims][];\n      for(int dim=0;dim<numDataDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    double maxMBHeap = 0.05;\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      MockDirectoryWrapper dir = newMockFSDirectory(createTempDir());\n      try {\n        dir.setRandomIOExceptionRate(0.05);\n        dir.setRandomIOExceptionRateOnOpen(0.05);\n        verify(dir, docValues, null, numDataDims, numIndexDims, numBytesPerDim, 50, maxMBHeap);\n      } catch (IllegalArgumentException iae) {\n        // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n        assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        maxMBHeap *= 1.25;\n      } catch (IOException ioe) {\n        if (ioe.getMessage().contains(\"a random IOException\")) {\n          // BKDWriter should fully clean up after itself:\n          done = true;\n        } else {\n          throw ioe;\n        }\n      }\n\n      String[] files = Arrays.stream(dir.listAll())\n          .filter(file -> !ExtrasFS.isExtra(file))\n          .toArray(String[]::new);\n      assertTrue(\"files=\" + Arrays.toString(files), files.length == 0);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["f3adea0022cffaaa592081efed775a7b8bf86b51"],"5a207d19eac354d649c3f0e2cce070017c78125e":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d","b470f36a9372c97283360b1304eacbde22df6c0d"],"950b7a6881d14da782b60444c11295e3ec50d41a":["5a207d19eac354d649c3f0e2cce070017c78125e"],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["950b7a6881d14da782b60444c11295e3ec50d41a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"]},"commit2Childs":{"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"5a207d19eac354d649c3f0e2cce070017c78125e":["950b7a6881d14da782b60444c11295e3ec50d41a"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","1e6acbaae7af722f17204ceccf0f7db5753eccf3","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"950b7a6881d14da782b60444c11295e3ec50d41a":["f3adea0022cffaaa592081efed775a7b8bf86b51"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["f6652c943595e92c187ee904c382863013eae28f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}