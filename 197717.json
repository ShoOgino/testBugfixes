{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexCommit#testEqualsHashCode().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexCommit#testEqualsHashCode().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexCommit#testEqualsHashCode().mjava","sourceNew":"  @Test\n  public void testEqualsHashCode() throws Exception {\n    // LUCENE-2417: equals and hashCode() impl was inconsistent\n    final Directory dir = newDirectory();\n    \n    IndexCommit ic1 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"a\"; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public int getSegmentCount() { return 2; }\n    };\n    \n    IndexCommit ic2 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"b\"; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public int getSegmentCount() { return 2; }\n    };\n\n    assertEquals(ic1, ic2);\n    assertEquals(\"hash codes are not equals\", ic1.hashCode(), ic2.hashCode());\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsHashCode() throws Exception {\n    // LUCENE-2417: equals and hashCode() impl was inconsistent\n    final Directory dir = newDirectory();\n    \n    IndexCommit ic1 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"a\"; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public int getSegmentCount() { return 2; }\n    };\n    \n    IndexCommit ic2 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"b\"; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public int getSegmentCount() { return 2; }\n    };\n\n    assertEquals(ic1, ic2);\n    assertEquals(\"hash codes are not equals\", ic1.hashCode(), ic2.hashCode());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexCommit#testEqualsHashCode().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexCommit#testEqualsHashCode().mjava","sourceNew":"  @Test\n  public void testEqualsHashCode() throws Exception {\n    // LUCENE-2417: equals and hashCode() impl was inconsistent\n    final Directory dir = newDirectory();\n    \n    IndexCommit ic1 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"a\"; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public Map<String, String> getUserData() { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public int getSegmentCount() { return 2; }\n    };\n    \n    IndexCommit ic2 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"b\"; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public Map<String, String> getUserData() { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public int getSegmentCount() { return 2; }\n    };\n\n    assertEquals(ic1, ic2);\n    assertEquals(\"hash codes are not equals\", ic1.hashCode(), ic2.hashCode());\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsHashCode() throws Exception {\n    // LUCENE-2417: equals and hashCode() impl was inconsistent\n    final Directory dir = newDirectory();\n    \n    IndexCommit ic1 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"a\"; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public int getSegmentCount() { return 2; }\n    };\n    \n    IndexCommit ic2 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"b\"; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public int getSegmentCount() { return 2; }\n    };\n\n    assertEquals(ic1, ic2);\n    assertEquals(\"hash codes are not equals\", ic1.hashCode(), ic2.hashCode());\n    dir.close();\n  }\n\n","bugFix":["e985300748139369c40cfe1aaa6b9475de6bc12a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexCommit#testEqualsHashCode().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexCommit#testEqualsHashCode().mjava","sourceNew":"  @Test\n  public void testEqualsHashCode() throws Exception {\n    // LUCENE-2417: equals and hashCode() impl was inconsistent\n    final Directory dir = newDirectory();\n    \n    IndexCommit ic1 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"a\"; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public Map<String, String> getUserData() { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public int getSegmentCount() { return 2; }\n    };\n    \n    IndexCommit ic2 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"b\"; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public Map<String, String> getUserData() { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public int getSegmentCount() { return 2; }\n    };\n\n    assertEquals(ic1, ic2);\n    assertEquals(\"hash codes are not equals\", ic1.hashCode(), ic2.hashCode());\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsHashCode() throws Exception {\n    // LUCENE-2417: equals and hashCode() impl was inconsistent\n    final Directory dir = newDirectory();\n    \n    IndexCommit ic1 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"a\"; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public int getSegmentCount() { return 2; }\n    };\n    \n    IndexCommit ic2 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"b\"; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public int getSegmentCount() { return 2; }\n    };\n\n    assertEquals(ic1, ic2);\n    assertEquals(\"hash codes are not equals\", ic1.hashCode(), ic2.hashCode());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}