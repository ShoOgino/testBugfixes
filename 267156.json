{"path":"lucene/test-framework/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testLeakFileChannel().mjava","commits":[{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testLeakFileChannel().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testLeakFileChannel().mjava","sourceNew":"  public void testLeakFileChannel() throws IOException {\n    Path dir = FilterPath.unwrap(createTempDir());\n    FileSystem fs = new LeakFS(dir.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path wrapped = new FilterPath(dir, fs);\n    \n    OutputStream file = Files.newOutputStream(wrapped.resolve(\"stillopen\"));\n    file.write(5);\n    file.close();\n    FileChannel leak = FileChannel.open(wrapped.resolve(\"stillopen\"));\n    try {\n      fs.close();\n      fail(\"should have gotten exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"file handle leaks\"));\n    }\n    leak.close();\n  }\n\n","sourceOld":"  public void testLeakFileChannel() throws IOException {\n    Path dir = FilterPath.unwrap(createTempDir());\n    FileSystem fs = new LeakFS(dir.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path wrapped = new FilterPath(dir, fs);\n    \n    OutputStream file = Files.newOutputStream(wrapped.resolve(\"stillopen\"));\n    file.write(5);\n    file.close();\n    FileChannel leak = FileChannel.open(wrapped.resolve(\"stillopen\"));\n    try {\n      fs.close();\n      fail(\"should have gotten exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"file handle leaks\"));\n    }\n    leak.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0570a6b8fbda74e4718ba36c70fd1953103a3dcb","date":1429616032,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/mockfile/TestLeakFS#testLeakFileChannel().mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testLeakFileChannel().mjava","sourceNew":"  /** Test leaks via FileChannel.open */\n  public void testLeakFileChannel() throws IOException {\n    Path dir = wrap(createTempDir());\n    \n    OutputStream file = Files.newOutputStream(dir.resolve(\"stillopen\"));\n    file.write(5);\n    file.close();\n    FileChannel leak = FileChannel.open(dir.resolve(\"stillopen\"));\n    try {\n      dir.getFileSystem().close();\n      fail(\"should have gotten exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"file handle leaks\"));\n    }\n    leak.close();\n  }\n\n","sourceOld":"  public void testLeakFileChannel() throws IOException {\n    Path dir = FilterPath.unwrap(createTempDir());\n    FileSystem fs = new LeakFS(dir.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path wrapped = new FilterPath(dir, fs);\n    \n    OutputStream file = Files.newOutputStream(wrapped.resolve(\"stillopen\"));\n    file.write(5);\n    file.close();\n    FileChannel leak = FileChannel.open(wrapped.resolve(\"stillopen\"));\n    try {\n      fs.close();\n      fail(\"should have gotten exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"file handle leaks\"));\n    }\n    leak.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0570a6b8fbda74e4718ba36c70fd1953103a3dcb":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0570a6b8fbda74e4718ba36c70fd1953103a3dcb"]},"commit2Childs":{"0570a6b8fbda74e4718ba36c70fd1953103a3dcb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["0570a6b8fbda74e4718ba36c70fd1953103a3dcb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}