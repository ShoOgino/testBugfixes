{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum#OrdsIntersectTermsEnum(OrdsFieldReader,CompiledAutomaton,BytesRef).mjava","commits":[{"id":"0cdf9cc6702d60334a616bd7db3ae91501d1dce7","date":1405858112,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum#OrdsIntersectTermsEnum(OrdsFieldReader,CompiledAutomaton,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public OrdsIntersectTermsEnum(OrdsFieldReader fr, CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n    // }\n    this.fr = fr;\n    runAutomaton = compiled.runAutomaton;\n    compiledAutomaton = compiled;\n    in = fr.parent.in.clone();\n    stack = new OrdsIntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new OrdsIntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<Output> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final OrdsIntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(runAutomaton.getInitialState());\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7543e96e2d4820e09334d36a699b998ed963f4f","date":1476121426,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum#OrdsIntersectTermsEnum(OrdsFieldReader,CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum#OrdsIntersectTermsEnum(OrdsFieldReader,CompiledAutomaton,BytesRef).mjava","sourceNew":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public OrdsIntersectTermsEnum(OrdsFieldReader fr, CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n    // }\n    this.fr = fr;\n    runAutomaton = compiled.runAutomaton;\n    compiledAutomaton = compiled;\n    in = fr.parent.in.clone();\n    stack = new OrdsIntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new OrdsIntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<Output> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final OrdsIntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(0);\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","sourceOld":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public OrdsIntersectTermsEnum(OrdsFieldReader fr, CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n    // }\n    this.fr = fr;\n    runAutomaton = compiled.runAutomaton;\n    compiledAutomaton = compiled;\n    in = fr.parent.in.clone();\n    stack = new OrdsIntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new OrdsIntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<Output> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final OrdsIntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(runAutomaton.getInitialState());\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum#OrdsIntersectTermsEnum(OrdsFieldReader,CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum#OrdsIntersectTermsEnum(OrdsFieldReader,CompiledAutomaton,BytesRef).mjava","sourceNew":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public OrdsIntersectTermsEnum(OrdsFieldReader fr, CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n    // }\n    this.fr = fr;\n    runAutomaton = compiled.runAutomaton;\n    compiledAutomaton = compiled;\n    in = fr.parent.in.clone();\n    stack = new OrdsIntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new OrdsIntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<Output> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final OrdsIntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(0);\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","sourceOld":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public OrdsIntersectTermsEnum(OrdsFieldReader fr, CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n    // }\n    this.fr = fr;\n    runAutomaton = compiled.runAutomaton;\n    compiledAutomaton = compiled;\n    in = fr.parent.in.clone();\n    stack = new OrdsIntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new OrdsIntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<Output> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final OrdsIntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(runAutomaton.getInitialState());\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum#OrdsIntersectTermsEnum(OrdsFieldReader,CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum#OrdsIntersectTermsEnum(OrdsFieldReader,CompiledAutomaton,BytesRef).mjava","sourceNew":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public OrdsIntersectTermsEnum(OrdsFieldReader fr, CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n    // }\n    this.fr = fr;\n    runAutomaton = compiled.runAutomaton;\n    compiledAutomaton = compiled;\n    in = fr.parent.in.clone();\n    stack = new OrdsIntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new OrdsIntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<Output> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final OrdsIntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(0);\n    f.arc = arc;\n    f.outputPrefix = arc.output();\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","sourceOld":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public OrdsIntersectTermsEnum(OrdsFieldReader fr, CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n    // }\n    this.fr = fr;\n    runAutomaton = compiled.runAutomaton;\n    compiledAutomaton = compiled;\n    in = fr.parent.in.clone();\n    stack = new OrdsIntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new OrdsIntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<Output> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final OrdsIntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(0);\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum#OrdsIntersectTermsEnum(OrdsFieldReader,CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsIntersectTermsEnum#OrdsIntersectTermsEnum(OrdsFieldReader,CompiledAutomaton,BytesRef).mjava","sourceNew":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public OrdsIntersectTermsEnum(OrdsFieldReader fr, CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n    // }\n    this.fr = fr;\n    runAutomaton = compiled.runAutomaton;\n    compiledAutomaton = compiled;\n    in = fr.parent.in.clone();\n    stack = new OrdsIntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new OrdsIntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<Output> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final OrdsIntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(0);\n    f.arc = arc;\n    f.outputPrefix = arc.output();\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","sourceOld":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public OrdsIntersectTermsEnum(OrdsFieldReader fr, CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n    // }\n    this.fr = fr;\n    runAutomaton = compiled.runAutomaton;\n    compiledAutomaton = compiled;\n    in = fr.parent.in.clone();\n    stack = new OrdsIntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new OrdsIntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<Output> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final OrdsIntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(0);\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["b7543e96e2d4820e09334d36a699b998ed963f4f"],"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7543e96e2d4820e09334d36a699b998ed963f4f":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["b7543e96e2d4820e09334d36a699b998ed963f4f","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7","b7543e96e2d4820e09334d36a699b998ed963f4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54204c8a3ca26aeafd273139fc29baf70d0f6786"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["b7543e96e2d4820e09334d36a699b998ed963f4f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b7543e96e2d4820e09334d36a699b998ed963f4f":["54204c8a3ca26aeafd273139fc29baf70d0f6786","f8061ddd97f3352007d927dae445884a6f3d857b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}