{"path":"lucene/backwards/src/java/org/apache/lucene/index/TermPositions#getPayload(byte[],int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/TermPositions#getPayload(byte[],int).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/TermPositions#getPayload(byte[],int).mjava","sourceNew":"    /** \n     * Returns the payload data at the current term position.\n     * This is invalid until {@link #nextPosition()} is called for\n     * the first time.\n     * This method must not be called more than once after each call\n     * of {@link #nextPosition()}. However, payloads are loaded lazily,\n     * so if the payload data for the current position is not needed,\n     * this method may not be called at all for performance reasons.<br>\n     * \n     * @param data the array into which the data of this payload is to be\n     *             stored, if it is big enough; otherwise, a new byte[] array\n     *             is allocated for this purpose. \n     * @param offset the offset in the array into which the data of this payload\n     *               is to be stored.\n     * @return a byte[] array containing the data of this payload\n     * @throws IOException\n     */\n    byte[] getPayload(byte[] data, int offset) throws IOException;\n\n","sourceOld":"    /** \n     * Returns the payload data at the current term position.\n     * This is invalid until {@link #nextPosition()} is called for\n     * the first time.\n     * This method must not be called more than once after each call\n     * of {@link #nextPosition()}. However, payloads are loaded lazily,\n     * so if the payload data for the current position is not needed,\n     * this method may not be called at all for performance reasons.<br>\n     * \n     * @param data the array into which the data of this payload is to be\n     *             stored, if it is big enough; otherwise, a new byte[] array\n     *             is allocated for this purpose. \n     * @param offset the offset in the array into which the data of this payload\n     *               is to be stored.\n     * @return a byte[] array containing the data of this payload\n     * @throws IOException\n     */\n    byte[] getPayload(byte[] data, int offset) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/TermPositions#getPayload(byte[],int).mjava","sourceNew":null,"sourceOld":"    /** \n     * Returns the payload data at the current term position.\n     * This is invalid until {@link #nextPosition()} is called for\n     * the first time.\n     * This method must not be called more than once after each call\n     * of {@link #nextPosition()}. However, payloads are loaded lazily,\n     * so if the payload data for the current position is not needed,\n     * this method may not be called at all for performance reasons.<br>\n     * \n     * @param data the array into which the data of this payload is to be\n     *             stored, if it is big enough; otherwise, a new byte[] array\n     *             is allocated for this purpose. \n     * @param offset the offset in the array into which the data of this payload\n     *               is to be stored.\n     * @return a byte[] array containing the data of this payload\n     * @throws IOException\n     */\n    byte[] getPayload(byte[] data, int offset) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}