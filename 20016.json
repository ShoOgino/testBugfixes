{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#fill(CharacterBuffer,Reader).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#fill(CharacterBuffer,Reader).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#fill(CharacterBuffer,Reader).mjava","sourceNew":"  /**\n   * Fills the {@link CharacterBuffer} with characters read from the given\n   * reader {@link Reader}. This method tries to read as many characters into\n   * the {@link CharacterBuffer} as possible, each call to fill will start\n   * filling the buffer from offset <code>0</code> up to the length of the size\n   * of the internal character array.\n   * <p>\n   * Depending on the {@link Version} passed to\n   * {@link CharacterUtils#getInstance(Version)} this method implements\n   * supplementary character awareness when filling the given buffer. For all\n   * {@link Version} &gt; 3.0 {@link #fill(CharacterBuffer, Reader)} guarantees\n   * that the given {@link CharacterBuffer} will never contain a high surrogate\n   * character as the last element in the buffer unless it is the last available\n   * character in the reader. In other words, high and low surrogate pairs will\n   * always be preserved across buffer boarders.\n   * </p>\n   * \n   * @param buffer\n   *          the buffer to fill.\n   * @param reader\n   *          the reader to read characters from.\n   * @return <code>true</code> if and only if no more characters are available\n   *         in the reader, otherwise <code>false</code>.\n   * @throws IOException\n   *           if the reader throws an {@link IOException}.\n   */\n  public abstract boolean fill(CharacterBuffer buffer, Reader reader) throws IOException;\n\n","sourceOld":"  /**\n   * Fills the {@link CharacterBuffer} with characters read from the given\n   * reader {@link Reader}. This method tries to read as many characters into\n   * the {@link CharacterBuffer} as possible, each call to fill will start\n   * filling the buffer from offset <code>0</code> up to the length of the size\n   * of the internal character array.\n   * <p>\n   * Depending on the {@link Version} passed to\n   * {@link CharacterUtils#getInstance(Version)} this method implements\n   * supplementary character awareness when filling the given buffer. For all\n   * {@link Version} &gt; 3.0 {@link #fill(CharacterBuffer, Reader)} guarantees\n   * that the given {@link CharacterBuffer} will never contain a high surrogate\n   * character as the last element in the buffer unless it is the last available\n   * character in the reader. In other words, high and low surrogate pairs will\n   * always be preserved across buffer boarders.\n   * </p>\n   * \n   * @param buffer\n   *          the buffer to fill.\n   * @param reader\n   *          the reader to read characters from.\n   * @return <code>true</code> if and only if no more characters are available\n   *         in the reader, otherwise <code>false</code>.\n   * @throws IOException\n   *           if the reader throws an {@link IOException}.\n   */\n  public abstract boolean fill(CharacterBuffer buffer, Reader reader) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704","date":1371043069,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#fill(CharacterBuffer,Reader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#fill(CharacterBuffer,Reader).mjava","sourceNew":"  /** Convenience method which calls <code>fill(buffer, reader, buffer.buffer.length)</code>. */\n  public final boolean fill(CharacterBuffer buffer, Reader reader) throws IOException {\n    return fill(buffer, reader, buffer.buffer.length);\n  }\n\n","sourceOld":"  /**\n   * Fills the {@link CharacterBuffer} with characters read from the given\n   * reader {@link Reader}. This method tries to read as many characters into\n   * the {@link CharacterBuffer} as possible, each call to fill will start\n   * filling the buffer from offset <code>0</code> up to the length of the size\n   * of the internal character array.\n   * <p>\n   * Depending on the {@link Version} passed to\n   * {@link CharacterUtils#getInstance(Version)} this method implements\n   * supplementary character awareness when filling the given buffer. For all\n   * {@link Version} &gt; 3.0 {@link #fill(CharacterBuffer, Reader)} guarantees\n   * that the given {@link CharacterBuffer} will never contain a high surrogate\n   * character as the last element in the buffer unless it is the last available\n   * character in the reader. In other words, high and low surrogate pairs will\n   * always be preserved across buffer boarders.\n   * </p>\n   * \n   * @param buffer\n   *          the buffer to fill.\n   * @param reader\n   *          the reader to read characters from.\n   * @return <code>true</code> if and only if no more characters are available\n   *         in the reader, otherwise <code>false</code>.\n   * @throws IOException\n   *           if the reader throws an {@link IOException}.\n   */\n  public abstract boolean fill(CharacterBuffer buffer, Reader reader) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc","date":1465824262,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#fill(CharacterBuffer,Reader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#fill(CharacterBuffer,Reader).mjava","sourceNew":"  /** Convenience method which calls <code>fill(buffer, reader, buffer.buffer.length)</code>. */\n  public static boolean fill(CharacterBuffer buffer, Reader reader) throws IOException {\n    return fill(buffer, reader, buffer.buffer.length);\n  }\n\n","sourceOld":"  /** Convenience method which calls <code>fill(buffer, reader, buffer.buffer.length)</code>. */\n  public final boolean fill(CharacterBuffer buffer, Reader reader) throws IOException {\n    return fill(buffer, reader, buffer.buffer.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","date":1465913303,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#fill(CharacterBuffer,Reader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#fill(CharacterBuffer,Reader).mjava","sourceNew":"  /** Convenience method which calls <code>fill(buffer, reader, buffer.buffer.length)</code>. */\n  public static boolean fill(CharacterBuffer buffer, Reader reader) throws IOException {\n    return fill(buffer, reader, buffer.buffer.length);\n  }\n\n","sourceOld":"  /** Convenience method which calls <code>fill(buffer, reader, buffer.buffer.length)</code>. */\n  public final boolean fill(CharacterBuffer buffer, Reader reader) throws IOException {\n    return fill(buffer, reader, buffer.buffer.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/CharacterUtils#fill(CharacterBuffer,Reader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#fill(CharacterBuffer,Reader).mjava","sourceNew":"  /** Convenience method which calls <code>fill(buffer, reader, buffer.buffer.length)</code>. */\n  public static boolean fill(CharacterBuffer buffer, Reader reader) throws IOException {\n    return fill(buffer, reader, buffer.buffer.length);\n  }\n\n","sourceOld":"  /** Convenience method which calls <code>fill(buffer, reader, buffer.buffer.length)</code>. */\n  public static boolean fill(CharacterBuffer buffer, Reader reader) throws IOException {\n    return fill(buffer, reader, buffer.buffer.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#fill(CharacterBuffer,Reader).mjava","sourceNew":null,"sourceOld":"  /** Convenience method which calls <code>fill(buffer, reader, buffer.buffer.length)</code>. */\n  public final boolean fill(CharacterBuffer buffer, Reader reader) throws IOException {\n    return fill(buffer, reader, buffer.buffer.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc":["bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704","fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704"],"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704":["fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}