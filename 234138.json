{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40RWFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","commits":[{"id":"e2fe60a17a7a0cfd101b1169acf089221bc6c166","date":1412767493,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40RWFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    if (!segmentSuffix.isEmpty()) {\n      throw new UnsupportedOperationException(\"4.0 does not support fieldinfo updates\");\n    }\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, \"\", Lucene40FieldInfosFormat.FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene40FieldInfosFormat.CODEC_NAME, Lucene40FieldInfosFormat.FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= Lucene40FieldInfosFormat.STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= Lucene40FieldInfosFormat.OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= Lucene40FieldInfosFormat.STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= Lucene40FieldInfosFormat.IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= Lucene40FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= Lucene40FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= Lucene40FieldInfosFormat.OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType(), fi.getAttribute(LEGACY_DV_TYPE_KEY));\n        final byte nrm = docValuesByte(fi.getNormType(), fi.getAttribute(LEGACY_NORM_TYPE_KEY));\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeStringStringMap(fi.attributes());\n      }\n      success = true;\n    } finally {\n      if (success) {\n        output.close();\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    if (!segmentSuffix.isEmpty()) {\n      throw new UnsupportedOperationException(\"4.0 does not support fieldinfo updates\");\n    }\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, \"\", Lucene40FieldInfosFormat.FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene40FieldInfosFormat.CODEC_NAME, Lucene40FieldInfosFormat.FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= Lucene40FieldInfosFormat.STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= Lucene40FieldInfosFormat.OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= Lucene40FieldInfosFormat.STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= Lucene40FieldInfosFormat.IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= Lucene40FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= Lucene40FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= Lucene40FieldInfosFormat.OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType(), fi.getAttribute(Lucene40FieldInfosReader.LEGACY_DV_TYPE_KEY));\n        final byte nrm = docValuesByte(fi.getNormType(), fi.getAttribute(Lucene40FieldInfosReader.LEGACY_NORM_TYPE_KEY));\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeStringStringMap(fi.attributes());\n      }\n      success = true;\n    } finally {\n      if (success) {\n        output.close();\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40RWFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    if (!segmentSuffix.isEmpty()) {\n      throw new UnsupportedOperationException(\"4.0 does not support fieldinfo updates\");\n    }\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, \"\", Lucene40FieldInfosFormat.FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene40FieldInfosFormat.CODEC_NAME, Lucene40FieldInfosFormat.FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= Lucene40FieldInfosFormat.STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= Lucene40FieldInfosFormat.OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= Lucene40FieldInfosFormat.STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= Lucene40FieldInfosFormat.IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= Lucene40FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= Lucene40FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= Lucene40FieldInfosFormat.OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType(), fi.getAttribute(LEGACY_DV_TYPE_KEY));\n        final byte nrm = docValuesByte(fi.getNormType(), fi.getAttribute(LEGACY_NORM_TYPE_KEY));\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeStringStringMap(fi.attributes());\n      }\n      success = true;\n    } finally {\n      if (success) {\n        output.close();\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    if (!segmentSuffix.isEmpty()) {\n      throw new UnsupportedOperationException(\"4.0 does not support fieldinfo updates\");\n    }\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, \"\", Lucene40FieldInfosFormat.FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene40FieldInfosFormat.CODEC_NAME, Lucene40FieldInfosFormat.FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= Lucene40FieldInfosFormat.STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= Lucene40FieldInfosFormat.OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= Lucene40FieldInfosFormat.STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= Lucene40FieldInfosFormat.IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= Lucene40FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= Lucene40FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= Lucene40FieldInfosFormat.OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType(), fi.getAttribute(Lucene40FieldInfosReader.LEGACY_DV_TYPE_KEY));\n        final byte nrm = docValuesByte(fi.getNormType(), fi.getAttribute(Lucene40FieldInfosReader.LEGACY_NORM_TYPE_KEY));\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeStringStringMap(fi.attributes());\n      }\n      success = true;\n    } finally {\n      if (success) {\n        output.close();\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05da2d758a6089e737cdfc230e57a51b472b94b6","date":1413392310,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40RWFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40RWFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    if (!segmentSuffix.isEmpty()) {\n      throw new UnsupportedOperationException(\"4.0 does not support fieldinfo updates\");\n    }\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, \"\", Lucene40FieldInfosFormat.FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene40FieldInfosFormat.CODEC_NAME, Lucene40FieldInfosFormat.FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= Lucene40FieldInfosFormat.STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= Lucene40FieldInfosFormat.OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= Lucene40FieldInfosFormat.STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= Lucene40FieldInfosFormat.IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= Lucene40FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= Lucene40FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= Lucene40FieldInfosFormat.OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType(), fi.getAttribute(LEGACY_DV_TYPE_KEY));\n        final byte nrm = docValuesByte(fi.hasNorms() ? DocValuesType.NUMERIC : null, fi.getAttribute(LEGACY_NORM_TYPE_KEY));\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeStringStringMap(fi.attributes());\n      }\n      success = true;\n    } finally {\n      if (success) {\n        output.close();\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    if (!segmentSuffix.isEmpty()) {\n      throw new UnsupportedOperationException(\"4.0 does not support fieldinfo updates\");\n    }\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, \"\", Lucene40FieldInfosFormat.FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene40FieldInfosFormat.CODEC_NAME, Lucene40FieldInfosFormat.FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= Lucene40FieldInfosFormat.STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= Lucene40FieldInfosFormat.OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= Lucene40FieldInfosFormat.STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= Lucene40FieldInfosFormat.IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= Lucene40FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= Lucene40FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= Lucene40FieldInfosFormat.OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType(), fi.getAttribute(LEGACY_DV_TYPE_KEY));\n        final byte nrm = docValuesByte(fi.getNormType(), fi.getAttribute(LEGACY_NORM_TYPE_KEY));\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeStringStringMap(fi.attributes());\n      }\n      success = true;\n    } finally {\n      if (success) {\n        output.close();\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","date":1413458798,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40RWFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40RWFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    if (!segmentSuffix.isEmpty()) {\n      throw new UnsupportedOperationException(\"4.0 does not support fieldinfo updates\");\n    }\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, \"\", Lucene40FieldInfosFormat.FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene40FieldInfosFormat.CODEC_NAME, Lucene40FieldInfosFormat.FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= Lucene40FieldInfosFormat.STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= Lucene40FieldInfosFormat.OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= Lucene40FieldInfosFormat.STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= Lucene40FieldInfosFormat.IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= Lucene40FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= Lucene40FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= Lucene40FieldInfosFormat.OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType(), fi.getAttribute(LEGACY_DV_TYPE_KEY));\n        final byte nrm = docValuesByte(fi.hasNorms() ? DocValuesType.NUMERIC : null, fi.getAttribute(LEGACY_NORM_TYPE_KEY));\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeStringStringMap(fi.attributes());\n      }\n      success = true;\n    } finally {\n      if (success) {\n        output.close();\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    if (!segmentSuffix.isEmpty()) {\n      throw new UnsupportedOperationException(\"4.0 does not support fieldinfo updates\");\n    }\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, \"\", Lucene40FieldInfosFormat.FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene40FieldInfosFormat.CODEC_NAME, Lucene40FieldInfosFormat.FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= Lucene40FieldInfosFormat.STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= Lucene40FieldInfosFormat.OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= Lucene40FieldInfosFormat.STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= Lucene40FieldInfosFormat.IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= Lucene40FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= Lucene40FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= Lucene40FieldInfosFormat.OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType(), fi.getAttribute(LEGACY_DV_TYPE_KEY));\n        final byte nrm = docValuesByte(fi.getNormType(), fi.getAttribute(LEGACY_NORM_TYPE_KEY));\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeStringStringMap(fi.attributes());\n      }\n      success = true;\n    } finally {\n      if (success) {\n        output.close();\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40RWFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    if (!segmentSuffix.isEmpty()) {\n      throw new UnsupportedOperationException(\"4.0 does not support fieldinfo updates\");\n    }\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, \"\", Lucene40FieldInfosFormat.FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene40FieldInfosFormat.CODEC_NAME, Lucene40FieldInfosFormat.FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        IndexOptions indexOptions = fi.getIndexOptions();\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= Lucene40FieldInfosFormat.STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= Lucene40FieldInfosFormat.OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= Lucene40FieldInfosFormat.STORE_PAYLOADS;\n        if (fi.isIndexed()) {\n          bits |= Lucene40FieldInfosFormat.IS_INDEXED;\n          assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          if (indexOptions == IndexOptions.DOCS_ONLY) {\n            bits |= Lucene40FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {\n            bits |= Lucene40FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS;\n          } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n            bits |= Lucene40FieldInfosFormat.OMIT_POSITIONS;\n          }\n        }\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n        output.writeByte(bits);\n\n        // pack the DV types in one byte\n        final byte dv = docValuesByte(fi.getDocValuesType(), fi.getAttribute(LEGACY_DV_TYPE_KEY));\n        final byte nrm = docValuesByte(fi.hasNorms() ? DocValuesType.NUMERIC : null, fi.getAttribute(LEGACY_NORM_TYPE_KEY));\n        assert (dv & (~0xF)) == 0 && (nrm & (~0x0F)) == 0;\n        byte val = (byte) (0xff & ((nrm << 4) | dv));\n        output.writeByte(val);\n        output.writeStringStringMap(fi.attributes());\n      }\n      success = true;\n    } finally {\n      if (success) {\n        output.close();\n      } else {\n        IOUtils.closeWhileHandlingException(output);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"05da2d758a6089e737cdfc230e57a51b472b94b6":["e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":["55980207f1977bd1463465de1659b821347e2fa8","05da2d758a6089e737cdfc230e57a51b472b94b6"],"55980207f1977bd1463465de1659b821347e2fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71387d8cb6923eb831b17a8b734608ba2e21c653":["05da2d758a6089e737cdfc230e57a51b472b94b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"05da2d758a6089e737cdfc230e57a51b472b94b6":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","71387d8cb6923eb831b17a8b734608ba2e21c653"],"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["05da2d758a6089e737cdfc230e57a51b472b94b6","55980207f1977bd1463465de1659b821347e2fa8"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":[],"55980207f1977bd1463465de1659b821347e2fa8":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e2fe60a17a7a0cfd101b1169acf089221bc6c166","55980207f1977bd1463465de1659b821347e2fa8"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}