{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getIntervalInstance(FieldInfo,BinaryEntry).mjava","commits":[{"id":"084884d4602f4d1c7411eab29e897e349ce62675","date":1475571034,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getIntervalInstance(FieldInfo,BinaryEntry).mjava","pathOld":"/dev/null","sourceNew":"  /** returns an address instance for prefix-compressed binary values. */\n  private synchronized MonotonicBlockPackedReader getIntervalInstance(FieldInfo field, BinaryEntry bytes) throws IOException {\n    MonotonicBlockPackedReader addresses = addressInstances.get(field.name);\n    if (addresses == null) {\n      data.seek(bytes.addressesOffset);\n      final long size = (bytes.count + INTERVAL_MASK) >>> INTERVAL_SHIFT;\n      addresses = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, size, false);\n      if (!merging) {\n        addressInstances.put(field.name, addresses);\n        ramBytesUsed.addAndGet(addresses.ramBytesUsed() + Integer.BYTES);\n      }\n    }\n    return addresses;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getIntervalInstance(FieldInfo,BinaryEntry).mjava","pathOld":"/dev/null","sourceNew":"  /** returns an address instance for prefix-compressed binary values. */\n  private synchronized MonotonicBlockPackedReader getIntervalInstance(FieldInfo field, BinaryEntry bytes) throws IOException {\n    MonotonicBlockPackedReader addresses = addressInstances.get(field.name);\n    if (addresses == null) {\n      data.seek(bytes.addressesOffset);\n      final long size = (bytes.count + INTERVAL_MASK) >>> INTERVAL_SHIFT;\n      addresses = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, size, false);\n      if (!merging) {\n        addressInstances.put(field.name, addresses);\n        ramBytesUsed.addAndGet(addresses.ramBytesUsed() + Integer.BYTES);\n      }\n    }\n    return addresses;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23e44daeaa8b89694d10df5999956c8e14a7dd09","date":1476689300,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getIntervalInstance(FieldInfo,BinaryEntry).mjava","sourceNew":null,"sourceOld":"  /** returns an address instance for prefix-compressed binary values. */\n  private synchronized MonotonicBlockPackedReader getIntervalInstance(FieldInfo field, BinaryEntry bytes) throws IOException {\n    MonotonicBlockPackedReader addresses = addressInstances.get(field.name);\n    if (addresses == null) {\n      data.seek(bytes.addressesOffset);\n      final long size = (bytes.count + INTERVAL_MASK) >>> INTERVAL_SHIFT;\n      addresses = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, size, false);\n      if (!merging) {\n        addressInstances.put(field.name, addresses);\n        ramBytesUsed.addAndGet(addresses.ramBytesUsed() + Integer.BYTES);\n      }\n    }\n    return addresses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23e44daeaa8b89694d10df5999956c8e14a7dd09":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","084884d4602f4d1c7411eab29e897e349ce62675"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"084884d4602f4d1c7411eab29e897e349ce62675":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"23e44daeaa8b89694d10df5999956c8e14a7dd09":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1967bed916cc89da82a1c2085f27976da6d08cbd","084884d4602f4d1c7411eab29e897e349ce62675"],"084884d4602f4d1c7411eab29e897e349ce62675":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}