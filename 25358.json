{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryStateObject(String,String,String).mjava","commits":[{"id":"e758245b4acfbc0eae618c8f5d49f799d3b33157","date":1412710512,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryStateObject(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public Map<String,Object> getLeaderInitiatedRecoveryStateObject(String collection, String shardId, String coreNodeName) {\n\n    if (collection == null || shardId == null || coreNodeName == null)\n      return null; // if we don't have complete data about a core in cloud mode, return null\n    \n    String znodePath = getLeaderInitiatedRecoveryZnodePath(collection, shardId, coreNodeName);\n    byte[] stateData = null;\n    try {\n      stateData = zkClient.getData(znodePath, null, new Stat(), false);\n    } catch (NoNodeException ignoreMe) {\n      // safe to ignore as this znode will only exist if the leader initiated recovery\n    } catch (ConnectionLossException cle) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \"+znodePath+\" due to: \"+cle);\n    } catch (SessionExpiredException see) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \"+znodePath+\" due to: \"+see);\n    } catch (Exception exc) {\n      log.error(\"Failed to read data from znode \"+znodePath+\" due to: \"+exc);\n      if (exc instanceof SolrException) {\n        throw (SolrException)exc;\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Failed to read data from znodePath: \"+znodePath, exc);\n      }\n    }\n\n    Map<String,Object> stateObj = null;\n    if (stateData != null && stateData.length > 0)\n      stateObj = (Map<String, Object>) ZkStateReader.fromJSON(stateData);\n\n    return stateObj;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c2a679043992bca8ff293014b1891a5ab9462d9c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c2a679043992bca8ff293014b1891a5ab9462d9c","date":1413214535,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryStateObject(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryStateObject(String,String,String).mjava","sourceNew":"  public Map<String,Object> getLeaderInitiatedRecoveryStateObject(String collection, String shardId, String coreNodeName) {\n\n    if (collection == null || shardId == null || coreNodeName == null)\n      return null; // if we don't have complete data about a core in cloud mode, return null\n    \n    String znodePath = getLeaderInitiatedRecoveryZnodePath(collection, shardId, coreNodeName);\n    byte[] stateData = null;\n    try {\n      stateData = zkClient.getData(znodePath, null, new Stat(), false);\n    } catch (NoNodeException ignoreMe) {\n      // safe to ignore as this znode will only exist if the leader initiated recovery\n    } catch (ConnectionLossException cle) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \"+znodePath+\" due to: \"+cle);\n    } catch (SessionExpiredException see) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \"+znodePath+\" due to: \"+see);\n    } catch (Exception exc) {\n      log.error(\"Failed to read data from znode \"+znodePath+\" due to: \"+exc);\n      if (exc instanceof SolrException) {\n        throw (SolrException)exc;\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Failed to read data from znodePath: \"+znodePath, exc);\n      }\n    }\n\n    Map<String,Object> stateObj = null;\n    if (stateData != null && stateData.length > 0) {\n      Object parsedJson = ZkStateReader.fromJSON(stateData);\n      if (parsedJson instanceof Map) {\n        stateObj = (Map<String,Object>)parsedJson;\n      } else if (parsedJson instanceof String) {\n        // old format still in ZK\n        stateObj = new LinkedHashMap<>();\n        stateObj.put(\"state\", (String)parsedJson);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Leader-initiated recovery state data is invalid! \"+parsedJson);\n      }\n    }\n\n    return stateObj;\n  }\n\n","sourceOld":"  public Map<String,Object> getLeaderInitiatedRecoveryStateObject(String collection, String shardId, String coreNodeName) {\n\n    if (collection == null || shardId == null || coreNodeName == null)\n      return null; // if we don't have complete data about a core in cloud mode, return null\n    \n    String znodePath = getLeaderInitiatedRecoveryZnodePath(collection, shardId, coreNodeName);\n    byte[] stateData = null;\n    try {\n      stateData = zkClient.getData(znodePath, null, new Stat(), false);\n    } catch (NoNodeException ignoreMe) {\n      // safe to ignore as this znode will only exist if the leader initiated recovery\n    } catch (ConnectionLossException cle) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \"+znodePath+\" due to: \"+cle);\n    } catch (SessionExpiredException see) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \"+znodePath+\" due to: \"+see);\n    } catch (Exception exc) {\n      log.error(\"Failed to read data from znode \"+znodePath+\" due to: \"+exc);\n      if (exc instanceof SolrException) {\n        throw (SolrException)exc;\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Failed to read data from znodePath: \"+znodePath, exc);\n      }\n    }\n\n    Map<String,Object> stateObj = null;\n    if (stateData != null && stateData.length > 0)\n      stateObj = (Map<String, Object>) ZkStateReader.fromJSON(stateData);\n\n    return stateObj;\n  }\n\n","bugFix":["e758245b4acfbc0eae618c8f5d49f799d3b33157"],"bugIntro":["3f12b7260301796a1d2c5d6d3bbf5295b19ef0b7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryStateObject(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public Map<String,Object> getLeaderInitiatedRecoveryStateObject(String collection, String shardId, String coreNodeName) {\n\n    if (collection == null || shardId == null || coreNodeName == null)\n      return null; // if we don't have complete data about a core in cloud mode, return null\n    \n    String znodePath = getLeaderInitiatedRecoveryZnodePath(collection, shardId, coreNodeName);\n    byte[] stateData = null;\n    try {\n      stateData = zkClient.getData(znodePath, null, new Stat(), false);\n    } catch (NoNodeException ignoreMe) {\n      // safe to ignore as this znode will only exist if the leader initiated recovery\n    } catch (ConnectionLossException cle) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \"+znodePath+\" due to: \"+cle);\n    } catch (SessionExpiredException see) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \"+znodePath+\" due to: \"+see);\n    } catch (Exception exc) {\n      log.error(\"Failed to read data from znode \"+znodePath+\" due to: \"+exc);\n      if (exc instanceof SolrException) {\n        throw (SolrException)exc;\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Failed to read data from znodePath: \"+znodePath, exc);\n      }\n    }\n\n    Map<String,Object> stateObj = null;\n    if (stateData != null && stateData.length > 0) {\n      Object parsedJson = ZkStateReader.fromJSON(stateData);\n      if (parsedJson instanceof Map) {\n        stateObj = (Map<String,Object>)parsedJson;\n      } else if (parsedJson instanceof String) {\n        // old format still in ZK\n        stateObj = new LinkedHashMap<>();\n        stateObj.put(\"state\", (String)parsedJson);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Leader-initiated recovery state data is invalid! \"+parsedJson);\n      }\n    }\n\n    return stateObj;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f12b7260301796a1d2c5d6d3bbf5295b19ef0b7","date":1417534918,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryStateObject(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryStateObject(String,String,String).mjava","sourceNew":"  public Map<String,Object> getLeaderInitiatedRecoveryStateObject(String collection, String shardId, String coreNodeName) {\n\n    if (collection == null || shardId == null || coreNodeName == null)\n      return null; // if we don't have complete data about a core in cloud mode, return null\n    \n    String znodePath = getLeaderInitiatedRecoveryZnodePath(collection, shardId, coreNodeName);\n    byte[] stateData = null;\n    try {\n      stateData = zkClient.getData(znodePath, null, new Stat(), false);\n    } catch (NoNodeException ignoreMe) {\n      // safe to ignore as this znode will only exist if the leader initiated recovery\n    } catch (ConnectionLossException cle) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \"+znodePath+\" due to: \"+cle);\n    } catch (SessionExpiredException see) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \"+znodePath+\" due to: \"+see);\n    } catch (Exception exc) {\n      log.error(\"Failed to read data from znode \"+znodePath+\" due to: \"+exc);\n      if (exc instanceof SolrException) {\n        throw (SolrException)exc;\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Failed to read data from znodePath: \"+znodePath, exc);\n      }\n    }\n\n    Map<String,Object> stateObj = null;\n    if (stateData != null && stateData.length > 0) {\n      // TODO: Remove later ... this is for upgrading from 4.8.x to 4.10.3 (see: SOLR-6732)\n      if (stateData[0] == (byte)'{') {\n        Object parsedJson = ZkStateReader.fromJSON(stateData);\n        if (parsedJson instanceof Map) {\n          stateObj = (Map<String,Object>)parsedJson;\n        } else {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Leader-initiated recovery state data is invalid! \"+parsedJson);\n        }\n      } else {\n        // old format still in ZK\n        stateObj = ZkNodeProps.makeMap(\"state\", new String(stateData, StandardCharsets.UTF_8));\n      }\n    }\n\n    return stateObj;\n  }\n\n","sourceOld":"  public Map<String,Object> getLeaderInitiatedRecoveryStateObject(String collection, String shardId, String coreNodeName) {\n\n    if (collection == null || shardId == null || coreNodeName == null)\n      return null; // if we don't have complete data about a core in cloud mode, return null\n    \n    String znodePath = getLeaderInitiatedRecoveryZnodePath(collection, shardId, coreNodeName);\n    byte[] stateData = null;\n    try {\n      stateData = zkClient.getData(znodePath, null, new Stat(), false);\n    } catch (NoNodeException ignoreMe) {\n      // safe to ignore as this znode will only exist if the leader initiated recovery\n    } catch (ConnectionLossException cle) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \"+znodePath+\" due to: \"+cle);\n    } catch (SessionExpiredException see) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \"+znodePath+\" due to: \"+see);\n    } catch (Exception exc) {\n      log.error(\"Failed to read data from znode \"+znodePath+\" due to: \"+exc);\n      if (exc instanceof SolrException) {\n        throw (SolrException)exc;\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Failed to read data from znodePath: \"+znodePath, exc);\n      }\n    }\n\n    Map<String,Object> stateObj = null;\n    if (stateData != null && stateData.length > 0) {\n      Object parsedJson = ZkStateReader.fromJSON(stateData);\n      if (parsedJson instanceof Map) {\n        stateObj = (Map<String,Object>)parsedJson;\n      } else if (parsedJson instanceof String) {\n        // old format still in ZK\n        stateObj = new LinkedHashMap<>();\n        stateObj.put(\"state\", (String)parsedJson);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Leader-initiated recovery state data is invalid! \"+parsedJson);\n      }\n    }\n\n    return stateObj;\n  }\n\n","bugFix":["c2a679043992bca8ff293014b1891a5ab9462d9c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6e1dc1bb4254226c8d7151b596cc1be40671751","date":1421876355,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryStateObject(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryStateObject(String,String,String).mjava","sourceNew":"  public Map<String,Object> getLeaderInitiatedRecoveryStateObject(String collection, String shardId, String coreNodeName) {\n\n    if (collection == null || shardId == null || coreNodeName == null)\n      return null; // if we don't have complete data about a core in cloud mode, return null\n    \n    String znodePath = getLeaderInitiatedRecoveryZnodePath(collection, shardId, coreNodeName);\n    byte[] stateData = null;\n    try {\n      stateData = zkClient.getData(znodePath, null, new Stat(), false);\n    } catch (NoNodeException ignoreMe) {\n      // safe to ignore as this znode will only exist if the leader initiated recovery\n    } catch (ConnectionLossException | SessionExpiredException cle) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \"+znodePath+\" due to: \"+cle);\n    } catch (Exception exc) {\n      log.error(\"Failed to read data from znode \"+znodePath+\" due to: \"+exc);\n      if (exc instanceof SolrException) {\n        throw (SolrException)exc;\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Failed to read data from znodePath: \"+znodePath, exc);\n      }\n    }\n\n    Map<String,Object> stateObj = null;\n    if (stateData != null && stateData.length > 0) {\n      // TODO: Remove later ... this is for upgrading from 4.8.x to 4.10.3 (see: SOLR-6732)\n      if (stateData[0] == (byte)'{') {\n        Object parsedJson = ZkStateReader.fromJSON(stateData);\n        if (parsedJson instanceof Map) {\n          stateObj = (Map<String,Object>)parsedJson;\n        } else {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Leader-initiated recovery state data is invalid! \"+parsedJson);\n        }\n      } else {\n        // old format still in ZK\n        stateObj = ZkNodeProps.makeMap(\"state\", new String(stateData, StandardCharsets.UTF_8));\n      }\n    }\n\n    return stateObj;\n  }\n\n","sourceOld":"  public Map<String,Object> getLeaderInitiatedRecoveryStateObject(String collection, String shardId, String coreNodeName) {\n\n    if (collection == null || shardId == null || coreNodeName == null)\n      return null; // if we don't have complete data about a core in cloud mode, return null\n    \n    String znodePath = getLeaderInitiatedRecoveryZnodePath(collection, shardId, coreNodeName);\n    byte[] stateData = null;\n    try {\n      stateData = zkClient.getData(znodePath, null, new Stat(), false);\n    } catch (NoNodeException ignoreMe) {\n      // safe to ignore as this znode will only exist if the leader initiated recovery\n    } catch (ConnectionLossException cle) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \"+znodePath+\" due to: \"+cle);\n    } catch (SessionExpiredException see) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \"+znodePath+\" due to: \"+see);\n    } catch (Exception exc) {\n      log.error(\"Failed to read data from znode \"+znodePath+\" due to: \"+exc);\n      if (exc instanceof SolrException) {\n        throw (SolrException)exc;\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Failed to read data from znodePath: \"+znodePath, exc);\n      }\n    }\n\n    Map<String,Object> stateObj = null;\n    if (stateData != null && stateData.length > 0) {\n      // TODO: Remove later ... this is for upgrading from 4.8.x to 4.10.3 (see: SOLR-6732)\n      if (stateData[0] == (byte)'{') {\n        Object parsedJson = ZkStateReader.fromJSON(stateData);\n        if (parsedJson instanceof Map) {\n          stateObj = (Map<String,Object>)parsedJson;\n        } else {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Leader-initiated recovery state data is invalid! \"+parsedJson);\n        }\n      } else {\n        // old format still in ZK\n        stateObj = ZkNodeProps.makeMap(\"state\", new String(stateData, StandardCharsets.UTF_8));\n      }\n    }\n\n    return stateObj;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbcfc050b9f253136eaa5950b57248b2109eac11","date":1427308993,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryStateObject(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryStateObject(String,String,String).mjava","sourceNew":"  public Map<String, Object> getLeaderInitiatedRecoveryStateObject(String collection, String shardId, String coreNodeName) {\n\n    if (collection == null || shardId == null || coreNodeName == null)\n      return null; // if we don't have complete data about a core in cloud mode, return null\n\n    String znodePath = getLeaderInitiatedRecoveryZnodePath(collection, shardId, coreNodeName);\n    byte[] stateData = null;\n    try {\n      stateData = zkClient.getData(znodePath, null, new Stat(), false);\n    } catch (NoNodeException ignoreMe) {\n      // safe to ignore as this znode will only exist if the leader initiated recovery\n    } catch (ConnectionLossException | SessionExpiredException cle) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \" + znodePath + \" due to: \" + cle);\n    } catch (Exception exc) {\n      log.error(\"Failed to read data from znode \" + znodePath + \" due to: \" + exc);\n      if (exc instanceof SolrException) {\n        throw (SolrException) exc;\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Failed to read data from znodePath: \" + znodePath, exc);\n      }\n    }\n\n    Map<String, Object> stateObj = null;\n    if (stateData != null && stateData.length > 0) {\n      // TODO: Remove later ... this is for upgrading from 4.8.x to 4.10.3 (see: SOLR-6732)\n      if (stateData[0] == (byte) '{') {\n        Object parsedJson = ZkStateReader.fromJSON(stateData);\n        if (parsedJson instanceof Map) {\n          stateObj = (Map<String, Object>) parsedJson;\n        } else {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Leader-initiated recovery state data is invalid! \" + parsedJson);\n        }\n      } else {\n        // old format still in ZK\n        stateObj = ZkNodeProps.makeMap(\"state\", new String(stateData, StandardCharsets.UTF_8));\n      }\n    }\n\n    return stateObj;\n  }\n\n","sourceOld":"  public Map<String,Object> getLeaderInitiatedRecoveryStateObject(String collection, String shardId, String coreNodeName) {\n\n    if (collection == null || shardId == null || coreNodeName == null)\n      return null; // if we don't have complete data about a core in cloud mode, return null\n    \n    String znodePath = getLeaderInitiatedRecoveryZnodePath(collection, shardId, coreNodeName);\n    byte[] stateData = null;\n    try {\n      stateData = zkClient.getData(znodePath, null, new Stat(), false);\n    } catch (NoNodeException ignoreMe) {\n      // safe to ignore as this znode will only exist if the leader initiated recovery\n    } catch (ConnectionLossException | SessionExpiredException cle) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \"+znodePath+\" due to: \"+cle);\n    } catch (Exception exc) {\n      log.error(\"Failed to read data from znode \"+znodePath+\" due to: \"+exc);\n      if (exc instanceof SolrException) {\n        throw (SolrException)exc;\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Failed to read data from znodePath: \"+znodePath, exc);\n      }\n    }\n\n    Map<String,Object> stateObj = null;\n    if (stateData != null && stateData.length > 0) {\n      // TODO: Remove later ... this is for upgrading from 4.8.x to 4.10.3 (see: SOLR-6732)\n      if (stateData[0] == (byte)'{') {\n        Object parsedJson = ZkStateReader.fromJSON(stateData);\n        if (parsedJson instanceof Map) {\n          stateObj = (Map<String,Object>)parsedJson;\n        } else {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Leader-initiated recovery state data is invalid! \"+parsedJson);\n        }\n      } else {\n        // old format still in ZK\n        stateObj = ZkNodeProps.makeMap(\"state\", new String(stateData, StandardCharsets.UTF_8));\n      }\n    }\n\n    return stateObj;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryStateObject(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryStateObject(String,String,String).mjava","sourceNew":"  public Map<String, Object> getLeaderInitiatedRecoveryStateObject(String collection, String shardId, String coreNodeName) {\n\n    if (collection == null || shardId == null || coreNodeName == null)\n      return null; // if we don't have complete data about a core in cloud mode, return null\n\n    String znodePath = getLeaderInitiatedRecoveryZnodePath(collection, shardId, coreNodeName);\n    byte[] stateData = null;\n    try {\n      stateData = zkClient.getData(znodePath, null, new Stat(), false);\n    } catch (NoNodeException ignoreMe) {\n      // safe to ignore as this znode will only exist if the leader initiated recovery\n    } catch (ConnectionLossException | SessionExpiredException cle) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \" + znodePath + \" due to: \" + cle);\n    } catch (Exception exc) {\n      log.error(\"Failed to read data from znode \" + znodePath + \" due to: \" + exc);\n      if (exc instanceof SolrException) {\n        throw (SolrException) exc;\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Failed to read data from znodePath: \" + znodePath, exc);\n      }\n    }\n\n    Map<String, Object> stateObj = null;\n    if (stateData != null && stateData.length > 0) {\n      // TODO: Remove later ... this is for upgrading from 4.8.x to 4.10.3 (see: SOLR-6732)\n      if (stateData[0] == (byte) '{') {\n        Object parsedJson = ZkStateReader.fromJSON(stateData);\n        if (parsedJson instanceof Map) {\n          stateObj = (Map<String, Object>) parsedJson;\n        } else {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Leader-initiated recovery state data is invalid! \" + parsedJson);\n        }\n      } else {\n        // old format still in ZK\n        stateObj = ZkNodeProps.makeMap(\"state\", new String(stateData, StandardCharsets.UTF_8));\n      }\n    }\n\n    return stateObj;\n  }\n\n","sourceOld":"  public Map<String,Object> getLeaderInitiatedRecoveryStateObject(String collection, String shardId, String coreNodeName) {\n\n    if (collection == null || shardId == null || coreNodeName == null)\n      return null; // if we don't have complete data about a core in cloud mode, return null\n    \n    String znodePath = getLeaderInitiatedRecoveryZnodePath(collection, shardId, coreNodeName);\n    byte[] stateData = null;\n    try {\n      stateData = zkClient.getData(znodePath, null, new Stat(), false);\n    } catch (NoNodeException ignoreMe) {\n      // safe to ignore as this znode will only exist if the leader initiated recovery\n    } catch (ConnectionLossException | SessionExpiredException cle) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \"+znodePath+\" due to: \"+cle);\n    } catch (Exception exc) {\n      log.error(\"Failed to read data from znode \"+znodePath+\" due to: \"+exc);\n      if (exc instanceof SolrException) {\n        throw (SolrException)exc;\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Failed to read data from znodePath: \"+znodePath, exc);\n      }\n    }\n\n    Map<String,Object> stateObj = null;\n    if (stateData != null && stateData.length > 0) {\n      // TODO: Remove later ... this is for upgrading from 4.8.x to 4.10.3 (see: SOLR-6732)\n      if (stateData[0] == (byte)'{') {\n        Object parsedJson = ZkStateReader.fromJSON(stateData);\n        if (parsedJson instanceof Map) {\n          stateObj = (Map<String,Object>)parsedJson;\n        } else {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Leader-initiated recovery state data is invalid! \"+parsedJson);\n        }\n      } else {\n        // old format still in ZK\n        stateObj = ZkNodeProps.makeMap(\"state\", new String(stateData, StandardCharsets.UTF_8));\n      }\n    }\n\n    return stateObj;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryStateObject(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryStateObject(String,String,String).mjava","sourceNew":"  public Map<String, Object> getLeaderInitiatedRecoveryStateObject(String collection, String shardId, String coreNodeName) {\n\n    if (collection == null || shardId == null || coreNodeName == null)\n      return null; // if we don't have complete data about a core in cloud mode, return null\n\n    String znodePath = getLeaderInitiatedRecoveryZnodePath(collection, shardId, coreNodeName);\n    byte[] stateData = null;\n    try {\n      stateData = zkClient.getData(znodePath, null, new Stat(), false);\n    } catch (NoNodeException ignoreMe) {\n      // safe to ignore as this znode will only exist if the leader initiated recovery\n    } catch (ConnectionLossException | SessionExpiredException cle) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \" + znodePath + \" due to: \" + cle);\n    } catch (Exception exc) {\n      log.error(\"Failed to read data from znode \" + znodePath + \" due to: \" + exc);\n      if (exc instanceof SolrException) {\n        throw (SolrException) exc;\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Failed to read data from znodePath: \" + znodePath, exc);\n      }\n    }\n\n    Map<String, Object> stateObj = null;\n    if (stateData != null && stateData.length > 0) {\n      // TODO: Remove later ... this is for upgrading from 4.8.x to 4.10.3 (see: SOLR-6732)\n      if (stateData[0] == (byte) '{') {\n        Object parsedJson = Utils.fromJSON(stateData);\n        if (parsedJson instanceof Map) {\n          stateObj = (Map<String, Object>) parsedJson;\n        } else {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Leader-initiated recovery state data is invalid! \" + parsedJson);\n        }\n      } else {\n        // old format still in ZK\n        stateObj = Utils.makeMap(\"state\", new String(stateData, StandardCharsets.UTF_8));\n      }\n    }\n\n    return stateObj;\n  }\n\n","sourceOld":"  public Map<String, Object> getLeaderInitiatedRecoveryStateObject(String collection, String shardId, String coreNodeName) {\n\n    if (collection == null || shardId == null || coreNodeName == null)\n      return null; // if we don't have complete data about a core in cloud mode, return null\n\n    String znodePath = getLeaderInitiatedRecoveryZnodePath(collection, shardId, coreNodeName);\n    byte[] stateData = null;\n    try {\n      stateData = zkClient.getData(znodePath, null, new Stat(), false);\n    } catch (NoNodeException ignoreMe) {\n      // safe to ignore as this znode will only exist if the leader initiated recovery\n    } catch (ConnectionLossException | SessionExpiredException cle) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \" + znodePath + \" due to: \" + cle);\n    } catch (Exception exc) {\n      log.error(\"Failed to read data from znode \" + znodePath + \" due to: \" + exc);\n      if (exc instanceof SolrException) {\n        throw (SolrException) exc;\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Failed to read data from znodePath: \" + znodePath, exc);\n      }\n    }\n\n    Map<String, Object> stateObj = null;\n    if (stateData != null && stateData.length > 0) {\n      // TODO: Remove later ... this is for upgrading from 4.8.x to 4.10.3 (see: SOLR-6732)\n      if (stateData[0] == (byte) '{') {\n        Object parsedJson = ZkStateReader.fromJSON(stateData);\n        if (parsedJson instanceof Map) {\n          stateObj = (Map<String, Object>) parsedJson;\n        } else {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Leader-initiated recovery state data is invalid! \" + parsedJson);\n        }\n      } else {\n        // old format still in ZK\n        stateObj = ZkNodeProps.makeMap(\"state\", new String(stateData, StandardCharsets.UTF_8));\n      }\n    }\n\n    return stateObj;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84f20f331d8001864545c7021812d8c6509c7593","date":1517216128,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryStateObject(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryStateObject(String,String,String).mjava","sourceNew":"  @Deprecated\n  public Map<String, Object> getLeaderInitiatedRecoveryStateObject(String collection, String shardId, String coreNodeName) {\n\n    if (collection == null || shardId == null || coreNodeName == null)\n      return null; // if we don't have complete data about a core in cloud mode, return null\n\n    String znodePath = getLeaderInitiatedRecoveryZnodePath(collection, shardId, coreNodeName);\n    byte[] stateData = null;\n    try {\n      stateData = zkClient.getData(znodePath, null, new Stat(), false);\n    } catch (NoNodeException ignoreMe) {\n      // safe to ignore as this znode will only exist if the leader initiated recovery\n    } catch (ConnectionLossException | SessionExpiredException cle) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \" + znodePath + \" due to: \" + cle);\n    } catch (Exception exc) {\n      log.error(\"Failed to read data from znode \" + znodePath + \" due to: \" + exc);\n      if (exc instanceof SolrException) {\n        throw (SolrException) exc;\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Failed to read data from znodePath: \" + znodePath, exc);\n      }\n    }\n\n    Map<String, Object> stateObj = null;\n    if (stateData != null && stateData.length > 0) {\n      // TODO: Remove later ... this is for upgrading from 4.8.x to 4.10.3 (see: SOLR-6732)\n      if (stateData[0] == (byte) '{') {\n        Object parsedJson = Utils.fromJSON(stateData);\n        if (parsedJson instanceof Map) {\n          stateObj = (Map<String, Object>) parsedJson;\n        } else {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Leader-initiated recovery state data is invalid! \" + parsedJson);\n        }\n      } else {\n        // old format still in ZK\n        stateObj = Utils.makeMap(\"state\", new String(stateData, StandardCharsets.UTF_8));\n      }\n    }\n\n    return stateObj;\n  }\n\n","sourceOld":"  public Map<String, Object> getLeaderInitiatedRecoveryStateObject(String collection, String shardId, String coreNodeName) {\n\n    if (collection == null || shardId == null || coreNodeName == null)\n      return null; // if we don't have complete data about a core in cloud mode, return null\n\n    String znodePath = getLeaderInitiatedRecoveryZnodePath(collection, shardId, coreNodeName);\n    byte[] stateData = null;\n    try {\n      stateData = zkClient.getData(znodePath, null, new Stat(), false);\n    } catch (NoNodeException ignoreMe) {\n      // safe to ignore as this znode will only exist if the leader initiated recovery\n    } catch (ConnectionLossException | SessionExpiredException cle) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \" + znodePath + \" due to: \" + cle);\n    } catch (Exception exc) {\n      log.error(\"Failed to read data from znode \" + znodePath + \" due to: \" + exc);\n      if (exc instanceof SolrException) {\n        throw (SolrException) exc;\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Failed to read data from znodePath: \" + znodePath, exc);\n      }\n    }\n\n    Map<String, Object> stateObj = null;\n    if (stateData != null && stateData.length > 0) {\n      // TODO: Remove later ... this is for upgrading from 4.8.x to 4.10.3 (see: SOLR-6732)\n      if (stateData[0] == (byte) '{') {\n        Object parsedJson = Utils.fromJSON(stateData);\n        if (parsedJson instanceof Map) {\n          stateObj = (Map<String, Object>) parsedJson;\n        } else {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Leader-initiated recovery state data is invalid! \" + parsedJson);\n        }\n      } else {\n        // old format still in ZK\n        stateObj = Utils.makeMap(\"state\", new String(stateData, StandardCharsets.UTF_8));\n      }\n    }\n\n    return stateObj;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180","date":1539076849,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderInitiatedRecoveryStateObject(String,String,String).mjava","sourceNew":null,"sourceOld":"  @Deprecated\n  public Map<String, Object> getLeaderInitiatedRecoveryStateObject(String collection, String shardId, String coreNodeName) {\n\n    if (collection == null || shardId == null || coreNodeName == null)\n      return null; // if we don't have complete data about a core in cloud mode, return null\n\n    String znodePath = getLeaderInitiatedRecoveryZnodePath(collection, shardId, coreNodeName);\n    byte[] stateData = null;\n    try {\n      stateData = zkClient.getData(znodePath, null, new Stat(), false);\n    } catch (NoNodeException ignoreMe) {\n      // safe to ignore as this znode will only exist if the leader initiated recovery\n    } catch (ConnectionLossException | SessionExpiredException cle) {\n      // sort of safe to ignore ??? Usually these are seen when the core is going down\n      // or there are bigger issues to deal with than reading this znode\n      log.warn(\"Unable to read \" + znodePath + \" due to: \" + cle);\n    } catch (Exception exc) {\n      log.error(\"Failed to read data from znode \" + znodePath + \" due to: \" + exc);\n      if (exc instanceof SolrException) {\n        throw (SolrException) exc;\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Failed to read data from znodePath: \" + znodePath, exc);\n      }\n    }\n\n    Map<String, Object> stateObj = null;\n    if (stateData != null && stateData.length > 0) {\n      // TODO: Remove later ... this is for upgrading from 4.8.x to 4.10.3 (see: SOLR-6732)\n      if (stateData[0] == (byte) '{') {\n        Object parsedJson = Utils.fromJSON(stateData);\n        if (parsedJson instanceof Map) {\n          stateObj = (Map<String, Object>) parsedJson;\n        } else {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Leader-initiated recovery state data is invalid! \" + parsedJson);\n        }\n      } else {\n        // old format still in ZK\n        stateObj = Utils.makeMap(\"state\", new String(stateData, StandardCharsets.UTF_8));\n      }\n    }\n\n    return stateObj;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e758245b4acfbc0eae618c8f5d49f799d3b33157":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c6e1dc1bb4254226c8d7151b596cc1be40671751":["3f12b7260301796a1d2c5d6d3bbf5295b19ef0b7"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c6e1dc1bb4254226c8d7151b596cc1be40671751","fbcfc050b9f253136eaa5950b57248b2109eac11"],"55980207f1977bd1463465de1659b821347e2fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c2a679043992bca8ff293014b1891a5ab9462d9c"],"3f12b7260301796a1d2c5d6d3bbf5295b19ef0b7":["c2a679043992bca8ff293014b1891a5ab9462d9c"],"c2a679043992bca8ff293014b1891a5ab9462d9c":["e758245b4acfbc0eae618c8f5d49f799d3b33157"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"84f20f331d8001864545c7021812d8c6509c7593":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180":["84f20f331d8001864545c7021812d8c6509c7593"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["c6e1dc1bb4254226c8d7151b596cc1be40671751"]},"commit2Childs":{"e758245b4acfbc0eae618c8f5d49f799d3b33157":["c2a679043992bca8ff293014b1891a5ab9462d9c"],"c6e1dc1bb4254226c8d7151b596cc1be40671751":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fbcfc050b9f253136eaa5950b57248b2109eac11"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"55980207f1977bd1463465de1659b821347e2fa8":[],"3f12b7260301796a1d2c5d6d3bbf5295b19ef0b7":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e758245b4acfbc0eae618c8f5d49f799d3b33157","55980207f1977bd1463465de1659b821347e2fa8"],"c2a679043992bca8ff293014b1891a5ab9462d9c":["55980207f1977bd1463465de1659b821347e2fa8","3f12b7260301796a1d2c5d6d3bbf5295b19ef0b7"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["84f20f331d8001864545c7021812d8c6509c7593"],"84f20f331d8001864545c7021812d8c6509c7593":["b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180"],"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b693a83132c9e45afcd564fd65a25b60ed80388b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}