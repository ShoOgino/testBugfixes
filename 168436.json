{"path":"lucene/core/src/java/org/apache/lucene/search/FieldComparatorSource#newComparator(String,int,int,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparatorSource#newComparator(String,int,int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparatorSource#newComparator(String,int,int,boolean).mjava","sourceNew":"  /**\n   * Creates a comparator for the field in the given index.\n   * \n   * @param fieldname\n   *          Name of the field to create comparator for.\n   * @return FieldComparator.\n   * @throws IOException\n   *           If an error occurs reading the index.\n   */\n  public abstract FieldComparator newComparator(String fieldname, int numHits, int sortPos, boolean reversed)\n      throws IOException;\n\n","sourceOld":"  /**\n   * Creates a comparator for the field in the given index.\n   * \n   * @param fieldname\n   *          Name of the field to create comparator for.\n   * @return FieldComparator.\n   * @throws IOException\n   *           If an error occurs reading the index.\n   */\n  public abstract FieldComparator newComparator(String fieldname, int numHits, int sortPos, boolean reversed)\n      throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparatorSource#newComparator(String,int,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparatorSource#newComparator(String,int,int,boolean).mjava","sourceNew":"  /**\n   * Creates a comparator for the field in the given index.\n   * \n   * @param fieldname\n   *          Name of the field to create comparator for.\n   * @return FieldComparator.\n   * @throws IOException\n   *           If an error occurs reading the index.\n   */\n  public abstract FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed)\n      throws IOException;\n\n","sourceOld":"  /**\n   * Creates a comparator for the field in the given index.\n   * \n   * @param fieldname\n   *          Name of the field to create comparator for.\n   * @return FieldComparator.\n   * @throws IOException\n   *           If an error occurs reading the index.\n   */\n  public abstract FieldComparator newComparator(String fieldname, int numHits, int sortPos, boolean reversed)\n      throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparatorSource#newComparator(String,int,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparatorSource#newComparator(String,int,int,boolean).mjava","sourceNew":"  /**\n   * Creates a comparator for the field in the given index.\n   * \n   * @param fieldname\n   *          Name of the field to create comparator for.\n   * @return FieldComparator.\n   * @throws IOException\n   *           If an error occurs reading the index.\n   */\n  public abstract FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed)\n      throws IOException;\n\n","sourceOld":"  /**\n   * Creates a comparator for the field in the given index.\n   * \n   * @param fieldname\n   *          Name of the field to create comparator for.\n   * @return FieldComparator.\n   * @throws IOException\n   *           If an error occurs reading the index.\n   */\n  public abstract FieldComparator newComparator(String fieldname, int numHits, int sortPos, boolean reversed)\n      throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e38c6374c23083c93e212a9498ff0a9c255476","date":1484767039,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparatorSource#newComparator(String,int,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparatorSource#newComparator(String,int,int,boolean).mjava","sourceNew":"  /**\n   * Creates a comparator for the field in the given index.\n   * \n   * @param fieldname\n   *          Name of the field to create comparator for.\n   * @return FieldComparator.\n   */\n  public abstract FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed);\n\n","sourceOld":"  /**\n   * Creates a comparator for the field in the given index.\n   * \n   * @param fieldname\n   *          Name of the field to create comparator for.\n   * @return FieldComparator.\n   * @throws IOException\n   *           If an error occurs reading the index.\n   */\n  public abstract FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed)\n      throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparatorSource#newComparator(String,int,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparatorSource#newComparator(String,int,int,boolean).mjava","sourceNew":"  /**\n   * Creates a comparator for the field in the given index.\n   * \n   * @param fieldname\n   *          Name of the field to create comparator for.\n   * @return FieldComparator.\n   */\n  public abstract FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed);\n\n","sourceOld":"  /**\n   * Creates a comparator for the field in the given index.\n   * \n   * @param fieldname\n   *          Name of the field to create comparator for.\n   * @return FieldComparator.\n   * @throws IOException\n   *           If an error occurs reading the index.\n   */\n  public abstract FieldComparator<?> newComparator(String fieldname, int numHits, int sortPos, boolean reversed)\n      throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"03e38c6374c23083c93e212a9498ff0a9c255476":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["f08557cdb6c60ac7b88a9342c983a20cd236e74f","03e38c6374c23083c93e212a9498ff0a9c255476"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e38c6374c23083c93e212a9498ff0a9c255476"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"03e38c6374c23083c93e212a9498ff0a9c255476":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","03e38c6374c23083c93e212a9498ff0a9c255476","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}