{"path":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.Reader#get(int,long[],int,int).mjava","commits":[{"id":"747628bb19a950ac2141b16756bdce9a47e94cc2","date":1338661284,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.Reader#get(int,long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Bulk get: read at least one and at most <code>len</code> longs starting\n     * from <code>index</code> into <code>arr[off:off+len]</code> and return\n     * the actual number of values that have been read.\n     */\n    int get(int index, long[] arr, int off, int len);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d50d971859a3c7841c17117b0aac14e733441ebf","date":1384264257,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.Reader#get(int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts.Reader#get(int,long[],int,int).mjava","sourceNew":"    /**\n     * Bulk get: read at least one and at most <code>len</code> longs starting\n     * from <code>index</code> into <code>arr[off:off+len]</code> and return\n     * the actual number of values that have been read.\n     */\n    public int get(int index, long[] arr, int off, int len) {\n      assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n      assert index >= 0 && index < size();\n      assert off + len <= arr.length;\n\n      final int gets = Math.min(size() - index, len);\n      for (int i = index, o = off, end = index + gets; i < end; ++i, ++o) {\n        arr[o] = get(i);\n      }\n      return gets;\n    }\n\n","sourceOld":"    /**\n     * Bulk get: read at least one and at most <code>len</code> longs starting\n     * from <code>index</code> into <code>arr[off:off+len]</code> and return\n     * the actual number of values that have been read.\n     */\n    int get(int index, long[] arr, int off, int len);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d50d971859a3c7841c17117b0aac14e733441ebf":["747628bb19a950ac2141b16756bdce9a47e94cc2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"747628bb19a950ac2141b16756bdce9a47e94cc2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d50d971859a3c7841c17117b0aac14e733441ebf"]},"commit2Childs":{"d50d971859a3c7841c17117b0aac14e733441ebf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["747628bb19a950ac2141b16756bdce9a47e94cc2"],"747628bb19a950ac2141b16756bdce9a47e94cc2":["d50d971859a3c7841c17117b0aac14e733441ebf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}