{"path":"solr/core/src/java/org/apache/solr/schema/TrieField#init(IndexSchema,Map[String,String]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    String p = args.remove(\"precisionStep\");\n    if (p != null) {\n       precisionStepArg = Integer.parseInt(p);\n    }\n    // normalize the precisionStep\n    precisionStep = precisionStepArg;\n    if (precisionStep<=0 || precisionStep>=64) precisionStep=Integer.MAX_VALUE;\n    String t = args.remove(\"type\");\n\n    if (t != null) {\n      try {\n        type = TrieTypes.valueOf(t.toUpperCase(Locale.ENGLISH));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid type specified in schema.xml for field: \" + args.get(\"name\"), e);\n      }\n    }\n  \n    \n    CharFilterFactory[] filterFactories = new CharFilterFactory[0];\n    TokenFilterFactory[] tokenFilterFactories = new TokenFilterFactory[0];\n    analyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, precisionStep), tokenFilterFactories);\n    // for query time we only need one token, so we use the biggest possible precisionStep:\n    queryAnalyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, Integer.MAX_VALUE), tokenFilterFactories);\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    String p = args.remove(\"precisionStep\");\n    if (p != null) {\n       precisionStepArg = Integer.parseInt(p);\n    }\n    // normalize the precisionStep\n    precisionStep = precisionStepArg;\n    if (precisionStep<=0 || precisionStep>=64) precisionStep=Integer.MAX_VALUE;\n    String t = args.remove(\"type\");\n\n    if (t != null) {\n      try {\n        type = TrieTypes.valueOf(t.toUpperCase(Locale.ENGLISH));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid type specified in schema.xml for field: \" + args.get(\"name\"), e);\n      }\n    }\n  \n    \n    CharFilterFactory[] filterFactories = new CharFilterFactory[0];\n    TokenFilterFactory[] tokenFilterFactories = new TokenFilterFactory[0];\n    analyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, precisionStep), tokenFilterFactories);\n    // for query time we only need one token, so we use the biggest possible precisionStep:\n    queryAnalyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, Integer.MAX_VALUE), tokenFilterFactories);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    String p = args.remove(\"precisionStep\");\n    if (p != null) {\n       precisionStepArg = Integer.parseInt(p);\n    }\n    // normalize the precisionStep\n    precisionStep = precisionStepArg;\n    if (precisionStep<=0 || precisionStep>=64) precisionStep=Integer.MAX_VALUE;\n    String t = args.remove(\"type\");\n\n    if (t != null) {\n      try {\n        type = TrieTypes.valueOf(t.toUpperCase(Locale.ENGLISH));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid type specified in schema.xml for field: \" + args.get(\"name\"), e);\n      }\n    }\n  \n    \n    CharFilterFactory[] filterFactories = new CharFilterFactory[0];\n    TokenFilterFactory[] tokenFilterFactories = new TokenFilterFactory[0];\n    analyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, precisionStep), tokenFilterFactories);\n    // for query time we only need one token, so we use the biggest possible precisionStep:\n    queryAnalyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, Integer.MAX_VALUE), tokenFilterFactories);\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    String p = args.remove(\"precisionStep\");\n    if (p != null) {\n       precisionStepArg = Integer.parseInt(p);\n    }\n    // normalize the precisionStep\n    precisionStep = precisionStepArg;\n    if (precisionStep<=0 || precisionStep>=64) precisionStep=Integer.MAX_VALUE;\n    String t = args.remove(\"type\");\n\n    if (t != null) {\n      try {\n        type = TrieTypes.valueOf(t.toUpperCase(Locale.ENGLISH));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid type specified in schema.xml for field: \" + args.get(\"name\"), e);\n      }\n    }\n  \n    \n    CharFilterFactory[] filterFactories = new CharFilterFactory[0];\n    TokenFilterFactory[] tokenFilterFactories = new TokenFilterFactory[0];\n    analyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, precisionStep), tokenFilterFactories);\n    // for query time we only need one token, so we use the biggest possible precisionStep:\n    queryAnalyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, Integer.MAX_VALUE), tokenFilterFactories);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    String p = args.remove(\"precisionStep\");\n    if (p != null) {\n       precisionStepArg = Integer.parseInt(p);\n    }\n    // normalize the precisionStep\n    precisionStep = precisionStepArg;\n    if (precisionStep<=0 || precisionStep>=64) precisionStep=Integer.MAX_VALUE;\n    String t = args.remove(\"type\");\n\n    if (t != null) {\n      try {\n        type = TrieTypes.valueOf(t.toUpperCase(Locale.ENGLISH));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid type specified in schema.xml for field: \" + args.get(\"name\"), e);\n      }\n    }\n  \n    \n    CharFilterFactory[] filterFactories = new CharFilterFactory[0];\n    TokenFilterFactory[] tokenFilterFactories = new TokenFilterFactory[0];\n    analyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, precisionStep), tokenFilterFactories);\n    // for query time we only need one token, so we use the biggest possible precisionStep:\n    queryAnalyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, Integer.MAX_VALUE), tokenFilterFactories);\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    String p = args.remove(\"precisionStep\");\n    if (p != null) {\n       precisionStepArg = Integer.parseInt(p);\n    }\n    // normalize the precisionStep\n    precisionStep = precisionStepArg;\n    if (precisionStep<=0 || precisionStep>=64) precisionStep=Integer.MAX_VALUE;\n    String t = args.remove(\"type\");\n\n    if (t != null) {\n      try {\n        type = TrieTypes.valueOf(t.toUpperCase(Locale.ENGLISH));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid type specified in schema.xml for field: \" + args.get(\"name\"), e);\n      }\n    }\n  \n    \n    CharFilterFactory[] filterFactories = new CharFilterFactory[0];\n    TokenFilterFactory[] tokenFilterFactories = new TokenFilterFactory[0];\n    analyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, precisionStep), tokenFilterFactories);\n    // for query time we only need one token, so we use the biggest possible precisionStep:\n    queryAnalyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, Integer.MAX_VALUE), tokenFilterFactories);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91ff9f86f49c7758569ecdb69141488f34acd3dc","date":1331215419,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String p = args.remove(\"precisionStep\");\n    if (p != null) {\n       precisionStepArg = Integer.parseInt(p);\n    }\n    // normalize the precisionStep\n    precisionStep = precisionStepArg;\n    if (precisionStep<=0 || precisionStep>=64) precisionStep=Integer.MAX_VALUE;\n    String t = args.remove(\"type\");\n\n    if (t != null) {\n      try {\n        type = TrieTypes.valueOf(t.toUpperCase(Locale.ENGLISH));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid type specified in schema.xml for field: \" + args.get(\"name\"), e);\n      }\n    }\n  \n    \n    CharFilterFactory[] filterFactories = new CharFilterFactory[0];\n    TokenFilterFactory[] tokenFilterFactories = new TokenFilterFactory[0];\n    analyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, precisionStep), tokenFilterFactories);\n    // for query time we only need one token, so we use the biggest possible precisionStep:\n    queryAnalyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, Integer.MAX_VALUE), tokenFilterFactories);\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    String p = args.remove(\"precisionStep\");\n    if (p != null) {\n       precisionStepArg = Integer.parseInt(p);\n    }\n    // normalize the precisionStep\n    precisionStep = precisionStepArg;\n    if (precisionStep<=0 || precisionStep>=64) precisionStep=Integer.MAX_VALUE;\n    String t = args.remove(\"type\");\n\n    if (t != null) {\n      try {\n        type = TrieTypes.valueOf(t.toUpperCase(Locale.ENGLISH));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid type specified in schema.xml for field: \" + args.get(\"name\"), e);\n      }\n    }\n  \n    \n    CharFilterFactory[] filterFactories = new CharFilterFactory[0];\n    TokenFilterFactory[] tokenFilterFactories = new TokenFilterFactory[0];\n    analyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, precisionStep), tokenFilterFactories);\n    // for query time we only need one token, so we use the biggest possible precisionStep:\n    queryAnalyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, Integer.MAX_VALUE), tokenFilterFactories);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String p = args.remove(\"precisionStep\");\n    if (p != null) {\n       precisionStepArg = Integer.parseInt(p);\n    }\n    // normalize the precisionStep\n    precisionStep = precisionStepArg;\n    if (precisionStep<=0 || precisionStep>=64) precisionStep=Integer.MAX_VALUE;\n    String t = args.remove(\"type\");\n\n    if (t != null) {\n      try {\n        type = TrieTypes.valueOf(t.toUpperCase(Locale.ENGLISH));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid type specified in schema.xml for field: \" + args.get(\"name\"), e);\n      }\n    }\n  \n    \n    CharFilterFactory[] filterFactories = new CharFilterFactory[0];\n    TokenFilterFactory[] tokenFilterFactories = new TokenFilterFactory[0];\n    analyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, precisionStep), tokenFilterFactories);\n    // for query time we only need one token, so we use the biggest possible precisionStep:\n    queryAnalyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, Integer.MAX_VALUE), tokenFilterFactories);\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    String p = args.remove(\"precisionStep\");\n    if (p != null) {\n       precisionStepArg = Integer.parseInt(p);\n    }\n    // normalize the precisionStep\n    precisionStep = precisionStepArg;\n    if (precisionStep<=0 || precisionStep>=64) precisionStep=Integer.MAX_VALUE;\n    String t = args.remove(\"type\");\n\n    if (t != null) {\n      try {\n        type = TrieTypes.valueOf(t.toUpperCase(Locale.ENGLISH));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid type specified in schema.xml for field: \" + args.get(\"name\"), e);\n      }\n    }\n  \n    \n    CharFilterFactory[] filterFactories = new CharFilterFactory[0];\n    TokenFilterFactory[] tokenFilterFactories = new TokenFilterFactory[0];\n    analyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, precisionStep), tokenFilterFactories);\n    // for query time we only need one token, so we use the biggest possible precisionStep:\n    queryAnalyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, Integer.MAX_VALUE), tokenFilterFactories);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String p = args.remove(\"precisionStep\");\n    if (p != null) {\n       precisionStepArg = Integer.parseInt(p);\n    }\n    // normalize the precisionStep\n    precisionStep = precisionStepArg;\n    if (precisionStep<=0 || precisionStep>=64) precisionStep=Integer.MAX_VALUE;\n    String t = args.remove(\"type\");\n\n    if (t != null) {\n      try {\n        type = TrieTypes.valueOf(t.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid type specified in schema.xml for field: \" + args.get(\"name\"), e);\n      }\n    }\n  \n    \n    CharFilterFactory[] filterFactories = new CharFilterFactory[0];\n    TokenFilterFactory[] tokenFilterFactories = new TokenFilterFactory[0];\n    analyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, precisionStep), tokenFilterFactories);\n    // for query time we only need one token, so we use the biggest possible precisionStep:\n    queryAnalyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, Integer.MAX_VALUE), tokenFilterFactories);\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String p = args.remove(\"precisionStep\");\n    if (p != null) {\n       precisionStepArg = Integer.parseInt(p);\n    }\n    // normalize the precisionStep\n    precisionStep = precisionStepArg;\n    if (precisionStep<=0 || precisionStep>=64) precisionStep=Integer.MAX_VALUE;\n    String t = args.remove(\"type\");\n\n    if (t != null) {\n      try {\n        type = TrieTypes.valueOf(t.toUpperCase(Locale.ENGLISH));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid type specified in schema.xml for field: \" + args.get(\"name\"), e);\n      }\n    }\n  \n    \n    CharFilterFactory[] filterFactories = new CharFilterFactory[0];\n    TokenFilterFactory[] tokenFilterFactories = new TokenFilterFactory[0];\n    analyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, precisionStep), tokenFilterFactories);\n    // for query time we only need one token, so we use the biggest possible precisionStep:\n    queryAnalyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, Integer.MAX_VALUE), tokenFilterFactories);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String p = args.remove(\"precisionStep\");\n    if (p != null) {\n       precisionStepArg = Integer.parseInt(p);\n    }\n    // normalize the precisionStep\n    precisionStep = precisionStepArg;\n    if (precisionStep<=0 || precisionStep>=64) precisionStep=Integer.MAX_VALUE;\n    String t = args.remove(\"type\");\n\n    if (t != null) {\n      try {\n        type = TrieTypes.valueOf(t.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid type specified in schema.xml for field: \" + args.get(\"name\"), e);\n      }\n    }\n  \n    \n    CharFilterFactory[] filterFactories = new CharFilterFactory[0];\n    TokenFilterFactory[] tokenFilterFactories = new TokenFilterFactory[0];\n    analyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, precisionStep), tokenFilterFactories);\n    // for query time we only need one token, so we use the biggest possible precisionStep:\n    queryAnalyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, Integer.MAX_VALUE), tokenFilterFactories);\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String p = args.remove(\"precisionStep\");\n    if (p != null) {\n       precisionStepArg = Integer.parseInt(p);\n    }\n    // normalize the precisionStep\n    precisionStep = precisionStepArg;\n    if (precisionStep<=0 || precisionStep>=64) precisionStep=Integer.MAX_VALUE;\n    String t = args.remove(\"type\");\n\n    if (t != null) {\n      try {\n        type = TrieTypes.valueOf(t.toUpperCase(Locale.ENGLISH));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid type specified in schema.xml for field: \" + args.get(\"name\"), e);\n      }\n    }\n  \n    \n    CharFilterFactory[] filterFactories = new CharFilterFactory[0];\n    TokenFilterFactory[] tokenFilterFactories = new TokenFilterFactory[0];\n    analyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, precisionStep), tokenFilterFactories);\n    // for query time we only need one token, so we use the biggest possible precisionStep:\n    queryAnalyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, Integer.MAX_VALUE), tokenFilterFactories);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String p = args.remove(\"precisionStep\");\n    if (p != null) {\n       precisionStepArg = Integer.parseInt(p);\n    }\n    // normalize the precisionStep\n    precisionStep = precisionStepArg;\n    if (precisionStep<=0 || precisionStep>=64) precisionStep=Integer.MAX_VALUE;\n    String t = args.remove(\"type\");\n\n    if (t != null) {\n      try {\n        type = TrieTypes.valueOf(t.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid type specified in schema.xml for field: \" + args.get(\"name\"), e);\n      }\n    }\n  \n    \n    CharFilterFactory[] filterFactories = new CharFilterFactory[0];\n    TokenFilterFactory[] tokenFilterFactories = new TokenFilterFactory[0];\n    analyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, precisionStep), tokenFilterFactories);\n    // for query time we only need one token, so we use the biggest possible precisionStep:\n    queryAnalyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, Integer.MAX_VALUE), tokenFilterFactories);\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String p = args.remove(\"precisionStep\");\n    if (p != null) {\n       precisionStepArg = Integer.parseInt(p);\n    }\n    // normalize the precisionStep\n    precisionStep = precisionStepArg;\n    if (precisionStep<=0 || precisionStep>=64) precisionStep=Integer.MAX_VALUE;\n    String t = args.remove(\"type\");\n\n    if (t != null) {\n      try {\n        type = TrieTypes.valueOf(t.toUpperCase(Locale.ENGLISH));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid type specified in schema.xml for field: \" + args.get(\"name\"), e);\n      }\n    }\n  \n    \n    CharFilterFactory[] filterFactories = new CharFilterFactory[0];\n    TokenFilterFactory[] tokenFilterFactories = new TokenFilterFactory[0];\n    analyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, precisionStep), tokenFilterFactories);\n    // for query time we only need one token, so we use the biggest possible precisionStep:\n    queryAnalyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, Integer.MAX_VALUE), tokenFilterFactories);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String p = args.remove(\"precisionStep\");\n    if (p != null) {\n       precisionStepArg = Integer.parseInt(p);\n    }\n    // normalize the precisionStep\n    precisionStep = precisionStepArg;\n    if (precisionStep<=0 || precisionStep>=64) precisionStep=Integer.MAX_VALUE;\n    String t = args.remove(\"type\");\n\n    if (t != null) {\n      try {\n        type = TrieTypes.valueOf(t.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid type specified in schema.xml for field: \" + args.get(\"name\"), e);\n      }\n    }\n  \n    \n    CharFilterFactory[] filterFactories = new CharFilterFactory[0];\n    TokenFilterFactory[] tokenFilterFactories = new TokenFilterFactory[0];\n    analyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, precisionStep), tokenFilterFactories);\n    // for query time we only need one token, so we use the biggest possible precisionStep:\n    queryAnalyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, Integer.MAX_VALUE), tokenFilterFactories);\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String p = args.remove(\"precisionStep\");\n    if (p != null) {\n       precisionStepArg = Integer.parseInt(p);\n    }\n    // normalize the precisionStep\n    precisionStep = precisionStepArg;\n    if (precisionStep<=0 || precisionStep>=64) precisionStep=Integer.MAX_VALUE;\n    String t = args.remove(\"type\");\n\n    if (t != null) {\n      try {\n        type = TrieTypes.valueOf(t.toUpperCase(Locale.ENGLISH));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid type specified in schema.xml for field: \" + args.get(\"name\"), e);\n      }\n    }\n  \n    \n    CharFilterFactory[] filterFactories = new CharFilterFactory[0];\n    TokenFilterFactory[] tokenFilterFactories = new TokenFilterFactory[0];\n    analyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, precisionStep), tokenFilterFactories);\n    // for query time we only need one token, so we use the biggest possible precisionStep:\n    queryAnalyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, Integer.MAX_VALUE), tokenFilterFactories);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73bb5a57dc75b54a39494f99986599cae7dff417","date":1361040620,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String p = args.remove(\"precisionStep\");\n    if (p != null) {\n       precisionStepArg = Integer.parseInt(p);\n    }\n    // normalize the precisionStep\n    precisionStep = precisionStepArg;\n    if (precisionStep<=0 || precisionStep>=64) precisionStep=Integer.MAX_VALUE;\n    String t = args.remove(\"type\");\n\n    if (t != null) {\n      try {\n        type = TrieTypes.valueOf(t.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid type specified in schema.xml for field: \" + args.get(\"name\"), e);\n      }\n    }\n\n    CharFilterFactory[] filterFactories = new CharFilterFactory[0];\n    TokenFilterFactory[] tokenFilterFactories = new TokenFilterFactory[0];\n    analyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, precisionStep), tokenFilterFactories);\n    // for query time we only need one token, so we use the biggest possible precisionStep:\n    queryAnalyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, Integer.MAX_VALUE), tokenFilterFactories);\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String p = args.remove(\"precisionStep\");\n    if (p != null) {\n       precisionStepArg = Integer.parseInt(p);\n    }\n    // normalize the precisionStep\n    precisionStep = precisionStepArg;\n    if (precisionStep<=0 || precisionStep>=64) precisionStep=Integer.MAX_VALUE;\n    String t = args.remove(\"type\");\n\n    if (t != null) {\n      try {\n        type = TrieTypes.valueOf(t.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid type specified in schema.xml for field: \" + args.get(\"name\"), e);\n      }\n    }\n  \n    \n    CharFilterFactory[] filterFactories = new CharFilterFactory[0];\n    TokenFilterFactory[] tokenFilterFactories = new TokenFilterFactory[0];\n    analyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, precisionStep), tokenFilterFactories);\n    // for query time we only need one token, so we use the biggest possible precisionStep:\n    queryAnalyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, Integer.MAX_VALUE), tokenFilterFactories);\n  }\n\n","bugFix":null,"bugIntro":["99c9d8533c954f661481ae44273622957dbf572f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String p = args.remove(\"precisionStep\");\n    if (p != null) {\n       precisionStepArg = Integer.parseInt(p);\n    }\n    // normalize the precisionStep\n    precisionStep = precisionStepArg;\n    if (precisionStep<=0 || precisionStep>=64) precisionStep=Integer.MAX_VALUE;\n    String t = args.remove(\"type\");\n\n    if (t != null) {\n      try {\n        type = TrieTypes.valueOf(t.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid type specified in schema.xml for field: \" + args.get(\"name\"), e);\n      }\n    }\n\n    CharFilterFactory[] filterFactories = new CharFilterFactory[0];\n    TokenFilterFactory[] tokenFilterFactories = new TokenFilterFactory[0];\n    analyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, precisionStep), tokenFilterFactories);\n    // for query time we only need one token, so we use the biggest possible precisionStep:\n    queryAnalyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, Integer.MAX_VALUE), tokenFilterFactories);\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String p = args.remove(\"precisionStep\");\n    if (p != null) {\n       precisionStepArg = Integer.parseInt(p);\n    }\n    // normalize the precisionStep\n    precisionStep = precisionStepArg;\n    if (precisionStep<=0 || precisionStep>=64) precisionStep=Integer.MAX_VALUE;\n    String t = args.remove(\"type\");\n\n    if (t != null) {\n      try {\n        type = TrieTypes.valueOf(t.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid type specified in schema.xml for field: \" + args.get(\"name\"), e);\n      }\n    }\n  \n    \n    CharFilterFactory[] filterFactories = new CharFilterFactory[0];\n    TokenFilterFactory[] tokenFilterFactories = new TokenFilterFactory[0];\n    analyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, precisionStep), tokenFilterFactories);\n    // for query time we only need one token, so we use the biggest possible precisionStep:\n    queryAnalyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, Integer.MAX_VALUE), tokenFilterFactories);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99c9d8533c954f661481ae44273622957dbf572f","date":1380991288,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String p = args.remove(\"precisionStep\");\n    if (p != null) {\n       precisionStepArg = Integer.parseInt(p);\n    }\n    // normalize the precisionStep\n    precisionStep = precisionStepArg;\n    if (precisionStep<=0 || precisionStep>=64) precisionStep=Integer.MAX_VALUE;\n    String t = args.remove(\"type\");\n\n    if (t != null) {\n      try {\n        type = TrieTypes.valueOf(t.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid type specified in schema.xml for field: \" + args.get(\"name\"), e);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String p = args.remove(\"precisionStep\");\n    if (p != null) {\n       precisionStepArg = Integer.parseInt(p);\n    }\n    // normalize the precisionStep\n    precisionStep = precisionStepArg;\n    if (precisionStep<=0 || precisionStep>=64) precisionStep=Integer.MAX_VALUE;\n    String t = args.remove(\"type\");\n\n    if (t != null) {\n      try {\n        type = TrieTypes.valueOf(t.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid type specified in schema.xml for field: \" + args.get(\"name\"), e);\n      }\n    }\n\n    CharFilterFactory[] filterFactories = new CharFilterFactory[0];\n    TokenFilterFactory[] tokenFilterFactories = new TokenFilterFactory[0];\n    analyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, precisionStep), tokenFilterFactories);\n    // for query time we only need one token, so we use the biggest possible precisionStep:\n    queryAnalyzer = new TokenizerChain(filterFactories, new TrieTokenizerFactory(type, Integer.MAX_VALUE), tokenFilterFactories);\n  }\n\n","bugFix":["1d6ca4f6b8a27a0523251c56d0abeb659ef5c1b0","1e77721aaf23393f6ea7926045ae6f8efea0ce8e","73bb5a57dc75b54a39494f99986599cae7dff417"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdd24a5b48ffd59f921ccc4f5199fc029f65797","date":1485039431,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String p = args.remove(\"precisionStep\");\n    if (p != null) {\n       precisionStepArg = Integer.parseInt(p);\n    }\n    // normalize the precisionStep\n    precisionStep = precisionStepArg;\n    if (precisionStep<=0 || precisionStep>=64) precisionStep=Integer.MAX_VALUE;\n    String t = args.remove(\"type\");\n\n    if (t != null) {\n      try {\n        type = NumberType.valueOf(t.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid type specified in schema.xml for field: \" + args.get(\"name\"), e);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String p = args.remove(\"precisionStep\");\n    if (p != null) {\n       precisionStepArg = Integer.parseInt(p);\n    }\n    // normalize the precisionStep\n    precisionStep = precisionStepArg;\n    if (precisionStep<=0 || precisionStep>=64) precisionStep=Integer.MAX_VALUE;\n    String t = args.remove(\"type\");\n\n    if (t != null) {\n      try {\n        type = TrieTypes.valueOf(t.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid type specified in schema.xml for field: \" + args.get(\"name\"), e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String p = args.remove(\"precisionStep\");\n    if (p != null) {\n       precisionStepArg = Integer.parseInt(p);\n    }\n    // normalize the precisionStep\n    precisionStep = precisionStepArg;\n    if (precisionStep<=0 || precisionStep>=64) precisionStep=Integer.MAX_VALUE;\n    String t = args.remove(\"type\");\n\n    if (t != null) {\n      try {\n        type = NumberType.valueOf(t.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid type specified in schema.xml for field: \" + args.get(\"name\"), e);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String p = args.remove(\"precisionStep\");\n    if (p != null) {\n       precisionStepArg = Integer.parseInt(p);\n    }\n    // normalize the precisionStep\n    precisionStep = precisionStepArg;\n    if (precisionStep<=0 || precisionStep>=64) precisionStep=Integer.MAX_VALUE;\n    String t = args.remove(\"type\");\n\n    if (t != null) {\n      try {\n        type = TrieTypes.valueOf(t.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Invalid type specified in schema.xml for field: \" + args.get(\"name\"), e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cdd24a5b48ffd59f921ccc4f5199fc029f65797":["99c9d8533c954f661481ae44273622957dbf572f"],"99c9d8533c954f661481ae44273622957dbf572f":["73bb5a57dc75b54a39494f99986599cae7dff417"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["c26f00b574427b55127e869b935845554afde1fa","91ff9f86f49c7758569ecdb69141488f34acd3dc"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"91ff9f86f49c7758569ecdb69141488f34acd3dc":["c26f00b574427b55127e869b935845554afde1fa"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["91ff9f86f49c7758569ecdb69141488f34acd3dc"],"2acf500f78aa12b92e371fd89c719291986b6b90":["91ff9f86f49c7758569ecdb69141488f34acd3dc","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["99c9d8533c954f661481ae44273622957dbf572f","3cdd24a5b48ffd59f921ccc4f5199fc029f65797"],"46d8ada1fff8d18cb197c38c7983225162599948":["91ff9f86f49c7758569ecdb69141488f34acd3dc","2acf500f78aa12b92e371fd89c719291986b6b90"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["2acf500f78aa12b92e371fd89c719291986b6b90","73bb5a57dc75b54a39494f99986599cae7dff417"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["91ff9f86f49c7758569ecdb69141488f34acd3dc","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cdd24a5b48ffd59f921ccc4f5199fc029f65797"],"73bb5a57dc75b54a39494f99986599cae7dff417":["2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"3cdd24a5b48ffd59f921ccc4f5199fc029f65797":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"99c9d8533c954f661481ae44273622957dbf572f":["3cdd24a5b48ffd59f921ccc4f5199fc029f65797","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"c26f00b574427b55127e869b935845554afde1fa":["38e3b736c7ca086d61b7dbb841c905ee115490da","91ff9f86f49c7758569ecdb69141488f34acd3dc"],"91ff9f86f49c7758569ecdb69141488f34acd3dc":["38e3b736c7ca086d61b7dbb841c905ee115490da","9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["46d8ada1fff8d18cb197c38c7983225162599948","95303ff3749680c743b9425f9cf99e6e4065e8a8","fe33227f6805edab2036cbb80645cc4e2d1fa424","73bb5a57dc75b54a39494f99986599cae7dff417"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"46d8ada1fff8d18cb197c38c7983225162599948":[],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"73bb5a57dc75b54a39494f99986599cae7dff417":["99c9d8533c954f661481ae44273622957dbf572f","95303ff3749680c743b9425f9cf99e6e4065e8a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","46d8ada1fff8d18cb197c38c7983225162599948","95303ff3749680c743b9425f9cf99e6e4065e8a8","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}