{"path":"lucene/backwards/src/java/org/apache/lucene/index/FieldsReader.LazyField#getBinaryValue(byte[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/FieldsReader.LazyField#getBinaryValue(byte[]).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/FieldsReader.LazyField#getBinaryValue(byte[]).mjava","sourceNew":"    @Override\n    public byte[] getBinaryValue(byte[] result) {\n      ensureOpen();\n\n      if (isBinary) {\n        if (fieldsData == null) {\n          // Allocate new buffer if result is null or too small\n          final byte[] b;\n          if (result == null || result.length < toRead)\n            b = new byte[toRead];\n          else\n            b = result;\n   \n          IndexInput localFieldsStream = getFieldStream();\n\n          // Throw this IOException since IndexReader.document does so anyway, so probably not that big of a change for people\n          // since they are already handling this exception when getting the document\n          try {\n            localFieldsStream.seek(pointer);\n            localFieldsStream.readBytes(b, 0, toRead);\n            if (isCompressed == true) {\n              fieldsData = uncompress(b);\n            } else {\n              fieldsData = b;\n            }\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n\n          binaryOffset = 0;\n          binaryLength = toRead;\n        }\n\n        return (byte[]) fieldsData;\n      } else\n        return null;     \n    }\n\n","sourceOld":"    @Override\n    public byte[] getBinaryValue(byte[] result) {\n      ensureOpen();\n\n      if (isBinary) {\n        if (fieldsData == null) {\n          // Allocate new buffer if result is null or too small\n          final byte[] b;\n          if (result == null || result.length < toRead)\n            b = new byte[toRead];\n          else\n            b = result;\n   \n          IndexInput localFieldsStream = getFieldStream();\n\n          // Throw this IOException since IndexReader.document does so anyway, so probably not that big of a change for people\n          // since they are already handling this exception when getting the document\n          try {\n            localFieldsStream.seek(pointer);\n            localFieldsStream.readBytes(b, 0, toRead);\n            if (isCompressed == true) {\n              fieldsData = uncompress(b);\n            } else {\n              fieldsData = b;\n            }\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n\n          binaryOffset = 0;\n          binaryLength = toRead;\n        }\n\n        return (byte[]) fieldsData;\n      } else\n        return null;     \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/FieldsReader.LazyField#getBinaryValue(byte[]).mjava","sourceNew":null,"sourceOld":"    @Override\n    public byte[] getBinaryValue(byte[] result) {\n      ensureOpen();\n\n      if (isBinary) {\n        if (fieldsData == null) {\n          // Allocate new buffer if result is null or too small\n          final byte[] b;\n          if (result == null || result.length < toRead)\n            b = new byte[toRead];\n          else\n            b = result;\n   \n          IndexInput localFieldsStream = getFieldStream();\n\n          // Throw this IOException since IndexReader.document does so anyway, so probably not that big of a change for people\n          // since they are already handling this exception when getting the document\n          try {\n            localFieldsStream.seek(pointer);\n            localFieldsStream.readBytes(b, 0, toRead);\n            if (isCompressed == true) {\n              fieldsData = uncompress(b);\n            } else {\n              fieldsData = b;\n            }\n          } catch (IOException e) {\n            throw new FieldReaderException(e);\n          }\n\n          binaryOffset = 0;\n          binaryLength = toRead;\n        }\n\n        return (byte[]) fieldsData;\n      } else\n        return null;     \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}