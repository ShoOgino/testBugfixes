{"path":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#decompress(byte[],int,int,int).mjava","commits":[{"id":"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab","date":1354403647,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#decompress(byte[],int,int,int).mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#decompress(byte[],int,int,int).mjava","sourceNew":"  byte[] decompress(byte[] compressed, int originalLength, int offset, int length) throws IOException {\n    Decompressor decompressor = mode.newDecompressor();\n    final BytesRef bytes = new BytesRef();\n    decompressor.decompress(new ByteArrayDataInput(compressed), originalLength, offset, length, bytes);\n    return Arrays.copyOfRange(bytes.bytes, bytes.offset, bytes.offset + bytes.length);\n  }\n\n","sourceOld":"  byte[] decompress(byte[] compressed, int originalLength, int offset, int length) throws IOException {\n    Decompressor decompressor = mode.newDecompressor();\n    final BytesRef bytes = new BytesRef();\n    decompressor.decompress(new ByteArrayDataInput(compressed), originalLength, offset, length, bytes);\n    return Arrays.copyOfRange(bytes.bytes, bytes.offset, bytes.offset + bytes.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#decompress(byte[],int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  byte[] decompress(byte[] compressed, int originalLength, int offset, int length) throws IOException {\n    Decompressor decompressor = mode.newDecompressor();\n    final BytesRef bytes = new BytesRef();\n    decompressor.decompress(new ByteArrayDataInput(compressed), originalLength, offset, length, bytes);\n    return Arrays.copyOfRange(bytes.bytes, bytes.offset, bytes.offset + bytes.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#decompress(byte[],int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#decompress(byte[],int,int,int).mjava","sourceNew":"  byte[] decompress(byte[] compressed, int originalLength, int offset, int length) throws IOException {\n    Decompressor decompressor = mode.newDecompressor();\n    final BytesRef bytes = new BytesRef();\n    decompressor.decompress(new ByteArrayDataInput(compressed), originalLength, offset, length, bytes);\n    return BytesRef.deepCopyOf(bytes).bytes;\n  }\n\n","sourceOld":"  byte[] decompress(byte[] compressed, int originalLength, int offset, int length) throws IOException {\n    Decompressor decompressor = mode.newDecompressor();\n    final BytesRef bytes = new BytesRef();\n    decompressor.decompress(new ByteArrayDataInput(compressed), originalLength, offset, length, bytes);\n    return Arrays.copyOfRange(bytes.bytes, bytes.offset, bytes.offset + bytes.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#decompress(byte[],int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#decompress(byte[],int,int,int).mjava","sourceNew":"  byte[] decompress(byte[] compressed, int originalLength, int offset, int length) throws IOException {\n    Decompressor decompressor = mode.newDecompressor();\n    final BytesRef bytes = new BytesRef();\n    decompressor.decompress(new ByteArrayDataInput(compressed), originalLength, offset, length, bytes);\n    return BytesRef.deepCopyOf(bytes).bytes;\n  }\n\n","sourceOld":"  byte[] decompress(byte[] compressed, int originalLength, int offset, int length) throws IOException {\n    Decompressor decompressor = mode.newDecompressor();\n    final BytesRef bytes = new BytesRef();\n    decompressor.decompress(new ByteArrayDataInput(compressed), originalLength, offset, length, bytes);\n    return Arrays.copyOfRange(bytes.bytes, bytes.offset, bytes.offset + bytes.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#decompress(byte[],int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#decompress(byte[],int,int,int).mjava","sourceNew":"  byte[] decompress(byte[] compressed, int originalLength, int offset, int length) throws IOException {\n    Decompressor decompressor = mode.newDecompressor();\n    final BytesRef bytes = new BytesRef();\n    decompressor.decompress(new ByteArrayDataInput(compressed), originalLength, offset, length, bytes);\n    return BytesRef.deepCopyOf(bytes).bytes;\n  }\n\n","sourceOld":"  byte[] decompress(byte[] compressed, int originalLength, int offset, int length) throws IOException {\n    Decompressor decompressor = mode.newDecompressor();\n    final BytesRef bytes = new BytesRef();\n    decompressor.decompress(new ByteArrayDataInput(compressed), originalLength, offset, length, bytes);\n    return Arrays.copyOfRange(bytes.bytes, bytes.offset, bytes.offset + bytes.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["1a51ec81f1fd009bf893bd88ec1c7b964fae6fab","9798d0818e7a880546802b509792d3f3d57babd2"],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1a51ec81f1fd009bf893bd88ec1c7b964fae6fab"],"9798d0818e7a880546802b509792d3f3d57babd2":["1a51ec81f1fd009bf893bd88ec1c7b964fae6fab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9798d0818e7a880546802b509792d3f3d57babd2"],"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["1a51ec81f1fd009bf893bd88ec1c7b964fae6fab","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","1a51ec81f1fd009bf893bd88ec1c7b964fae6fab"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"9798d0818e7a880546802b509792d3f3d57babd2":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab":["b70042a8a492f7054d480ccdd2be9796510d4327","407687e67faf6e1f02a211ca078d8e3eed631027","9798d0818e7a880546802b509792d3f3d57babd2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}