{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#testTerms(String[]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#testTerms(String[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#testTerms(String[]).mjava","sourceNew":"  private void testTerms(String[] terms) throws Exception {\n    final CompiledAutomaton c = build(terms);\n    final BytesRef[] termBytes = new BytesRef[terms.length];\n    for(int idx=0;idx<terms.length;idx++) {\n      termBytes[idx] = new BytesRef(terms[idx]);\n    }\n    Arrays.sort(termBytes);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: terms in unicode order\");\n      for(BytesRef t : termBytes) {\n        System.out.println(\"  \" + t.utf8ToString());\n      }\n      //System.out.println(c.utf8.toDot());\n    }\n\n    for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n      final String s = random.nextInt(10) == 1 ? terms[random.nextInt(terms.length)] : randomString();\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: floor(\" + s + \")\");\n      }\n      int loc = Arrays.binarySearch(termBytes, new BytesRef(s));\n      final String expected;\n      if (loc >= 0) {\n        expected = s;\n      } else {\n        // term doesn't exist\n        loc = -(loc+1);\n        if (loc == 0) {\n          expected = null;\n        } else {\n          expected = termBytes[loc-1].utf8ToString();\n        }\n      }\n      if (VERBOSE) {\n        System.out.println(\"  expected=\" + expected);\n      }\n      testFloor(c, s, expected);\n    }\n  }\n\n","sourceOld":"  private void testTerms(String[] terms) throws Exception {\n    final CompiledAutomaton c = build(terms);\n    final BytesRef[] termBytes = new BytesRef[terms.length];\n    for(int idx=0;idx<terms.length;idx++) {\n      termBytes[idx] = new BytesRef(terms[idx]);\n    }\n    Arrays.sort(termBytes);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: terms in unicode order\");\n      for(BytesRef t : termBytes) {\n        System.out.println(\"  \" + t.utf8ToString());\n      }\n      //System.out.println(c.utf8.toDot());\n    }\n\n    for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n      final String s = random.nextInt(10) == 1 ? terms[random.nextInt(terms.length)] : randomString();\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: floor(\" + s + \")\");\n      }\n      int loc = Arrays.binarySearch(termBytes, new BytesRef(s));\n      final String expected;\n      if (loc >= 0) {\n        expected = s;\n      } else {\n        // term doesn't exist\n        loc = -(loc+1);\n        if (loc == 0) {\n          expected = null;\n        } else {\n          expected = termBytes[loc-1].utf8ToString();\n        }\n      }\n      if (VERBOSE) {\n        System.out.println(\"  expected=\" + expected);\n      }\n      testFloor(c, s, expected);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#testTerms(String[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#testTerms(String[]).mjava","sourceNew":"  private void testTerms(String[] terms) throws Exception {\n    final CompiledAutomaton c = build(terms);\n    final BytesRef[] termBytes = new BytesRef[terms.length];\n    for(int idx=0;idx<terms.length;idx++) {\n      termBytes[idx] = new BytesRef(terms[idx]);\n    }\n    Arrays.sort(termBytes);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: terms in unicode order\");\n      for(BytesRef t : termBytes) {\n        System.out.println(\"  \" + t.utf8ToString());\n      }\n      //System.out.println(c.utf8.toDot());\n    }\n\n    for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n      final String s = random().nextInt(10) == 1 ? terms[random().nextInt(terms.length)] : randomString();\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: floor(\" + s + \")\");\n      }\n      int loc = Arrays.binarySearch(termBytes, new BytesRef(s));\n      final String expected;\n      if (loc >= 0) {\n        expected = s;\n      } else {\n        // term doesn't exist\n        loc = -(loc+1);\n        if (loc == 0) {\n          expected = null;\n        } else {\n          expected = termBytes[loc-1].utf8ToString();\n        }\n      }\n      if (VERBOSE) {\n        System.out.println(\"  expected=\" + expected);\n      }\n      testFloor(c, s, expected);\n    }\n  }\n\n","sourceOld":"  private void testTerms(String[] terms) throws Exception {\n    final CompiledAutomaton c = build(terms);\n    final BytesRef[] termBytes = new BytesRef[terms.length];\n    for(int idx=0;idx<terms.length;idx++) {\n      termBytes[idx] = new BytesRef(terms[idx]);\n    }\n    Arrays.sort(termBytes);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: terms in unicode order\");\n      for(BytesRef t : termBytes) {\n        System.out.println(\"  \" + t.utf8ToString());\n      }\n      //System.out.println(c.utf8.toDot());\n    }\n\n    for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n      final String s = random.nextInt(10) == 1 ? terms[random.nextInt(terms.length)] : randomString();\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: floor(\" + s + \")\");\n      }\n      int loc = Arrays.binarySearch(termBytes, new BytesRef(s));\n      final String expected;\n      if (loc >= 0) {\n        expected = s;\n      } else {\n        // term doesn't exist\n        loc = -(loc+1);\n        if (loc == 0) {\n          expected = null;\n        } else {\n          expected = termBytes[loc-1].utf8ToString();\n        }\n      }\n      if (VERBOSE) {\n        System.out.println(\"  expected=\" + expected);\n      }\n      testFloor(c, s, expected);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#testTerms(int,String[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#testTerms(String[]).mjava","sourceNew":"  private void testTerms(int maxDeterminizedStates, String[] terms) throws Exception {\n    final CompiledAutomaton c = build(maxDeterminizedStates, terms);\n    final BytesRef[] termBytes = new BytesRef[terms.length];\n    for(int idx=0;idx<terms.length;idx++) {\n      termBytes[idx] = new BytesRef(terms[idx]);\n    }\n    Arrays.sort(termBytes);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: terms in unicode order\");\n      for(BytesRef t : termBytes) {\n        System.out.println(\"  \" + t.utf8ToString());\n      }\n      //System.out.println(c.utf8.toDot());\n    }\n\n    for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n      final String s = random().nextInt(10) == 1 ? terms[random().nextInt(terms.length)] : randomString();\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: floor(\" + s + \")\");\n      }\n      int loc = Arrays.binarySearch(termBytes, new BytesRef(s));\n      final String expected;\n      if (loc >= 0) {\n        expected = s;\n      } else {\n        // term doesn't exist\n        loc = -(loc+1);\n        if (loc == 0) {\n          expected = null;\n        } else {\n          expected = termBytes[loc-1].utf8ToString();\n        }\n      }\n      if (VERBOSE) {\n        System.out.println(\"  expected=\" + expected);\n      }\n      testFloor(c, s, expected);\n    }\n  }\n\n","sourceOld":"  private void testTerms(String[] terms) throws Exception {\n    final CompiledAutomaton c = build(terms);\n    final BytesRef[] termBytes = new BytesRef[terms.length];\n    for(int idx=0;idx<terms.length;idx++) {\n      termBytes[idx] = new BytesRef(terms[idx]);\n    }\n    Arrays.sort(termBytes);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: terms in unicode order\");\n      for(BytesRef t : termBytes) {\n        System.out.println(\"  \" + t.utf8ToString());\n      }\n      //System.out.println(c.utf8.toDot());\n    }\n\n    for(int iter=0;iter<100*RANDOM_MULTIPLIER;iter++) {\n      final String s = random().nextInt(10) == 1 ? terms[random().nextInt(terms.length)] : randomString();\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: floor(\" + s + \")\");\n      }\n      int loc = Arrays.binarySearch(termBytes, new BytesRef(s));\n      final String expected;\n      if (loc >= 0) {\n        expected = s;\n      } else {\n        // term doesn't exist\n        loc = -(loc+1);\n        if (loc == 0) {\n          expected = null;\n        } else {\n          expected = termBytes[loc-1].utf8ToString();\n        }\n      }\n      if (VERBOSE) {\n        System.out.println(\"  expected=\" + expected);\n      }\n      testFloor(c, s, expected);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b316f82baae88f5e279893a9cb7eee51fd8902f"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}