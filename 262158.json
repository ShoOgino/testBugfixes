{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/TokenStreamOffsetStrategy#convertTermsToMatchers(BytesRef[],CharArrayMatcher[]).mjava","commits":[{"id":"d35c63123a7e255b58f8cf3948eb9a6128100a32","date":1574872099,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/TokenStreamOffsetStrategy#convertTermsToMatchers(BytesRef[],CharArrayMatcher[]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/TokenStreamOffsetStrategy#convertTermsToAutomata(BytesRef[],CharacterRunAutomaton[]).mjava","sourceNew":"  //TODO this is inefficient; instead build a union automata just for terms part.\n  private static CharArrayMatcher[] convertTermsToMatchers(BytesRef[] terms, CharArrayMatcher[] matchers) {\n    CharArrayMatcher[] newAutomata = new CharArrayMatcher[terms.length + matchers.length];\n    for (int i = 0; i < terms.length; i++) {\n      String termString = terms[i].utf8ToString();\n      CharacterRunAutomaton a = new CharacterRunAutomaton(Automata.makeString(termString));\n      newAutomata[i] = LabelledCharArrayMatcher.wrap(termString, a::run);\n    }\n    // Append existing automata (that which is used for MTQs)\n    System.arraycopy(matchers, 0, newAutomata, terms.length, matchers.length);\n    return newAutomata;\n  }\n\n","sourceOld":"  //TODO this is inefficient; instead build a union automata just for terms part.\n  private static CharacterRunAutomaton[] convertTermsToAutomata(BytesRef[] terms, CharacterRunAutomaton[] automata) {\n    CharacterRunAutomaton[] newAutomata = new CharacterRunAutomaton[terms.length + automata.length];\n    for (int i = 0; i < terms.length; i++) {\n      String termString = terms[i].utf8ToString();\n      newAutomata[i] = new CharacterRunAutomaton(Automata.makeString(termString)) {\n        @Override\n        public String toString() {\n          return termString;\n        }\n      };\n    }\n    // Append existing automata (that which is used for MTQs)\n    System.arraycopy(automata, 0, newAutomata, terms.length, automata.length);\n    return newAutomata;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d35c63123a7e255b58f8cf3948eb9a6128100a32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d35c63123a7e255b58f8cf3948eb9a6128100a32"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d35c63123a7e255b58f8cf3948eb9a6128100a32"],"d35c63123a7e255b58f8cf3948eb9a6128100a32":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}