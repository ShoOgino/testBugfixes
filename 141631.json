{"path":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testRuntimeLibWithSig512().mjava","commits":[{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testRuntimeLibWithSig512().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRuntimeLibWithSig512() throws Exception {\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n        \"/jar3.jar\", getFileContent(\"runtimecode/runtimelibs_v3.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n    MiniSolrCloudCluster cluster =  configureCluster(4).configure();\n\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      cluster.getZkClient().makePath(\"/keys/exe\", true);\n      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      String signature = \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\";\n\n      String payload = \"{add-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sig : '\" + signature + \"',\" +\n          \"sha512 : 'd01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420'}}\";\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-runtimelib/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"runtimeLib/foo/sha512\"));\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{add-requesthandler:{name : 'bar', class : 'org.apache.solr.core.RuntimeLibReqHandler'}}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      Map<String, Object> map = new ClusterProperties(cluster.getZkClient()).getClusterProperties();\n\n\n      V2Request request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", null));\n\n\n      assertEquals(\"org.apache.solr.core.RuntimeLibReqHandler\",\n          getObjectByPath(map, true, Arrays.asList(\"requestHandler\", \"bar\", \"class\")));\n\n      payload = \"{update-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar3.jar', \" +\n          \"sig : 'pnH8uDHsTF0HWyQqABqVWmvo3rM/Mp2qpuo6S9YXZA9Ifg8NjHX8WzPe6EzlaqBcYcusrEV0b+5NCBx4AS0TGA==' ,\" +\n          \"sha512 : 'f67a7735a89b4348e273ca29e4651359d6d976ba966cb871c4b468ea1dbd452e42fcde9d188b7788e5a1ef668283c690606032922364759d19588666d5862653'}}\";\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-runtimelib/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"runtimeLib/foo/sha512\"));\n\n\n      request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", \"3\"));\n\n    } finally {\n      server.first().stop();\n      cluster.shutdown();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74","date":1563736916,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testRuntimeLibWithSig512().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testRuntimeLibWithSig512().mjava","sourceNew":"  @Test\n  public void testRuntimeLibWithSig512() throws Exception {\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n        \"/jar3.jar\", getFileContent(\"runtimecode/runtimelibs_v3.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n    MiniSolrCloudCluster cluster = configureCluster(4).configure();\n\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      cluster.getZkClient().makePath(\"/keys/exe\", true);\n      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      String signature = \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\";\n\n      String payload = \"{add-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sig : '\" + signature + \"',\" +\n          \"sha512 : 'd01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420'}}\";\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-runtimelib/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"runtimeLib/foo/sha512\"));\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{add-requesthandler:{name : 'bar', class : 'org.apache.solr.core.RuntimeLibReqHandler'}}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      Map<String, Object> map = new ClusterProperties(cluster.getZkClient()).getClusterProperties();\n\n\n      V2Request request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", null));\n\n\n      assertEquals(\"org.apache.solr.core.RuntimeLibReqHandler\",\n          getObjectByPath(map, true, Arrays.asList(\"requestHandler\", \"bar\", \"class\")));\n\n      payload = \"{update-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar3.jar', \" +\n          \"sig : 'pnH8uDHsTF0HWyQqABqVWmvo3rM/Mp2qpuo6S9YXZA9Ifg8NjHX8WzPe6EzlaqBcYcusrEV0b+5NCBx4AS0TGA==' ,\" +\n          \"sha512 : 'f67a7735a89b4348e273ca29e4651359d6d976ba966cb871c4b468ea1dbd452e42fcde9d188b7788e5a1ef668283c690606032922364759d19588666d5862653'}}\";\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-runtimelib/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"runtimeLib/foo/sha512\"));\n\n\n      request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", \"3\"));\n\n    } finally {\n      server.first().stop();\n      cluster.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testRuntimeLibWithSig512() throws Exception {\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n        \"/jar3.jar\", getFileContent(\"runtimecode/runtimelibs_v3.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n    MiniSolrCloudCluster cluster =  configureCluster(4).configure();\n\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      cluster.getZkClient().makePath(\"/keys/exe\", true);\n      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      String signature = \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\";\n\n      String payload = \"{add-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sig : '\" + signature + \"',\" +\n          \"sha512 : 'd01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420'}}\";\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-runtimelib/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"runtimeLib/foo/sha512\"));\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{add-requesthandler:{name : 'bar', class : 'org.apache.solr.core.RuntimeLibReqHandler'}}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      Map<String, Object> map = new ClusterProperties(cluster.getZkClient()).getClusterProperties();\n\n\n      V2Request request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", null));\n\n\n      assertEquals(\"org.apache.solr.core.RuntimeLibReqHandler\",\n          getObjectByPath(map, true, Arrays.asList(\"requestHandler\", \"bar\", \"class\")));\n\n      payload = \"{update-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar3.jar', \" +\n          \"sig : 'pnH8uDHsTF0HWyQqABqVWmvo3rM/Mp2qpuo6S9YXZA9Ifg8NjHX8WzPe6EzlaqBcYcusrEV0b+5NCBx4AS0TGA==' ,\" +\n          \"sha512 : 'f67a7735a89b4348e273ca29e4651359d6d976ba966cb871c4b468ea1dbd452e42fcde9d188b7788e5a1ef668283c690606032922364759d19588666d5862653'}}\";\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-runtimelib/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"runtimeLib/foo/sha512\"));\n\n\n      request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", \"3\"));\n\n    } finally {\n      server.first().stop();\n      cluster.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2111e4e2f7a90d10ca5d3102a3b29c2abc0efc2d","date":1563898669,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testRuntimeLibWithSig512().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testRuntimeLibWithSig512().mjava","sourceNew":"  @Test\n  public void testRuntimeLibWithSig512() throws Exception {\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n        \"/jar3.jar\", getFileContent(\"runtimecode/runtimelibs_v3.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n    MiniSolrCloudCluster cluster = configureCluster(4).configure();\n\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      cluster.getZkClient().makePath(\"/keys/exe\", true);\n      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      String signature = \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\";\n\n      String payload = \"{add-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sig : '\" + signature + \"',\" +\n          \"sha512 : 'd01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420'}}\";\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-runtimelib/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"runtimeLib/foo/sha512\"));\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{add-requesthandler:{name : 'bar', class : 'org.apache.solr.core.RuntimeLibReqHandler'}}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      Map<String, Object> map = new ClusterProperties(cluster.getZkClient()).getClusterProperties();\n\n\n      V2Request request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", null));\n\n\n      assertEquals(\"org.apache.solr.core.RuntimeLibReqHandler\",\n          getObjectByPath(map, true, Arrays.asList(\"requestHandler\", \"bar\", \"class\")));\n\n      payload = \"{update-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar3.jar', \" +\n          \"sig : 'a400n4T7FT+2gM0SC6+MfSOExjud8MkhTSFylhvwNjtWwUgKdPFn434Wv7Qc4QEqDVLhQoL3WqYtQmLPti0G4Q==' ,\" +\n          \"sha512 : '60ec88c2a2e9b409f7afc309273383810a0d07a078b482434eda9674f7e25b8adafa8a67c9913c996cbfb78a7f6ad2b9db26dbd4fe0ca4068f248d5db563f922'}}\";\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-runtimelib/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"runtimeLib/foo/sha512\"));\n\n\n      request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", \"3\"));\n\n    } finally {\n      server.first().stop();\n      cluster.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testRuntimeLibWithSig512() throws Exception {\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n        \"/jar3.jar\", getFileContent(\"runtimecode/runtimelibs_v3.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n    MiniSolrCloudCluster cluster = configureCluster(4).configure();\n\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      cluster.getZkClient().makePath(\"/keys/exe\", true);\n      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      String signature = \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\";\n\n      String payload = \"{add-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sig : '\" + signature + \"',\" +\n          \"sha512 : 'd01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420'}}\";\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-runtimelib/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"runtimeLib/foo/sha512\"));\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{add-requesthandler:{name : 'bar', class : 'org.apache.solr.core.RuntimeLibReqHandler'}}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      Map<String, Object> map = new ClusterProperties(cluster.getZkClient()).getClusterProperties();\n\n\n      V2Request request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", null));\n\n\n      assertEquals(\"org.apache.solr.core.RuntimeLibReqHandler\",\n          getObjectByPath(map, true, Arrays.asList(\"requestHandler\", \"bar\", \"class\")));\n\n      payload = \"{update-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar3.jar', \" +\n          \"sig : 'pnH8uDHsTF0HWyQqABqVWmvo3rM/Mp2qpuo6S9YXZA9Ifg8NjHX8WzPe6EzlaqBcYcusrEV0b+5NCBx4AS0TGA==' ,\" +\n          \"sha512 : 'f67a7735a89b4348e273ca29e4651359d6d976ba966cb871c4b468ea1dbd452e42fcde9d188b7788e5a1ef668283c690606032922364759d19588666d5862653'}}\";\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-runtimelib/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"runtimeLib/foo/sha512\"));\n\n\n      request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", \"3\"));\n\n    } finally {\n      server.first().stop();\n      cluster.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39dabfd19b49b248d63cedbb01ea144ee5ad071c","date":1566241238,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testRuntimeLibWithSig512().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testRuntimeLibWithSig512().mjava","sourceNew":"  @Test\n  public void testRuntimeLibWithSig512() throws Exception {\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n        \"/jar3.jar\", getFileContent(\"runtimecode/runtimelibs_v3.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n    MiniSolrCloudCluster cluster = configureCluster(4).configure();\n\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      cluster.getZkClient().makePath(\"/keys/exe\", true);\n      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      String signature = \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\";\n\n      String payload = \"{add-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sig : '\" + signature + \"',\" +\n          \"sha512 : 'd01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420'}}\";\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha512\"));\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{add-requesthandler:{name : 'bar', class : 'org.apache.solr.core.RuntimeLibReqHandler' package : global }}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      Map<String, Object> map = new ClusterProperties(cluster.getZkClient()).getClusterProperties();\n\n\n      V2Request request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", null));\n\n\n      assertEquals(\"org.apache.solr.core.RuntimeLibReqHandler\",\n          getObjectByPath(map, true, Arrays.asList(\"requestHandler\", \"bar\", \"class\")));\n\n      payload = \"{update-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar3.jar', \" +\n          \"sig : 'a400n4T7FT+2gM0SC6+MfSOExjud8MkhTSFylhvwNjtWwUgKdPFn434Wv7Qc4QEqDVLhQoL3WqYtQmLPti0G4Q==' ,\" +\n          \"sha512 : '60ec88c2a2e9b409f7afc309273383810a0d07a078b482434eda9674f7e25b8adafa8a67c9913c996cbfb78a7f6ad2b9db26dbd4fe0ca4068f248d5db563f922'}}\";\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha512\"));\n\n\n      request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", \"3\"));\n\n    } finally {\n      server.first().stop();\n      cluster.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testRuntimeLibWithSig512() throws Exception {\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n        \"/jar3.jar\", getFileContent(\"runtimecode/runtimelibs_v3.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n    MiniSolrCloudCluster cluster = configureCluster(4).configure();\n\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      cluster.getZkClient().makePath(\"/keys/exe\", true);\n      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      String signature = \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\";\n\n      String payload = \"{add-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sig : '\" + signature + \"',\" +\n          \"sha512 : 'd01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420'}}\";\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-runtimelib/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"runtimeLib/foo/sha512\"));\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{add-requesthandler:{name : 'bar', class : 'org.apache.solr.core.RuntimeLibReqHandler'}}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      Map<String, Object> map = new ClusterProperties(cluster.getZkClient()).getClusterProperties();\n\n\n      V2Request request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", null));\n\n\n      assertEquals(\"org.apache.solr.core.RuntimeLibReqHandler\",\n          getObjectByPath(map, true, Arrays.asList(\"requestHandler\", \"bar\", \"class\")));\n\n      payload = \"{update-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar3.jar', \" +\n          \"sig : 'a400n4T7FT+2gM0SC6+MfSOExjud8MkhTSFylhvwNjtWwUgKdPFn434Wv7Qc4QEqDVLhQoL3WqYtQmLPti0G4Q==' ,\" +\n          \"sha512 : '60ec88c2a2e9b409f7afc309273383810a0d07a078b482434eda9674f7e25b8adafa8a67c9913c996cbfb78a7f6ad2b9db26dbd4fe0ca4068f248d5db563f922'}}\";\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-runtimelib/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"runtimeLib/foo/sha512\"));\n\n\n      request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", \"3\"));\n\n    } finally {\n      server.first().stop();\n      cluster.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99d6782cf9de8c5ffeb8d0b0f103b578205af068","date":1566878682,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testRuntimeLibWithSig512().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testRuntimeLibWithSig512().mjava","sourceNew":"  @Test\n  public void testRuntimeLibWithSig512() throws Exception {\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n        \"/jar3.jar\", getFileContent(\"runtimecode/runtimelibs_v3.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n    MiniSolrCloudCluster cluster = configureCluster(4).configure();\n\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      cluster.getZkClient().makePath(\"/keys/exe\", true);\n      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      String signature = \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\";\n\n      String payload = \"{add-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sig : '\" + signature + \"',\" +\n          \"sha256 : 'e1f9e23988c19619402f1040c9251556dcd6e02b9d3e3b966a129ea1be5c70fc'}}\";\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha256\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha256\"));\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{add-requesthandler:{name : 'bar', class : 'org.apache.solr.core.RuntimeLibReqHandler' package : global }}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      Map<String, Object> map = new ClusterProperties(cluster.getZkClient()).getClusterProperties();\n\n\n      V2Request request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", null));\n\n\n      assertEquals(\"org.apache.solr.core.RuntimeLibReqHandler\",\n          getObjectByPath(map, true, Arrays.asList(\"requestHandler\", \"bar\", \"class\")));\n\n      payload = \"{update-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar3.jar', \" +\n          \"sig : 'a400n4T7FT+2gM0SC6+MfSOExjud8MkhTSFylhvwNjtWwUgKdPFn434Wv7Qc4QEqDVLhQoL3WqYtQmLPti0G4Q==' ,\" +\n          \"sha256 : '20e0bfaec71b2e93c4da9f2ed3745dda04dc3fc915b66cc0275863982e73b2a3'}}\";\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha256\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha256\"));\n\n\n      request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", \"3\"));\n\n    } finally {\n      server.first().stop();\n      cluster.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testRuntimeLibWithSig512() throws Exception {\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n        \"/jar3.jar\", getFileContent(\"runtimecode/runtimelibs_v3.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n    MiniSolrCloudCluster cluster = configureCluster(4).configure();\n\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      cluster.getZkClient().makePath(\"/keys/exe\", true);\n      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      String signature = \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\";\n\n      String payload = \"{add-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sig : '\" + signature + \"',\" +\n          \"sha512 : 'd01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420'}}\";\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha512\"));\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{add-requesthandler:{name : 'bar', class : 'org.apache.solr.core.RuntimeLibReqHandler' package : global }}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      Map<String, Object> map = new ClusterProperties(cluster.getZkClient()).getClusterProperties();\n\n\n      V2Request request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", null));\n\n\n      assertEquals(\"org.apache.solr.core.RuntimeLibReqHandler\",\n          getObjectByPath(map, true, Arrays.asList(\"requestHandler\", \"bar\", \"class\")));\n\n      payload = \"{update-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar3.jar', \" +\n          \"sig : 'a400n4T7FT+2gM0SC6+MfSOExjud8MkhTSFylhvwNjtWwUgKdPFn434Wv7Qc4QEqDVLhQoL3WqYtQmLPti0G4Q==' ,\" +\n          \"sha512 : '60ec88c2a2e9b409f7afc309273383810a0d07a078b482434eda9674f7e25b8adafa8a67c9913c996cbfb78a7f6ad2b9db26dbd4fe0ca4068f248d5db563f922'}}\";\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha512\"));\n\n\n      request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", \"3\"));\n\n    } finally {\n      server.first().stop();\n      cluster.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testRuntimeLibWithSig512().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testRuntimeLibWithSig512() throws Exception {\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n        \"/jar3.jar\", getFileContent(\"runtimecode/runtimelibs_v3.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n    MiniSolrCloudCluster cluster = configureCluster(4).configure();\n\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      cluster.getZkClient().makePath(\"/keys/exe\", true);\n      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      String signature = \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\";\n\n      String payload = \"{add-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sig : '\" + signature + \"',\" +\n          \"sha256 : 'e1f9e23988c19619402f1040c9251556dcd6e02b9d3e3b966a129ea1be5c70fc'}}\";\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha256\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha256\"));\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{add-requesthandler:{name : 'bar', class : 'org.apache.solr.core.RuntimeLibReqHandler' package : global }}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      Map<String, Object> map = new ClusterProperties(cluster.getZkClient()).getClusterProperties();\n\n\n      V2Request request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", null));\n\n\n      assertEquals(\"org.apache.solr.core.RuntimeLibReqHandler\",\n          getObjectByPath(map, true, Arrays.asList(\"requestHandler\", \"bar\", \"class\")));\n\n      payload = \"{update-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar3.jar', \" +\n          \"sig : 'a400n4T7FT+2gM0SC6+MfSOExjud8MkhTSFylhvwNjtWwUgKdPFn434Wv7Qc4QEqDVLhQoL3WqYtQmLPti0G4Q==' ,\" +\n          \"sha256 : '20e0bfaec71b2e93c4da9f2ed3745dda04dc3fc915b66cc0275863982e73b2a3'}}\";\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha256\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha256\"));\n\n\n      request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", \"3\"));\n\n    } finally {\n      server.first().stop();\n      cluster.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testRuntimeLibWithSig512().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testRuntimeLibWithSig512() throws Exception {\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n        \"/jar3.jar\", getFileContent(\"runtimecode/runtimelibs_v3.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n    MiniSolrCloudCluster cluster = configureCluster(4).configure();\n\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      cluster.getZkClient().makePath(\"/keys/exe\", true);\n      cluster.getZkClient().create(\"/keys/exe/pub_key512.der\", derFile, CreateMode.PERSISTENT, true);\n\n      String signature = \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\";\n\n      String payload = \"{add-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sig : '\" + signature + \"',\" +\n          \"sha256 : 'e1f9e23988c19619402f1040c9251556dcd6e02b9d3e3b966a129ea1be5c70fc'}}\";\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha256\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha256\"));\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{add-requesthandler:{name : 'bar', class : 'org.apache.solr.core.RuntimeLibReqHandler' package : global }}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      Map<String, Object> map = new ClusterProperties(cluster.getZkClient()).getClusterProperties();\n\n\n      V2Request request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", null));\n\n\n      assertEquals(\"org.apache.solr.core.RuntimeLibReqHandler\",\n          getObjectByPath(map, true, Arrays.asList(\"requestHandler\", \"bar\", \"class\")));\n\n      payload = \"{update-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar3.jar', \" +\n          \"sig : 'a400n4T7FT+2gM0SC6+MfSOExjud8MkhTSFylhvwNjtWwUgKdPFn434Wv7Qc4QEqDVLhQoL3WqYtQmLPti0G4Q==' ,\" +\n          \"sha256 : '20e0bfaec71b2e93c4da9f2ed3745dda04dc3fc915b66cc0275863982e73b2a3'}}\";\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha256\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha256\"));\n\n\n      request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", \"3\"));\n\n    } finally {\n      server.first().stop();\n      cluster.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["2111e4e2f7a90d10ca5d3102a3b29c2abc0efc2d"],"d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"99d6782cf9de8c5ffeb8d0b0f103b578205af068":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c44cc06c26e456fe9c215072b79fce30babe3975":["99d6782cf9de8c5ffeb8d0b0f103b578205af068"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c44cc06c26e456fe9c215072b79fce30babe3975"],"2111e4e2f7a90d10ca5d3102a3b29c2abc0efc2d":["d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74"],"b0b597c65628ca9e73913a07e81691f8229bae35":["99d6782cf9de8c5ffeb8d0b0f103b578205af068","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["99d6782cf9de8c5ffeb8d0b0f103b578205af068"],"d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74":["2111e4e2f7a90d10ca5d3102a3b29c2abc0efc2d"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74"],"99d6782cf9de8c5ffeb8d0b0f103b578205af068":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"c44cc06c26e456fe9c215072b79fce30babe3975":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"2111e4e2f7a90d10ca5d3102a3b29c2abc0efc2d":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}