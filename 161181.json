{"path":"src/java/org/apache/lucene/index/DirectoryReader#doReopenNoWriter(boolean,IndexCommit).mjava","commits":[{"id":"1ee41a444cd904f922cebbaa1d52c166447e46d7","date":1260989504,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#doReopenNoWriter(boolean,IndexCommit).mjava","pathOld":"/dev/null","sourceNew":"  private synchronized IndexReader doReopenNoWriter(final boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (hasChanges) {\n        // We have changes, which means we are not readOnly:\n        assert readOnly == false;\n        // and we hold the write lock:\n        assert writeLock != null;\n        // so no other writer holds the write lock, which\n        // means no changes could have been done to the index:\n        assert isCurrent();\n\n        if (openReadOnly) {\n          return clone(openReadOnly);\n        } else {\n          return this;\n        }\n      } else if (isCurrent()) {\n        if (openReadOnly != readOnly) {\n          // Just fallback to clone\n          return clone(openReadOnly);\n        } else {\n          return this;\n        }\n      }\n    } else {\n      if (directory != commit.getDirectory())\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        if (readOnly != openReadOnly) {\n          // Just fallback to clone\n          return clone(openReadOnly);\n        } else {\n          return this;\n        }\n      }\n    }\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doReopen(infos, false, openReadOnly);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doReopenNoWriter(boolean,IndexCommit).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#doReopenNoWriter(boolean,IndexCommit).mjava","sourceNew":"  private synchronized IndexReader doReopenNoWriter(final boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (hasChanges) {\n        // We have changes, which means we are not readOnly:\n        assert readOnly == false;\n        // and we hold the write lock:\n        assert writeLock != null;\n        // so no other writer holds the write lock, which\n        // means no changes could have been done to the index:\n        assert isCurrent();\n\n        if (openReadOnly) {\n          return clone(openReadOnly);\n        } else {\n          return this;\n        }\n      } else if (isCurrent()) {\n        if (openReadOnly != readOnly) {\n          // Just fallback to clone\n          return clone(openReadOnly);\n        } else {\n          return this;\n        }\n      }\n    } else {\n      if (directory != commit.getDirectory())\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        if (readOnly != openReadOnly) {\n          // Just fallback to clone\n          return clone(openReadOnly);\n        } else {\n          return this;\n        }\n      }\n    }\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doReopen(infos, false, openReadOnly);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  private synchronized IndexReader doReopenNoWriter(final boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n\n    if (commit == null) {\n      if (hasChanges) {\n        // We have changes, which means we are not readOnly:\n        assert readOnly == false;\n        // and we hold the write lock:\n        assert writeLock != null;\n        // so no other writer holds the write lock, which\n        // means no changes could have been done to the index:\n        assert isCurrent();\n\n        if (openReadOnly) {\n          return clone(openReadOnly);\n        } else {\n          return this;\n        }\n      } else if (isCurrent()) {\n        if (openReadOnly != readOnly) {\n          // Just fallback to clone\n          return clone(openReadOnly);\n        } else {\n          return this;\n        }\n      }\n    } else {\n      if (directory != commit.getDirectory())\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        if (readOnly != openReadOnly) {\n          // Just fallback to clone\n          return clone(openReadOnly);\n        } else {\n          return this;\n        }\n      }\n    }\n\n    return (IndexReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doReopen(infos, false, openReadOnly);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1ee41a444cd904f922cebbaa1d52c166447e46d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1ee41a444cd904f922cebbaa1d52c166447e46d7"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1ee41a444cd904f922cebbaa1d52c166447e46d7"],"1ee41a444cd904f922cebbaa1d52c166447e46d7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}