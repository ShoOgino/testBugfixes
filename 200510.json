{"path":"lucene/core/src/java/org/apache/lucene/index/LogByteSizeMergePolicy#LogByteSizeMergePolicy().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogByteSizeMergePolicy#LogByteSizeMergePolicy().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogByteSizeMergePolicy#LogByteSizeMergePolicy().mjava","sourceNew":"  public LogByteSizeMergePolicy() {\n    minMergeSize = (long) (DEFAULT_MIN_MERGE_MB*1024*1024);\n    maxMergeSize = (long) (DEFAULT_MAX_MERGE_MB*1024*1024);\n    maxMergeSizeForForcedMerge = (long) (DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE*1024*1024);\n  }\n\n","sourceOld":"  public LogByteSizeMergePolicy() {\n    minMergeSize = (long) (DEFAULT_MIN_MERGE_MB*1024*1024);\n    maxMergeSize = (long) (DEFAULT_MAX_MERGE_MB*1024*1024);\n    maxMergeSizeForForcedMerge = (long) (DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE*1024*1024);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c14aed69f37b57db63b1fccc0740b17060a08f2b","date":1348227091,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogByteSizeMergePolicy#LogByteSizeMergePolicy().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogByteSizeMergePolicy#LogByteSizeMergePolicy().mjava","sourceNew":"  /** Sole constructor, setting all settings to their\n   *  defaults. */\n  public LogByteSizeMergePolicy() {\n    minMergeSize = (long) (DEFAULT_MIN_MERGE_MB*1024*1024);\n    maxMergeSize = (long) (DEFAULT_MAX_MERGE_MB*1024*1024);\n    maxMergeSizeForForcedMerge = (long) (DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE*1024*1024);\n  }\n\n","sourceOld":"  public LogByteSizeMergePolicy() {\n    minMergeSize = (long) (DEFAULT_MIN_MERGE_MB*1024*1024);\n    maxMergeSize = (long) (DEFAULT_MAX_MERGE_MB*1024*1024);\n    maxMergeSizeForForcedMerge = (long) (DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE*1024*1024);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e3c752ad870dc812d14e2817f92f1f5e1a3be19","date":1424906673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogByteSizeMergePolicy#LogByteSizeMergePolicy().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogByteSizeMergePolicy#LogByteSizeMergePolicy().mjava","sourceNew":"  /** Sole constructor, setting all settings to their\n   *  defaults. */\n  public LogByteSizeMergePolicy() {\n    minMergeSize = (long) (DEFAULT_MIN_MERGE_MB*1024*1024);\n    maxMergeSize = (long) (DEFAULT_MAX_MERGE_MB*1024*1024);\n    // NOTE: in Java, if you cast a too-large double to long, as we are doing here, then it becomes Long.MAX_VALUE\n    maxMergeSizeForForcedMerge = (long) (DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE*1024*1024);\n  }\n\n","sourceOld":"  /** Sole constructor, setting all settings to their\n   *  defaults. */\n  public LogByteSizeMergePolicy() {\n    minMergeSize = (long) (DEFAULT_MIN_MERGE_MB*1024*1024);\n    maxMergeSize = (long) (DEFAULT_MAX_MERGE_MB*1024*1024);\n    maxMergeSizeForForcedMerge = (long) (DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE*1024*1024);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogByteSizeMergePolicy#LogByteSizeMergePolicy().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogByteSizeMergePolicy#LogByteSizeMergePolicy().mjava","sourceNew":"  /** Sole constructor, setting all settings to their\n   *  defaults. */\n  public LogByteSizeMergePolicy() {\n    minMergeSize = (long) (DEFAULT_MIN_MERGE_MB*1024*1024);\n    maxMergeSize = (long) (DEFAULT_MAX_MERGE_MB*1024*1024);\n    // NOTE: in Java, if you cast a too-large double to long, as we are doing here, then it becomes Long.MAX_VALUE\n    maxMergeSizeForForcedMerge = (long) (DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE*1024*1024);\n  }\n\n","sourceOld":"  /** Sole constructor, setting all settings to their\n   *  defaults. */\n  public LogByteSizeMergePolicy() {\n    minMergeSize = (long) (DEFAULT_MIN_MERGE_MB*1024*1024);\n    maxMergeSize = (long) (DEFAULT_MAX_MERGE_MB*1024*1024);\n    maxMergeSizeForForcedMerge = (long) (DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE*1024*1024);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c14aed69f37b57db63b1fccc0740b17060a08f2b","7e3c752ad870dc812d14e2817f92f1f5e1a3be19"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7e3c752ad870dc812d14e2817f92f1f5e1a3be19":["c14aed69f37b57db63b1fccc0740b17060a08f2b"],"c14aed69f37b57db63b1fccc0740b17060a08f2b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e3c752ad870dc812d14e2817f92f1f5e1a3be19"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c14aed69f37b57db63b1fccc0740b17060a08f2b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7e3c752ad870dc812d14e2817f92f1f5e1a3be19":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c14aed69f37b57db63b1fccc0740b17060a08f2b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7e3c752ad870dc812d14e2817f92f1f5e1a3be19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}