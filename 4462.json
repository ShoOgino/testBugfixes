{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testUnloadShardAndCollection().mjava","commits":[{"id":"8c7cbf6b69f2a4acc536536fe1a152a8ad572d05","date":1353362776,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"/dev/null","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(coreDataDir);\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    \n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(coreDataDir);\n    \n    server.request(createCmd);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    Slice shard2 = solrj.getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    long timeoutAt = System.currentTimeMillis() + 30000;\n    while (shard2 != null) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found shard\");\n      }\n      \n      Thread.sleep(50);\n      shard2 = solrj.getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    }\n\n    Slice shard1 = solrj.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    assertNotNull(shard1);\n    assertTrue(solrj.getZkStateReader().getClusterState().getCollections().contains(collection));\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (solrj.getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["175a04d27a2b736171e7e51ca46a03b2aec094d4","175a04d27a2b736171e7e51ca46a03b2aec094d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c215736a9e29403edd2132d9f0829a287b428df4","date":1354641965,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(coreDataDir);\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    \n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(coreDataDir);\n    \n    server.request(createCmd);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    Slice shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    long timeoutAt = System.currentTimeMillis() + 30000;\n    while (shard2 != null) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found shard\");\n      }\n      \n      Thread.sleep(50);\n      shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    }\n\n    Slice shard1 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    assertNotNull(shard1);\n    assertTrue(getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection));\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(coreDataDir);\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    \n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(coreDataDir);\n    \n    server.request(createCmd);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    Slice shard2 = solrj.getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    long timeoutAt = System.currentTimeMillis() + 30000;\n    while (shard2 != null) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found shard\");\n      }\n      \n      Thread.sleep(50);\n      shard2 = solrj.getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    }\n\n    Slice shard1 = solrj.getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    assertNotNull(shard1);\n    assertTrue(solrj.getZkStateReader().getClusterState().getCollections().contains(collection));\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (solrj.getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"/dev/null","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(coreDataDir);\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    \n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(coreDataDir);\n    \n    server.request(createCmd);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    Slice shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    long timeoutAt = System.currentTimeMillis() + 30000;\n    while (shard2 != null) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found shard\");\n      }\n      \n      Thread.sleep(50);\n      shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    }\n\n    Slice shard1 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    assertNotNull(shard1);\n    assertTrue(getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection));\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69439d0df009e0bb0038d1e427159f449dd670d","date":1355704683,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(coreDataDir);\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(15000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(coreDataDir);\n    \n    server.request(createCmd);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    Slice shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    long timeoutAt = System.currentTimeMillis() + 30000;\n    while (shard2 != null) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found shard\");\n      }\n      \n      Thread.sleep(50);\n      shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    }\n\n    Slice shard1 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    assertNotNull(shard1);\n    assertTrue(getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection));\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(coreDataDir);\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    \n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(coreDataDir);\n    \n    server.request(createCmd);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    Slice shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    long timeoutAt = System.currentTimeMillis() + 30000;\n    while (shard2 != null) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found shard\");\n      }\n      \n      Thread.sleep(50);\n      shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    }\n\n    Slice shard1 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    assertNotNull(shard1);\n    assertTrue(getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection));\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"419cdcbd6241f75fcedd8dd2f7769738aef15cf9","date":1355732007,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(coreDataDir);\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(30000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(coreDataDir);\n    \n    server.request(createCmd);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    Slice shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    long timeoutAt = System.currentTimeMillis() + 30000;\n    while (shard2 != null) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found shard\");\n      }\n      \n      Thread.sleep(50);\n      shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    }\n\n    Slice shard1 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    assertNotNull(shard1);\n    assertTrue(getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection));\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(coreDataDir);\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(15000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(coreDataDir);\n    \n    server.request(createCmd);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    Slice shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    long timeoutAt = System.currentTimeMillis() + 30000;\n    while (shard2 != null) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found shard\");\n      }\n      \n      Thread.sleep(50);\n      shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    }\n\n    Slice shard1 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    assertNotNull(shard1);\n    assertTrue(getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection));\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(coreDataDir);\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(30000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(coreDataDir);\n    \n    server.request(createCmd);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    Slice shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    long timeoutAt = System.currentTimeMillis() + 30000;\n    while (shard2 != null) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found shard\");\n      }\n      \n      Thread.sleep(50);\n      shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    }\n\n    Slice shard1 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    assertNotNull(shard1);\n    assertTrue(getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection));\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(coreDataDir);\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    \n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(coreDataDir);\n    \n    server.request(createCmd);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    Slice shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    long timeoutAt = System.currentTimeMillis() + 30000;\n    while (shard2 != null) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found shard\");\n      }\n      \n      Thread.sleep(50);\n      shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    }\n\n    Slice shard1 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    assertNotNull(shard1);\n    assertTrue(getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection));\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81a4a1810b619aea1d002a09c1878b498e20bf33","date":1361142322,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(coreDataDir);\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(30000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(coreDataDir);\n    \n    server.request(createCmd);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    Slice shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    long timeoutAt = System.currentTimeMillis() + 30000;\n    while (shard2 != null) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found shard\");\n      }\n      \n      Thread.sleep(50);\n      shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    }\n\n    Slice shard1 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    assertNotNull(shard1);\n    assertTrue(getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection));\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(coreDataDir);\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(30000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(coreDataDir);\n    \n    server.request(createCmd);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    Slice shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    long timeoutAt = System.currentTimeMillis() + 30000;\n    while (shard2 != null) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found shard\");\n      }\n      \n      Thread.sleep(50);\n      shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    }\n\n    Slice shard1 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    assertNotNull(shard1);\n    assertTrue(getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection));\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09c8567c25c02eeeb3e719841606a1269f3538ca","date":1361155063,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadShardAndCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testUnloadShardAndCollection().mjava","sourceNew":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(coreDataDir);\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(30000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(coreDataDir);\n    \n    server.request(createCmd);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    Slice shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    long timeoutAt = System.currentTimeMillis() + 30000;\n    while (shard2 != null) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found shard\");\n      }\n      \n      Thread.sleep(50);\n      shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    }\n\n    Slice shard1 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    assertNotNull(shard1);\n    assertTrue(getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection));\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","sourceOld":"  private void testUnloadShardAndCollection() throws Exception{\n    // create one leader and one replica\n    \n    Create createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    String collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    String coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"1\";\n    createCmd.setDataDir(coreDataDir);\n    createCmd.setNumShards(2);\n    \n    SolrServer client = clients.get(0);\n    String url1 = getBaseUrl(client);\n    HttpSolrServer server = new HttpSolrServer(url1);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(30000);\n    server.request(createCmd);\n    \n    createCmd = new Create();\n    createCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    collection = \"test_unload_shard_and_collection\";\n    createCmd.setCollection(collection);\n    coreDataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + collection + \"2\";\n    createCmd.setDataDir(coreDataDir);\n    \n    server.request(createCmd);\n\n    // now unload one of the two\n    Unload unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_2\");\n    server.request(unloadCmd);\n    \n    // there should be only one shard\n    Slice shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    long timeoutAt = System.currentTimeMillis() + 30000;\n    while (shard2 != null) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found shard\");\n      }\n      \n      Thread.sleep(50);\n      shard2 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard2\");\n    }\n\n    Slice shard1 = getCommonCloudSolrServer().getZkStateReader().getClusterState().getSlice(collection, \"shard1\");\n    assertNotNull(shard1);\n    assertTrue(getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection));\n    \n    // now unload one of the other\n    unloadCmd = new Unload(false);\n    unloadCmd.setCoreName(\"test_unload_shard_and_collection_1\");\n    server.request(unloadCmd);\n    \n    //printLayout();\n    // the collection should be gone\n    timeoutAt = System.currentTimeMillis() + 30000;\n    while (getCommonCloudSolrServer().getZkStateReader().getClusterState().getCollections().contains(collection)) {\n      if (System.currentTimeMillis() > timeoutAt) {\n        printLayout();\n        fail(\"Still found collection\");\n      }\n      \n      Thread.sleep(50);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","419cdcbd6241f75fcedd8dd2f7769738aef15cf9"],"81a4a1810b619aea1d002a09c1878b498e20bf33":["419cdcbd6241f75fcedd8dd2f7769738aef15cf9"],"c215736a9e29403edd2132d9f0829a287b428df4":["8c7cbf6b69f2a4acc536536fe1a152a8ad572d05"],"419cdcbd6241f75fcedd8dd2f7769738aef15cf9":["a69439d0df009e0bb0038d1e427159f449dd670d"],"8c7cbf6b69f2a4acc536536fe1a152a8ad572d05":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c215736a9e29403edd2132d9f0829a287b428df4"],"a69439d0df009e0bb0038d1e427159f449dd670d":["c215736a9e29403edd2132d9f0829a287b428df4"],"09c8567c25c02eeeb3e719841606a1269f3538ca":["419cdcbd6241f75fcedd8dd2f7769738aef15cf9","81a4a1810b619aea1d002a09c1878b498e20bf33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81a4a1810b619aea1d002a09c1878b498e20bf33"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"81a4a1810b619aea1d002a09c1878b498e20bf33":["09c8567c25c02eeeb3e719841606a1269f3538ca","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c215736a9e29403edd2132d9f0829a287b428df4":["407687e67faf6e1f02a211ca078d8e3eed631027","a69439d0df009e0bb0038d1e427159f449dd670d"],"419cdcbd6241f75fcedd8dd2f7769738aef15cf9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","81a4a1810b619aea1d002a09c1878b498e20bf33","09c8567c25c02eeeb3e719841606a1269f3538ca"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"8c7cbf6b69f2a4acc536536fe1a152a8ad572d05":["c215736a9e29403edd2132d9f0829a287b428df4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c7cbf6b69f2a4acc536536fe1a152a8ad572d05","407687e67faf6e1f02a211ca078d8e3eed631027"],"a69439d0df009e0bb0038d1e427159f449dd670d":["419cdcbd6241f75fcedd8dd2f7769738aef15cf9"],"09c8567c25c02eeeb3e719841606a1269f3538ca":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","09c8567c25c02eeeb3e719841606a1269f3538ca","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}