{"path":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#testBuildShardUrls().mjava","commits":[{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#testBuildShardUrls().mjava","pathOld":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#testBuildShardUrls().mjava","sourceNew":"  @Test\n  public void testBuildShardUrls() throws Exception {\n    // 2x3\n    Integer numShards = 2;\n    List<Object> urls = new ArrayList<Object>();\n    urls.add(\"shard1\");\n    urls.add(\"shard2\");\n    urls.add(\"shard3\");\n    urls.add(\"shard4\");\n    urls.add(\"shard5\");\n    urls.add(\"shard6\");\n    List<List<String>> shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 2, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(3, u.size());\n    }\n    \n    // 1x6\n    numShards = 1;\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 1, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(6, u.size());\n    }\n    \n    // 6x1\n    numShards = 6;\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 6, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(1, u.size());\n    }\n    \n    // 3x2\n    numShards = 3;\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 3, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(2, u.size());\n    }\n    \n    // null shards, 6x1\n    numShards = null;\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 6, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(1, u.size());\n    }\n    \n    // null shards 3x1\n    numShards = null;\n    \n    urls = new ArrayList<Object>();\n    urls.add(\"shard1\");\n    urls.add(\"shard2\");\n    urls.add(\"shard3\");\n    \n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n\n    assertEquals(shardUrls.toString(), 3, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(1, u.size());\n    }\n    \n    // 2x(2,3) off balance\n    numShards = 2;\n    urls = new ArrayList<Object>();\n    urls.add(\"shard1\");\n    urls.add(\"shard2\");\n    urls.add(\"shard3\");\n    urls.add(\"shard4\");\n    urls.add(\"shard5\");\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n\n    assertEquals(shardUrls.toString(), 2, shardUrls.size());\n    \n    Set<Integer> counts = new HashSet<Integer>();\n    counts.add(shardUrls.get(0).size());\n    counts.add(shardUrls.get(1).size());\n    \n    assertTrue(counts.contains(2));\n    assertTrue(counts.contains(3));\n  }\n\n","sourceOld":"  @Test\n  public void testBuildShardUrls() throws Exception {\n    // 2x3\n    Integer numShards = 2;\n    List<Object> urls = new ArrayList<Object>();\n    urls.add(\"shard1\");\n    urls.add(\"shard2\");\n    urls.add(\"shard3\");\n    urls.add(\"shard4\");\n    urls.add(\"shard5\");\n    urls.add(\"shard6\");\n    List<List<String>> shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 2, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(3, u.size());\n    }\n    \n    // 1x6\n    numShards = 1;\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 1, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(6, u.size());\n    }\n    \n    // 6x1\n    numShards = 6;\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 6, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(1, u.size());\n    }\n    \n    // 3x2\n    numShards = 3;\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 3, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(2, u.size());\n    }\n    \n    // null shards, 6x1\n    numShards = null;\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 6, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(1, u.size());\n    }\n    \n    // null shards 3x1\n    numShards = null;\n    \n    urls = new ArrayList<Object>();\n    urls.add(\"shard1\");\n    urls.add(\"shard2\");\n    urls.add(\"shard3\");\n    \n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n\n    assertEquals(shardUrls.toString(), 3, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(1, u.size());\n    }\n    \n    // 2x(2,3) off balance\n    numShards = 2;\n    urls = new ArrayList<Object>();\n    urls.add(\"shard1\");\n    urls.add(\"shard2\");\n    urls.add(\"shard3\");\n    urls.add(\"shard4\");\n    urls.add(\"shard5\");\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n\n    assertEquals(shardUrls.toString(), 2, shardUrls.size());\n    \n    Set<Integer> counts = new HashSet<Integer>();\n    counts.add(shardUrls.get(0).size());\n    counts.add(shardUrls.get(1).size());\n    \n    assertTrue(counts.contains(2));\n    assertTrue(counts.contains(3));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#testBuildShardUrls().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBuildShardUrls() throws Exception {\n    // 2x3\n    Integer numShards = 2;\n    List<Object> urls = new ArrayList<Object>();\n    urls.add(\"shard1\");\n    urls.add(\"shard2\");\n    urls.add(\"shard3\");\n    urls.add(\"shard4\");\n    urls.add(\"shard5\");\n    urls.add(\"shard6\");\n    List<List<String>> shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 2, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(3, u.size());\n    }\n    \n    // 1x6\n    numShards = 1;\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 1, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(6, u.size());\n    }\n    \n    // 6x1\n    numShards = 6;\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 6, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(1, u.size());\n    }\n    \n    // 3x2\n    numShards = 3;\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 3, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(2, u.size());\n    }\n    \n    // null shards, 6x1\n    numShards = null;\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 6, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(1, u.size());\n    }\n    \n    // null shards 3x1\n    numShards = null;\n    \n    urls = new ArrayList<Object>();\n    urls.add(\"shard1\");\n    urls.add(\"shard2\");\n    urls.add(\"shard3\");\n    \n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n\n    assertEquals(shardUrls.toString(), 3, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(1, u.size());\n    }\n    \n    // 2x(2,3) off balance\n    numShards = 2;\n    urls = new ArrayList<Object>();\n    urls.add(\"shard1\");\n    urls.add(\"shard2\");\n    urls.add(\"shard3\");\n    urls.add(\"shard4\");\n    urls.add(\"shard5\");\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n\n    assertEquals(shardUrls.toString(), 2, shardUrls.size());\n    \n    Set<Integer> counts = new HashSet<Integer>();\n    counts.add(shardUrls.get(0).size());\n    counts.add(shardUrls.get(1).size());\n    \n    assertTrue(counts.contains(2));\n    assertTrue(counts.contains(3));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#testBuildShardUrls().mjava","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#testBuildShardUrls().mjava","sourceNew":"  @Test\n  public void testBuildShardUrls() throws Exception {\n    // 2x3\n    Integer numShards = 2;\n    List<Object> urls = new ArrayList<>();\n    urls.add(\"shard1\");\n    urls.add(\"shard2\");\n    urls.add(\"shard3\");\n    urls.add(\"shard4\");\n    urls.add(\"shard5\");\n    urls.add(\"shard6\");\n    List<List<String>> shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 2, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(3, u.size());\n    }\n    \n    // 1x6\n    numShards = 1;\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 1, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(6, u.size());\n    }\n    \n    // 6x1\n    numShards = 6;\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 6, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(1, u.size());\n    }\n    \n    // 3x2\n    numShards = 3;\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 3, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(2, u.size());\n    }\n    \n    // null shards, 6x1\n    numShards = null;\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 6, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(1, u.size());\n    }\n    \n    // null shards 3x1\n    numShards = null;\n    \n    urls = new ArrayList<>();\n    urls.add(\"shard1\");\n    urls.add(\"shard2\");\n    urls.add(\"shard3\");\n    \n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n\n    assertEquals(shardUrls.toString(), 3, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(1, u.size());\n    }\n    \n    // 2x(2,3) off balance\n    numShards = 2;\n    urls = new ArrayList<>();\n    urls.add(\"shard1\");\n    urls.add(\"shard2\");\n    urls.add(\"shard3\");\n    urls.add(\"shard4\");\n    urls.add(\"shard5\");\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n\n    assertEquals(shardUrls.toString(), 2, shardUrls.size());\n    \n    Set<Integer> counts = new HashSet<>();\n    counts.add(shardUrls.get(0).size());\n    counts.add(shardUrls.get(1).size());\n    \n    assertTrue(counts.contains(2));\n    assertTrue(counts.contains(3));\n  }\n\n","sourceOld":"  @Test\n  public void testBuildShardUrls() throws Exception {\n    // 2x3\n    Integer numShards = 2;\n    List<Object> urls = new ArrayList<Object>();\n    urls.add(\"shard1\");\n    urls.add(\"shard2\");\n    urls.add(\"shard3\");\n    urls.add(\"shard4\");\n    urls.add(\"shard5\");\n    urls.add(\"shard6\");\n    List<List<String>> shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 2, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(3, u.size());\n    }\n    \n    // 1x6\n    numShards = 1;\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 1, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(6, u.size());\n    }\n    \n    // 6x1\n    numShards = 6;\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 6, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(1, u.size());\n    }\n    \n    // 3x2\n    numShards = 3;\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 3, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(2, u.size());\n    }\n    \n    // null shards, 6x1\n    numShards = null;\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 6, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(1, u.size());\n    }\n    \n    // null shards 3x1\n    numShards = null;\n    \n    urls = new ArrayList<Object>();\n    urls.add(\"shard1\");\n    urls.add(\"shard2\");\n    urls.add(\"shard3\");\n    \n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n\n    assertEquals(shardUrls.toString(), 3, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(1, u.size());\n    }\n    \n    // 2x(2,3) off balance\n    numShards = 2;\n    urls = new ArrayList<Object>();\n    urls.add(\"shard1\");\n    urls.add(\"shard2\");\n    urls.add(\"shard3\");\n    urls.add(\"shard4\");\n    urls.add(\"shard5\");\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n\n    assertEquals(shardUrls.toString(), 2, shardUrls.size());\n    \n    Set<Integer> counts = new HashSet<Integer>();\n    counts.add(shardUrls.get(0).size());\n    counts.add(shardUrls.get(1).size());\n    \n    assertTrue(counts.contains(2));\n    assertTrue(counts.contains(3));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#testBuildShardUrls().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testBuildShardUrls() throws Exception {\n    // 2x3\n    Integer numShards = 2;\n    List<Object> urls = new ArrayList<>();\n    urls.add(\"shard1\");\n    urls.add(\"shard2\");\n    urls.add(\"shard3\");\n    urls.add(\"shard4\");\n    urls.add(\"shard5\");\n    urls.add(\"shard6\");\n    List<List<String>> shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 2, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(3, u.size());\n    }\n    \n    // 1x6\n    numShards = 1;\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 1, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(6, u.size());\n    }\n    \n    // 6x1\n    numShards = 6;\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 6, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(1, u.size());\n    }\n    \n    // 3x2\n    numShards = 3;\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 3, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(2, u.size());\n    }\n    \n    // null shards, 6x1\n    numShards = null;\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 6, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(1, u.size());\n    }\n    \n    // null shards 3x1\n    numShards = null;\n    \n    urls = new ArrayList<>();\n    urls.add(\"shard1\");\n    urls.add(\"shard2\");\n    urls.add(\"shard3\");\n    \n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n\n    assertEquals(shardUrls.toString(), 3, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(1, u.size());\n    }\n    \n    // 2x(2,3) off balance\n    numShards = 2;\n    urls = new ArrayList<>();\n    urls.add(\"shard1\");\n    urls.add(\"shard2\");\n    urls.add(\"shard3\");\n    urls.add(\"shard4\");\n    urls.add(\"shard5\");\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n\n    assertEquals(shardUrls.toString(), 2, shardUrls.size());\n    \n    Set<Integer> counts = new HashSet<>();\n    counts.add(shardUrls.get(0).size());\n    counts.add(shardUrls.get(1).size());\n    \n    assertTrue(counts.contains(2));\n    assertTrue(counts.contains(3));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#testBuildShardUrls().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testBuildShardUrls() throws Exception {\n    // 2x3\n    Integer numShards = 2;\n    List<Object> urls = new ArrayList<>();\n    urls.add(\"shard1\");\n    urls.add(\"shard2\");\n    urls.add(\"shard3\");\n    urls.add(\"shard4\");\n    urls.add(\"shard5\");\n    urls.add(\"shard6\");\n    List<List<String>> shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 2, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(3, u.size());\n    }\n    \n    // 1x6\n    numShards = 1;\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 1, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(6, u.size());\n    }\n    \n    // 6x1\n    numShards = 6;\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 6, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(1, u.size());\n    }\n    \n    // 3x2\n    numShards = 3;\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 3, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(2, u.size());\n    }\n    \n    // null shards, 6x1\n    numShards = null;\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n    \n    assertEquals(shardUrls.toString(), 6, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(1, u.size());\n    }\n    \n    // null shards 3x1\n    numShards = null;\n    \n    urls = new ArrayList<>();\n    urls.add(\"shard1\");\n    urls.add(\"shard2\");\n    urls.add(\"shard3\");\n    \n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n\n    assertEquals(shardUrls.toString(), 3, shardUrls.size());\n    \n    for (List<String> u : shardUrls) {\n      assertEquals(1, u.size());\n    }\n    \n    // 2x(2,3) off balance\n    numShards = 2;\n    urls = new ArrayList<>();\n    urls.add(\"shard1\");\n    urls.add(\"shard2\");\n    urls.add(\"shard3\");\n    urls.add(\"shard4\");\n    urls.add(\"shard5\");\n    shardUrls = MapReduceIndexerTool.buildShardUrls(urls , numShards);\n\n    assertEquals(shardUrls.toString(), 2, shardUrls.size());\n    \n    Set<Integer> counts = new HashSet<>();\n    counts.add(shardUrls.get(0).size());\n    counts.add(shardUrls.get(1).size());\n    \n    assertTrue(counts.contains(2));\n    assertTrue(counts.contains(3));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["12109b652e9210b8d58fca47f6c4a725d058a58e","fe1c4aa9af769a38e878f608070f672efbeac27f"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}