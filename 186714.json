{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#switchToHeap(PointWriter).mjava","commits":[{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":1,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#switchToHeap(PointWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#switchToHeap(PathSlice,List[Closeable]).mjava","sourceNew":"  /** Pull a partition back into heap once the point count is low enough while recursing. */\n  private HeapPointWriter switchToHeap(PointWriter source) throws IOException {\n    int count = Math.toIntExact(source.count());\n    // Not inside the try because we don't want to close it here:\n\n    try (PointReader reader = source.getReader(0, source.count());\n        HeapPointWriter writer = new HeapPointWriter(count, count, packedBytesLength)) {\n      for(int i=0;i<count;i++) {\n        boolean hasNext = reader.next();\n        assert hasNext;\n        reader.packedValue(scratchBytesRef1);\n        writer.append(scratchBytesRef1, reader.docID());\n      }\n      source.destroy();\n      return writer;\n    } catch (Throwable t) {\n      throw verifyChecksum(t, source);\n    }\n  }\n\n","sourceOld":"  /** Pull a partition back into heap once the point count is low enough while recursing. */\n  private PathSlice switchToHeap(PathSlice source, List<Closeable> toCloseHeroically) throws IOException {\n    int count = Math.toIntExact(source.count);\n    // Not inside the try because we don't want to close it here:\n    PointReader reader = source.writer.getSharedReader(source.start, source.count, toCloseHeroically);\n    try (PointWriter writer = new HeapPointWriter(count, count, packedBytesLength, longOrds, singleValuePerDoc)) {\n      for(int i=0;i<count;i++) {\n        boolean hasNext = reader.next();\n        assert hasNext;\n        writer.append(reader.packedValue(), reader.ord(), reader.docID());\n      }\n      return new PathSlice(writer, 0, count);\n    } catch (Throwable t) {\n      throw verifyChecksum(t, source.writer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2344a1c769566d8c85cffcacc5e55153fa54b86","date":1550661298,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#switchToHeap(PointWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#switchToHeap(PointWriter).mjava","sourceNew":"  /** Pull a partition back into heap once the point count is low enough while recursing. */\n  private HeapPointWriter switchToHeap(PointWriter source) throws IOException {\n    int count = Math.toIntExact(source.count());\n    // Not inside the try because we don't want to close it here:\n\n    try (PointReader reader = source.getReader(0, source.count());\n        HeapPointWriter writer = new HeapPointWriter(count, packedBytesLength)) {\n      for(int i=0;i<count;i++) {\n        boolean hasNext = reader.next();\n        assert hasNext;\n        writer.append(reader.pointValue());\n      }\n      source.destroy();\n      return writer;\n    } catch (Throwable t) {\n      throw verifyChecksum(t, source);\n    }\n  }\n\n","sourceOld":"  /** Pull a partition back into heap once the point count is low enough while recursing. */\n  private HeapPointWriter switchToHeap(PointWriter source) throws IOException {\n    int count = Math.toIntExact(source.count());\n    // Not inside the try because we don't want to close it here:\n\n    try (PointReader reader = source.getReader(0, source.count());\n        HeapPointWriter writer = new HeapPointWriter(count, count, packedBytesLength)) {\n      for(int i=0;i<count;i++) {\n        boolean hasNext = reader.next();\n        assert hasNext;\n        reader.packedValue(scratchBytesRef1);\n        writer.append(scratchBytesRef1, reader.docID());\n      }\n      source.destroy();\n      return writer;\n    } catch (Throwable t) {\n      throw verifyChecksum(t, source);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76a51551f05a6c96a115b5a656837ecc8fd0b1ff","date":1551422476,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#switchToHeap(PointWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#switchToHeap(PointWriter).mjava","sourceNew":"  /** Pull a partition back into heap once the point count is low enough while recursing. */\n  private HeapPointWriter switchToHeap(PointWriter source) throws IOException {\n    int count = Math.toIntExact(source.count());\n    try (PointReader reader = source.getReader(0, source.count());\n        HeapPointWriter writer = new HeapPointWriter(count, packedBytesLength)) {\n      for(int i=0;i<count;i++) {\n        boolean hasNext = reader.next();\n        assert hasNext;\n        writer.append(reader.pointValue());\n      }\n      source.destroy();\n      return writer;\n    } catch (Throwable t) {\n      throw verifyChecksum(t, source);\n    }\n  }\n\n","sourceOld":"  /** Pull a partition back into heap once the point count is low enough while recursing. */\n  private HeapPointWriter switchToHeap(PointWriter source) throws IOException {\n    int count = Math.toIntExact(source.count());\n    // Not inside the try because we don't want to close it here:\n\n    try (PointReader reader = source.getReader(0, source.count());\n        HeapPointWriter writer = new HeapPointWriter(count, packedBytesLength)) {\n      for(int i=0;i<count;i++) {\n        boolean hasNext = reader.next();\n        assert hasNext;\n        writer.append(reader.pointValue());\n      }\n      source.destroy();\n      return writer;\n    } catch (Throwable t) {\n      throw verifyChecksum(t, source);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#switchToHeap(PointWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#switchToHeap(PointWriter).mjava","sourceNew":"  /** Pull a partition back into heap once the point count is low enough while recursing. */\n  private HeapPointWriter switchToHeap(PointWriter source) throws IOException {\n    int count = Math.toIntExact(source.count());\n    try (PointReader reader = source.getReader(0, source.count());\n        HeapPointWriter writer = new HeapPointWriter(config, count)) {\n      for(int i=0;i<count;i++) {\n        boolean hasNext = reader.next();\n        assert hasNext;\n        writer.append(reader.pointValue());\n      }\n      source.destroy();\n      return writer;\n    } catch (Throwable t) {\n      throw verifyChecksum(t, source);\n    }\n  }\n\n","sourceOld":"  /** Pull a partition back into heap once the point count is low enough while recursing. */\n  private HeapPointWriter switchToHeap(PointWriter source) throws IOException {\n    int count = Math.toIntExact(source.count());\n    try (PointReader reader = source.getReader(0, source.count());\n        HeapPointWriter writer = new HeapPointWriter(count, packedBytesLength)) {\n      for(int i=0;i<count;i++) {\n        boolean hasNext = reader.next();\n        assert hasNext;\n        writer.append(reader.pointValue());\n      }\n      source.destroy();\n      return writer;\n    } catch (Throwable t) {\n      throw verifyChecksum(t, source);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["76a51551f05a6c96a115b5a656837ecc8fd0b1ff"],"c2344a1c769566d8c85cffcacc5e55153fa54b86":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"76a51551f05a6c96a115b5a656837ecc8fd0b1ff":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c2344a1c769566d8c85cffcacc5e55153fa54b86":["76a51551f05a6c96a115b5a656837ecc8fd0b1ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"76a51551f05a6c96a115b5a656837ecc8fd0b1ff":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}