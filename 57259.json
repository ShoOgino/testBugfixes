{"path":"lucene/core/src/test/org/apache/lucene/document/TestXYShape#testBoundingBoxQueries().mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestXYShape#testBoundingBoxQueries().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestXYShape#testBoundingBoxQueries().mjava","sourceNew":"  public void testBoundingBoxQueries() throws Exception {\n    XYRectangle r1 = ShapeTestUtil.nextBox();\n    XYRectangle r2 = ShapeTestUtil.nextBox();\n    XYPolygon p;\n    //find two boxes so that r1 contains r2\n    while (true) {\n      // TODO: Should XYRectangle hold values as float?\n      if (areBoxDisjoint(r1, r2)) {\n        p = toPolygon(r2);\n        try {\n          Tessellator.tessellate(p);\n          break;\n        } catch (Exception e) {\n          // ignore, try other combination\n        }\n      }\n      r1 = ShapeTestUtil.nextBox();\n      r2 = ShapeTestUtil.nextBox();\n    }\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add the polygon to the index\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    ////// search /////\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    // Query by itself should match\n    Query q = newRectQuery(FIELDNAME, r2.minX, r2.maxX, r2.minY, r2.maxY);\n    assertEquals(1, searcher.count(q));\n    // r1 contains r2, intersects should match\n    q = newRectQuery(FIELDNAME, r1.minX, r1.maxX, r1.minY, r1.maxY);\n    assertEquals(1, searcher.count(q));\n    // r1 contains r2, WITHIN should match\n    q = XYShape.newBoxQuery(FIELDNAME, QueryRelation.WITHIN, (float) r1.minX, (float) r1.maxX, (float) r1.minY, (float) r1.maxY);\n    assertEquals(1, searcher.count(q));\n\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":"  public void testBoundingBoxQueries() throws Exception {\n    XYRectangle r1 = ShapeTestUtil.nextBox();\n    XYRectangle r2 = ShapeTestUtil.nextBox();\n    XYPolygon p;\n    //find two boxes so that r1 contains r2\n    while (true) {\n      // TODO: Should XYRectangle hold values as float?\n      if (areBoxDisjoint(r1, r2)) {\n        p = toPolygon(r2);\n        try {\n          Tessellator.tessellate(p);\n          break;\n        } catch (Exception e) {\n          // ignore, try other combination\n        }\n      }\n      r1 = ShapeTestUtil.nextBox();\n      r2 = ShapeTestUtil.nextBox();\n    }\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add the polygon to the index\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    ////// search /////\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    // Query by itself should match\n    Query q = newRectQuery(FIELDNAME, r2.minX, r2.maxX, r2.minY, r2.maxY);\n    assertEquals(1, searcher.count(q));\n    // r1 contains r2, intersects should match\n    q = newRectQuery(FIELDNAME, r1.minX, r1.maxX, r1.minY, r1.maxY);\n    assertEquals(1, searcher.count(q));\n    // r1 contains r2, WITHIN should match\n    q = XYShape.newBoxQuery(FIELDNAME, QueryRelation.WITHIN, (float) r1.minX, (float) r1.maxX, (float) r1.minY, (float) r1.maxY);\n    assertEquals(1, searcher.count(q));\n\n    IOUtils.close(reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"617d6d4150e0fb2acef8980ce51e3b8e628fb200","date":1580326292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestXYShape#testBoundingBoxQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestXYShape#testBoundingBoxQueries().mjava","sourceNew":"  public void testBoundingBoxQueries() throws Exception {\n    Random random = random();\n    XYRectangle r1 = ShapeTestUtil.nextBox(random);\n    XYRectangle r2 = ShapeTestUtil.nextBox(random);\n    XYPolygon p;\n    //find two boxes so that r1 contains r2\n    while (true) {\n      // TODO: Should XYRectangle hold values as float?\n      if (areBoxDisjoint(r1, r2)) {\n        p = toPolygon(r2);\n        try {\n          Tessellator.tessellate(p);\n          break;\n        } catch (Exception e) {\n          // ignore, try other combination\n        }\n      }\n      r1 = ShapeTestUtil.nextBox(random);\n      r2 = ShapeTestUtil.nextBox(random);\n    }\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n\n    // add the polygon to the index\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    ////// search /////\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    // Query by itself should match\n    Query q = newRectQuery(FIELDNAME, r2.minX, r2.maxX, r2.minY, r2.maxY);\n    assertEquals(1, searcher.count(q));\n    // r1 contains r2, intersects should match\n    q = newRectQuery(FIELDNAME, r1.minX, r1.maxX, r1.minY, r1.maxY);\n    assertEquals(1, searcher.count(q));\n    // r1 contains r2, WITHIN should match\n    q = XYShape.newBoxQuery(FIELDNAME, QueryRelation.WITHIN, (float) r1.minX, (float) r1.maxX, (float) r1.minY, (float) r1.maxY);\n    assertEquals(1, searcher.count(q));\n\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":"  public void testBoundingBoxQueries() throws Exception {\n    XYRectangle r1 = ShapeTestUtil.nextBox();\n    XYRectangle r2 = ShapeTestUtil.nextBox();\n    XYPolygon p;\n    //find two boxes so that r1 contains r2\n    while (true) {\n      // TODO: Should XYRectangle hold values as float?\n      if (areBoxDisjoint(r1, r2)) {\n        p = toPolygon(r2);\n        try {\n          Tessellator.tessellate(p);\n          break;\n        } catch (Exception e) {\n          // ignore, try other combination\n        }\n      }\n      r1 = ShapeTestUtil.nextBox();\n      r2 = ShapeTestUtil.nextBox();\n    }\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add the polygon to the index\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    ////// search /////\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    // Query by itself should match\n    Query q = newRectQuery(FIELDNAME, r2.minX, r2.maxX, r2.minY, r2.maxY);\n    assertEquals(1, searcher.count(q));\n    // r1 contains r2, intersects should match\n    q = newRectQuery(FIELDNAME, r1.minX, r1.maxX, r1.minY, r1.maxY);\n    assertEquals(1, searcher.count(q));\n    // r1 contains r2, WITHIN should match\n    q = XYShape.newBoxQuery(FIELDNAME, QueryRelation.WITHIN, (float) r1.minX, (float) r1.maxX, (float) r1.minY, (float) r1.maxY);\n    assertEquals(1, searcher.count(q));\n\n    IOUtils.close(reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4d14322963cbbe599706c6c272d5cba0817ea32","date":1581676750,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestXYShape#testBoundingBoxQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestXYShape#testBoundingBoxQueries().mjava","sourceNew":"  public void testBoundingBoxQueries() throws Exception {\n    Random random = random();\n    XYRectangle r1 = ShapeTestUtil.nextBox(random);\n    XYRectangle r2 = ShapeTestUtil.nextBox(random);\n    XYPolygon p;\n    //find two boxes so that r1 contains r2\n    while (true) {\n      // TODO: Should XYRectangle hold values as float?\n      if (areBoxDisjoint(r1, r2)) {\n        p = toPolygon(r2);\n        try {\n          Tessellator.tessellate(p);\n          break;\n        } catch (Exception e) {\n          // ignore, try other combination\n        }\n      }\n      r1 = ShapeTestUtil.nextBox(random);\n      r2 = ShapeTestUtil.nextBox(random);\n    }\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n\n    // add the polygon to the index\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    ////// search /////\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    // Query by itself should match\n    Query q = newRectQuery(FIELDNAME, r2.minX, r2.maxX, r2.minY, r2.maxY);\n    assertEquals(1, searcher.count(q));\n    // r1 contains r2, intersects should match\n    q = newRectQuery(FIELDNAME, r1.minX, r1.maxX, r1.minY, r1.maxY);\n    assertEquals(1, searcher.count(q));\n    // r1 contains r2, WITHIN should match\n    q = XYShape.newBoxQuery(FIELDNAME, QueryRelation.WITHIN, r1.minX, r1.maxX, r1.minY, r1.maxY);\n    assertEquals(1, searcher.count(q));\n\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":"  public void testBoundingBoxQueries() throws Exception {\n    Random random = random();\n    XYRectangle r1 = ShapeTestUtil.nextBox(random);\n    XYRectangle r2 = ShapeTestUtil.nextBox(random);\n    XYPolygon p;\n    //find two boxes so that r1 contains r2\n    while (true) {\n      // TODO: Should XYRectangle hold values as float?\n      if (areBoxDisjoint(r1, r2)) {\n        p = toPolygon(r2);\n        try {\n          Tessellator.tessellate(p);\n          break;\n        } catch (Exception e) {\n          // ignore, try other combination\n        }\n      }\n      r1 = ShapeTestUtil.nextBox(random);\n      r2 = ShapeTestUtil.nextBox(random);\n    }\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n\n    // add the polygon to the index\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    ////// search /////\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    // Query by itself should match\n    Query q = newRectQuery(FIELDNAME, r2.minX, r2.maxX, r2.minY, r2.maxY);\n    assertEquals(1, searcher.count(q));\n    // r1 contains r2, intersects should match\n    q = newRectQuery(FIELDNAME, r1.minX, r1.maxX, r1.minY, r1.maxY);\n    assertEquals(1, searcher.count(q));\n    // r1 contains r2, WITHIN should match\n    q = XYShape.newBoxQuery(FIELDNAME, QueryRelation.WITHIN, (float) r1.minX, (float) r1.maxX, (float) r1.minY, (float) r1.maxY);\n    assertEquals(1, searcher.count(q));\n\n    IOUtils.close(reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f66eaefcdea9f8ffcf9508f78556159d61b8e3df","date":1581695213,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestXYShape#testBoundingBoxQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestXYShape#testBoundingBoxQueries().mjava","sourceNew":"  public void testBoundingBoxQueries() throws Exception {\n    Random random = random();\n    XYRectangle r1 = ShapeTestUtil.nextBox(random);\n    XYRectangle r2 = ShapeTestUtil.nextBox(random);\n    XYPolygon p;\n    //find two boxes so that r1 contains r2\n    while (true) {\n      // TODO: Should XYRectangle hold values as float?\n      if (areBoxDisjoint(r1, r2)) {\n        p = toPolygon(r2);\n        try {\n          Tessellator.tessellate(p);\n          break;\n        } catch (Exception e) {\n          // ignore, try other combination\n        }\n      }\n      r1 = ShapeTestUtil.nextBox(random);\n      r2 = ShapeTestUtil.nextBox(random);\n    }\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n\n    // add the polygon to the index\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    ////// search /////\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    // Query by itself should match\n    Query q = newRectQuery(FIELDNAME, r2.minX, r2.maxX, r2.minY, r2.maxY);\n    assertEquals(1, searcher.count(q));\n    // r1 contains r2, intersects should match\n    q = newRectQuery(FIELDNAME, r1.minX, r1.maxX, r1.minY, r1.maxY);\n    assertEquals(1, searcher.count(q));\n    // r1 contains r2, WITHIN should match\n    q = XYShape.newBoxQuery(FIELDNAME, QueryRelation.WITHIN, r1.minX, r1.maxX, r1.minY, r1.maxY);\n    assertEquals(1, searcher.count(q));\n\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":"  public void testBoundingBoxQueries() throws Exception {\n    Random random = random();\n    XYRectangle r1 = ShapeTestUtil.nextBox(random);\n    XYRectangle r2 = ShapeTestUtil.nextBox(random);\n    XYPolygon p;\n    //find two boxes so that r1 contains r2\n    while (true) {\n      // TODO: Should XYRectangle hold values as float?\n      if (areBoxDisjoint(r1, r2)) {\n        p = toPolygon(r2);\n        try {\n          Tessellator.tessellate(p);\n          break;\n        } catch (Exception e) {\n          // ignore, try other combination\n        }\n      }\n      r1 = ShapeTestUtil.nextBox(random);\n      r2 = ShapeTestUtil.nextBox(random);\n    }\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n\n    // add the polygon to the index\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    ////// search /////\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    // Query by itself should match\n    Query q = newRectQuery(FIELDNAME, r2.minX, r2.maxX, r2.minY, r2.maxY);\n    assertEquals(1, searcher.count(q));\n    // r1 contains r2, intersects should match\n    q = newRectQuery(FIELDNAME, r1.minX, r1.maxX, r1.minY, r1.maxY);\n    assertEquals(1, searcher.count(q));\n    // r1 contains r2, WITHIN should match\n    q = XYShape.newBoxQuery(FIELDNAME, QueryRelation.WITHIN, (float) r1.minX, (float) r1.maxX, (float) r1.minY, (float) r1.maxY);\n    assertEquals(1, searcher.count(q));\n\n    IOUtils.close(reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f66eaefcdea9f8ffcf9508f78556159d61b8e3df":["617d6d4150e0fb2acef8980ce51e3b8e628fb200","a4d14322963cbbe599706c6c272d5cba0817ea32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f66eaefcdea9f8ffcf9508f78556159d61b8e3df"],"a4d14322963cbbe599706c6c272d5cba0817ea32":["617d6d4150e0fb2acef8980ce51e3b8e628fb200"]},"commit2Childs":{"f66eaefcdea9f8ffcf9508f78556159d61b8e3df":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["617d6d4150e0fb2acef8980ce51e3b8e628fb200"],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["f66eaefcdea9f8ffcf9508f78556159d61b8e3df","a4d14322963cbbe599706c6c272d5cba0817ea32"],"a4d14322963cbbe599706c6c272d5cba0817ea32":["f66eaefcdea9f8ffcf9508f78556159d61b8e3df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}