{"path":"src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","commits":[{"id":"52e9359ec09a0ce311e6ce95805998bebc7f7fd0","date":1196417385,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads. */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush();\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet();\n      final int numSegments = segmentInfos.size();\n      for(int i=0;i<numSegments;i++)\n        segmentsToOptimize.add(segmentInfos.info(i));\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      it = runningMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(optimizeMergesPending()) {\n          try {\n            wait();\n          } catch (InterruptedException ie) {\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) mergeExceptions.get(0);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                err.initCause(merge.getException());\n                throw err;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8c01fffb07c7e2f7566be46437e8c29fbdc1893d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","sourceNew":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads. */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, false);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet();\n      final int numSegments = segmentInfos.size();\n      for(int i=0;i<numSegments;i++)\n        segmentsToOptimize.add(segmentInfos.info(i));\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      it = runningMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(optimizeMergesPending()) {\n          try {\n            wait();\n          } catch (InterruptedException ie) {\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) mergeExceptions.get(0);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads. */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush();\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet();\n      final int numSegments = segmentInfos.size();\n      for(int i=0;i<numSegments;i++)\n        segmentsToOptimize.add(segmentInfos.info(i));\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      it = runningMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(optimizeMergesPending()) {\n          try {\n            wait();\n          } catch (InterruptedException ie) {\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) mergeExceptions.get(0);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                err.initCause(merge.getException());\n                throw err;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"51cd38b90c674ebecc798654e3574d5790a9aced","date":1202762089,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","sourceNew":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads. */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, false);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet();\n      final int numSegments = segmentInfos.size();\n      for(int i=0;i<numSegments;i++)\n        segmentsToOptimize.add(segmentInfos.info(i));\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      it = runningMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(optimizeMergesPending()) {\n          try {\n            wait();\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) mergeExceptions.get(0);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads. */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, false);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet();\n      final int numSegments = segmentInfos.size();\n      for(int i=0;i<numSegments;i++)\n        segmentsToOptimize.add(segmentInfos.info(i));\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      it = runningMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(optimizeMergesPending()) {\n          try {\n            wait();\n          } catch (InterruptedException ie) {\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) mergeExceptions.get(0);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be","date":1204801324,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","sourceNew":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads. */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, false, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet();\n      final int numSegments = segmentInfos.size();\n      for(int i=0;i<numSegments;i++)\n        segmentsToOptimize.add(segmentInfos.info(i));\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      it = runningMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(optimizeMergesPending()) {\n          try {\n            wait();\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) mergeExceptions.get(0);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads. */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, false);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet();\n      final int numSegments = segmentInfos.size();\n      for(int i=0;i<numSegments;i++)\n        segmentsToOptimize.add(segmentInfos.info(i));\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      it = runningMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(optimizeMergesPending()) {\n          try {\n            wait();\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) mergeExceptions.get(0);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2586f96f60332eb97ecd2934b0763791462568b2","date":1220116589,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","sourceNew":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads. */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, false, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet();\n      final int numSegments = segmentInfos.size();\n      for(int i=0;i<numSegments;i++)\n        segmentsToOptimize.add(segmentInfos.info(i));\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      it = runningMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(optimizeMergesPending()) {\n          doWait();\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) mergeExceptions.get(0);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads. */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, false, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet();\n      final int numSegments = segmentInfos.size();\n      for(int i=0;i<numSegments;i++)\n        segmentsToOptimize.add(segmentInfos.info(i));\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      it = runningMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(optimizeMergesPending()) {\n          try {\n            wait();\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) mergeExceptions.get(0);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":["8c01fffb07c7e2f7566be46437e8c29fbdc1893d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8c01fffb07c7e2f7566be46437e8c29fbdc1893d","date":1220526844,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","sourceNew":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads. */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, false, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet();\n      final int numSegments = segmentInfos.size();\n      for(int i=0;i<numSegments;i++)\n        segmentsToOptimize.add(segmentInfos.info(i));\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      it = runningMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) mergeExceptions.get(0);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads. */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, false, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet();\n      final int numSegments = segmentInfos.size();\n      for(int i=0;i<numSegments;i++)\n        segmentsToOptimize.add(segmentInfos.info(i));\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      it = runningMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(optimizeMergesPending()) {\n          doWait();\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) mergeExceptions.get(0);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":["52e9359ec09a0ce311e6ce95805998bebc7f7fd0","2586f96f60332eb97ecd2934b0763791462568b2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9665d17707cc21b1db995118ff36129723139ab","date":1225384420,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","sourceNew":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, false, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet();\n      final int numSegments = segmentInfos.size();\n      for(int i=0;i<numSegments;i++)\n        segmentsToOptimize.add(segmentInfos.info(i));\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      it = runningMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) mergeExceptions.get(0);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads. */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, false, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet();\n      final int numSegments = segmentInfos.size();\n      for(int i=0;i<numSegments;i++)\n        segmentsToOptimize.add(segmentInfos.info(i));\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      it = runningMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) mergeExceptions.get(0);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd488f50316362b01a7f67b11a96796b9652e3e5","date":1241121034,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","sourceNew":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, false, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet();\n      final int numSegments = segmentInfos.size();\n      for(int i=0;i<numSegments;i++)\n        segmentsToOptimize.add(segmentInfos.info(i));\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      it = runningMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) mergeExceptions.get(0);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, false, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet();\n      final int numSegments = segmentInfos.size();\n      for(int i=0;i<numSegments;i++)\n        segmentsToOptimize.add(segmentInfos.info(i));\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      it = runningMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) mergeExceptions.get(0);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","sourceNew":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, false, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet<SegmentInfo>();\n      final int numSegments = segmentInfos.size();\n      for(int i=0;i<numSegments;i++)\n        segmentsToOptimize.add(segmentInfos.info(i));\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, false, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet();\n      final int numSegments = segmentInfos.size();\n      for(int i=0;i<numSegments;i++)\n        segmentsToOptimize.add(segmentInfos.info(i));\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      it = runningMerges.iterator();\n      while(it.hasNext()) {\n        final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) it.next();\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) mergeExceptions.get(0);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","sourceNew":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, false, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet<SegmentInfo>();\n      final int numSegments = segmentInfos.size();\n      for(int i=0;i<numSegments;i++)\n        segmentsToOptimize.add(segmentInfos.info(i));\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, false, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet<SegmentInfo>();\n      final int numSegments = segmentInfos.size();\n      for(int i=0;i<numSegments;i++)\n        segmentsToOptimize.add(segmentInfos.info(i));\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9665d17707cc21b1db995118ff36129723139ab":["8c01fffb07c7e2f7566be46437e8c29fbdc1893d"],"cd488f50316362b01a7f67b11a96796b9652e3e5":["e9665d17707cc21b1db995118ff36129723139ab"],"52e9359ec09a0ce311e6ce95805998bebc7f7fd0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ef82ff03e4016c705811b2658e81471a645c0e49":["cd488f50316362b01a7f67b11a96796b9652e3e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8c01fffb07c7e2f7566be46437e8c29fbdc1893d":["2586f96f60332eb97ecd2934b0763791462568b2"],"51cd38b90c674ebecc798654e3574d5790a9aced":["e82780afe6097066eb5befb86e9432f077667e3d"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["51cd38b90c674ebecc798654e3574d5790a9aced"],"e82780afe6097066eb5befb86e9432f077667e3d":["52e9359ec09a0ce311e6ce95805998bebc7f7fd0"],"2586f96f60332eb97ecd2934b0763791462568b2":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ef82ff03e4016c705811b2658e81471a645c0e49"]},"commit2Childs":{"e9665d17707cc21b1db995118ff36129723139ab":["cd488f50316362b01a7f67b11a96796b9652e3e5"],"cd488f50316362b01a7f67b11a96796b9652e3e5":["ef82ff03e4016c705811b2658e81471a645c0e49"],"52e9359ec09a0ce311e6ce95805998bebc7f7fd0":["e82780afe6097066eb5befb86e9432f077667e3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["52e9359ec09a0ce311e6ce95805998bebc7f7fd0"],"ef82ff03e4016c705811b2658e81471a645c0e49":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8c01fffb07c7e2f7566be46437e8c29fbdc1893d":["e9665d17707cc21b1db995118ff36129723139ab"],"51cd38b90c674ebecc798654e3574d5790a9aced":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"e82780afe6097066eb5befb86e9432f077667e3d":["51cd38b90c674ebecc798654e3574d5790a9aced"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["2586f96f60332eb97ecd2934b0763791462568b2"],"2586f96f60332eb97ecd2934b0763791462568b2":["8c01fffb07c7e2f7566be46437e8c29fbdc1893d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}