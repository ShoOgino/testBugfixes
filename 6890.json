{"path":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","sourceNew":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], (long) idx));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, true).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final boolean doShare = random.nextBoolean();\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(doShare);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], value));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, doShare).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], random.nextLong() & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.newPair((long) idx, value)));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        }\n        final Object output;\n        if (random.nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          }\n          output = outputs.get(value, value2);\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n  }\n\n","sourceOld":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], (long) idx));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, true).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final boolean doShare = random.nextBoolean();\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(doShare);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], value));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, doShare).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], random.nextLong() & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.newPair((long) idx, value)));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        }\n        final Object output;\n        if (random.nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          }\n          output = outputs.get(value, value2);\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","sourceNew":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random(), dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], (long) idx));\n      }\n      new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, true).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final boolean doShare = random().nextBoolean();\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(doShare);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random(), 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], value));\n      }\n      new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, doShare).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random().nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], random().nextLong() & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random().nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random().nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random(), 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.newPair((long) idx, value)));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random(), dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random().nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random(), dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random(), dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random(), -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random(), -100, 1000);\n        }\n        final Object output;\n        if (random().nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random(), -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random(), -100, 1000);\n          }\n          output = outputs.get(value, value2);\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random(), dir, inputMode, pairs, outputs, false).doTest();\n    }\n  }\n\n","sourceOld":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], (long) idx));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, true).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final boolean doShare = random.nextBoolean();\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(doShare);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], value));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, doShare).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], random.nextLong() & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.newPair((long) idx, value)));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        }\n        final Object output;\n        if (random.nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          }\n          output = outputs.get(value, value2);\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs, false).doTest();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dfbac05ca8694aac59eef8e62e429bf52bce36e","date":1340114344,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","sourceNew":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random(), dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], (long) idx));\n      }\n      new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, true).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final boolean doShare = random().nextBoolean();\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(doShare);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random(), 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], value));\n      }\n      new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, doShare).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random().nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], _TestUtil.nextLong(random(), 0, Long.MAX_VALUE)));\n      }\n      new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random().nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random().nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random(), 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.newPair((long) idx, value)));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random(), dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random().nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random(), dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random(), dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random(), -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random(), -100, 1000);\n        }\n        final Object output;\n        if (random().nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random(), -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random(), -100, 1000);\n          }\n          output = outputs.get(value, value2);\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random(), dir, inputMode, pairs, outputs, false).doTest();\n    }\n  }\n\n","sourceOld":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random(), dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], (long) idx));\n      }\n      new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, true).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final boolean doShare = random().nextBoolean();\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(doShare);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random(), 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], value));\n      }\n      new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, doShare).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random().nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], random().nextLong() & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random().nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random().nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random(), 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.newPair((long) idx, value)));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random(), dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random().nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random(), dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random(), dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random(), -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random(), -100, 1000);\n        }\n        final Object output;\n        if (random().nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random(), -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random(), -100, 1000);\n          }\n          output = outputs.get(value, value2);\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random(), dir, inputMode, pairs, outputs, false).doTest();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ebe14aae60589c9bb6423f3cce02d5f599e1540","date":1348361556,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","sourceNew":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], (long) idx));\n      }\n      new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, true).doTest(true);\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final boolean doShare = random().nextBoolean();\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(doShare);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random(), 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], value));\n      }\n      new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, doShare).doTest(true);\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random().nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], _TestUtil.nextLong(random(), 0, Long.MAX_VALUE)));\n      }\n      new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random().nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random().nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random(), 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.newPair((long) idx, value)));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random().nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n  }\n\n","sourceOld":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random(), dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], (long) idx));\n      }\n      new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, true).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final boolean doShare = random().nextBoolean();\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(doShare);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random(), 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], value));\n      }\n      new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, doShare).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random().nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], _TestUtil.nextLong(random(), 0, Long.MAX_VALUE)));\n      }\n      new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random().nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random().nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random(), 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.newPair((long) idx, value)));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random(), dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random().nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random(), dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random(), dir, inputMode, pairs, outputs, false).doTest();\n    }\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random(), -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random(), -100, 1000);\n        }\n        final Object output;\n        if (random().nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random(), -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random(), -100, 1000);\n          }\n          output = outputs.get(value, value2);\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random(), dir, inputMode, pairs, outputs, false).doTest();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39","date":1370266419,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","sourceNew":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], (long) idx));\n      }\n      new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, true).doTest(true);\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random(), 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], value));\n      }\n      new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, true).doTest(true);\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], _TestUtil.nextLong(random(), 0, Long.MAX_VALUE)));\n      }\n      new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton();\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton();\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random(), 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.newPair((long) idx, value)));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random().nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n  }\n\n","sourceOld":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], (long) idx));\n      }\n      new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, true).doTest(true);\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final boolean doShare = random().nextBoolean();\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(doShare);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random(), 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], value));\n      }\n      new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, doShare).doTest(true);\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random().nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], _TestUtil.nextLong(random(), 0, Long.MAX_VALUE)));\n      }\n      new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random().nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random().nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random(), 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.newPair((long) idx, value)));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random().nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","sourceNew":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], (long) idx));\n      }\n      new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, true).doTest(true);\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + TestUtil.nextInt(random(), 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], value));\n      }\n      new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, true).doTest(true);\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], TestUtil.nextLong(random(), 0, Long.MAX_VALUE)));\n      }\n      new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton();\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton();\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + TestUtil.nextInt(random(), 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.newPair((long) idx, value)));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random().nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n  }\n\n","sourceOld":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], (long) idx));\n      }\n      new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, true).doTest(true);\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random(), 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], value));\n      }\n      new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, true).doTest(true);\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], _TestUtil.nextLong(random(), 0, Long.MAX_VALUE)));\n      }\n      new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton();\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton();\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random(), 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.newPair((long) idx, value)));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random().nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","sourceNew":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<>(term, NO_OUTPUT));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<>(terms[idx], (long) idx));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, true).doTest(true);\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + TestUtil.nextInt(random(), 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<>(terms[idx], value));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, true).doTest(true);\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<>(terms[idx], TestUtil.nextLong(random(), 0, Long.MAX_VALUE)));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton();\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton();\n      final PairOutputs<Long,Long> outputs = new PairOutputs<>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + TestUtil.nextInt(random(), 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<>(terms[idx],\n                                                                         outputs.newPair((long) idx, value)));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random().nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<>(terms[idx], output));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<>(terms[idx], output));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n  }\n\n","sourceOld":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], (long) idx));\n      }\n      new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, true).doTest(true);\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + TestUtil.nextInt(random(), 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], value));\n      }\n      new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, true).doTest(true);\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], TestUtil.nextLong(random(), 0, Long.MAX_VALUE)));\n      }\n      new FSTTester<Long>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton();\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton();\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + TestUtil.nextInt(random(), 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.newPair((long) idx, value)));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random().nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","sourceNew":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<>(term, NO_OUTPUT));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<>(terms[idx], (long) idx));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, true).doTest(true);\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + TestUtil.nextInt(random(), 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<>(terms[idx], value));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, true).doTest(true);\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<>(terms[idx], TestUtil.nextLong(random(), 0, Long.MAX_VALUE)));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton();\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton();\n      final PairOutputs<Long,Long> outputs = new PairOutputs<>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + TestUtil.nextInt(random(), 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<>(terms[idx],\n                                              outputs.newPair((long) idx, value)));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random().nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<>(terms[idx], output));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<>(terms[idx], output));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n  }\n\n","sourceOld":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<>(term, NO_OUTPUT));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<>(terms[idx], (long) idx));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, true).doTest(true);\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + TestUtil.nextInt(random(), 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<>(terms[idx], value));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, true).doTest(true);\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<>(terms[idx], TestUtil.nextLong(random(), 0, Long.MAX_VALUE)));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton();\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton();\n      final PairOutputs<Long,Long> outputs = new PairOutputs<>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + TestUtil.nextInt(random(), 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<>(terms[idx],\n                                                                         outputs.newPair((long) idx, value)));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random().nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<>(terms[idx], output));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<>(terms[idx], output));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","sourceNew":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<>(term, NO_OUTPUT));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<>(terms[idx], (long) idx));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, true).doTest(true);\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + TestUtil.nextInt(random(), 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<>(terms[idx], value));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, true).doTest(true);\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<>(terms[idx], TestUtil.nextLong(random(), 0, Long.MAX_VALUE)));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton();\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton();\n      final PairOutputs<Long,Long> outputs = new PairOutputs<>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + TestUtil.nextInt(random(), 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<>(terms[idx],\n                                              outputs.newPair((long) idx, value)));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random().nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<>(terms[idx], output));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<>(terms[idx], output));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n  }\n\n","sourceOld":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<>(term, NO_OUTPUT));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<>(terms[idx], (long) idx));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, true).doTest(true);\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + TestUtil.nextInt(random(), 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<>(terms[idx], value));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, true).doTest(true);\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<>(terms[idx], TestUtil.nextLong(random(), 0, Long.MAX_VALUE)));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton();\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton();\n      final PairOutputs<Long,Long> outputs = new PairOutputs<>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + TestUtil.nextInt(random(), 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<>(terms[idx],\n                                                                         outputs.newPair((long) idx, value)));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random().nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<>(terms[idx], output));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<>(terms[idx], output));\n      }\n      new FSTTester<>(random(), dir, inputMode, pairs, outputs, false).doTest(true);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["6b1e6a1c51433ebaa34dc0b76d7ab1876072be39"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"5ebe14aae60589c9bb6423f3cce02d5f599e1540":["7dfbac05ca8694aac59eef8e62e429bf52bce36e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7dfbac05ca8694aac59eef8e62e429bf52bce36e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39":["5ebe14aae60589c9bb6423f3cce02d5f599e1540"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"5ebe14aae60589c9bb6423f3cce02d5f599e1540":["6b1e6a1c51433ebaa34dc0b76d7ab1876072be39"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["7dfbac05ca8694aac59eef8e62e429bf52bce36e"],"7dfbac05ca8694aac59eef8e62e429bf52bce36e":["5ebe14aae60589c9bb6423f3cce02d5f599e1540"],"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}