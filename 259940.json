{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws CorruptIndexException, IOException {\n    final String segment = si.name;\n    final int size = si.docCount;\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      format = checkValidFormat(tvx);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdFormat = checkValidFormat(tvd);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfFormat = checkValidFormat(tvf);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws CorruptIndexException, IOException {\n    final String segment = si.name;\n    final int size = si.docCount;\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      format = checkValidFormat(tvx);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdFormat = checkValidFormat(tvd);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfFormat = checkValidFormat(tvf);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32e43f282bea25b8cc26e4a842d98deafd617e9b","date":1337759516,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws CorruptIndexException, IOException {\n    final String segment = si.name;\n    final int size = si.docCount;\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      final int tvxVersion = CodecUtil.checkHeader(tvx, CODEC_NAME_INDEX, VERSION_START, VERSION_CURRENT);\n      \n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdVersion = CodecUtil.checkHeader(tvd, CODEC_NAME_DOCS, VERSION_START, VERSION_CURRENT);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfVersion = CodecUtil.checkHeader(tvf, CODEC_NAME_FIELDS, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      assert tvxVersion == tvdVersion;\n      assert tvxVersion == tvfVersion;\n\n      numTotalDocs = (int) (tvx.length()-HEADER_LENGTH_INDEX >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws CorruptIndexException, IOException {\n    final String segment = si.name;\n    final int size = si.docCount;\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      format = checkValidFormat(tvx);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdFormat = checkValidFormat(tvd);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfFormat = checkValidFormat(tvf);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3599646b4d4c346cf74d334813488b8b337b5bf5","date":1337790261,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws CorruptIndexException, IOException {\n    final String segment = si.name;\n    final int size = si.docCount;\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      final int tvxVersion = CodecUtil.checkHeader(tvx, CODEC_NAME_INDEX, VERSION_START, VERSION_CURRENT);\n      \n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdVersion = CodecUtil.checkHeader(tvd, CODEC_NAME_DOCS, VERSION_START, VERSION_CURRENT);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfVersion = CodecUtil.checkHeader(tvf, CODEC_NAME_FIELDS, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      assert tvxVersion == tvdVersion;\n      assert tvxVersion == tvfVersion;\n\n      numTotalDocs = (int) (tvx.length()-HEADER_LENGTH_INDEX >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws CorruptIndexException, IOException {\n    final String segment = si.name;\n    final int size = si.docCount;\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      format = checkValidFormat(tvx);\n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdFormat = checkValidFormat(tvd);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfFormat = checkValidFormat(tvf);\n\n      assert format == tvdFormat;\n      assert format == tvfFormat;\n\n      numTotalDocs = (int) (tvx.length() >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"203d7d3cb7712e10ef33009a63247ae40c302d7a","date":1337798111,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws CorruptIndexException, IOException {\n    final String segment = si.name;\n    final int size = si.getDocCount();\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      final int tvxVersion = CodecUtil.checkHeader(tvx, CODEC_NAME_INDEX, VERSION_START, VERSION_CURRENT);\n      \n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdVersion = CodecUtil.checkHeader(tvd, CODEC_NAME_DOCS, VERSION_START, VERSION_CURRENT);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfVersion = CodecUtil.checkHeader(tvf, CODEC_NAME_FIELDS, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      assert tvxVersion == tvdVersion;\n      assert tvxVersion == tvfVersion;\n\n      numTotalDocs = (int) (tvx.length()-HEADER_LENGTH_INDEX >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws CorruptIndexException, IOException {\n    final String segment = si.name;\n    final int size = si.docCount;\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      final int tvxVersion = CodecUtil.checkHeader(tvx, CODEC_NAME_INDEX, VERSION_START, VERSION_CURRENT);\n      \n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdVersion = CodecUtil.checkHeader(tvd, CODEC_NAME_DOCS, VERSION_START, VERSION_CURRENT);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfVersion = CodecUtil.checkHeader(tvf, CODEC_NAME_FIELDS, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      assert tvxVersion == tvdVersion;\n      assert tvxVersion == tvfVersion;\n\n      numTotalDocs = (int) (tvx.length()-HEADER_LENGTH_INDEX >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws CorruptIndexException, IOException {\n    final String segment = si.name;\n    final int size = si.getDocCount();\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      final int tvxVersion = CodecUtil.checkHeader(tvx, CODEC_NAME_INDEX, VERSION_START, VERSION_CURRENT);\n      \n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdVersion = CodecUtil.checkHeader(tvd, CODEC_NAME_DOCS, VERSION_START, VERSION_CURRENT);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfVersion = CodecUtil.checkHeader(tvf, CODEC_NAME_FIELDS, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      assert tvxVersion == tvdVersion;\n      assert tvxVersion == tvfVersion;\n\n      numTotalDocs = (int) (tvx.length()-HEADER_LENGTH_INDEX >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws CorruptIndexException, IOException {\n    final String segment = si.name;\n    final int size = si.docCount;\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      final int tvxVersion = CodecUtil.checkHeader(tvx, CODEC_NAME_INDEX, VERSION_START, VERSION_CURRENT);\n      \n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdVersion = CodecUtil.checkHeader(tvd, CODEC_NAME_DOCS, VERSION_START, VERSION_CURRENT);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfVersion = CodecUtil.checkHeader(tvf, CODEC_NAME_FIELDS, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      assert tvxVersion == tvdVersion;\n      assert tvxVersion == tvfVersion;\n\n      numTotalDocs = (int) (tvx.length()-HEADER_LENGTH_INDEX >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws IOException {\n    final String segment = si.name;\n    final int size = si.getDocCount();\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      final int tvxVersion = CodecUtil.checkHeader(tvx, CODEC_NAME_INDEX, VERSION_START, VERSION_CURRENT);\n      \n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdVersion = CodecUtil.checkHeader(tvd, CODEC_NAME_DOCS, VERSION_START, VERSION_CURRENT);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfVersion = CodecUtil.checkHeader(tvf, CODEC_NAME_FIELDS, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      assert tvxVersion == tvdVersion;\n      assert tvxVersion == tvfVersion;\n\n      numTotalDocs = (int) (tvx.length()-HEADER_LENGTH_INDEX >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws CorruptIndexException, IOException {\n    final String segment = si.name;\n    final int size = si.getDocCount();\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      final int tvxVersion = CodecUtil.checkHeader(tvx, CODEC_NAME_INDEX, VERSION_START, VERSION_CURRENT);\n      \n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdVersion = CodecUtil.checkHeader(tvd, CODEC_NAME_DOCS, VERSION_START, VERSION_CURRENT);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfVersion = CodecUtil.checkHeader(tvf, CODEC_NAME_FIELDS, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      assert tvxVersion == tvdVersion;\n      assert tvxVersion == tvfVersion;\n\n      numTotalDocs = (int) (tvx.length()-HEADER_LENGTH_INDEX >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":["3cc749c053615f5871f3b95715fe292f34e70a53"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws IOException {\n    final String segment = si.name;\n    final int size = si.getDocCount();\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      final int tvxVersion = CodecUtil.checkHeader(tvx, CODEC_NAME_INDEX, VERSION_START, VERSION_CURRENT);\n      \n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdVersion = CodecUtil.checkHeader(tvd, CODEC_NAME_DOCS, VERSION_START, VERSION_CURRENT);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfVersion = CodecUtil.checkHeader(tvf, CODEC_NAME_FIELDS, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      assert tvxVersion == tvdVersion;\n      assert tvxVersion == tvfVersion;\n\n      numTotalDocs = (int) (tvx.length()-HEADER_LENGTH_INDEX >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws CorruptIndexException, IOException {\n    final String segment = si.name;\n    final int size = si.getDocCount();\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      final int tvxVersion = CodecUtil.checkHeader(tvx, CODEC_NAME_INDEX, VERSION_START, VERSION_CURRENT);\n      \n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdVersion = CodecUtil.checkHeader(tvd, CODEC_NAME_DOCS, VERSION_START, VERSION_CURRENT);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfVersion = CodecUtil.checkHeader(tvf, CODEC_NAME_FIELDS, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      assert tvxVersion == tvdVersion;\n      assert tvxVersion == tvfVersion;\n\n      numTotalDocs = (int) (tvx.length()-HEADER_LENGTH_INDEX >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519435fc0d6082a1b8081f9492b714f716877437","date":1348258553,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws IOException {\n    final String segment = si.name;\n    final int size = si.getDocCount();\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      final int tvxVersion = CodecUtil.checkHeader(tvx, CODEC_NAME_INDEX, VERSION_START, VERSION_CURRENT);\n      \n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdVersion = CodecUtil.checkHeader(tvd, CODEC_NAME_DOCS, VERSION_START, VERSION_CURRENT);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfVersion = CodecUtil.checkHeader(tvf, CODEC_NAME_FIELDS, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      assert tvxVersion == tvdVersion;\n      assert tvxVersion == tvfVersion;\n\n      numTotalDocs = (int) (tvx.length()-HEADER_LENGTH_INDEX >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws IOException {\n    final String segment = si.name;\n    final int size = si.getDocCount();\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      final int tvxVersion = CodecUtil.checkHeader(tvx, CODEC_NAME_INDEX, VERSION_START, VERSION_CURRENT);\n      \n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdVersion = CodecUtil.checkHeader(tvd, CODEC_NAME_DOCS, VERSION_START, VERSION_CURRENT);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfVersion = CodecUtil.checkHeader(tvf, CODEC_NAME_FIELDS, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      assert tvxVersion == tvdVersion;\n      assert tvxVersion == tvfVersion;\n\n      numTotalDocs = (int) (tvx.length()-HEADER_LENGTH_INDEX >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bf819846fb54a635eb297e36e7c6196d67f8273","date":1349447995,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws IOException {\n    final String segment = si.name;\n    final int size = si.getDocCount();\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      final int tvxVersion = CodecUtil.checkHeader(tvx, CODEC_NAME_INDEX, VERSION_START, VERSION_CURRENT);\n      \n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdVersion = CodecUtil.checkHeader(tvd, CODEC_NAME_DOCS, VERSION_START, VERSION_CURRENT);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfVersion = CodecUtil.checkHeader(tvf, CODEC_NAME_FIELDS, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      assert tvxVersion == tvdVersion;\n      assert tvxVersion == tvfVersion;\n\n      numTotalDocs = (int) (tvx.length()-HEADER_LENGTH_INDEX >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        try {\n          close();\n        } catch (Throwable t) {} // ensure we throw our original exception\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws IOException {\n    final String segment = si.name;\n    final int size = si.getDocCount();\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      final int tvxVersion = CodecUtil.checkHeader(tvx, CODEC_NAME_INDEX, VERSION_START, VERSION_CURRENT);\n      \n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdVersion = CodecUtil.checkHeader(tvd, CODEC_NAME_DOCS, VERSION_START, VERSION_CURRENT);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfVersion = CodecUtil.checkHeader(tvf, CODEC_NAME_FIELDS, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      assert tvxVersion == tvdVersion;\n      assert tvxVersion == tvfVersion;\n\n      numTotalDocs = (int) (tvx.length()-HEADER_LENGTH_INDEX >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws IOException {\n    final String segment = si.name;\n    final int size = si.getDocCount();\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      final int tvxVersion = CodecUtil.checkHeader(tvx, CODEC_NAME_INDEX, VERSION_START, VERSION_CURRENT);\n      \n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdVersion = CodecUtil.checkHeader(tvd, CODEC_NAME_DOCS, VERSION_START, VERSION_CURRENT);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfVersion = CodecUtil.checkHeader(tvf, CODEC_NAME_FIELDS, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      assert tvxVersion == tvdVersion;\n      assert tvxVersion == tvfVersion;\n\n      numTotalDocs = (int) (tvx.length()-HEADER_LENGTH_INDEX >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        try {\n          close();\n        } catch (Throwable t) {} // ensure we throw our original exception\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws IOException {\n    final String segment = si.name;\n    final int size = si.getDocCount();\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      final int tvxVersion = CodecUtil.checkHeader(tvx, CODEC_NAME_INDEX, VERSION_START, VERSION_CURRENT);\n      \n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdVersion = CodecUtil.checkHeader(tvd, CODEC_NAME_DOCS, VERSION_START, VERSION_CURRENT);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfVersion = CodecUtil.checkHeader(tvf, CODEC_NAME_FIELDS, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      assert tvxVersion == tvdVersion;\n      assert tvxVersion == tvfVersion;\n\n      numTotalDocs = (int) (tvx.length()-HEADER_LENGTH_INDEX >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        try {\n          close();\n        } catch (Throwable t) {} // ensure we throw our original exception\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws IOException {\n    final String segment = si.name;\n    final int size = si.getDocCount();\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      final int tvxVersion = CodecUtil.checkHeader(tvx, CODEC_NAME_INDEX, VERSION_START, VERSION_CURRENT);\n      \n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdVersion = CodecUtil.checkHeader(tvd, CODEC_NAME_DOCS, VERSION_START, VERSION_CURRENT);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfVersion = CodecUtil.checkHeader(tvf, CODEC_NAME_FIELDS, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      assert tvxVersion == tvdVersion;\n      assert tvxVersion == tvfVersion;\n\n      numTotalDocs = (int) (tvx.length()-HEADER_LENGTH_INDEX >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        try {\n          close();\n        } catch (Throwable t) {} // ensure we throw our original exception\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws IOException {\n    final String segment = si.name;\n    final int size = si.getDocCount();\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      final int tvxVersion = CodecUtil.checkHeader(tvx, CODEC_NAME_INDEX, VERSION_START, VERSION_CURRENT);\n      \n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdVersion = CodecUtil.checkHeader(tvd, CODEC_NAME_DOCS, VERSION_START, VERSION_CURRENT);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfVersion = CodecUtil.checkHeader(tvf, CODEC_NAME_FIELDS, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      assert tvxVersion == tvdVersion;\n      assert tvxVersion == tvfVersion;\n\n      numTotalDocs = (int) (tvx.length()-HEADER_LENGTH_INDEX >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        try {\n          close();\n        } catch (Throwable t) {} // ensure we throw our original exception\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"32e43f282bea25b8cc26e4a842d98deafd617e9b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["1bf819846fb54a635eb297e36e7c6196d67f8273","4cc45c615dbb82bf79d5f9550286098367874fbf"],"519435fc0d6082a1b8081f9492b714f716877437":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["32e43f282bea25b8cc26e4a842d98deafd617e9b","203d7d3cb7712e10ef33009a63247ae40c302d7a"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3599646b4d4c346cf74d334813488b8b337b5bf5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","32e43f282bea25b8cc26e4a842d98deafd617e9b"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["1bf819846fb54a635eb297e36e7c6196d67f8273"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"1bf819846fb54a635eb297e36e7c6196d67f8273":["519435fc0d6082a1b8081f9492b714f716877437"],"203d7d3cb7712e10ef33009a63247ae40c302d7a":["3599646b4d4c346cf74d334813488b8b337b5bf5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["32e43f282bea25b8cc26e4a842d98deafd617e9b","3599646b4d4c346cf74d334813488b8b337b5bf5"],"32e43f282bea25b8cc26e4a842d98deafd617e9b":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","3599646b4d4c346cf74d334813488b8b337b5bf5"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"519435fc0d6082a1b8081f9492b714f716877437":["1bf819846fb54a635eb297e36e7c6196d67f8273"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"3599646b4d4c346cf74d334813488b8b337b5bf5":["203d7d3cb7712e10ef33009a63247ae40c302d7a"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["519435fc0d6082a1b8081f9492b714f716877437","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"1bf819846fb54a635eb297e36e7c6196d67f8273":["402ad3ddc9da7b70da1b167667a60ece6a1381fb","4cc45c615dbb82bf79d5f9550286098367874fbf"],"203d7d3cb7712e10ef33009a63247ae40c302d7a":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}