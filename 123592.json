{"path":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testLeakChildWatcher().mjava","commits":[{"id":"6321195fe07e4a4627b4f36c48221de10cb6c26e","date":1492541055,"type":0,"author":"Scott Blum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testLeakChildWatcher().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLeakChildWatcher() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n    assertTrue(dq.peekElements(1, 1, s1 -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertTrue(dq.peekElements(1, 1, s1 -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertNull(dq.peek());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertNull(dq.peek(10));\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n\n    dq.offer(\"hello world\".getBytes(UTF8));\n    assertNotNull(dq.peek()); // synchronously available\n    // dirty and watcher state indeterminate here, race with watcher\n    Thread.sleep(100); // watcher should have fired now\n    assertNotNull(dq.peek());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertFalse(dq.peekElements(1, 1, s -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testLeakChildWatcher().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLeakChildWatcher() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n    assertTrue(dq.peekElements(1, 1, s1 -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertTrue(dq.peekElements(1, 1, s1 -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertNull(dq.peek());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertNull(dq.peek(10));\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n\n    dq.offer(\"hello world\".getBytes(UTF8));\n    assertNotNull(dq.peek()); // synchronously available\n    // dirty and watcher state indeterminate here, race with watcher\n    Thread.sleep(100); // watcher should have fired now\n    assertNotNull(dq.peek());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertFalse(dq.peekElements(1, 1, s -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"282a69d7d427c265f321423b5a3f989aa16dab10","date":1494313009,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testLeakChildWatcher().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testLeakChildWatcher().mjava","sourceNew":"  @Test\n  public void testLeakChildWatcher() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n    assertTrue(dq.peekElements(1, 1, s1 -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertTrue(dq.peekElements(1, 1, s1 -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertNull(dq.peek());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertNull(dq.peek(10));\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n\n    dq.offer(\"hello world\".getBytes(UTF8));\n    assertNotNull(dq.peek()); // synchronously available\n    // dirty and watcher state indeterminate here, race with watcher\n    Thread.sleep(100); // watcher should have fired now\n    assertNotNull(dq.peek());\n    // in case of race condition, childWatcher is kicked off after peek()\n    if (dq.watcherCount() == 0) {\n      assertTrue(dq.isDirty());\n      dq.poll();\n      dq.offer(\"hello world\".getBytes(UTF8));\n      dq.peek();\n    }\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertFalse(dq.peekElements(1, 1, s -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n  }\n\n","sourceOld":"  @Test\n  public void testLeakChildWatcher() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n    assertTrue(dq.peekElements(1, 1, s1 -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertTrue(dq.peekElements(1, 1, s1 -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertNull(dq.peek());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertNull(dq.peek(10));\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n\n    dq.offer(\"hello world\".getBytes(UTF8));\n    assertNotNull(dq.peek()); // synchronously available\n    // dirty and watcher state indeterminate here, race with watcher\n    Thread.sleep(100); // watcher should have fired now\n    assertNotNull(dq.peek());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertFalse(dq.peekElements(1, 1, s -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testLeakChildWatcher().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testLeakChildWatcher().mjava","sourceNew":"  @Test\n  public void testLeakChildWatcher() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n    assertTrue(dq.peekElements(1, 1, s1 -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertTrue(dq.peekElements(1, 1, s1 -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertNull(dq.peek());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertNull(dq.peek(10));\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n\n    dq.offer(\"hello world\".getBytes(UTF8));\n    assertNotNull(dq.peek()); // synchronously available\n    // dirty and watcher state indeterminate here, race with watcher\n    Thread.sleep(100); // watcher should have fired now\n    assertNotNull(dq.peek());\n    // in case of race condition, childWatcher is kicked off after peek()\n    if (dq.watcherCount() == 0) {\n      assertTrue(dq.isDirty());\n      dq.poll();\n      dq.offer(\"hello world\".getBytes(UTF8));\n      dq.peek();\n    }\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertFalse(dq.peekElements(1, 1, s -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n  }\n\n","sourceOld":"  @Test\n  public void testLeakChildWatcher() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n    assertTrue(dq.peekElements(1, 1, s1 -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertTrue(dq.peekElements(1, 1, s1 -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertNull(dq.peek());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertNull(dq.peek(10));\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n\n    dq.offer(\"hello world\".getBytes(UTF8));\n    assertNotNull(dq.peek()); // synchronously available\n    // dirty and watcher state indeterminate here, race with watcher\n    Thread.sleep(100); // watcher should have fired now\n    assertNotNull(dq.peek());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertFalse(dq.peekElements(1, 1, s -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testLeakChildWatcher().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testLeakChildWatcher().mjava","sourceNew":"  @Test\n  public void testLeakChildWatcher() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    ZkDistributedQueue dq = makeDistributedQueue(dqZNode);\n    assertTrue(dq.peekElements(1, 1, s1 -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertTrue(dq.peekElements(1, 1, s1 -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertNull(dq.peek());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertNull(dq.peek(10));\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n\n    dq.offer(\"hello world\".getBytes(UTF8));\n    assertNotNull(dq.peek()); // synchronously available\n    // dirty and watcher state indeterminate here, race with watcher\n    Thread.sleep(100); // watcher should have fired now\n    assertNotNull(dq.peek());\n    // in case of race condition, childWatcher is kicked off after peek()\n    if (dq.watcherCount() == 0) {\n      assertTrue(dq.isDirty());\n      dq.poll();\n      dq.offer(\"hello world\".getBytes(UTF8));\n      dq.peek();\n    }\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertFalse(dq.peekElements(1, 1, s -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n  }\n\n","sourceOld":"  @Test\n  public void testLeakChildWatcher() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n    assertTrue(dq.peekElements(1, 1, s1 -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertTrue(dq.peekElements(1, 1, s1 -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertNull(dq.peek());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertNull(dq.peek(10));\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n\n    dq.offer(\"hello world\".getBytes(UTF8));\n    assertNotNull(dq.peek()); // synchronously available\n    // dirty and watcher state indeterminate here, race with watcher\n    Thread.sleep(100); // watcher should have fired now\n    assertNotNull(dq.peek());\n    // in case of race condition, childWatcher is kicked off after peek()\n    if (dq.watcherCount() == 0) {\n      assertTrue(dq.isDirty());\n      dq.poll();\n      dq.offer(\"hello world\".getBytes(UTF8));\n      dq.peek();\n    }\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertFalse(dq.peekElements(1, 1, s -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testLeakChildWatcher().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testLeakChildWatcher().mjava","sourceNew":"  @Test\n  public void testLeakChildWatcher() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n    assertTrue(dq.peekElements(1, 1, s1 -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertTrue(dq.peekElements(1, 1, s1 -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertNull(dq.peek());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertNull(dq.peek(10));\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n\n    dq.offer(\"hello world\".getBytes(UTF8));\n    assertNotNull(dq.peek()); // synchronously available\n    // dirty and watcher state indeterminate here, race with watcher\n    Thread.sleep(100); // watcher should have fired now\n    assertNotNull(dq.peek());\n    // in case of race condition, childWatcher is kicked off after peek()\n    if (dq.watcherCount() == 0) {\n      assertTrue(dq.isDirty());\n      dq.poll();\n      dq.offer(\"hello world\".getBytes(UTF8));\n      dq.peek();\n    }\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertFalse(dq.peekElements(1, 1, s -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n  }\n\n","sourceOld":"  @Test\n  public void testLeakChildWatcher() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    ZkDistributedQueue dq = makeDistributedQueue(dqZNode);\n    assertTrue(dq.peekElements(1, 1, s1 -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertTrue(dq.peekElements(1, 1, s1 -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertNull(dq.peek());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertNull(dq.peek(10));\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n\n    dq.offer(\"hello world\".getBytes(UTF8));\n    assertNotNull(dq.peek()); // synchronously available\n    // dirty and watcher state indeterminate here, race with watcher\n    Thread.sleep(100); // watcher should have fired now\n    assertNotNull(dq.peek());\n    // in case of race condition, childWatcher is kicked off after peek()\n    if (dq.watcherCount() == 0) {\n      assertTrue(dq.isDirty());\n      dq.poll();\n      dq.offer(\"hello world\".getBytes(UTF8));\n      dq.peek();\n    }\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertFalse(dq.peekElements(1, 1, s -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","date":1505888025,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testLeakChildWatcher().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testLeakChildWatcher().mjava","sourceNew":"  @Test\n  public void testLeakChildWatcher() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    ZkDistributedQueue dq = makeDistributedQueue(dqZNode);\n    assertTrue(dq.peekElements(1, 1, s1 -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertTrue(dq.peekElements(1, 1, s1 -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertNull(dq.peek());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertNull(dq.peek(10));\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n\n    dq.offer(\"hello world\".getBytes(UTF8));\n    assertNotNull(dq.peek()); // synchronously available\n    // dirty and watcher state indeterminate here, race with watcher\n    Thread.sleep(100); // watcher should have fired now\n    assertNotNull(dq.peek());\n    // in case of race condition, childWatcher is kicked off after peek()\n    if (dq.watcherCount() == 0) {\n      assertTrue(dq.isDirty());\n      dq.poll();\n      dq.offer(\"hello world\".getBytes(UTF8));\n      dq.peek();\n    }\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertFalse(dq.peekElements(1, 1, s -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n  }\n\n","sourceOld":"  @Test\n  public void testLeakChildWatcher() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n    assertTrue(dq.peekElements(1, 1, s1 -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertTrue(dq.peekElements(1, 1, s1 -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertNull(dq.peek());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertNull(dq.peek(10));\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n\n    dq.offer(\"hello world\".getBytes(UTF8));\n    assertNotNull(dq.peek()); // synchronously available\n    // dirty and watcher state indeterminate here, race with watcher\n    Thread.sleep(100); // watcher should have fired now\n    assertNotNull(dq.peek());\n    // in case of race condition, childWatcher is kicked off after peek()\n    if (dq.watcherCount() == 0) {\n      assertTrue(dq.isDirty());\n      dq.poll();\n      dq.offer(\"hello world\".getBytes(UTF8));\n      dq.peek();\n    }\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertFalse(dq.peekElements(1, 1, s -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testLeakChildWatcher().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testLeakChildWatcher().mjava","sourceNew":"  @Test\n  public void testLeakChildWatcher() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    ZkDistributedQueue dq = makeDistributedQueue(dqZNode);\n    assertTrue(dq.peekElements(1, 1, s1 -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertTrue(dq.peekElements(1, 1, s1 -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertNull(dq.peek());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertNull(dq.peek(10));\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n\n    dq.offer(\"hello world\".getBytes(UTF8));\n    assertNotNull(dq.peek()); // synchronously available\n    // dirty and watcher state indeterminate here, race with watcher\n    Thread.sleep(100); // watcher should have fired now\n    assertNotNull(dq.peek());\n    // in case of race condition, childWatcher is kicked off after peek()\n    if (dq.watcherCount() == 0) {\n      assertTrue(dq.isDirty());\n      dq.poll();\n      dq.offer(\"hello world\".getBytes(UTF8));\n      dq.peek();\n    }\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertFalse(dq.peekElements(1, 1, s -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n  }\n\n","sourceOld":"  @Test\n  public void testLeakChildWatcher() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n    assertTrue(dq.peekElements(1, 1, s1 -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertTrue(dq.peekElements(1, 1, s1 -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertNull(dq.peek());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertNull(dq.peek(10));\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n\n    dq.offer(\"hello world\".getBytes(UTF8));\n    assertNotNull(dq.peek()); // synchronously available\n    // dirty and watcher state indeterminate here, race with watcher\n    Thread.sleep(100); // watcher should have fired now\n    assertNotNull(dq.peek());\n    // in case of race condition, childWatcher is kicked off after peek()\n    if (dq.watcherCount() == 0) {\n      assertTrue(dq.isDirty());\n      dq.poll();\n      dq.offer(\"hello world\".getBytes(UTF8));\n      dq.peek();\n    }\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n    assertFalse(dq.peekElements(1, 1, s -> true).isEmpty());\n    assertEquals(1, dq.watcherCount());\n    assertFalse(dq.isDirty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","282a69d7d427c265f321423b5a3f989aa16dab10"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["b869898f50ca80263bac2e3ae0949f7700e5c977","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"282a69d7d427c265f321423b5a3f989aa16dab10":["6321195fe07e4a4627b4f36c48221de10cb6c26e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["282a69d7d427c265f321423b5a3f989aa16dab10"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"6321195fe07e4a4627b4f36c48221de10cb6c26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"282a69d7d427c265f321423b5a3f989aa16dab10":["e9017cf144952056066919f1ebc7897ff9bd71b1","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","6321195fe07e4a4627b4f36c48221de10cb6c26e"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6321195fe07e4a4627b4f36c48221de10cb6c26e":["282a69d7d427c265f321423b5a3f989aa16dab10"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}