{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testNormsWithDocValues().mjava","commits":[{"id":"253a79e1af11467dd01315b1919025d288aa0ccb","date":1458032260,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testNormsWithDocValues().mjava","pathOld":"/dev/null","sourceNew":"  public void testNormsWithDocValues() throws Exception {\n    MemoryIndex mi = new MemoryIndex(true, true);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n\n    mi.addField(new BinaryDocValuesField(\"text\", new BytesRef(\"quick brown fox\")), mockAnalyzer, 5f);\n    mi.addField(new TextField(\"text\", \"quick brown fox\", Field.Store.NO), mockAnalyzer, 5f);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"text\", new BytesRef(\"quick brown fox\")));\n    Field field = new TextField(\"text\", \"quick brown fox\", Field.Store.NO);\n    field.setBoost(5f);\n    doc.add(field);\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader controlIndexReader = DirectoryReader.open(dir);\n    LeafReader controlLeafReader =  controlIndexReader.leaves().get(0).reader();\n\n    assertEquals(controlLeafReader.getNormValues(\"text\").get(0), leafReader.getNormValues(\"text\").get(0));\n\n    controlIndexReader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testNormsWithDocValues().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testNormsWithDocValues().mjava","sourceNew":"  public void testNormsWithDocValues() throws Exception {\n    MemoryIndex mi = new MemoryIndex(true, true);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n\n    mi.addField(new BinaryDocValuesField(\"text\", new BytesRef(\"quick brown fox\")), mockAnalyzer, 5f);\n    mi.addField(new TextField(\"text\", \"quick brown fox\", Field.Store.NO), mockAnalyzer, 5f);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"text\", new BytesRef(\"quick brown fox\")));\n    Field field = new TextField(\"text\", \"quick brown fox\", Field.Store.NO);\n    field.setBoost(5f);\n    doc.add(field);\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader controlIndexReader = DirectoryReader.open(dir);\n    LeafReader controlLeafReader =  controlIndexReader.leaves().get(0).reader();\n\n    NumericDocValues norms = controlLeafReader.getNormValues(\"text\");\n    assertEquals(0, norms.nextDoc());\n    NumericDocValues norms2 = leafReader.getNormValues(\"text\");\n    assertEquals(0, norms2.nextDoc());\n    assertEquals(norms.longValue(), norms2.longValue());\n\n    controlIndexReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNormsWithDocValues() throws Exception {\n    MemoryIndex mi = new MemoryIndex(true, true);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n\n    mi.addField(new BinaryDocValuesField(\"text\", new BytesRef(\"quick brown fox\")), mockAnalyzer, 5f);\n    mi.addField(new TextField(\"text\", \"quick brown fox\", Field.Store.NO), mockAnalyzer, 5f);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"text\", new BytesRef(\"quick brown fox\")));\n    Field field = new TextField(\"text\", \"quick brown fox\", Field.Store.NO);\n    field.setBoost(5f);\n    doc.add(field);\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader controlIndexReader = DirectoryReader.open(dir);\n    LeafReader controlLeafReader =  controlIndexReader.leaves().get(0).reader();\n\n    assertEquals(controlLeafReader.getNormValues(\"text\").get(0), leafReader.getNormValues(\"text\").get(0));\n\n    controlIndexReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testNormsWithDocValues().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testNormsWithDocValues().mjava","sourceNew":"  public void testNormsWithDocValues() throws Exception {\n    MemoryIndex mi = new MemoryIndex(true, true);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n\n    mi.addField(new BinaryDocValuesField(\"text\", new BytesRef(\"quick brown fox\")), mockAnalyzer, 5f);\n    mi.addField(new TextField(\"text\", \"quick brown fox\", Field.Store.NO), mockAnalyzer, 5f);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"text\", new BytesRef(\"quick brown fox\")));\n    Field field = new TextField(\"text\", \"quick brown fox\", Field.Store.NO);\n    field.setBoost(5f);\n    doc.add(field);\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader controlIndexReader = DirectoryReader.open(dir);\n    LeafReader controlLeafReader =  controlIndexReader.leaves().get(0).reader();\n\n    NumericDocValues norms = controlLeafReader.getNormValues(\"text\");\n    assertEquals(0, norms.nextDoc());\n    NumericDocValues norms2 = leafReader.getNormValues(\"text\");\n    assertEquals(0, norms2.nextDoc());\n    assertEquals(norms.longValue(), norms2.longValue());\n\n    controlIndexReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNormsWithDocValues() throws Exception {\n    MemoryIndex mi = new MemoryIndex(true, true);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n\n    mi.addField(new BinaryDocValuesField(\"text\", new BytesRef(\"quick brown fox\")), mockAnalyzer, 5f);\n    mi.addField(new TextField(\"text\", \"quick brown fox\", Field.Store.NO), mockAnalyzer, 5f);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"text\", new BytesRef(\"quick brown fox\")));\n    Field field = new TextField(\"text\", \"quick brown fox\", Field.Store.NO);\n    field.setBoost(5f);\n    doc.add(field);\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader controlIndexReader = DirectoryReader.open(dir);\n    LeafReader controlLeafReader =  controlIndexReader.leaves().get(0).reader();\n\n    assertEquals(controlLeafReader.getNormValues(\"text\").get(0), leafReader.getNormValues(\"text\").get(0));\n\n    controlIndexReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testNormsWithDocValues().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testNormsWithDocValues().mjava","sourceNew":"  public void testNormsWithDocValues() throws Exception {\n    MemoryIndex mi = new MemoryIndex(true, true);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n\n    mi.addField(new BinaryDocValuesField(\"text\", new BytesRef(\"quick brown fox\")), mockAnalyzer, 5f);\n    mi.addField(new TextField(\"text\", \"quick brown fox\", Field.Store.NO), mockAnalyzer, 5f);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"text\", new BytesRef(\"quick brown fox\")));\n    Field field = new TextField(\"text\", \"quick brown fox\", Field.Store.NO);\n    field.setBoost(5f);\n    doc.add(field);\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader controlIndexReader = DirectoryReader.open(dir);\n    LeafReader controlLeafReader =  controlIndexReader.leaves().get(0).reader();\n\n    NumericDocValues norms = controlLeafReader.getNormValues(\"text\");\n    assertEquals(0, norms.nextDoc());\n    NumericDocValues norms2 = leafReader.getNormValues(\"text\");\n    assertEquals(0, norms2.nextDoc());\n    assertEquals(norms.longValue(), norms2.longValue());\n\n    controlIndexReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNormsWithDocValues() throws Exception {\n    MemoryIndex mi = new MemoryIndex(true, true);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n\n    mi.addField(new BinaryDocValuesField(\"text\", new BytesRef(\"quick brown fox\")), mockAnalyzer, 5f);\n    mi.addField(new TextField(\"text\", \"quick brown fox\", Field.Store.NO), mockAnalyzer, 5f);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"text\", new BytesRef(\"quick brown fox\")));\n    Field field = new TextField(\"text\", \"quick brown fox\", Field.Store.NO);\n    field.setBoost(5f);\n    doc.add(field);\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader controlIndexReader = DirectoryReader.open(dir);\n    LeafReader controlLeafReader =  controlIndexReader.leaves().get(0).reader();\n\n    assertEquals(controlLeafReader.getNormValues(\"text\").get(0), leafReader.getNormValues(\"text\").get(0));\n\n    controlIndexReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testNormsWithDocValues().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testNormsWithDocValues().mjava","sourceNew":"  public void testNormsWithDocValues() throws Exception {\n    MemoryIndex mi = new MemoryIndex(true, true);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n\n    mi.addField(new BinaryDocValuesField(\"text\", new BytesRef(\"quick brown fox\")), mockAnalyzer);\n    mi.addField(new TextField(\"text\", \"quick brown fox\", Field.Store.NO), mockAnalyzer);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"text\", new BytesRef(\"quick brown fox\")));\n    Field field = new TextField(\"text\", \"quick brown fox\", Field.Store.NO);\n    doc.add(field);\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader controlIndexReader = DirectoryReader.open(dir);\n    LeafReader controlLeafReader =  controlIndexReader.leaves().get(0).reader();\n\n    NumericDocValues norms = controlLeafReader.getNormValues(\"text\");\n    assertEquals(0, norms.nextDoc());\n    NumericDocValues norms2 = leafReader.getNormValues(\"text\");\n    assertEquals(0, norms2.nextDoc());\n    assertEquals(norms.longValue(), norms2.longValue());\n\n    controlIndexReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNormsWithDocValues() throws Exception {\n    MemoryIndex mi = new MemoryIndex(true, true);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n\n    mi.addField(new BinaryDocValuesField(\"text\", new BytesRef(\"quick brown fox\")), mockAnalyzer, 5f);\n    mi.addField(new TextField(\"text\", \"quick brown fox\", Field.Store.NO), mockAnalyzer, 5f);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"text\", new BytesRef(\"quick brown fox\")));\n    Field field = new TextField(\"text\", \"quick brown fox\", Field.Store.NO);\n    field.setBoost(5f);\n    doc.add(field);\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader controlIndexReader = DirectoryReader.open(dir);\n    LeafReader controlLeafReader =  controlIndexReader.leaves().get(0).reader();\n\n    NumericDocValues norms = controlLeafReader.getNormValues(\"text\");\n    assertEquals(0, norms.nextDoc());\n    NumericDocValues norms2 = leafReader.getNormValues(\"text\");\n    assertEquals(0, norms2.nextDoc());\n    assertEquals(norms.longValue(), norms2.longValue());\n\n    controlIndexReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstDirectory#testNormsWithDocValues().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testNormsWithDocValues().mjava","sourceNew":"  public void testNormsWithDocValues() throws Exception {\n    MemoryIndex mi = new MemoryIndex(true, true);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n\n    mi.addField(new BinaryDocValuesField(\"text\", new BytesRef(\"quick brown fox\")), mockAnalyzer);\n    mi.addField(new TextField(\"text\", \"quick brown fox\", Field.Store.NO), mockAnalyzer);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"text\", new BytesRef(\"quick brown fox\")));\n    Field field = new TextField(\"text\", \"quick brown fox\", Field.Store.NO);\n    doc.add(field);\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader controlIndexReader = DirectoryReader.open(dir);\n    LeafReader controlLeafReader =  controlIndexReader.leaves().get(0).reader();\n\n    NumericDocValues norms = controlLeafReader.getNormValues(\"text\");\n    assertEquals(0, norms.nextDoc());\n    NumericDocValues norms2 = leafReader.getNormValues(\"text\");\n    assertEquals(0, norms2.nextDoc());\n    assertEquals(norms.longValue(), norms2.longValue());\n\n    controlIndexReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNormsWithDocValues() throws Exception {\n    MemoryIndex mi = new MemoryIndex(true, true);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n\n    mi.addField(new BinaryDocValuesField(\"text\", new BytesRef(\"quick brown fox\")), mockAnalyzer);\n    mi.addField(new TextField(\"text\", \"quick brown fox\", Field.Store.NO), mockAnalyzer);\n    LeafReader leafReader = mi.createSearcher().getIndexReader().leaves().get(0).reader();\n\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"text\", new BytesRef(\"quick brown fox\")));\n    Field field = new TextField(\"text\", \"quick brown fox\", Field.Store.NO);\n    doc.add(field);\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader controlIndexReader = DirectoryReader.open(dir);\n    LeafReader controlLeafReader =  controlIndexReader.leaves().get(0).reader();\n\n    NumericDocValues norms = controlLeafReader.getNormValues(\"text\");\n    assertEquals(0, norms.nextDoc());\n    NumericDocValues norms2 = leafReader.getNormValues(\"text\");\n    assertEquals(0, norms2.nextDoc());\n    assertEquals(norms.longValue(), norms2.longValue());\n\n    controlIndexReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"253a79e1af11467dd01315b1919025d288aa0ccb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["253a79e1af11467dd01315b1919025d288aa0ccb","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["253a79e1af11467dd01315b1919025d288aa0ccb"],"d77dafd89756a5161d244985903e3487ca109182":["acd9883560fd89e6448b2b447302fe543040cd4f"],"acd9883560fd89e6448b2b447302fe543040cd4f":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["253a79e1af11467dd01315b1919025d288aa0ccb","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"253a79e1af11467dd01315b1919025d288aa0ccb":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["253a79e1af11467dd01315b1919025d288aa0ccb"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["acd9883560fd89e6448b2b447302fe543040cd4f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"acd9883560fd89e6448b2b447302fe543040cd4f":["d77dafd89756a5161d244985903e3487ca109182"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}