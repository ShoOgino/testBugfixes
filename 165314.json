{"path":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verifyRandomBBoxQueries(IndexReader,Object...).mjava","commits":[{"id":"6345300cb90308ddf9579f7a7396a32d98795311","date":1533248257,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verifyRandomBBoxQueries(IndexReader,Object...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPolygonShapeQueries#verifyRandomBBoxQueries(IndexReader,List[Polygon2D],Polygon...).mjava","sourceNew":"  protected void verifyRandomBBoxQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = atLeast(75);\n\n    Bits liveDocs = MultiFields.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect;\n      // quantizing the bbox may end up w/ bounding boxes crossing dateline...\n      // todo add support for bounding boxes crossing dateline\n      while (true) {\n        rect = GeoTestUtil.nextBoxNotCrossingDateline();\n        if (decodeLongitude(encodeLongitudeCeil(rect.minLon)) <= decodeLongitude(encodeLongitude(rect.maxLon)) &&\n            decodeLatitude(encodeLatitudeCeil(rect.minLat)) <= decodeLatitude(encodeLatitude(rect.maxLat))) {\n          break;\n        }\n      }\n      Query query = newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          expected = getValidator().testBBoxQuery(quantizeLatCeil(rect.minLat), quantizeLat(rect.maxLat),\n              quantizeLonCeil(rect.minLon), quantizeLon(rect.maxLon), shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + quantizeLonCeil(rect.minLon) + \" TO \" + quantizeLon(rect.maxLon) + \")\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","sourceOld":"  protected void verifyRandomBBoxQueries(IndexReader reader, List<Polygon2D> poly2d, Polygon... polygons) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = atLeast(75);\n\n    Bits liveDocs = MultiFields.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect = GeoTestUtil.nextBoxNotCrossingDateline();\n      Query query = newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (polygons[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          expected = poly2d.get(id).relate(quantizeLatCeil(rect.minLat), quantizeLat(rect.maxLat),\n              quantizeLonCeil(rect.minLon), quantizeLon(rect.maxLon)) != Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  polygon=\" + quantizePolygon(polygons[id]) + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + quantizeLonCeil(rect.minLon) + \" TO \" + quantizeLon(rect.maxLon) + \")\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97f74f84954e9fefbac4cb38b9bf339e1757600d","date":1533750605,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verifyRandomBBoxQueries(IndexReader,Object...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verifyRandomBBoxQueries(IndexReader,Object...).mjava","sourceNew":"  protected void verifyRandomBBoxQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = atLeast(75);\n\n    Bits liveDocs = MultiFields.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect;\n      // quantizing the bbox may end up w/ bounding boxes crossing dateline...\n      // todo add support for bounding boxes crossing dateline\n      while (true) {\n        rect = GeoTestUtil.nextBoxNotCrossingDateline();\n        if (decodeLongitude(encodeLongitudeCeil(rect.minLon)) <= decodeLongitude(encodeLongitude(rect.maxLon)) &&\n            decodeLatitude(encodeLatitudeCeil(rect.minLat)) <= decodeLatitude(encodeLatitude(rect.maxLat))) {\n          break;\n        }\n      }\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newRectQuery(FIELD_NAME, queryRelation, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          expected = getValidator(queryRelation).testBBoxQuery(quantizeLatCeil(rect.minLat), quantizeLat(rect.maxLat),\n              quantizeLonCeil(rect.minLon), quantizeLon(rect.maxLon), shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + quantizeLonCeil(rect.minLon) + \" TO \" + quantizeLon(rect.maxLon) + \")\\n\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","sourceOld":"  protected void verifyRandomBBoxQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = atLeast(75);\n\n    Bits liveDocs = MultiFields.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect;\n      // quantizing the bbox may end up w/ bounding boxes crossing dateline...\n      // todo add support for bounding boxes crossing dateline\n      while (true) {\n        rect = GeoTestUtil.nextBoxNotCrossingDateline();\n        if (decodeLongitude(encodeLongitudeCeil(rect.minLon)) <= decodeLongitude(encodeLongitude(rect.maxLon)) &&\n            decodeLatitude(encodeLatitudeCeil(rect.minLat)) <= decodeLatitude(encodeLatitude(rect.maxLat))) {\n          break;\n        }\n      }\n      Query query = newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          expected = getValidator().testBBoxQuery(quantizeLatCeil(rect.minLat), quantizeLat(rect.maxLat),\n              quantizeLonCeil(rect.minLon), quantizeLon(rect.maxLon), shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + quantizeLonCeil(rect.minLon) + \" TO \" + quantizeLon(rect.maxLon) + \")\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verifyRandomBBoxQueries(IndexReader,Object...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verifyRandomBBoxQueries(IndexReader,Object...).mjava","sourceNew":"  protected void verifyRandomBBoxQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = atLeast(75);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect;\n      // quantizing the bbox may end up w/ bounding boxes crossing dateline...\n      // todo add support for bounding boxes crossing dateline\n      while (true) {\n        rect = GeoTestUtil.nextBoxNotCrossingDateline();\n        if (decodeLongitude(encodeLongitudeCeil(rect.minLon)) <= decodeLongitude(encodeLongitude(rect.maxLon)) &&\n            decodeLatitude(encodeLatitudeCeil(rect.minLat)) <= decodeLatitude(encodeLatitude(rect.maxLat))) {\n          break;\n        }\n      }\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newRectQuery(FIELD_NAME, queryRelation, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          expected = getValidator(queryRelation).testBBoxQuery(quantizeLatCeil(rect.minLat), quantizeLat(rect.maxLat),\n              quantizeLonCeil(rect.minLon), quantizeLon(rect.maxLon), shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + quantizeLonCeil(rect.minLon) + \" TO \" + quantizeLon(rect.maxLon) + \")\\n\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","sourceOld":"  protected void verifyRandomBBoxQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = atLeast(75);\n\n    Bits liveDocs = MultiFields.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect;\n      // quantizing the bbox may end up w/ bounding boxes crossing dateline...\n      // todo add support for bounding boxes crossing dateline\n      while (true) {\n        rect = GeoTestUtil.nextBoxNotCrossingDateline();\n        if (decodeLongitude(encodeLongitudeCeil(rect.minLon)) <= decodeLongitude(encodeLongitude(rect.maxLon)) &&\n            decodeLatitude(encodeLatitudeCeil(rect.minLat)) <= decodeLatitude(encodeLatitude(rect.maxLat))) {\n          break;\n        }\n      }\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newRectQuery(FIELD_NAME, queryRelation, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          expected = getValidator(queryRelation).testBBoxQuery(quantizeLatCeil(rect.minLat), quantizeLat(rect.maxLat),\n              quantizeLonCeil(rect.minLon), quantizeLon(rect.maxLon), shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + quantizeLonCeil(rect.minLon) + \" TO \" + quantizeLon(rect.maxLon) + \")\\n\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"24491e12b0e85893eccafcbaef34f087deedb9f5","date":1541174782,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verifyRandomBBoxQueries(IndexReader,Object...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verifyRandomBBoxQueries(IndexReader,Object...).mjava","sourceNew":"  /** test random generated bounding boxes */\n  protected void verifyRandomBBoxQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = atLeast(75);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect;\n      // quantizing the bbox may end up w/ bounding boxes crossing dateline...\n      // todo add support for bounding boxes crossing dateline\n      while (true) {\n        rect = GeoTestUtil.nextBoxNotCrossingDateline();\n        if (decodeLongitude(encodeLongitudeCeil(rect.minLon)) <= decodeLongitude(encodeLongitude(rect.maxLon)) &&\n            decodeLatitude(encodeLatitudeCeil(rect.minLat)) <= decodeLatitude(encodeLatitude(rect.maxLat))) {\n          break;\n        }\n      }\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newRectQuery(FIELD_NAME, queryRelation, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          expected = getValidator(queryRelation).testBBoxQuery(quantizeLatCeil(rect.minLat), quantizeLat(rect.maxLat),\n              quantizeLonCeil(rect.minLon), quantizeLon(rect.maxLon), shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + quantizeLonCeil(rect.minLon) + \" TO \" + quantizeLon(rect.maxLon) + \")\\n\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","sourceOld":"  protected void verifyRandomBBoxQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = atLeast(75);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect;\n      // quantizing the bbox may end up w/ bounding boxes crossing dateline...\n      // todo add support for bounding boxes crossing dateline\n      while (true) {\n        rect = GeoTestUtil.nextBoxNotCrossingDateline();\n        if (decodeLongitude(encodeLongitudeCeil(rect.minLon)) <= decodeLongitude(encodeLongitude(rect.maxLon)) &&\n            decodeLatitude(encodeLatitudeCeil(rect.minLat)) <= decodeLatitude(encodeLatitude(rect.maxLat))) {\n          break;\n        }\n      }\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newRectQuery(FIELD_NAME, queryRelation, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          expected = getValidator(queryRelation).testBBoxQuery(quantizeLatCeil(rect.minLat), quantizeLat(rect.maxLat),\n              quantizeLonCeil(rect.minLon), quantizeLon(rect.maxLon), shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + quantizeLonCeil(rect.minLon) + \" TO \" + quantizeLon(rect.maxLon) + \")\\n\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e4fccad460342b1af30cb328cc8297751a218d78","date":1541177339,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verifyRandomBBoxQueries(IndexReader,Object...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verifyRandomBBoxQueries(IndexReader,Object...).mjava","sourceNew":"  /** test random generated bounding boxes */\n  protected void verifyRandomBBoxQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = atLeast(75);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect;\n      // quantizing the bbox may end up w/ bounding boxes crossing dateline...\n      // todo add support for bounding boxes crossing dateline\n      while (true) {\n        rect = GeoTestUtil.nextBoxNotCrossingDateline();\n        if (decodeLongitude(encodeLongitudeCeil(rect.minLon)) <= decodeLongitude(encodeLongitude(rect.maxLon)) &&\n            decodeLatitude(encodeLatitudeCeil(rect.minLat)) <= decodeLatitude(encodeLatitude(rect.maxLat))) {\n          break;\n        }\n      }\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newRectQuery(FIELD_NAME, queryRelation, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          expected = getValidator(queryRelation).testBBoxQuery(quantizeLatCeil(rect.minLat), quantizeLat(rect.maxLat),\n              quantizeLonCeil(rect.minLon), quantizeLon(rect.maxLon), shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + quantizeLonCeil(rect.minLon) + \" TO \" + quantizeLon(rect.maxLon) + \")\\n\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","sourceOld":"  /** test random generated bounding boxes */\n  protected void verifyRandomBBoxQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = atLeast(75);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect;\n      // quantizing the bbox may end up w/ bounding boxes crossing dateline...\n      // todo add support for bounding boxes crossing dateline\n      while (true) {\n        rect = GeoTestUtil.nextBoxNotCrossingDateline();\n        if (decodeLongitude(encodeLongitudeCeil(rect.minLon)) <= decodeLongitude(encodeLongitude(rect.maxLon)) &&\n            decodeLatitude(encodeLatitudeCeil(rect.minLat)) <= decodeLatitude(encodeLatitude(rect.maxLat))) {\n          break;\n        }\n      }\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newRectQuery(FIELD_NAME, queryRelation, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          expected = getValidator(queryRelation).testBBoxQuery(quantizeLatCeil(rect.minLat), quantizeLat(rect.maxLat),\n              quantizeLonCeil(rect.minLon), quantizeLon(rect.maxLon), shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + quantizeLonCeil(rect.minLon) + \" TO \" + quantizeLon(rect.maxLon) + \")\\n\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d","date":1541178922,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verifyRandomBBoxQueries(IndexReader,Object...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verifyRandomBBoxQueries(IndexReader,Object...).mjava","sourceNew":"  /** test random generated bounding boxes */\n  protected void verifyRandomBBoxQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = atLeast(75);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect = GeoTestUtil.nextBox();\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newRectQuery(FIELD_NAME, queryRelation, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        double qMinLon = quantizeLonCeil(rect.minLon);\n        double qMaxLon = quantizeLon(rect.maxLon);\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          if (qMinLon > qMaxLon && rect.crossesDateline() == false) {\n            // if the quantization creates a false dateline crossing (because of encodeCeil):\n            // then do not use encodeCeil\n            qMinLon = quantizeLon(rect.minLon);\n          }\n          expected = getValidator(queryRelation).testBBoxQuery(quantizeLatCeil(rect.minLat), quantizeLat(rect.maxLat), qMinLon, qMaxLon, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(lat=\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + qMinLon + \" TO \" + quantizeLon(rect.maxLon) + \")\\n\");          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","sourceOld":"  /** test random generated bounding boxes */\n  protected void verifyRandomBBoxQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = atLeast(75);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect;\n      // quantizing the bbox may end up w/ bounding boxes crossing dateline...\n      // todo add support for bounding boxes crossing dateline\n      while (true) {\n        rect = GeoTestUtil.nextBoxNotCrossingDateline();\n        if (decodeLongitude(encodeLongitudeCeil(rect.minLon)) <= decodeLongitude(encodeLongitude(rect.maxLon)) &&\n            decodeLatitude(encodeLatitudeCeil(rect.minLat)) <= decodeLatitude(encodeLatitude(rect.maxLat))) {\n          break;\n        }\n      }\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newRectQuery(FIELD_NAME, queryRelation, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          expected = getValidator(queryRelation).testBBoxQuery(quantizeLatCeil(rect.minLat), quantizeLat(rect.maxLat),\n              quantizeLonCeil(rect.minLon), quantizeLon(rect.maxLon), shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + quantizeLonCeil(rect.minLon) + \" TO \" + quantizeLon(rect.maxLon) + \")\\n\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e49feed1f08d73738a9726a61709a7c57ede9f2","date":1541716494,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verifyRandomBBoxQueries(IndexReader,Object...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verifyRandomBBoxQueries(IndexReader,Object...).mjava","sourceNew":"  /** test random generated bounding boxes */\n  protected void verifyRandomBBoxQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = atLeast(75);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect = GeoTestUtil.nextBox();\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newRectQuery(FIELD_NAME, queryRelation, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        double qMinLon = quantizeLonCeil(rect.minLon);\n        double qMaxLon = quantizeLon(rect.maxLon);\n        double qMinLat = quantizeLatCeil(rect.minLat);\n        double qMaxLat = quantizeLat(rect.maxLat);\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          if (qMinLon > qMaxLon && rect.crossesDateline() == false) {\n            // if the quantization creates a false dateline crossing (because of encodeCeil):\n            // then do not use encodeCeil\n            qMinLon = quantizeLon(rect.minLon);\n          }\n\n          if (qMinLat > qMaxLat) {\n            qMinLat = quantizeLat(rect.maxLat);\n          }\n          expected = getValidator(queryRelation).testBBoxQuery(qMinLat, qMaxLat, qMinLon, qMaxLon, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(lat=\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + qMinLon + \" TO \" + quantizeLon(rect.maxLon) + \")\\n\");          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","sourceOld":"  /** test random generated bounding boxes */\n  protected void verifyRandomBBoxQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = atLeast(75);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect = GeoTestUtil.nextBox();\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newRectQuery(FIELD_NAME, queryRelation, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        double qMinLon = quantizeLonCeil(rect.minLon);\n        double qMaxLon = quantizeLon(rect.maxLon);\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          if (qMinLon > qMaxLon && rect.crossesDateline() == false) {\n            // if the quantization creates a false dateline crossing (because of encodeCeil):\n            // then do not use encodeCeil\n            qMinLon = quantizeLon(rect.minLon);\n          }\n          expected = getValidator(queryRelation).testBBoxQuery(quantizeLatCeil(rect.minLat), quantizeLat(rect.maxLat), qMinLon, qMaxLon, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(lat=\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + qMinLon + \" TO \" + quantizeLon(rect.maxLon) + \")\\n\");          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cb1d3c28af553b906e024a8a705042fa072efbdd","date":1547716211,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verifyRandomBBoxQueries(IndexReader,Object...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verifyRandomBBoxQueries(IndexReader,Object...).mjava","sourceNew":"  /** test random generated bounding boxes */\n  protected void verifyRandomBBoxQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect = GeoTestUtil.nextBox();\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newRectQuery(FIELD_NAME, queryRelation, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        double qMinLon = quantizeLonCeil(rect.minLon);\n        double qMaxLon = quantizeLon(rect.maxLon);\n        double qMinLat = quantizeLatCeil(rect.minLat);\n        double qMaxLat = quantizeLat(rect.maxLat);\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          if (qMinLon > qMaxLon && rect.crossesDateline() == false) {\n            // if the quantization creates a false dateline crossing (because of encodeCeil):\n            // then do not use encodeCeil\n            qMinLon = quantizeLon(rect.minLon);\n          }\n\n          if (qMinLat > qMaxLat) {\n            qMinLat = quantizeLat(rect.maxLat);\n          }\n          expected = getValidator(queryRelation).testBBoxQuery(qMinLat, qMaxLat, qMinLon, qMaxLon, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(lat=\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + qMinLon + \" TO \" + quantizeLon(rect.maxLon) + \")\\n\");          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","sourceOld":"  /** test random generated bounding boxes */\n  protected void verifyRandomBBoxQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = atLeast(75);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect = GeoTestUtil.nextBox();\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newRectQuery(FIELD_NAME, queryRelation, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        double qMinLon = quantizeLonCeil(rect.minLon);\n        double qMaxLon = quantizeLon(rect.maxLon);\n        double qMinLat = quantizeLatCeil(rect.minLat);\n        double qMaxLat = quantizeLat(rect.maxLat);\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          if (qMinLon > qMaxLon && rect.crossesDateline() == false) {\n            // if the quantization creates a false dateline crossing (because of encodeCeil):\n            // then do not use encodeCeil\n            qMinLon = quantizeLon(rect.minLon);\n          }\n\n          if (qMinLat > qMaxLat) {\n            qMinLat = quantizeLat(rect.maxLat);\n          }\n          expected = getValidator(queryRelation).testBBoxQuery(qMinLat, qMaxLat, qMinLon, qMaxLon, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(lat=\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + qMinLon + \" TO \" + quantizeLon(rect.maxLon) + \")\\n\");          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","bugFix":["4312aa12218419d320e0966c3f3e72deb359afaa"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5e8251ad51618827e557dd369f16921a666914b5","date":1548082828,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verifyRandomBBoxQueries(IndexReader,Object...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verifyRandomBBoxQueries(IndexReader,Object...).mjava","sourceNew":"  /** test random generated bounding boxes */\n  protected void verifyRandomBBoxQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect = GeoTestUtil.nextBox();\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newRectQuery(FIELD_NAME, queryRelation, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        double qMinLon = quantizeLonCeil(rect.minLon);\n        double qMaxLon = quantizeLon(rect.maxLon);\n        double qMinLat = quantizeLatCeil(rect.minLat);\n        double qMaxLat = quantizeLat(rect.maxLat);\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          if (qMinLon > qMaxLon && rect.crossesDateline() == false) {\n            // if the quantization creates a false dateline crossing (because of encodeCeil):\n            // then do not use encodeCeil\n            qMinLon = quantizeLon(rect.minLon);\n          }\n\n          if (qMinLat > qMaxLat) {\n            qMinLat = quantizeLat(rect.maxLat);\n          }\n          expected = getValidator(queryRelation).testBBoxQuery(qMinLat, qMaxLat, qMinLon, qMaxLon, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          if (shapes[id] instanceof Object[]) {\n            b.append(\"  shape=\" + Arrays.toString((Object[]) shapes[id]) + \"\\n\");\n          } else {\n            b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          }\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(lat=\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + qMinLon + \" TO \" + quantizeLon(rect.maxLon) + \")\\n\");          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","sourceOld":"  /** test random generated bounding boxes */\n  protected void verifyRandomBBoxQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect = GeoTestUtil.nextBox();\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newRectQuery(FIELD_NAME, queryRelation, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        double qMinLon = quantizeLonCeil(rect.minLon);\n        double qMaxLon = quantizeLon(rect.maxLon);\n        double qMinLat = quantizeLatCeil(rect.minLat);\n        double qMaxLat = quantizeLat(rect.maxLat);\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          if (qMinLon > qMaxLon && rect.crossesDateline() == false) {\n            // if the quantization creates a false dateline crossing (because of encodeCeil):\n            // then do not use encodeCeil\n            qMinLon = quantizeLon(rect.minLon);\n          }\n\n          if (qMinLat > qMaxLat) {\n            qMinLat = quantizeLat(rect.maxLat);\n          }\n          expected = getValidator(queryRelation).testBBoxQuery(qMinLat, qMaxLat, qMinLon, qMaxLon, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(lat=\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + qMinLon + \" TO \" + quantizeLon(rect.maxLon) + \")\\n\");          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","bugFix":["6345300cb90308ddf9579f7a7396a32d98795311"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":3,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verifyRandomBBoxQueries(IndexReader,Object...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verifyRandomBBoxQueries(IndexReader,Object...).mjava","sourceNew":"  /** test random generated bounding boxes */\n  protected void verifyRandomBBoxQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect = GeoTestUtil.nextBox();\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newRectQuery(FIELD_NAME, queryRelation, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        double qMinLon = quantizeLonCeil(rect.minLon);\n        double qMaxLon = quantizeLon(rect.maxLon);\n        double qMinLat = quantizeLatCeil(rect.minLat);\n        double qMaxLat = quantizeLat(rect.maxLat);\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          if (qMinLon > qMaxLon && rect.crossesDateline() == false) {\n            // if the quantization creates a false dateline crossing (because of encodeCeil):\n            // then do not use encodeCeil\n            qMinLon = quantizeLon(rect.minLon);\n          }\n\n          if (qMinLat > qMaxLat) {\n            qMinLat = quantizeLat(rect.maxLat);\n          }\n          expected = getValidator(queryRelation).testBBoxQuery(qMinLat, qMaxLat, qMinLon, qMaxLon, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          if (shapes[id] instanceof Object[]) {\n            b.append(\"  shape=\" + Arrays.toString((Object[]) shapes[id]) + \"\\n\");\n          } else {\n            b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          }\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(lat=\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + qMinLon + \" TO \" + quantizeLon(rect.maxLon) + \")\\n\");          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","sourceOld":"  /** test random generated bounding boxes */\n  protected void verifyRandomBBoxQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect = GeoTestUtil.nextBox();\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newRectQuery(FIELD_NAME, queryRelation, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        double qMinLon = quantizeLonCeil(rect.minLon);\n        double qMaxLon = quantizeLon(rect.maxLon);\n        double qMinLat = quantizeLatCeil(rect.minLat);\n        double qMaxLat = quantizeLat(rect.maxLat);\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          if (qMinLon > qMaxLon && rect.crossesDateline() == false) {\n            // if the quantization creates a false dateline crossing (because of encodeCeil):\n            // then do not use encodeCeil\n            qMinLon = quantizeLon(rect.minLon);\n          }\n\n          if (qMinLat > qMaxLat) {\n            qMinLat = quantizeLat(rect.maxLat);\n          }\n          expected = getValidator(queryRelation).testBBoxQuery(qMinLat, qMaxLat, qMinLon, qMaxLon, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(lat=\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + qMinLon + \" TO \" + quantizeLon(rect.maxLon) + \")\\n\");          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseShapeTestCase#verifyRandomBBoxQueries(IndexReader,Object...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verifyRandomBBoxQueries(IndexReader,Object...).mjava","sourceNew":"  /** test random generated bounding boxes */\n  protected void verifyRandomBBoxQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Object rect = randomQueryBox();\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newRectQuery(FIELD_NAME, queryRelation, rectMinX(rect), rectMaxX(rect), rectMinY(rect), rectMaxY(rect));\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        double qMinLon = ENCODER.quantizeXCeil(rectMinX(rect));\n        double qMaxLon = ENCODER.quantizeX(rectMaxX(rect));\n        double qMinLat = ENCODER.quantizeYCeil(rectMinY(rect));\n        double qMaxLat = ENCODER.quantizeY(rectMaxY(rect));\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          if (qMinLon > qMaxLon && rectCrossesDateline(rect) == false) {\n            // if the quantization creates a false dateline crossing (because of encodeCeil):\n            // then do not use encodeCeil\n            qMinLon = ENCODER.quantizeX(rectMinX(rect));\n          }\n\n          if (qMinLat > qMaxLat) {\n            qMinLat = ENCODER.quantizeY(rectMaxY(rect));\n          }\n          expected = VALIDATOR.setRelation(queryRelation).testBBoxQuery(qMinLat, qMaxLat, qMinLon, qMaxLon, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          if (shapes[id] instanceof Object[]) {\n            b.append(\"  shape=\" + Arrays.toString((Object[]) shapes[id]) + \"\\n\");\n          } else {\n            b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          }\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(lat=\" + ENCODER.quantizeYCeil(rectMinY(rect)) + \" TO \" + ENCODER.quantizeY(rectMaxY(rect)) + \" lon=\" + qMinLon + \" TO \" + ENCODER.quantizeX(rectMaxX(rect)) + \")\\n\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","sourceOld":"  /** test random generated bounding boxes */\n  protected void verifyRandomBBoxQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect = GeoTestUtil.nextBox();\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newRectQuery(FIELD_NAME, queryRelation, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        double qMinLon = quantizeLonCeil(rect.minLon);\n        double qMaxLon = quantizeLon(rect.maxLon);\n        double qMinLat = quantizeLatCeil(rect.minLat);\n        double qMaxLat = quantizeLat(rect.maxLat);\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          if (qMinLon > qMaxLon && rect.crossesDateline() == false) {\n            // if the quantization creates a false dateline crossing (because of encodeCeil):\n            // then do not use encodeCeil\n            qMinLon = quantizeLon(rect.minLon);\n          }\n\n          if (qMinLat > qMaxLat) {\n            qMinLat = quantizeLat(rect.maxLat);\n          }\n          expected = getValidator(queryRelation).testBBoxQuery(qMinLat, qMaxLat, qMinLon, qMaxLon, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          if (shapes[id] instanceof Object[]) {\n            b.append(\"  shape=\" + Arrays.toString((Object[]) shapes[id]) + \"\\n\");\n          } else {\n            b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          }\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(lat=\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + qMinLon + \" TO \" + quantizeLon(rect.maxLon) + \")\\n\");          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e49feed1f08d73738a9726a61709a7c57ede9f2":["d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d"],"e4fccad460342b1af30cb328cc8297751a218d78":["24491e12b0e85893eccafcbaef34f087deedb9f5"],"cb1d3c28af553b906e024a8a705042fa072efbdd":["3e49feed1f08d73738a9726a61709a7c57ede9f2"],"d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d":["e4fccad460342b1af30cb328cc8297751a218d78"],"24491e12b0e85893eccafcbaef34f087deedb9f5":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"97f74f84954e9fefbac4cb38b9bf339e1757600d":["6345300cb90308ddf9579f7a7396a32d98795311"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c286b0d8c507a88b289407e2fe161effa275c6b0":["5e8251ad51618827e557dd369f16921a666914b5"],"6345300cb90308ddf9579f7a7396a32d98795311":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5e8251ad51618827e557dd369f16921a666914b5":["cb1d3c28af553b906e024a8a705042fa072efbdd"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["97f74f84954e9fefbac4cb38b9bf339e1757600d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["cb1d3c28af553b906e024a8a705042fa072efbdd","5e8251ad51618827e557dd369f16921a666914b5"]},"commit2Childs":{"3e49feed1f08d73738a9726a61709a7c57ede9f2":["cb1d3c28af553b906e024a8a705042fa072efbdd"],"e4fccad460342b1af30cb328cc8297751a218d78":["d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d"],"d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d":["3e49feed1f08d73738a9726a61709a7c57ede9f2"],"cb1d3c28af553b906e024a8a705042fa072efbdd":["5e8251ad51618827e557dd369f16921a666914b5","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"24491e12b0e85893eccafcbaef34f087deedb9f5":["e4fccad460342b1af30cb328cc8297751a218d78"],"97f74f84954e9fefbac4cb38b9bf339e1757600d":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6345300cb90308ddf9579f7a7396a32d98795311"],"6345300cb90308ddf9579f7a7396a32d98795311":["97f74f84954e9fefbac4cb38b9bf339e1757600d"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5e8251ad51618827e557dd369f16921a666914b5":["c286b0d8c507a88b289407e2fe161effa275c6b0","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["24491e12b0e85893eccafcbaef34f087deedb9f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}