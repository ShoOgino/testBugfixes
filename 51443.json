{"path":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testTwoDocuments().mjava","commits":[{"id":"a47efa78e788c0e07f09493b2dc8e027f8dc6e67","date":1352956175,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testTwoDocuments().mjava","pathOld":"/dev/null","sourceNew":"  public void testTwoDocuments() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new PackedLongDocValuesField(\"dv\", 1));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new PackedLongDocValuesField(\"dv\", 2));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    DocValues dv = ireader.leaves().get(0).reader().docValues(\"dv\");\n    assertEquals(1, dv.getSource().getInt(0));\n    assertEquals(2, dv.getSource().getInt(1));\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cd329bd749496f6c58b586a6c0dd0dc8201206f","date":1353092226,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testTwoDocumentsNumeric().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testTwoDocuments().mjava","sourceNew":"  public void testTwoDocumentsNumeric() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new PackedLongDocValuesField(\"dv\", 1));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new PackedLongDocValuesField(\"dv\", 2));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    NumericDocValues dv = ireader.leaves().get(0).reader().getNumericDocValues(\"dv\", random().nextBoolean());\n    assertEquals(1, dv.get(0));\n    assertEquals(2, dv.get(1));\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testTwoDocuments() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new PackedLongDocValuesField(\"dv\", 1));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new PackedLongDocValuesField(\"dv\", 2));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    DocValues dv = ireader.leaves().get(0).reader().docValues(\"dv\");\n    assertEquals(1, dv.getSource().getInt(0));\n    assertEquals(2, dv.getSource().getInt(1));\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7cd329bd749496f6c58b586a6c0dd0dc8201206f":["a47efa78e788c0e07f09493b2dc8e027f8dc6e67"],"a47efa78e788c0e07f09493b2dc8e027f8dc6e67":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a47efa78e788c0e07f09493b2dc8e027f8dc6e67","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7cd329bd749496f6c58b586a6c0dd0dc8201206f":[],"a47efa78e788c0e07f09493b2dc8e027f8dc6e67":["7cd329bd749496f6c58b586a6c0dd0dc8201206f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7cd329bd749496f6c58b586a6c0dd0dc8201206f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}