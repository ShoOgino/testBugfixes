{"path":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#initCoreList(CoreContainer).mjava","commits":[{"id":"9818efa55563ddfecdecafbdd43f4bee9f252e7d","date":1364853872,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#initCoreList(CoreContainer).mjava","pathOld":"/dev/null","sourceNew":"  public void initCoreList(CoreContainer container) throws IOException {\n    isAutoDiscover = getBool(ConfigSolr.ConfLevel.SOLR_CORES, \"autoDiscoverCores\", false);\n    if (isAutoDiscover) {\n      synchronized (coreDescriptorPlusMap) {\n        walkFromHere(new File(container.getSolrHome()), container);\n      }\n\n    } else {\n      coreNodes = (NodeList) evaluate(\"solr/cores/core\",\n          XPathConstants.NODESET);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0cf46558b3f7708ed3a21e174b9e11cd30e26be","date":1365551184,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#initCoreList(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#initCoreList(CoreContainer).mjava","sourceNew":"  public void initCoreList(CoreContainer container) throws IOException {\n    isAutoDiscover = getBool(ConfigSolr.ConfLevel.SOLR_CORES, \"autoDiscoverCores\", false);\n    if (isAutoDiscover) {\n      synchronized (coreDescriptorPlusMap) {\n        walkFromHere(new File(container.getSolrHome()), container, new HashMap<String, CoreDescriptorPlus>());\n      }\n\n    } else {\n      coreNodes = (NodeList) evaluate(\"solr/cores/core\",\n          XPathConstants.NODESET);\n      // Check a couple of error conditions\n      Set<String> names = new HashSet<String>(); // for duplicate names\n      Map<String, String> dirs = new HashMap<String, String>(); // for duplicate data dirs.\n\n      for (int idx = 0; idx < coreNodes.getLength(); ++idx) {\n        Node node = coreNodes.item(idx);\n        String name = DOMUtil.getAttr(node,  CoreDescriptor.CORE_NAME, null);\n        String dataDir = DOMUtil.getAttr(node,  CoreDescriptor.CORE_DATADIR, null);\n        if (name != null) {\n          if (! names.contains(name)) {\n            names.add(name);\n          } else {\n            String msg = String.format(Locale.ROOT, \"More than one core defined for core named %s\", name);\n            log.error(msg);\n            badCores.put(name, msg);\n          }\n        }\n\n        if (dataDir != null) {\n          if (! dirs.containsKey(dataDir)) {\n            dirs.put(dataDir, name);\n          } else {\n            String msg = String.format(Locale.ROOT, \"More than one core points to data dir %s. They are in %s and %s\",\n                dataDir, dirs.get(dataDir), name);\n            log.error(msg);\n            badCores.put(name, msg);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void initCoreList(CoreContainer container) throws IOException {\n    isAutoDiscover = getBool(ConfigSolr.ConfLevel.SOLR_CORES, \"autoDiscoverCores\", false);\n    if (isAutoDiscover) {\n      synchronized (coreDescriptorPlusMap) {\n        walkFromHere(new File(container.getSolrHome()), container);\n      }\n\n    } else {\n      coreNodes = (NodeList) evaluate(\"solr/cores/core\",\n          XPathConstants.NODESET);\n    }\n\n  }\n\n","bugFix":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e475642767c688ede5728d7918326f70b4e0bf3a","date":1366072489,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#initCoreList(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#initCoreList(CoreContainer).mjava","sourceNew":"  //NOTE:\n  public void initCoreList(CoreContainer container) throws IOException {\n    if (is50OrLater) {\n      if (container != null) { //TODO: 5.0. Yet another bit of nonsense only because of the test harness.\n        synchronized (coreDescriptorPlusMap) {\n          String coreRoot = get(CfgProp.SOLR_COREROOTDIRECTORY, container.getSolrHome());\n          walkFromHere(new File(coreRoot), container, new HashMap<String, String>(), new HashMap<String, String>());\n        }\n      }\n    } else {\n      coreNodes = (NodeList) evaluate(\"solr/cores/core\",\n          XPathConstants.NODESET);\n      // Check a couple of error conditions\n      Set<String> names = new HashSet<String>(); // for duplicate names\n      Map<String, String> dirs = new HashMap<String, String>(); // for duplicate data dirs.\n\n      for (int idx = 0; idx < coreNodes.getLength(); ++idx) {\n        Node node = coreNodes.item(idx);\n        String name = DOMUtil.getAttr(node,  CoreDescriptor.CORE_NAME, null);\n        String dataDir = DOMUtil.getAttr(node,  CoreDescriptor.CORE_DATADIR, null);\n        if (name != null) {\n          if (! names.contains(name)) {\n            names.add(name);\n          } else {\n            String msg = String.format(Locale.ROOT, \"More than one core defined for core named %s\", name);\n            log.error(msg);\n            badCores.put(name, msg);\n          }\n        }\n\n        if (dataDir != null) {\n          if (! dirs.containsKey(dataDir)) {\n            dirs.put(dataDir, name);\n          } else {\n            String msg = String.format(Locale.ROOT, \"More than one core points to data dir %s. They are in %s and %s\",\n                dataDir, dirs.get(dataDir), name);\n            log.error(msg);\n            badCores.put(name, msg);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void initCoreList(CoreContainer container) throws IOException {\n    isAutoDiscover = getBool(ConfigSolr.ConfLevel.SOLR_CORES, \"autoDiscoverCores\", false);\n    if (isAutoDiscover) {\n      synchronized (coreDescriptorPlusMap) {\n        walkFromHere(new File(container.getSolrHome()), container, new HashMap<String, CoreDescriptorPlus>());\n      }\n\n    } else {\n      coreNodes = (NodeList) evaluate(\"solr/cores/core\",\n          XPathConstants.NODESET);\n      // Check a couple of error conditions\n      Set<String> names = new HashSet<String>(); // for duplicate names\n      Map<String, String> dirs = new HashMap<String, String>(); // for duplicate data dirs.\n\n      for (int idx = 0; idx < coreNodes.getLength(); ++idx) {\n        Node node = coreNodes.item(idx);\n        String name = DOMUtil.getAttr(node,  CoreDescriptor.CORE_NAME, null);\n        String dataDir = DOMUtil.getAttr(node,  CoreDescriptor.CORE_DATADIR, null);\n        if (name != null) {\n          if (! names.contains(name)) {\n            names.add(name);\n          } else {\n            String msg = String.format(Locale.ROOT, \"More than one core defined for core named %s\", name);\n            log.error(msg);\n            badCores.put(name, msg);\n          }\n        }\n\n        if (dataDir != null) {\n          if (! dirs.containsKey(dataDir)) {\n            dirs.put(dataDir, name);\n          } else {\n            String msg = String.format(Locale.ROOT, \"More than one core points to data dir %s. They are in %s and %s\",\n                dataDir, dirs.get(dataDir), name);\n            log.error(msg);\n            badCores.put(name, msg);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3278df77f7f499b55fdb79861c0641450444e7d0","date":1366238988,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#initCoreList(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#initCoreList(CoreContainer).mjava","sourceNew":"  private void initCoreList(CoreContainer container) throws IOException {\n    if (is50OrLater) {\n      if (container != null) { //TODO: 5.0. Yet another bit of nonsense only because of the test harness.\n        synchronized (coreDescriptorPlusMap) {\n          String coreRoot = get(CfgProp.SOLR_COREROOTDIRECTORY, container.getSolrHome());\n          walkFromHere(new File(coreRoot), container, new HashMap<String, String>(), new HashMap<String, String>());\n        }\n      }\n    } else {\n      coreNodes = (NodeList) evaluate(\"solr/cores/core\",\n          XPathConstants.NODESET);\n      // Check a couple of error conditions\n      Set<String> names = new HashSet<String>(); // for duplicate names\n      Map<String, String> dirs = new HashMap<String, String>(); // for duplicate data dirs.\n\n      for (int idx = 0; idx < coreNodes.getLength(); ++idx) {\n        Node node = coreNodes.item(idx);\n        String name = DOMUtil.getAttr(node,  CoreDescriptor.CORE_NAME, null);\n        String dataDir = DOMUtil.getAttr(node,  CoreDescriptor.CORE_DATADIR, null);\n        if (name != null) {\n          if (! names.contains(name)) {\n            names.add(name);\n          } else {\n            String msg = String.format(Locale.ROOT, \"More than one core defined for core named %s\", name);\n            log.error(msg);\n          }\n        }\n\n        if (dataDir != null) {\n          if (! dirs.containsKey(dataDir)) {\n            dirs.put(dataDir, name);\n          } else {\n            String msg = String.format(Locale.ROOT, \"More than one core points to data dir %s. They are in %s and %s\",\n                dataDir, dirs.get(dataDir), name);\n            log.warn(msg);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  //NOTE:\n  public void initCoreList(CoreContainer container) throws IOException {\n    if (is50OrLater) {\n      if (container != null) { //TODO: 5.0. Yet another bit of nonsense only because of the test harness.\n        synchronized (coreDescriptorPlusMap) {\n          String coreRoot = get(CfgProp.SOLR_COREROOTDIRECTORY, container.getSolrHome());\n          walkFromHere(new File(coreRoot), container, new HashMap<String, String>(), new HashMap<String, String>());\n        }\n      }\n    } else {\n      coreNodes = (NodeList) evaluate(\"solr/cores/core\",\n          XPathConstants.NODESET);\n      // Check a couple of error conditions\n      Set<String> names = new HashSet<String>(); // for duplicate names\n      Map<String, String> dirs = new HashMap<String, String>(); // for duplicate data dirs.\n\n      for (int idx = 0; idx < coreNodes.getLength(); ++idx) {\n        Node node = coreNodes.item(idx);\n        String name = DOMUtil.getAttr(node,  CoreDescriptor.CORE_NAME, null);\n        String dataDir = DOMUtil.getAttr(node,  CoreDescriptor.CORE_DATADIR, null);\n        if (name != null) {\n          if (! names.contains(name)) {\n            names.add(name);\n          } else {\n            String msg = String.format(Locale.ROOT, \"More than one core defined for core named %s\", name);\n            log.error(msg);\n            badCores.put(name, msg);\n          }\n        }\n\n        if (dataDir != null) {\n          if (! dirs.containsKey(dataDir)) {\n            dirs.put(dataDir, name);\n          } else {\n            String msg = String.format(Locale.ROOT, \"More than one core points to data dir %s. They are in %s and %s\",\n                dataDir, dirs.get(dataDir), name);\n            log.error(msg);\n            badCores.put(name, msg);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0","date":1366659310,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#initCoreList(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#initCoreList(CoreContainer).mjava","sourceNew":"  private void initCoreList(CoreContainer container) throws IOException {\n    if (container != null) { // TODO: 5.0. Yet another bit of nonsense only\n                             // because of the test harness.\n      synchronized (coreDescriptorPlusMap) {\n        String coreRoot = get(CfgProp.SOLR_COREROOTDIRECTORY,\n            container.getSolrHome());\n        walkFromHere(new File(coreRoot), container,\n            new HashMap<String,String>(), new HashMap<String,String>());\n      }\n    }\n  }\n\n","sourceOld":"  private void initCoreList(CoreContainer container) throws IOException {\n    if (is50OrLater) {\n      if (container != null) { //TODO: 5.0. Yet another bit of nonsense only because of the test harness.\n        synchronized (coreDescriptorPlusMap) {\n          String coreRoot = get(CfgProp.SOLR_COREROOTDIRECTORY, container.getSolrHome());\n          walkFromHere(new File(coreRoot), container, new HashMap<String, String>(), new HashMap<String, String>());\n        }\n      }\n    } else {\n      coreNodes = (NodeList) evaluate(\"solr/cores/core\",\n          XPathConstants.NODESET);\n      // Check a couple of error conditions\n      Set<String> names = new HashSet<String>(); // for duplicate names\n      Map<String, String> dirs = new HashMap<String, String>(); // for duplicate data dirs.\n\n      for (int idx = 0; idx < coreNodes.getLength(); ++idx) {\n        Node node = coreNodes.item(idx);\n        String name = DOMUtil.getAttr(node,  CoreDescriptor.CORE_NAME, null);\n        String dataDir = DOMUtil.getAttr(node,  CoreDescriptor.CORE_DATADIR, null);\n        if (name != null) {\n          if (! names.contains(name)) {\n            names.add(name);\n          } else {\n            String msg = String.format(Locale.ROOT, \"More than one core defined for core named %s\", name);\n            log.error(msg);\n          }\n        }\n\n        if (dataDir != null) {\n          if (! dirs.containsKey(dataDir)) {\n            dirs.put(dataDir, name);\n          } else {\n            String msg = String.format(Locale.ROOT, \"More than one core points to data dir %s. They are in %s and %s\",\n                dataDir, dirs.get(dataDir), name);\n            log.warn(msg);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9409650933cc688e77e565092a25e58adfc2e18d","date":1366663164,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#initCoreList(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#initCoreList(CoreContainer).mjava","sourceNew":"  private void initCoreList(CoreContainer container) throws IOException {\n    if (container != null) { // TODO: 5.0. Yet another bit of nonsense only\n                             // because of the test harness.\n      \n      String coreRoot = get(CfgProp.SOLR_COREROOTDIRECTORY,\n          container.getSolrHome());\n      walkFromHere(new File(coreRoot), container, new HashMap<String,String>(),\n          new HashMap<String,String>());\n      \n    }\n  }\n\n","sourceOld":"  private void initCoreList(CoreContainer container) throws IOException {\n    if (container != null) { // TODO: 5.0. Yet another bit of nonsense only\n                             // because of the test harness.\n      synchronized (coreDescriptorPlusMap) {\n        String coreRoot = get(CfgProp.SOLR_COREROOTDIRECTORY,\n            container.getSolrHome());\n        walkFromHere(new File(coreRoot), container,\n            new HashMap<String,String>(), new HashMap<String,String>());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b29abed5661c7911e4b45d5a3d79a186268e28c4","date":1366675770,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#initCoreList(CoreContainer).mjava","sourceNew":null,"sourceOld":"  private void initCoreList(CoreContainer container) throws IOException {\n    if (container != null) { // TODO: 5.0. Yet another bit of nonsense only\n                             // because of the test harness.\n      \n      String coreRoot = get(CfgProp.SOLR_COREROOTDIRECTORY,\n          container.getSolrHome());\n      walkFromHere(new File(coreRoot), container, new HashMap<String,String>(),\n          new HashMap<String,String>());\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b29abed5661c7911e4b45d5a3d79a186268e28c4":["9409650933cc688e77e565092a25e58adfc2e18d"],"9409650933cc688e77e565092a25e58adfc2e18d":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"],"3278df77f7f499b55fdb79861c0641450444e7d0":["e475642767c688ede5728d7918326f70b4e0bf3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e475642767c688ede5728d7918326f70b4e0bf3a":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["3278df77f7f499b55fdb79861c0641450444e7d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b29abed5661c7911e4b45d5a3d79a186268e28c4"]},"commit2Childs":{"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["e475642767c688ede5728d7918326f70b4e0bf3a"],"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"b29abed5661c7911e4b45d5a3d79a186268e28c4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9409650933cc688e77e565092a25e58adfc2e18d":["b29abed5661c7911e4b45d5a3d79a186268e28c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"3278df77f7f499b55fdb79861c0641450444e7d0":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"],"e475642767c688ede5728d7918326f70b4e0bf3a":["3278df77f7f499b55fdb79861c0641450444e7d0"],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["9409650933cc688e77e565092a25e58adfc2e18d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}