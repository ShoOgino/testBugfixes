{"path":"lucene/core/src/java/org/apache/lucene/util/fst/BytesStore#copyBytes(long,long,int).mjava","commits":[{"id":"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","date":1358188277,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/BytesStore#copyBytes(long,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/BytesStore#copyBytes(int,int,int).mjava","sourceNew":"  /** Absolute copy bytes self to self, without changing the\n   *  position. Note: this cannot \"grow\" the bytes, so must\n   *  only call it on already written parts. */\n  public void copyBytes(long src, long dest, int len) {\n    //System.out.println(\"BS.copyBytes src=\" + src + \" dest=\" + dest + \" len=\" + len);\n    assert src < dest;\n\n    // Note: weird: must go \"backwards\" because copyBytes\n    // calls us with overlapping src/dest.  If we\n    // go forwards then we overwrite bytes before we can\n    // copy them:\n\n    /*\n    int blockIndex = src >> blockBits;\n    int upto = src & blockMask;\n    byte[] block = blocks.get(blockIndex);\n    while (len > 0) {\n      int chunk = blockSize - upto;\n      System.out.println(\"  cycle: chunk=\" + chunk + \" len=\" + len);\n      if (len <= chunk) {\n        writeBytes(dest, block, upto, len);\n        break;\n      } else {\n        writeBytes(dest, block, upto, chunk);\n        blockIndex++;\n        block = blocks.get(blockIndex);\n        upto = 0;\n        len -= chunk;\n        dest += chunk;\n      }\n    }\n    */\n\n    long end = src + len;\n\n    int blockIndex = (int) (end >> blockBits);\n    int downTo = (int) (end & blockMask);\n    if (downTo == 0) {\n      blockIndex--;\n      downTo = blockSize;\n    }\n    byte[] block = blocks.get(blockIndex);\n\n    while (len > 0) {\n      //System.out.println(\"  cycle downTo=\" + downTo);\n      if (len <= downTo) {\n        //System.out.println(\"    finish\");\n        writeBytes(dest, block, downTo-len, len);\n        break;\n      } else {\n        //System.out.println(\"    partial\");\n        len -= downTo;\n        writeBytes(dest + len, block, 0, downTo);\n        blockIndex--;\n        block = blocks.get(blockIndex);\n        downTo = blockSize;\n      }\n    }\n  }\n\n","sourceOld":"  /** Absolute copy bytes self to self, without changing the\n   *  position. Note: this cannot \"grow\" the bytes, so must\n   *  only call it on already written parts. */\n  public void copyBytes(int src, int dest, int len) {\n    //System.out.println(\"BS.copyBytes src=\" + src + \" dest=\" + dest + \" len=\" + len);\n    assert src < dest;\n\n    // Note: weird: must go \"backwards\" because copyBytes\n    // calls us with overlapping src/dest.  If we\n    // go forwards then we overwrite bytes before we can\n    // copy them:\n\n    /*\n    int blockIndex = src >> blockBits;\n    int upto = src & blockMask;\n    byte[] block = blocks.get(blockIndex);\n    while (len > 0) {\n      int chunk = blockSize - upto;\n      System.out.println(\"  cycle: chunk=\" + chunk + \" len=\" + len);\n      if (len <= chunk) {\n        writeBytes(dest, block, upto, len);\n        break;\n      } else {\n        writeBytes(dest, block, upto, chunk);\n        blockIndex++;\n        block = blocks.get(blockIndex);\n        upto = 0;\n        len -= chunk;\n        dest += chunk;\n      }\n    }\n    */\n\n    int end = src + len;\n\n    int blockIndex = end >> blockBits;\n    int downTo = end & blockMask;\n    if (downTo == 0) {\n      blockIndex--;\n      downTo = blockSize;\n    }\n    byte[] block = blocks.get(blockIndex);\n\n    while (len > 0) {\n      //System.out.println(\"  cycle downTo=\" + downTo);\n      if (len <= downTo) {\n        //System.out.println(\"    finish\");\n        writeBytes(dest, block, downTo-len, len);\n        break;\n      } else {\n        //System.out.println(\"    partial\");\n        len -= downTo;\n        writeBytes(dest + len, block, 0, downTo);\n        blockIndex--;\n        block = blocks.get(blockIndex);\n        downTo = blockSize;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/BytesStore#copyBytes(long,long,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Absolute copy bytes self to self, without changing the\n   *  position. Note: this cannot \"grow\" the bytes, so must\n   *  only call it on already written parts. */\n  public void copyBytes(long src, long dest, int len) {\n    //System.out.println(\"BS.copyBytes src=\" + src + \" dest=\" + dest + \" len=\" + len);\n    assert src < dest;\n\n    // Note: weird: must go \"backwards\" because copyBytes\n    // calls us with overlapping src/dest.  If we\n    // go forwards then we overwrite bytes before we can\n    // copy them:\n\n    /*\n    int blockIndex = src >> blockBits;\n    int upto = src & blockMask;\n    byte[] block = blocks.get(blockIndex);\n    while (len > 0) {\n      int chunk = blockSize - upto;\n      System.out.println(\"  cycle: chunk=\" + chunk + \" len=\" + len);\n      if (len <= chunk) {\n        writeBytes(dest, block, upto, len);\n        break;\n      } else {\n        writeBytes(dest, block, upto, chunk);\n        blockIndex++;\n        block = blocks.get(blockIndex);\n        upto = 0;\n        len -= chunk;\n        dest += chunk;\n      }\n    }\n    */\n\n    long end = src + len;\n\n    int blockIndex = (int) (end >> blockBits);\n    int downTo = (int) (end & blockMask);\n    if (downTo == 0) {\n      blockIndex--;\n      downTo = blockSize;\n    }\n    byte[] block = blocks.get(blockIndex);\n\n    while (len > 0) {\n      //System.out.println(\"  cycle downTo=\" + downTo);\n      if (len <= downTo) {\n        //System.out.println(\"    finish\");\n        writeBytes(dest, block, downTo-len, len);\n        break;\n      } else {\n        //System.out.println(\"    partial\");\n        len -= downTo;\n        writeBytes(dest + len, block, 0, downTo);\n        blockIndex--;\n        block = blocks.get(blockIndex);\n        downTo = blockSize;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"]},"commit2Childs":{"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","8917bfede3b4ca30f4305c1e391e9218959cd723"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}