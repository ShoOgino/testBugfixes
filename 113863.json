{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter.FlushControl#waitUpdate(int,int,boolean).mjava","commits":[{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.FlushControl#waitUpdate(int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"    public synchronized boolean waitUpdate(int docInc, int delInc, boolean skipWait) {\n      while(flushPending) {\n        try {\n          wait();\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      }\n\n      // skipWait is only used when a thread is BOTH adding\n      // a doc and buffering a del term, and, the adding of\n      // the doc already triggered a flush\n      if (skipWait) {\n        docCount += docInc;\n        delCount += delInc;\n        return false;\n      }\n\n      final int maxBufferedDocs = config.getMaxBufferedDocs();\n      if (maxBufferedDocs != IndexWriterConfig.DISABLE_AUTO_FLUSH &&\n          (docCount+docInc) >= maxBufferedDocs) {\n        return setFlushPending(\"maxBufferedDocs\", true);\n      }\n      docCount += docInc;\n\n      final int maxBufferedDeleteTerms = config.getMaxBufferedDeleteTerms();\n      if (maxBufferedDeleteTerms != IndexWriterConfig.DISABLE_AUTO_FLUSH &&\n          (delCount+delInc) >= maxBufferedDeleteTerms) {\n        flushDeletes = true;\n        return setFlushPending(\"maxBufferedDeleteTerms\", true);\n      }\n      delCount += delInc;\n\n      return flushByRAMUsage(\"add delete/doc\");\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.FlushControl#waitUpdate(int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"    public synchronized boolean waitUpdate(int docInc, int delInc, boolean skipWait) {\n      while(flushPending) {\n        try {\n          wait();\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      }\n\n      // skipWait is only used when a thread is BOTH adding\n      // a doc and buffering a del term, and, the adding of\n      // the doc already triggered a flush\n      if (skipWait) {\n        docCount += docInc;\n        delCount += delInc;\n        return false;\n      }\n\n      final int maxBufferedDocs = config.getMaxBufferedDocs();\n      if (maxBufferedDocs != IndexWriterConfig.DISABLE_AUTO_FLUSH &&\n          (docCount+docInc) >= maxBufferedDocs) {\n        return setFlushPending(\"maxBufferedDocs\", true);\n      }\n      docCount += docInc;\n\n      final int maxBufferedDeleteTerms = config.getMaxBufferedDeleteTerms();\n      if (maxBufferedDeleteTerms != IndexWriterConfig.DISABLE_AUTO_FLUSH &&\n          (delCount+delInc) >= maxBufferedDeleteTerms) {\n        flushDeletes = true;\n        return setFlushPending(\"maxBufferedDeleteTerms\", true);\n      }\n      delCount += delInc;\n\n      return flushByRAMUsage(\"add delete/doc\");\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.FlushControl#waitUpdate(int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"    public synchronized boolean waitUpdate(int docInc, int delInc, boolean skipWait) {\n      while(flushPending) {\n        try {\n          wait();\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      }\n\n      // skipWait is only used when a thread is BOTH adding\n      // a doc and buffering a del term, and, the adding of\n      // the doc already triggered a flush\n      if (skipWait) {\n        docCount += docInc;\n        delCount += delInc;\n        return false;\n      }\n\n      final int maxBufferedDocs = config.getMaxBufferedDocs();\n      if (maxBufferedDocs != IndexWriterConfig.DISABLE_AUTO_FLUSH &&\n          (docCount+docInc) >= maxBufferedDocs) {\n        return setFlushPending(\"maxBufferedDocs\", true);\n      }\n      docCount += docInc;\n\n      final int maxBufferedDeleteTerms = config.getMaxBufferedDeleteTerms();\n      if (maxBufferedDeleteTerms != IndexWriterConfig.DISABLE_AUTO_FLUSH &&\n          (delCount+delInc) >= maxBufferedDeleteTerms) {\n        flushDeletes = true;\n        return setFlushPending(\"maxBufferedDeleteTerms\", true);\n      }\n      delCount += delInc;\n\n      return flushByRAMUsage(\"add delete/doc\");\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2ed1b9b7b46829fe3199afe9a8bc203f201b175","date":1301491807,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.FlushControl#waitUpdate(int,int,boolean).mjava","sourceNew":null,"sourceOld":"    public synchronized boolean waitUpdate(int docInc, int delInc, boolean skipWait) {\n      while(flushPending) {\n        try {\n          wait();\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      }\n\n      // skipWait is only used when a thread is BOTH adding\n      // a doc and buffering a del term, and, the adding of\n      // the doc already triggered a flush\n      if (skipWait) {\n        docCount += docInc;\n        delCount += delInc;\n        return false;\n      }\n\n      final int maxBufferedDocs = config.getMaxBufferedDocs();\n      if (maxBufferedDocs != IndexWriterConfig.DISABLE_AUTO_FLUSH &&\n          (docCount+docInc) >= maxBufferedDocs) {\n        return setFlushPending(\"maxBufferedDocs\", true);\n      }\n      docCount += docInc;\n\n      final int maxBufferedDeleteTerms = config.getMaxBufferedDeleteTerms();\n      if (maxBufferedDeleteTerms != IndexWriterConfig.DISABLE_AUTO_FLUSH &&\n          (delCount+delInc) >= maxBufferedDeleteTerms) {\n        flushDeletes = true;\n        return setFlushPending(\"maxBufferedDeleteTerms\", true);\n      }\n      delCount += delInc;\n\n      return flushByRAMUsage(\"add delete/doc\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.FlushControl#waitUpdate(int,int,boolean).mjava","sourceNew":null,"sourceOld":"    public synchronized boolean waitUpdate(int docInc, int delInc, boolean skipWait) {\n      while(flushPending) {\n        try {\n          wait();\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      }\n\n      // skipWait is only used when a thread is BOTH adding\n      // a doc and buffering a del term, and, the adding of\n      // the doc already triggered a flush\n      if (skipWait) {\n        docCount += docInc;\n        delCount += delInc;\n        return false;\n      }\n\n      final int maxBufferedDocs = config.getMaxBufferedDocs();\n      if (maxBufferedDocs != IndexWriterConfig.DISABLE_AUTO_FLUSH &&\n          (docCount+docInc) >= maxBufferedDocs) {\n        return setFlushPending(\"maxBufferedDocs\", true);\n      }\n      docCount += docInc;\n\n      final int maxBufferedDeleteTerms = config.getMaxBufferedDeleteTerms();\n      if (maxBufferedDeleteTerms != IndexWriterConfig.DISABLE_AUTO_FLUSH &&\n          (delCount+delInc) >= maxBufferedDeleteTerms) {\n        flushDeletes = true;\n        return setFlushPending(\"maxBufferedDeleteTerms\", true);\n      }\n      delCount += delInc;\n\n      return flushByRAMUsage(\"add delete/doc\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.FlushControl#waitUpdate(int,int,boolean).mjava","sourceNew":null,"sourceOld":"    public synchronized boolean waitUpdate(int docInc, int delInc, boolean skipWait) {\n      while(flushPending) {\n        try {\n          wait();\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      }\n\n      // skipWait is only used when a thread is BOTH adding\n      // a doc and buffering a del term, and, the adding of\n      // the doc already triggered a flush\n      if (skipWait) {\n        docCount += docInc;\n        delCount += delInc;\n        return false;\n      }\n\n      final int maxBufferedDocs = config.getMaxBufferedDocs();\n      if (maxBufferedDocs != IndexWriterConfig.DISABLE_AUTO_FLUSH &&\n          (docCount+docInc) >= maxBufferedDocs) {\n        return setFlushPending(\"maxBufferedDocs\", true);\n      }\n      docCount += docInc;\n\n      final int maxBufferedDeleteTerms = config.getMaxBufferedDeleteTerms();\n      if (maxBufferedDeleteTerms != IndexWriterConfig.DISABLE_AUTO_FLUSH &&\n          (delCount+delInc) >= maxBufferedDeleteTerms) {\n        flushDeletes = true;\n        return setFlushPending(\"maxBufferedDeleteTerms\", true);\n      }\n      delCount += delInc;\n\n      return flushByRAMUsage(\"add delete/doc\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.FlushControl#waitUpdate(int,int,boolean).mjava","sourceNew":null,"sourceOld":"    public synchronized boolean waitUpdate(int docInc, int delInc, boolean skipWait) {\n      while(flushPending) {\n        try {\n          wait();\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      }\n\n      // skipWait is only used when a thread is BOTH adding\n      // a doc and buffering a del term, and, the adding of\n      // the doc already triggered a flush\n      if (skipWait) {\n        docCount += docInc;\n        delCount += delInc;\n        return false;\n      }\n\n      final int maxBufferedDocs = config.getMaxBufferedDocs();\n      if (maxBufferedDocs != IndexWriterConfig.DISABLE_AUTO_FLUSH &&\n          (docCount+docInc) >= maxBufferedDocs) {\n        return setFlushPending(\"maxBufferedDocs\", true);\n      }\n      docCount += docInc;\n\n      final int maxBufferedDeleteTerms = config.getMaxBufferedDeleteTerms();\n      if (maxBufferedDeleteTerms != IndexWriterConfig.DISABLE_AUTO_FLUSH &&\n          (delCount+delInc) >= maxBufferedDeleteTerms) {\n        flushDeletes = true;\n        return setFlushPending(\"maxBufferedDeleteTerms\", true);\n      }\n      delCount += delInc;\n\n      return flushByRAMUsage(\"add delete/doc\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"]},"commit2Childs":{"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["a3776dccca01c11e7046323cfad46a3b4a471233","b3e06be49006ecac364d39d12b9c9f74882f9b9f","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}