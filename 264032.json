{"path":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#isCurrent().mjava","commits":[{"id":"e7a005111928c661ab5d236ed6a3a079b438d2cf","date":1205411670,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#isCurrent().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * An InstantiatedIndexReader is always current!\n   *\n   * Check whether this IndexReader is still using the\n   * current (i.e., most recently committed) version of the\n   * index.  If a writer has committed any changes to the\n   * index since this reader was opened, this will return\n   * <code>false</code>, in which case you must open a new\n   * IndexReader in order to see the changes.  See the\n   * description of the <a href=\"IndexWriter.html#autoCommit\"><code>autoCommit</code></a>\n   * flag which controls when the {@link IndexWriter}\n   * actually commits changes to the index.\n   *\n   * @return always true\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  public boolean isCurrent() throws IOException {\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["317c809622a7a74e9257dd0eaf0b7c4dd7399bc7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"317c809622a7a74e9257dd0eaf0b7c4dd7399bc7","date":1214673815,"type":3,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#isCurrent().mjava","pathOld":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#isCurrent().mjava","sourceNew":"  /**\n   * An InstantiatedIndexReader is always current!\n   * \n   * Check whether this IndexReader is still using the current (i.e., most\n   * recently committed) version of the index. If a writer has committed any\n   * changes to the index since this reader was opened, this will return\n   * <code>false</code>, in which case you must open a new IndexReader in\n   * order to see the changes. See the description of the <a\n   * href=\"IndexWriter.html#autoCommit\"><code>autoCommit</code></a> flag\n   * which controls when the {@link IndexWriter} actually commits changes to the\n   * index.\n   * \n   * @return always true\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  public boolean isCurrent() throws IOException {\n    return true;\n  }\n\n","sourceOld":"  /**\n   * An InstantiatedIndexReader is always current!\n   *\n   * Check whether this IndexReader is still using the\n   * current (i.e., most recently committed) version of the\n   * index.  If a writer has committed any changes to the\n   * index since this reader was opened, this will return\n   * <code>false</code>, in which case you must open a new\n   * IndexReader in order to see the changes.  See the\n   * description of the <a href=\"IndexWriter.html#autoCommit\"><code>autoCommit</code></a>\n   * flag which controls when the {@link IndexWriter}\n   * actually commits changes to the index.\n   *\n   * @return always true\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  public boolean isCurrent() throws IOException {\n    return true;\n  }\n\n","bugFix":["e7a005111928c661ab5d236ed6a3a079b438d2cf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#isCurrent().mjava","pathOld":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#isCurrent().mjava","sourceNew":"  /**\n   * An InstantiatedIndexReader is always current!\n   * \n   * Check whether this IndexReader is still using the current (i.e., most\n   * recently committed) version of the index. If a writer has committed any\n   * changes to the index since this reader was opened, this will return\n   * <code>false</code>, in which case you must open a new IndexReader in\n   * order to see the changes. See the description of the <a\n   * href=\"IndexWriter.html#autoCommit\"><code>autoCommit</code></a> flag\n   * which controls when the {@link IndexWriter} actually commits changes to the\n   * index.\n   * \n   * @return always true\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  @Override\n  public boolean isCurrent() throws IOException {\n    return true;\n  }\n\n","sourceOld":"  /**\n   * An InstantiatedIndexReader is always current!\n   * \n   * Check whether this IndexReader is still using the current (i.e., most\n   * recently committed) version of the index. If a writer has committed any\n   * changes to the index since this reader was opened, this will return\n   * <code>false</code>, in which case you must open a new IndexReader in\n   * order to see the changes. See the description of the <a\n   * href=\"IndexWriter.html#autoCommit\"><code>autoCommit</code></a> flag\n   * which controls when the {@link IndexWriter} actually commits changes to the\n   * index.\n   * \n   * @return always true\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  public boolean isCurrent() throws IOException {\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#isCurrent().mjava","pathOld":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#isCurrent().mjava","sourceNew":"  /**\n   * An InstantiatedIndexReader is always current!\n   * \n   * Check whether this IndexReader is still using the current (i.e., most\n   * recently committed) version of the index. If a writer has committed any\n   * changes to the index since this reader was opened, this will return\n   * <code>false</code>, in which case you must open a new IndexReader in\n   * order to see the changes. See the description of the <a\n   * href=\"IndexWriter.html#autoCommit\"><code>autoCommit</code></a> flag\n   * which controls when the {@link IndexWriter} actually commits changes to the\n   * index.\n   * \n   * @return always true\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  @Override\n  public boolean isCurrent() throws IOException {\n    return true;\n  }\n\n","sourceOld":"  /**\n   * An InstantiatedIndexReader is always current!\n   * \n   * Check whether this IndexReader is still using the current (i.e., most\n   * recently committed) version of the index. If a writer has committed any\n   * changes to the index since this reader was opened, this will return\n   * <code>false</code>, in which case you must open a new IndexReader in\n   * order to see the changes. See the description of the <a\n   * href=\"IndexWriter.html#autoCommit\"><code>autoCommit</code></a> flag\n   * which controls when the {@link IndexWriter} actually commits changes to the\n   * index.\n   * \n   * @return always true\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  @Override\n  public boolean isCurrent() throws IOException {\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"317c809622a7a74e9257dd0eaf0b7c4dd7399bc7":["e7a005111928c661ab5d236ed6a3a079b438d2cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e7a005111928c661ab5d236ed6a3a079b438d2cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["317c809622a7a74e9257dd0eaf0b7c4dd7399bc7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"317c809622a7a74e9257dd0eaf0b7c4dd7399bc7":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7a005111928c661ab5d236ed6a3a079b438d2cf"],"e7a005111928c661ab5d236ed6a3a079b438d2cf":["317c809622a7a74e9257dd0eaf0b7c4dd7399bc7"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}