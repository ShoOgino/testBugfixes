{"path":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#updateGlobalMinCompetitiveScore(Scorable).mjava","commits":[{"id":"807314aa41c10866aec273a0e54fd0d24d8971de","date":1570435832,"type":0,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#updateGlobalMinCompetitiveScore(Scorable).mjava","pathOld":"/dev/null","sourceNew":"  protected void updateGlobalMinCompetitiveScore(Scorable scorer) throws IOException {\n    assert minScoreAcc != null;\n    MaxScoreAccumulator.Result maxMinScore = minScoreAcc.get();\n    if (maxMinScore != null) {\n      // since we tie-break on doc id and collect in doc id order we can require\n      // the next float if the global minimum score is set on a document that is\n      // greater than the ids in the current leaf\n      float score = maxMinScore.docID > docBase ? Math.nextUp(maxMinScore.score) : maxMinScore.score;\n      if (score > minCompetitiveScore) {\n        assert hitsThresholdChecker.isThresholdReached();\n        scorer.setMinCompetitiveScore(score);\n        minCompetitiveScore = score;\n        totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e0066943a75c6f4af395bcd7728a812943cbb63","date":1570723011,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#updateGlobalMinCompetitiveScore(Scorable).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#updateGlobalMinCompetitiveScore(Scorable).mjava","sourceNew":"  protected void updateGlobalMinCompetitiveScore(Scorable scorer) throws IOException {\n    assert minScoreAcc != null;\n    DocAndScore maxMinScore = minScoreAcc.get();\n    if (maxMinScore != null) {\n      // since we tie-break on doc id and collect in doc id order we can require\n      // the next float if the global minimum score is set on a document that is\n      // greater than the ids in the current leaf\n      float score = maxMinScore.docID > docBase ? Math.nextUp(maxMinScore.score) : maxMinScore.score;\n      if (score > minCompetitiveScore) {\n        assert hitsThresholdChecker.isThresholdReached();\n        scorer.setMinCompetitiveScore(score);\n        minCompetitiveScore = score;\n        totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n      }\n    }\n  }\n\n","sourceOld":"  protected void updateGlobalMinCompetitiveScore(Scorable scorer) throws IOException {\n    assert minScoreAcc != null;\n    MaxScoreAccumulator.Result maxMinScore = minScoreAcc.get();\n    if (maxMinScore != null) {\n      // since we tie-break on doc id and collect in doc id order we can require\n      // the next float if the global minimum score is set on a document that is\n      // greater than the ids in the current leaf\n      float score = maxMinScore.docID > docBase ? Math.nextUp(maxMinScore.score) : maxMinScore.score;\n      if (score > minCompetitiveScore) {\n        assert hitsThresholdChecker.isThresholdReached();\n        scorer.setMinCompetitiveScore(score);\n        minCompetitiveScore = score;\n        totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd320327ef03681a94238b48abfe570f0fdd7387","date":1571660290,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#updateGlobalMinCompetitiveScore(Scorable).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#updateGlobalMinCompetitiveScore(Scorable).mjava","sourceNew":"  protected void updateGlobalMinCompetitiveScore(Scorable scorer) throws IOException {\n    assert minScoreAcc != null;\n    DocAndScore maxMinScore = minScoreAcc.get();\n    if (maxMinScore != null) {\n      // since we tie-break on doc id and collect in doc id order we can require\n      // the next float if the global minimum score is set on a document id that is\n      // smaller than the ids in the current leaf\n      float score = docBase > maxMinScore.docID ? Math.nextUp(maxMinScore.score) : maxMinScore.score;\n      if (score > minCompetitiveScore) {\n        assert hitsThresholdChecker.isThresholdReached();\n        scorer.setMinCompetitiveScore(score);\n        minCompetitiveScore = score;\n        totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n      }\n    }\n  }\n\n","sourceOld":"  protected void updateGlobalMinCompetitiveScore(Scorable scorer) throws IOException {\n    assert minScoreAcc != null;\n    DocAndScore maxMinScore = minScoreAcc.get();\n    if (maxMinScore != null) {\n      // since we tie-break on doc id and collect in doc id order we can require\n      // the next float if the global minimum score is set on a document that is\n      // greater than the ids in the current leaf\n      float score = maxMinScore.docID > docBase ? Math.nextUp(maxMinScore.score) : maxMinScore.score;\n      if (score > minCompetitiveScore) {\n        assert hitsThresholdChecker.isThresholdReached();\n        scorer.setMinCompetitiveScore(score);\n        minCompetitiveScore = score;\n        totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f","date":1571662992,"type":0,"author":"Jim Ferenczi","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#updateGlobalMinCompetitiveScore(Scorable).mjava","pathOld":"/dev/null","sourceNew":"  protected void updateGlobalMinCompetitiveScore(Scorable scorer) throws IOException {\n    assert minScoreAcc != null;\n    DocAndScore maxMinScore = minScoreAcc.get();\n    if (maxMinScore != null) {\n      // since we tie-break on doc id and collect in doc id order we can require\n      // the next float if the global minimum score is set on a document id that is\n      // smaller than the ids in the current leaf\n      float score = docBase > maxMinScore.docID ? Math.nextUp(maxMinScore.score) : maxMinScore.score;\n      if (score > minCompetitiveScore) {\n        assert hitsThresholdChecker.isThresholdReached();\n        scorer.setMinCompetitiveScore(score);\n        minCompetitiveScore = score;\n        totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"807314aa41c10866aec273a0e54fd0d24d8971de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cd320327ef03681a94238b48abfe570f0fdd7387"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd320327ef03681a94238b48abfe570f0fdd7387":["6e0066943a75c6f4af395bcd7728a812943cbb63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f"],"6e0066943a75c6f4af395bcd7728a812943cbb63":["807314aa41c10866aec273a0e54fd0d24d8971de"]},"commit2Childs":{"807314aa41c10866aec273a0e54fd0d24d8971de":["6e0066943a75c6f4af395bcd7728a812943cbb63"],"3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["807314aa41c10866aec273a0e54fd0d24d8971de","3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f"],"cd320327ef03681a94238b48abfe570f0fdd7387":["3fc6bc0fbd97ca2f45fd376fa8e733728e665c4f"],"6e0066943a75c6f4af395bcd7728a812943cbb63":["cd320327ef03681a94238b48abfe570f0fdd7387"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}