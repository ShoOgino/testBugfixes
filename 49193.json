{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#init(IndexInput).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#init(IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#init(IndexInput).mjava","sourceNew":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n\n    // Make sure we are talking to the matching past writer\n    CodecUtil.checkHeader(termsIn, Lucene40PostingsWriter.CODEC,\n      Lucene40PostingsWriter.VERSION_START, Lucene40PostingsWriter.VERSION_START);\n\n    skipInterval = termsIn.readInt();\n    maxSkipLevels = termsIn.readInt();\n    skipMinimum = termsIn.readInt();\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n\n    // Make sure we are talking to the matching past writer\n    CodecUtil.checkHeader(termsIn, Lucene40PostingsWriter.CODEC,\n      Lucene40PostingsWriter.VERSION_START, Lucene40PostingsWriter.VERSION_START);\n\n    skipInterval = termsIn.readInt();\n    maxSkipLevels = termsIn.readInt();\n    skipMinimum = termsIn.readInt();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd5dd283c3d9f22e186699bf823c9d1e67f49152","date":1339431132,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#init(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#init(IndexInput).mjava","sourceNew":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n\n    // Make sure we are talking to the matching past writer\n    CodecUtil.checkHeader(termsIn, Lucene40PostingsWriter.TERMS_CODEC,\n      Lucene40PostingsWriter.VERSION_START, Lucene40PostingsWriter.VERSION_START);\n\n    skipInterval = termsIn.readInt();\n    maxSkipLevels = termsIn.readInt();\n    skipMinimum = termsIn.readInt();\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n\n    // Make sure we are talking to the matching past writer\n    CodecUtil.checkHeader(termsIn, Lucene40PostingsWriter.CODEC,\n      Lucene40PostingsWriter.VERSION_START, Lucene40PostingsWriter.VERSION_START);\n\n    skipInterval = termsIn.readInt();\n    maxSkipLevels = termsIn.readInt();\n    skipMinimum = termsIn.readInt();\n  }\n\n","bugFix":["7b91922b55d15444d554721b352861d028eb8278"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5e3ea6d5c2b839bafea03558af4d9e641ec73cc","date":1349823963,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#init(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#init(IndexInput).mjava","sourceNew":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n\n    // Make sure we are talking to the matching past writer\n    CodecUtil.checkHeader(termsIn, Lucene40PostingsWriter.TERMS_CODEC,\n      Lucene40PostingsWriter.VERSION_START, Lucene40PostingsWriter.VERSION_CURRENT);\n\n    skipInterval = termsIn.readInt();\n    maxSkipLevels = termsIn.readInt();\n    skipMinimum = termsIn.readInt();\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n\n    // Make sure we are talking to the matching past writer\n    CodecUtil.checkHeader(termsIn, Lucene40PostingsWriter.TERMS_CODEC,\n      Lucene40PostingsWriter.VERSION_START, Lucene40PostingsWriter.VERSION_START);\n\n    skipInterval = termsIn.readInt();\n    maxSkipLevels = termsIn.readInt();\n    skipMinimum = termsIn.readInt();\n  }\n\n","bugFix":["7b91922b55d15444d554721b352861d028eb8278"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6616b1fd222bb5a60f7f7856ace312252bc97890","date":1350142044,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#init(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#init(IndexInput).mjava","sourceNew":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n\n    // Make sure we are talking to the matching past writer\n    CodecUtil.checkHeader(termsIn, TERMS_CODEC, VERSION_START, VERSION_CURRENT);\n\n    skipInterval = termsIn.readInt();\n    maxSkipLevels = termsIn.readInt();\n    skipMinimum = termsIn.readInt();\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n\n    // Make sure we are talking to the matching past writer\n    CodecUtil.checkHeader(termsIn, Lucene40PostingsWriter.TERMS_CODEC,\n      Lucene40PostingsWriter.VERSION_START, Lucene40PostingsWriter.VERSION_CURRENT);\n\n    skipInterval = termsIn.readInt();\n    maxSkipLevels = termsIn.readInt();\n    skipMinimum = termsIn.readInt();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#init(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#init(IndexInput).mjava","sourceNew":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n\n    // Make sure we are talking to the matching past writer\n    CodecUtil.checkHeader(termsIn, TERMS_CODEC, VERSION_START, VERSION_CURRENT);\n\n    skipInterval = termsIn.readInt();\n    maxSkipLevels = termsIn.readInt();\n    skipMinimum = termsIn.readInt();\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n\n    // Make sure we are talking to the matching past writer\n    CodecUtil.checkHeader(termsIn, Lucene40PostingsWriter.TERMS_CODEC,\n      Lucene40PostingsWriter.VERSION_START, Lucene40PostingsWriter.VERSION_CURRENT);\n\n    skipInterval = termsIn.readInt();\n    maxSkipLevels = termsIn.readInt();\n    skipMinimum = termsIn.readInt();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#init(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#init(IndexInput).mjava","sourceNew":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n\n    // Make sure we are talking to the matching past writer\n    CodecUtil.checkHeader(termsIn, TERMS_CODEC, VERSION_START, VERSION_CURRENT);\n\n    skipInterval = termsIn.readInt();\n    maxSkipLevels = termsIn.readInt();\n    skipMinimum = termsIn.readInt();\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n\n    // Make sure we are talking to the matching past writer\n    CodecUtil.checkHeader(termsIn, Lucene40PostingsWriter.TERMS_CODEC,\n      Lucene40PostingsWriter.VERSION_START, Lucene40PostingsWriter.VERSION_CURRENT);\n\n    skipInterval = termsIn.readInt();\n    maxSkipLevels = termsIn.readInt();\n    skipMinimum = termsIn.readInt();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#init(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#init(IndexInput).mjava","sourceNew":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n\n    // Make sure we are talking to the matching past writer\n    CodecUtil.checkHeader(termsIn, TERMS_CODEC, VERSION_START, VERSION_CURRENT);\n\n    skipInterval = termsIn.readInt();\n    maxSkipLevels = termsIn.readInt();\n    skipMinimum = termsIn.readInt();\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n\n    // Make sure we are talking to the matching past writer\n    CodecUtil.checkHeader(termsIn, TERMS_CODEC, VERSION_START, VERSION_CURRENT);\n\n    skipInterval = termsIn.readInt();\n    maxSkipLevels = termsIn.readInt();\n    skipMinimum = termsIn.readInt();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#init(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#init(IndexInput).mjava","sourceNew":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n\n    // Make sure we are talking to the matching past writer\n    CodecUtil.checkHeader(termsIn, TERMS_CODEC, VERSION_START, VERSION_CURRENT);\n\n    skipInterval = termsIn.readInt();\n    maxSkipLevels = termsIn.readInt();\n    skipMinimum = termsIn.readInt();\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n\n    // Make sure we are talking to the matching past writer\n    CodecUtil.checkHeader(termsIn, TERMS_CODEC, VERSION_START, VERSION_CURRENT);\n\n    skipInterval = termsIn.readInt();\n    maxSkipLevels = termsIn.readInt();\n    skipMinimum = termsIn.readInt();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6616b1fd222bb5a60f7f7856ace312252bc97890":["a5e3ea6d5c2b839bafea03558af4d9e641ec73cc"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a5e3ea6d5c2b839bafea03558af4d9e641ec73cc","6616b1fd222bb5a60f7f7856ace312252bc97890"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a5e3ea6d5c2b839bafea03558af4d9e641ec73cc","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a5e3ea6d5c2b839bafea03558af4d9e641ec73cc":["dd5dd283c3d9f22e186699bf823c9d1e67f49152"],"dd5dd283c3d9f22e186699bf823c9d1e67f49152":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"6616b1fd222bb5a60f7f7856ace312252bc97890":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["4cc45c615dbb82bf79d5f9550286098367874fbf","db4fdbf3d262768eabc027cd8321edca0cd11fa8","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["dd5dd283c3d9f22e186699bf823c9d1e67f49152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"a5e3ea6d5c2b839bafea03558af4d9e641ec73cc":["6616b1fd222bb5a60f7f7856ace312252bc97890","c7492bcb52be51e55d596134b95b2e53cc4ffb91","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"dd5dd283c3d9f22e186699bf823c9d1e67f49152":["a5e3ea6d5c2b839bafea03558af4d9e641ec73cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}