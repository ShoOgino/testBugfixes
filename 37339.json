{"path":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext#waitForReplicasToComeUp(int).mjava","commits":[{"id":"ba33781da68babcaa5828121b443d3eb5c9d8480","date":1590595589,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext#waitForReplicasToComeUp(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#waitForReplicasToComeUp(int).mjava","sourceNew":"  // returns true if all replicas are found to be up, false if not\n  private boolean waitForReplicasToComeUp(int timeoutms) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n\n    DocCollection docCollection = zkController.getClusterState().getCollectionOrNull(collection);\n    Slice slices = (docCollection == null) ? null : docCollection.getSlice(shardId);\n    int cnt = 0;\n    while (!isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          if (e instanceof KeeperException.SessionExpiredException) {\n            // if the session has expired, then another election will be launched, so\n            // quit here\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n          }\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n\n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicas(EnumSet.of(Replica.Type.TLOG, Replica.Type.NRT)).size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return true;\n        } else {\n          if (cnt % 40 == 0) {\n            if (log.isInfoEnabled()) {\n              log.info(\"Waiting until we see more replicas up for shard {}: total={} found={} timeoute in={}ms\"\n                  , shardId, slices.getReplicas(EnumSet.of(Replica.Type.TLOG, Replica.Type.NRT)).size(), found,\n                  TimeUnit.MILLISECONDS.convert(timeoutAt - System.nanoTime(), TimeUnit.NANOSECONDS));\n            }\n          }\n        }\n\n        if (System.nanoTime() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return false;\n        }\n      } else {\n        log.warn(\"Shard not found: {} for collection {}\", shardId, collection);\n\n        return false;\n\n      }\n\n      Thread.sleep(500);\n      docCollection = zkController.getClusterState().getCollectionOrNull(collection);\n      slices = (docCollection == null) ? null : docCollection.getSlice(shardId);\n      cnt++;\n    }\n    return false;\n  }\n\n","sourceOld":"  // returns true if all replicas are found to be up, false if not\n  private boolean waitForReplicasToComeUp(int timeoutms) throws InterruptedException {\n    long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeoutms, TimeUnit.MILLISECONDS);\n    final String shardsElectZkPath = electionPath + LeaderElector.ELECTION_NODE;\n    \n    DocCollection docCollection = zkController.getClusterState().getCollectionOrNull(collection);\n    Slice slices = (docCollection == null) ? null : docCollection.getSlice(shardId);\n    int cnt = 0;\n    while (!isClosed && !cc.isShutDown()) {\n      // wait for everyone to be up\n      if (slices != null) {\n        int found = 0;\n        try {\n          found = zkClient.getChildren(shardsElectZkPath, null, true).size();\n        } catch (KeeperException e) {\n          if (e instanceof KeeperException.SessionExpiredException) {\n            // if the session has expired, then another election will be launched, so\n            // quit here\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                                    \"ZK session expired - cancelling election for \" + collection + \" \" + shardId);\n          }\n          SolrException.log(log,\n              \"Error checking for the number of election participants\", e);\n        }\n        \n        // on startup and after connection timeout, wait for all known shards\n        if (found >= slices.getReplicas(EnumSet.of(Replica.Type.TLOG, Replica.Type.NRT)).size()) {\n          log.info(\"Enough replicas found to continue.\");\n          return true;\n        } else {\n          if (cnt % 40 == 0) {\n            if (log.isInfoEnabled()) {\n              log.info(\"Waiting until we see more replicas up for shard {}: total={} found={} timeoute in={}ms\"\n                  , shardId, slices.getReplicas(EnumSet.of(Replica.Type.TLOG, Replica.Type.NRT)).size(), found,\n                  TimeUnit.MILLISECONDS.convert(timeoutAt - System.nanoTime(), TimeUnit.NANOSECONDS));\n            }\n          }\n        }\n        \n        if (System.nanoTime() > timeoutAt) {\n          log.info(\"Was waiting for replicas to come up, but they are taking too long - assuming they won't come back till later\");\n          return false;\n        }\n      } else {\n        log.warn(\"Shard not found: {} for collection {}\", shardId, collection);\n\n        return false;\n\n      }\n      \n      Thread.sleep(500);\n      docCollection = zkController.getClusterState().getCollectionOrNull(collection);\n      slices = (docCollection == null) ? null : docCollection.getSlice(shardId);\n      cnt++;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ba33781da68babcaa5828121b443d3eb5c9d8480":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba33781da68babcaa5828121b443d3eb5c9d8480"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba33781da68babcaa5828121b443d3eb5c9d8480"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}