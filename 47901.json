{"path":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","pathOld":"solr/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","sourceNew":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new ReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new ReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new ReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new ReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new ReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new ReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new ReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new ReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","pathOld":"solr/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","sourceNew":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new ReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new ReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new ReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new ReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new ReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new ReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new ReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new ReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","pathOld":"solr/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","sourceNew":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new ReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new ReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new ReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new ReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new ReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new ReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new ReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new ReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"528e99d64a1ce5cb29637aa0868fc44b86fded04","date":1326898557,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","sourceNew":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n    // test SOLR-2970 not returning non-stored fields by default\n    assertEquals(\"id,foo_b,foo_d,foo_s,foo_f,foo_i,foo_dt,foo_l,v_ss,v2_ss\\n\"\n        , h.query(req(\"q\",\"id:3\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*\", \"rows\",\"0\")));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n    d.addField(\"shouldbeunstored\",\"foo\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new ReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new ReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new ReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new ReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new ReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new ReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new ReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new ReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":["5cbbb1015f32d471df01c2ef24da010dbb8e43d0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cbbb1015f32d471df01c2ef24da010dbb8e43d0","date":1332885041,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","sourceNew":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n    // test SOLR-2970 not returning non-stored fields by default. Compare sorted list\n    assertEquals(sortHeader(\"v_ss,foo_b,v2_ss,foo_f,foo_i,foo_d,foo_s,foo_dt,id,foo_l\\n\")\n    , sortHeader(h.query(req(\"q\",\"id:3\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*\", \"rows\",\"0\"))));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n    d.addField(\"shouldbeunstored\",\"foo\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new ReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new ReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new ReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new ReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n    // test SOLR-2970 not returning non-stored fields by default\n    assertEquals(\"id,foo_b,foo_d,foo_s,foo_f,foo_i,foo_dt,foo_l,v_ss,v2_ss\\n\"\n        , h.query(req(\"q\",\"id:3\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*\", \"rows\",\"0\")));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n    d.addField(\"shouldbeunstored\",\"foo\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new ReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new ReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new ReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new ReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n\n    req.close();\n  }\n\n","bugFix":["528e99d64a1ce5cb29637aa0868fc44b86fded04"],"bugIntro":["a094c728ab58b12a130aaeed26d06f3c71aa8a61","ba8f9f8067c19ebc33a32bf20a73711e36f21695"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0be0ed0e14fd70ceae18ec6c13480478b8a768f9","date":1336109399,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","sourceNew":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n    // test SOLR-2970 not returning non-stored fields by default. Compare sorted list\n    assertEquals(sortHeader(\"v_ss,foo_b,v2_ss,foo_f,foo_i,foo_d,foo_s,foo_dt,id,foo_l\\n\")\n    , sortHeader(h.query(req(\"q\",\"id:3\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*\", \"rows\",\"0\"))));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n    d.addField(\"shouldbeunstored\",\"foo\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new ReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new ReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new ReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new ReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n    \n    // Test field globs\n    rsp.setReturnFields( new ReturnFields(\"id,foo*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,,,,,,\\n\",\n      buf.toString());\n\n    rsp.setReturnFields( new ReturnFields(\"id,*_d*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_d,foo_dt\\n\" +\n        \"1,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,\\n\",\n      buf.toString());\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n    // test SOLR-2970 not returning non-stored fields by default. Compare sorted list\n    assertEquals(sortHeader(\"v_ss,foo_b,v2_ss,foo_f,foo_i,foo_d,foo_s,foo_dt,id,foo_l\\n\")\n    , sortHeader(h.query(req(\"q\",\"id:3\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*\", \"rows\",\"0\"))));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n    d.addField(\"shouldbeunstored\",\"foo\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new ReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new ReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new ReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new ReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a094c728ab58b12a130aaeed26d06f3c71aa8a61","date":1353256142,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","sourceNew":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test csv field for polyfield (currency) SOLR-3959\n    assertEquals(\"4,\\\"1.50\\\\,EUR\\\"\\n\"\n    , h.query(req(\"q\",\"id:4\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,amount_c\")));\n \n    // test csv field for polyfield (latlon) SOLR-3959\n    assertEquals(\"5,\\\"12.434\\\\,-134.1\\\"\\n\"\n    , h.query(req(\"q\",\"id:5\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,store\")) );\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n    // test SOLR-2970 not returning non-stored fields by default. Compare sorted list\n    assertEquals(sortHeader(\"amount_c,store,v_ss,foo_b,v2_ss,foo_f,foo_i,foo_d,foo_s,foo_dt,id,foo_l\\n\")\n    , sortHeader(h.query(req(\"q\",\"id:3\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*\", \"rows\",\"0\"))));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n    d.addField(\"shouldbeunstored\",\"foo\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new ReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new ReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new ReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new ReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n    \n    // Test field globs\n    rsp.setReturnFields( new ReturnFields(\"id,foo*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,,,,,,\\n\",\n      buf.toString());\n\n    rsp.setReturnFields( new ReturnFields(\"id,*_d*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_d,foo_dt\\n\" +\n        \"1,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,\\n\",\n      buf.toString());\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n    // test SOLR-2970 not returning non-stored fields by default. Compare sorted list\n    assertEquals(sortHeader(\"v_ss,foo_b,v2_ss,foo_f,foo_i,foo_d,foo_s,foo_dt,id,foo_l\\n\")\n    , sortHeader(h.query(req(\"q\",\"id:3\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*\", \"rows\",\"0\"))));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n    d.addField(\"shouldbeunstored\",\"foo\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new ReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new ReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new ReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new ReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n    \n    // Test field globs\n    rsp.setReturnFields( new ReturnFields(\"id,foo*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,,,,,,\\n\",\n      buf.toString());\n\n    rsp.setReturnFields( new ReturnFields(\"id,*_d*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_d,foo_dt\\n\" +\n        \"1,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,\\n\",\n      buf.toString());\n\n    req.close();\n  }\n\n","bugFix":["5cbbb1015f32d471df01c2ef24da010dbb8e43d0"],"bugIntro":["ba8f9f8067c19ebc33a32bf20a73711e36f21695"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","sourceNew":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test csv field for polyfield (currency) SOLR-3959\n    assertEquals(\"4,\\\"1.50\\\\,EUR\\\"\\n\"\n    , h.query(req(\"q\",\"id:4\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,amount_c\")));\n \n    // test csv field for polyfield (latlon) SOLR-3959\n    assertEquals(\"5,\\\"12.434\\\\,-134.1\\\"\\n\"\n    , h.query(req(\"q\",\"id:5\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,store\")) );\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n    // test SOLR-2970 not returning non-stored fields by default. Compare sorted list\n    assertEquals(sortHeader(\"amount_c,store,v_ss,foo_b,v2_ss,foo_f,foo_i,foo_d,foo_s,foo_dt,id,foo_l\\n\")\n    , sortHeader(h.query(req(\"q\",\"id:3\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*\", \"rows\",\"0\"))));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n    d.addField(\"shouldbeunstored\",\"foo\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new ReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new ReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new ReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new ReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n    \n    // Test field globs\n    rsp.setReturnFields( new ReturnFields(\"id,foo*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,,,,,,\\n\",\n      buf.toString());\n\n    rsp.setReturnFields( new ReturnFields(\"id,*_d*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_d,foo_dt\\n\" +\n        \"1,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,\\n\",\n      buf.toString());\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n    // test SOLR-2970 not returning non-stored fields by default. Compare sorted list\n    assertEquals(sortHeader(\"v_ss,foo_b,v2_ss,foo_f,foo_i,foo_d,foo_s,foo_dt,id,foo_l\\n\")\n    , sortHeader(h.query(req(\"q\",\"id:3\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*\", \"rows\",\"0\"))));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n    d.addField(\"shouldbeunstored\",\"foo\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new ReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new ReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new ReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new ReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n    \n    // Test field globs\n    rsp.setReturnFields( new ReturnFields(\"id,foo*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,,,,,,\\n\",\n      buf.toString());\n\n    rsp.setReturnFields( new ReturnFields(\"id,*_d*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_d,foo_dt\\n\" +\n        \"1,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,\\n\",\n      buf.toString());\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d17ffdbce80d3dce181982a9cd16f4f90bc8619a","date":1357583592,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","sourceNew":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test csv field for polyfield (currency) SOLR-3959\n    assertEquals(\"4,\\\"1.50\\\\,EUR\\\"\\n\"\n    , h.query(req(\"q\",\"id:4\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,amount_c\")));\n \n    // test csv field for polyfield (latlon) SOLR-3959\n    assertEquals(\"5,\\\"12.434\\\\,-134.1\\\"\\n\"\n    , h.query(req(\"q\",\"id:5\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,store\")) );\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n    // test SOLR-2970 not returning non-stored fields by default. Compare sorted list\n    assertEquals(sortHeader(\"amount_c,store,v_ss,foo_b,v2_ss,foo_f,foo_i,foo_d,foo_s,foo_dt,id,foo_l\\n\")\n    , sortHeader(h.query(req(\"q\",\"id:3\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*\", \"rows\",\"0\"))));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n    d.addField(\"shouldbeunstored\",\"foo\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new SolrReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new SolrReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new SolrReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new SolrReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n    \n    // Test field globs\n    rsp.setReturnFields( new SolrReturnFields(\"id,foo*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,,,,,,\\n\",\n      buf.toString());\n\n    rsp.setReturnFields( new SolrReturnFields(\"id,*_d*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_d,foo_dt\\n\" +\n        \"1,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,\\n\",\n      buf.toString());\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test csv field for polyfield (currency) SOLR-3959\n    assertEquals(\"4,\\\"1.50\\\\,EUR\\\"\\n\"\n    , h.query(req(\"q\",\"id:4\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,amount_c\")));\n \n    // test csv field for polyfield (latlon) SOLR-3959\n    assertEquals(\"5,\\\"12.434\\\\,-134.1\\\"\\n\"\n    , h.query(req(\"q\",\"id:5\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,store\")) );\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n    // test SOLR-2970 not returning non-stored fields by default. Compare sorted list\n    assertEquals(sortHeader(\"amount_c,store,v_ss,foo_b,v2_ss,foo_f,foo_i,foo_d,foo_s,foo_dt,id,foo_l\\n\")\n    , sortHeader(h.query(req(\"q\",\"id:3\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*\", \"rows\",\"0\"))));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n    d.addField(\"shouldbeunstored\",\"foo\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new ReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new ReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new ReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new ReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n    \n    // Test field globs\n    rsp.setReturnFields( new ReturnFields(\"id,foo*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,,,,,,\\n\",\n      buf.toString());\n\n    rsp.setReturnFields( new ReturnFields(\"id,*_d*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_d,foo_dt\\n\" +\n        \"1,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,\\n\",\n      buf.toString());\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","sourceNew":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test csv field for polyfield (currency) SOLR-3959\n    assertEquals(\"4,\\\"1.50\\\\,EUR\\\"\\n\"\n    , h.query(req(\"q\",\"id:4\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,amount_c\")));\n \n    // test csv field for polyfield (latlon) SOLR-3959\n    assertEquals(\"5,\\\"12.434\\\\,-134.1\\\"\\n\"\n    , h.query(req(\"q\",\"id:5\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,store\")) );\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n    // test SOLR-2970 not returning non-stored fields by default. Compare sorted list\n    assertEquals(sortHeader(\"amount_c,store,v_ss,foo_b,v2_ss,foo_f,foo_i,foo_d,foo_s,foo_dt,id,foo_l\\n\")\n    , sortHeader(h.query(req(\"q\",\"id:3\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*\", \"rows\",\"0\"))));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n    d.addField(\"shouldbeunstored\",\"foo\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new SolrReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new SolrReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new SolrReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new SolrReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n    \n    // Test field globs\n    rsp.setReturnFields( new SolrReturnFields(\"id,foo*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,,,,,,\\n\",\n      buf.toString());\n\n    rsp.setReturnFields( new SolrReturnFields(\"id,*_d*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_d,foo_dt\\n\" +\n        \"1,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,\\n\",\n      buf.toString());\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test csv field for polyfield (currency) SOLR-3959\n    assertEquals(\"4,\\\"1.50\\\\,EUR\\\"\\n\"\n    , h.query(req(\"q\",\"id:4\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,amount_c\")));\n \n    // test csv field for polyfield (latlon) SOLR-3959\n    assertEquals(\"5,\\\"12.434\\\\,-134.1\\\"\\n\"\n    , h.query(req(\"q\",\"id:5\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,store\")) );\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n    // test SOLR-2970 not returning non-stored fields by default. Compare sorted list\n    assertEquals(sortHeader(\"amount_c,store,v_ss,foo_b,v2_ss,foo_f,foo_i,foo_d,foo_s,foo_dt,id,foo_l\\n\")\n    , sortHeader(h.query(req(\"q\",\"id:3\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*\", \"rows\",\"0\"))));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n    d.addField(\"shouldbeunstored\",\"foo\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new ReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new ReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new ReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new ReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n    \n    // Test field globs\n    rsp.setReturnFields( new ReturnFields(\"id,foo*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,,,,,,\\n\",\n      buf.toString());\n\n    rsp.setReturnFields( new ReturnFields(\"id,*_d*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_d,foo_dt\\n\" +\n        \"1,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,\\n\",\n      buf.toString());\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cc4a7e1c7c8349744a449a0def295f2fd99d6a4","date":1366137262,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","sourceNew":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n    \n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test csv field for polyfield (currency) SOLR-3959\n    assertEquals(\"4,\\\"1.50\\\\,EUR\\\"\\n\"\n    , h.query(req(\"q\",\"id:4\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,amount_c\")));\n \n    // test csv field for polyfield (latlon) SOLR-3959\n    assertEquals(\"5,\\\"12.434\\\\,-134.1\\\"\\n\"\n    , h.query(req(\"q\",\"id:5\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,store\")) );\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n    // test SOLR-2970 not returning non-stored fields by default. Compare sorted list\n    assertEquals(sortHeader(\"amount_c,store,v_ss,foo_b,v2_ss,foo_f,foo_i,foo_d,foo_s,foo_dt,id,foo_l\\n\")\n    , sortHeader(h.query(req(\"q\",\"id:3\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*\", \"rows\",\"0\"))));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n    d.addField(\"shouldbeunstored\",\"foo\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new SolrReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new SolrReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new SolrReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new SolrReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n    \n    // Test field globs\n    rsp.setReturnFields( new SolrReturnFields(\"id,foo*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,,,,,,\\n\",\n      buf.toString());\n\n    rsp.setReturnFields( new SolrReturnFields(\"id,*_d*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_d,foo_dt\\n\" +\n        \"1,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,\\n\",\n      buf.toString());\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test csv field for polyfield (currency) SOLR-3959\n    assertEquals(\"4,\\\"1.50\\\\,EUR\\\"\\n\"\n    , h.query(req(\"q\",\"id:4\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,amount_c\")));\n \n    // test csv field for polyfield (latlon) SOLR-3959\n    assertEquals(\"5,\\\"12.434\\\\,-134.1\\\"\\n\"\n    , h.query(req(\"q\",\"id:5\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,store\")) );\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n    // test SOLR-2970 not returning non-stored fields by default. Compare sorted list\n    assertEquals(sortHeader(\"amount_c,store,v_ss,foo_b,v2_ss,foo_f,foo_i,foo_d,foo_s,foo_dt,id,foo_l\\n\")\n    , sortHeader(h.query(req(\"q\",\"id:3\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*\", \"rows\",\"0\"))));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n    d.addField(\"shouldbeunstored\",\"foo\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new SolrReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new SolrReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new SolrReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new SolrReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n    \n    // Test field globs\n    rsp.setReturnFields( new SolrReturnFields(\"id,foo*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,,,,,,\\n\",\n      buf.toString());\n\n    rsp.setReturnFields( new SolrReturnFields(\"id,*_d*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_d,foo_dt\\n\" +\n        \"1,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,\\n\",\n      buf.toString());\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bbe4071a9e5fdbe880c93e2adac10a688e43f4ba","date":1393290187,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","sourceNew":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n    \n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test csv field for polyfield (currency) SOLR-3959\n    assertEquals(\"4,\\\"1.50\\\\,EUR\\\"\\n\"\n    , h.query(req(\"q\",\"id:4\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,amount_c\")));\n \n    // test csv field for polyfield (latlon) SOLR-3959\n    assertEquals(\"5,\\\"12.434\\\\,-134.1\\\"\\n\"\n    , h.query(req(\"q\",\"id:5\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,store\")) );\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n    // test SOLR-2970 not returning non-stored fields by default. Compare sorted list\n    assertEquals(sortHeader(\"amount_c,store,v_ss,foo_b,v2_ss,foo_f,foo_i,foo_d,foo_s,foo_dt,id,foo_l\\n\")\n    , sortHeader(h.query(req(\"q\",\"id:3\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*\", \"rows\",\"0\"))));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n    d.addField(\"shouldbeunstored\",\"foo\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new SolrReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new SolrReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new SolrReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new SolrReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n    \n    // Test field globs\n    rsp.setReturnFields( new SolrReturnFields(\"id,foo*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,,,,,,\\n\",\n      buf.toString());\n\n    rsp.setReturnFields( new SolrReturnFields(\"id,*_d*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_d,foo_dt\\n\" +\n        \"1,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,\\n\",\n      buf.toString());\n\n    // Test function queries\n    rsp.setReturnFields( new SolrReturnFields(\"sum(1,1),id,exists(foo_i),div(9,1),foo_f\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"\\\"sum(1,1)\\\",id,exists(foo_i),\\\"div(9,1)\\\",foo_f\\n\" +\n        \"\\\"\\\",1,,,1.414\\n\" +\n        \"\\\"\\\",2,,,\\n\",\n        buf.toString());\n\n    // Test transformers\n    rsp.setReturnFields( new SolrReturnFields(\"mydocid:[docid],[explain]\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"mydocid,[explain]\\n\" +\n        \"\\\"\\\",\\n\" +\n        \"\\\"\\\",\\n\",\n        buf.toString());\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n    \n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test csv field for polyfield (currency) SOLR-3959\n    assertEquals(\"4,\\\"1.50\\\\,EUR\\\"\\n\"\n    , h.query(req(\"q\",\"id:4\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,amount_c\")));\n \n    // test csv field for polyfield (latlon) SOLR-3959\n    assertEquals(\"5,\\\"12.434\\\\,-134.1\\\"\\n\"\n    , h.query(req(\"q\",\"id:5\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,store\")) );\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n    // test SOLR-2970 not returning non-stored fields by default. Compare sorted list\n    assertEquals(sortHeader(\"amount_c,store,v_ss,foo_b,v2_ss,foo_f,foo_i,foo_d,foo_s,foo_dt,id,foo_l\\n\")\n    , sortHeader(h.query(req(\"q\",\"id:3\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*\", \"rows\",\"0\"))));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n    d.addField(\"shouldbeunstored\",\"foo\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new SolrReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new SolrReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new SolrReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new SolrReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n    \n    // Test field globs\n    rsp.setReturnFields( new SolrReturnFields(\"id,foo*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,,,,,,\\n\",\n      buf.toString());\n\n    rsp.setReturnFields( new SolrReturnFields(\"id,*_d*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_d,foo_dt\\n\" +\n        \"1,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,\\n\",\n      buf.toString());\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","sourceNew":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n    \n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test csv field for polyfield (currency) SOLR-3959\n    assertEquals(\"4,\\\"1.50\\\\,EUR\\\"\\n\"\n    , h.query(req(\"q\",\"id:4\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,amount_c\")));\n \n    // test csv field for polyfield (latlon) SOLR-3959\n    assertEquals(\"5,\\\"12.434\\\\,-134.1\\\"\\n\"\n    , h.query(req(\"q\",\"id:5\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,store\")) );\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n    // test SOLR-2970 not returning non-stored fields by default. Compare sorted list\n    assertEquals(sortHeader(\"amount_c,store,v_ss,foo_b,v2_ss,foo_f,foo_i,foo_d,foo_s,foo_dt,id,foo_l\\n\")\n    , sortHeader(h.query(req(\"q\",\"id:3\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*\", \"rows\",\"0\"))));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n    d.addField(\"shouldbeunstored\",\"foo\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new SolrReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new SolrReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new SolrReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new SolrReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n    \n    // Test field globs\n    rsp.setReturnFields( new SolrReturnFields(\"id,foo*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,,,,,,\\n\",\n      buf.toString());\n\n    rsp.setReturnFields( new SolrReturnFields(\"id,*_d*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_d,foo_dt\\n\" +\n        \"1,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,\\n\",\n      buf.toString());\n\n    // Test function queries\n    rsp.setReturnFields( new SolrReturnFields(\"sum(1,1),id,exists(foo_i),div(9,1),foo_f\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"\\\"sum(1,1)\\\",id,exists(foo_i),\\\"div(9,1)\\\",foo_f\\n\" +\n        \"\\\"\\\",1,,,1.414\\n\" +\n        \"\\\"\\\",2,,,\\n\",\n        buf.toString());\n\n    // Test transformers\n    rsp.setReturnFields( new SolrReturnFields(\"mydocid:[docid],[explain]\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"mydocid,[explain]\\n\" +\n        \"\\\"\\\",\\n\" +\n        \"\\\"\\\",\\n\",\n        buf.toString());\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n    \n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test csv field for polyfield (currency) SOLR-3959\n    assertEquals(\"4,\\\"1.50\\\\,EUR\\\"\\n\"\n    , h.query(req(\"q\",\"id:4\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,amount_c\")));\n \n    // test csv field for polyfield (latlon) SOLR-3959\n    assertEquals(\"5,\\\"12.434\\\\,-134.1\\\"\\n\"\n    , h.query(req(\"q\",\"id:5\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,store\")) );\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n    // test SOLR-2970 not returning non-stored fields by default. Compare sorted list\n    assertEquals(sortHeader(\"amount_c,store,v_ss,foo_b,v2_ss,foo_f,foo_i,foo_d,foo_s,foo_dt,id,foo_l\\n\")\n    , sortHeader(h.query(req(\"q\",\"id:3\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*\", \"rows\",\"0\"))));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n    d.addField(\"shouldbeunstored\",\"foo\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new SolrReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new SolrReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new SolrReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new SolrReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n    \n    // Test field globs\n    rsp.setReturnFields( new SolrReturnFields(\"id,foo*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,,,,,,\\n\",\n      buf.toString());\n\n    rsp.setReturnFields( new SolrReturnFields(\"id,*_d*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_d,foo_dt\\n\" +\n        \"1,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,\\n\",\n      buf.toString());\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecd75942508378ccc92c3a26f71db6cba9f25784","date":1450708761,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","sourceNew":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n    \n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test csv field for polyfield (currency) SOLR-3959\n    assertEquals(\"4,\\\"1.50\\\\,EUR\\\"\\n\"\n    , h.query(req(\"q\",\"id:4\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,amount_c\")));\n \n    // test csv field for polyfield (latlon) SOLR-3959\n    assertEquals(\"5,\\\"12.434\\\\,-134.1\\\"\\n\"\n    , h.query(req(\"q\",\"id:5\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,store\")) );\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n    // test SOLR-2970 not returning non-stored fields by default. Compare sorted list\n    assertEquals(sortHeader(\"amount_c,store,v_ss,foo_b,v2_ss,foo_f,foo_i,foo_d,foo_s,foo_dt,id,foo_l\\n\")\n    , sortHeader(h.query(req(\"q\",\"id:3\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*\", \"rows\",\"0\"))));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n    d.addField(\"shouldbeunstored\",\"foo\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponse(sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new SolrReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new SolrReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new SolrReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new SolrReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n    \n    // Test field globs\n    rsp.setReturnFields( new SolrReturnFields(\"id,foo*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,,,,,,\\n\",\n      buf.toString());\n\n    rsp.setReturnFields( new SolrReturnFields(\"id,*_d*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_d,foo_dt\\n\" +\n        \"1,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,\\n\",\n      buf.toString());\n\n    // Test function queries\n    rsp.setReturnFields( new SolrReturnFields(\"sum(1,1),id,exists(foo_i),div(9,1),foo_f\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"\\\"sum(1,1)\\\",id,exists(foo_i),\\\"div(9,1)\\\",foo_f\\n\" +\n        \"\\\"\\\",1,,,1.414\\n\" +\n        \"\\\"\\\",2,,,\\n\",\n        buf.toString());\n\n    // Test transformers\n    rsp.setReturnFields( new SolrReturnFields(\"mydocid:[docid],[explain]\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"mydocid,[explain]\\n\" +\n        \"\\\"\\\",\\n\" +\n        \"\\\"\\\",\\n\",\n        buf.toString());\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n    \n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test csv field for polyfield (currency) SOLR-3959\n    assertEquals(\"4,\\\"1.50\\\\,EUR\\\"\\n\"\n    , h.query(req(\"q\",\"id:4\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,amount_c\")));\n \n    // test csv field for polyfield (latlon) SOLR-3959\n    assertEquals(\"5,\\\"12.434\\\\,-134.1\\\"\\n\"\n    , h.query(req(\"q\",\"id:5\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,store\")) );\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n    // test SOLR-2970 not returning non-stored fields by default. Compare sorted list\n    assertEquals(sortHeader(\"amount_c,store,v_ss,foo_b,v2_ss,foo_f,foo_i,foo_d,foo_s,foo_dt,id,foo_l\\n\")\n    , sortHeader(h.query(req(\"q\",\"id:3\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*\", \"rows\",\"0\"))));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n    d.addField(\"shouldbeunstored\",\"foo\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new SolrReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new SolrReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new SolrReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new SolrReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n    \n    // Test field globs\n    rsp.setReturnFields( new SolrReturnFields(\"id,foo*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,,,,,,\\n\",\n      buf.toString());\n\n    rsp.setReturnFields( new SolrReturnFields(\"id,*_d*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_d,foo_dt\\n\" +\n        \"1,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,\\n\",\n      buf.toString());\n\n    // Test function queries\n    rsp.setReturnFields( new SolrReturnFields(\"sum(1,1),id,exists(foo_i),div(9,1),foo_f\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"\\\"sum(1,1)\\\",id,exists(foo_i),\\\"div(9,1)\\\",foo_f\\n\" +\n        \"\\\"\\\",1,,,1.414\\n\" +\n        \"\\\"\\\",2,,,\\n\",\n        buf.toString());\n\n    // Test transformers\n    rsp.setReturnFields( new SolrReturnFields(\"mydocid:[docid],[explain]\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"mydocid,[explain]\\n\" +\n        \"\\\"\\\",\\n\" +\n        \"\\\"\\\",\\n\",\n        buf.toString());\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","sourceNew":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n    \n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test csv field for polyfield (currency) SOLR-3959\n    assertEquals(\"4,\\\"1.50\\\\,EUR\\\"\\n\"\n    , h.query(req(\"q\",\"id:4\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,amount_c\")));\n \n    // test csv field for polyfield (latlon) SOLR-3959\n    assertEquals(\"5,\\\"12.434\\\\,-134.1\\\"\\n\"\n    , h.query(req(\"q\",\"id:5\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,store\")) );\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n    // test SOLR-2970 not returning non-stored fields by default. Compare sorted list\n    assertEquals(sortHeader(\"amount_c,store,v_ss,foo_b,v2_ss,foo_f,foo_i,foo_d,foo_s,foo_dt,id,foo_l\\n\")\n    , sortHeader(h.query(req(\"q\",\"id:3\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*\", \"rows\",\"0\"))));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", new Date(Instant.parse(\"2000-01-02T03:04:05Z\").toEpochMilli()));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n    d.addField(\"shouldbeunstored\",\"foo\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponse(sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new SolrReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new SolrReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new SolrReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new SolrReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n    \n    // Test field globs\n    rsp.setReturnFields( new SolrReturnFields(\"id,foo*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,,,,,,\\n\",\n      buf.toString());\n\n    rsp.setReturnFields( new SolrReturnFields(\"id,*_d*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_d,foo_dt\\n\" +\n        \"1,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,\\n\",\n      buf.toString());\n\n    // Test function queries\n    rsp.setReturnFields( new SolrReturnFields(\"sum(1,1),id,exists(foo_i),div(9,1),foo_f\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"\\\"sum(1,1)\\\",id,exists(foo_i),\\\"div(9,1)\\\",foo_f\\n\" +\n        \"\\\"\\\",1,,,1.414\\n\" +\n        \"\\\"\\\",2,,,\\n\",\n        buf.toString());\n\n    // Test transformers\n    rsp.setReturnFields( new SolrReturnFields(\"mydocid:[docid],[explain]\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"mydocid,[explain]\\n\" +\n        \"\\\"\\\",\\n\" +\n        \"\\\"\\\",\\n\",\n        buf.toString());\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n    \n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test csv field for polyfield (currency) SOLR-3959\n    assertEquals(\"4,\\\"1.50\\\\,EUR\\\"\\n\"\n    , h.query(req(\"q\",\"id:4\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,amount_c\")));\n \n    // test csv field for polyfield (latlon) SOLR-3959\n    assertEquals(\"5,\\\"12.434\\\\,-134.1\\\"\\n\"\n    , h.query(req(\"q\",\"id:5\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,store\")) );\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n    // test SOLR-2970 not returning non-stored fields by default. Compare sorted list\n    assertEquals(sortHeader(\"amount_c,store,v_ss,foo_b,v2_ss,foo_f,foo_i,foo_d,foo_s,foo_dt,id,foo_l\\n\")\n    , sortHeader(h.query(req(\"q\",\"id:3\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*\", \"rows\",\"0\"))));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n    d.addField(\"shouldbeunstored\",\"foo\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponse(sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new SolrReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new SolrReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new SolrReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new SolrReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n    \n    // Test field globs\n    rsp.setReturnFields( new SolrReturnFields(\"id,foo*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,,,,,,\\n\",\n      buf.toString());\n\n    rsp.setReturnFields( new SolrReturnFields(\"id,*_d*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_d,foo_dt\\n\" +\n        \"1,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,\\n\",\n      buf.toString());\n\n    // Test function queries\n    rsp.setReturnFields( new SolrReturnFields(\"sum(1,1),id,exists(foo_i),div(9,1),foo_f\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"\\\"sum(1,1)\\\",id,exists(foo_i),\\\"div(9,1)\\\",foo_f\\n\" +\n        \"\\\"\\\",1,,,1.414\\n\" +\n        \"\\\"\\\",2,,,\\n\",\n        buf.toString());\n\n    // Test transformers\n    rsp.setReturnFields( new SolrReturnFields(\"mydocid:[docid],[explain]\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"mydocid,[explain]\\n\" +\n        \"\\\"\\\",\\n\" +\n        \"\\\"\\\",\\n\",\n        buf.toString());\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba8f9f8067c19ebc33a32bf20a73711e36f21695","date":1543134399,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","sourceNew":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n    \n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test csv field for polyfield (currency) SOLR-3959\n    assertEquals(\"4,\\\"1.50\\\\,EUR\\\"\\n\"\n    , h.query(req(\"q\",\"id:4\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,amount_c\")));\n \n    // test csv field for polyfield (latlon) SOLR-3959\n    assertEquals(\"5,\\\"12.434\\\\,-134.1\\\"\\n\"\n    , h.query(req(\"q\",\"id:5\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,store\")) );\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n    // test SOLR-2970 not returning non-stored fields by default. Compare sorted list\n    assertEquals(sortHeader(\"amount_c,store,v_ss,foo_b,v2_ss,foo_f,foo_i,foo_d,foo_s,foo_dt,id,foo_l,\" +\n            \"pubyear_ii,store_iis\\n\"),\n        sortHeader(h.query(req(\"q\",\"id:3\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*\", \"rows\",\"0\"))));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", new Date(Instant.parse(\"2000-01-02T03:04:05Z\").toEpochMilli()));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n    d.addField(\"shouldbeunstored\",\"foo\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponse(sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new SolrReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new SolrReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new SolrReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new SolrReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n    \n    // Test field globs\n    rsp.setReturnFields( new SolrReturnFields(\"id,foo*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,,,,,,\\n\",\n      buf.toString());\n\n    rsp.setReturnFields( new SolrReturnFields(\"id,*_d*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_d,foo_dt\\n\" +\n        \"1,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,\\n\",\n      buf.toString());\n\n    // Test function queries\n    rsp.setReturnFields( new SolrReturnFields(\"sum(1,1),id,exists(foo_i),div(9,1),foo_f\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"\\\"sum(1,1)\\\",id,exists(foo_i),\\\"div(9,1)\\\",foo_f\\n\" +\n        \"\\\"\\\",1,,,1.414\\n\" +\n        \"\\\"\\\",2,,,\\n\",\n        buf.toString());\n\n    // Test transformers\n    rsp.setReturnFields( new SolrReturnFields(\"mydocid:[docid],[explain]\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"mydocid,[explain]\\n\" +\n        \"\\\"\\\",\\n\" +\n        \"\\\"\\\",\\n\",\n        buf.toString());\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n    \n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test csv field for polyfield (currency) SOLR-3959\n    assertEquals(\"4,\\\"1.50\\\\,EUR\\\"\\n\"\n    , h.query(req(\"q\",\"id:4\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,amount_c\")));\n \n    // test csv field for polyfield (latlon) SOLR-3959\n    assertEquals(\"5,\\\"12.434\\\\,-134.1\\\"\\n\"\n    , h.query(req(\"q\",\"id:5\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,store\")) );\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n    // test SOLR-2970 not returning non-stored fields by default. Compare sorted list\n    assertEquals(sortHeader(\"amount_c,store,v_ss,foo_b,v2_ss,foo_f,foo_i,foo_d,foo_s,foo_dt,id,foo_l\\n\")\n    , sortHeader(h.query(req(\"q\",\"id:3\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*\", \"rows\",\"0\"))));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", new Date(Instant.parse(\"2000-01-02T03:04:05Z\").toEpochMilli()));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n    d.addField(\"shouldbeunstored\",\"foo\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponse(sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new SolrReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new SolrReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new SolrReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new SolrReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n    \n    // Test field globs\n    rsp.setReturnFields( new SolrReturnFields(\"id,foo*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,,,,,,\\n\",\n      buf.toString());\n\n    rsp.setReturnFields( new SolrReturnFields(\"id,*_d*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_d,foo_dt\\n\" +\n        \"1,-1.0E300,2000-01-02T03:04:05Z\\n\" +\n        \"2,,\\n\",\n      buf.toString());\n\n    // Test function queries\n    rsp.setReturnFields( new SolrReturnFields(\"sum(1,1),id,exists(foo_i),div(9,1),foo_f\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"\\\"sum(1,1)\\\",id,exists(foo_i),\\\"div(9,1)\\\",foo_f\\n\" +\n        \"\\\"\\\",1,,,1.414\\n\" +\n        \"\\\"\\\",2,,,\\n\",\n        buf.toString());\n\n    // Test transformers\n    rsp.setReturnFields( new SolrReturnFields(\"mydocid:[docid],[explain]\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"mydocid,[explain]\\n\" +\n        \"\\\"\\\",\\n\" +\n        \"\\\"\\\",\\n\",\n        buf.toString());\n\n    req.close();\n  }\n\n","bugFix":["a094c728ab58b12a130aaeed26d06f3c71aa8a61","5cbbb1015f32d471df01c2ef24da010dbb8e43d0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bbe4071a9e5fdbe880c93e2adac10a688e43f4ba":["7cc4a7e1c7c8349744a449a0def295f2fd99d6a4"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","d17ffdbce80d3dce181982a9cd16f4f90bc8619a"],"d3f6c7717a0f1decd1668144537943efcc70cd95":["ecd75942508378ccc92c3a26f71db6cba9f25784"],"d17ffdbce80d3dce181982a9cd16f4f90bc8619a":["a094c728ab58b12a130aaeed26d06f3c71aa8a61"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"407687e67faf6e1f02a211ca078d8e3eed631027":["0be0ed0e14fd70ceae18ec6c13480478b8a768f9","a094c728ab58b12a130aaeed26d06f3c71aa8a61"],"ba8f9f8067c19ebc33a32bf20a73711e36f21695":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"5cbbb1015f32d471df01c2ef24da010dbb8e43d0":["528e99d64a1ce5cb29637aa0868fc44b86fded04"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["7cc4a7e1c7c8349744a449a0def295f2fd99d6a4","bbe4071a9e5fdbe880c93e2adac10a688e43f4ba"],"528e99d64a1ce5cb29637aa0868fc44b86fded04":["c26f00b574427b55127e869b935845554afde1fa"],"7cc4a7e1c7c8349744a449a0def295f2fd99d6a4":["d17ffdbce80d3dce181982a9cd16f4f90bc8619a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a094c728ab58b12a130aaeed26d06f3c71aa8a61":["0be0ed0e14fd70ceae18ec6c13480478b8a768f9"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ecd75942508378ccc92c3a26f71db6cba9f25784":["bbe4071a9e5fdbe880c93e2adac10a688e43f4ba"],"0be0ed0e14fd70ceae18ec6c13480478b8a768f9":["5cbbb1015f32d471df01c2ef24da010dbb8e43d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba8f9f8067c19ebc33a32bf20a73711e36f21695"]},"commit2Childs":{"bbe4071a9e5fdbe880c93e2adac10a688e43f4ba":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","ecd75942508378ccc92c3a26f71db6cba9f25784"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d3f6c7717a0f1decd1668144537943efcc70cd95":["ba8f9f8067c19ebc33a32bf20a73711e36f21695"],"d17ffdbce80d3dce181982a9cd16f4f90bc8619a":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7cc4a7e1c7c8349744a449a0def295f2fd99d6a4"],"c26f00b574427b55127e869b935845554afde1fa":["528e99d64a1ce5cb29637aa0868fc44b86fded04"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"ba8f9f8067c19ebc33a32bf20a73711e36f21695":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cbbb1015f32d471df01c2ef24da010dbb8e43d0":["0be0ed0e14fd70ceae18ec6c13480478b8a768f9"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"528e99d64a1ce5cb29637aa0868fc44b86fded04":["5cbbb1015f32d471df01c2ef24da010dbb8e43d0"],"7cc4a7e1c7c8349744a449a0def295f2fd99d6a4":["bbe4071a9e5fdbe880c93e2adac10a688e43f4ba","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a094c728ab58b12a130aaeed26d06f3c71aa8a61":["d17ffdbce80d3dce181982a9cd16f4f90bc8619a","407687e67faf6e1f02a211ca078d8e3eed631027"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ecd75942508378ccc92c3a26f71db6cba9f25784":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"0be0ed0e14fd70ceae18ec6c13480478b8a768f9":["407687e67faf6e1f02a211ca078d8e3eed631027","a094c728ab58b12a130aaeed26d06f3c71aa8a61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}