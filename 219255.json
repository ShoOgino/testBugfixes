{"path":"solr/core/src/test/org/apache/solr/util/TestUtils#testNamedLists().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestUtils#testNamedLists().mjava","pathOld":"solr/src/test/org/apache/solr/util/TestUtils#testNamedLists().mjava","sourceNew":"  public void testNamedLists()\n  {\n    SimpleOrderedMap<Integer> map = new SimpleOrderedMap<Integer>();\n    map.add( \"test\", 10 );\n    SimpleOrderedMap<Integer> clone = map.clone();\n    assertEquals( map.toString(), clone.toString() );\n    assertEquals( new Integer(10), clone.get( \"test\" ) );\n  \n    Map<String,Integer> realMap = new HashMap<String, Integer>();\n    realMap.put( \"one\", 1 );\n    realMap.put( \"two\", 2 );\n    realMap.put( \"three\", 3 );\n    map = new SimpleOrderedMap<Integer>();\n    map.addAll( realMap );\n    assertEquals( 3, map.size() );\n    map = new SimpleOrderedMap<Integer>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    map.add( \"three\", 3 );\n    map.add( \"one\", 100 );\n    map.add( null, null );\n    \n    assertEquals( \"one\", map.getName(0) );\n    map.setName( 0, \"ONE\" );\n    assertEquals( \"ONE\", map.getName(0) );\n    assertEquals( new Integer(100), map.get( \"one\", 1 ) );\n    assertEquals( 4, map.indexOf( null, 1 ) );\n    assertEquals( null, map.get( null, 1 ) );\n\n    map = new SimpleOrderedMap<Integer>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    Iterator<Map.Entry<String, Integer>> iter = map.iterator();\n    while( iter.hasNext() ) {\n      Map.Entry<String, Integer> v = iter.next();\n      v.toString(); // coverage\n      v.setValue( v.getValue()*10 );\n      try {\n        iter.remove();\n        Assert.fail( \"should be unsupported...\" );\n      } catch( UnsupportedOperationException ex ) {}\n    }\n    // the values should be bigger\n    assertEquals( new Integer(10), map.get( \"one\" ) );\n    assertEquals( new Integer(20), map.get( \"two\" ) );\n  }\n\n","sourceOld":"  public void testNamedLists()\n  {\n    SimpleOrderedMap<Integer> map = new SimpleOrderedMap<Integer>();\n    map.add( \"test\", 10 );\n    SimpleOrderedMap<Integer> clone = map.clone();\n    assertEquals( map.toString(), clone.toString() );\n    assertEquals( new Integer(10), clone.get( \"test\" ) );\n  \n    Map<String,Integer> realMap = new HashMap<String, Integer>();\n    realMap.put( \"one\", 1 );\n    realMap.put( \"two\", 2 );\n    realMap.put( \"three\", 3 );\n    map = new SimpleOrderedMap<Integer>();\n    map.addAll( realMap );\n    assertEquals( 3, map.size() );\n    map = new SimpleOrderedMap<Integer>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    map.add( \"three\", 3 );\n    map.add( \"one\", 100 );\n    map.add( null, null );\n    \n    assertEquals( \"one\", map.getName(0) );\n    map.setName( 0, \"ONE\" );\n    assertEquals( \"ONE\", map.getName(0) );\n    assertEquals( new Integer(100), map.get( \"one\", 1 ) );\n    assertEquals( 4, map.indexOf( null, 1 ) );\n    assertEquals( null, map.get( null, 1 ) );\n\n    map = new SimpleOrderedMap<Integer>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    Iterator<Map.Entry<String, Integer>> iter = map.iterator();\n    while( iter.hasNext() ) {\n      Map.Entry<String, Integer> v = iter.next();\n      v.toString(); // coverage\n      v.setValue( v.getValue()*10 );\n      try {\n        iter.remove();\n        Assert.fail( \"should be unsupported...\" );\n      } catch( UnsupportedOperationException ex ) {}\n    }\n    // the values should be bigger\n    assertEquals( new Integer(10), map.get( \"one\" ) );\n    assertEquals( new Integer(20), map.get( \"two\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestUtils#testNamedLists().mjava","pathOld":"solr/src/test/org/apache/solr/util/TestUtils#testNamedLists().mjava","sourceNew":"  public void testNamedLists()\n  {\n    SimpleOrderedMap<Integer> map = new SimpleOrderedMap<Integer>();\n    map.add( \"test\", 10 );\n    SimpleOrderedMap<Integer> clone = map.clone();\n    assertEquals( map.toString(), clone.toString() );\n    assertEquals( new Integer(10), clone.get( \"test\" ) );\n  \n    Map<String,Integer> realMap = new HashMap<String, Integer>();\n    realMap.put( \"one\", 1 );\n    realMap.put( \"two\", 2 );\n    realMap.put( \"three\", 3 );\n    map = new SimpleOrderedMap<Integer>();\n    map.addAll( realMap );\n    assertEquals( 3, map.size() );\n    map = new SimpleOrderedMap<Integer>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    map.add( \"three\", 3 );\n    map.add( \"one\", 100 );\n    map.add( null, null );\n    \n    assertEquals( \"one\", map.getName(0) );\n    map.setName( 0, \"ONE\" );\n    assertEquals( \"ONE\", map.getName(0) );\n    assertEquals( new Integer(100), map.get( \"one\", 1 ) );\n    assertEquals( 4, map.indexOf( null, 1 ) );\n    assertEquals( null, map.get( null, 1 ) );\n\n    map = new SimpleOrderedMap<Integer>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    Iterator<Map.Entry<String, Integer>> iter = map.iterator();\n    while( iter.hasNext() ) {\n      Map.Entry<String, Integer> v = iter.next();\n      v.toString(); // coverage\n      v.setValue( v.getValue()*10 );\n      try {\n        iter.remove();\n        Assert.fail( \"should be unsupported...\" );\n      } catch( UnsupportedOperationException ex ) {}\n    }\n    // the values should be bigger\n    assertEquals( new Integer(10), map.get( \"one\" ) );\n    assertEquals( new Integer(20), map.get( \"two\" ) );\n  }\n\n","sourceOld":"  public void testNamedLists()\n  {\n    SimpleOrderedMap<Integer> map = new SimpleOrderedMap<Integer>();\n    map.add( \"test\", 10 );\n    SimpleOrderedMap<Integer> clone = map.clone();\n    assertEquals( map.toString(), clone.toString() );\n    assertEquals( new Integer(10), clone.get( \"test\" ) );\n  \n    Map<String,Integer> realMap = new HashMap<String, Integer>();\n    realMap.put( \"one\", 1 );\n    realMap.put( \"two\", 2 );\n    realMap.put( \"three\", 3 );\n    map = new SimpleOrderedMap<Integer>();\n    map.addAll( realMap );\n    assertEquals( 3, map.size() );\n    map = new SimpleOrderedMap<Integer>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    map.add( \"three\", 3 );\n    map.add( \"one\", 100 );\n    map.add( null, null );\n    \n    assertEquals( \"one\", map.getName(0) );\n    map.setName( 0, \"ONE\" );\n    assertEquals( \"ONE\", map.getName(0) );\n    assertEquals( new Integer(100), map.get( \"one\", 1 ) );\n    assertEquals( 4, map.indexOf( null, 1 ) );\n    assertEquals( null, map.get( null, 1 ) );\n\n    map = new SimpleOrderedMap<Integer>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    Iterator<Map.Entry<String, Integer>> iter = map.iterator();\n    while( iter.hasNext() ) {\n      Map.Entry<String, Integer> v = iter.next();\n      v.toString(); // coverage\n      v.setValue( v.getValue()*10 );\n      try {\n        iter.remove();\n        Assert.fail( \"should be unsupported...\" );\n      } catch( UnsupportedOperationException ex ) {}\n    }\n    // the values should be bigger\n    assertEquals( new Integer(10), map.get( \"one\" ) );\n    assertEquals( new Integer(20), map.get( \"two\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/TestUtils#testNamedLists().mjava","pathOld":"solr/src/test/org/apache/solr/util/TestUtils#testNamedLists().mjava","sourceNew":"  public void testNamedLists()\n  {\n    SimpleOrderedMap<Integer> map = new SimpleOrderedMap<Integer>();\n    map.add( \"test\", 10 );\n    SimpleOrderedMap<Integer> clone = map.clone();\n    assertEquals( map.toString(), clone.toString() );\n    assertEquals( new Integer(10), clone.get( \"test\" ) );\n  \n    Map<String,Integer> realMap = new HashMap<String, Integer>();\n    realMap.put( \"one\", 1 );\n    realMap.put( \"two\", 2 );\n    realMap.put( \"three\", 3 );\n    map = new SimpleOrderedMap<Integer>();\n    map.addAll( realMap );\n    assertEquals( 3, map.size() );\n    map = new SimpleOrderedMap<Integer>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    map.add( \"three\", 3 );\n    map.add( \"one\", 100 );\n    map.add( null, null );\n    \n    assertEquals( \"one\", map.getName(0) );\n    map.setName( 0, \"ONE\" );\n    assertEquals( \"ONE\", map.getName(0) );\n    assertEquals( new Integer(100), map.get( \"one\", 1 ) );\n    assertEquals( 4, map.indexOf( null, 1 ) );\n    assertEquals( null, map.get( null, 1 ) );\n\n    map = new SimpleOrderedMap<Integer>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    Iterator<Map.Entry<String, Integer>> iter = map.iterator();\n    while( iter.hasNext() ) {\n      Map.Entry<String, Integer> v = iter.next();\n      v.toString(); // coverage\n      v.setValue( v.getValue()*10 );\n      try {\n        iter.remove();\n        Assert.fail( \"should be unsupported...\" );\n      } catch( UnsupportedOperationException ex ) {}\n    }\n    // the values should be bigger\n    assertEquals( new Integer(10), map.get( \"one\" ) );\n    assertEquals( new Integer(20), map.get( \"two\" ) );\n  }\n\n","sourceOld":"  public void testNamedLists()\n  {\n    SimpleOrderedMap<Integer> map = new SimpleOrderedMap<Integer>();\n    map.add( \"test\", 10 );\n    SimpleOrderedMap<Integer> clone = map.clone();\n    assertEquals( map.toString(), clone.toString() );\n    assertEquals( new Integer(10), clone.get( \"test\" ) );\n  \n    Map<String,Integer> realMap = new HashMap<String, Integer>();\n    realMap.put( \"one\", 1 );\n    realMap.put( \"two\", 2 );\n    realMap.put( \"three\", 3 );\n    map = new SimpleOrderedMap<Integer>();\n    map.addAll( realMap );\n    assertEquals( 3, map.size() );\n    map = new SimpleOrderedMap<Integer>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    map.add( \"three\", 3 );\n    map.add( \"one\", 100 );\n    map.add( null, null );\n    \n    assertEquals( \"one\", map.getName(0) );\n    map.setName( 0, \"ONE\" );\n    assertEquals( \"ONE\", map.getName(0) );\n    assertEquals( new Integer(100), map.get( \"one\", 1 ) );\n    assertEquals( 4, map.indexOf( null, 1 ) );\n    assertEquals( null, map.get( null, 1 ) );\n\n    map = new SimpleOrderedMap<Integer>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    Iterator<Map.Entry<String, Integer>> iter = map.iterator();\n    while( iter.hasNext() ) {\n      Map.Entry<String, Integer> v = iter.next();\n      v.toString(); // coverage\n      v.setValue( v.getValue()*10 );\n      try {\n        iter.remove();\n        Assert.fail( \"should be unsupported...\" );\n      } catch( UnsupportedOperationException ex ) {}\n    }\n    // the values should be bigger\n    assertEquals( new Integer(10), map.get( \"one\" ) );\n    assertEquals( new Integer(20), map.get( \"two\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestUtils#testNamedLists().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestUtils#testNamedLists().mjava","sourceNew":"  public void testNamedLists()\n  {\n    SimpleOrderedMap<Integer> map = new SimpleOrderedMap<Integer>();\n    map.add( \"test\", 10 );\n    SimpleOrderedMap<Integer> clone = map.clone();\n    assertEquals( map.toString(), clone.toString() );\n    assertEquals( new Integer(10), clone.get( \"test\" ) );\n  \n    Map<String,Integer> realMap = new HashMap<String, Integer>();\n    realMap.put( \"one\", 1 );\n    realMap.put( \"two\", 2 );\n    realMap.put( \"three\", 3 );\n    map = new SimpleOrderedMap<Integer>();\n    map.addAll( realMap );\n    assertEquals( 3, map.size() );\n    map = new SimpleOrderedMap<Integer>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    map.add( \"three\", 3 );\n    map.add( \"one\", 100 );\n    map.add( null, null );\n    \n    assertEquals( \"one\", map.getName(0) );\n    map.setName( 0, \"ONE\" );\n    assertEquals( \"ONE\", map.getName(0) );\n    assertEquals( new Integer(100), map.get( \"one\", 1 ) );\n    assertEquals( 4, map.indexOf( null, 1 ) );\n    assertEquals( null, map.get( null, 1 ) );\n\n    map = new SimpleOrderedMap<Integer>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    Iterator<Map.Entry<String, Integer>> iter = map.iterator();\n    while( iter.hasNext() ) {\n      Map.Entry<String, Integer> v = iter.next();\n      v.toString(); // coverage\n      v.setValue( v.getValue()*10 );\n      try {\n        iter.remove();\n        Assert.fail( \"should be unsupported...\" );\n      } catch( UnsupportedOperationException ex ) {}\n    }\n    // the values should be bigger\n    assertEquals( new Integer(10), map.get( \"one\" ) );\n    assertEquals( new Integer(20), map.get( \"two\" ) );\n  }\n\n","sourceOld":"  public void testNamedLists()\n  {\n    SimpleOrderedMap<Integer> map = new SimpleOrderedMap<Integer>();\n    map.add( \"test\", 10 );\n    SimpleOrderedMap<Integer> clone = map.clone();\n    assertEquals( map.toString(), clone.toString() );\n    assertEquals( new Integer(10), clone.get( \"test\" ) );\n  \n    Map<String,Integer> realMap = new HashMap<String, Integer>();\n    realMap.put( \"one\", 1 );\n    realMap.put( \"two\", 2 );\n    realMap.put( \"three\", 3 );\n    map = new SimpleOrderedMap<Integer>();\n    map.addAll( realMap );\n    assertEquals( 3, map.size() );\n    map = new SimpleOrderedMap<Integer>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    map.add( \"three\", 3 );\n    map.add( \"one\", 100 );\n    map.add( null, null );\n    \n    assertEquals( \"one\", map.getName(0) );\n    map.setName( 0, \"ONE\" );\n    assertEquals( \"ONE\", map.getName(0) );\n    assertEquals( new Integer(100), map.get( \"one\", 1 ) );\n    assertEquals( 4, map.indexOf( null, 1 ) );\n    assertEquals( null, map.get( null, 1 ) );\n\n    map = new SimpleOrderedMap<Integer>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    Iterator<Map.Entry<String, Integer>> iter = map.iterator();\n    while( iter.hasNext() ) {\n      Map.Entry<String, Integer> v = iter.next();\n      v.toString(); // coverage\n      v.setValue( v.getValue()*10 );\n      try {\n        iter.remove();\n        Assert.fail( \"should be unsupported...\" );\n      } catch( UnsupportedOperationException ex ) {}\n    }\n    // the values should be bigger\n    assertEquals( new Integer(10), map.get( \"one\" ) );\n    assertEquals( new Integer(20), map.get( \"two\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/TestUtils#testNamedLists().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestUtils#testNamedLists().mjava","sourceNew":"  public void testNamedLists()\n  {\n    SimpleOrderedMap<Integer> map = new SimpleOrderedMap<Integer>();\n    map.add( \"test\", 10 );\n    SimpleOrderedMap<Integer> clone = map.clone();\n    assertEquals( map.toString(), clone.toString() );\n    assertEquals( new Integer(10), clone.get( \"test\" ) );\n  \n    Map<String,Integer> realMap = new HashMap<String, Integer>();\n    realMap.put( \"one\", 1 );\n    realMap.put( \"two\", 2 );\n    realMap.put( \"three\", 3 );\n    map = new SimpleOrderedMap<Integer>();\n    map.addAll( realMap );\n    assertEquals( 3, map.size() );\n    map = new SimpleOrderedMap<Integer>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    map.add( \"three\", 3 );\n    map.add( \"one\", 100 );\n    map.add( null, null );\n    \n    assertEquals( \"one\", map.getName(0) );\n    map.setName( 0, \"ONE\" );\n    assertEquals( \"ONE\", map.getName(0) );\n    assertEquals( new Integer(100), map.get( \"one\", 1 ) );\n    assertEquals( 4, map.indexOf( null, 1 ) );\n    assertEquals( null, map.get( null, 1 ) );\n\n    map = new SimpleOrderedMap<Integer>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    Iterator<Map.Entry<String, Integer>> iter = map.iterator();\n    while( iter.hasNext() ) {\n      Map.Entry<String, Integer> v = iter.next();\n      v.toString(); // coverage\n      v.setValue( v.getValue()*10 );\n      try {\n        iter.remove();\n        Assert.fail( \"should be unsupported...\" );\n      } catch( UnsupportedOperationException ex ) {}\n    }\n    // the values should be bigger\n    assertEquals( new Integer(10), map.get( \"one\" ) );\n    assertEquals( new Integer(20), map.get( \"two\" ) );\n  }\n\n","sourceOld":"  public void testNamedLists()\n  {\n    SimpleOrderedMap<Integer> map = new SimpleOrderedMap<Integer>();\n    map.add( \"test\", 10 );\n    SimpleOrderedMap<Integer> clone = map.clone();\n    assertEquals( map.toString(), clone.toString() );\n    assertEquals( new Integer(10), clone.get( \"test\" ) );\n  \n    Map<String,Integer> realMap = new HashMap<String, Integer>();\n    realMap.put( \"one\", 1 );\n    realMap.put( \"two\", 2 );\n    realMap.put( \"three\", 3 );\n    map = new SimpleOrderedMap<Integer>();\n    map.addAll( realMap );\n    assertEquals( 3, map.size() );\n    map = new SimpleOrderedMap<Integer>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    map.add( \"three\", 3 );\n    map.add( \"one\", 100 );\n    map.add( null, null );\n    \n    assertEquals( \"one\", map.getName(0) );\n    map.setName( 0, \"ONE\" );\n    assertEquals( \"ONE\", map.getName(0) );\n    assertEquals( new Integer(100), map.get( \"one\", 1 ) );\n    assertEquals( 4, map.indexOf( null, 1 ) );\n    assertEquals( null, map.get( null, 1 ) );\n\n    map = new SimpleOrderedMap<Integer>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    Iterator<Map.Entry<String, Integer>> iter = map.iterator();\n    while( iter.hasNext() ) {\n      Map.Entry<String, Integer> v = iter.next();\n      v.toString(); // coverage\n      v.setValue( v.getValue()*10 );\n      try {\n        iter.remove();\n        Assert.fail( \"should be unsupported...\" );\n      } catch( UnsupportedOperationException ex ) {}\n    }\n    // the values should be bigger\n    assertEquals( new Integer(10), map.get( \"one\" ) );\n    assertEquals( new Integer(20), map.get( \"two\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestUtils#testNamedLists().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestUtils#testNamedLists().mjava","sourceNew":"  public void testNamedLists()\n  {\n    SimpleOrderedMap<Integer> map = new SimpleOrderedMap<>();\n    map.add( \"test\", 10 );\n    SimpleOrderedMap<Integer> clone = map.clone();\n    assertEquals( map.toString(), clone.toString() );\n    assertEquals( new Integer(10), clone.get( \"test\" ) );\n  \n    Map<String,Integer> realMap = new HashMap<>();\n    realMap.put( \"one\", 1 );\n    realMap.put( \"two\", 2 );\n    realMap.put( \"three\", 3 );\n    map = new SimpleOrderedMap<>();\n    map.addAll( realMap );\n    assertEquals( 3, map.size() );\n    map = new SimpleOrderedMap<>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    map.add( \"three\", 3 );\n    map.add( \"one\", 100 );\n    map.add( null, null );\n    \n    assertEquals( \"one\", map.getName(0) );\n    map.setName( 0, \"ONE\" );\n    assertEquals( \"ONE\", map.getName(0) );\n    assertEquals( new Integer(100), map.get( \"one\", 1 ) );\n    assertEquals( 4, map.indexOf( null, 1 ) );\n    assertEquals( null, map.get( null, 1 ) );\n\n    map = new SimpleOrderedMap<>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    Iterator<Map.Entry<String, Integer>> iter = map.iterator();\n    while( iter.hasNext() ) {\n      Map.Entry<String, Integer> v = iter.next();\n      v.toString(); // coverage\n      v.setValue( v.getValue()*10 );\n      try {\n        iter.remove();\n        Assert.fail( \"should be unsupported...\" );\n      } catch( UnsupportedOperationException ex ) {}\n    }\n    // the values should be bigger\n    assertEquals( new Integer(10), map.get( \"one\" ) );\n    assertEquals( new Integer(20), map.get( \"two\" ) );\n  }\n\n","sourceOld":"  public void testNamedLists()\n  {\n    SimpleOrderedMap<Integer> map = new SimpleOrderedMap<Integer>();\n    map.add( \"test\", 10 );\n    SimpleOrderedMap<Integer> clone = map.clone();\n    assertEquals( map.toString(), clone.toString() );\n    assertEquals( new Integer(10), clone.get( \"test\" ) );\n  \n    Map<String,Integer> realMap = new HashMap<String, Integer>();\n    realMap.put( \"one\", 1 );\n    realMap.put( \"two\", 2 );\n    realMap.put( \"three\", 3 );\n    map = new SimpleOrderedMap<Integer>();\n    map.addAll( realMap );\n    assertEquals( 3, map.size() );\n    map = new SimpleOrderedMap<Integer>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    map.add( \"three\", 3 );\n    map.add( \"one\", 100 );\n    map.add( null, null );\n    \n    assertEquals( \"one\", map.getName(0) );\n    map.setName( 0, \"ONE\" );\n    assertEquals( \"ONE\", map.getName(0) );\n    assertEquals( new Integer(100), map.get( \"one\", 1 ) );\n    assertEquals( 4, map.indexOf( null, 1 ) );\n    assertEquals( null, map.get( null, 1 ) );\n\n    map = new SimpleOrderedMap<Integer>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    Iterator<Map.Entry<String, Integer>> iter = map.iterator();\n    while( iter.hasNext() ) {\n      Map.Entry<String, Integer> v = iter.next();\n      v.toString(); // coverage\n      v.setValue( v.getValue()*10 );\n      try {\n        iter.remove();\n        Assert.fail( \"should be unsupported...\" );\n      } catch( UnsupportedOperationException ex ) {}\n    }\n    // the values should be bigger\n    assertEquals( new Integer(10), map.get( \"one\" ) );\n    assertEquals( new Integer(20), map.get( \"two\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da41004e1997059b4d0549fbeb56bf0858d14689","date":1425425090,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestUtils#testNamedLists().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestUtils#testNamedLists().mjava","sourceNew":"  public void testNamedLists()\n  {\n    SimpleOrderedMap<Integer> map = new SimpleOrderedMap<>();\n    map.add( \"test\", 10 );\n    SimpleOrderedMap<Integer> clone = map.clone();\n    assertEquals( map.toString(), clone.toString() );\n    assertEquals( new Integer(10), clone.get( \"test\" ) );\n  \n    Map<String,Integer> realMap = new HashMap<>();\n    realMap.put( \"one\", 1 );\n    realMap.put( \"two\", 2 );\n    realMap.put( \"three\", 3 );\n    map = new SimpleOrderedMap<>();\n    map.addAll( realMap );\n    assertEquals( 3, map.size() );\n    map = new SimpleOrderedMap<>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    map.add( \"three\", 3 );\n    map.add( \"one\", 100 );\n    map.add( null, null );\n    \n    assertEquals( \"one\", map.getName(0) );\n    map.setName( 0, \"ONE\" );\n    assertEquals( \"ONE\", map.getName(0) );\n    assertEquals( new Integer(100), map.get( \"one\", 1 ) );\n    assertEquals( 4, map.indexOf( null, 1 ) );\n    assertEquals( null, map.get( null, 1 ) );\n\n    map = new SimpleOrderedMap<>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    Iterator<Map.Entry<String, Integer>> iter = map.iterator();\n    while( iter.hasNext() ) {\n      Map.Entry<String, Integer> v = iter.next();\n      v.toString(); // coverage\n      v.setValue( v.getValue()*10 );\n      try {\n        iter.remove();\n        Assert.fail( \"should be unsupported...\" );\n      } catch( UnsupportedOperationException ignored) {}\n    }\n    // the values should be bigger\n    assertEquals( new Integer(10), map.get( \"one\" ) );\n    assertEquals( new Integer(20), map.get( \"two\" ) );\n  }\n\n","sourceOld":"  public void testNamedLists()\n  {\n    SimpleOrderedMap<Integer> map = new SimpleOrderedMap<>();\n    map.add( \"test\", 10 );\n    SimpleOrderedMap<Integer> clone = map.clone();\n    assertEquals( map.toString(), clone.toString() );\n    assertEquals( new Integer(10), clone.get( \"test\" ) );\n  \n    Map<String,Integer> realMap = new HashMap<>();\n    realMap.put( \"one\", 1 );\n    realMap.put( \"two\", 2 );\n    realMap.put( \"three\", 3 );\n    map = new SimpleOrderedMap<>();\n    map.addAll( realMap );\n    assertEquals( 3, map.size() );\n    map = new SimpleOrderedMap<>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    map.add( \"three\", 3 );\n    map.add( \"one\", 100 );\n    map.add( null, null );\n    \n    assertEquals( \"one\", map.getName(0) );\n    map.setName( 0, \"ONE\" );\n    assertEquals( \"ONE\", map.getName(0) );\n    assertEquals( new Integer(100), map.get( \"one\", 1 ) );\n    assertEquals( 4, map.indexOf( null, 1 ) );\n    assertEquals( null, map.get( null, 1 ) );\n\n    map = new SimpleOrderedMap<>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    Iterator<Map.Entry<String, Integer>> iter = map.iterator();\n    while( iter.hasNext() ) {\n      Map.Entry<String, Integer> v = iter.next();\n      v.toString(); // coverage\n      v.setValue( v.getValue()*10 );\n      try {\n        iter.remove();\n        Assert.fail( \"should be unsupported...\" );\n      } catch( UnsupportedOperationException ex ) {}\n    }\n    // the values should be bigger\n    assertEquals( new Integer(10), map.get( \"one\" ) );\n    assertEquals( new Integer(20), map.get( \"two\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/TestUtils#testNamedLists().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestUtils#testNamedLists().mjava","sourceNew":"  public void testNamedLists()\n  {\n    SimpleOrderedMap<Integer> map = new SimpleOrderedMap<>();\n    map.add( \"test\", 10 );\n    SimpleOrderedMap<Integer> clone = map.clone();\n    assertEquals( map.toString(), clone.toString() );\n    assertEquals( new Integer(10), clone.get( \"test\" ) );\n  \n    Map<String,Integer> realMap = new HashMap<>();\n    realMap.put( \"one\", 1 );\n    realMap.put( \"two\", 2 );\n    realMap.put( \"three\", 3 );\n    map = new SimpleOrderedMap<>();\n    map.addAll( realMap );\n    assertEquals( 3, map.size() );\n    map = new SimpleOrderedMap<>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    map.add( \"three\", 3 );\n    map.add( \"one\", 100 );\n    map.add( null, null );\n    \n    assertEquals( \"one\", map.getName(0) );\n    map.setName( 0, \"ONE\" );\n    assertEquals( \"ONE\", map.getName(0) );\n    assertEquals( new Integer(100), map.get( \"one\", 1 ) );\n    assertEquals( 4, map.indexOf( null, 1 ) );\n    assertEquals( null, map.get( null, 1 ) );\n\n    map = new SimpleOrderedMap<>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    Iterator<Map.Entry<String, Integer>> iter = map.iterator();\n    while( iter.hasNext() ) {\n      Map.Entry<String, Integer> v = iter.next();\n      v.toString(); // coverage\n      v.setValue( v.getValue()*10 );\n      try {\n        iter.remove();\n        Assert.fail( \"should be unsupported...\" );\n      } catch( UnsupportedOperationException ignored) {}\n    }\n    // the values should be bigger\n    assertEquals( new Integer(10), map.get( \"one\" ) );\n    assertEquals( new Integer(20), map.get( \"two\" ) );\n  }\n\n","sourceOld":"  public void testNamedLists()\n  {\n    SimpleOrderedMap<Integer> map = new SimpleOrderedMap<>();\n    map.add( \"test\", 10 );\n    SimpleOrderedMap<Integer> clone = map.clone();\n    assertEquals( map.toString(), clone.toString() );\n    assertEquals( new Integer(10), clone.get( \"test\" ) );\n  \n    Map<String,Integer> realMap = new HashMap<>();\n    realMap.put( \"one\", 1 );\n    realMap.put( \"two\", 2 );\n    realMap.put( \"three\", 3 );\n    map = new SimpleOrderedMap<>();\n    map.addAll( realMap );\n    assertEquals( 3, map.size() );\n    map = new SimpleOrderedMap<>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    map.add( \"three\", 3 );\n    map.add( \"one\", 100 );\n    map.add( null, null );\n    \n    assertEquals( \"one\", map.getName(0) );\n    map.setName( 0, \"ONE\" );\n    assertEquals( \"ONE\", map.getName(0) );\n    assertEquals( new Integer(100), map.get( \"one\", 1 ) );\n    assertEquals( 4, map.indexOf( null, 1 ) );\n    assertEquals( null, map.get( null, 1 ) );\n\n    map = new SimpleOrderedMap<>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    Iterator<Map.Entry<String, Integer>> iter = map.iterator();\n    while( iter.hasNext() ) {\n      Map.Entry<String, Integer> v = iter.next();\n      v.toString(); // coverage\n      v.setValue( v.getValue()*10 );\n      try {\n        iter.remove();\n        Assert.fail( \"should be unsupported...\" );\n      } catch( UnsupportedOperationException ex ) {}\n    }\n    // the values should be bigger\n    assertEquals( new Integer(10), map.get( \"one\" ) );\n    assertEquals( new Integer(20), map.get( \"two\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestUtils#testNamedLists().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestUtils#testNamedLists().mjava","sourceNew":"  public void testNamedLists()\n  {\n    SimpleOrderedMap<Integer> map = new SimpleOrderedMap<>();\n    map.add( \"test\", 10 );\n    SimpleOrderedMap<Integer> clone = map.clone();\n    assertEquals( map.toString(), clone.toString() );\n    assertEquals(Integer.valueOf(10), clone.get( \"test\" ) );\n  \n    Map<String,Integer> realMap = new HashMap<>();\n    realMap.put( \"one\", 1 );\n    realMap.put( \"two\", 2 );\n    realMap.put( \"three\", 3 );\n    map = new SimpleOrderedMap<>();\n    map.addAll( realMap );\n    assertEquals( 3, map.size() );\n    map = new SimpleOrderedMap<>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    map.add( \"three\", 3 );\n    map.add( \"one\", 100 );\n    map.add( null, null );\n    \n    assertEquals( \"one\", map.getName(0) );\n    map.setName( 0, \"ONE\" );\n    assertEquals( \"ONE\", map.getName(0) );\n    assertEquals(Integer.valueOf(100), map.get( \"one\", 1 ) );\n    assertEquals( 4, map.indexOf( null, 1 ) );\n    assertEquals( null, map.get( null, 1 ) );\n\n    map = new SimpleOrderedMap<>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    Iterator<Map.Entry<String, Integer>> iter = map.iterator();\n    while( iter.hasNext() ) {\n      Map.Entry<String, Integer> v = iter.next();\n      v.toString(); // coverage\n      v.setValue( v.getValue()*10 );\n      try {\n        iter.remove();\n        Assert.fail( \"should be unsupported...\" );\n      } catch( UnsupportedOperationException ignored) {}\n    }\n    // the values should be bigger\n    assertEquals(Integer.valueOf(10), map.get( \"one\" ) );\n    assertEquals(Integer.valueOf(20), map.get( \"two\" ) );\n  }\n\n","sourceOld":"  public void testNamedLists()\n  {\n    SimpleOrderedMap<Integer> map = new SimpleOrderedMap<>();\n    map.add( \"test\", 10 );\n    SimpleOrderedMap<Integer> clone = map.clone();\n    assertEquals( map.toString(), clone.toString() );\n    assertEquals( new Integer(10), clone.get( \"test\" ) );\n  \n    Map<String,Integer> realMap = new HashMap<>();\n    realMap.put( \"one\", 1 );\n    realMap.put( \"two\", 2 );\n    realMap.put( \"three\", 3 );\n    map = new SimpleOrderedMap<>();\n    map.addAll( realMap );\n    assertEquals( 3, map.size() );\n    map = new SimpleOrderedMap<>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    map.add( \"three\", 3 );\n    map.add( \"one\", 100 );\n    map.add( null, null );\n    \n    assertEquals( \"one\", map.getName(0) );\n    map.setName( 0, \"ONE\" );\n    assertEquals( \"ONE\", map.getName(0) );\n    assertEquals( new Integer(100), map.get( \"one\", 1 ) );\n    assertEquals( 4, map.indexOf( null, 1 ) );\n    assertEquals( null, map.get( null, 1 ) );\n\n    map = new SimpleOrderedMap<>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    Iterator<Map.Entry<String, Integer>> iter = map.iterator();\n    while( iter.hasNext() ) {\n      Map.Entry<String, Integer> v = iter.next();\n      v.toString(); // coverage\n      v.setValue( v.getValue()*10 );\n      try {\n        iter.remove();\n        Assert.fail( \"should be unsupported...\" );\n      } catch( UnsupportedOperationException ignored) {}\n    }\n    // the values should be bigger\n    assertEquals( new Integer(10), map.get( \"one\" ) );\n    assertEquals( new Integer(20), map.get( \"two\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/TestUtils#testNamedLists().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestUtils#testNamedLists().mjava","sourceNew":"  public void testNamedLists()\n  {\n    SimpleOrderedMap<Integer> map = new SimpleOrderedMap<>();\n    map.add( \"test\", 10 );\n    SimpleOrderedMap<Integer> clone = map.clone();\n    assertEquals( map.toString(), clone.toString() );\n    assertEquals(Integer.valueOf(10), clone.get( \"test\" ) );\n  \n    Map<String,Integer> realMap = new HashMap<>();\n    realMap.put( \"one\", 1 );\n    realMap.put( \"two\", 2 );\n    realMap.put( \"three\", 3 );\n    map = new SimpleOrderedMap<>();\n    map.addAll( realMap );\n    assertEquals( 3, map.size() );\n    map = new SimpleOrderedMap<>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    map.add( \"three\", 3 );\n    map.add( \"one\", 100 );\n    map.add( null, null );\n    \n    assertEquals( \"one\", map.getName(0) );\n    map.setName( 0, \"ONE\" );\n    assertEquals( \"ONE\", map.getName(0) );\n    assertEquals(Integer.valueOf(100), map.get( \"one\", 1 ) );\n    assertEquals( 4, map.indexOf( null, 1 ) );\n    assertEquals( null, map.get( null, 1 ) );\n\n    map = new SimpleOrderedMap<>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    Iterator<Map.Entry<String, Integer>> iter = map.iterator();\n    while( iter.hasNext() ) {\n      Map.Entry<String, Integer> v = iter.next();\n      v.toString(); // coverage\n      v.setValue( v.getValue()*10 );\n      try {\n        iter.remove();\n        Assert.fail( \"should be unsupported...\" );\n      } catch( UnsupportedOperationException ignored) {}\n    }\n    // the values should be bigger\n    assertEquals(Integer.valueOf(10), map.get( \"one\" ) );\n    assertEquals(Integer.valueOf(20), map.get( \"two\" ) );\n  }\n\n","sourceOld":"  public void testNamedLists()\n  {\n    SimpleOrderedMap<Integer> map = new SimpleOrderedMap<>();\n    map.add( \"test\", 10 );\n    SimpleOrderedMap<Integer> clone = map.clone();\n    assertEquals( map.toString(), clone.toString() );\n    assertEquals( new Integer(10), clone.get( \"test\" ) );\n  \n    Map<String,Integer> realMap = new HashMap<>();\n    realMap.put( \"one\", 1 );\n    realMap.put( \"two\", 2 );\n    realMap.put( \"three\", 3 );\n    map = new SimpleOrderedMap<>();\n    map.addAll( realMap );\n    assertEquals( 3, map.size() );\n    map = new SimpleOrderedMap<>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    map.add( \"three\", 3 );\n    map.add( \"one\", 100 );\n    map.add( null, null );\n    \n    assertEquals( \"one\", map.getName(0) );\n    map.setName( 0, \"ONE\" );\n    assertEquals( \"ONE\", map.getName(0) );\n    assertEquals( new Integer(100), map.get( \"one\", 1 ) );\n    assertEquals( 4, map.indexOf( null, 1 ) );\n    assertEquals( null, map.get( null, 1 ) );\n\n    map = new SimpleOrderedMap<>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    Iterator<Map.Entry<String, Integer>> iter = map.iterator();\n    while( iter.hasNext() ) {\n      Map.Entry<String, Integer> v = iter.next();\n      v.toString(); // coverage\n      v.setValue( v.getValue()*10 );\n      try {\n        iter.remove();\n        Assert.fail( \"should be unsupported...\" );\n      } catch( UnsupportedOperationException ignored) {}\n    }\n    // the values should be bigger\n    assertEquals( new Integer(10), map.get( \"one\" ) );\n    assertEquals( new Integer(20), map.get( \"two\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/TestUtils#testNamedLists().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestUtils#testNamedLists().mjava","sourceNew":"  public void testNamedLists()\n  {\n    SimpleOrderedMap<Integer> map = new SimpleOrderedMap<>();\n    map.add( \"test\", 10 );\n    SimpleOrderedMap<Integer> clone = map.clone();\n    assertEquals( map.toString(), clone.toString() );\n    assertEquals(Integer.valueOf(10), clone.get( \"test\" ) );\n  \n    Map<String,Integer> realMap = new HashMap<>();\n    realMap.put( \"one\", 1 );\n    realMap.put( \"two\", 2 );\n    realMap.put( \"three\", 3 );\n    map = new SimpleOrderedMap<>();\n    map.addAll( realMap );\n    assertEquals( 3, map.size() );\n    map = new SimpleOrderedMap<>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    map.add( \"three\", 3 );\n    map.add( \"one\", 100 );\n    map.add( null, null );\n    \n    assertEquals( \"one\", map.getName(0) );\n    map.setName( 0, \"ONE\" );\n    assertEquals( \"ONE\", map.getName(0) );\n    assertEquals(Integer.valueOf(100), map.get( \"one\", 1 ) );\n    assertEquals( 4, map.indexOf( null, 1 ) );\n    assertEquals( null, map.get( null, 1 ) );\n\n    map = new SimpleOrderedMap<>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    Iterator<Map.Entry<String, Integer>> iter = map.iterator();\n    while( iter.hasNext() ) {\n      Map.Entry<String, Integer> v = iter.next();\n      v.toString(); // coverage\n      v.setValue( v.getValue()*10 );\n      try {\n        iter.remove();\n        Assert.fail( \"should be unsupported...\" );\n      } catch( UnsupportedOperationException ignored) {}\n    }\n    // the values should be bigger\n    assertEquals(Integer.valueOf(10), map.get( \"one\" ) );\n    assertEquals(Integer.valueOf(20), map.get( \"two\" ) );\n  }\n\n","sourceOld":"  public void testNamedLists()\n  {\n    SimpleOrderedMap<Integer> map = new SimpleOrderedMap<>();\n    map.add( \"test\", 10 );\n    SimpleOrderedMap<Integer> clone = map.clone();\n    assertEquals( map.toString(), clone.toString() );\n    assertEquals( new Integer(10), clone.get( \"test\" ) );\n  \n    Map<String,Integer> realMap = new HashMap<>();\n    realMap.put( \"one\", 1 );\n    realMap.put( \"two\", 2 );\n    realMap.put( \"three\", 3 );\n    map = new SimpleOrderedMap<>();\n    map.addAll( realMap );\n    assertEquals( 3, map.size() );\n    map = new SimpleOrderedMap<>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    map.add( \"three\", 3 );\n    map.add( \"one\", 100 );\n    map.add( null, null );\n    \n    assertEquals( \"one\", map.getName(0) );\n    map.setName( 0, \"ONE\" );\n    assertEquals( \"ONE\", map.getName(0) );\n    assertEquals( new Integer(100), map.get( \"one\", 1 ) );\n    assertEquals( 4, map.indexOf( null, 1 ) );\n    assertEquals( null, map.get( null, 1 ) );\n\n    map = new SimpleOrderedMap<>();\n    map.add( \"one\", 1 );\n    map.add( \"two\", 2 );\n    Iterator<Map.Entry<String, Integer>> iter = map.iterator();\n    while( iter.hasNext() ) {\n      Map.Entry<String, Integer> v = iter.next();\n      v.toString(); // coverage\n      v.setValue( v.getValue()*10 );\n      try {\n        iter.remove();\n        Assert.fail( \"should be unsupported...\" );\n      } catch( UnsupportedOperationException ignored) {}\n    }\n    // the values should be bigger\n    assertEquals( new Integer(10), map.get( \"one\" ) );\n    assertEquals( new Integer(20), map.get( \"two\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["da41004e1997059b4d0549fbeb56bf0858d14689"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"da41004e1997059b4d0549fbeb56bf0858d14689":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c26f00b574427b55127e869b935845554afde1fa"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["da41004e1997059b4d0549fbeb56bf0858d14689","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","da41004e1997059b4d0549fbeb56bf0858d14689"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["da41004e1997059b4d0549fbeb56bf0858d14689","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["628903f37b6c442da0d390db1c6af9a0e74d41a7"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["da41004e1997059b4d0549fbeb56bf0858d14689","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"da41004e1997059b4d0549fbeb56bf0858d14689":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","628903f37b6c442da0d390db1c6af9a0e74d41a7","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}