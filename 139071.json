{"path":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(ReaderContext,SpanQuery).mjava","commits":[{"id":"c8323d210478d76a02372693d254b69aac614689","date":1295877066,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(ReaderContext,SpanQuery).mjava","pathOld":"/dev/null","sourceNew":"  public static Spans wrap(ReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelReaderContext);\n    if(leaves.length == 1) {\n      return query.getSpans(leaves[0]);\n    }\n    return new MultiSpansWrapper(leaves, query);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(ReaderContext,SpanQuery).mjava","pathOld":"/dev/null","sourceNew":"  public static Spans wrap(ReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelReaderContext);\n    if(leaves.length == 1) {\n      return query.getSpans(leaves[0]);\n    }\n    return new MultiSpansWrapper(leaves, query);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(ReaderContext,SpanQuery).mjava","pathOld":"/dev/null","sourceNew":"  public static Spans wrap(ReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelReaderContext);\n    if(leaves.length == 1) {\n      return query.getSpans(leaves[0]);\n    }\n    return new MultiSpansWrapper(leaves, query);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(ReaderContext,SpanQuery).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(ReaderContext,SpanQuery).mjava","sourceNew":"  public static Spans wrap(ReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelReaderContext);\n    if(leaves.length == 1) {\n      return query.getSpans(leaves[0], leaves[0].reader.getLiveDocs());\n    }\n    return new MultiSpansWrapper(leaves, query);\n  }\n\n","sourceOld":"  public static Spans wrap(ReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelReaderContext);\n    if(leaves.length == 1) {\n      return query.getSpans(leaves[0]);\n    }\n    return new MultiSpansWrapper(leaves, query);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a015474a0e3185be4c42ed156c0f1e88b90b1ace","date":1321290150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(ReaderContext,SpanQuery).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(ReaderContext,SpanQuery).mjava","sourceNew":"  public static Spans wrap(ReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(topLevelReaderContext, term, true));\n    }\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelReaderContext);\n    if(leaves.length == 1) {\n      return query.getSpans(leaves[0], leaves[0].reader.getLiveDocs(), termContexts);\n    }\n    return new MultiSpansWrapper(leaves, query, termContexts);\n  }\n\n","sourceOld":"  public static Spans wrap(ReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelReaderContext);\n    if(leaves.length == 1) {\n      return query.getSpans(leaves[0], leaves[0].reader.getLiveDocs());\n    }\n    return new MultiSpansWrapper(leaves, query);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2ec9a9068164200de82395f0e8537a9d9302f3f","date":1327856476,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(ReaderContext,SpanQuery).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(ReaderContext,SpanQuery).mjava","sourceNew":"  public static Spans wrap(ReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(topLevelReaderContext, term, true));\n    }\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelReaderContext);\n    if(leaves.length == 1) {\n      return query.getSpans(leaves[0], leaves[0].reader().getLiveDocs(), termContexts);\n    }\n    return new MultiSpansWrapper(leaves, query, termContexts);\n  }\n\n","sourceOld":"  public static Spans wrap(ReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(topLevelReaderContext, term, true));\n    }\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelReaderContext);\n    if(leaves.length == 1) {\n      return query.getSpans(leaves[0], leaves[0].reader.getLiveDocs(), termContexts);\n    }\n    return new MultiSpansWrapper(leaves, query, termContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8493985e6883b3fa8231d172694d2aa3a85cb182","date":1327920390,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReaderContext,SpanQuery).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(ReaderContext,SpanQuery).mjava","sourceNew":"  public static Spans wrap(IndexReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(topLevelReaderContext, term, true));\n    }\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelReaderContext);\n    if(leaves.length == 1) {\n      return query.getSpans(leaves[0], leaves[0].reader().getLiveDocs(), termContexts);\n    }\n    return new MultiSpansWrapper(leaves, query, termContexts);\n  }\n\n","sourceOld":"  public static Spans wrap(ReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(topLevelReaderContext, term, true));\n    }\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelReaderContext);\n    if(leaves.length == 1) {\n      return query.getSpans(leaves[0], leaves[0].reader().getLiveDocs(), termContexts);\n    }\n    return new MultiSpansWrapper(leaves, query, termContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(IndexReaderContext,SpanQuery).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#wrap(ReaderContext,SpanQuery).mjava","sourceNew":"  public static Spans wrap(IndexReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(topLevelReaderContext, term, true));\n    }\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelReaderContext);\n    if(leaves.length == 1) {\n      return query.getSpans(leaves[0], leaves[0].reader().getLiveDocs(), termContexts);\n    }\n    return new MultiSpansWrapper(leaves, query, termContexts);\n  }\n\n","sourceOld":"  public static Spans wrap(ReaderContext topLevelReaderContext, SpanQuery query) throws IOException {\n    Map<Term,TermContext> termContexts = new HashMap<Term,TermContext>();\n    TreeSet<Term> terms = new TreeSet<Term>();\n    query.extractTerms(terms);\n    for (Term term : terms) {\n      termContexts.put(term, TermContext.build(topLevelReaderContext, term, true));\n    }\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topLevelReaderContext);\n    if(leaves.length == 1) {\n      return query.getSpans(leaves[0], leaves[0].reader.getLiveDocs(), termContexts);\n    }\n    return new MultiSpansWrapper(leaves, query, termContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8493985e6883b3fa8231d172694d2aa3a85cb182":["a2ec9a9068164200de82395f0e8537a9d9302f3f"],"c8323d210478d76a02372693d254b69aac614689":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["c8323d210478d76a02372693d254b69aac614689"],"a2ec9a9068164200de82395f0e8537a9d9302f3f":["a015474a0e3185be4c42ed156c0f1e88b90b1ace"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8323d210478d76a02372693d254b69aac614689"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a015474a0e3185be4c42ed156c0f1e88b90b1ace","8493985e6883b3fa8231d172694d2aa3a85cb182"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a015474a0e3185be4c42ed156c0f1e88b90b1ace":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8323d210478d76a02372693d254b69aac614689"]},"commit2Childs":{"8493985e6883b3fa8231d172694d2aa3a85cb182":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"c8323d210478d76a02372693d254b69aac614689":["3fc1f3f78b299e125f7e60f43b5d457392bea23f","29ef99d61cda9641b6250bf9567329a6e65f901d","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"a2ec9a9068164200de82395f0e8537a9d9302f3f":["8493985e6883b3fa8231d172694d2aa3a85cb182"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["a015474a0e3185be4c42ed156c0f1e88b90b1ace"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8323d210478d76a02372693d254b69aac614689","29ef99d61cda9641b6250bf9567329a6e65f901d","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a015474a0e3185be4c42ed156c0f1e88b90b1ace":["a2ec9a9068164200de82395f0e8537a9d9302f3f","5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}