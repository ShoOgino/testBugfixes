{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#readByteAddresses().mjava","commits":[{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":2,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#readByteAddresses().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#readByteAddresses().mjava","sourceNew":"      // read single byte addresses: each is delta - 2\n      // (shared prefix byte and length > 0 are both implicit)\n      private void readByteAddresses() throws IOException {\n        int addr = 0;\n        for (int i = 1; i < offsets.length; i++) {\n          addr += 2 + (buffer[i-1] & 0xFF);\n          offsets[i] = addr;\n        }\n      }\n\n","sourceOld":"      // read single byte addresses: each is delta - 2\n      // (shared prefix byte and length > 0 are both implicit)\n      private void readByteAddresses() throws IOException {\n        int addr = 0;\n        for (int i = 1; i < offsets.length; i++) {\n          addr += 2 + (buffer[i-1] & 0xFF);\n          offsets[i] = addr;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52a55f5afb81e4ca7ec581bf1a7b8218204e8af7","date":1472142029,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#readByteAddresses().mjava","sourceNew":null,"sourceOld":"      // read single byte addresses: each is delta - 2\n      // (shared prefix byte and length > 0 are both implicit)\n      private void readByteAddresses() throws IOException {\n        int addr = 0;\n        for (int i = 1; i < offsets.length; i++) {\n          addr += 2 + (buffer[i-1] & 0xFF);\n          offsets[i] = addr;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#readByteAddresses().mjava","sourceNew":null,"sourceOld":"      // read single byte addresses: each is delta - 2\n      // (shared prefix byte and length > 0 are both implicit)\n      private void readByteAddresses() throws IOException {\n        int addr = 0;\n        for (int i = 1; i < offsets.length; i++) {\n          addr += 2 + (buffer[i-1] & 0xFF);\n          offsets[i] = addr;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#readByteAddresses().mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#readByteAddresses().mjava","sourceNew":"      // read single byte addresses: each is delta - 2\n      // (shared prefix byte and length > 0 are both implicit)\n      private void readByteAddresses() throws IOException {\n        int addr = 0;\n        for (int i = 1; i < offsets.length; i++) {\n          addr += 2 + (buffer[i-1] & 0xFF);\n          offsets[i] = addr;\n        }\n      }\n\n","sourceOld":"      // read single byte addresses: each is delta - 2\n      // (shared prefix byte and length > 0 are both implicit)\n      private void readByteAddresses() throws IOException {\n        int addr = 0;\n        for (int i = 1; i < offsets.length; i++) {\n          addr += 2 + (buffer[i-1] & 0xFF);\n          offsets[i] = addr;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a870f9917149dc600c4ad4417d615c1795de5864":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["a870f9917149dc600c4ad4417d615c1795de5864","52a55f5afb81e4ca7ec581bf1a7b8218204e8af7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a870f9917149dc600c4ad4417d615c1795de5864","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"52a55f5afb81e4ca7ec581bf1a7b8218204e8af7":["a870f9917149dc600c4ad4417d615c1795de5864"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a870f9917149dc600c4ad4417d615c1795de5864"],"a870f9917149dc600c4ad4417d615c1795de5864":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","52a55f5afb81e4ca7ec581bf1a7b8218204e8af7"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"52a55f5afb81e4ca7ec581bf1a7b8218204e8af7":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}