{"path":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testRandomTrieAndClassicRangeQuery(TrieUtils).mjava","commits":[{"id":"29191e6ce86bfcd231cd069834a87833fa4079c1","date":1228333111,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testRandomTrieAndClassicRangeQuery(TrieUtils).mjava","pathOld":"/dev/null","sourceNew":"\tprivate void testRandomTrieAndClassicRangeQuery(final TrieUtils variant) throws Exception {\n\t\tString field=\"field\"+variant.TRIE_BITS;\n\t\t// 50 random tests, the tests may also return 0 results, if min>max, but this is ok\n\t\tfor (int i=0; i<50; i++) {\n\t\t\tlong lower=(long)(rnd.nextDouble()*10000L*distance);\n\t\t\tlong upper=(long)(rnd.nextDouble()*10000L*distance);\n\t\t\tTrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), variant);\n\t\t\tRangeQuery cq=new RangeQuery(field, variant.longToTrieCoded(lower), variant.longToTrieCoded(upper), true, true);\n\t\t\tcq.setConstantScoreRewrite(true);\n\t\t\tTopDocs tTopDocs = searcher.search(tq, 1);\n\t\t\tTopDocs cTopDocs = searcher.search(cq, 1);\n\t\t\tassertEquals(\"Returned count for TrieRangeQuery and RangeQuery must be equal\", tTopDocs.totalHits, cTopDocs.totalHits );\n\t\t}\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ef14ec05032a847f9ce1820055c6c29f72d771a","date":1231669514,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testRandomTrieAndClassicRangeQuery(TrieUtils).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testRandomTrieAndClassicRangeQuery(TrieUtils).mjava","sourceNew":"  private void testRandomTrieAndClassicRangeQuery(final TrieUtils variant) throws Exception {\n    String field=\"field\"+variant.TRIE_BITS;\n    // 50 random tests, the tests may also return 0 results, if min>max, but this is ok\n    for (int i=0; i<50; i++) {\n      long lower=(long)(rnd.nextDouble()*10000L*distance);\n      long upper=(long)(rnd.nextDouble()*10000L*distance);\n      TrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), variant);\n      RangeQuery cq=new RangeQuery(field, variant.longToTrieCoded(lower), variant.longToTrieCoded(upper), true, true);\n      cq.setConstantScoreRewrite(true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for TrieRangeQuery and RangeQuery must be equal\", tTopDocs.totalHits, cTopDocs.totalHits );\n    }\n  }\n\n","sourceOld":"\tprivate void testRandomTrieAndClassicRangeQuery(final TrieUtils variant) throws Exception {\n\t\tString field=\"field\"+variant.TRIE_BITS;\n\t\t// 50 random tests, the tests may also return 0 results, if min>max, but this is ok\n\t\tfor (int i=0; i<50; i++) {\n\t\t\tlong lower=(long)(rnd.nextDouble()*10000L*distance);\n\t\t\tlong upper=(long)(rnd.nextDouble()*10000L*distance);\n\t\t\tTrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), variant);\n\t\t\tRangeQuery cq=new RangeQuery(field, variant.longToTrieCoded(lower), variant.longToTrieCoded(upper), true, true);\n\t\t\tcq.setConstantScoreRewrite(true);\n\t\t\tTopDocs tTopDocs = searcher.search(tq, 1);\n\t\t\tTopDocs cTopDocs = searcher.search(cq, 1);\n\t\t\tassertEquals(\"Returned count for TrieRangeQuery and RangeQuery must be equal\", tTopDocs.totalHits, cTopDocs.totalHits );\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e91724d755098f0c856c612bf56d1edc31044a82","date":1233069324,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testRandomTrieAndClassicRangeQuery(TrieUtils).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testRandomTrieAndClassicRangeQuery(TrieUtils).mjava","sourceNew":"  private void testRandomTrieAndClassicRangeQuery(final TrieUtils variant) throws Exception {\n    String field=\"field\"+variant.TRIE_BITS;\n    // 50 random tests, the tests may also return 0 results, if min>max, but this is ok\n    for (int i=0; i<50; i++) {\n      long lower=(long)(rnd.nextDouble()*10000L*distance);\n      long upper=(long)(rnd.nextDouble()*10000L*distance);\n      // test inclusive range\n      TrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, true, variant);\n      RangeQuery cq=new RangeQuery(field, variant.longToTrieCoded(lower), variant.longToTrieCoded(upper), true, true);\n      cq.setConstantScoreRewrite(true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for TrieRangeQuery and RangeQuery must be equal\", tTopDocs.totalHits, cTopDocs.totalHits );\n      // test exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, false, variant);\n      cq=new RangeQuery(field, variant.longToTrieCoded(lower), variant.longToTrieCoded(upper), false, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for TrieRangeQuery and RangeQuery must be equal\", tTopDocs.totalHits, cTopDocs.totalHits );\n      // test left exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, true, variant);\n      cq=new RangeQuery(field, variant.longToTrieCoded(lower), variant.longToTrieCoded(upper), false, true);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for TrieRangeQuery and RangeQuery must be equal\", tTopDocs.totalHits, cTopDocs.totalHits );\n      // test right exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, false, variant);\n      cq=new RangeQuery(field, variant.longToTrieCoded(lower), variant.longToTrieCoded(upper), true, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for TrieRangeQuery and RangeQuery must be equal\", tTopDocs.totalHits, cTopDocs.totalHits );\n    }\n  }\n\n","sourceOld":"  private void testRandomTrieAndClassicRangeQuery(final TrieUtils variant) throws Exception {\n    String field=\"field\"+variant.TRIE_BITS;\n    // 50 random tests, the tests may also return 0 results, if min>max, but this is ok\n    for (int i=0; i<50; i++) {\n      long lower=(long)(rnd.nextDouble()*10000L*distance);\n      long upper=(long)(rnd.nextDouble()*10000L*distance);\n      TrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), variant);\n      RangeQuery cq=new RangeQuery(field, variant.longToTrieCoded(lower), variant.longToTrieCoded(upper), true, true);\n      cq.setConstantScoreRewrite(true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for TrieRangeQuery and RangeQuery must be equal\", tTopDocs.totalHits, cTopDocs.totalHits );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb1066f2afe9450585d0d10063ea4450085236f1","date":1233870820,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testRandomTrieAndClassicRangeQuery(TrieUtils).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testRandomTrieAndClassicRangeQuery(TrieUtils).mjava","sourceNew":"  private void testRandomTrieAndClassicRangeQuery(final TrieUtils variant) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+variant.TRIE_BITS;\n    // 50 random tests, the tests may also return 0 results, if min>max, but this is ok\n    for (int i=0; i<50; i++) {\n      long lower=(long)(rnd.nextDouble()*10000L*distance);\n      long upper=(long)(rnd.nextDouble()*10000L*distance);\n      // test inclusive range\n      TrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, true, variant);\n      RangeQuery cq=new RangeQuery(field, variant.longToTrieCoded(lower), variant.longToTrieCoded(upper), true, true);\n      cq.setConstantScoreRewrite(true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for TrieRangeQuery and RangeQuery must be equal\", tTopDocs.totalHits, cTopDocs.totalHits );\n      // test exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, false, variant);\n      cq=new RangeQuery(field, variant.longToTrieCoded(lower), variant.longToTrieCoded(upper), false, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for TrieRangeQuery and RangeQuery must be equal\", tTopDocs.totalHits, cTopDocs.totalHits );\n      // test left exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, true, variant);\n      cq=new RangeQuery(field, variant.longToTrieCoded(lower), variant.longToTrieCoded(upper), false, true);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for TrieRangeQuery and RangeQuery must be equal\", tTopDocs.totalHits, cTopDocs.totalHits );\n      // test right exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, false, variant);\n      cq=new RangeQuery(field, variant.longToTrieCoded(lower), variant.longToTrieCoded(upper), true, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for TrieRangeQuery and RangeQuery must be equal\", tTopDocs.totalHits, cTopDocs.totalHits );\n    }\n  }\n\n","sourceOld":"  private void testRandomTrieAndClassicRangeQuery(final TrieUtils variant) throws Exception {\n    String field=\"field\"+variant.TRIE_BITS;\n    // 50 random tests, the tests may also return 0 results, if min>max, but this is ok\n    for (int i=0; i<50; i++) {\n      long lower=(long)(rnd.nextDouble()*10000L*distance);\n      long upper=(long)(rnd.nextDouble()*10000L*distance);\n      // test inclusive range\n      TrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, true, variant);\n      RangeQuery cq=new RangeQuery(field, variant.longToTrieCoded(lower), variant.longToTrieCoded(upper), true, true);\n      cq.setConstantScoreRewrite(true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for TrieRangeQuery and RangeQuery must be equal\", tTopDocs.totalHits, cTopDocs.totalHits );\n      // test exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, false, variant);\n      cq=new RangeQuery(field, variant.longToTrieCoded(lower), variant.longToTrieCoded(upper), false, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for TrieRangeQuery and RangeQuery must be equal\", tTopDocs.totalHits, cTopDocs.totalHits );\n      // test left exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, true, variant);\n      cq=new RangeQuery(field, variant.longToTrieCoded(lower), variant.longToTrieCoded(upper), false, true);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for TrieRangeQuery and RangeQuery must be equal\", tTopDocs.totalHits, cTopDocs.totalHits );\n      // test right exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, false, variant);\n      cq=new RangeQuery(field, variant.longToTrieCoded(lower), variant.longToTrieCoded(upper), true, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for TrieRangeQuery and RangeQuery must be equal\", tTopDocs.totalHits, cTopDocs.totalHits );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":6,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestIntTrieRangeFilter#testRandomTrieAndClassicRangeQuery(int).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testRandomTrieAndClassicRangeQuery(TrieUtils).mjava","sourceNew":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\r\n    final Random rnd=newRandom();\r\n    String field=\"field\"+precisionStep;\r\n    // 50 random tests, the tests may also return 0 results, if min>max, but this is ok\r\n    for (int i=0; i<50; i++) {\r\n      int lower=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\r\n      int upper=(int)(rnd.nextDouble()*noDocs*distance)+startOffset;\r\n      // test inclusive range\r\n      Query tq=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), true, true).asQuery();\r\n      RangeQuery cq=new RangeQuery(field, TrieUtils.intToPrefixCoded(lower), TrieUtils.intToPrefixCoded(upper), true, true);\r\n      cq.setConstantScoreRewrite(true);\r\n      TopDocs tTopDocs = searcher.search(tq, 1);\r\n      TopDocs cTopDocs = searcher.search(cq, 1);\r\n      assertEquals(\"Returned count for IntTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\r\n      // test exclusive range\r\n      tq=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), false, false).asQuery();\r\n      cq=new RangeQuery(field, TrieUtils.intToPrefixCoded(lower), TrieUtils.intToPrefixCoded(upper), false, false);\r\n      cq.setConstantScoreRewrite(true);\r\n      tTopDocs = searcher.search(tq, 1);\r\n      cTopDocs = searcher.search(cq, 1);\r\n      assertEquals(\"Returned count for IntTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\r\n      // test left exclusive range\r\n      tq=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), false, true).asQuery();\r\n      cq=new RangeQuery(field, TrieUtils.intToPrefixCoded(lower), TrieUtils.intToPrefixCoded(upper), false, true);\r\n      cq.setConstantScoreRewrite(true);\r\n      tTopDocs = searcher.search(tq, 1);\r\n      cTopDocs = searcher.search(cq, 1);\r\n      assertEquals(\"Returned count for IntTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\r\n      // test right exclusive range\r\n      tq=new IntTrieRangeFilter(field, precisionStep, new Integer(lower), new Integer(upper), true, false).asQuery();\r\n      cq=new RangeQuery(field, TrieUtils.intToPrefixCoded(lower), TrieUtils.intToPrefixCoded(upper), true, false);\r\n      cq.setConstantScoreRewrite(true);\r\n      tTopDocs = searcher.search(tq, 1);\r\n      cTopDocs = searcher.search(cq, 1);\r\n      assertEquals(\"Returned count for IntTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\r\n    }\r\n  }\r\n\n","sourceOld":"  private void testRandomTrieAndClassicRangeQuery(final TrieUtils variant) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+variant.TRIE_BITS;\n    // 50 random tests, the tests may also return 0 results, if min>max, but this is ok\n    for (int i=0; i<50; i++) {\n      long lower=(long)(rnd.nextDouble()*10000L*distance);\n      long upper=(long)(rnd.nextDouble()*10000L*distance);\n      // test inclusive range\n      TrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, true, variant);\n      RangeQuery cq=new RangeQuery(field, variant.longToTrieCoded(lower), variant.longToTrieCoded(upper), true, true);\n      cq.setConstantScoreRewrite(true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for TrieRangeQuery and RangeQuery must be equal\", tTopDocs.totalHits, cTopDocs.totalHits );\n      // test exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, false, variant);\n      cq=new RangeQuery(field, variant.longToTrieCoded(lower), variant.longToTrieCoded(upper), false, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for TrieRangeQuery and RangeQuery must be equal\", tTopDocs.totalHits, cTopDocs.totalHits );\n      // test left exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, true, variant);\n      cq=new RangeQuery(field, variant.longToTrieCoded(lower), variant.longToTrieCoded(upper), false, true);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for TrieRangeQuery and RangeQuery must be equal\", tTopDocs.totalHits, cTopDocs.totalHits );\n      // test right exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, false, variant);\n      cq=new RangeQuery(field, variant.longToTrieCoded(lower), variant.longToTrieCoded(upper), true, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for TrieRangeQuery and RangeQuery must be equal\", tTopDocs.totalHits, cTopDocs.totalHits );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestLongTrieRangeFilter#testRandomTrieAndClassicRangeQuery(int).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieRangeQuery#testRandomTrieAndClassicRangeQuery(TrieUtils).mjava","sourceNew":"  private void testRandomTrieAndClassicRangeQuery(int precisionStep) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+precisionStep;\n    // 50 random tests, the tests may also return 0 results, if min>max, but this is ok\n    for (int i=0; i<50; i++) {\n      long lower=(long)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      long upper=(long)(rnd.nextDouble()*noDocs*distance)+startOffset;\n      // test inclusive range\n      Query tq=new LongTrieRangeFilter(field, precisionStep, new Long(lower), new Long(upper), true, true).asQuery();\n      RangeQuery cq=new RangeQuery(field, TrieUtils.longToPrefixCoded(lower), TrieUtils.longToPrefixCoded(upper), true, true);\n      cq.setConstantScoreRewrite(true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LongTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      // test exclusive range\n      tq=new LongTrieRangeFilter(field, precisionStep, new Long(lower), new Long(upper), false, false).asQuery();\n      cq=new RangeQuery(field, TrieUtils.longToPrefixCoded(lower), TrieUtils.longToPrefixCoded(upper), false, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LongTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      // test left exclusive range\n      tq=new LongTrieRangeFilter(field, precisionStep, new Long(lower), new Long(upper), false, true).asQuery();\n      cq=new RangeQuery(field, TrieUtils.longToPrefixCoded(lower), TrieUtils.longToPrefixCoded(upper), false, true);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LongTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n      // test right exclusive range\n      tq=new LongTrieRangeFilter(field, precisionStep, new Long(lower), new Long(upper), true, false).asQuery();\n      cq=new RangeQuery(field, TrieUtils.longToPrefixCoded(lower), TrieUtils.longToPrefixCoded(upper), true, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for LongTrieRangeFilter and RangeQuery must be equal\", cTopDocs.totalHits, tTopDocs.totalHits );\n    }\n  }\n\n","sourceOld":"  private void testRandomTrieAndClassicRangeQuery(final TrieUtils variant) throws Exception {\n    final Random rnd=newRandom();\n    String field=\"field\"+variant.TRIE_BITS;\n    // 50 random tests, the tests may also return 0 results, if min>max, but this is ok\n    for (int i=0; i<50; i++) {\n      long lower=(long)(rnd.nextDouble()*10000L*distance);\n      long upper=(long)(rnd.nextDouble()*10000L*distance);\n      // test inclusive range\n      TrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, true, variant);\n      RangeQuery cq=new RangeQuery(field, variant.longToTrieCoded(lower), variant.longToTrieCoded(upper), true, true);\n      cq.setConstantScoreRewrite(true);\n      TopDocs tTopDocs = searcher.search(tq, 1);\n      TopDocs cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for TrieRangeQuery and RangeQuery must be equal\", tTopDocs.totalHits, cTopDocs.totalHits );\n      // test exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, false, variant);\n      cq=new RangeQuery(field, variant.longToTrieCoded(lower), variant.longToTrieCoded(upper), false, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for TrieRangeQuery and RangeQuery must be equal\", tTopDocs.totalHits, cTopDocs.totalHits );\n      // test left exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, true, variant);\n      cq=new RangeQuery(field, variant.longToTrieCoded(lower), variant.longToTrieCoded(upper), false, true);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for TrieRangeQuery and RangeQuery must be equal\", tTopDocs.totalHits, cTopDocs.totalHits );\n      // test right exclusive range\n      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, false, variant);\n      cq=new RangeQuery(field, variant.longToTrieCoded(lower), variant.longToTrieCoded(upper), true, false);\n      cq.setConstantScoreRewrite(true);\n      tTopDocs = searcher.search(tq, 1);\n      cTopDocs = searcher.search(cq, 1);\n      assertEquals(\"Returned count for TrieRangeQuery and RangeQuery must be equal\", tTopDocs.totalHits, cTopDocs.totalHits );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cb1066f2afe9450585d0d10063ea4450085236f1":["e91724d755098f0c856c612bf56d1edc31044a82"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["cb1066f2afe9450585d0d10063ea4450085236f1"],"e91724d755098f0c856c612bf56d1edc31044a82":["8ef14ec05032a847f9ce1820055c6c29f72d771a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"29191e6ce86bfcd231cd069834a87833fa4079c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8ef14ec05032a847f9ce1820055c6c29f72d771a":["29191e6ce86bfcd231cd069834a87833fa4079c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"]},"commit2Childs":{"cb1066f2afe9450585d0d10063ea4450085236f1":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e91724d755098f0c856c612bf56d1edc31044a82":["cb1066f2afe9450585d0d10063ea4450085236f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29191e6ce86bfcd231cd069834a87833fa4079c1"],"29191e6ce86bfcd231cd069834a87833fa4079c1":["8ef14ec05032a847f9ce1820055c6c29f72d771a"],"8ef14ec05032a847f9ce1820055c6c29f72d771a":["e91724d755098f0c856c612bf56d1edc31044a82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}