{"path":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getRecall().mjava","commits":[{"id":"572306117bc719f253d957bbaaa58ee0f8e482f8","date":1452262992,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getRecall().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * get the recall (see {@link #getRecall(String)}) over all the classes\n     *\n     * @return the recall as computed from the whole confusion matrix\n     */\n    public double getRecall() {\n      double tp = 0;\n      double fn = 0;\n      for (Map.Entry<String, Map<String, Long>> classification : linearizedMatrix.entrySet()) {\n        String klass = classification.getKey();\n        for (Map.Entry<String, Long> entry : classification.getValue().entrySet()) {\n          if (klass.equals(entry.getKey())) {\n            tp += entry.getValue();\n          } else {\n            fn += entry.getValue();\n          }\n        }\n      }\n\n      return tp + fn > 0 ? tp / (tp + fn) : 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8bcd3226dfcc329379dc50da67a963739f6cb65","date":1464272038,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getRecall().mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getRecall().mjava","sourceNew":"    /**\n     * get the macro averaged recall (see {@link #getRecall(String)}) over all the classes\n     *\n     * @return the recall as computed from the confusion matrix\n     */\n    public double getRecall() {\n      double r = 0;\n      for (Map.Entry<String, Map<String, Long>> classification : linearizedMatrix.entrySet()) {\n        String klass = classification.getKey();\n        r += getRecall(klass);\n      }\n\n      return r / linearizedMatrix.size();\n    }\n\n","sourceOld":"    /**\n     * get the recall (see {@link #getRecall(String)}) over all the classes\n     *\n     * @return the recall as computed from the whole confusion matrix\n     */\n    public double getRecall() {\n      double tp = 0;\n      double fn = 0;\n      for (Map.Entry<String, Map<String, Long>> classification : linearizedMatrix.entrySet()) {\n        String klass = classification.getKey();\n        for (Map.Entry<String, Long> entry : classification.getValue().entrySet()) {\n          if (klass.equals(entry.getKey())) {\n            tp += entry.getValue();\n          } else {\n            fn += entry.getValue();\n          }\n        }\n      }\n\n      return tp + fn > 0 ? tp / (tp + fn) : 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getRecall().mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getRecall().mjava","sourceNew":"    /**\n     * get the macro averaged recall (see {@link #getRecall(String)}) over all the classes\n     *\n     * @return the recall as computed from the confusion matrix\n     */\n    public double getRecall() {\n      double r = 0;\n      for (Map.Entry<String, Map<String, Long>> classification : linearizedMatrix.entrySet()) {\n        String klass = classification.getKey();\n        r += getRecall(klass);\n      }\n\n      return r / linearizedMatrix.size();\n    }\n\n","sourceOld":"    /**\n     * get the recall (see {@link #getRecall(String)}) over all the classes\n     *\n     * @return the recall as computed from the whole confusion matrix\n     */\n    public double getRecall() {\n      double tp = 0;\n      double fn = 0;\n      for (Map.Entry<String, Map<String, Long>> classification : linearizedMatrix.entrySet()) {\n        String klass = classification.getKey();\n        for (Map.Entry<String, Long> entry : classification.getValue().entrySet()) {\n          if (klass.equals(entry.getKey())) {\n            tp += entry.getValue();\n          } else {\n            fn += entry.getValue();\n          }\n        }\n      }\n\n      return tp + fn > 0 ? tp / (tp + fn) : 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getRecall().mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/utils/ConfusionMatrixGenerator.ConfusionMatrix#getRecall().mjava","sourceNew":"    /**\n     * get the macro averaged recall (see {@link #getRecall(String)}) over all the classes\n     *\n     * @return the recall as computed from the confusion matrix\n     */\n    public double getRecall() {\n      double r = 0;\n      for (Map.Entry<String, Map<String, Long>> classification : linearizedMatrix.entrySet()) {\n        String klass = classification.getKey();\n        r += getRecall(klass);\n      }\n\n      return r / linearizedMatrix.size();\n    }\n\n","sourceOld":"    /**\n     * get the recall (see {@link #getRecall(String)}) over all the classes\n     *\n     * @return the recall as computed from the whole confusion matrix\n     */\n    public double getRecall() {\n      double tp = 0;\n      double fn = 0;\n      for (Map.Entry<String, Map<String, Long>> classification : linearizedMatrix.entrySet()) {\n        String klass = classification.getKey();\n        for (Map.Entry<String, Long> entry : classification.getValue().entrySet()) {\n          if (klass.equals(entry.getKey())) {\n            tp += entry.getValue();\n          } else {\n            fn += entry.getValue();\n          }\n        }\n      }\n\n      return tp + fn > 0 ? tp / (tp + fn) : 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f8bcd3226dfcc329379dc50da67a963739f6cb65":["572306117bc719f253d957bbaaa58ee0f8e482f8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83870855d82aba6819217abeff5a40779dbb28b4":["572306117bc719f253d957bbaaa58ee0f8e482f8","f8bcd3226dfcc329379dc50da67a963739f6cb65"],"572306117bc719f253d957bbaaa58ee0f8e482f8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["572306117bc719f253d957bbaaa58ee0f8e482f8","f8bcd3226dfcc329379dc50da67a963739f6cb65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8bcd3226dfcc329379dc50da67a963739f6cb65"]},"commit2Childs":{"f8bcd3226dfcc329379dc50da67a963739f6cb65":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["572306117bc719f253d957bbaaa58ee0f8e482f8"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"572306117bc719f253d957bbaaa58ee0f8e482f8":["f8bcd3226dfcc329379dc50da67a963739f6cb65","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}