{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertDocsSkipping(int,DocsEnum,DocsEnum,boolean).mjava","commits":[{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertDocsSkipping(int,DocsEnum,DocsEnum,boolean).mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/block/TestBlockPostingsFormat3#assertDocsSkipping(int,DocsEnum,DocsEnum,boolean).mjava","sourceNew":"  /**\n   * checks advancing docs\n   */\n  public void assertDocsSkipping(int docFreq, DocsEnum leftDocs, DocsEnum rightDocs, boolean hasFreqs) throws Exception {\n    if (leftDocs == null) {\n      assertNull(rightDocs);\n      return;\n    }\n    int docid = -1;\n    int averageGap = MAXDOC / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random().nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random().nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      if (hasFreqs) {\n        assertEquals(leftDocs.freq(), rightDocs.freq());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * checks advancing docs\n   */\n  public void assertDocsSkipping(int docFreq, DocsEnum leftDocs, DocsEnum rightDocs, boolean hasFreqs) throws Exception {\n    if (leftDocs == null) {\n      assertNull(rightDocs);\n      return;\n    }\n    int docid = -1;\n    int averageGap = MAXDOC / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random().nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random().nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      if (hasFreqs) {\n        assertEquals(leftDocs.freq(), rightDocs.freq());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertDocsSkipping(int,DocsEnum,DocsEnum,boolean).mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/block/TestBlockPostingsFormat3#assertDocsSkipping(int,DocsEnum,DocsEnum,boolean).mjava","sourceNew":"  /**\n   * checks advancing docs\n   */\n  public void assertDocsSkipping(int docFreq, DocsEnum leftDocs, DocsEnum rightDocs, boolean hasFreqs) throws Exception {\n    if (leftDocs == null) {\n      assertNull(rightDocs);\n      return;\n    }\n    int docid = -1;\n    int averageGap = MAXDOC / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random().nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random().nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      if (hasFreqs) {\n        assertEquals(leftDocs.freq(), rightDocs.freq());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * checks advancing docs\n   */\n  public void assertDocsSkipping(int docFreq, DocsEnum leftDocs, DocsEnum rightDocs, boolean hasFreqs) throws Exception {\n    if (leftDocs == null) {\n      assertNull(rightDocs);\n      return;\n    }\n    int docid = -1;\n    int averageGap = MAXDOC / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random().nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random().nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      if (hasFreqs) {\n        assertEquals(leftDocs.freq(), rightDocs.freq());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertDocsSkipping(int,DocsEnum,DocsEnum,boolean).mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/block/TestBlockPostingsFormat3#assertDocsSkipping(int,DocsEnum,DocsEnum,boolean).mjava","sourceNew":"  /**\n   * checks advancing docs\n   */\n  public void assertDocsSkipping(int docFreq, DocsEnum leftDocs, DocsEnum rightDocs, boolean hasFreqs) throws Exception {\n    if (leftDocs == null) {\n      assertNull(rightDocs);\n      return;\n    }\n    int docid = -1;\n    int averageGap = MAXDOC / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random().nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random().nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      if (hasFreqs) {\n        assertEquals(leftDocs.freq(), rightDocs.freq());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * checks advancing docs\n   */\n  public void assertDocsSkipping(int docFreq, DocsEnum leftDocs, DocsEnum rightDocs, boolean hasFreqs) throws Exception {\n    if (leftDocs == null) {\n      assertNull(rightDocs);\n      return;\n    }\n    int docid = -1;\n    int averageGap = MAXDOC / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random().nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random().nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      if (hasFreqs) {\n        assertEquals(leftDocs.freq(), rightDocs.freq());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2989b58779e186266a5d5ab0c6fc46096e68b848","date":1350919624,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertDocsSkipping(int,DocsEnum,DocsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertDocsSkipping(int,DocsEnum,DocsEnum,boolean).mjava","sourceNew":"  /**\n   * checks advancing docs\n   */\n  public void assertDocsSkipping(int docFreq, DocsEnum leftDocs, DocsEnum rightDocs) throws Exception {\n    if (leftDocs == null) {\n      assertNull(rightDocs);\n      return;\n    }\n    int docid = -1;\n    int averageGap = MAXDOC / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random().nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random().nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      // we don't assert freqs, they are allowed to be different\n    }\n  }\n\n","sourceOld":"  /**\n   * checks advancing docs\n   */\n  public void assertDocsSkipping(int docFreq, DocsEnum leftDocs, DocsEnum rightDocs, boolean hasFreqs) throws Exception {\n    if (leftDocs == null) {\n      assertNull(rightDocs);\n      return;\n    }\n    int docid = -1;\n    int averageGap = MAXDOC / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random().nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random().nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      if (hasFreqs) {\n        assertEquals(leftDocs.freq(), rightDocs.freq());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e52115b56781006682fd92c6938efaf174304d","date":1351014780,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertDocsSkipping(int,DocsEnum,DocsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertDocsSkipping(int,DocsEnum,DocsEnum,boolean).mjava","sourceNew":"  /**\n   * checks advancing docs\n   */\n  public void assertDocsSkipping(int docFreq, DocsEnum leftDocs, DocsEnum rightDocs) throws Exception {\n    if (leftDocs == null) {\n      assertNull(rightDocs);\n      return;\n    }\n    int docid = -1;\n    int averageGap = MAXDOC / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random().nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random().nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      // we don't assert freqs, they are allowed to be different\n    }\n  }\n\n","sourceOld":"  /**\n   * checks advancing docs\n   */\n  public void assertDocsSkipping(int docFreq, DocsEnum leftDocs, DocsEnum rightDocs, boolean hasFreqs) throws Exception {\n    if (leftDocs == null) {\n      assertNull(rightDocs);\n      return;\n    }\n    int docid = -1;\n    int averageGap = MAXDOC / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random().nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random().nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      if (hasFreqs) {\n        assertEquals(leftDocs.freq(), rightDocs.freq());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"62e52115b56781006682fd92c6938efaf174304d":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","2989b58779e186266a5d5ab0c6fc46096e68b848"],"2989b58779e186266a5d5ab0c6fc46096e68b848":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2989b58779e186266a5d5ab0c6fc46096e68b848"]},"commit2Childs":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["2989b58779e186266a5d5ab0c6fc46096e68b848","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"62e52115b56781006682fd92c6938efaf174304d":[],"2989b58779e186266a5d5ab0c6fc46096e68b848":["62e52115b56781006682fd92c6938efaf174304d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["62e52115b56781006682fd92c6938efaf174304d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["62e52115b56781006682fd92c6938efaf174304d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}