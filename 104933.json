{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestPrefixCompletionQuery#testAnalyzerNoPreservePosInc().mjava","commits":[{"id":"41279c9c61cefe411b381a57a01aa6e619a1015b","date":1528947344,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestPrefixCompletionQuery#testAnalyzerNoPreservePosInc().mjava","pathOld":"/dev/null","sourceNew":"  public void testAnalyzerNoPreservePosInc() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    CompletionAnalyzer completionAnalyzer = new CompletionAnalyzer(analyzer, true, false);\n    final String field = getTestName();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(completionAnalyzer, field));\n    Document document = new Document();\n    document.add(new SuggestField(field, \"foobar\", 7));\n    document.add(new SuggestField(field, \"foo bar\", 8));\n    document.add(new SuggestField(field, \"the fo\", 9));\n    document.add(new SuggestField(field, \"the foo bar\", 10));\n    document.add(new SuggestField(field, \"foo the bar\", 11)); // middle stopword\n    document.add(new SuggestField(field, \"baz the\", 12)); // trailing stopword\n\n    iw.addDocument(document);\n\n    // note we use the completionAnalyzer with the queries (instead of input analyzer) because of non-default settings\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n    CompletionQuery query = new PrefixCompletionQuery(completionAnalyzer, new Term(field, \"fo\"));\n    TopSuggestDocs suggest = indexSearcher.suggest(query, 9, false); //matches all with fo\n    assertSuggestions(suggest, new Entry(\"foo the bar\", 11), new Entry(\"the foo bar\", 10), new Entry(\"the fo\", 9), new Entry(\"foo bar\", 8), new Entry(\"foobar\", 7));\n    // with leading stopword\n    query = new PrefixCompletionQuery(completionAnalyzer, new Term(field, \"the fo\")); // becomes \"fo*\"\n    suggest = indexSearcher.suggest(query, 9, false);\n    assertSuggestions(suggest, new Entry(\"foo the bar\", 11), new Entry(\"the foo bar\", 10), new Entry(\"the fo\", 9), new Entry(\"foo bar\", 8), new Entry(\"foobar\", 7));\n    // with middle stopword\n    query = new PrefixCompletionQuery(completionAnalyzer, new Term(field, \"foo the bar\")); // becomes \"foo bar*\"\n    suggest = indexSearcher.suggest(query, 9, false);\n    assertSuggestions(suggest, new Entry(\"foo the bar\", 11), new Entry(\"the foo bar\", 10), new Entry(\"foo bar\", 8)); // no foobar\n    // no space\n    query = new PrefixCompletionQuery(completionAnalyzer, new Term(field, \"foob\"));\n    suggest = indexSearcher.suggest(query, 4, false); // separators, thus only match \"foobar\"\n    assertSuggestions(suggest, new Entry(\"foobar\", 7));\n    // surrounding stopwords\n    query = new PrefixCompletionQuery(completionAnalyzer, new Term(field, \"the baz the\")); // becomes \"baz*\"\n    suggest = indexSearcher.suggest(query, 4, false);// stopwords in query get removed so we match\n    assertSuggestions(suggest, new Entry(\"baz the\", 12));\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestPrefixCompletionQuery#testAnalyzerNoPreservePosInc().mjava","pathOld":"/dev/null","sourceNew":"  public void testAnalyzerNoPreservePosInc() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    CompletionAnalyzer completionAnalyzer = new CompletionAnalyzer(analyzer, true, false);\n    final String field = getTestName();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(completionAnalyzer, field));\n    Document document = new Document();\n    document.add(new SuggestField(field, \"foobar\", 7));\n    document.add(new SuggestField(field, \"foo bar\", 8));\n    document.add(new SuggestField(field, \"the fo\", 9));\n    document.add(new SuggestField(field, \"the foo bar\", 10));\n    document.add(new SuggestField(field, \"foo the bar\", 11)); // middle stopword\n    document.add(new SuggestField(field, \"baz the\", 12)); // trailing stopword\n\n    iw.addDocument(document);\n\n    // note we use the completionAnalyzer with the queries (instead of input analyzer) because of non-default settings\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n    CompletionQuery query = new PrefixCompletionQuery(completionAnalyzer, new Term(field, \"fo\"));\n    TopSuggestDocs suggest = indexSearcher.suggest(query, 9, false); //matches all with fo\n    assertSuggestions(suggest, new Entry(\"foo the bar\", 11), new Entry(\"the foo bar\", 10), new Entry(\"the fo\", 9), new Entry(\"foo bar\", 8), new Entry(\"foobar\", 7));\n    // with leading stopword\n    query = new PrefixCompletionQuery(completionAnalyzer, new Term(field, \"the fo\")); // becomes \"fo*\"\n    suggest = indexSearcher.suggest(query, 9, false);\n    assertSuggestions(suggest, new Entry(\"foo the bar\", 11), new Entry(\"the foo bar\", 10), new Entry(\"the fo\", 9), new Entry(\"foo bar\", 8), new Entry(\"foobar\", 7));\n    // with middle stopword\n    query = new PrefixCompletionQuery(completionAnalyzer, new Term(field, \"foo the bar\")); // becomes \"foo bar*\"\n    suggest = indexSearcher.suggest(query, 9, false);\n    assertSuggestions(suggest, new Entry(\"foo the bar\", 11), new Entry(\"the foo bar\", 10), new Entry(\"foo bar\", 8)); // no foobar\n    // no space\n    query = new PrefixCompletionQuery(completionAnalyzer, new Term(field, \"foob\"));\n    suggest = indexSearcher.suggest(query, 4, false); // separators, thus only match \"foobar\"\n    assertSuggestions(suggest, new Entry(\"foobar\", 7));\n    // surrounding stopwords\n    query = new PrefixCompletionQuery(completionAnalyzer, new Term(field, \"the baz the\")); // becomes \"baz*\"\n    suggest = indexSearcher.suggest(query, 4, false);// stopwords in query get removed so we match\n    assertSuggestions(suggest, new Entry(\"baz the\", 12));\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestPrefixCompletionQuery#testAnalyzerNoPreservePosInc().mjava","pathOld":"/dev/null","sourceNew":"  public void testAnalyzerNoPreservePosInc() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    CompletionAnalyzer completionAnalyzer = new CompletionAnalyzer(analyzer, true, false);\n    final String field = getTestName();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(completionAnalyzer, field));\n    Document document = new Document();\n    document.add(new SuggestField(field, \"foobar\", 7));\n    document.add(new SuggestField(field, \"foo bar\", 8));\n    document.add(new SuggestField(field, \"the fo\", 9));\n    document.add(new SuggestField(field, \"the foo bar\", 10));\n    document.add(new SuggestField(field, \"foo the bar\", 11)); // middle stopword\n    document.add(new SuggestField(field, \"baz the\", 12)); // trailing stopword\n\n    iw.addDocument(document);\n\n    // note we use the completionAnalyzer with the queries (instead of input analyzer) because of non-default settings\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n    CompletionQuery query = new PrefixCompletionQuery(completionAnalyzer, new Term(field, \"fo\"));\n    TopSuggestDocs suggest = indexSearcher.suggest(query, 9, false); //matches all with fo\n    assertSuggestions(suggest, new Entry(\"foo the bar\", 11), new Entry(\"the foo bar\", 10), new Entry(\"the fo\", 9), new Entry(\"foo bar\", 8), new Entry(\"foobar\", 7));\n    // with leading stopword\n    query = new PrefixCompletionQuery(completionAnalyzer, new Term(field, \"the fo\")); // becomes \"fo*\"\n    suggest = indexSearcher.suggest(query, 9, false);\n    assertSuggestions(suggest, new Entry(\"foo the bar\", 11), new Entry(\"the foo bar\", 10), new Entry(\"the fo\", 9), new Entry(\"foo bar\", 8), new Entry(\"foobar\", 7));\n    // with middle stopword\n    query = new PrefixCompletionQuery(completionAnalyzer, new Term(field, \"foo the bar\")); // becomes \"foo bar*\"\n    suggest = indexSearcher.suggest(query, 9, false);\n    assertSuggestions(suggest, new Entry(\"foo the bar\", 11), new Entry(\"the foo bar\", 10), new Entry(\"foo bar\", 8)); // no foobar\n    // no space\n    query = new PrefixCompletionQuery(completionAnalyzer, new Term(field, \"foob\"));\n    suggest = indexSearcher.suggest(query, 4, false); // separators, thus only match \"foobar\"\n    assertSuggestions(suggest, new Entry(\"foobar\", 7));\n    // surrounding stopwords\n    query = new PrefixCompletionQuery(completionAnalyzer, new Term(field, \"the baz the\")); // becomes \"baz*\"\n    suggest = indexSearcher.suggest(query, 4, false);// stopwords in query get removed so we match\n    assertSuggestions(suggest, new Entry(\"baz the\", 12));\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","41279c9c61cefe411b381a57a01aa6e619a1015b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["41279c9c61cefe411b381a57a01aa6e619a1015b"],"41279c9c61cefe411b381a57a01aa6e619a1015b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","41279c9c61cefe411b381a57a01aa6e619a1015b"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","41279c9c61cefe411b381a57a01aa6e619a1015b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"41279c9c61cefe411b381a57a01aa6e619a1015b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}