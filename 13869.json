{"path":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#nextPosition().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#nextPosition().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      if (posSeekPending) {\n        posIndex.seek(posReader);\n        payloadIn.seek(payloadOffset);\n        posSeekPending = false;\n      }\n\n      // scan over any docs that were iterated without their\n      // positions\n      while (pendingPosCount > freq) {\n        final int code = posReader.next();\n        if (storePayloads) {\n          if ((code & 1) != 0) {\n            // Payload length has changed\n            payloadLength = posReader.next();\n            assert payloadLength >= 0;\n          }\n        }\n        pendingPosCount--;\n        payloadPending = true;\n        position = 0;\n        pendingPayloadBytes += payloadLength;\n      }\n\n      final int code = posReader.next();\n      if (storePayloads) {\n        if ((code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        position += code >> 1;\n      } else {\n        position += code;\n      }\n    \n      pendingPayloadBytes += payloadLength;\n      payloadPending = payloadLength > 0;\n      pendingPosCount--;\n      payloadPending = true;\n      assert pendingPosCount >= 0;\n      return position;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1860eebb3dff901d87a6c00a35d93e4966155ad1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8","date":1281277545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      if (posSeekPending) {\n        posIndex.seek(posReader);\n        payloadIn.seek(payloadOffset);\n        posSeekPending = false;\n      }\n\n      // scan over any docs that were iterated without their\n      // positions\n      while (pendingPosCount > freq) {\n        final int code = posReader.next();\n        if (storePayloads && (code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        pendingPosCount--;\n        payloadPending = true;\n        position = 0;\n        pendingPayloadBytes += payloadLength;\n      }\n\n      final int code = posReader.next();\n      if (storePayloads) {\n        if ((code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        position += code >> 1;\n      } else {\n        position += code;\n      }\n    \n      pendingPayloadBytes += payloadLength;\n      payloadPending = payloadLength > 0;\n      pendingPosCount--;\n      payloadPending = true;\n      assert pendingPosCount >= 0;\n      return position;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      if (posSeekPending) {\n        posIndex.seek(posReader);\n        payloadIn.seek(payloadOffset);\n        posSeekPending = false;\n      }\n\n      // scan over any docs that were iterated without their\n      // positions\n      while (pendingPosCount > freq) {\n        final int code = posReader.next();\n        if (storePayloads) {\n          if ((code & 1) != 0) {\n            // Payload length has changed\n            payloadLength = posReader.next();\n            assert payloadLength >= 0;\n          }\n        }\n        pendingPosCount--;\n        payloadPending = true;\n        position = 0;\n        pendingPayloadBytes += payloadLength;\n      }\n\n      final int code = posReader.next();\n      if (storePayloads) {\n        if ((code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        position += code >> 1;\n      } else {\n        position += code;\n      }\n    \n      pendingPayloadBytes += payloadLength;\n      payloadPending = payloadLength > 0;\n      pendingPosCount--;\n      payloadPending = true;\n      assert pendingPosCount >= 0;\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0638cded77f278f667f33442bd4a132d484068d1","date":1286833084,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      if (posSeekPending) {\n        posIndex.seek(posReader);\n        payloadIn.seek(payloadOffset);\n        posSeekPending = false;\n      }\n\n      // scan over any docs that were iterated without their\n      // positions\n      while (pendingPosCount > freq) {\n        final int code = posReader.next();\n        if (storePayloads && (code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        pendingPosCount--;\n        position = 0;\n        pendingPayloadBytes += payloadLength;\n      }\n\n      final int code = posReader.next();\n      if (storePayloads) {\n        if ((code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        position += code >> 1;\n        pendingPayloadBytes += payloadLength;\n        payloadPending = payloadLength > 0;\n      } else {\n        position += code;\n      }\n    \n      pendingPosCount--;\n      assert pendingPosCount >= 0;\n      return position;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      if (posSeekPending) {\n        posIndex.seek(posReader);\n        payloadIn.seek(payloadOffset);\n        posSeekPending = false;\n      }\n\n      // scan over any docs that were iterated without their\n      // positions\n      while (pendingPosCount > freq) {\n        final int code = posReader.next();\n        if (storePayloads && (code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        pendingPosCount--;\n        payloadPending = true;\n        position = 0;\n        pendingPayloadBytes += payloadLength;\n      }\n\n      final int code = posReader.next();\n      if (storePayloads) {\n        if ((code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        position += code >> 1;\n      } else {\n        position += code;\n      }\n    \n      pendingPayloadBytes += payloadLength;\n      payloadPending = payloadLength > 0;\n      pendingPosCount--;\n      payloadPending = true;\n      assert pendingPosCount >= 0;\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      if (posSeekPending) {\n        posIndex.seek(posReader);\n        payloadIn.seek(payloadOffset);\n        posSeekPending = false;\n      }\n\n      // scan over any docs that were iterated without their\n      // positions\n      while (pendingPosCount > freq) {\n        final int code = posReader.next();\n        if (storePayloads && (code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        pendingPosCount--;\n        position = 0;\n        pendingPayloadBytes += payloadLength;\n      }\n\n      final int code = posReader.next();\n      if (storePayloads) {\n        if ((code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        position += code >> 1;\n        pendingPayloadBytes += payloadLength;\n        payloadPending = payloadLength > 0;\n      } else {\n        position += code;\n      }\n    \n      pendingPosCount--;\n      assert pendingPosCount >= 0;\n      return position;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      if (posSeekPending) {\n        posIndex.seek(posReader);\n        payloadIn.seek(payloadOffset);\n        posSeekPending = false;\n      }\n\n      // scan over any docs that were iterated without their\n      // positions\n      while (pendingPosCount > freq) {\n        final int code = posReader.next();\n        if (storePayloads) {\n          if ((code & 1) != 0) {\n            // Payload length has changed\n            payloadLength = posReader.next();\n            assert payloadLength >= 0;\n          }\n        }\n        pendingPosCount--;\n        payloadPending = true;\n        position = 0;\n        pendingPayloadBytes += payloadLength;\n      }\n\n      final int code = posReader.next();\n      if (storePayloads) {\n        if ((code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        position += code >> 1;\n      } else {\n        position += code;\n      }\n    \n      pendingPayloadBytes += payloadLength;\n      payloadPending = payloadLength > 0;\n      pendingPosCount--;\n      payloadPending = true;\n      assert pendingPosCount >= 0;\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      if (posSeekPending) {\n        posIndex.seek(posReader);\n        payloadIn.seek(payloadOffset);\n        posSeekPending = false;\n      }\n\n      // scan over any docs that were iterated without their\n      // positions\n      while (pendingPosCount > freq) {\n        final int code = posReader.next();\n        if (storePayloads && (code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        pendingPosCount--;\n        position = 0;\n        pendingPayloadBytes += payloadLength;\n      }\n\n      final int code = posReader.next();\n      assert code >= 0;\n      if (storePayloads) {\n        if ((code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        position += code >> 1;\n        pendingPayloadBytes += payloadLength;\n        payloadPending = payloadLength > 0;\n      } else {\n        position += code;\n      }\n    \n      pendingPosCount--;\n      assert pendingPosCount >= 0;\n      return position;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      if (posSeekPending) {\n        posIndex.seek(posReader);\n        payloadIn.seek(payloadOffset);\n        posSeekPending = false;\n      }\n\n      // scan over any docs that were iterated without their\n      // positions\n      while (pendingPosCount > freq) {\n        final int code = posReader.next();\n        if (storePayloads && (code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        pendingPosCount--;\n        position = 0;\n        pendingPayloadBytes += payloadLength;\n      }\n\n      final int code = posReader.next();\n      if (storePayloads) {\n        if ((code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        position += code >> 1;\n        pendingPayloadBytes += payloadLength;\n        payloadPending = payloadLength > 0;\n      } else {\n        position += code;\n      }\n    \n      pendingPosCount--;\n      assert pendingPosCount >= 0;\n      return position;\n    }\n\n","bugFix":null,"bugIntro":["1860eebb3dff901d87a6c00a35d93e4966155ad1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      if (posSeekPending) {\n        posIndex.seek(posReader);\n        payloadIn.seek(payloadOffset);\n        posSeekPending = false;\n      }\n\n      // scan over any docs that were iterated without their\n      // positions\n      while (pendingPosCount > freq) {\n        final int code = posReader.next();\n        if (storePayloads && (code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        pendingPosCount--;\n        position = 0;\n        pendingPayloadBytes += payloadLength;\n      }\n\n      final int code = posReader.next();\n      assert code >= 0;\n      if (storePayloads) {\n        if ((code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        position += code >> 1;\n        pendingPayloadBytes += payloadLength;\n        payloadPending = payloadLength > 0;\n      } else {\n        position += code;\n      }\n    \n      pendingPosCount--;\n      assert pendingPosCount >= 0;\n      return position;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      if (posSeekPending) {\n        posIndex.seek(posReader);\n        payloadIn.seek(payloadOffset);\n        posSeekPending = false;\n      }\n\n      // scan over any docs that were iterated without their\n      // positions\n      while (pendingPosCount > freq) {\n        final int code = posReader.next();\n        if (storePayloads && (code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        pendingPosCount--;\n        position = 0;\n        pendingPayloadBytes += payloadLength;\n      }\n\n      final int code = posReader.next();\n      if (storePayloads) {\n        if ((code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        position += code >> 1;\n        pendingPayloadBytes += payloadLength;\n        payloadPending = payloadLength > 0;\n      } else {\n        position += code;\n      }\n    \n      pendingPosCount--;\n      assert pendingPosCount >= 0;\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      if (posSeekPending) {\n        posIndex.seek(posReader);\n        payloadIn.seek(payloadOffset);\n        posSeekPending = false;\n      }\n\n      // scan over any docs that were iterated without their\n      // positions\n      while (pendingPosCount > freq) {\n        final int code = posReader.next();\n        if (storePayloads && (code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        pendingPosCount--;\n        position = 0;\n        pendingPayloadBytes += payloadLength;\n      }\n\n      final int code = posReader.next();\n      assert code >= 0;\n      if (storePayloads) {\n        if ((code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        position += code >> 1;\n        pendingPayloadBytes += payloadLength;\n        payloadPending = payloadLength > 0;\n      } else {\n        position += code;\n      }\n    \n      pendingPosCount--;\n      assert pendingPosCount >= 0;\n      return position;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      if (posSeekPending) {\n        posIndex.seek(posReader);\n        payloadIn.seek(payloadOffset);\n        posSeekPending = false;\n      }\n\n      // scan over any docs that were iterated without their\n      // positions\n      while (pendingPosCount > freq) {\n        final int code = posReader.next();\n        if (storePayloads && (code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        pendingPosCount--;\n        position = 0;\n        pendingPayloadBytes += payloadLength;\n      }\n\n      final int code = posReader.next();\n      if (storePayloads) {\n        if ((code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        position += code >> 1;\n        pendingPayloadBytes += payloadLength;\n        payloadPending = payloadLength > 0;\n      } else {\n        position += code;\n      }\n    \n      pendingPosCount--;\n      assert pendingPosCount >= 0;\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      if (posSeekPending) {\n        posIndex.seek(posReader);\n        payloadIn.seek(payloadFP);\n        posSeekPending = false;\n      }\n\n      // scan over any docs that were iterated without their\n      // positions\n      while (pendingPosCount > freq) {\n        final int code = posReader.next();\n        if (storePayloads && (code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        pendingPosCount--;\n        position = 0;\n        pendingPayloadBytes += payloadLength;\n      }\n\n      final int code = posReader.next();\n      assert code >= 0;\n      if (storePayloads) {\n        if ((code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        position += code >> 1;\n        pendingPayloadBytes += payloadLength;\n        payloadPending = payloadLength > 0;\n      } else {\n        position += code;\n      }\n    \n      pendingPosCount--;\n      assert pendingPosCount >= 0;\n      return position;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      if (posSeekPending) {\n        posIndex.seek(posReader);\n        payloadIn.seek(payloadOffset);\n        posSeekPending = false;\n      }\n\n      // scan over any docs that were iterated without their\n      // positions\n      while (pendingPosCount > freq) {\n        final int code = posReader.next();\n        if (storePayloads && (code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        pendingPosCount--;\n        position = 0;\n        pendingPayloadBytes += payloadLength;\n      }\n\n      final int code = posReader.next();\n      assert code >= 0;\n      if (storePayloads) {\n        if ((code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        position += code >> 1;\n        pendingPayloadBytes += payloadLength;\n        payloadPending = payloadLength > 0;\n      } else {\n        position += code;\n      }\n    \n      pendingPosCount--;\n      assert pendingPosCount >= 0;\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      if (posSeekPending) {\n        posIndex.seek(posReader);\n        payloadIn.seek(payloadFP);\n        posSeekPending = false;\n      }\n\n      // scan over any docs that were iterated without their\n      // positions\n      while (pendingPosCount > freq) {\n        final int code = posReader.next();\n        if (storePayloads && (code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        pendingPosCount--;\n        position = 0;\n        pendingPayloadBytes += payloadLength;\n      }\n\n      final int code = posReader.next();\n      assert code >= 0;\n      if (storePayloads) {\n        if ((code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        position += code >> 1;\n        pendingPayloadBytes += payloadLength;\n        payloadPending = payloadLength > 0;\n      } else {\n        position += code;\n      }\n    \n      pendingPosCount--;\n      assert pendingPosCount >= 0;\n      return position;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      if (posSeekPending) {\n        posIndex.seek(posReader);\n        payloadIn.seek(payloadOffset);\n        posSeekPending = false;\n      }\n\n      // scan over any docs that were iterated without their\n      // positions\n      while (pendingPosCount > freq) {\n        final int code = posReader.next();\n        if (storePayloads && (code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        pendingPosCount--;\n        position = 0;\n        pendingPayloadBytes += payloadLength;\n      }\n\n      final int code = posReader.next();\n      assert code >= 0;\n      if (storePayloads) {\n        if ((code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        position += code >> 1;\n        pendingPayloadBytes += payloadLength;\n        payloadPending = payloadLength > 0;\n      } else {\n        position += code;\n      }\n    \n      pendingPosCount--;\n      assert pendingPosCount >= 0;\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      if (posSeekPending) {\n        posIndex.seek(posReader);\n        payloadIn.seek(payloadFP);\n        posSeekPending = false;\n      }\n\n      // scan over any docs that were iterated without their\n      // positions\n      while (pendingPosCount > freq) {\n        final int code = posReader.next();\n        if (storePayloads && (code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        pendingPosCount--;\n        position = 0;\n        pendingPayloadBytes += payloadLength;\n      }\n\n      final int code = posReader.next();\n      assert code >= 0;\n      if (storePayloads) {\n        if ((code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        position += code >> 1;\n        pendingPayloadBytes += payloadLength;\n        payloadPending = payloadLength > 0;\n      } else {\n        position += code;\n      }\n    \n      pendingPosCount--;\n      assert pendingPosCount >= 0;\n      return position;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      if (posSeekPending) {\n        posIndex.seek(posReader);\n        payloadIn.seek(payloadOffset);\n        posSeekPending = false;\n      }\n\n      // scan over any docs that were iterated without their\n      // positions\n      while (pendingPosCount > freq) {\n        final int code = posReader.next();\n        if (storePayloads && (code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        pendingPosCount--;\n        position = 0;\n        pendingPayloadBytes += payloadLength;\n      }\n\n      final int code = posReader.next();\n      assert code >= 0;\n      if (storePayloads) {\n        if ((code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        position += code >> 1;\n        pendingPayloadBytes += payloadLength;\n        payloadPending = payloadLength > 0;\n      } else {\n        position += code;\n      }\n    \n      pendingPosCount--;\n      assert pendingPosCount >= 0;\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReader.SepDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      if (posSeekPending) {\n        posIndex.seek(posReader);\n        payloadIn.seek(payloadFP);\n        posSeekPending = false;\n      }\n\n      // scan over any docs that were iterated without their\n      // positions\n      while (pendingPosCount > freq) {\n        final int code = posReader.next();\n        if (storePayloads && (code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        pendingPosCount--;\n        position = 0;\n        pendingPayloadBytes += payloadLength;\n      }\n\n      final int code = posReader.next();\n      assert code >= 0;\n      if (storePayloads) {\n        if ((code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        position += code >> 1;\n        pendingPayloadBytes += payloadLength;\n        payloadPending = payloadLength > 0;\n      } else {\n        position += code;\n      }\n    \n      pendingPosCount--;\n      assert pendingPosCount >= 0;\n      return position;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      if (posSeekPending) {\n        posIndex.seek(posReader);\n        payloadIn.seek(payloadFP);\n        posSeekPending = false;\n      }\n\n      // scan over any docs that were iterated without their\n      // positions\n      while (pendingPosCount > freq) {\n        final int code = posReader.next();\n        if (storePayloads && (code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        pendingPosCount--;\n        position = 0;\n        pendingPayloadBytes += payloadLength;\n      }\n\n      final int code = posReader.next();\n      assert code >= 0;\n      if (storePayloads) {\n        if ((code & 1) != 0) {\n          // Payload length has changed\n          payloadLength = posReader.next();\n          assert payloadLength >= 0;\n        }\n        position += code >> 1;\n        pendingPayloadBytes += payloadLength;\n        payloadPending = payloadLength > 0;\n      } else {\n        position += code;\n      }\n    \n      pendingPosCount--;\n      assert pendingPosCount >= 0;\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"70ad682703b8585f5d0a637efec044d57ec05efb":["0638cded77f278f667f33442bd4a132d484068d1","56da903869515527852ee21ea7ef7bfe414cd40d"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["56da903869515527852ee21ea7ef7bfe414cd40d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","0638cded77f278f667f33442bd4a132d484068d1"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","b1add9ddc0005b07550d4350720aac22dc9886b3"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"56da903869515527852ee21ea7ef7bfe414cd40d":["0638cded77f278f667f33442bd4a132d484068d1"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"0638cded77f278f667f33442bd4a132d484068d1":["03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8"]},"commit2Childs":{"03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8":["0638cded77f278f667f33442bd4a132d484068d1"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["e79a6d080bdd5b2a8f56342cf571b5476de04180","60ba444201d2570214b6fcf1d15600dc1a01f548","29ef99d61cda9641b6250bf9567329a6e65f901d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"60ba444201d2570214b6fcf1d15600dc1a01f548":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","b1add9ddc0005b07550d4350720aac22dc9886b3","868da859b43505d9d2a023bfeae6dd0c795f5295"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"0638cded77f278f667f33442bd4a132d484068d1":["70ad682703b8585f5d0a637efec044d57ec05efb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e79a6d080bdd5b2a8f56342cf571b5476de04180","29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}