{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseHttpClusterStateProvider#fetchClusterState(SolrClient,String,Map[String,Object]).mjava","commits":[{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseHttpClusterStateProvider#fetchClusterState(SolrClient,String,Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClusterStateProvider#fetchClusterState(SolrClient,String,Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n  private ClusterState fetchClusterState(SolrClient client, String collection, Map<String, Object> clusterProperties) throws SolrServerException, IOException, NotACollectionException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (collection != null) {\n      params.set(\"collection\", collection);\n    }\n    params.set(\"action\", \"CLUSTERSTATUS\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    NamedList cluster = (SimpleOrderedMap) client.request(request).get(\"cluster\");\n    Map<String, Object> collectionsMap;\n    if (collection != null) {\n      collectionsMap = Collections.singletonMap(collection,\n          ((NamedList) cluster.get(\"collections\")).get(collection));\n    } else {\n      collectionsMap = ((NamedList)cluster.get(\"collections\")).asMap(10);\n    }\n    int znodeVersion;\n    Map<String, Object> collFromStatus = (Map<String, Object>) (collectionsMap).get(collection);\n    if (collection != null && collFromStatus == null) {\n      throw new NotACollectionException(); // probably an alias\n    }\n    if (collection != null) { // can be null if alias\n      znodeVersion =  (int) collFromStatus.get(\"znodeVersion\");\n    } else {\n      znodeVersion = -1;\n    }\n    Set<String> liveNodes = new HashSet((List<String>)(cluster.get(\"live_nodes\")));\n    this.liveNodes = liveNodes;\n    liveNodesTimestamp = System.nanoTime();\n    //TODO SOLR-11877 we don't know the znode path; CLUSTER_STATE is probably wrong leading to bad stateFormat\n    ClusterState cs = ClusterState.load(znodeVersion, collectionsMap, liveNodes, ZkStateReader.CLUSTER_STATE);\n    if (clusterProperties != null) {\n      Map<String, Object> properties = (Map<String, Object>) cluster.get(\"properties\");\n      if (properties != null) {\n        clusterProperties.putAll(properties);\n      }\n    }\n    return cs;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n  private ClusterState fetchClusterState(SolrClient client, String collection, Map<String, Object> clusterProperties) throws SolrServerException, IOException, NotACollectionException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (collection != null) {\n      params.set(\"collection\", collection);\n    }\n    params.set(\"action\", \"CLUSTERSTATUS\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    NamedList cluster = (SimpleOrderedMap) client.request(request).get(\"cluster\");\n    Map<String, Object> collectionsMap;\n    if (collection != null) {\n      collectionsMap = Collections.singletonMap(collection,\n          ((NamedList) cluster.get(\"collections\")).get(collection));\n    } else {\n      collectionsMap = ((NamedList)cluster.get(\"collections\")).asMap(10);\n    }\n    int znodeVersion;\n    Map<String, Object> collFromStatus = (Map<String, Object>) (collectionsMap).get(collection);\n    if (collection != null && collFromStatus == null) {\n      throw new NotACollectionException(); // probably an alias\n    }\n    if (collection != null) { // can be null if alias\n      znodeVersion =  (int) collFromStatus.get(\"znodeVersion\");\n    } else {\n      znodeVersion = -1;\n    }\n    Set<String> liveNodes = new HashSet((List<String>)(cluster.get(\"live_nodes\")));\n    this.liveNodes = liveNodes;\n    liveNodesTimestamp = System.nanoTime();\n    //TODO SOLR-11877 we don't know the znode path; CLUSTER_STATE is probably wrong leading to bad stateFormat\n    ClusterState cs = ClusterState.load(znodeVersion, collectionsMap, liveNodes, ZkStateReader.CLUSTER_STATE);\n    if (clusterProperties != null) {\n      Map<String, Object> properties = (Map<String, Object>) cluster.get(\"properties\");\n      if (properties != null) {\n        clusterProperties.putAll(properties);\n      }\n    }\n    return cs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseHttpClusterStateProvider#fetchClusterState(SolrClient,String,Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseHttpClusterStateProvider#fetchClusterState(SolrClient,String,Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n  private ClusterState fetchClusterState(SolrClient client, String collection, Map<String, Object> clusterProperties) throws SolrServerException, IOException, NotACollectionException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (collection != null) {\n      params.set(\"collection\", collection);\n    }\n    params.set(\"action\", \"CLUSTERSTATUS\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    NamedList cluster = (SimpleOrderedMap) client.request(request).get(\"cluster\");\n    Map<String, Object> collectionsMap;\n    if (collection != null) {\n      collectionsMap = Collections.singletonMap(collection,\n          ((NamedList) cluster.get(\"collections\")).get(collection));\n    } else {\n      collectionsMap = ((NamedList)cluster.get(\"collections\")).asMap(10);\n    }\n    int znodeVersion;\n    Map<String, Object> collFromStatus = (Map<String, Object>) (collectionsMap).get(collection);\n    if (collection != null && collFromStatus == null) {\n      throw new NotACollectionException(); // probably an alias\n    }\n    if (collection != null) { // can be null if alias\n      znodeVersion =  (int) collFromStatus.get(\"znodeVersion\");\n    } else {\n      znodeVersion = -1;\n    }\n    Set<String> liveNodes = new HashSet((List<String>)(cluster.get(\"live_nodes\")));\n    this.liveNodes = liveNodes;\n    liveNodesTimestamp = System.nanoTime();\n    ClusterState cs = ClusterState.createFromCollectionMap(znodeVersion, collectionsMap, liveNodes);\n    if (clusterProperties != null) {\n      Map<String, Object> properties = (Map<String, Object>) cluster.get(\"properties\");\n      if (properties != null) {\n        clusterProperties.putAll(properties);\n      }\n    }\n    return cs;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n  private ClusterState fetchClusterState(SolrClient client, String collection, Map<String, Object> clusterProperties) throws SolrServerException, IOException, NotACollectionException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (collection != null) {\n      params.set(\"collection\", collection);\n    }\n    params.set(\"action\", \"CLUSTERSTATUS\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    NamedList cluster = (SimpleOrderedMap) client.request(request).get(\"cluster\");\n    Map<String, Object> collectionsMap;\n    if (collection != null) {\n      collectionsMap = Collections.singletonMap(collection,\n          ((NamedList) cluster.get(\"collections\")).get(collection));\n    } else {\n      collectionsMap = ((NamedList)cluster.get(\"collections\")).asMap(10);\n    }\n    int znodeVersion;\n    Map<String, Object> collFromStatus = (Map<String, Object>) (collectionsMap).get(collection);\n    if (collection != null && collFromStatus == null) {\n      throw new NotACollectionException(); // probably an alias\n    }\n    if (collection != null) { // can be null if alias\n      znodeVersion =  (int) collFromStatus.get(\"znodeVersion\");\n    } else {\n      znodeVersion = -1;\n    }\n    Set<String> liveNodes = new HashSet((List<String>)(cluster.get(\"live_nodes\")));\n    this.liveNodes = liveNodes;\n    liveNodesTimestamp = System.nanoTime();\n    //TODO SOLR-11877 we don't know the znode path; CLUSTER_STATE is probably wrong leading to bad stateFormat\n    ClusterState cs = ClusterState.load(znodeVersion, collectionsMap, liveNodes, ZkStateReader.CLUSTER_STATE);\n    if (clusterProperties != null) {\n      Map<String, Object> properties = (Map<String, Object>) cluster.get(\"properties\");\n      if (properties != null) {\n        clusterProperties.putAll(properties);\n      }\n    }\n    return cs;\n  }\n\n","bugFix":["f0b0975fa00d588fea494a987c39ea9f2dabcb96","6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d","date":1592006776,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseHttpClusterStateProvider#fetchClusterState(SolrClient,String,Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseHttpClusterStateProvider#fetchClusterState(SolrClient,String,Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  private ClusterState fetchClusterState(SolrClient client, String collection, Map<String, Object> clusterProperties) throws SolrServerException, IOException, NotACollectionException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (collection != null) {\n      params.set(\"collection\", collection);\n    }\n    params.set(\"action\", \"CLUSTERSTATUS\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    NamedList cluster = (SimpleOrderedMap) client.request(request).get(\"cluster\");\n    Map<String, Object> collectionsMap;\n    if (collection != null) {\n      collectionsMap = Collections.singletonMap(collection,\n          ((NamedList) cluster.get(\"collections\")).get(collection));\n    } else {\n      collectionsMap = ((NamedList)cluster.get(\"collections\")).asMap(10);\n    }\n    int znodeVersion;\n    Map<String, Object> collFromStatus = (Map<String, Object>) (collectionsMap).get(collection);\n    if (collection != null && collFromStatus == null) {\n      throw new NotACollectionException(); // probably an alias\n    }\n    if (collection != null) { // can be null if alias\n      znodeVersion =  (int) collFromStatus.get(\"znodeVersion\");\n    } else {\n      znodeVersion = -1;\n    }\n    Set<String> liveNodes = new HashSet((List<String>)(cluster.get(\"live_nodes\")));\n    this.liveNodes = liveNodes;\n    liveNodesTimestamp = System.nanoTime();\n    ClusterState cs = ClusterState.createFromCollectionMap(znodeVersion, collectionsMap, liveNodes);\n    if (clusterProperties != null) {\n      Map<String, Object> properties = (Map<String, Object>) cluster.get(\"properties\");\n      if (properties != null) {\n        clusterProperties.putAll(properties);\n      }\n    }\n    return cs;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n  private ClusterState fetchClusterState(SolrClient client, String collection, Map<String, Object> clusterProperties) throws SolrServerException, IOException, NotACollectionException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (collection != null) {\n      params.set(\"collection\", collection);\n    }\n    params.set(\"action\", \"CLUSTERSTATUS\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    NamedList cluster = (SimpleOrderedMap) client.request(request).get(\"cluster\");\n    Map<String, Object> collectionsMap;\n    if (collection != null) {\n      collectionsMap = Collections.singletonMap(collection,\n          ((NamedList) cluster.get(\"collections\")).get(collection));\n    } else {\n      collectionsMap = ((NamedList)cluster.get(\"collections\")).asMap(10);\n    }\n    int znodeVersion;\n    Map<String, Object> collFromStatus = (Map<String, Object>) (collectionsMap).get(collection);\n    if (collection != null && collFromStatus == null) {\n      throw new NotACollectionException(); // probably an alias\n    }\n    if (collection != null) { // can be null if alias\n      znodeVersion =  (int) collFromStatus.get(\"znodeVersion\");\n    } else {\n      znodeVersion = -1;\n    }\n    Set<String> liveNodes = new HashSet((List<String>)(cluster.get(\"live_nodes\")));\n    this.liveNodes = liveNodes;\n    liveNodesTimestamp = System.nanoTime();\n    ClusterState cs = ClusterState.createFromCollectionMap(znodeVersion, collectionsMap, liveNodes);\n    if (clusterProperties != null) {\n      Map<String, Object> properties = (Map<String, Object>) cluster.get(\"properties\");\n      if (properties != null) {\n        clusterProperties.putAll(properties);\n      }\n    }\n    return cs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}