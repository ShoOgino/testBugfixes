{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testSortOnMerge(boolean).mjava","commits":[{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testSortOnMerge(boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void testSortOnMerge(boolean withDeletes) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(new SimpleTextCodec()); // nocommit only simple-text supports sorting so far\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    final int numDocs = atLeast(200);\n    final FixedBitSet deleted = new FixedBitSet(numDocs);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"foo\", random().nextInt(20)));\n      doc.add(new StringField(\"id\", Integer.toString(i), Store.YES));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      w.addDocument(doc);\n      if (random().nextInt(5) == 0) {\n        w.getReader().close();\n      } else if (random().nextInt(30) == 0) {\n        w.forceMerge(2);\n      } else if (random().nextInt(4) == 0) {\n        final int id = TestUtil.nextInt(random(), 0, i);\n        deleted.set(id);\n        w.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n      }\n    }\n\n    // Check that segments are sorted\n    DirectoryReader reader = w.getReader();\n    for (LeafReaderContext ctx : reader.leaves()) {\n      final SegmentReader leaf = (SegmentReader) ctx.reader();\n      SegmentInfo info = leaf.getSegmentInfo().info;\n      switch (info.getDiagnostics().get(IndexWriter.SOURCE)) {\n        case IndexWriter.SOURCE_FLUSH:\n          assertNull(info.getIndexSort());\n          break;\n        case IndexWriter.SOURCE_MERGE:\n          assertEquals(indexSort, info.getIndexSort());\n          final NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n          long previous = Long.MIN_VALUE;\n          for (int i = 0; i < leaf.maxDoc(); ++i) {\n            final long value = values.get(i);\n            assertTrue(value >= previous);\n            previous = value;\n          }\n          break;\n        default:\n          fail();\n      }\n    }\n\n    // Now check that the index is consistent\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      TermQuery termQuery = new TermQuery(new Term(\"id\", Integer.toString(i)));\n      final TopDocs topDocs = searcher.search(termQuery, 1);\n      if (deleted.get(i)) {\n        assertEquals(0, topDocs.totalHits);\n      } else {\n        assertEquals(1, topDocs.totalHits);\n        assertEquals(i, MultiDocValues.getNumericValues(reader, \"id\").get(topDocs.scoreDocs[0].doc));\n        Document document = reader.document(topDocs.scoreDocs[0].doc);\n        assertEquals(Integer.toString(i), document.get(\"id\"));\n      }\n    }\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8","date":1462567286,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testSortOnMerge(boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testSortOnMerge(boolean).mjava","sourceNew":"  public void testSortOnMerge(boolean withDeletes) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    final int numDocs = atLeast(1000);\n    final FixedBitSet deleted = new FixedBitSet(numDocs);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"foo\", random().nextInt(20)));\n      doc.add(new StringField(\"id\", Integer.toString(i), Store.YES));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      w.addDocument(doc);\n      if (random().nextInt(5) == 0) {\n        w.getReader().close();\n      } else if (random().nextInt(30) == 0) {\n        w.forceMerge(2);\n      } else if (random().nextInt(4) == 0) {\n        final int id = TestUtil.nextInt(random(), 0, i);\n        deleted.set(id);\n        w.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n      }\n    }\n\n    // Check that segments are sorted\n    DirectoryReader reader = w.getReader();\n    for (LeafReaderContext ctx : reader.leaves()) {\n      final SegmentReader leaf = (SegmentReader) ctx.reader();\n      SegmentInfo info = leaf.getSegmentInfo().info;\n      switch (info.getDiagnostics().get(IndexWriter.SOURCE)) {\n        case IndexWriter.SOURCE_FLUSH:\n          assertNull(info.getIndexSort());\n          break;\n        case IndexWriter.SOURCE_MERGE:\n          assertEquals(indexSort, info.getIndexSort());\n          final NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n          long previous = Long.MIN_VALUE;\n          for (int i = 0; i < leaf.maxDoc(); ++i) {\n            final long value = values.get(i);\n            assertTrue(value >= previous);\n            previous = value;\n          }\n          break;\n        default:\n          fail();\n      }\n    }\n\n    // Now check that the index is consistent\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      TermQuery termQuery = new TermQuery(new Term(\"id\", Integer.toString(i)));\n      final TopDocs topDocs = searcher.search(termQuery, 1);\n      if (deleted.get(i)) {\n        assertEquals(0, topDocs.totalHits);\n      } else {\n        assertEquals(1, topDocs.totalHits);\n        assertEquals(i, MultiDocValues.getNumericValues(reader, \"id\").get(topDocs.scoreDocs[0].doc));\n        Document document = reader.document(topDocs.scoreDocs[0].doc);\n        assertEquals(Integer.toString(i), document.get(\"id\"));\n      }\n    }\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSortOnMerge(boolean withDeletes) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setCodec(new SimpleTextCodec()); // nocommit only simple-text supports sorting so far\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    final int numDocs = atLeast(200);\n    final FixedBitSet deleted = new FixedBitSet(numDocs);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"foo\", random().nextInt(20)));\n      doc.add(new StringField(\"id\", Integer.toString(i), Store.YES));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      w.addDocument(doc);\n      if (random().nextInt(5) == 0) {\n        w.getReader().close();\n      } else if (random().nextInt(30) == 0) {\n        w.forceMerge(2);\n      } else if (random().nextInt(4) == 0) {\n        final int id = TestUtil.nextInt(random(), 0, i);\n        deleted.set(id);\n        w.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n      }\n    }\n\n    // Check that segments are sorted\n    DirectoryReader reader = w.getReader();\n    for (LeafReaderContext ctx : reader.leaves()) {\n      final SegmentReader leaf = (SegmentReader) ctx.reader();\n      SegmentInfo info = leaf.getSegmentInfo().info;\n      switch (info.getDiagnostics().get(IndexWriter.SOURCE)) {\n        case IndexWriter.SOURCE_FLUSH:\n          assertNull(info.getIndexSort());\n          break;\n        case IndexWriter.SOURCE_MERGE:\n          assertEquals(indexSort, info.getIndexSort());\n          final NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n          long previous = Long.MIN_VALUE;\n          for (int i = 0; i < leaf.maxDoc(); ++i) {\n            final long value = values.get(i);\n            assertTrue(value >= previous);\n            previous = value;\n          }\n          break;\n        default:\n          fail();\n      }\n    }\n\n    // Now check that the index is consistent\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      TermQuery termQuery = new TermQuery(new Term(\"id\", Integer.toString(i)));\n      final TopDocs topDocs = searcher.search(termQuery, 1);\n      if (deleted.get(i)) {\n        assertEquals(0, topDocs.totalHits);\n      } else {\n        assertEquals(1, topDocs.totalHits);\n        assertEquals(i, MultiDocValues.getNumericValues(reader, \"id\").get(topDocs.scoreDocs[0].doc));\n        Document document = reader.document(topDocs.scoreDocs[0].doc);\n        assertEquals(Integer.toString(i), document.get(\"id\"));\n      }\n    }\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22aab7a3b640b0dba26cc5e9416bc7af93614b46","date":1462575761,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testSortOnMerge(boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testSortOnMerge(boolean).mjava","sourceNew":"  public void testSortOnMerge(boolean withDeletes) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    final int numDocs = atLeast(1000);\n    final FixedBitSet deleted = new FixedBitSet(numDocs);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"foo\", random().nextInt(20)));\n      doc.add(new StringField(\"id\", Integer.toString(i), Store.YES));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      w.addDocument(doc);\n      if (random().nextInt(5) == 0) {\n        w.getReader().close();\n      } else if (random().nextInt(30) == 0) {\n        w.forceMerge(2);\n      } else if (random().nextInt(4) == 0) {\n        final int id = TestUtil.nextInt(random(), 0, i);\n        deleted.set(id);\n        w.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n      }\n    }\n\n    // Check that segments are sorted\n    DirectoryReader reader = w.getReader();\n    for (LeafReaderContext ctx : reader.leaves()) {\n      final SegmentReader leaf = (SegmentReader) ctx.reader();\n      SegmentInfo info = leaf.getSegmentInfo().info;\n      switch (info.getDiagnostics().get(IndexWriter.SOURCE)) {\n        case IndexWriter.SOURCE_FLUSH:\n          assertNull(info.getIndexSort());\n          break;\n        case IndexWriter.SOURCE_MERGE:\n          assertEquals(indexSort, info.getIndexSort());\n          final NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n          long previous = Long.MIN_VALUE;\n          for (int i = 0; i < leaf.maxDoc(); ++i) {\n            final long value = values.get(i);\n            assertTrue(value >= previous);\n            previous = value;\n          }\n          break;\n        default:\n          fail();\n      }\n    }\n\n    // Now check that the index is consistent\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      TermQuery termQuery = new TermQuery(new Term(\"id\", Integer.toString(i)));\n      final TopDocs topDocs = searcher.search(termQuery, 1);\n      if (deleted.get(i)) {\n        assertEquals(0, topDocs.totalHits);\n      } else {\n        assertEquals(1, topDocs.totalHits);\n        assertEquals(i, getNumericDocValue(reader, \"id\", topDocs.scoreDocs[0].doc));\n        Document document = reader.document(topDocs.scoreDocs[0].doc);\n        assertEquals(Integer.toString(i), document.get(\"id\"));\n      }\n    }\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSortOnMerge(boolean withDeletes) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    final int numDocs = atLeast(1000);\n    final FixedBitSet deleted = new FixedBitSet(numDocs);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"foo\", random().nextInt(20)));\n      doc.add(new StringField(\"id\", Integer.toString(i), Store.YES));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      w.addDocument(doc);\n      if (random().nextInt(5) == 0) {\n        w.getReader().close();\n      } else if (random().nextInt(30) == 0) {\n        w.forceMerge(2);\n      } else if (random().nextInt(4) == 0) {\n        final int id = TestUtil.nextInt(random(), 0, i);\n        deleted.set(id);\n        w.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n      }\n    }\n\n    // Check that segments are sorted\n    DirectoryReader reader = w.getReader();\n    for (LeafReaderContext ctx : reader.leaves()) {\n      final SegmentReader leaf = (SegmentReader) ctx.reader();\n      SegmentInfo info = leaf.getSegmentInfo().info;\n      switch (info.getDiagnostics().get(IndexWriter.SOURCE)) {\n        case IndexWriter.SOURCE_FLUSH:\n          assertNull(info.getIndexSort());\n          break;\n        case IndexWriter.SOURCE_MERGE:\n          assertEquals(indexSort, info.getIndexSort());\n          final NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n          long previous = Long.MIN_VALUE;\n          for (int i = 0; i < leaf.maxDoc(); ++i) {\n            final long value = values.get(i);\n            assertTrue(value >= previous);\n            previous = value;\n          }\n          break;\n        default:\n          fail();\n      }\n    }\n\n    // Now check that the index is consistent\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      TermQuery termQuery = new TermQuery(new Term(\"id\", Integer.toString(i)));\n      final TopDocs topDocs = searcher.search(termQuery, 1);\n      if (deleted.get(i)) {\n        assertEquals(0, topDocs.totalHits);\n      } else {\n        assertEquals(1, topDocs.totalHits);\n        assertEquals(i, MultiDocValues.getNumericValues(reader, \"id\").get(topDocs.scoreDocs[0].doc));\n        Document document = reader.document(topDocs.scoreDocs[0].doc);\n        assertEquals(Integer.toString(i), document.get(\"id\"));\n      }\n    }\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"815972da4a13279b8e975d2e32ca450649d6c295","date":1462635959,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testSortOnMerge(boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testSortOnMerge(boolean).mjava","sourceNew":"  public void testSortOnMerge(boolean withDeletes) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    final int numDocs = atLeast(1000);\n    final FixedBitSet deleted = new FixedBitSet(numDocs);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"foo\", random().nextInt(20)));\n      doc.add(new StringField(\"id\", Integer.toString(i), Store.YES));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      w.addDocument(doc);\n      if (random().nextInt(5) == 0) {\n        w.getReader().close();\n      } else if (random().nextInt(30) == 0) {\n        w.forceMerge(2);\n      } else if (random().nextInt(4) == 0) {\n        final int id = TestUtil.nextInt(random(), 0, i);\n        deleted.set(id);\n        w.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n      }\n    }\n\n    // Check that segments are sorted\n    DirectoryReader reader = w.getReader();\n    for (LeafReaderContext ctx : reader.leaves()) {\n      final SegmentReader leaf = (SegmentReader) ctx.reader();\n      SegmentInfo info = leaf.getSegmentInfo().info;\n      switch (info.getDiagnostics().get(IndexWriter.SOURCE)) {\n        case IndexWriter.SOURCE_FLUSH:\n          assertNull(info.getIndexSort());\n          break;\n        case IndexWriter.SOURCE_MERGE:\n          assertEquals(indexSort, info.getIndexSort());\n          final NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n          long previous = Long.MIN_VALUE;\n          for (int i = 0; i < leaf.maxDoc(); ++i) {\n            final long value = values.get(i);\n            assertTrue(value >= previous);\n            previous = value;\n          }\n          break;\n        default:\n          fail();\n      }\n    }\n\n    // Now check that the index is consistent\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      TermQuery termQuery = new TermQuery(new Term(\"id\", Integer.toString(i)));\n      final TopDocs topDocs = searcher.search(termQuery, 1);\n      if (deleted.get(i)) {\n        assertEquals(0, topDocs.totalHits);\n      } else {\n        assertEquals(1, topDocs.totalHits);\n        assertEquals(i, MultiDocValues.getNumericValues(reader, \"id\").get(topDocs.scoreDocs[0].doc));\n        Document document = reader.document(topDocs.scoreDocs[0].doc);\n        assertEquals(Integer.toString(i), document.get(\"id\"));\n      }\n    }\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSortOnMerge(boolean withDeletes) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    final int numDocs = atLeast(1000);\n    final FixedBitSet deleted = new FixedBitSet(numDocs);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"foo\", random().nextInt(20)));\n      doc.add(new StringField(\"id\", Integer.toString(i), Store.YES));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      w.addDocument(doc);\n      if (random().nextInt(5) == 0) {\n        w.getReader().close();\n      } else if (random().nextInt(30) == 0) {\n        w.forceMerge(2);\n      } else if (random().nextInt(4) == 0) {\n        final int id = TestUtil.nextInt(random(), 0, i);\n        deleted.set(id);\n        w.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n      }\n    }\n\n    // Check that segments are sorted\n    DirectoryReader reader = w.getReader();\n    for (LeafReaderContext ctx : reader.leaves()) {\n      final SegmentReader leaf = (SegmentReader) ctx.reader();\n      SegmentInfo info = leaf.getSegmentInfo().info;\n      switch (info.getDiagnostics().get(IndexWriter.SOURCE)) {\n        case IndexWriter.SOURCE_FLUSH:\n          assertNull(info.getIndexSort());\n          break;\n        case IndexWriter.SOURCE_MERGE:\n          assertEquals(indexSort, info.getIndexSort());\n          final NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n          long previous = Long.MIN_VALUE;\n          for (int i = 0; i < leaf.maxDoc(); ++i) {\n            final long value = values.get(i);\n            assertTrue(value >= previous);\n            previous = value;\n          }\n          break;\n        default:\n          fail();\n      }\n    }\n\n    // Now check that the index is consistent\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      TermQuery termQuery = new TermQuery(new Term(\"id\", Integer.toString(i)));\n      final TopDocs topDocs = searcher.search(termQuery, 1);\n      if (deleted.get(i)) {\n        assertEquals(0, topDocs.totalHits);\n      } else {\n        assertEquals(1, topDocs.totalHits);\n        assertEquals(i, getNumericDocValue(reader, \"id\", topDocs.scoreDocs[0].doc));\n        Document document = reader.document(topDocs.scoreDocs[0].doc);\n        assertEquals(Integer.toString(i), document.get(\"id\"));\n      }\n    }\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ad56fe9e068c425e8ac38f2263714e167490c2","date":1462704115,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testSortOnMerge(boolean).mjava","sourceNew":null,"sourceOld":"  public void testSortOnMerge(boolean withDeletes) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    Sort indexSort = new Sort(new SortField(\"foo\", SortField.Type.LONG));\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    final int numDocs = atLeast(1000);\n    final FixedBitSet deleted = new FixedBitSet(numDocs);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"foo\", random().nextInt(20)));\n      doc.add(new StringField(\"id\", Integer.toString(i), Store.YES));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      w.addDocument(doc);\n      if (random().nextInt(5) == 0) {\n        w.getReader().close();\n      } else if (random().nextInt(30) == 0) {\n        w.forceMerge(2);\n      } else if (random().nextInt(4) == 0) {\n        final int id = TestUtil.nextInt(random(), 0, i);\n        deleted.set(id);\n        w.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n      }\n    }\n\n    // Check that segments are sorted\n    DirectoryReader reader = w.getReader();\n    for (LeafReaderContext ctx : reader.leaves()) {\n      final SegmentReader leaf = (SegmentReader) ctx.reader();\n      SegmentInfo info = leaf.getSegmentInfo().info;\n      switch (info.getDiagnostics().get(IndexWriter.SOURCE)) {\n        case IndexWriter.SOURCE_FLUSH:\n          assertNull(info.getIndexSort());\n          break;\n        case IndexWriter.SOURCE_MERGE:\n          assertEquals(indexSort, info.getIndexSort());\n          final NumericDocValues values = leaf.getNumericDocValues(\"foo\");\n          long previous = Long.MIN_VALUE;\n          for (int i = 0; i < leaf.maxDoc(); ++i) {\n            final long value = values.get(i);\n            assertTrue(value >= previous);\n            previous = value;\n          }\n          break;\n        default:\n          fail();\n      }\n    }\n\n    // Now check that the index is consistent\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < numDocs; ++i) {\n      TermQuery termQuery = new TermQuery(new Term(\"id\", Integer.toString(i)));\n      final TopDocs topDocs = searcher.search(termQuery, 1);\n      if (deleted.get(i)) {\n        assertEquals(0, topDocs.totalHits);\n      } else {\n        assertEquals(1, topDocs.totalHits);\n        assertEquals(i, MultiDocValues.getNumericValues(reader, \"id\").get(topDocs.scoreDocs[0].doc));\n        Document document = reader.document(topDocs.scoreDocs[0].doc);\n        assertEquals(Integer.toString(i), document.get(\"id\"));\n      }\n    }\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"815972da4a13279b8e975d2e32ca450649d6c295":["22aab7a3b640b0dba26cc5e9416bc7af93614b46"],"a8ad56fe9e068c425e8ac38f2263714e167490c2":["815972da4a13279b8e975d2e32ca450649d6c295"],"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"22aab7a3b640b0dba26cc5e9416bc7af93614b46":["fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8"]},"commit2Childs":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"815972da4a13279b8e975d2e32ca450649d6c295":["a8ad56fe9e068c425e8ac38f2263714e167490c2"],"a8ad56fe9e068c425e8ac38f2263714e167490c2":[],"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8":["22aab7a3b640b0dba26cc5e9416bc7af93614b46"],"22aab7a3b640b0dba26cc5e9416bc7af93614b46":["815972da4a13279b8e975d2e32ca450649d6c295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a8ad56fe9e068c425e8ac38f2263714e167490c2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}