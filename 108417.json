{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","commits":[{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","pathOld":"/dev/null","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      final Iterator<Map.Entry<SegmentInfo,ReadersAndLiveDocs>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndLiveDocs rld = it.next().getValue();\n        //System.out.println(\"pool.dropAll: seg=\" + rld.info);\n        if (doSave && rld.writeLiveDocs(directory)) {\n          assert infoIsLive(rld.info);\n          // Must checkpoint w/ deleter, because we just\n          // created created new _X_N.del file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        rld.dropReaders();\n      }\n      assert readerMap.size() == 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["119ae5b0966bbb5d6948c7f86207613595764d2e","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#dropAll(boolean).mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      final Iterator<Map.Entry<SegmentInfo,ReadersAndLiveDocs>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndLiveDocs rld = it.next().getValue();\n        //System.out.println(\"pool.dropAll: seg=\" + rld.info);\n        if (doSave && rld.writeLiveDocs(directory)) {\n          assert infoIsLive(rld.info);\n          // Must checkpoint w/ deleter, because we just\n          // created created new _X_N.del file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        rld.dropReaders();\n      }\n      assert readerMap.size() == 0;\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void dropAll(boolean doSave) throws IOException {\n      final Iterator<Map.Entry<SegmentInfo,ReadersAndLiveDocs>> it = readerMap.entrySet().iterator();\n      while(it.hasNext()) {\n        final ReadersAndLiveDocs rld = it.next().getValue();\n        //System.out.println(\"pool.dropAll: seg=\" + rld.info);\n        if (doSave && rld.writeLiveDocs(directory)) {\n          assert infoIsLive(rld.info);\n          // Must checkpoint w/ deleter, because we just\n          // created created new _X_N.del file.\n          deleter.checkpoint(segmentInfos, false);\n        }\n\n        // Important to remove as-we-go, not with .clear()\n        // in the end, in case we hit an exception;\n        // otherwise we could over-decref if close() is\n        // called again:\n        it.remove();\n\n        // NOTE: it is allowed that these decRefs do not\n        // actually close the SRs; this happens when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed:\n        rld.dropReaders();\n      }\n      assert readerMap.size() == 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ce667c6d3400b22523701c549c0d35e26da8b46":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}