{"path":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestWickedLongTerm().mjava","commits":[{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestWickedLongTerm().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","sourceNew":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void xxxtestWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      char[] chars = new char[DocumentsWriter.CHAR_BLOCK_SIZE-1];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.ANALYZED));\n      StandardAnalyzer sa = new StandardAnalyzer();\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, sa, IndexWriter.MaxFieldLength.LIMITED);\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      char[] chars = new char[DocumentsWriter.CHAR_BLOCK_SIZE-1];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.ANALYZED));\n      StandardAnalyzer sa = new StandardAnalyzer();\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, sa, IndexWriter.MaxFieldLength.LIMITED);\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testWickedLongTerm().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestWickedLongTerm().mjava","sourceNew":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void testWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      char[] chars = new char[DocumentsWriter.CHAR_BLOCK_SIZE-1];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.ANALYZED));\n      StandardAnalyzer sa = new StandardAnalyzer();\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, sa, IndexWriter.MaxFieldLength.LIMITED);\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure we skip wicked long terms.\n    */\n    public void xxxtestWickedLongTerm() throws IOException {\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n      char[] chars = new char[DocumentsWriter.CHAR_BLOCK_SIZE-1];\n      Arrays.fill(chars, 'x');\n      Document doc = new Document();\n      final String bigTerm = new String(chars);\n\n      // Max length term is 16383, so this contents produces\n      // a too-long term:\n      String contents = \"abc xyz x\" + bigTerm + \" another term\";\n      doc.add(new Field(\"content\", contents, Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n\n      // Make sure we can add another normal document\n      doc = new Document();\n      doc.add(new Field(\"content\", \"abc bbb ccc\", Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n\n      // Make sure all terms < max size were indexed\n      assertEquals(2, reader.docFreq(new Term(\"content\", \"abc\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"bbb\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"term\")));\n      assertEquals(1, reader.docFreq(new Term(\"content\", \"another\")));\n\n      // Make sure position is still incremented when\n      // massive term is skipped:\n      TermPositions tps = reader.termPositions(new Term(\"content\", \"another\"));\n      assertTrue(tps.next());\n      assertEquals(1, tps.freq());\n      assertEquals(3, tps.nextPosition());\n\n      // Make sure the doc that has the massive term is in\n      // the index:\n      assertEquals(\"document with wicked long term should is not in the index!\", 2, reader.numDocs());\n\n      reader.close();\n\n      // Make sure we can add a document with exactly the\n      // maximum length term, and search on that term:\n      doc = new Document();\n      doc.add(new Field(\"content\", bigTerm, Field.Store.NO, Field.Index.ANALYZED));\n      StandardAnalyzer sa = new StandardAnalyzer();\n      sa.setMaxTokenLength(100000);\n      writer  = new IndexWriter(dir, sa, IndexWriter.MaxFieldLength.LIMITED);\n      writer.addDocument(doc);\n      writer.close();\n      reader = IndexReader.open(dir);\n      assertEquals(1, reader.docFreq(new Term(\"content\", bigTerm)));\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3215ae1377fc1ca1790921d75dd39cb764743b85":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c482d1e63332617181729a225b215c452d8a79"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"09c482d1e63332617181729a225b215c452d8a79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}