{"path":"src/java/org/apache/lucene/search/SortComparator#getComparable(String).mjava","commits":[{"id":"99ee715b9c02dd47d9e69a18607a5192c1ebd82b","date":1085007927,"type":0,"author":"Tim Jones","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/SortComparator#getComparable(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns an object which, when sorted according to natural order,\n   * will order the Term values in the correct order.\n   * <p>For example, if the Terms contained integer values, this method\n   * would return <code>new Integer(termtext)</code>.  Note that this\n   * might not always be the most efficient implementation - for this\n   * particular example, a better implementation might be to make a\n   * ScoreDocLookupComparator that uses an internal lookup table of int.\n   * @param termtext The textual value of the term.\n   * @return An object representing <code>termtext</code> that sorts according to the natural order of <code>termtext</code>.\n   * @see Comparable\n   * @see ScoreDocComparator\n   */\n  protected abstract Comparable getComparable (String termtext);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/SortComparator#getComparable(String).mjava","pathOld":"src/java/org/apache/lucene/search/SortComparator#getComparable(String).mjava","sourceNew":"  /**\n   * Returns an object which, when sorted according to natural order,\n   * will order the Term values in the correct order.\n   * <p>For example, if the Terms contained integer values, this method\n   * would return <code>Integer.valueOf(termtext)</code>.  Note that this\n   * might not always be the most efficient implementation - for this\n   * particular example, a better implementation might be to make a\n   * ScoreDocLookupComparator that uses an internal lookup table of int.\n   * @param termtext The textual value of the term.\n   * @return An object representing <code>termtext</code> that sorts according to the natural order of <code>termtext</code>.\n   * @see Comparable\n   * @see ScoreDocComparator\n   */\n  protected abstract Comparable getComparable (String termtext);\n\n","sourceOld":"  /**\n   * Returns an object which, when sorted according to natural order,\n   * will order the Term values in the correct order.\n   * <p>For example, if the Terms contained integer values, this method\n   * would return <code>new Integer(termtext)</code>.  Note that this\n   * might not always be the most efficient implementation - for this\n   * particular example, a better implementation might be to make a\n   * ScoreDocLookupComparator that uses an internal lookup table of int.\n   * @param termtext The textual value of the term.\n   * @return An object representing <code>termtext</code> that sorts according to the natural order of <code>termtext</code>.\n   * @see Comparable\n   * @see ScoreDocComparator\n   */\n  protected abstract Comparable getComparable (String termtext);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99","date":1255432705,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/SortComparator#getComparable(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns an object which, when sorted according to natural order,\n   * will order the Term values in the correct order.\n   * <p>For example, if the Terms contained integer values, this method\n   * would return <code>Integer.valueOf(termtext)</code>.  Note that this\n   * might not always be the most efficient implementation - for this\n   * particular example, a better implementation might be to make a\n   * ScoreDocLookupComparator that uses an internal lookup table of int.\n   * @param termtext The textual value of the term.\n   * @return An object representing <code>termtext</code> that sorts according to the natural order of <code>termtext</code>.\n   * @see Comparable\n   * @see ScoreDocComparator\n   */\n  protected abstract Comparable getComparable (String termtext);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bcde5e3f23911110baa101ed062b544162825b5":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"],"99ee715b9c02dd47d9e69a18607a5192c1ebd82b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["6bcde5e3f23911110baa101ed062b544162825b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"]},"commit2Childs":{"6bcde5e3f23911110baa101ed062b544162825b5":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"],"99ee715b9c02dd47d9e69a18607a5192c1ebd82b":["6bcde5e3f23911110baa101ed062b544162825b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}