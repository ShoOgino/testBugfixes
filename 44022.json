{"path":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d","date":1298208351,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 20)));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 20)));\n    }\n\n    c.setMergePolicy(newLogMergePolicy(r));\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newLogMergePolicy());\n    } else {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 20)));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newLogMergePolicy());\n    } else {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 20)));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f411c79281946a184efeab34a673deffc25edcb","date":1303995312,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 20)));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newLogMergePolicy());\n    } else {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 20)));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newLogMergePolicy());\n    } else {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 20)));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newLogMergePolicy());\n    } else {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newLogMergePolicy());\n    } else {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 20)));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newLogMergePolicy());\n    } else {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 20)));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newLogMergePolicy());\n    } else {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setMaxThreadStates(_TestUtil.nextInt(r, 1, 20));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    } else {\n      c.setMergePolicy(newLogMergePolicy());\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if ((TEST_NIGHTLY && random.nextBoolean()) || r.nextInt(20) == 17) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 7));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 8, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if ((TEST_NIGHTLY && random.nextBoolean()) || r.nextInt(20) == 17) {\n        // crazy value\n        c.setTermIndexInterval(random.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 20)));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newLogMergePolicy());\n    } else {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 20)));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newLogMergePolicy());\n    } else {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if ((TEST_NIGHTLY && random.nextBoolean()) || r.nextInt(20) == 17) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 7));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 8, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if ((TEST_NIGHTLY && random.nextBoolean()) || r.nextInt(20) == 17) {\n        // crazy value\n        c.setTermIndexInterval(random.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 20)));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newLogMergePolicy());\n    } else {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 20)));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newLogMergePolicy());\n    } else {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0762b640e0d0d12b6edb96db68986e13145c3484","date":1307575932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 7));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 8, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(random.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 20)));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newLogMergePolicy());\n    } else {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if ((TEST_NIGHTLY && random.nextBoolean()) || r.nextInt(20) == 17) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 7));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 8, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if ((TEST_NIGHTLY && random.nextBoolean()) || r.nextInt(20) == 17) {\n        // crazy value\n        c.setTermIndexInterval(random.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 20)));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newLogMergePolicy());\n    } else {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 7));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 8, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(random.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 20)));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newLogMergePolicy());\n    } else {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (r.nextInt(20) == 17) {\n        c.setMaxBufferedDocs(2);\n      } else {\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setTermIndexInterval(_TestUtil.nextInt(r, 1, 1000));\n    }\n    if (r.nextBoolean()) {\n      c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 20)));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newLogMergePolicy());\n    } else {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 7));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 8, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(random.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 20)));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newLogMergePolicy());\n    } else {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if ((TEST_NIGHTLY && random.nextBoolean()) || r.nextInt(20) == 17) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 7));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 8, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if ((TEST_NIGHTLY && random.nextBoolean()) || r.nextInt(20) == 17) {\n        // crazy value\n        c.setTermIndexInterval(random.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 20)));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newLogMergePolicy());\n    } else {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a29110a2a9f520e14743ff565c278b306d1ef5ee","date":1314327679,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 7));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 8, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 20)));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newLogMergePolicy());\n    } else {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 7));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 8, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(random.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 20)));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newLogMergePolicy());\n    } else {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60e3b31201fd9bb5d73884faa5a38c63ea9239f2","date":1315756041,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarityProvider(similarityProvider);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 7));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 8, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 20)));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newLogMergePolicy());\n    } else {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 7));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 8, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 20)));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newLogMergePolicy());\n    } else {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newIndexWriterConfig(Random,Version,Analyzer).mjava","sourceNew":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarityProvider(similarityProvider);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 7));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 8, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 20)));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newLogMergePolicy());\n    } else {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","sourceOld":"  /** create a new index writer config with random defaults using the specified random */\n  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {\n    IndexWriterConfig c = new IndexWriterConfig(v, a);\n    c.setSimilarityProvider(similarityProvider);\n    if (r.nextBoolean()) {\n      c.setMergeScheduler(new SerialMergeScheduler());\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 2, 7));\n      } else {\n        // reasonable value\n        c.setMaxBufferedDocs(_TestUtil.nextInt(r, 8, 1000));\n      }\n    }\n    if (r.nextBoolean()) {\n      if (rarely(r)) {\n        // crazy value\n        c.setTermIndexInterval(r.nextBoolean() ? _TestUtil.nextInt(r, 1, 31) : _TestUtil.nextInt(r, 129, 1000));\n      } else {\n        // reasonable value\n        c.setTermIndexInterval(_TestUtil.nextInt(r, 32, 128));\n      }\n    }\n    if (r.nextBoolean()) {\n      c.setIndexerThreadPool(new ThreadAffinityDocumentsWriterThreadPool(_TestUtil.nextInt(r, 1, 20)));\n    }\n\n    if (r.nextBoolean()) {\n      c.setMergePolicy(newTieredMergePolicy());\n    } else if (r.nextBoolean()) {\n      c.setMergePolicy(newLogMergePolicy());\n    } else {\n      c.setMergePolicy(new MockRandomMergePolicy(r));\n    }\n\n    c.setReaderPooling(r.nextBoolean());\n    c.setReaderTermsIndexDivisor(_TestUtil.nextInt(r, 1, 4));\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["79c2cb24929f2649a8875fb629086171f914d5ce","0762b640e0d0d12b6edb96db68986e13145c3484"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"5f411c79281946a184efeab34a673deffc25edcb":["45669a651c970812a680841b97a77cce06af559f"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d"],"0762b640e0d0d12b6edb96db68986e13145c3484":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"a29110a2a9f520e14743ff565c278b306d1ef5ee":["0762b640e0d0d12b6edb96db68986e13145c3484"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["f1bdbf92da222965b46c0a942c3857ba56e5c638","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["a29110a2a9f520e14743ff565c278b306d1ef5ee"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["01e5948db9a07144112d2f08f28ca2e3cd880348","5f411c79281946a184efeab34a673deffc25edcb"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d"],"7b91922b55d15444d554721b352861d028eb8278":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"a3776dccca01c11e7046323cfad46a3b4a471233":["0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","0762b640e0d0d12b6edb96db68986e13145c3484"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","01e5948db9a07144112d2f08f28ca2e3cd880348"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["0762b640e0d0d12b6edb96db68986e13145c3484","79c2cb24929f2649a8875fb629086171f914d5ce"],"5f411c79281946a184efeab34a673deffc25edcb":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"0762b640e0d0d12b6edb96db68986e13145c3484":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","a29110a2a9f520e14743ff565c278b306d1ef5ee","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"a29110a2a9f520e14743ff565c278b306d1ef5ee":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["7b91922b55d15444d554721b352861d028eb8278"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d","29ef99d61cda9641b6250bf9567329a6e65f901d"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","45669a651c970812a680841b97a77cce06af559f"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ffe3fbd77ef1d62c9164a042f5bcdb625a7c53d":["f1bdbf92da222965b46c0a942c3857ba56e5c638","01e5948db9a07144112d2f08f28ca2e3cd880348","a3776dccca01c11e7046323cfad46a3b4a471233","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"45669a651c970812a680841b97a77cce06af559f":["5f411c79281946a184efeab34a673deffc25edcb"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}