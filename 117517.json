{"path":"solr/core/src/java/org/apache/solr/util/PayloadUtils#createSpanQuery(String,String,Analyzer,String).mjava","commits":[{"id":"fde37608cd70b4d772cda072953ab6e7aec60923","date":1502236361,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/PayloadUtils#createSpanQuery(String,String,Analyzer,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * The generated SpanQuery will be either a SpanTermQuery or an ordered, zero slop SpanNearQuery, depending\n   * on how many tokens are emitted.\n   */\n  public static SpanQuery createSpanQuery(String field, String value, Analyzer analyzer, String operator) throws IOException {\n    // adapted this from QueryBuilder.createSpanQuery (which isn't currently public) and added reset(), end(), and close() calls\n    List<SpanTermQuery> terms = new ArrayList<>();\n    try (TokenStream in = analyzer.tokenStream(field, value)) {\n      in.reset();\n\n      TermToBytesRefAttribute termAtt = in.getAttribute(TermToBytesRefAttribute.class);\n      while (in.incrementToken()) {\n        terms.add(new SpanTermQuery(new Term(field, termAtt.getBytesRef())));\n      }\n      in.end();\n    }\n\n    SpanQuery query;\n    if (terms.isEmpty()) {\n      query = null;\n    } else if (terms.size() == 1) {\n      query = terms.get(0);\n    } else if (operator != null && operator.equalsIgnoreCase(\"or\")) {\n        query = new SpanOrQuery(terms.toArray(new SpanTermQuery[terms.size()]));\n    } else {\n        query = new SpanNearQuery(terms.toArray(new SpanTermQuery[terms.size()]), 0, true);\n      }\n    return query;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/PayloadUtils#createSpanQuery(String,String,Analyzer,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * The generated SpanQuery will be either a SpanTermQuery or an ordered, zero slop SpanNearQuery, depending\n   * on how many tokens are emitted.\n   */\n  public static SpanQuery createSpanQuery(String field, String value, Analyzer analyzer, String operator) throws IOException {\n    // adapted this from QueryBuilder.createSpanQuery (which isn't currently public) and added reset(), end(), and close() calls\n    List<SpanTermQuery> terms = new ArrayList<>();\n    try (TokenStream in = analyzer.tokenStream(field, value)) {\n      in.reset();\n\n      TermToBytesRefAttribute termAtt = in.getAttribute(TermToBytesRefAttribute.class);\n      while (in.incrementToken()) {\n        terms.add(new SpanTermQuery(new Term(field, termAtt.getBytesRef())));\n      }\n      in.end();\n    }\n\n    SpanQuery query;\n    if (terms.isEmpty()) {\n      query = null;\n    } else if (terms.size() == 1) {\n      query = terms.get(0);\n    } else if (operator != null && operator.equalsIgnoreCase(\"or\")) {\n        query = new SpanOrQuery(terms.toArray(new SpanTermQuery[terms.size()]));\n    } else {\n        query = new SpanNearQuery(terms.toArray(new SpanTermQuery[terms.size()]), 0, true);\n      }\n    return query;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/PayloadUtils#createSpanQuery(String,String,Analyzer,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * The generated SpanQuery will be either a SpanTermQuery or an ordered, zero slop SpanNearQuery, depending\n   * on how many tokens are emitted.\n   */\n  public static SpanQuery createSpanQuery(String field, String value, Analyzer analyzer, String operator) throws IOException {\n    // adapted this from QueryBuilder.createSpanQuery (which isn't currently public) and added reset(), end(), and close() calls\n    List<SpanTermQuery> terms = new ArrayList<>();\n    try (TokenStream in = analyzer.tokenStream(field, value)) {\n      in.reset();\n\n      TermToBytesRefAttribute termAtt = in.getAttribute(TermToBytesRefAttribute.class);\n      while (in.incrementToken()) {\n        terms.add(new SpanTermQuery(new Term(field, termAtt.getBytesRef())));\n      }\n      in.end();\n    }\n\n    SpanQuery query;\n    if (terms.isEmpty()) {\n      query = null;\n    } else if (terms.size() == 1) {\n      query = terms.get(0);\n    } else if (operator != null && operator.equalsIgnoreCase(\"or\")) {\n        query = new SpanOrQuery(terms.toArray(new SpanTermQuery[terms.size()]));\n    } else {\n        query = new SpanNearQuery(terms.toArray(new SpanTermQuery[terms.size()]), 0, true);\n      }\n    return query;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58884af1f68e9d61c217c753fbd6266d86a63b14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fde37608cd70b4d772cda072953ab6e7aec60923"],"fde37608cd70b4d772cda072953ab6e7aec60923":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fde37608cd70b4d772cda072953ab6e7aec60923"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fde37608cd70b4d772cda072953ab6e7aec60923"]},"commit2Childs":{"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"fde37608cd70b4d772cda072953ab6e7aec60923":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58884af1f68e9d61c217c753fbd6266d86a63b14","fde37608cd70b4d772cda072953ab6e7aec60923","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}