{"path":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList[NamedList[Number]]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList[NamedList[Number]]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList[NamedList[Number]]).mjava","sourceNew":"    public void parse(NamedList<NamedList<Number>> terms) {\n      // exit if there is no terms\n      if (terms == null) {\n        return;\n      }\n\n      TermsResponse termsResponse = new TermsResponse(terms);\n      \n      // loop though each field and add each term+freq to map\n      for (String key : fieldmap.keySet()) {\n        HashMap<String, TermsResponse.Term> termmap = fieldmap.get(key);\n        List<TermsResponse.Term> termlist = termsResponse.getTerms(key); \n\n        // skip this field if there are no terms\n        if (termlist == null) {\n          continue;\n        }\n\n        // loop though each term\n        for (TermsResponse.Term tc : termlist) {\n          String term = tc.getTerm();\n          if (termmap.containsKey(term)) {\n            TermsResponse.Term oldtc = termmap.get(term);\n            oldtc.addFrequency(tc.getFrequency());\n            termmap.put(term, oldtc);\n          } else {\n            termmap.put(term, tc);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void parse(NamedList<NamedList<Number>> terms) {\n      // exit if there is no terms\n      if (terms == null) {\n        return;\n      }\n\n      TermsResponse termsResponse = new TermsResponse(terms);\n      \n      // loop though each field and add each term+freq to map\n      for (String key : fieldmap.keySet()) {\n        HashMap<String, TermsResponse.Term> termmap = fieldmap.get(key);\n        List<TermsResponse.Term> termlist = termsResponse.getTerms(key); \n\n        // skip this field if there are no terms\n        if (termlist == null) {\n          continue;\n        }\n\n        // loop though each term\n        for (TermsResponse.Term tc : termlist) {\n          String term = tc.getTerm();\n          if (termmap.containsKey(term)) {\n            TermsResponse.Term oldtc = termmap.get(term);\n            oldtc.addFrequency(tc.getFrequency());\n            termmap.put(term, oldtc);\n          } else {\n            termmap.put(term, tc);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList[NamedList[Number]]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList[NamedList[Number]]).mjava","sourceNew":"    public void parse(NamedList<NamedList<Number>> terms) {\n      // exit if there is no terms\n      if (terms == null) {\n        return;\n      }\n\n      TermsResponse termsResponse = new TermsResponse(terms);\n      \n      // loop though each field and add each term+freq to map\n      for (String key : fieldmap.keySet()) {\n        HashMap<String, TermsResponse.Term> termmap = fieldmap.get(key);\n        List<TermsResponse.Term> termlist = termsResponse.getTerms(key); \n\n        // skip this field if there are no terms\n        if (termlist == null) {\n          continue;\n        }\n\n        // loop though each term\n        for (TermsResponse.Term tc : termlist) {\n          String term = tc.getTerm();\n          if (termmap.containsKey(term)) {\n            TermsResponse.Term oldtc = termmap.get(term);\n            oldtc.addFrequency(tc.getFrequency());\n            termmap.put(term, oldtc);\n          } else {\n            termmap.put(term, tc);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void parse(NamedList<NamedList<Number>> terms) {\n      // exit if there is no terms\n      if (terms == null) {\n        return;\n      }\n\n      TermsResponse termsResponse = new TermsResponse(terms);\n      \n      // loop though each field and add each term+freq to map\n      for (String key : fieldmap.keySet()) {\n        HashMap<String, TermsResponse.Term> termmap = fieldmap.get(key);\n        List<TermsResponse.Term> termlist = termsResponse.getTerms(key); \n\n        // skip this field if there are no terms\n        if (termlist == null) {\n          continue;\n        }\n\n        // loop though each term\n        for (TermsResponse.Term tc : termlist) {\n          String term = tc.getTerm();\n          if (termmap.containsKey(term)) {\n            TermsResponse.Term oldtc = termmap.get(term);\n            oldtc.addFrequency(tc.getFrequency());\n            termmap.put(term, oldtc);\n          } else {\n            termmap.put(term, tc);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList[NamedList[Number]]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList[NamedList[Number]]).mjava","sourceNew":"    public void parse(NamedList<NamedList<Number>> terms) {\n      // exit if there is no terms\n      if (terms == null) {\n        return;\n      }\n\n      TermsResponse termsResponse = new TermsResponse(terms);\n      \n      // loop though each field and add each term+freq to map\n      for (String key : fieldmap.keySet()) {\n        HashMap<String, TermsResponse.Term> termmap = fieldmap.get(key);\n        List<TermsResponse.Term> termlist = termsResponse.getTerms(key); \n\n        // skip this field if there are no terms\n        if (termlist == null) {\n          continue;\n        }\n\n        // loop though each term\n        for (TermsResponse.Term tc : termlist) {\n          String term = tc.getTerm();\n          if (termmap.containsKey(term)) {\n            TermsResponse.Term oldtc = termmap.get(term);\n            oldtc.addFrequency(tc.getFrequency());\n            termmap.put(term, oldtc);\n          } else {\n            termmap.put(term, tc);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void parse(NamedList<NamedList<Number>> terms) {\n      // exit if there is no terms\n      if (terms == null) {\n        return;\n      }\n\n      TermsResponse termsResponse = new TermsResponse(terms);\n      \n      // loop though each field and add each term+freq to map\n      for (String key : fieldmap.keySet()) {\n        HashMap<String, TermsResponse.Term> termmap = fieldmap.get(key);\n        List<TermsResponse.Term> termlist = termsResponse.getTerms(key); \n\n        // skip this field if there are no terms\n        if (termlist == null) {\n          continue;\n        }\n\n        // loop though each term\n        for (TermsResponse.Term tc : termlist) {\n          String term = tc.getTerm();\n          if (termmap.containsKey(term)) {\n            TermsResponse.Term oldtc = termmap.get(term);\n            oldtc.addFrequency(tc.getFrequency());\n            termmap.put(term, oldtc);\n          } else {\n            termmap.put(term, tc);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"194ca6939cf04fa69e4bbcaf0fed482ae1f5fa53","date":1490757519,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList[NamedList[Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList[NamedList[Number]]).mjava","sourceNew":"    public void parse(NamedList<NamedList<Object>> terms) {\n      // exit if there is no terms\n      if (terms == null) {\n        return;\n      }\n\n      TermsResponse termsResponse = new TermsResponse(terms);\n      \n      // loop though each field and add each term+freq to map\n      for (String key : fieldmap.keySet()) {\n        HashMap<String, TermsResponse.Term> termmap = fieldmap.get(key);\n        List<TermsResponse.Term> termlist = termsResponse.getTerms(key); \n\n        // skip this field if there are no terms\n        if (termlist == null) {\n          continue;\n        }\n\n        // loop though each term\n        for (TermsResponse.Term tc : termlist) {\n          String term = tc.getTerm();\n          if (termmap.containsKey(term)) {\n            TermsResponse.Term oldtc = termmap.get(term);\n            oldtc.addFrequency(tc.getFrequency());\n            oldtc.addTotalTermFreq(tc.getTotalTermFreq());\n            termmap.put(term, oldtc);\n          } else {\n            termmap.put(term, tc);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void parse(NamedList<NamedList<Number>> terms) {\n      // exit if there is no terms\n      if (terms == null) {\n        return;\n      }\n\n      TermsResponse termsResponse = new TermsResponse(terms);\n      \n      // loop though each field and add each term+freq to map\n      for (String key : fieldmap.keySet()) {\n        HashMap<String, TermsResponse.Term> termmap = fieldmap.get(key);\n        List<TermsResponse.Term> termlist = termsResponse.getTerms(key); \n\n        // skip this field if there are no terms\n        if (termlist == null) {\n          continue;\n        }\n\n        // loop though each term\n        for (TermsResponse.Term tc : termlist) {\n          String term = tc.getTerm();\n          if (termmap.containsKey(term)) {\n            TermsResponse.Term oldtc = termmap.get(term);\n            oldtc.addFrequency(tc.getFrequency());\n            termmap.put(term, oldtc);\n          } else {\n            termmap.put(term, tc);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a4302dfeb5d01c940f69c48bec27f03ad8828668","date":1490873946,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList[NamedList[Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent.TermsHelper#parse(NamedList[NamedList[Number]]).mjava","sourceNew":"    public void parse(NamedList<NamedList<Object>> terms) {\n      // exit if there is no terms\n      if (terms == null) {\n        return;\n      }\n\n      TermsResponse termsResponse = new TermsResponse(terms);\n      \n      // loop though each field and add each term+freq to map\n      for (String key : fieldmap.keySet()) {\n        HashMap<String, TermsResponse.Term> termmap = fieldmap.get(key);\n        List<TermsResponse.Term> termlist = termsResponse.getTerms(key); \n\n        // skip this field if there are no terms\n        if (termlist == null) {\n          continue;\n        }\n\n        // loop though each term\n        for (TermsResponse.Term tc : termlist) {\n          String term = tc.getTerm();\n          if (termmap.containsKey(term)) {\n            TermsResponse.Term oldtc = termmap.get(term);\n            oldtc.addFrequency(tc.getFrequency());\n            oldtc.addTotalTermFreq(tc.getTotalTermFreq());\n            termmap.put(term, oldtc);\n          } else {\n            termmap.put(term, tc);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void parse(NamedList<NamedList<Number>> terms) {\n      // exit if there is no terms\n      if (terms == null) {\n        return;\n      }\n\n      TermsResponse termsResponse = new TermsResponse(terms);\n      \n      // loop though each field and add each term+freq to map\n      for (String key : fieldmap.keySet()) {\n        HashMap<String, TermsResponse.Term> termmap = fieldmap.get(key);\n        List<TermsResponse.Term> termlist = termsResponse.getTerms(key); \n\n        // skip this field if there are no terms\n        if (termlist == null) {\n          continue;\n        }\n\n        // loop though each term\n        for (TermsResponse.Term tc : termlist) {\n          String term = tc.getTerm();\n          if (termmap.containsKey(term)) {\n            TermsResponse.Term oldtc = termmap.get(term);\n            oldtc.addFrequency(tc.getFrequency());\n            termmap.put(term, oldtc);\n          } else {\n            termmap.put(term, tc);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"194ca6939cf04fa69e4bbcaf0fed482ae1f5fa53":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a4302dfeb5d01c940f69c48bec27f03ad8828668":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["194ca6939cf04fa69e4bbcaf0fed482ae1f5fa53"]},"commit2Childs":{"194ca6939cf04fa69e4bbcaf0fed482ae1f5fa53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a4302dfeb5d01c940f69c48bec27f03ad8828668":[],"c26f00b574427b55127e869b935845554afde1fa":["194ca6939cf04fa69e4bbcaf0fed482ae1f5fa53","a4302dfeb5d01c940f69c48bec27f03ad8828668"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a4302dfeb5d01c940f69c48bec27f03ad8828668","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}