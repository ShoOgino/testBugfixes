{"path":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(Directory).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(Directory).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates a searcher searching the index in the provided directory. */\n  public IndexSearcher(Directory directory) throws IOException {\n    this(IndexReader.open(directory));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"63961914a58c80b6cac7b6aab1f0ffcc19ab4ecd","date":1082568388,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(Directory).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(Directory).mjava","sourceNew":"  /** Creates a searcher searching the index in the provided directory. */\n  public IndexSearcher(Directory directory) throws IOException {\n    this(IndexReader.open(directory), true);\n  }\n\n","sourceOld":"  /** Creates a searcher searching the index in the provided directory. */\n  public IndexSearcher(Directory directory) throws IOException {\n    this(IndexReader.open(directory));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(Directory).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(Directory).mjava","sourceNew":"  /** Creates a searcher searching the index in the provided directory.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexSearcher(Directory directory) throws CorruptIndexException, IOException {\n    this(IndexReader.open(directory), true);\n  }\n\n","sourceOld":"  /** Creates a searcher searching the index in the provided directory. */\n  public IndexSearcher(Directory directory) throws IOException {\n    this(IndexReader.open(directory), true);\n  }\n\n","bugFix":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87b6140eb35784da365e76a7236e4cd52a1a396c","date":1233591709,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(Directory).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(Directory).mjava","sourceNew":"  /** Creates a searcher searching the index in the provided directory.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexSearcher(Directory directory) throws CorruptIndexException, IOException {\n    this(IndexReader.open(directory), true, false);\n  }\n\n","sourceOld":"  /** Creates a searcher searching the index in the provided directory.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexSearcher(Directory directory) throws CorruptIndexException, IOException {\n    this(IndexReader.open(directory), true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc","date":1241865401,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(Directory).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(Directory).mjava","sourceNew":"  /** Creates a searcher searching the index in the provided directory.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexSearcher(Directory directory) throws CorruptIndexException, IOException {\n    this(IndexReader.open(directory), true);\n  }\n\n","sourceOld":"  /** Creates a searcher searching the index in the provided directory.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexSearcher(Directory directory) throws CorruptIndexException, IOException {\n    this(IndexReader.open(directory), true, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dabcca520e81aeff96f5c937b7ffb5617ee69d1","date":1243458018,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(Directory).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(Directory).mjava","sourceNew":"  /** Creates a searcher searching the index in the provided directory.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Use {@link #IndexSearcher(Directory, boolean)} instead\n   */\n  public IndexSearcher(Directory directory) throws CorruptIndexException, IOException {\n    this(IndexReader.open(directory), true);\n  }\n\n","sourceOld":"  /** Creates a searcher searching the index in the provided directory.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexSearcher(Directory directory) throws CorruptIndexException, IOException {\n    this(IndexReader.open(directory), true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaea03be31988a41275d45a429ac71ff0ad740fb","date":1254612554,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(Directory).mjava","sourceNew":null,"sourceOld":"  /** Creates a searcher searching the index in the provided directory.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Use {@link #IndexSearcher(Directory, boolean)} instead\n   */\n  public IndexSearcher(Directory directory) throws CorruptIndexException, IOException {\n    this(IndexReader.open(directory), true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39a470b4b315091ba7fd0f20d586faba3bb8ef25","date":1258310849,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(Directory).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates a searcher searching the index in the named\n   *  directory, with readOnly=true\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @param path directory where IndexReader will be opened\n   */\n  public IndexSearcher(Directory path) throws CorruptIndexException, IOException {\n    this(IndexReader.open(path, true), true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(Directory).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(Directory).mjava","sourceNew":"  /** Creates a searcher searching the index in the named\n   *  directory, with readOnly=true\n   * @param path directory where IndexReader will be opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexSearcher(Directory path) throws CorruptIndexException, IOException {\n    this(IndexReader.open(path, true), true);\n  }\n\n","sourceOld":"  /** Creates a searcher searching the index in the named\n   *  directory, with readOnly=true\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @param path directory where IndexReader will be opened\n   */\n  public IndexSearcher(Directory path) throws CorruptIndexException, IOException {\n    this(IndexReader.open(path, true), true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(Directory).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(Directory).mjava","sourceNew":"  /** Creates a searcher searching the index in the named\n   *  directory, with readOnly=true\n   * @param path directory where IndexReader will be opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexSearcher(Directory path) throws CorruptIndexException, IOException {\n    this(IndexReader.open(path, true), true);\n  }\n\n","sourceOld":"  /** Creates a searcher searching the index in the named\n   *  directory, with readOnly=true\n   * @param path directory where IndexReader will be opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexSearcher(Directory path) throws CorruptIndexException, IOException {\n    this(IndexReader.open(path, true), true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"39a470b4b315091ba7fd0f20d586faba3bb8ef25":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"eaea03be31988a41275d45a429ac71ff0ad740fb":["0dabcca520e81aeff96f5c937b7ffb5617ee69d1"],"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["87b6140eb35784da365e76a7236e4cd52a1a396c"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1b54a9bc667895a2095a886184bf69a3179e63df":["63961914a58c80b6cac7b6aab1f0ffcc19ab4ecd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0dabcca520e81aeff96f5c937b7ffb5617ee69d1":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"63961914a58c80b6cac7b6aab1f0ffcc19ab4ecd":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"87b6140eb35784da365e76a7236e4cd52a1a396c":["1b54a9bc667895a2095a886184bf69a3179e63df"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["39a470b4b315091ba7fd0f20d586faba3bb8ef25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"39a470b4b315091ba7fd0f20d586faba3bb8ef25":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"eaea03be31988a41275d45a429ac71ff0ad740fb":["39a470b4b315091ba7fd0f20d586faba3bb8ef25"],"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["0dabcca520e81aeff96f5c937b7ffb5617ee69d1"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["63961914a58c80b6cac7b6aab1f0ffcc19ab4ecd"],"1b54a9bc667895a2095a886184bf69a3179e63df":["87b6140eb35784da365e76a7236e4cd52a1a396c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"0dabcca520e81aeff96f5c937b7ffb5617ee69d1":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"63961914a58c80b6cac7b6aab1f0ffcc19ab4ecd":["1b54a9bc667895a2095a886184bf69a3179e63df"],"87b6140eb35784da365e76a7236e4cd52a1a396c":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}