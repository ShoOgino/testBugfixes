{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#checkVersionFieldExistsInSchema(IndexSchema,CoreDescriptor).mjava","commits":[{"id":"54bb8da55080e4569804e0661b83a3c72cbd8d4d","date":1429691126,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#checkVersionFieldExistsInSchema(IndexSchema,CoreDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  private void checkVersionFieldExistsInSchema(IndexSchema schema, CoreDescriptor coreDescriptor) {\n    if (null != coreDescriptor.getCloudDescriptor()) {\n      // we are evidently running in cloud mode.  \n      //\n      // In cloud mode, version field is required for correct consistency\n      // ideally this check would be more fine grained, and individual features\n      // would assert it when they initialize, but DistributedUpdateProcessor\n      // is currently a big ball of wax that does more then just distributing\n      // updates (ie: partial document updates), so it needs to work in no cloud\n      // mode as well, and can't assert version field support on init.\n\n      try {\n        VersionInfo.getAndCheckVersionField(schema);\n      } catch (SolrException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                \"Schema will not work with SolrCloud mode: \" +\n                                e.getMessage(), e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["96e0d4494fe54b31c7f0151f3a632124ab806351"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96e0d4494fe54b31c7f0151f3a632124ab806351","date":1512410218,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#checkVersionFieldExistsInSchema(IndexSchema,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#checkVersionFieldExistsInSchema(IndexSchema,CoreDescriptor).mjava","sourceNew":"  private void checkVersionFieldExistsInSchema(IndexSchema schema, CoreDescriptor coreDescriptor) {\n    if (null != coreDescriptor.getCloudDescriptor()) {\n      // we are evidently running in cloud mode.  \n      //\n      // In cloud mode, version field is required for correct consistency\n      // ideally this check would be more fine grained, and individual features\n      // would assert it when they initialize, but DistributedUpdateProcessor\n      // is currently a big ball of wax that does more then just distributing\n      // updates (ie: partial document updates), so it needs to work in no cloud\n      // mode as well, and can't assert version field support on init.\n\n      try {\n        VersionInfo.getAndCheckVersionField(schema);\n      } catch (SolrException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n                                \"Schema will not work with SolrCloud mode: \" +\n                                e.getMessage(), e);\n      }\n    }\n  }\n\n","sourceOld":"  private void checkVersionFieldExistsInSchema(IndexSchema schema, CoreDescriptor coreDescriptor) {\n    if (null != coreDescriptor.getCloudDescriptor()) {\n      // we are evidently running in cloud mode.  \n      //\n      // In cloud mode, version field is required for correct consistency\n      // ideally this check would be more fine grained, and individual features\n      // would assert it when they initialize, but DistributedUpdateProcessor\n      // is currently a big ball of wax that does more then just distributing\n      // updates (ie: partial document updates), so it needs to work in no cloud\n      // mode as well, and can't assert version field support on init.\n\n      try {\n        VersionInfo.getAndCheckVersionField(schema);\n      } catch (SolrException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                \"Schema will not work with SolrCloud mode: \" +\n                                e.getMessage(), e);\n      }\n    }\n  }\n\n","bugFix":["54bb8da55080e4569804e0661b83a3c72cbd8d4d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#checkVersionFieldExistsInSchema(IndexSchema,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#checkVersionFieldExistsInSchema(IndexSchema,CoreDescriptor).mjava","sourceNew":"  private void checkVersionFieldExistsInSchema(IndexSchema schema, CoreDescriptor coreDescriptor) {\n    if (null != coreDescriptor.getCloudDescriptor()) {\n      // we are evidently running in cloud mode.  \n      //\n      // In cloud mode, version field is required for correct consistency\n      // ideally this check would be more fine grained, and individual features\n      // would assert it when they initialize, but DistributedUpdateProcessor\n      // is currently a big ball of wax that does more then just distributing\n      // updates (ie: partial document updates), so it needs to work in no cloud\n      // mode as well, and can't assert version field support on init.\n\n      try {\n        VersionInfo.getAndCheckVersionField(schema);\n      } catch (SolrException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Schema will not work with SolrCloud mode: \" +\n                e.getMessage(), e);\n      }\n    }\n  }\n\n","sourceOld":"  private void checkVersionFieldExistsInSchema(IndexSchema schema, CoreDescriptor coreDescriptor) {\n    if (null != coreDescriptor.getCloudDescriptor()) {\n      // we are evidently running in cloud mode.  \n      //\n      // In cloud mode, version field is required for correct consistency\n      // ideally this check would be more fine grained, and individual features\n      // would assert it when they initialize, but DistributedUpdateProcessor\n      // is currently a big ball of wax that does more then just distributing\n      // updates (ie: partial document updates), so it needs to work in no cloud\n      // mode as well, and can't assert version field support on init.\n\n      try {\n        VersionInfo.getAndCheckVersionField(schema);\n      } catch (SolrException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n                                \"Schema will not work with SolrCloud mode: \" +\n                                e.getMessage(), e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54bb8da55080e4569804e0661b83a3c72cbd8d4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"96e0d4494fe54b31c7f0151f3a632124ab806351":["54bb8da55080e4569804e0661b83a3c72cbd8d4d"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["96e0d4494fe54b31c7f0151f3a632124ab806351"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2668c99990e4c94a78bac005aa682b7c5986d23a"]},"commit2Childs":{"54bb8da55080e4569804e0661b83a3c72cbd8d4d":["96e0d4494fe54b31c7f0151f3a632124ab806351"],"96e0d4494fe54b31c7f0151f3a632124ab806351":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54bb8da55080e4569804e0661b83a3c72cbd8d4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}