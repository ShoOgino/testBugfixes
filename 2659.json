{"path":"solr/core/src/test/org/apache/solr/cloud/ConnectionManagerTest#testConnectionManager().mjava","commits":[{"id":"6467320c43ab0ba587737c696baf790aa278abe3","date":1388269104,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ConnectionManagerTest#testConnectionManager().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore\n  public void testConnectionManager() throws Exception {\n    \n    createTempDir();\n    // setup a SolrZkClient to do some getBaseUrlForNodeName testing\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ConnectionManager cm = zkClient.getConnectionManager();\n      try {\n        System.err.println(\"ISEXPIRED:\" + cm.isLikelyExpired());\n        assertFalse(cm.isLikelyExpired());\n        \n        zkClient.getSolrZooKeeper().pauseCnxn(TIMEOUT);\n        \n        long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n        server.expire(sessionId);\n        Thread.sleep(TIMEOUT);\n        \n        assertTrue(cm.isLikelyExpired());\n      } finally {\n        cm.close();\n        zkClient.close();\n      }\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","1e9ce820cd3ed9efb959c181daaafd22f0c70143","be9f7175e1703e31f8d8de32612b7212db6acf76"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1416f9d09d016a6894cd17e1caac137dad2bba59","date":1395941020,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ConnectionManagerTest#testConnectionManager().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ConnectionManagerTest#testConnectionManager().mjava","sourceNew":"  @Ignore\n  public void testConnectionManager() throws Exception {\n    \n    // setup a SolrZkClient to do some getBaseUrlForNodeName testing\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ConnectionManager cm = zkClient.getConnectionManager();\n      try {\n        System.err.println(\"ISEXPIRED:\" + cm.isLikelyExpired());\n        assertFalse(cm.isLikelyExpired());\n        \n        zkClient.getSolrZooKeeper().pauseCnxn(TIMEOUT);\n        \n        long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n        server.expire(sessionId);\n        Thread.sleep(TIMEOUT);\n        \n        assertTrue(cm.isLikelyExpired());\n      } finally {\n        cm.close();\n        zkClient.close();\n      }\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Ignore\n  public void testConnectionManager() throws Exception {\n    \n    createTempDir();\n    // setup a SolrZkClient to do some getBaseUrlForNodeName testing\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ConnectionManager cm = zkClient.getConnectionManager();\n      try {\n        System.err.println(\"ISEXPIRED:\" + cm.isLikelyExpired());\n        assertFalse(cm.isLikelyExpired());\n        \n        zkClient.getSolrZooKeeper().pauseCnxn(TIMEOUT);\n        \n        long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n        server.expire(sessionId);\n        Thread.sleep(TIMEOUT);\n        \n        assertTrue(cm.isLikelyExpired());\n      } finally {\n        cm.close();\n        zkClient.close();\n      }\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ConnectionManagerTest#testConnectionManager().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ConnectionManagerTest#testConnectionManager().mjava","sourceNew":"  @Ignore\n  public void testConnectionManager() throws Exception {\n    \n    // setup a SolrZkClient to do some getBaseUrlForNodeName testing\n    String zkDir = createTempDir().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ConnectionManager cm = zkClient.getConnectionManager();\n      try {\n        System.err.println(\"ISEXPIRED:\" + cm.isLikelyExpired());\n        assertFalse(cm.isLikelyExpired());\n        \n        zkClient.getSolrZooKeeper().pauseCnxn(TIMEOUT);\n        \n        long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n        server.expire(sessionId);\n        Thread.sleep(TIMEOUT);\n        \n        assertTrue(cm.isLikelyExpired());\n      } finally {\n        cm.close();\n        zkClient.close();\n      }\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Ignore\n  public void testConnectionManager() throws Exception {\n    \n    createTempDir();\n    // setup a SolrZkClient to do some getBaseUrlForNodeName testing\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ConnectionManager cm = zkClient.getConnectionManager();\n      try {\n        System.err.println(\"ISEXPIRED:\" + cm.isLikelyExpired());\n        assertFalse(cm.isLikelyExpired());\n        \n        zkClient.getSolrZooKeeper().pauseCnxn(TIMEOUT);\n        \n        long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n        server.expire(sessionId);\n        Thread.sleep(TIMEOUT);\n        \n        assertTrue(cm.isLikelyExpired());\n      } finally {\n        cm.close();\n        zkClient.close();\n      }\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e9ce820cd3ed9efb959c181daaafd22f0c70143","date":1396201051,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ConnectionManagerTest#testConnectionManager().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ConnectionManagerTest#testConnectionManager().mjava","sourceNew":"  @Ignore\n  public void testConnectionManager() throws Exception {\n    \n    // setup a SolrZkClient to do some getBaseUrlForNodeName testing\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ConnectionManager cm = zkClient.getConnectionManager();\n      try {\n        System.err.println(\"ISEXPIRED:\" + cm.isLikelyExpired());\n        assertFalse(cm.isLikelyExpired());\n        \n        zkClient.getSolrZooKeeper().pauseCnxn(TIMEOUT);\n        \n        long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n        server.expire(sessionId);\n        Thread.sleep(TIMEOUT);\n        \n        assertTrue(cm.isLikelyExpired());\n      } finally {\n        cm.close();\n        zkClient.close();\n      }\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Ignore\n  public void testConnectionManager() throws Exception {\n    \n    // setup a SolrZkClient to do some getBaseUrlForNodeName testing\n    String zkDir = createTempDir().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ConnectionManager cm = zkClient.getConnectionManager();\n      try {\n        System.err.println(\"ISEXPIRED:\" + cm.isLikelyExpired());\n        assertFalse(cm.isLikelyExpired());\n        \n        zkClient.getSolrZooKeeper().pauseCnxn(TIMEOUT);\n        \n        long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n        server.expire(sessionId);\n        Thread.sleep(TIMEOUT);\n        \n        assertTrue(cm.isLikelyExpired());\n      } finally {\n        cm.close();\n        zkClient.close();\n      }\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":["bb1f22cfa77230b5f05b7784feae5367f6bbb488","6467320c43ab0ba587737c696baf790aa278abe3"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ConnectionManagerTest#testConnectionManager().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ConnectionManagerTest#testConnectionManager().mjava","sourceNew":"  @Ignore\n  public void testConnectionManager() throws Exception {\n    \n    // setup a SolrZkClient to do some getBaseUrlForNodeName testing\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ConnectionManager cm = zkClient.getConnectionManager();\n      try {\n        System.err.println(\"ISEXPIRED:\" + cm.isLikelyExpired());\n        assertFalse(cm.isLikelyExpired());\n        \n        zkClient.getSolrZooKeeper().pauseCnxn(TIMEOUT);\n        \n        long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n        server.expire(sessionId);\n        Thread.sleep(TIMEOUT);\n        \n        assertTrue(cm.isLikelyExpired());\n      } finally {\n        cm.close();\n        zkClient.close();\n      }\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Ignore\n  public void testConnectionManager() throws Exception {\n    \n    // setup a SolrZkClient to do some getBaseUrlForNodeName testing\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ConnectionManager cm = zkClient.getConnectionManager();\n      try {\n        System.err.println(\"ISEXPIRED:\" + cm.isLikelyExpired());\n        assertFalse(cm.isLikelyExpired());\n        \n        zkClient.getSolrZooKeeper().pauseCnxn(TIMEOUT);\n        \n        long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n        server.expire(sessionId);\n        Thread.sleep(TIMEOUT);\n        \n        assertTrue(cm.isLikelyExpired());\n      } finally {\n        cm.close();\n        zkClient.close();\n      }\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be9f7175e1703e31f8d8de32612b7212db6acf76","date":1408660152,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ConnectionManagerTest#testConnectionManager().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ConnectionManagerTest#testConnectionManager().mjava","sourceNew":"  @Ignore\n  public void testConnectionManager() throws Exception {\n    \n    // setup a SolrZkClient to do some getBaseUrlForNodeName testing\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ConnectionManager cm = zkClient.getConnectionManager();\n      try {\n        assertFalse(cm.isLikelyExpired());\n\n        zkClient.getSolrZooKeeper().closeCnxn();\n        \n        long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n        server.expire(sessionId);\n        Thread.sleep(TIMEOUT);\n        \n        assertTrue(cm.isLikelyExpired());\n      } finally {\n        cm.close();\n        zkClient.close();\n      }\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Ignore\n  public void testConnectionManager() throws Exception {\n    \n    // setup a SolrZkClient to do some getBaseUrlForNodeName testing\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ConnectionManager cm = zkClient.getConnectionManager();\n      try {\n        System.err.println(\"ISEXPIRED:\" + cm.isLikelyExpired());\n        assertFalse(cm.isLikelyExpired());\n        \n        zkClient.getSolrZooKeeper().pauseCnxn(TIMEOUT);\n        \n        long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n        server.expire(sessionId);\n        Thread.sleep(TIMEOUT);\n        \n        assertTrue(cm.isLikelyExpired());\n      } finally {\n        cm.close();\n        zkClient.close();\n      }\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":["6467320c43ab0ba587737c696baf790aa278abe3"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ConnectionManagerTest#testConnectionManager().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ConnectionManagerTest#testConnectionManager().mjava","sourceNew":"  @Ignore\n  public void testConnectionManager() throws Exception {\n    \n    // setup a SolrZkClient to do some getBaseUrlForNodeName testing\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ConnectionManager cm = zkClient.getConnectionManager();\n      try {\n        assertFalse(cm.isLikelyExpired());\n\n        zkClient.getSolrZooKeeper().closeCnxn();\n        \n        long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n        server.expire(sessionId);\n        Thread.sleep(TIMEOUT);\n        \n        assertTrue(cm.isLikelyExpired());\n      } finally {\n        cm.close();\n        zkClient.close();\n      }\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Ignore\n  public void testConnectionManager() throws Exception {\n    \n    // setup a SolrZkClient to do some getBaseUrlForNodeName testing\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ConnectionManager cm = zkClient.getConnectionManager();\n      try {\n        assertFalse(cm.isLikelyExpired());\n\n        zkClient.getSolrZooKeeper().closeCnxn();\n        \n        long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n        server.expire(sessionId);\n        Thread.sleep(TIMEOUT);\n        \n        assertTrue(cm.isLikelyExpired());\n      } finally {\n        cm.close();\n        zkClient.close();\n      }\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ConnectionManagerTest#testConnectionManager().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ConnectionManagerTest#testConnectionManager().mjava","sourceNew":"  @Ignore\n  public void testConnectionManager() throws Exception {\n    \n    // setup a SolrZkClient to do some getBaseUrlForNodeName testing\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n      \n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ConnectionManager cm = zkClient.getConnectionManager();\n      try {\n        assertFalse(cm.isLikelyExpired());\n\n        zkClient.getSolrZooKeeper().closeCnxn();\n        \n        long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n        server.expire(sessionId);\n        Thread.sleep(TIMEOUT);\n        \n        assertTrue(cm.isLikelyExpired());\n      } finally {\n        cm.close();\n        zkClient.close();\n      }\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Ignore\n  public void testConnectionManager() throws Exception {\n    \n    // setup a SolrZkClient to do some getBaseUrlForNodeName testing\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ConnectionManager cm = zkClient.getConnectionManager();\n      try {\n        assertFalse(cm.isLikelyExpired());\n\n        zkClient.getSolrZooKeeper().closeCnxn();\n        \n        long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n        server.expire(sessionId);\n        Thread.sleep(TIMEOUT);\n        \n        assertTrue(cm.isLikelyExpired());\n      } finally {\n        cm.close();\n        zkClient.close();\n      }\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":["6467320c43ab0ba587737c696baf790aa278abe3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1778938cb7fb298e6e07a43e2d5acaf552d61518","date":1559609435,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ConnectionManagerTest#testConnectionManager().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ConnectionManagerTest#testConnectionManager().mjava","sourceNew":"  @Ignore\n  public void testConnectionManager() throws Exception {\n    \n    // setup a SolrZkClient to do some getBaseUrlForNodeName testing\n    Path zkDir = createTempDir(\"zkData\");\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n      \n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ConnectionManager cm = zkClient.getConnectionManager();\n      try {\n        assertFalse(cm.isLikelyExpired());\n\n        zkClient.getSolrZooKeeper().closeCnxn();\n        \n        long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n        server.expire(sessionId);\n        Thread.sleep(TIMEOUT);\n        \n        assertTrue(cm.isLikelyExpired());\n      } finally {\n        cm.close();\n        zkClient.close();\n      }\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Ignore\n  public void testConnectionManager() throws Exception {\n    \n    // setup a SolrZkClient to do some getBaseUrlForNodeName testing\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n      \n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ConnectionManager cm = zkClient.getConnectionManager();\n      try {\n        assertFalse(cm.isLikelyExpired());\n\n        zkClient.getSolrZooKeeper().closeCnxn();\n        \n        long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n        server.expire(sessionId);\n        Thread.sleep(TIMEOUT);\n        \n        assertTrue(cm.isLikelyExpired());\n      } finally {\n        cm.close();\n        zkClient.close();\n      }\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6467320c43ab0ba587737c696baf790aa278abe3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["6467320c43ab0ba587737c696baf790aa278abe3"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["1416f9d09d016a6894cd17e1caac137dad2bba59","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["f4abec28b874149a7223e32cc7a01704c27790de"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["6467320c43ab0ba587737c696baf790aa278abe3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["be9f7175e1703e31f8d8de32612b7212db6acf76"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"be9f7175e1703e31f8d8de32612b7212db6acf76":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1778938cb7fb298e6e07a43e2d5acaf552d61518"]},"commit2Childs":{"6467320c43ab0ba587737c696baf790aa278abe3":["bb1f22cfa77230b5f05b7784feae5367f6bbb488","1416f9d09d016a6894cd17e1caac137dad2bba59"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["be9f7175e1703e31f8d8de32612b7212db6acf76"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6467320c43ab0ba587737c696baf790aa278abe3"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"f4abec28b874149a7223e32cc7a01704c27790de":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"be9f7175e1703e31f8d8de32612b7212db6acf76":["f4abec28b874149a7223e32cc7a01704c27790de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}