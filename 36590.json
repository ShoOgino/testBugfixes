{"path":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(Automaton,String,IndexReader).mjava","commits":[{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(Automaton,String,IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(Automaton,Term,IndexReader).mjava","sourceNew":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied reader.\n   * <p>\n   * It will automatically calculate whether or not the automaton is finite\n   */\n  public AutomatonTermsEnum(Automaton automaton, String field, IndexReader reader)\n    throws IOException {\n    this(new ByteRunAutomaton(automaton), field, reader, SpecialOperations.isFinite(automaton), null);\n  }\n\n","sourceOld":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied reader.\n   * <p>\n   * It will automatically calculate whether or not the automaton is finite\n   */\n  public AutomatonTermsEnum(Automaton automaton, Term queryTerm, IndexReader reader)\n      throws IOException {\n    this(automaton, null, queryTerm, reader, SpecialOperations.isFinite(automaton));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8dd2a69747e9f2922fd8b6970bd1661b26a692d","date":1291080135,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(Automaton,TermsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(Automaton,String,IndexReader).mjava","sourceNew":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * It will automatically calculate whether or not the automaton is finite\n   */\n  public AutomatonTermsEnum(Automaton automaton, TermsEnum tenum)\n    throws IOException {\n    this(new ByteRunAutomaton(automaton), tenum, SpecialOperations.isFinite(automaton), null);\n  }\n\n","sourceOld":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied reader.\n   * <p>\n   * It will automatically calculate whether or not the automaton is finite\n   */\n  public AutomatonTermsEnum(Automaton automaton, String field, IndexReader reader)\n    throws IOException {\n    this(new ByteRunAutomaton(automaton), field, reader, SpecialOperations.isFinite(automaton), null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(Automaton,String,IndexReader).mjava","sourceNew":null,"sourceOld":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied reader.\n   * <p>\n   * It will automatically calculate whether or not the automaton is finite\n   */\n  public AutomatonTermsEnum(Automaton automaton, String field, IndexReader reader)\n    throws IOException {\n    this(new ByteRunAutomaton(automaton), field, reader, SpecialOperations.isFinite(automaton), null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(Automaton,String,IndexReader).mjava","sourceNew":null,"sourceOld":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied reader.\n   * <p>\n   * It will automatically calculate whether or not the automaton is finite\n   */\n  public AutomatonTermsEnum(Automaton automaton, String field, IndexReader reader)\n    throws IOException {\n    this(new ByteRunAutomaton(automaton), field, reader, SpecialOperations.isFinite(automaton), null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5acb0ee59cc50caf85402e92d148fdb2af61bc19","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"3bb13258feba31ab676502787ab2e1779f129b7a":["5acb0ee59cc50caf85402e92d148fdb2af61bc19","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e8dd2a69747e9f2922fd8b6970bd1661b26a692d"]},"commit2Childs":{"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e8dd2a69747e9f2922fd8b6970bd1661b26a692d","3bb13258feba31ab676502787ab2e1779f129b7a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}