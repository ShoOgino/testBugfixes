{"path":"solr/solrj/src/test/org/apache/solr/common/util/TestTimeSource#doTestEpochTime(TimeSource).mjava","commits":[{"id":"4404f65815cc874649176858833ace645e4ca172","date":1520945234,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestTimeSource#doTestEpochTime(TimeSource).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestEpochTime(TimeSource ts) throws Exception {\n    long prevTime = ts.getTime();\n    long prevEpochTime = ts.getEpochTime();\n    long delta = 500000000; // 500 ms\n    for (int i = 0; i < 10; i++) {\n      ts.sleep(500);\n      long curTime = ts.getTime();\n      long curEpochTime = ts.getEpochTime();\n      long diff = prevTime + delta - curTime;\n      assertTrue(ts + \" time diff=\" + diff, diff < 100000);\n      diff = prevEpochTime + delta - curEpochTime;\n      assertTrue(ts + \" epochTime diff=\" + diff, diff < 100000);\n      prevTime = curTime;\n      prevEpochTime = curEpochTime;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50379735fb6e783eb86e7b567b2c9dfb3ab41ecf","date":1521111131,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestTimeSource#doTestEpochTime(TimeSource).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestTimeSource#doTestEpochTime(TimeSource).mjava","sourceNew":"  private void doTestEpochTime(TimeSource ts) throws Exception {\n    long prevTime = ts.getTime();\n    long prevEpochTime = ts.getEpochTime();\n    long delta = 500000000; // 500 ms\n    long maxDiff = 200000;\n    if (ts instanceof TimeSource.SimTimeSource) {\n      maxDiff = Math.round(maxDiff * ((TimeSource.SimTimeSource)ts).multiplier);\n    }\n    for (int i = 0; i < 10; i++) {\n      ts.sleep(500);\n      long curTime = ts.getTime();\n      long curEpochTime = ts.getEpochTime();\n      long diff = prevTime + delta - curTime;\n      assertTrue(ts + \" time diff=\" + diff, diff < maxDiff);\n      diff = prevEpochTime + delta - curEpochTime;\n      assertTrue(ts + \" epochTime diff=\" + diff, diff < maxDiff);\n      prevTime = curTime;\n      prevEpochTime = curEpochTime;\n    }\n  }\n\n","sourceOld":"  private void doTestEpochTime(TimeSource ts) throws Exception {\n    long prevTime = ts.getTime();\n    long prevEpochTime = ts.getEpochTime();\n    long delta = 500000000; // 500 ms\n    for (int i = 0; i < 10; i++) {\n      ts.sleep(500);\n      long curTime = ts.getTime();\n      long curEpochTime = ts.getEpochTime();\n      long diff = prevTime + delta - curTime;\n      assertTrue(ts + \" time diff=\" + diff, diff < 100000);\n      diff = prevEpochTime + delta - curEpochTime;\n      assertTrue(ts + \" epochTime diff=\" + diff, diff < 100000);\n      prevTime = curTime;\n      prevEpochTime = curEpochTime;\n    }\n  }\n\n","bugFix":null,"bugIntro":["e24e6792896eefa34615902a258bb49fa91af575"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4412883c12067d8a4e2a354aa8adc58c32be1d6","date":1521129281,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestTimeSource#doTestEpochTime(TimeSource).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestTimeSource#doTestEpochTime(TimeSource).mjava","sourceNew":"  private void doTestEpochTime(TimeSource ts) throws Exception {\n    long prevTime = ts.getTimeNs();\n    long prevEpochTime = ts.getEpochTimeNs();\n    long delta = 500000000; // 500 ms\n    long maxDiff = 200000;\n    if (ts instanceof TimeSource.SimTimeSource) {\n      maxDiff = Math.round(maxDiff * ((TimeSource.SimTimeSource)ts).multiplier);\n    }\n    for (int i = 0; i < 10; i++) {\n      ts.sleep(500);\n      long curTime = ts.getTimeNs();\n      long curEpochTime = ts.getEpochTimeNs();\n      long diff = prevTime + delta - curTime;\n      assertTrue(ts + \" time diff=\" + diff, diff < maxDiff);\n      diff = prevEpochTime + delta - curEpochTime;\n      assertTrue(ts + \" epochTime diff=\" + diff, diff < maxDiff);\n      prevTime = curTime;\n      prevEpochTime = curEpochTime;\n    }\n  }\n\n","sourceOld":"  private void doTestEpochTime(TimeSource ts) throws Exception {\n    long prevTime = ts.getTime();\n    long prevEpochTime = ts.getEpochTime();\n    long delta = 500000000; // 500 ms\n    long maxDiff = 200000;\n    if (ts instanceof TimeSource.SimTimeSource) {\n      maxDiff = Math.round(maxDiff * ((TimeSource.SimTimeSource)ts).multiplier);\n    }\n    for (int i = 0; i < 10; i++) {\n      ts.sleep(500);\n      long curTime = ts.getTime();\n      long curEpochTime = ts.getEpochTime();\n      long diff = prevTime + delta - curTime;\n      assertTrue(ts + \" time diff=\" + diff, diff < maxDiff);\n      diff = prevEpochTime + delta - curEpochTime;\n      assertTrue(ts + \" epochTime diff=\" + diff, diff < maxDiff);\n      prevTime = curTime;\n      prevEpochTime = curEpochTime;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aefc3d57de19155abe8d0b4e8fd801d87e448e22","date":1526897534,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestTimeSource#doTestEpochTime(TimeSource).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestTimeSource#doTestEpochTime(TimeSource).mjava","sourceNew":"  private void doTestEpochTime(TimeSource ts) throws Exception {\n\n    // XXX the method below doesn't work reliably because\n    // XXX there could be a long thread context switch between these two calls:\n    // long prevTime = ts.getTimeNs();\n    // long prevEpochTime = ts.getEpochTimeNs();\n\n    long[] prevTimeAndEpoch = ts.getTimeAndEpochNs();\n    long delta = 500000000; // 500 ms\n    long maxDiff = 200000;\n    if (ts instanceof TimeSource.SimTimeSource) {\n      maxDiff = Math.round(maxDiff * ((TimeSource.SimTimeSource)ts).multiplier);\n    }\n    for (int i = 0; i < 10; i++) {\n      ts.sleep(500);\n      long[] curTimeAndEpoch = ts.getTimeAndEpochNs();\n      long diff = prevTimeAndEpoch[0] + delta - curTimeAndEpoch[0];\n      assertTrue(ts + \" time diff=\" + diff, diff < maxDiff);\n      diff = prevTimeAndEpoch[1] + delta - curTimeAndEpoch[1];\n      assertTrue(ts + \" epochTime diff=\" + diff, diff < maxDiff);\n      prevTimeAndEpoch = curTimeAndEpoch;\n    }\n  }\n\n","sourceOld":"  private void doTestEpochTime(TimeSource ts) throws Exception {\n    long prevTime = ts.getTimeNs();\n    long prevEpochTime = ts.getEpochTimeNs();\n    long delta = 500000000; // 500 ms\n    long maxDiff = 200000;\n    if (ts instanceof TimeSource.SimTimeSource) {\n      maxDiff = Math.round(maxDiff * ((TimeSource.SimTimeSource)ts).multiplier);\n    }\n    for (int i = 0; i < 10; i++) {\n      ts.sleep(500);\n      long curTime = ts.getTimeNs();\n      long curEpochTime = ts.getEpochTimeNs();\n      long diff = prevTime + delta - curTime;\n      assertTrue(ts + \" time diff=\" + diff, diff < maxDiff);\n      diff = prevEpochTime + delta - curEpochTime;\n      assertTrue(ts + \" epochTime diff=\" + diff, diff < maxDiff);\n      prevTime = curTime;\n      prevEpochTime = curEpochTime;\n    }\n  }\n\n","bugFix":null,"bugIntro":["e24e6792896eefa34615902a258bb49fa91af575"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e24e6792896eefa34615902a258bb49fa91af575","date":1530094586,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestTimeSource#doTestEpochTime(TimeSource).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestTimeSource#doTestEpochTime(TimeSource).mjava","sourceNew":"  private void doTestEpochTime(TimeSource ts) throws Exception {\n\n    // XXX the method below doesn't work reliably because\n    // XXX there could be a long thread context switch between these two calls:\n    // long prevTime = ts.getTimeNs();\n    // long prevEpochTime = ts.getEpochTimeNs();\n\n    long[] prevTimeAndEpoch = ts.getTimeAndEpochNs();\n    long delta = 500000000; // 500 ms\n    long maxDiff = 1000;\n    for (int i = 0; i < 10; i++) {\n      ts.sleep(500);\n      long[] curTimeAndEpoch = ts.getTimeAndEpochNs();\n      long diffTime = prevTimeAndEpoch[0] + delta - curTimeAndEpoch[0];\n      long diffEpoch = prevTimeAndEpoch[1] + delta - curTimeAndEpoch[1];\n      assertTrue(ts + \" diffTime=\" + diffTime + \", diffEpoch=\" + diffEpoch, Math.abs(diffTime - diffEpoch) < maxDiff);\n      prevTimeAndEpoch = curTimeAndEpoch;\n    }\n  }\n\n","sourceOld":"  private void doTestEpochTime(TimeSource ts) throws Exception {\n\n    // XXX the method below doesn't work reliably because\n    // XXX there could be a long thread context switch between these two calls:\n    // long prevTime = ts.getTimeNs();\n    // long prevEpochTime = ts.getEpochTimeNs();\n\n    long[] prevTimeAndEpoch = ts.getTimeAndEpochNs();\n    long delta = 500000000; // 500 ms\n    long maxDiff = 200000;\n    if (ts instanceof TimeSource.SimTimeSource) {\n      maxDiff = Math.round(maxDiff * ((TimeSource.SimTimeSource)ts).multiplier);\n    }\n    for (int i = 0; i < 10; i++) {\n      ts.sleep(500);\n      long[] curTimeAndEpoch = ts.getTimeAndEpochNs();\n      long diff = prevTimeAndEpoch[0] + delta - curTimeAndEpoch[0];\n      assertTrue(ts + \" time diff=\" + diff, diff < maxDiff);\n      diff = prevTimeAndEpoch[1] + delta - curTimeAndEpoch[1];\n      assertTrue(ts + \" epochTime diff=\" + diff, diff < maxDiff);\n      prevTimeAndEpoch = curTimeAndEpoch;\n    }\n  }\n\n","bugFix":["50379735fb6e783eb86e7b567b2c9dfb3ab41ecf","aefc3d57de19155abe8d0b4e8fd801d87e448e22"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestTimeSource#doTestEpochTime(TimeSource).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestTimeSource#doTestEpochTime(TimeSource).mjava","sourceNew":"  private void doTestEpochTime(TimeSource ts) throws Exception {\n\n    // XXX the method below doesn't work reliably because\n    // XXX there could be a long thread context switch between these two calls:\n    // long prevTime = ts.getTimeNs();\n    // long prevEpochTime = ts.getEpochTimeNs();\n\n    long[] prevTimeAndEpoch = ts.getTimeAndEpochNs();\n    long delta = 500000000; // 500 ms\n    long maxDiff = 1000;\n    for (int i = 0; i < 10; i++) {\n      ts.sleep(500);\n      long[] curTimeAndEpoch = ts.getTimeAndEpochNs();\n      long diffTime = prevTimeAndEpoch[0] + delta - curTimeAndEpoch[0];\n      long diffEpoch = prevTimeAndEpoch[1] + delta - curTimeAndEpoch[1];\n      assertTrue(ts + \" diffTime=\" + diffTime + \", diffEpoch=\" + diffEpoch, Math.abs(diffTime - diffEpoch) < maxDiff);\n      prevTimeAndEpoch = curTimeAndEpoch;\n    }\n  }\n\n","sourceOld":"  private void doTestEpochTime(TimeSource ts) throws Exception {\n\n    // XXX the method below doesn't work reliably because\n    // XXX there could be a long thread context switch between these two calls:\n    // long prevTime = ts.getTimeNs();\n    // long prevEpochTime = ts.getEpochTimeNs();\n\n    long[] prevTimeAndEpoch = ts.getTimeAndEpochNs();\n    long delta = 500000000; // 500 ms\n    long maxDiff = 200000;\n    if (ts instanceof TimeSource.SimTimeSource) {\n      maxDiff = Math.round(maxDiff * ((TimeSource.SimTimeSource)ts).multiplier);\n    }\n    for (int i = 0; i < 10; i++) {\n      ts.sleep(500);\n      long[] curTimeAndEpoch = ts.getTimeAndEpochNs();\n      long diff = prevTimeAndEpoch[0] + delta - curTimeAndEpoch[0];\n      assertTrue(ts + \" time diff=\" + diff, diff < maxDiff);\n      diff = prevTimeAndEpoch[1] + delta - curTimeAndEpoch[1];\n      assertTrue(ts + \" epochTime diff=\" + diff, diff < maxDiff);\n      prevTimeAndEpoch = curTimeAndEpoch;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestTimeSource#doTestEpochTime(TimeSource).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestTimeSource#doTestEpochTime(TimeSource).mjava","sourceNew":"  private void doTestEpochTime(TimeSource ts) throws Exception {\n\n    // XXX the method below doesn't work reliably because\n    // XXX there could be a long thread context switch between these two calls:\n    // long prevTime = ts.getTimeNs();\n    // long prevEpochTime = ts.getEpochTimeNs();\n\n    long[] prevTimeAndEpoch = ts.getTimeAndEpochNs();\n    long delta = 500000000; // 500 ms\n    long maxDiff = 1000;\n    for (int i = 0; i < 10; i++) {\n      ts.sleep(500);\n      long[] curTimeAndEpoch = ts.getTimeAndEpochNs();\n      long diffTime = prevTimeAndEpoch[0] + delta - curTimeAndEpoch[0];\n      long diffEpoch = prevTimeAndEpoch[1] + delta - curTimeAndEpoch[1];\n      assertTrue(ts + \" diffTime=\" + diffTime + \", diffEpoch=\" + diffEpoch, Math.abs(diffTime - diffEpoch) < maxDiff);\n      prevTimeAndEpoch = curTimeAndEpoch;\n    }\n  }\n\n","sourceOld":"  private void doTestEpochTime(TimeSource ts) throws Exception {\n\n    // XXX the method below doesn't work reliably because\n    // XXX there could be a long thread context switch between these two calls:\n    // long prevTime = ts.getTimeNs();\n    // long prevEpochTime = ts.getEpochTimeNs();\n\n    long[] prevTimeAndEpoch = ts.getTimeAndEpochNs();\n    long delta = 500000000; // 500 ms\n    long maxDiff = 200000;\n    if (ts instanceof TimeSource.SimTimeSource) {\n      maxDiff = Math.round(maxDiff * ((TimeSource.SimTimeSource)ts).multiplier);\n    }\n    for (int i = 0; i < 10; i++) {\n      ts.sleep(500);\n      long[] curTimeAndEpoch = ts.getTimeAndEpochNs();\n      long diff = prevTimeAndEpoch[0] + delta - curTimeAndEpoch[0];\n      assertTrue(ts + \" time diff=\" + diff, diff < maxDiff);\n      diff = prevTimeAndEpoch[1] + delta - curTimeAndEpoch[1];\n      assertTrue(ts + \" epochTime diff=\" + diff, diff < maxDiff);\n      prevTimeAndEpoch = curTimeAndEpoch;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"50379735fb6e783eb86e7b567b2c9dfb3ab41ecf":["4404f65815cc874649176858833ace645e4ca172"],"aefc3d57de19155abe8d0b4e8fd801d87e448e22":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["aefc3d57de19155abe8d0b4e8fd801d87e448e22","e24e6792896eefa34615902a258bb49fa91af575"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e24e6792896eefa34615902a258bb49fa91af575":["aefc3d57de19155abe8d0b4e8fd801d87e448e22"],"4404f65815cc874649176858833ace645e4ca172":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["50379735fb6e783eb86e7b567b2c9dfb3ab41ecf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e24e6792896eefa34615902a258bb49fa91af575"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["aefc3d57de19155abe8d0b4e8fd801d87e448e22","e24e6792896eefa34615902a258bb49fa91af575"]},"commit2Childs":{"50379735fb6e783eb86e7b567b2c9dfb3ab41ecf":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"aefc3d57de19155abe8d0b4e8fd801d87e448e22":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","e24e6792896eefa34615902a258bb49fa91af575","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4404f65815cc874649176858833ace645e4ca172"],"4404f65815cc874649176858833ace645e4ca172":["50379735fb6e783eb86e7b567b2c9dfb3ab41ecf"],"e24e6792896eefa34615902a258bb49fa91af575":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["aefc3d57de19155abe8d0b4e8fd801d87e448e22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}