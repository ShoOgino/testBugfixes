{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRestartOverseer(String).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRestartOverseer(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Simulate the effect of restarting Overseer leader - in this case this means restarting the\n   * OverseerTriggerThread and optionally killing a node.\n   * @param killNodeId optional nodeId to kill. If null then don't kill any node, just restart the thread\n   */\n  public void simRestartOverseer(String killNodeId) throws Exception {\n    LOG.info(\"=== Restarting OverseerTriggerThread and clearing object cache...\");\n    triggerThread.interrupt();\n    IOUtils.closeQuietly(triggerThread);\n    if (killNodeId != null) {\n      simRemoveNode(killNodeId, true);\n    }\n    objectCache.clear();\n    OverseerTriggerThread trigger = new OverseerTriggerThread(loader, this,\n        new CloudConfig.CloudConfigBuilder(\"nonexistent\", 0, \"sim\").build());\n    triggerThread = new Overseer.OverseerThread(triggerThreadGroup, trigger, \"Simulated OverseerAutoScalingTriggerThread\");\n    triggerThread.start();\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f94e3cd399f3275b48f601d95bc80d6d9b7fc4ca"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a4422b331d00607258b0ed3e43934306e67764aa","date":1513943901,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRestartOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRestartOverseer(String).mjava","sourceNew":"  /**\n   * Simulate the effect of restarting Overseer leader - in this case this means restarting the\n   * OverseerTriggerThread and optionally killing a node. All background tasks currently in progress\n   * will be interrupted.\n   * @param killNodeId optional nodeId to kill. If null then don't kill any node, just restart the thread\n   */\n  public void simRestartOverseer(String killNodeId) throws Exception {\n    LOG.info(\"=== Restarting OverseerTriggerThread and clearing object cache...\");\n    triggerThread.interrupt();\n    IOUtils.closeQuietly(triggerThread);\n    if (killNodeId != null) {\n      simRemoveNode(killNodeId, false);\n    }\n    objectCache.clear();\n\n    try {\n      simCloudManagerPool.shutdownNow();\n    } catch (Exception e) {\n      // ignore\n    }\n    simCloudManagerPool = ExecutorUtil.newMDCAwareFixedThreadPool(200, new DefaultSolrThreadFactory(\"simCloudManagerPool\"));\n\n    OverseerTriggerThread trigger = new OverseerTriggerThread(loader, this,\n        new CloudConfig.CloudConfigBuilder(\"nonexistent\", 0, \"sim\").build());\n    triggerThread = new Overseer.OverseerThread(triggerThreadGroup, trigger, \"Simulated OverseerAutoScalingTriggerThread\");\n    triggerThread.start();\n\n  }\n\n","sourceOld":"  /**\n   * Simulate the effect of restarting Overseer leader - in this case this means restarting the\n   * OverseerTriggerThread and optionally killing a node.\n   * @param killNodeId optional nodeId to kill. If null then don't kill any node, just restart the thread\n   */\n  public void simRestartOverseer(String killNodeId) throws Exception {\n    LOG.info(\"=== Restarting OverseerTriggerThread and clearing object cache...\");\n    triggerThread.interrupt();\n    IOUtils.closeQuietly(triggerThread);\n    if (killNodeId != null) {\n      simRemoveNode(killNodeId, true);\n    }\n    objectCache.clear();\n    OverseerTriggerThread trigger = new OverseerTriggerThread(loader, this,\n        new CloudConfig.CloudConfigBuilder(\"nonexistent\", 0, \"sim\").build());\n    triggerThread = new Overseer.OverseerThread(triggerThreadGroup, trigger, \"Simulated OverseerAutoScalingTriggerThread\");\n    triggerThread.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRestartOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRestartOverseer(String).mjava","sourceNew":"  /**\n   * Simulate the effect of restarting Overseer leader - in this case this means restarting the\n   * OverseerTriggerThread and optionally killing a node. All background tasks currently in progress\n   * will be interrupted.\n   * @param killNodeId optional nodeId to kill. If null then don't kill any node, just restart the thread\n   */\n  public void simRestartOverseer(String killNodeId) throws Exception {\n    log.info(\"=== Restarting OverseerTriggerThread and clearing object cache...\");\n    triggerThread.interrupt();\n    IOUtils.closeQuietly(triggerThread);\n    if (killNodeId != null) {\n      simRemoveNode(killNodeId, false);\n    }\n    objectCache.clear();\n\n    try {\n      simCloudManagerPool.shutdownNow();\n    } catch (Exception e) {\n      // ignore\n    }\n    simCloudManagerPool = ExecutorUtil.newMDCAwareFixedThreadPool(200, new DefaultSolrThreadFactory(\"simCloudManagerPool\"));\n\n    OverseerTriggerThread trigger = new OverseerTriggerThread(loader, this,\n        new CloudConfig.CloudConfigBuilder(\"nonexistent\", 0, \"sim\").build());\n    triggerThread = new Overseer.OverseerThread(triggerThreadGroup, trigger, \"Simulated OverseerAutoScalingTriggerThread\");\n    triggerThread.start();\n\n  }\n\n","sourceOld":"  /**\n   * Simulate the effect of restarting Overseer leader - in this case this means restarting the\n   * OverseerTriggerThread and optionally killing a node. All background tasks currently in progress\n   * will be interrupted.\n   * @param killNodeId optional nodeId to kill. If null then don't kill any node, just restart the thread\n   */\n  public void simRestartOverseer(String killNodeId) throws Exception {\n    LOG.info(\"=== Restarting OverseerTriggerThread and clearing object cache...\");\n    triggerThread.interrupt();\n    IOUtils.closeQuietly(triggerThread);\n    if (killNodeId != null) {\n      simRemoveNode(killNodeId, false);\n    }\n    objectCache.clear();\n\n    try {\n      simCloudManagerPool.shutdownNow();\n    } catch (Exception e) {\n      // ignore\n    }\n    simCloudManagerPool = ExecutorUtil.newMDCAwareFixedThreadPool(200, new DefaultSolrThreadFactory(\"simCloudManagerPool\"));\n\n    OverseerTriggerThread trigger = new OverseerTriggerThread(loader, this,\n        new CloudConfig.CloudConfigBuilder(\"nonexistent\", 0, \"sim\").build());\n    triggerThread = new Overseer.OverseerThread(triggerThreadGroup, trigger, \"Simulated OverseerAutoScalingTriggerThread\");\n    triggerThread.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8254aa20264eb7a88d556bbe0346667937ed9c2a","date":1538494545,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRestartOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRestartOverseer(String).mjava","sourceNew":"  /**\n   * Simulate the effect of restarting Overseer leader - in this case this means restarting the\n   * OverseerTriggerThread and optionally killing a node. All background tasks currently in progress\n   * will be interrupted.\n   * @param killNodeId optional nodeId to kill. If null then don't kill any node, just restart the thread\n   */\n  public void simRestartOverseer(String killNodeId) throws Exception {\n    log.info(\"=== Restarting OverseerTriggerThread and clearing object cache...\");\n    triggerThread.interrupt();\n    IOUtils.closeQuietly(triggerThread);\n    if (killNodeId != null) {\n      log.info(\"  = killing node \" + killNodeId);\n      simRemoveNode(killNodeId, false);\n    }\n    objectCache.clear();\n\n    try {\n      simCloudManagerPool.shutdownNow();\n    } catch (Exception e) {\n      // ignore\n    }\n    simCloudManagerPool = ExecutorUtil.newMDCAwareFixedThreadPool(200, new DefaultSolrThreadFactory(\"simCloudManagerPool\"));\n\n    OverseerTriggerThread trigger = new OverseerTriggerThread(loader, this,\n        new CloudConfig.CloudConfigBuilder(\"nonexistent\", 0, \"sim\").build());\n    triggerThread = new Overseer.OverseerThread(triggerThreadGroup, trigger, \"Simulated OverseerAutoScalingTriggerThread\");\n    triggerThread.start();\n\n  }\n\n","sourceOld":"  /**\n   * Simulate the effect of restarting Overseer leader - in this case this means restarting the\n   * OverseerTriggerThread and optionally killing a node. All background tasks currently in progress\n   * will be interrupted.\n   * @param killNodeId optional nodeId to kill. If null then don't kill any node, just restart the thread\n   */\n  public void simRestartOverseer(String killNodeId) throws Exception {\n    log.info(\"=== Restarting OverseerTriggerThread and clearing object cache...\");\n    triggerThread.interrupt();\n    IOUtils.closeQuietly(triggerThread);\n    if (killNodeId != null) {\n      simRemoveNode(killNodeId, false);\n    }\n    objectCache.clear();\n\n    try {\n      simCloudManagerPool.shutdownNow();\n    } catch (Exception e) {\n      // ignore\n    }\n    simCloudManagerPool = ExecutorUtil.newMDCAwareFixedThreadPool(200, new DefaultSolrThreadFactory(\"simCloudManagerPool\"));\n\n    OverseerTriggerThread trigger = new OverseerTriggerThread(loader, this,\n        new CloudConfig.CloudConfigBuilder(\"nonexistent\", 0, \"sim\").build());\n    triggerThread = new Overseer.OverseerThread(triggerThreadGroup, trigger, \"Simulated OverseerAutoScalingTriggerThread\");\n    triggerThread.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"914270355efc1f9583010cb165bb031a1e698f84","date":1546908784,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRestartOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRestartOverseer(String).mjava","sourceNew":"  /**\n   * Simulate the effect of restarting Overseer leader - in this case this means closing the current\n   * {@link OverseerTriggerThread} (and optionally killing a node) then starting a new \n   * {@link OverseerTriggerThread}.\n   * All background tasks currently in progress will be interrupted.\n   * @param killNodeId optional nodeId to kill. If null then don't kill any node, just restart the thread\n   * @see #getOverseerTriggerThread\n   */\n  public void simRestartOverseer(String killNodeId) throws Exception {\n    log.info(\"=== Restarting OverseerTriggerThread and clearing object cache...\");\n    triggerThread.interrupt();\n    IOUtils.closeQuietly(triggerThread);\n    if (killNodeId != null) {\n      log.info(\"  = killing node \" + killNodeId);\n      simRemoveNode(killNodeId, false);\n    }\n    objectCache.clear();\n\n    try {\n      simCloudManagerPool.shutdownNow();\n    } catch (Exception e) {\n      // ignore\n    }\n    simCloudManagerPool = ExecutorUtil.newMDCAwareFixedThreadPool(200, new DefaultSolrThreadFactory(\"simCloudManagerPool\"));\n\n    OverseerTriggerThread trigger = new OverseerTriggerThread(loader, this,\n        new CloudConfig.CloudConfigBuilder(\"nonexistent\", 0, \"sim\").build());\n    triggerThread = new Overseer.OverseerThread(triggerThreadGroup, trigger, \"Simulated OverseerAutoScalingTriggerThread\");\n    triggerThread.start();\n\n  }\n\n","sourceOld":"  /**\n   * Simulate the effect of restarting Overseer leader - in this case this means restarting the\n   * OverseerTriggerThread and optionally killing a node. All background tasks currently in progress\n   * will be interrupted.\n   * @param killNodeId optional nodeId to kill. If null then don't kill any node, just restart the thread\n   */\n  public void simRestartOverseer(String killNodeId) throws Exception {\n    log.info(\"=== Restarting OverseerTriggerThread and clearing object cache...\");\n    triggerThread.interrupt();\n    IOUtils.closeQuietly(triggerThread);\n    if (killNodeId != null) {\n      log.info(\"  = killing node \" + killNodeId);\n      simRemoveNode(killNodeId, false);\n    }\n    objectCache.clear();\n\n    try {\n      simCloudManagerPool.shutdownNow();\n    } catch (Exception e) {\n      // ignore\n    }\n    simCloudManagerPool = ExecutorUtil.newMDCAwareFixedThreadPool(200, new DefaultSolrThreadFactory(\"simCloudManagerPool\"));\n\n    OverseerTriggerThread trigger = new OverseerTriggerThread(loader, this,\n        new CloudConfig.CloudConfigBuilder(\"nonexistent\", 0, \"sim\").build());\n    triggerThread = new Overseer.OverseerThread(triggerThreadGroup, trigger, \"Simulated OverseerAutoScalingTriggerThread\");\n    triggerThread.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRestartOverseer(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRestartOverseer(String).mjava","sourceNew":"  /**\n   * Simulate the effect of restarting Overseer leader - in this case this means closing the current\n   * {@link OverseerTriggerThread} (and optionally killing a node) then starting a new \n   * {@link OverseerTriggerThread}.\n   * All background tasks currently in progress will be interrupted.\n   * @param killNodeId optional nodeId to kill. If null then don't kill any node, just restart the thread\n   * @see #getOverseerTriggerThread\n   */\n  public void simRestartOverseer(String killNodeId) throws Exception {\n    log.info(\"=== Restarting OverseerTriggerThread and clearing object cache...\");\n    triggerThread.interrupt();\n    IOUtils.closeQuietly(triggerThread);\n    if (killNodeId != null) {\n      log.info(\"  = killing node \" + killNodeId);\n      simRemoveNode(killNodeId, false);\n    }\n    objectCache.clear();\n\n    try {\n      simCloudManagerPool.shutdownNow();\n    } catch (Exception e) {\n      // ignore\n    }\n    simCloudManagerPool = ExecutorUtil.newMDCAwareFixedThreadPool(200, new DefaultSolrThreadFactory(\"simCloudManagerPool\"));\n\n    OverseerTriggerThread trigger = new OverseerTriggerThread(loader, this,\n        new CloudConfig.CloudConfigBuilder(\"nonexistent\", 0, \"sim\").build());\n    triggerThread = new Overseer.OverseerThread(triggerThreadGroup, trigger, \"Simulated OverseerAutoScalingTriggerThread\");\n    triggerThread.start();\n\n  }\n\n","sourceOld":"  /**\n   * Simulate the effect of restarting Overseer leader - in this case this means closing the current\n   * {@link OverseerTriggerThread} (and optionally killing a node) then starting a new \n   * {@link OverseerTriggerThread}.\n   * All background tasks currently in progress will be interrupted.\n   * @param killNodeId optional nodeId to kill. If null then don't kill any node, just restart the thread\n   * @see #getOverseerTriggerThread\n   */\n  public void simRestartOverseer(String killNodeId) throws Exception {\n    log.info(\"=== Restarting OverseerTriggerThread and clearing object cache...\");\n    triggerThread.interrupt();\n    IOUtils.closeQuietly(triggerThread);\n    if (killNodeId != null) {\n      log.info(\"  = killing node \" + killNodeId);\n      simRemoveNode(killNodeId, false);\n    }\n    objectCache.clear();\n\n    try {\n      simCloudManagerPool.shutdownNow();\n    } catch (Exception e) {\n      // ignore\n    }\n    simCloudManagerPool = ExecutorUtil.newMDCAwareFixedThreadPool(200, new DefaultSolrThreadFactory(\"simCloudManagerPool\"));\n\n    OverseerTriggerThread trigger = new OverseerTriggerThread(loader, this,\n        new CloudConfig.CloudConfigBuilder(\"nonexistent\", 0, \"sim\").build());\n    triggerThread = new Overseer.OverseerThread(triggerThreadGroup, trigger, \"Simulated OverseerAutoScalingTriggerThread\");\n    triggerThread.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"914270355efc1f9583010cb165bb031a1e698f84":["8254aa20264eb7a88d556bbe0346667937ed9c2a"],"8254aa20264eb7a88d556bbe0346667937ed9c2a":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a4422b331d00607258b0ed3e43934306e67764aa":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["914270355efc1f9583010cb165bb031a1e698f84"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["a4422b331d00607258b0ed3e43934306e67764aa"]},"commit2Childs":{"914270355efc1f9583010cb165bb031a1e698f84":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"8254aa20264eb7a88d556bbe0346667937ed9c2a":["914270355efc1f9583010cb165bb031a1e698f84"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a4422b331d00607258b0ed3e43934306e67764aa":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a4422b331d00607258b0ed3e43934306e67764aa"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["8254aa20264eb7a88d556bbe0346667937ed9c2a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}