{"path":"src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"8ddf95246f079e162fbc4ef8f9d5cda419ff7eec","date":1194636258,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrParams required = params.required();\n    SolrCore core = req.getCore();\n    \n    // Check if the service is available\n    String healthcheck = core.getSolrConfig().get(\"admin/healthcheck/text()\", null );\n    if( healthcheck != null && !new File(healthcheck).exists() ) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Service disabled\", true);\n    }\n    \n    // Get the RequestHandler\n    String qt = required.get( CommonParams.QT );\n    SolrRequestHandler handler = core.getRequestHandler( qt );\n    if( handler == null ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Unknown RequestHandler: \"+qt );\n    }\n    \n    // Execute the ping query and catch any possible exception\n    Throwable ex = null;\n    try {\n      SolrQueryResponse pingrsp = new SolrQueryResponse();\n      core.execute(handler, req, pingrsp );\n      ex = pingrsp.getException();\n    }\n    catch( Throwable th ) {\n      ex = th;\n    }\n    \n    // Send an error or an 'OK' message (response code will be 200)\n    if( ex != null ) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n          \"Ping query caused exception: \"+ex.getMessage(), ex );\n    }\n    rsp.add( \"status\", \"OK\" );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ecf64fd5d58505365336999bd012e122cd1af41","5ecf64fd5d58505365336999bd012e122cd1af41","5ecf64fd5d58505365336999bd012e122cd1af41"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/PingRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrParams required = params.required();\n    SolrCore core = req.getCore();\n    \n    // Check if the service is available\n    String healthcheck = core.getSolrConfig().get(\"admin/healthcheck/text()\", null );\n    if( healthcheck != null && !new File(healthcheck).exists() ) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Service disabled\", true);\n    }\n    \n    // Get the RequestHandler\n    String qt = required.get( CommonParams.QT );\n    SolrRequestHandler handler = core.getRequestHandler( qt );\n    if( handler == null ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Unknown RequestHandler: \"+qt );\n    }\n    \n    // Execute the ping query and catch any possible exception\n    Throwable ex = null;\n    try {\n      SolrQueryResponse pingrsp = new SolrQueryResponse();\n      core.execute(handler, req, pingrsp );\n      ex = pingrsp.getException();\n    }\n    catch( Throwable th ) {\n      ex = th;\n    }\n    \n    // Send an error or an 'OK' message (response code will be 200)\n    if( ex != null ) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n          \"Ping query caused exception: \"+ex.getMessage(), ex );\n    }\n    rsp.add( \"status\", \"OK\" );\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrParams required = params.required();\n    SolrCore core = req.getCore();\n    \n    // Check if the service is available\n    String healthcheck = core.getSolrConfig().get(\"admin/healthcheck/text()\", null );\n    if( healthcheck != null && !new File(healthcheck).exists() ) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Service disabled\", true);\n    }\n    \n    // Get the RequestHandler\n    String qt = required.get( CommonParams.QT );\n    SolrRequestHandler handler = core.getRequestHandler( qt );\n    if( handler == null ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"Unknown RequestHandler: \"+qt );\n    }\n    \n    // Execute the ping query and catch any possible exception\n    Throwable ex = null;\n    try {\n      SolrQueryResponse pingrsp = new SolrQueryResponse();\n      core.execute(handler, req, pingrsp );\n      ex = pingrsp.getException();\n    }\n    catch( Throwable th ) {\n      ex = th;\n    }\n    \n    // Send an error or an 'OK' message (response code will be 200)\n    if( ex != null ) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n          \"Ping query caused exception: \"+ex.getMessage(), ex );\n    }\n    rsp.add( \"status\", \"OK\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8ddf95246f079e162fbc4ef8f9d5cda419ff7eec":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["8ddf95246f079e162fbc4ef8f9d5cda419ff7eec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8ddf95246f079e162fbc4ef8f9d5cda419ff7eec":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["8ddf95246f079e162fbc4ef8f9d5cda419ff7eec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}