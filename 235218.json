{"path":"lucene/misc/src/java/org/apache/lucene/search/DocValuesStatsCollector#getLeafCollector(LeafReaderContext).mjava","commits":[{"id":"12a6ecf587e83c0ee8d10b6f612d4f29b3c1fed1","date":1481713492,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/search/DocValuesStatsCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    boolean shouldProcess = stats.init(context);\n    if (!shouldProcess) {\n      // Stats cannot be computed for this segment, therefore consider all matching documents as a 'miss'. \n      return new LeafCollector() {\n        @Override public void setScorer(Scorer scorer) throws IOException {}\n\n        @Override\n        public void collect(int doc) throws IOException {\n          // All matching documents in this reader are missing a value\n          stats.addMissing();\n        }\n      };\n    }\n\n    return new LeafCollector() {\n      @Override public void setScorer(Scorer scorer) throws IOException {}\n\n      @Override\n      public void collect(int doc) throws IOException {\n        stats.accumulate(doc);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/search/DocValuesStatsCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    boolean shouldProcess = stats.init(context);\n    if (!shouldProcess) {\n      // Stats cannot be computed for this segment, therefore consider all matching documents as a 'miss'. \n      return new LeafCollector() {\n        @Override public void setScorer(Scorer scorer) throws IOException {}\n\n        @Override\n        public void collect(int doc) throws IOException {\n          // All matching documents in this reader are missing a value\n          stats.addMissing();\n        }\n      };\n    }\n\n    return new LeafCollector() {\n      @Override public void setScorer(Scorer scorer) throws IOException {}\n\n      @Override\n      public void collect(int doc) throws IOException {\n        stats.accumulate(doc);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285244982ce6aa163d1e60a707f0e6e121736ce5","date":1536055304,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/search/DocValuesStatsCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/search/DocValuesStatsCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    boolean shouldProcess = stats.init(context);\n    if (!shouldProcess) {\n      // Stats cannot be computed for this segment, therefore consider all matching documents as a 'miss'. \n      return new LeafCollector() {\n        @Override public void setScorer(Scorable scorer) throws IOException {}\n\n        @Override\n        public void collect(int doc) throws IOException {\n          // All matching documents in this reader are missing a value\n          stats.addMissing();\n        }\n      };\n    }\n\n    return new LeafCollector() {\n      @Override public void setScorer(Scorable scorer) throws IOException {}\n\n      @Override\n      public void collect(int doc) throws IOException {\n        stats.accumulate(doc);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    boolean shouldProcess = stats.init(context);\n    if (!shouldProcess) {\n      // Stats cannot be computed for this segment, therefore consider all matching documents as a 'miss'. \n      return new LeafCollector() {\n        @Override public void setScorer(Scorer scorer) throws IOException {}\n\n        @Override\n        public void collect(int doc) throws IOException {\n          // All matching documents in this reader are missing a value\n          stats.addMissing();\n        }\n      };\n    }\n\n    return new LeafCollector() {\n      @Override public void setScorer(Scorer scorer) throws IOException {}\n\n      @Override\n      public void collect(int doc) throws IOException {\n        stats.accumulate(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12a6ecf587e83c0ee8d10b6f612d4f29b3c1fed1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["12a6ecf587e83c0ee8d10b6f612d4f29b3c1fed1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","12a6ecf587e83c0ee8d10b6f612d4f29b3c1fed1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["285244982ce6aa163d1e60a707f0e6e121736ce5"]},"commit2Childs":{"12a6ecf587e83c0ee8d10b6f612d4f29b3c1fed1":["285244982ce6aa163d1e60a707f0e6e121736ce5","9856095f7afb5a607bf5e65077615ed91273508c"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12a6ecf587e83c0ee8d10b6f612d4f29b3c1fed1","9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}