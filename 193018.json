{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeQuery.VisitorTemplate#addIntersectingChildren().mjava","commits":[{"id":"672b198fc3dce868916c727917cae58c2906763d","date":1443669960,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeQuery.VisitorTemplate#addIntersectingChildren().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter.VisitorTemplate#addIntersectingChildren().mjava","sourceNew":"    /** Called initially, and whenever {@link #visitPrefix(org.apache.lucene.spatial.prefix.tree.Cell)}\n     * returns true. */\n    private void addIntersectingChildren() throws IOException {\n      assert thisTerm != null;\n      Cell cell = curVNode.cell;\n      if (cell.getLevel() >= detailLevel)\n        throw new IllegalStateException(\"Spatial logic error\");\n\n      //Decide whether to continue to divide & conquer, or whether it's time to\n      // scan through terms beneath this cell.\n      // Scanning is a performance optimization trade-off.\n\n      //TODO use termsEnum.docFreq() as heuristic\n      boolean scan = cell.getLevel() >= prefixGridScanLevel;//simple heuristic\n\n      if (!scan) {\n        //Divide & conquer (ultimately termsEnum.seek())\n\n        Iterator<Cell> subCellsIter = findSubCellsToVisit(cell);\n        if (!subCellsIter.hasNext())//not expected\n          return;\n        curVNode.children = new VNodeCellIterator(subCellsIter, new VNode(curVNode));\n\n      } else {\n        //Scan (loop of termsEnum.next())\n\n        scan(detailLevel);\n      }\n    }\n\n","sourceOld":"    /** Called initially, and whenever {@link #visitPrefix(org.apache.lucene.spatial.prefix.tree.Cell)}\n     * returns true. */\n    private void addIntersectingChildren() throws IOException {\n      assert thisTerm != null;\n      Cell cell = curVNode.cell;\n      if (cell.getLevel() >= detailLevel)\n        throw new IllegalStateException(\"Spatial logic error\");\n\n      //Decide whether to continue to divide & conquer, or whether it's time to\n      // scan through terms beneath this cell.\n      // Scanning is a performance optimization trade-off.\n\n      //TODO use termsEnum.docFreq() as heuristic\n      boolean scan = cell.getLevel() >= prefixGridScanLevel;//simple heuristic\n\n      if (!scan) {\n        //Divide & conquer (ultimately termsEnum.seek())\n\n        Iterator<Cell> subCellsIter = findSubCellsToVisit(cell);\n        if (!subCellsIter.hasNext())//not expected\n          return;\n        curVNode.children = new VNodeCellIterator(subCellsIter, new VNode(curVNode));\n\n      } else {\n        //Scan (loop of termsEnum.next())\n\n        scan(detailLevel);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeQuery.VisitorTemplate#addIntersectingChildren().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeQuery.VisitorTemplate#addIntersectingChildren().mjava","sourceNew":"    /** Called initially, and whenever {@link #visitPrefix(org.apache.lucene.spatial.prefix.tree.Cell)}\n     * returns true. */\n    private void addIntersectingChildren() throws IOException {\n      assert thisTerm != null;\n      Cell cell = curVNode.cell;\n      if (cell.getLevel() >= detailLevel)\n        throw new IllegalStateException(\"Spatial logic error\");\n\n      //Decide whether to continue to divide & conquer, or whether it's time to\n      // scan through terms beneath this cell.\n      // Scanning is a performance optimization trade-off.\n\n      //TODO use termsEnum.docFreq() as heuristic\n      boolean scan = cell.getLevel() >= prefixGridScanLevel;//simple heuristic\n\n      if (!scan) {\n        //Divide & conquer (ultimately termsEnum.seek())\n\n        Iterator<Cell> subCellsIter = findSubCellsToVisit(cell);\n        if (!subCellsIter.hasNext())//not expected\n          return;\n        curVNode.children = new VNodeCellIterator(subCellsIter, new VNode(curVNode));\n\n      } else {\n        //Scan (loop of termsEnum.next())\n\n        scan(detailLevel);\n      }\n    }\n\n","sourceOld":"    /** Called initially, and whenever {@link #visitPrefix(org.apache.lucene.spatial.prefix.tree.Cell)}\n     * returns true. */\n    private void addIntersectingChildren() throws IOException {\n      assert thisTerm != null;\n      Cell cell = curVNode.cell;\n      if (cell.getLevel() >= detailLevel)\n        throw new IllegalStateException(\"Spatial logic error\");\n\n      //Decide whether to continue to divide & conquer, or whether it's time to\n      // scan through terms beneath this cell.\n      // Scanning is a performance optimization trade-off.\n\n      //TODO use termsEnum.docFreq() as heuristic\n      boolean scan = cell.getLevel() >= prefixGridScanLevel;//simple heuristic\n\n      if (!scan) {\n        //Divide & conquer (ultimately termsEnum.seek())\n\n        Iterator<Cell> subCellsIter = findSubCellsToVisit(cell);\n        if (!subCellsIter.hasNext())//not expected\n          return;\n        curVNode.children = new VNodeCellIterator(subCellsIter, new VNode(curVNode));\n\n      } else {\n        //Scan (loop of termsEnum.next())\n\n        scan(detailLevel);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeQuery.VisitorTemplate#addIntersectingChildren().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeQuery.VisitorTemplate#addIntersectingChildren().mjava","sourceNew":"    /** Called initially, and whenever {@link #visitPrefix(org.apache.lucene.spatial.prefix.tree.Cell)}\n     * returns true. */\n    private void addIntersectingChildren() throws IOException {\n      assert thisTerm != null;\n      Cell cell = curVNode.cell;\n      if (cell.getLevel() >= detailLevel)\n        throw new IllegalStateException(\"Spatial logic error\");\n\n      //Decide whether to continue to divide & conquer, or whether it's time to\n      // scan through terms beneath this cell.\n      // Scanning is a performance optimization trade-off.\n\n      //TODO use termsEnum.docFreq() as heuristic\n      boolean scan = cell.getLevel() >= prefixGridScanLevel;//simple heuristic\n\n      if (!scan) {\n        //Divide & conquer (ultimately termsEnum.seek())\n\n        Iterator<Cell> subCellsIter = findSubCellsToVisit(cell);\n        if (!subCellsIter.hasNext())//not expected\n          return;\n        curVNode.children = new VNodeCellIterator(subCellsIter, new VNode(curVNode));\n\n      } else {\n        //Scan (loop of termsEnum.next())\n\n        scan(detailLevel);\n      }\n    }\n\n","sourceOld":"    /** Called initially, and whenever {@link #visitPrefix(org.apache.lucene.spatial.prefix.tree.Cell)}\n     * returns true. */\n    private void addIntersectingChildren() throws IOException {\n      assert thisTerm != null;\n      Cell cell = curVNode.cell;\n      if (cell.getLevel() >= detailLevel)\n        throw new IllegalStateException(\"Spatial logic error\");\n\n      //Decide whether to continue to divide & conquer, or whether it's time to\n      // scan through terms beneath this cell.\n      // Scanning is a performance optimization trade-off.\n\n      //TODO use termsEnum.docFreq() as heuristic\n      boolean scan = cell.getLevel() >= prefixGridScanLevel;//simple heuristic\n\n      if (!scan) {\n        //Divide & conquer (ultimately termsEnum.seek())\n\n        Iterator<Cell> subCellsIter = findSubCellsToVisit(cell);\n        if (!subCellsIter.hasNext())//not expected\n          return;\n        curVNode.children = new VNodeCellIterator(subCellsIter, new VNode(curVNode));\n\n      } else {\n        //Scan (loop of termsEnum.next())\n\n        scan(detailLevel);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["672b198fc3dce868916c727917cae58c2906763d","112d77ac8d3e10a362516ad834c9a11d35c94234"],"672b198fc3dce868916c727917cae58c2906763d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["672b198fc3dce868916c727917cae58c2906763d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"672b198fc3dce868916c727917cae58c2906763d":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["672b198fc3dce868916c727917cae58c2906763d"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}