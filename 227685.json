{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], StringField.TYPE_STORED));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newField(\"contents\", unstored[i], TextField.TYPE_UNSTORED));\n      doc.add(newField(\"city\", text[i], TextField.TYPE_STORED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], StringField.TYPE_STORED));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newField(\"contents\", unstored[i], TextField.TYPE_UNSTORED));\n      doc.add(newField(\"city\", text[i], TextField.TYPE_STORED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], StringField.TYPE_STORED));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newField(\"contents\", unstored[i], TextField.TYPE_UNSTORED));\n      doc.add(newField(\"city\", text[i], TextField.TYPE_STORED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], StringField.TYPE_STORED));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newField(\"contents\", unstored[i], TextField.TYPE_UNSTORED));\n      doc.add(newField(\"city\", text[i], TextField.TYPE_STORED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", keywords[i], StringField.TYPE_STORED));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newField(\"contents\", unstored[i], TextField.TYPE_UNSTORED));\n      doc.add(newField(\"city\", text[i], TextField.TYPE_STORED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newMockDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","bugFix":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newMockDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newMockDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newMockDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n\n    modifier.shutdown();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newMockDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newMockDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n\n    modifier.shutdown();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newMockDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n\n    modifier.shutdown();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newMockDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newMockDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n\n    modifier.shutdown();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newMockDirectory();\n    // test uses IW unref'ed helper which is unaware of retries\n    dir.setEnableVirusScanner(false);\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newMockDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9299079153fd7895bf3cf6835cf7019af2ba89b3","date":1417813477,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newMockDirectory();\n    // test uses IW unref'ed helper which is unaware of retries\n    dir.setEnableVirusScanner(false);\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n    assertTrue(modifier.deleter.isClosed());\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newMockDirectory();\n    // test uses IW unref'ed helper which is unaware of retries\n    dir.setEnableVirusScanner(false);\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n\n    modifier.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newMockDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n    assertTrue(modifier.deleter.isClosed());\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newMockDirectory();\n    // test uses IW unref'ed helper which is unaware of retries\n    dir.setEnableVirusScanner(false);\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n    assertTrue(modifier.deleter.isClosed());\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newMockDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n    assertTrue(modifier.deleter.isClosed());\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newMockDirectory();\n    // test uses IW unref'ed helper which is unaware of retries\n    dir.setEnableVirusScanner(false);\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n    assertTrue(modifier.deleter.isClosed());\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newMockDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n    assertTrue(modifier.deleter.isClosed());\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newMockDirectory();\n    // test uses IW unref'ed helper which is unaware of retries\n    dir.setEnableVirusScanner(false);\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n    assertTrue(modifier.deleter.isClosed());\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newMockDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n    assertTrue(modifier.deleter.isClosed());\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newMockDirectory();\n    // test uses IW unref'ed helper which is unaware of retries\n    dir.setEnableVirusScanner(false);\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n    assertTrue(modifier.deleter.isClosed());\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2","date":1588002560,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newMockDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n    assertTrue(modifier.isDeleterClosed());\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n\n    MockDirectoryWrapper.Failure failure = new MockDirectoryWrapper.Failure() {\n        boolean failed = false;\n        @Override\n        public MockDirectoryWrapper.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockDirectoryWrapper dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockDirectoryWrapper dir = newMockDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false)));\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    FieldType custom1 = new FieldType();\n    custom1.setStored(true);\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", keywords[i], Field.Store.YES));\n      doc.add(newField(\"country\", unindexed[i], custom1));\n      doc.add(newTextField(\"contents\", unstored[i], Field.Store.NO));\n      doc.add(newTextField(\"city\", text[i], Field.Store.YES));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: got expected exc:\");\n          io.printStackTrace(System.out);\n        }\n        break;\n      }\n    }\n    assertTrue(modifier.deleter.isClosed());\n\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["9299079153fd7895bf3cf6835cf7019af2ba89b3","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["9299079153fd7895bf3cf6835cf7019af2ba89b3","b470f36a9372c97283360b1304eacbde22df6c0d"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"aba371508186796cc6151d8223a5b4e16d02e26e":["04f07771a2a7dd3a395700665ed839c3dae2def2","d19974432be9aed28ee7dca73bdf01d139e763a9"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"b470f36a9372c97283360b1304eacbde22df6c0d":["9299079153fd7895bf3cf6835cf7019af2ba89b3","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["5a207d19eac354d649c3f0e2cce070017c78125e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"9299079153fd7895bf3cf6835cf7019af2ba89b3":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["9299079153fd7895bf3cf6835cf7019af2ba89b3"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["04f07771a2a7dd3a395700665ed839c3dae2def2","d19974432be9aed28ee7dca73bdf01d139e763a9"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"5a207d19eac354d649c3f0e2cce070017c78125e":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["9299079153fd7895bf3cf6835cf7019af2ba89b3"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["aba371508186796cc6151d8223a5b4e16d02e26e","d19974432be9aed28ee7dca73bdf01d139e763a9","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"d19974432be9aed28ee7dca73bdf01d139e763a9":["aba371508186796cc6151d8223a5b4e16d02e26e","ae14298f4eec6d5faee6a149f88ba57d14a6f21a","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9299079153fd7895bf3cf6835cf7019af2ba89b3":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}