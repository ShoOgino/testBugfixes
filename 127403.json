{"path":"src/java/org/apache/lucene/index/MultiSegmentReader.MultiTermEnum#MultiTermEnum(IndexReader[],int[],Term).mjava","commits":[{"id":"f7f2552b9f13037c62acd400d263d1e9262d6e4e","date":1185490328,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiSegmentReader.MultiTermEnum#MultiTermEnum(IndexReader[],int[],Term).mjava","pathOld":"/dev/null","sourceNew":"    public MultiTermEnum(IndexReader[] readers, int[] starts, Term t)\r\n      throws IOException {\r\n      queue = new SegmentMergeQueue(readers.length);\r\n      for (int i = 0; i < readers.length; i++) {\r\n        IndexReader reader = readers[i];\r\n        TermEnum termEnum;\r\n  \r\n        if (t != null) {\r\n          termEnum = reader.terms(t);\r\n        } else\r\n          termEnum = reader.terms();\r\n  \r\n        SegmentMergeInfo smi = new SegmentMergeInfo(starts[i], termEnum, reader);\r\n        if (t == null ? smi.next() : termEnum.term() != null)\r\n          queue.put(smi);          // initialize queue\r\n        else\r\n          smi.close();\r\n      }\r\n  \r\n      if (t != null && queue.size() > 0) {\r\n        next();\r\n      }\r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"520a9bce43d52d77add8f09727f7a698289d6882","date":1190097977,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiSegmentReader.MultiTermEnum#MultiTermEnum(IndexReader[],int[],Term).mjava","pathOld":"src/java/org/apache/lucene/index/MultiSegmentReader.MultiTermEnum#MultiTermEnum(IndexReader[],int[],Term).mjava","sourceNew":"    public MultiTermEnum(IndexReader[] readers, int[] starts, Term t)\n      throws IOException {\n      queue = new SegmentMergeQueue(readers.length);\n      for (int i = 0; i < readers.length; i++) {\n        IndexReader reader = readers[i];\n        TermEnum termEnum;\n  \n        if (t != null) {\n          termEnum = reader.terms(t);\n        } else\n          termEnum = reader.terms();\n  \n        SegmentMergeInfo smi = new SegmentMergeInfo(starts[i], termEnum, reader);\n        if (t == null ? smi.next() : termEnum.term() != null)\n          queue.put(smi);          // initialize queue\n        else\n          smi.close();\n      }\n  \n      if (t != null && queue.size() > 0) {\n        next();\n      }\n    }\n\n","sourceOld":"    public MultiTermEnum(IndexReader[] readers, int[] starts, Term t)\r\n      throws IOException {\r\n      queue = new SegmentMergeQueue(readers.length);\r\n      for (int i = 0; i < readers.length; i++) {\r\n        IndexReader reader = readers[i];\r\n        TermEnum termEnum;\r\n  \r\n        if (t != null) {\r\n          termEnum = reader.terms(t);\r\n        } else\r\n          termEnum = reader.terms();\r\n  \r\n        SegmentMergeInfo smi = new SegmentMergeInfo(starts[i], termEnum, reader);\r\n        if (t == null ? smi.next() : termEnum.term() != null)\r\n          queue.put(smi);          // initialize queue\r\n        else\r\n          smi.close();\r\n      }\r\n  \r\n      if (t != null && queue.size() > 0) {\r\n        next();\r\n      }\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b4b3f367431c59e4ba7b9f84bd6e1c919bd4399","date":1242319223,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiSegmentReader.MultiTermEnum#MultiTermEnum(IndexReader[],int[],Term).mjava","pathOld":"src/java/org/apache/lucene/index/MultiSegmentReader.MultiTermEnum#MultiTermEnum(IndexReader[],int[],Term).mjava","sourceNew":"    public MultiTermEnum(IndexReader[] readers, int[] starts, Term t)\n      throws IOException {\n      queue = new SegmentMergeQueue(readers.length);\n      matchingSegments = new SegmentMergeInfo[readers.length+1];\n      for (int i = 0; i < readers.length; i++) {\n        IndexReader reader = readers[i];\n        TermEnum termEnum;\n  \n        if (t != null) {\n          termEnum = reader.terms(t);\n        } else\n          termEnum = reader.terms();\n  \n        SegmentMergeInfo smi = new SegmentMergeInfo(starts[i], termEnum, reader);\n        smi.ord = i;\n        if (t == null ? smi.next() : termEnum.term() != null)\n          queue.put(smi);          // initialize queue\n        else\n          smi.close();\n      }\n  \n      if (t != null && queue.size() > 0) {\n        next();\n      }\n    }\n\n","sourceOld":"    public MultiTermEnum(IndexReader[] readers, int[] starts, Term t)\n      throws IOException {\n      queue = new SegmentMergeQueue(readers.length);\n      for (int i = 0; i < readers.length; i++) {\n        IndexReader reader = readers[i];\n        TermEnum termEnum;\n  \n        if (t != null) {\n          termEnum = reader.terms(t);\n        } else\n          termEnum = reader.terms();\n  \n        SegmentMergeInfo smi = new SegmentMergeInfo(starts[i], termEnum, reader);\n        if (t == null ? smi.next() : termEnum.term() != null)\n          queue.put(smi);          // initialize queue\n        else\n          smi.close();\n      }\n  \n      if (t != null && queue.size() > 0) {\n        next();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"051915b28d4a808379648fb9290ffef5901286eb","date":1242402612,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiSegmentReader.MultiTermEnum#MultiTermEnum(IndexReader,IndexReader[],int[],Term).mjava","pathOld":"src/java/org/apache/lucene/index/MultiSegmentReader.MultiTermEnum#MultiTermEnum(IndexReader[],int[],Term).mjava","sourceNew":"    public MultiTermEnum(IndexReader topReader, IndexReader[] readers, int[] starts, Term t)\n      throws IOException {\n      this.topReader = topReader;\n      queue = new SegmentMergeQueue(readers.length);\n      matchingSegments = new SegmentMergeInfo[readers.length+1];\n      for (int i = 0; i < readers.length; i++) {\n        IndexReader reader = readers[i];\n        TermEnum termEnum;\n  \n        if (t != null) {\n          termEnum = reader.terms(t);\n        } else\n          termEnum = reader.terms();\n  \n        SegmentMergeInfo smi = new SegmentMergeInfo(starts[i], termEnum, reader);\n        smi.ord = i;\n        if (t == null ? smi.next() : termEnum.term() != null)\n          queue.put(smi);          // initialize queue\n        else\n          smi.close();\n      }\n  \n      if (t != null && queue.size() > 0) {\n        next();\n      }\n    }\n\n","sourceOld":"    public MultiTermEnum(IndexReader[] readers, int[] starts, Term t)\n      throws IOException {\n      queue = new SegmentMergeQueue(readers.length);\n      matchingSegments = new SegmentMergeInfo[readers.length+1];\n      for (int i = 0; i < readers.length; i++) {\n        IndexReader reader = readers[i];\n        TermEnum termEnum;\n  \n        if (t != null) {\n          termEnum = reader.terms(t);\n        } else\n          termEnum = reader.terms();\n  \n        SegmentMergeInfo smi = new SegmentMergeInfo(starts[i], termEnum, reader);\n        smi.ord = i;\n        if (t == null ? smi.next() : termEnum.term() != null)\n          queue.put(smi);          // initialize queue\n        else\n          smi.close();\n      }\n  \n      if (t != null && queue.size() > 0) {\n        next();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"520a9bce43d52d77add8f09727f7a698289d6882":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"],"8b4b3f367431c59e4ba7b9f84bd6e1c919bd4399":["520a9bce43d52d77add8f09727f7a698289d6882"],"051915b28d4a808379648fb9290ffef5901286eb":["8b4b3f367431c59e4ba7b9f84bd6e1c919bd4399"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f2552b9f13037c62acd400d263d1e9262d6e4e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["051915b28d4a808379648fb9290ffef5901286eb"]},"commit2Childs":{"520a9bce43d52d77add8f09727f7a698289d6882":["8b4b3f367431c59e4ba7b9f84bd6e1c919bd4399"],"8b4b3f367431c59e4ba7b9f84bd6e1c919bd4399":["051915b28d4a808379648fb9290ffef5901286eb"],"051915b28d4a808379648fb9290ffef5901286eb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"],"f7f2552b9f13037c62acd400d263d1e9262d6e4e":["520a9bce43d52d77add8f09727f7a698289d6882"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}