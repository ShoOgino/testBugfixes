{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84PostingsReader.BlockImpactsDocsEnum#BlockImpactsDocsEnum(FieldInfo,IntBlockTermState).mjava","commits":[{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84PostingsReader.BlockImpactsDocsEnum#BlockImpactsDocsEnum(FieldInfo,IntBlockTermState).mjava","pathOld":"/dev/null","sourceNew":"    public BlockImpactsDocsEnum(FieldInfo fieldInfo, IntBlockTermState termState) throws IOException {\n      indexHasFreqs = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n      final boolean indexHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n      final boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      final boolean indexHasPayloads = fieldInfo.hasPayloads();\n\n      this.docIn = Lucene84PostingsReader.this.docIn.clone();\n\n      docFreq = termState.docFreq;\n      docIn.seek(termState.docStartFP);\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      docBufferUpto = BLOCK_SIZE;\n\n      skipper = new Lucene84ScoreSkipReader(docIn.clone(),\n          MAX_SKIP_LEVELS,\n          indexHasPositions,\n          indexHasOffsets,\n          indexHasPayloads);\n      skipper.init(termState.docStartFP+termState.skipOffset, termState.docStartFP, termState.posStartFP, termState.payStartFP, docFreq);\n\n      if (indexHasFreqs == false) {\n        Arrays.fill(freqBuffer, 1L);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7929304b72348a1793ae27d1330906d254c9a35b","date":1574356812,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84PostingsReader.BlockImpactsDocsEnum#BlockImpactsDocsEnum(FieldInfo,IntBlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84PostingsReader.BlockImpactsDocsEnum#BlockImpactsDocsEnum(FieldInfo,IntBlockTermState).mjava","sourceNew":"    public BlockImpactsDocsEnum(FieldInfo fieldInfo, IntBlockTermState termState) throws IOException {\n      indexHasFreqs = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n      final boolean indexHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n      final boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      final boolean indexHasPayloads = fieldInfo.hasPayloads();\n\n      this.docIn = Lucene84PostingsReader.this.docIn.clone();\n\n      docFreq = termState.docFreq;\n      docIn.seek(termState.docStartFP);\n\n      doc = -1;\n      accum = 0;\n      blockUpto = 0;\n      docBufferUpto = BLOCK_SIZE;\n\n      skipper = new Lucene84ScoreSkipReader(docIn.clone(),\n          MAX_SKIP_LEVELS,\n          indexHasPositions,\n          indexHasOffsets,\n          indexHasPayloads);\n      skipper.init(termState.docStartFP+termState.skipOffset, termState.docStartFP, termState.posStartFP, termState.payStartFP, docFreq);\n\n      // We set the last element of docBuffer to NO_MORE_DOCS, it helps save conditionals in advance()\n      docBuffer[BLOCK_SIZE] = NO_MORE_DOCS;\n      this.isFreqsRead = true;\n      if (indexHasFreqs == false) {\n        Arrays.fill(freqBuffer, 1L);\n      }\n    }\n\n","sourceOld":"    public BlockImpactsDocsEnum(FieldInfo fieldInfo, IntBlockTermState termState) throws IOException {\n      indexHasFreqs = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n      final boolean indexHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n      final boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      final boolean indexHasPayloads = fieldInfo.hasPayloads();\n\n      this.docIn = Lucene84PostingsReader.this.docIn.clone();\n\n      docFreq = termState.docFreq;\n      docIn.seek(termState.docStartFP);\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      docBufferUpto = BLOCK_SIZE;\n\n      skipper = new Lucene84ScoreSkipReader(docIn.clone(),\n          MAX_SKIP_LEVELS,\n          indexHasPositions,\n          indexHasOffsets,\n          indexHasPayloads);\n      skipper.init(termState.docStartFP+termState.skipOffset, termState.docStartFP, termState.posStartFP, termState.payStartFP, docFreq);\n\n      if (indexHasFreqs == false) {\n        Arrays.fill(freqBuffer, 1L);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc14e137818594bcbcbf926a33166d47dd01eb84","date":1574357590,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84PostingsReader.BlockImpactsDocsEnum#BlockImpactsDocsEnum(FieldInfo,IntBlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84PostingsReader.BlockImpactsDocsEnum#BlockImpactsDocsEnum(FieldInfo,IntBlockTermState).mjava","sourceNew":"    public BlockImpactsDocsEnum(FieldInfo fieldInfo, IntBlockTermState termState) throws IOException {\n      indexHasFreqs = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n      final boolean indexHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n      final boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      final boolean indexHasPayloads = fieldInfo.hasPayloads();\n\n      this.docIn = Lucene84PostingsReader.this.docIn.clone();\n\n      docFreq = termState.docFreq;\n      docIn.seek(termState.docStartFP);\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      docBufferUpto = BLOCK_SIZE;\n\n      skipper = new Lucene84ScoreSkipReader(docIn.clone(),\n          MAX_SKIP_LEVELS,\n          indexHasPositions,\n          indexHasOffsets,\n          indexHasPayloads);\n      skipper.init(termState.docStartFP+termState.skipOffset, termState.docStartFP, termState.posStartFP, termState.payStartFP, docFreq);\n\n      if (indexHasFreqs == false) {\n        Arrays.fill(freqBuffer, 1L);\n      }\n    }\n\n","sourceOld":"    public BlockImpactsDocsEnum(FieldInfo fieldInfo, IntBlockTermState termState) throws IOException {\n      indexHasFreqs = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n      final boolean indexHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n      final boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      final boolean indexHasPayloads = fieldInfo.hasPayloads();\n\n      this.docIn = Lucene84PostingsReader.this.docIn.clone();\n\n      docFreq = termState.docFreq;\n      docIn.seek(termState.docStartFP);\n\n      doc = -1;\n      accum = 0;\n      blockUpto = 0;\n      docBufferUpto = BLOCK_SIZE;\n\n      skipper = new Lucene84ScoreSkipReader(docIn.clone(),\n          MAX_SKIP_LEVELS,\n          indexHasPositions,\n          indexHasOffsets,\n          indexHasPayloads);\n      skipper.init(termState.docStartFP+termState.skipOffset, termState.docStartFP, termState.posStartFP, termState.payStartFP, docFreq);\n\n      // We set the last element of docBuffer to NO_MORE_DOCS, it helps save conditionals in advance()\n      docBuffer[BLOCK_SIZE] = NO_MORE_DOCS;\n      this.isFreqsRead = true;\n      if (indexHasFreqs == false) {\n        Arrays.fill(freqBuffer, 1L);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d82c18db6c80aa0ba70c03fe917526cf5071b9ad","date":1574358730,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84PostingsReader.BlockImpactsDocsEnum#BlockImpactsDocsEnum(FieldInfo,IntBlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84PostingsReader.BlockImpactsDocsEnum#BlockImpactsDocsEnum(FieldInfo,IntBlockTermState).mjava","sourceNew":"    public BlockImpactsDocsEnum(FieldInfo fieldInfo, IntBlockTermState termState) throws IOException {\n      indexHasFreqs = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n      final boolean indexHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n      final boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      final boolean indexHasPayloads = fieldInfo.hasPayloads();\n\n      this.docIn = Lucene84PostingsReader.this.docIn.clone();\n\n      docFreq = termState.docFreq;\n      docIn.seek(termState.docStartFP);\n\n      doc = -1;\n      accum = 0;\n      blockUpto = 0;\n      docBufferUpto = BLOCK_SIZE;\n\n      skipper = new Lucene84ScoreSkipReader(docIn.clone(),\n          MAX_SKIP_LEVELS,\n          indexHasPositions,\n          indexHasOffsets,\n          indexHasPayloads);\n      skipper.init(termState.docStartFP+termState.skipOffset, termState.docStartFP, termState.posStartFP, termState.payStartFP, docFreq);\n\n      // We set the last element of docBuffer to NO_MORE_DOCS, it helps save conditionals in advance()\n      docBuffer[BLOCK_SIZE] = NO_MORE_DOCS;\n      this.isFreqsRead = true;\n      if (indexHasFreqs == false) {\n        Arrays.fill(freqBuffer, 1L);\n      }\n    }\n\n","sourceOld":"    public BlockImpactsDocsEnum(FieldInfo fieldInfo, IntBlockTermState termState) throws IOException {\n      indexHasFreqs = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n      final boolean indexHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n      final boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      final boolean indexHasPayloads = fieldInfo.hasPayloads();\n\n      this.docIn = Lucene84PostingsReader.this.docIn.clone();\n\n      docFreq = termState.docFreq;\n      docIn.seek(termState.docStartFP);\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      docBufferUpto = BLOCK_SIZE;\n\n      skipper = new Lucene84ScoreSkipReader(docIn.clone(),\n          MAX_SKIP_LEVELS,\n          indexHasPositions,\n          indexHasOffsets,\n          indexHasPayloads);\n      skipper.init(termState.docStartFP+termState.skipOffset, termState.docStartFP, termState.posStartFP, termState.payStartFP, docFreq);\n\n      if (indexHasFreqs == false) {\n        Arrays.fill(freqBuffer, 1L);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bc14e137818594bcbcbf926a33166d47dd01eb84":["7929304b72348a1793ae27d1330906d254c9a35b"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7929304b72348a1793ae27d1330906d254c9a35b":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d82c18db6c80aa0ba70c03fe917526cf5071b9ad":["bc14e137818594bcbcbf926a33166d47dd01eb84"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d82c18db6c80aa0ba70c03fe917526cf5071b9ad"]},"commit2Childs":{"bc14e137818594bcbcbf926a33166d47dd01eb84":["d82c18db6c80aa0ba70c03fe917526cf5071b9ad"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["7929304b72348a1793ae27d1330906d254c9a35b"],"7929304b72348a1793ae27d1330906d254c9a35b":["bc14e137818594bcbcbf926a33166d47dd01eb84"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"d82c18db6c80aa0ba70c03fe917526cf5071b9ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}