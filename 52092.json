{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#applyDeletes(SegmentInfos,int).mjava","commits":[{"id":"da0d58b6bf72ebfd4d6722289ea725809c20c987","date":1531207054,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#applyDeletes(SegmentInfos,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Apply {@code numDeletes} uniformly across all segments of {@code infos}.\n   */\n  protected static SegmentInfos applyDeletes(SegmentInfos infos, int numDeletes) {\n    List<SegmentCommitInfo> infoList = infos.asList();\n    int totalNumDocs = infoList.stream()\n        .mapToInt(s -> s.info.maxDoc() - s.getDelCount())\n        .sum();\n    if (numDeletes > totalNumDocs) {\n      throw new IllegalArgumentException(\"More deletes than documents\");\n    }\n    double w = (double) numDeletes / totalNumDocs;\n    List<SegmentCommitInfo> newInfoList = new ArrayList<>();\n    for (int i = 0; i < infoList.size(); ++i) {\n      assert numDeletes >= 0;\n      SegmentCommitInfo sci = infoList.get(i);\n      int segDeletes;\n      if (i == infoList.size() - 1) {\n        segDeletes = numDeletes;\n      } else {\n        segDeletes = Math.min(numDeletes, (int) Math.ceil(w * (sci.info.maxDoc() - sci.getDelCount())));\n      }\n      int newDelCount = sci.getDelCount() + segDeletes;\n      assert newDelCount <= sci.info.maxDoc();\n      if (newDelCount < sci.info.maxDoc()) { // drop fully deleted segments\n        SegmentCommitInfo newInfo = new SegmentCommitInfo(sci.info, sci.getDelCount() + segDeletes, 0, sci.getDelGen() + 1, sci.getFieldInfosGen(), sci.getDocValuesGen());\n        newInfoList.add(newInfo);\n      }\n      numDeletes -= segDeletes;\n    }\n    assert numDeletes == 0;\n    SegmentInfos newInfos = new SegmentInfos(Version.LATEST.major);\n    newInfos.addAll(newInfoList);\n    return newInfos;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#applyDeletes(SegmentInfos,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Apply {@code numDeletes} uniformly across all segments of {@code infos}.\n   */\n  protected static SegmentInfos applyDeletes(SegmentInfos infos, int numDeletes) {\n    List<SegmentCommitInfo> infoList = infos.asList();\n    int totalNumDocs = infoList.stream()\n        .mapToInt(s -> s.info.maxDoc() - s.getDelCount())\n        .sum();\n    if (numDeletes > totalNumDocs) {\n      throw new IllegalArgumentException(\"More deletes than documents\");\n    }\n    double w = (double) numDeletes / totalNumDocs;\n    List<SegmentCommitInfo> newInfoList = new ArrayList<>();\n    for (int i = 0; i < infoList.size(); ++i) {\n      assert numDeletes >= 0;\n      SegmentCommitInfo sci = infoList.get(i);\n      int segDeletes;\n      if (i == infoList.size() - 1) {\n        segDeletes = numDeletes;\n      } else {\n        segDeletes = Math.min(numDeletes, (int) Math.ceil(w * (sci.info.maxDoc() - sci.getDelCount())));\n      }\n      int newDelCount = sci.getDelCount() + segDeletes;\n      assert newDelCount <= sci.info.maxDoc();\n      if (newDelCount < sci.info.maxDoc()) { // drop fully deleted segments\n        SegmentCommitInfo newInfo = new SegmentCommitInfo(sci.info, sci.getDelCount() + segDeletes, 0, sci.getDelGen() + 1, sci.getFieldInfosGen(), sci.getDocValuesGen());\n        newInfoList.add(newInfo);\n      }\n      numDeletes -= segDeletes;\n    }\n    assert numDeletes == 0;\n    SegmentInfos newInfos = new SegmentInfos(Version.LATEST.major);\n    newInfos.addAll(newInfoList);\n    return newInfos;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#applyDeletes(SegmentInfos,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Apply {@code numDeletes} uniformly across all segments of {@code infos}.\n   */\n  protected static SegmentInfos applyDeletes(SegmentInfos infos, int numDeletes) {\n    List<SegmentCommitInfo> infoList = infos.asList();\n    int totalNumDocs = infoList.stream()\n        .mapToInt(s -> s.info.maxDoc() - s.getDelCount())\n        .sum();\n    if (numDeletes > totalNumDocs) {\n      throw new IllegalArgumentException(\"More deletes than documents\");\n    }\n    double w = (double) numDeletes / totalNumDocs;\n    List<SegmentCommitInfo> newInfoList = new ArrayList<>();\n    for (int i = 0; i < infoList.size(); ++i) {\n      assert numDeletes >= 0;\n      SegmentCommitInfo sci = infoList.get(i);\n      int segDeletes;\n      if (i == infoList.size() - 1) {\n        segDeletes = numDeletes;\n      } else {\n        segDeletes = Math.min(numDeletes, (int) Math.ceil(w * (sci.info.maxDoc() - sci.getDelCount())));\n      }\n      int newDelCount = sci.getDelCount() + segDeletes;\n      assert newDelCount <= sci.info.maxDoc();\n      if (newDelCount < sci.info.maxDoc()) { // drop fully deleted segments\n        SegmentCommitInfo newInfo = new SegmentCommitInfo(sci.info, sci.getDelCount() + segDeletes, 0, sci.getDelGen() + 1, sci.getFieldInfosGen(), sci.getDocValuesGen());\n        newInfoList.add(newInfo);\n      }\n      numDeletes -= segDeletes;\n    }\n    assert numDeletes == 0;\n    SegmentInfos newInfos = new SegmentInfos(Version.LATEST.major);\n    newInfos.addAll(newInfoList);\n    return newInfos;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14654be3f7a82c9a3c52169e365baa55bfe64f66","date":1587212697,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#applyDeletes(SegmentInfos,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#applyDeletes(SegmentInfos,int).mjava","sourceNew":"  /**\n   * Apply {@code numDeletes} uniformly across all segments of {@code infos}.\n   */\n  protected static SegmentInfos applyDeletes(SegmentInfos infos, int numDeletes) {\n    List<SegmentCommitInfo> infoList = infos.asList();\n    int totalNumDocs = infoList.stream()\n        .mapToInt(s -> s.info.maxDoc() - s.getDelCount())\n        .sum();\n    if (numDeletes > totalNumDocs) {\n      throw new IllegalArgumentException(\"More deletes than documents\");\n    }\n    double w = (double) numDeletes / totalNumDocs;\n    List<SegmentCommitInfo> newInfoList = new ArrayList<>();\n    for (int i = 0; i < infoList.size(); ++i) {\n      assert numDeletes >= 0;\n      SegmentCommitInfo sci = infoList.get(i);\n      int segDeletes;\n      if (i == infoList.size() - 1) {\n        segDeletes = numDeletes;\n      } else {\n        segDeletes = Math.min(numDeletes, (int) Math.ceil(w * (sci.info.maxDoc() - sci.getDelCount())));\n      }\n      int newDelCount = sci.getDelCount() + segDeletes;\n      assert newDelCount <= sci.info.maxDoc();\n      if (newDelCount < sci.info.maxDoc()) { // drop fully deleted segments\n        SegmentCommitInfo newInfo = new SegmentCommitInfo(sci.info, sci.getDelCount() + segDeletes, 0, sci.getDelGen() + 1, sci.getFieldInfosGen(), sci.getDocValuesGen(), StringHelper.randomId());\n        newInfoList.add(newInfo);\n      }\n      numDeletes -= segDeletes;\n    }\n    assert numDeletes == 0;\n    SegmentInfos newInfos = new SegmentInfos(Version.LATEST.major);\n    newInfos.addAll(newInfoList);\n    return newInfos;\n  }\n\n","sourceOld":"  /**\n   * Apply {@code numDeletes} uniformly across all segments of {@code infos}.\n   */\n  protected static SegmentInfos applyDeletes(SegmentInfos infos, int numDeletes) {\n    List<SegmentCommitInfo> infoList = infos.asList();\n    int totalNumDocs = infoList.stream()\n        .mapToInt(s -> s.info.maxDoc() - s.getDelCount())\n        .sum();\n    if (numDeletes > totalNumDocs) {\n      throw new IllegalArgumentException(\"More deletes than documents\");\n    }\n    double w = (double) numDeletes / totalNumDocs;\n    List<SegmentCommitInfo> newInfoList = new ArrayList<>();\n    for (int i = 0; i < infoList.size(); ++i) {\n      assert numDeletes >= 0;\n      SegmentCommitInfo sci = infoList.get(i);\n      int segDeletes;\n      if (i == infoList.size() - 1) {\n        segDeletes = numDeletes;\n      } else {\n        segDeletes = Math.min(numDeletes, (int) Math.ceil(w * (sci.info.maxDoc() - sci.getDelCount())));\n      }\n      int newDelCount = sci.getDelCount() + segDeletes;\n      assert newDelCount <= sci.info.maxDoc();\n      if (newDelCount < sci.info.maxDoc()) { // drop fully deleted segments\n        SegmentCommitInfo newInfo = new SegmentCommitInfo(sci.info, sci.getDelCount() + segDeletes, 0, sci.getDelGen() + 1, sci.getFieldInfosGen(), sci.getDocValuesGen());\n        newInfoList.add(newInfo);\n      }\n      numDeletes -= segDeletes;\n    }\n    assert numDeletes == 0;\n    SegmentInfos newInfos = new SegmentInfos(Version.LATEST.major);\n    newInfos.addAll(newInfoList);\n    return newInfos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da0d58b6bf72ebfd4d6722289ea725809c20c987":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da0d58b6bf72ebfd4d6722289ea725809c20c987"],"14654be3f7a82c9a3c52169e365baa55bfe64f66":["da0d58b6bf72ebfd4d6722289ea725809c20c987"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["14654be3f7a82c9a3c52169e365baa55bfe64f66"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da0d58b6bf72ebfd4d6722289ea725809c20c987"]},"commit2Childs":{"da0d58b6bf72ebfd4d6722289ea725809c20c987":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","14654be3f7a82c9a3c52169e365baa55bfe64f66","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"14654be3f7a82c9a3c52169e365baa55bfe64f66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da0d58b6bf72ebfd4d6722289ea725809c20c987","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}