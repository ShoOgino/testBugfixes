{"path":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked#encode(long[],int,byte[],int,int).mjava","commits":[{"id":"58d488e3fd72dfc95fa76fcb24f58e90c343323c","date":1346235723,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked#encode(long[],int,byte[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void encode(long[] values, int valuesOffset, byte[] blocks,\n      int blocksOffset, int iterations) {\n    long nextBlock = 0;\n    int bitsLeft = 64;\n    for (int i = 0; i < valueCount * iterations; ++i) {\n      bitsLeft -= bitsPerValue;\n      if (bitsLeft > 0) {\n        nextBlock |= values[valuesOffset++] << bitsLeft;\n      } else if (bitsLeft == 0) {\n        nextBlock |= values[valuesOffset++];\n        blocksOffset = writeLong(nextBlock, blocks, blocksOffset);\n        nextBlock = 0;\n        bitsLeft = 64;\n      } else { // bitsLeft < 0\n        nextBlock |= values[valuesOffset] >>> -bitsLeft;\n        blocksOffset = writeLong(nextBlock, blocks, blocksOffset);\n        nextBlock = (values[valuesOffset++] & ((1L << -bitsLeft) - 1)) << (64 + bitsLeft);\n        bitsLeft += 64;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked#encode(long[],int,byte[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void encode(long[] values, int valuesOffset, byte[] blocks,\n      int blocksOffset, int iterations) {\n    long nextBlock = 0;\n    int bitsLeft = 64;\n    for (int i = 0; i < valueCount * iterations; ++i) {\n      bitsLeft -= bitsPerValue;\n      if (bitsLeft > 0) {\n        nextBlock |= values[valuesOffset++] << bitsLeft;\n      } else if (bitsLeft == 0) {\n        nextBlock |= values[valuesOffset++];\n        blocksOffset = writeLong(nextBlock, blocks, blocksOffset);\n        nextBlock = 0;\n        bitsLeft = 64;\n      } else { // bitsLeft < 0\n        nextBlock |= values[valuesOffset] >>> -bitsLeft;\n        blocksOffset = writeLong(nextBlock, blocks, blocksOffset);\n        nextBlock = (values[valuesOffset++] & ((1L << -bitsLeft) - 1)) << (64 + bitsLeft);\n        bitsLeft += 64;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e29d4d91327929d477b701d3ef2f5b3457d26ec5","date":1359465689,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked#encode(long[],int,byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked#encode(long[],int,byte[],int,int).mjava","sourceNew":"  @Override\n  public void encode(long[] values, int valuesOffset, byte[] blocks,\n      int blocksOffset, int iterations) {\n    int nextBlock = 0;\n    int bitsLeft = 8;\n    for (int i = 0; i < byteValueCount * iterations; ++i) {\n      final long v = values[valuesOffset++];\n      assert bitsPerValue == 64 || PackedInts.bitsRequired(v) <= bitsPerValue;\n      if (bitsPerValue < bitsLeft) {\n        // just buffer\n        nextBlock |= v << (bitsLeft - bitsPerValue);\n        bitsLeft -= bitsPerValue;\n      } else {\n        // flush as many blocks as possible\n        int bits = bitsPerValue - bitsLeft;\n        blocks[blocksOffset++] = (byte) (nextBlock | (v >>> bits));\n        while (bits >= 8) {\n          bits -= 8;\n          blocks[blocksOffset++] = (byte) (v >>> bits);\n        }\n        // then buffer\n        bitsLeft = 8 - bits;\n        nextBlock = (int) ((v & ((1L << bits) - 1)) << bitsLeft);\n      }\n    }\n    assert bitsLeft == 8;\n  }\n\n","sourceOld":"  @Override\n  public void encode(long[] values, int valuesOffset, byte[] blocks,\n      int blocksOffset, int iterations) {\n    long nextBlock = 0;\n    int bitsLeft = 64;\n    for (int i = 0; i < valueCount * iterations; ++i) {\n      bitsLeft -= bitsPerValue;\n      if (bitsLeft > 0) {\n        nextBlock |= values[valuesOffset++] << bitsLeft;\n      } else if (bitsLeft == 0) {\n        nextBlock |= values[valuesOffset++];\n        blocksOffset = writeLong(nextBlock, blocks, blocksOffset);\n        nextBlock = 0;\n        bitsLeft = 64;\n      } else { // bitsLeft < 0\n        nextBlock |= values[valuesOffset] >>> -bitsLeft;\n        blocksOffset = writeLong(nextBlock, blocks, blocksOffset);\n        nextBlock = (values[valuesOffset++] & ((1L << -bitsLeft) - 1)) << (64 + bitsLeft);\n        bitsLeft += 64;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de522d9303bd67c8473a269a1319125d1f3700e0","date":1359477856,"type":3,"author":"Adrien Grand","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked#encode(long[],int,byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked#encode(long[],int,byte[],int,int).mjava","sourceNew":"  @Override\n  public void encode(long[] values, int valuesOffset, byte[] blocks,\n      int blocksOffset, int iterations) {\n    int nextBlock = 0;\n    int bitsLeft = 8;\n    for (int i = 0; i < byteValueCount * iterations; ++i) {\n      final long v = values[valuesOffset++];\n      assert bitsPerValue == 64 || PackedInts.bitsRequired(v) <= bitsPerValue;\n      if (bitsPerValue < bitsLeft) {\n        // just buffer\n        nextBlock |= v << (bitsLeft - bitsPerValue);\n        bitsLeft -= bitsPerValue;\n      } else {\n        // flush as many blocks as possible\n        int bits = bitsPerValue - bitsLeft;\n        blocks[blocksOffset++] = (byte) (nextBlock | (v >>> bits));\n        while (bits >= 8) {\n          bits -= 8;\n          blocks[blocksOffset++] = (byte) (v >>> bits);\n        }\n        // then buffer\n        bitsLeft = 8 - bits;\n        nextBlock = (int) ((v & ((1L << bits) - 1)) << bitsLeft);\n      }\n    }\n    assert bitsLeft == 8;\n  }\n\n","sourceOld":"  @Override\n  public void encode(long[] values, int valuesOffset, byte[] blocks,\n      int blocksOffset, int iterations) {\n    long nextBlock = 0;\n    int bitsLeft = 64;\n    for (int i = 0; i < valueCount * iterations; ++i) {\n      bitsLeft -= bitsPerValue;\n      if (bitsLeft > 0) {\n        nextBlock |= values[valuesOffset++] << bitsLeft;\n      } else if (bitsLeft == 0) {\n        nextBlock |= values[valuesOffset++];\n        blocksOffset = writeLong(nextBlock, blocks, blocksOffset);\n        nextBlock = 0;\n        bitsLeft = 64;\n      } else { // bitsLeft < 0\n        nextBlock |= values[valuesOffset] >>> -bitsLeft;\n        blocksOffset = writeLong(nextBlock, blocks, blocksOffset);\n        nextBlock = (values[valuesOffset++] & ((1L << -bitsLeft) - 1)) << (64 + bitsLeft);\n        bitsLeft += 64;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dff0cb4eabd8bb5c27d3a284e18c812a89958a66","date":1402928522,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked#encode(long[],int,byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked#encode(long[],int,byte[],int,int).mjava","sourceNew":"  @Override\n  public void encode(long[] values, int valuesOffset, byte[] blocks,\n      int blocksOffset, int iterations) {\n    int nextBlock = 0;\n    int bitsLeft = 8;\n    for (int i = 0; i < byteValueCount * iterations; ++i) {\n      final long v = values[valuesOffset++];\n      assert PackedInts.unsignedBitsRequired(v) <= bitsPerValue;\n      if (bitsPerValue < bitsLeft) {\n        // just buffer\n        nextBlock |= v << (bitsLeft - bitsPerValue);\n        bitsLeft -= bitsPerValue;\n      } else {\n        // flush as many blocks as possible\n        int bits = bitsPerValue - bitsLeft;\n        blocks[blocksOffset++] = (byte) (nextBlock | (v >>> bits));\n        while (bits >= 8) {\n          bits -= 8;\n          blocks[blocksOffset++] = (byte) (v >>> bits);\n        }\n        // then buffer\n        bitsLeft = 8 - bits;\n        nextBlock = (int) ((v & ((1L << bits) - 1)) << bitsLeft);\n      }\n    }\n    assert bitsLeft == 8;\n  }\n\n","sourceOld":"  @Override\n  public void encode(long[] values, int valuesOffset, byte[] blocks,\n      int blocksOffset, int iterations) {\n    int nextBlock = 0;\n    int bitsLeft = 8;\n    for (int i = 0; i < byteValueCount * iterations; ++i) {\n      final long v = values[valuesOffset++];\n      assert bitsPerValue == 64 || PackedInts.bitsRequired(v) <= bitsPerValue;\n      if (bitsPerValue < bitsLeft) {\n        // just buffer\n        nextBlock |= v << (bitsLeft - bitsPerValue);\n        bitsLeft -= bitsPerValue;\n      } else {\n        // flush as many blocks as possible\n        int bits = bitsPerValue - bitsLeft;\n        blocks[blocksOffset++] = (byte) (nextBlock | (v >>> bits));\n        while (bits >= 8) {\n          bits -= 8;\n          blocks[blocksOffset++] = (byte) (v >>> bits);\n        }\n        // then buffer\n        bitsLeft = 8 - bits;\n        nextBlock = (int) ((v & ((1L << bits) - 1)) << bitsLeft);\n      }\n    }\n    assert bitsLeft == 8;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked#encode(long[],int,byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked#encode(long[],int,byte[],int,int).mjava","sourceNew":"  @Override\n  public void encode(long[] values, int valuesOffset, byte[] blocks,\n      int blocksOffset, int iterations) {\n    int nextBlock = 0;\n    int bitsLeft = 8;\n    for (int i = 0; i < byteValueCount * iterations; ++i) {\n      final long v = values[valuesOffset++];\n      assert PackedInts.unsignedBitsRequired(v) <= bitsPerValue;\n      if (bitsPerValue < bitsLeft) {\n        // just buffer\n        nextBlock |= v << (bitsLeft - bitsPerValue);\n        bitsLeft -= bitsPerValue;\n      } else {\n        // flush as many blocks as possible\n        int bits = bitsPerValue - bitsLeft;\n        blocks[blocksOffset++] = (byte) (nextBlock | (v >>> bits));\n        while (bits >= 8) {\n          bits -= 8;\n          blocks[blocksOffset++] = (byte) (v >>> bits);\n        }\n        // then buffer\n        bitsLeft = 8 - bits;\n        nextBlock = (int) ((v & ((1L << bits) - 1)) << bitsLeft);\n      }\n    }\n    assert bitsLeft == 8;\n  }\n\n","sourceOld":"  @Override\n  public void encode(long[] values, int valuesOffset, byte[] blocks,\n      int blocksOffset, int iterations) {\n    int nextBlock = 0;\n    int bitsLeft = 8;\n    for (int i = 0; i < byteValueCount * iterations; ++i) {\n      final long v = values[valuesOffset++];\n      assert bitsPerValue == 64 || PackedInts.bitsRequired(v) <= bitsPerValue;\n      if (bitsPerValue < bitsLeft) {\n        // just buffer\n        nextBlock |= v << (bitsLeft - bitsPerValue);\n        bitsLeft -= bitsPerValue;\n      } else {\n        // flush as many blocks as possible\n        int bits = bitsPerValue - bitsLeft;\n        blocks[blocksOffset++] = (byte) (nextBlock | (v >>> bits));\n        while (bits >= 8) {\n          bits -= 8;\n          blocks[blocksOffset++] = (byte) (v >>> bits);\n        }\n        // then buffer\n        bitsLeft = 8 - bits;\n        nextBlock = (int) ((v & ((1L << bits) - 1)) << bitsLeft);\n      }\n    }\n    assert bitsLeft == 8;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e29d4d91327929d477b701d3ef2f5b3457d26ec5":["58d488e3fd72dfc95fa76fcb24f58e90c343323c"],"dff0cb4eabd8bb5c27d3a284e18c812a89958a66":["e29d4d91327929d477b701d3ef2f5b3457d26ec5"],"58d488e3fd72dfc95fa76fcb24f58e90c343323c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["e29d4d91327929d477b701d3ef2f5b3457d26ec5","dff0cb4eabd8bb5c27d3a284e18c812a89958a66"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58d488e3fd72dfc95fa76fcb24f58e90c343323c"],"de522d9303bd67c8473a269a1319125d1f3700e0":["58d488e3fd72dfc95fa76fcb24f58e90c343323c","e29d4d91327929d477b701d3ef2f5b3457d26ec5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dff0cb4eabd8bb5c27d3a284e18c812a89958a66"]},"commit2Childs":{"e29d4d91327929d477b701d3ef2f5b3457d26ec5":["dff0cb4eabd8bb5c27d3a284e18c812a89958a66","c6f080a2ab37c464dd98db173f6cbf10dc74f211","de522d9303bd67c8473a269a1319125d1f3700e0"],"dff0cb4eabd8bb5c27d3a284e18c812a89958a66":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"58d488e3fd72dfc95fa76fcb24f58e90c343323c":["e29d4d91327929d477b701d3ef2f5b3457d26ec5","05a14b2611ead08655a2b2bdc61632eb31316e57","de522d9303bd67c8473a269a1319125d1f3700e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58d488e3fd72dfc95fa76fcb24f58e90c343323c","05a14b2611ead08655a2b2bdc61632eb31316e57"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"de522d9303bd67c8473a269a1319125d1f3700e0":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","05a14b2611ead08655a2b2bdc61632eb31316e57","de522d9303bd67c8473a269a1319125d1f3700e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}