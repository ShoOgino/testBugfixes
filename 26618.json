{"path":"solr/core/src/java/org/apache/solr/core/BlobRepository#getBlobIncRef(String,Decoder[Object]).mjava","commits":[{"id":"5fab1d180f47e9924e0e56501b42034b3476f2b1","date":1460974879,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#getBlobIncRef(String,Decoder[Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Internal method that returns the contents of a blob and increments a reference count. Please return the same \n   * object to decrease the refcount. Only the decoded content will be cached when this method is used. Component \n   * authors attempting to share objects across cores should use \n   * {@code SolrCore#loadDecodeAndCacheBlob(String, Decoder)} which ensures that a proper close hook is also created.\n   *\n   * @param key it is a combination of blob name and version like blobName/version\n   * @param decoder a decoder that knows how to interpret the bytes from the blob\n   * @return The reference of a blob\n   */\n  BlobContentRef<Object> getBlobIncRef(String key, Decoder<Object> decoder) {\n    return getBlobIncRef(key.concat(decoder.getName()), () -> addBlob(key,decoder));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#getBlobIncRef(String,Decoder[Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Internal method that returns the contents of a blob and increments a reference count. Please return the same \n   * object to decrease the refcount. Only the decoded content will be cached when this method is used. Component \n   * authors attempting to share objects across cores should use \n   * {@code SolrCore#loadDecodeAndCacheBlob(String, Decoder)} which ensures that a proper close hook is also created.\n   *\n   * @param key it is a combination of blob name and version like blobName/version\n   * @param decoder a decoder that knows how to interpret the bytes from the blob\n   * @return The reference of a blob\n   */\n  BlobContentRef<Object> getBlobIncRef(String key, Decoder<Object> decoder) {\n    return getBlobIncRef(key.concat(decoder.getName()), () -> addBlob(key,decoder));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#getBlobIncRef(String,Decoder[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/BlobRepository#getBlobIncRef(String,Decoder[Object]).mjava","sourceNew":"  /**\n   * Internal method that returns the contents of a blob and increments a reference count. Please return the same\n   * object to decrease the refcount. Only the decoded content will be cached when this method is used. Component\n   * authors attempting to share objects across cores should use\n   * {@code SolrCore#loadDecodeAndCacheBlob(String, Decoder)} which ensures that a proper close hook is also created.\n   *\n   * @param key     it is a combination of blob name and version like blobName/version\n   * @param decoder a decoder that knows how to interpret the bytes from the blob\n   * @return The reference of a blob\n   */\n  BlobContentRef<Object> getBlobIncRef(String key, Decoder<Object> decoder) {\n    return getBlobIncRef(key.concat(decoder.getName()), () -> addBlob(key, decoder));\n  }\n\n","sourceOld":"  /**\n   * Internal method that returns the contents of a blob and increments a reference count. Please return the same \n   * object to decrease the refcount. Only the decoded content will be cached when this method is used. Component \n   * authors attempting to share objects across cores should use \n   * {@code SolrCore#loadDecodeAndCacheBlob(String, Decoder)} which ensures that a proper close hook is also created.\n   *\n   * @param key it is a combination of blob name and version like blobName/version\n   * @param decoder a decoder that knows how to interpret the bytes from the blob\n   * @return The reference of a blob\n   */\n  BlobContentRef<Object> getBlobIncRef(String key, Decoder<Object> decoder) {\n    return getBlobIncRef(key.concat(decoder.getName()), () -> addBlob(key,decoder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2668c99990e4c94a78bac005aa682b7c5986d23a":["713122036535651642e6d4fe57ce12b449e18473"],"713122036535651642e6d4fe57ce12b449e18473":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5fab1d180f47e9924e0e56501b42034b3476f2b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5fab1d180f47e9924e0e56501b42034b3476f2b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2668c99990e4c94a78bac005aa682b7c5986d23a"]},"commit2Childs":{"2668c99990e4c94a78bac005aa682b7c5986d23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"713122036535651642e6d4fe57ce12b449e18473":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["713122036535651642e6d4fe57ce12b449e18473","5fab1d180f47e9924e0e56501b42034b3476f2b1"],"5fab1d180f47e9924e0e56501b42034b3476f2b1":["713122036535651642e6d4fe57ce12b449e18473"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}