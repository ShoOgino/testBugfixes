{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setMatchingSegmentReaders().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setMatchingSegmentReaders().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#setMatchingSegmentReaders().mjava","sourceNew":"  private void setMatchingSegmentReaders() {\n    // If the i'th reader is a SegmentReader and has\n    // identical fieldName -> number mapping, then this\n    // array will be non-null at position i:\n    int numReaders = mergeState.readers.size();\n    mergeState.matchingSegmentReaders = new SegmentReader[numReaders];\n\n    // If this reader is a SegmentReader, and all of its\n    // field name -> number mappings match the \"merged\"\n    // FieldInfos, then we can do a bulk copy of the\n    // stored fields:\n    for (int i = 0; i < numReaders; i++) {\n      MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(i);\n      // TODO: we may be able to broaden this to\n      // non-SegmentReaders, since FieldInfos is now\n      // required?  But... this'd also require exposing\n      // bulk-copy (TVs and stored fields) API in foreign\n      // readers..\n      if (reader.reader instanceof SegmentReader) {\n        SegmentReader segmentReader = (SegmentReader) reader.reader;\n        boolean same = true;\n        FieldInfos segmentFieldInfos = segmentReader.getFieldInfos();\n        for (FieldInfo fi : segmentFieldInfos) {\n          if (!mergeState.fieldInfos.fieldName(fi.number).equals(fi.name)) {\n            same = false;\n            break;\n          }\n        }\n        if (same) {\n          mergeState.matchingSegmentReaders[i] = segmentReader;\n          mergeState.matchedCount++;\n        }\n      }\n    }\n\n    if (mergeState.infoStream.isEnabled(\"SM\")) {\n      mergeState.infoStream.message(\"SM\", \"merge store matchedCount=\" + mergeState.matchedCount + \" vs \" + mergeState.readers.size());\n      if (mergeState.matchedCount != mergeState.readers.size()) {\n        mergeState.infoStream.message(\"SM\", \"\" + (mergeState.readers.size() - mergeState.matchedCount) + \" non-bulk merges\");\n      }\n    }\n  }\n\n","sourceOld":"  private void setMatchingSegmentReaders() {\n    // If the i'th reader is a SegmentReader and has\n    // identical fieldName -> number mapping, then this\n    // array will be non-null at position i:\n    int numReaders = mergeState.readers.size();\n    mergeState.matchingSegmentReaders = new SegmentReader[numReaders];\n\n    // If this reader is a SegmentReader, and all of its\n    // field name -> number mappings match the \"merged\"\n    // FieldInfos, then we can do a bulk copy of the\n    // stored fields:\n    for (int i = 0; i < numReaders; i++) {\n      MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(i);\n      // TODO: we may be able to broaden this to\n      // non-SegmentReaders, since FieldInfos is now\n      // required?  But... this'd also require exposing\n      // bulk-copy (TVs and stored fields) API in foreign\n      // readers..\n      if (reader.reader instanceof SegmentReader) {\n        SegmentReader segmentReader = (SegmentReader) reader.reader;\n        boolean same = true;\n        FieldInfos segmentFieldInfos = segmentReader.getFieldInfos();\n        for (FieldInfo fi : segmentFieldInfos) {\n          if (!mergeState.fieldInfos.fieldName(fi.number).equals(fi.name)) {\n            same = false;\n            break;\n          }\n        }\n        if (same) {\n          mergeState.matchingSegmentReaders[i] = segmentReader;\n          mergeState.matchedCount++;\n        }\n      }\n    }\n\n    if (mergeState.infoStream.isEnabled(\"SM\")) {\n      mergeState.infoStream.message(\"SM\", \"merge store matchedCount=\" + mergeState.matchedCount + \" vs \" + mergeState.readers.size());\n      if (mergeState.matchedCount != mergeState.readers.size()) {\n        mergeState.infoStream.message(\"SM\", \"\" + (mergeState.readers.size() - mergeState.matchedCount) + \" non-bulk merges\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c22d44fa0ab988ba3253471cce23610e45a91052","date":1337131019,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setMatchingSegmentReaders().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setMatchingSegmentReaders().mjava","sourceNew":"  private void setMatchingSegmentReaders() {\n    // If the i'th reader is a SegmentReader and has\n    // identical fieldName -> number mapping, then this\n    // array will be non-null at position i:\n    int numReaders = mergeState.readers.size();\n    mergeState.matchingSegmentReaders = new SegmentReader[numReaders];\n\n    // If this reader is a SegmentReader, and all of its\n    // field name -> number mappings match the \"merged\"\n    // FieldInfos, then we can do a bulk copy of the\n    // stored fields:\n    for (int i = 0; i < numReaders; i++) {\n      MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(i);\n      // TODO: we may be able to broaden this to\n      // non-SegmentReaders, since FieldInfos is now\n      // required?  But... this'd also require exposing\n      // bulk-copy (TVs and stored fields) API in foreign\n      // readers..\n      if (reader.reader instanceof SegmentReader) {\n        SegmentReader segmentReader = (SegmentReader) reader.reader;\n        boolean same = true;\n        FieldInfos segmentFieldInfos = segmentReader.getFieldInfos();\n        for (FieldInfo fi : segmentFieldInfos) {\n          FieldInfo other = mergeState.fieldInfos.fieldInfo(fi.number);\n          if (other == null || !other.name.equals(fi.name)) {\n            same = false;\n            break;\n          }\n        }\n        if (same) {\n          mergeState.matchingSegmentReaders[i] = segmentReader;\n          mergeState.matchedCount++;\n        }\n      }\n    }\n\n    if (mergeState.infoStream.isEnabled(\"SM\")) {\n      mergeState.infoStream.message(\"SM\", \"merge store matchedCount=\" + mergeState.matchedCount + \" vs \" + mergeState.readers.size());\n      if (mergeState.matchedCount != mergeState.readers.size()) {\n        mergeState.infoStream.message(\"SM\", \"\" + (mergeState.readers.size() - mergeState.matchedCount) + \" non-bulk merges\");\n      }\n    }\n  }\n\n","sourceOld":"  private void setMatchingSegmentReaders() {\n    // If the i'th reader is a SegmentReader and has\n    // identical fieldName -> number mapping, then this\n    // array will be non-null at position i:\n    int numReaders = mergeState.readers.size();\n    mergeState.matchingSegmentReaders = new SegmentReader[numReaders];\n\n    // If this reader is a SegmentReader, and all of its\n    // field name -> number mappings match the \"merged\"\n    // FieldInfos, then we can do a bulk copy of the\n    // stored fields:\n    for (int i = 0; i < numReaders; i++) {\n      MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(i);\n      // TODO: we may be able to broaden this to\n      // non-SegmentReaders, since FieldInfos is now\n      // required?  But... this'd also require exposing\n      // bulk-copy (TVs and stored fields) API in foreign\n      // readers..\n      if (reader.reader instanceof SegmentReader) {\n        SegmentReader segmentReader = (SegmentReader) reader.reader;\n        boolean same = true;\n        FieldInfos segmentFieldInfos = segmentReader.getFieldInfos();\n        for (FieldInfo fi : segmentFieldInfos) {\n          if (!mergeState.fieldInfos.fieldName(fi.number).equals(fi.name)) {\n            same = false;\n            break;\n          }\n        }\n        if (same) {\n          mergeState.matchingSegmentReaders[i] = segmentReader;\n          mergeState.matchedCount++;\n        }\n      }\n    }\n\n    if (mergeState.infoStream.isEnabled(\"SM\")) {\n      mergeState.infoStream.message(\"SM\", \"merge store matchedCount=\" + mergeState.matchedCount + \" vs \" + mergeState.readers.size());\n      if (mergeState.matchedCount != mergeState.readers.size()) {\n        mergeState.infoStream.message(\"SM\", \"\" + (mergeState.readers.size() - mergeState.matchedCount) + \" non-bulk merges\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setMatchingSegmentReaders().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setMatchingSegmentReaders().mjava","sourceNew":"  private void setMatchingSegmentReaders() {\n    // If the i'th reader is a SegmentReader and has\n    // identical fieldName -> number mapping, then this\n    // array will be non-null at position i:\n    int numReaders = mergeState.readers.size();\n    mergeState.matchingSegmentReaders = new SegmentReader[numReaders];\n\n    // If this reader is a SegmentReader, and all of its\n    // field name -> number mappings match the \"merged\"\n    // FieldInfos, then we can do a bulk copy of the\n    // stored fields:\n    for (int i = 0; i < numReaders; i++) {\n      MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(i);\n      // TODO: we may be able to broaden this to\n      // non-SegmentReaders, since FieldInfos is now\n      // required?  But... this'd also require exposing\n      // bulk-copy (TVs and stored fields) API in foreign\n      // readers..\n      if (reader.reader instanceof SegmentReader) {\n        SegmentReader segmentReader = (SegmentReader) reader.reader;\n        boolean same = true;\n        FieldInfos segmentFieldInfos = segmentReader.getFieldInfos();\n        for (FieldInfo fi : segmentFieldInfos) {\n          FieldInfo other = mergeState.fieldInfos.fieldInfo(fi.number);\n          if (other == null || !other.name.equals(fi.name)) {\n            same = false;\n            break;\n          }\n        }\n        if (same) {\n          mergeState.matchingSegmentReaders[i] = segmentReader;\n          mergeState.matchedCount++;\n        }\n      }\n    }\n\n    if (mergeState.infoStream.isEnabled(\"SM\")) {\n      mergeState.infoStream.message(\"SM\", \"merge store matchedCount=\" + mergeState.matchedCount + \" vs \" + mergeState.readers.size());\n      if (mergeState.matchedCount != mergeState.readers.size()) {\n        mergeState.infoStream.message(\"SM\", \"\" + (mergeState.readers.size() - mergeState.matchedCount) + \" non-bulk merges\");\n      }\n    }\n  }\n\n","sourceOld":"  private void setMatchingSegmentReaders() {\n    // If the i'th reader is a SegmentReader and has\n    // identical fieldName -> number mapping, then this\n    // array will be non-null at position i:\n    int numReaders = mergeState.readers.size();\n    mergeState.matchingSegmentReaders = new SegmentReader[numReaders];\n\n    // If this reader is a SegmentReader, and all of its\n    // field name -> number mappings match the \"merged\"\n    // FieldInfos, then we can do a bulk copy of the\n    // stored fields:\n    for (int i = 0; i < numReaders; i++) {\n      MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(i);\n      // TODO: we may be able to broaden this to\n      // non-SegmentReaders, since FieldInfos is now\n      // required?  But... this'd also require exposing\n      // bulk-copy (TVs and stored fields) API in foreign\n      // readers..\n      if (reader.reader instanceof SegmentReader) {\n        SegmentReader segmentReader = (SegmentReader) reader.reader;\n        boolean same = true;\n        FieldInfos segmentFieldInfos = segmentReader.getFieldInfos();\n        for (FieldInfo fi : segmentFieldInfos) {\n          if (!mergeState.fieldInfos.fieldName(fi.number).equals(fi.name)) {\n            same = false;\n            break;\n          }\n        }\n        if (same) {\n          mergeState.matchingSegmentReaders[i] = segmentReader;\n          mergeState.matchedCount++;\n        }\n      }\n    }\n\n    if (mergeState.infoStream.isEnabled(\"SM\")) {\n      mergeState.infoStream.message(\"SM\", \"merge store matchedCount=\" + mergeState.matchedCount + \" vs \" + mergeState.readers.size());\n      if (mergeState.matchedCount != mergeState.readers.size()) {\n        mergeState.infoStream.message(\"SM\", \"\" + (mergeState.readers.size() - mergeState.matchedCount) + \" non-bulk merges\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c95a819869502635864dac0a788f874787e3395b","date":1341394787,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setMatchingSegmentReaders().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setMatchingSegmentReaders().mjava","sourceNew":"  private void setMatchingSegmentReaders() {\n    // If the i'th reader is a SegmentReader and has\n    // identical fieldName -> number mapping, then this\n    // array will be non-null at position i:\n    int numReaders = mergeState.readers.size();\n    mergeState.matchingSegmentReaders = new SegmentReader[numReaders];\n\n    // If this reader is a SegmentReader, and all of its\n    // field name -> number mappings match the \"merged\"\n    // FieldInfos, then we can do a bulk copy of the\n    // stored fields:\n    for (int i = 0; i < numReaders; i++) {\n      AtomicReader reader = mergeState.readers.get(i);\n      // TODO: we may be able to broaden this to\n      // non-SegmentReaders, since FieldInfos is now\n      // required?  But... this'd also require exposing\n      // bulk-copy (TVs and stored fields) API in foreign\n      // readers..\n      if (reader instanceof SegmentReader) {\n        SegmentReader segmentReader = (SegmentReader) reader;\n        boolean same = true;\n        FieldInfos segmentFieldInfos = segmentReader.getFieldInfos();\n        for (FieldInfo fi : segmentFieldInfos) {\n          FieldInfo other = mergeState.fieldInfos.fieldInfo(fi.number);\n          if (other == null || !other.name.equals(fi.name)) {\n            same = false;\n            break;\n          }\n        }\n        if (same) {\n          mergeState.matchingSegmentReaders[i] = segmentReader;\n          mergeState.matchedCount++;\n        }\n      }\n    }\n\n    if (mergeState.infoStream.isEnabled(\"SM\")) {\n      mergeState.infoStream.message(\"SM\", \"merge store matchedCount=\" + mergeState.matchedCount + \" vs \" + mergeState.readers.size());\n      if (mergeState.matchedCount != mergeState.readers.size()) {\n        mergeState.infoStream.message(\"SM\", \"\" + (mergeState.readers.size() - mergeState.matchedCount) + \" non-bulk merges\");\n      }\n    }\n  }\n\n","sourceOld":"  private void setMatchingSegmentReaders() {\n    // If the i'th reader is a SegmentReader and has\n    // identical fieldName -> number mapping, then this\n    // array will be non-null at position i:\n    int numReaders = mergeState.readers.size();\n    mergeState.matchingSegmentReaders = new SegmentReader[numReaders];\n\n    // If this reader is a SegmentReader, and all of its\n    // field name -> number mappings match the \"merged\"\n    // FieldInfos, then we can do a bulk copy of the\n    // stored fields:\n    for (int i = 0; i < numReaders; i++) {\n      MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(i);\n      // TODO: we may be able to broaden this to\n      // non-SegmentReaders, since FieldInfos is now\n      // required?  But... this'd also require exposing\n      // bulk-copy (TVs and stored fields) API in foreign\n      // readers..\n      if (reader.reader instanceof SegmentReader) {\n        SegmentReader segmentReader = (SegmentReader) reader.reader;\n        boolean same = true;\n        FieldInfos segmentFieldInfos = segmentReader.getFieldInfos();\n        for (FieldInfo fi : segmentFieldInfos) {\n          FieldInfo other = mergeState.fieldInfos.fieldInfo(fi.number);\n          if (other == null || !other.name.equals(fi.name)) {\n            same = false;\n            break;\n          }\n        }\n        if (same) {\n          mergeState.matchingSegmentReaders[i] = segmentReader;\n          mergeState.matchedCount++;\n        }\n      }\n    }\n\n    if (mergeState.infoStream.isEnabled(\"SM\")) {\n      mergeState.infoStream.message(\"SM\", \"merge store matchedCount=\" + mergeState.matchedCount + \" vs \" + mergeState.readers.size());\n      if (mergeState.matchedCount != mergeState.readers.size()) {\n        mergeState.infoStream.message(\"SM\", \"\" + (mergeState.readers.size() - mergeState.matchedCount) + \" non-bulk merges\");\n      }\n    }\n  }\n\n","bugFix":["06584e6e98d592b34e1329b384182f368d2025e8","0061262413ecc163d6eebba1b5c43ab91a0c2dc5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setMatchingSegmentReaders().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setMatchingSegmentReaders().mjava","sourceNew":"  private void setMatchingSegmentReaders() {\n    // If the i'th reader is a SegmentReader and has\n    // identical fieldName -> number mapping, then this\n    // array will be non-null at position i:\n    int numReaders = mergeState.readers.size();\n    mergeState.matchingSegmentReaders = new SegmentReader[numReaders];\n\n    // If this reader is a SegmentReader, and all of its\n    // field name -> number mappings match the \"merged\"\n    // FieldInfos, then we can do a bulk copy of the\n    // stored fields:\n    for (int i = 0; i < numReaders; i++) {\n      AtomicReader reader = mergeState.readers.get(i);\n      // TODO: we may be able to broaden this to\n      // non-SegmentReaders, since FieldInfos is now\n      // required?  But... this'd also require exposing\n      // bulk-copy (TVs and stored fields) API in foreign\n      // readers..\n      if (reader instanceof SegmentReader) {\n        SegmentReader segmentReader = (SegmentReader) reader;\n        boolean same = true;\n        FieldInfos segmentFieldInfos = segmentReader.getFieldInfos();\n        for (FieldInfo fi : segmentFieldInfos) {\n          FieldInfo other = mergeState.fieldInfos.fieldInfo(fi.number);\n          if (other == null || !other.name.equals(fi.name)) {\n            same = false;\n            break;\n          }\n        }\n        if (same) {\n          mergeState.matchingSegmentReaders[i] = segmentReader;\n          mergeState.matchedCount++;\n        }\n      }\n    }\n\n    if (mergeState.infoStream.isEnabled(\"SM\")) {\n      mergeState.infoStream.message(\"SM\", \"merge store matchedCount=\" + mergeState.matchedCount + \" vs \" + mergeState.readers.size());\n      if (mergeState.matchedCount != mergeState.readers.size()) {\n        mergeState.infoStream.message(\"SM\", \"\" + (mergeState.readers.size() - mergeState.matchedCount) + \" non-bulk merges\");\n      }\n    }\n  }\n\n","sourceOld":"  private void setMatchingSegmentReaders() {\n    // If the i'th reader is a SegmentReader and has\n    // identical fieldName -> number mapping, then this\n    // array will be non-null at position i:\n    int numReaders = mergeState.readers.size();\n    mergeState.matchingSegmentReaders = new SegmentReader[numReaders];\n\n    // If this reader is a SegmentReader, and all of its\n    // field name -> number mappings match the \"merged\"\n    // FieldInfos, then we can do a bulk copy of the\n    // stored fields:\n    for (int i = 0; i < numReaders; i++) {\n      MergeState.IndexReaderAndLiveDocs reader = mergeState.readers.get(i);\n      // TODO: we may be able to broaden this to\n      // non-SegmentReaders, since FieldInfos is now\n      // required?  But... this'd also require exposing\n      // bulk-copy (TVs and stored fields) API in foreign\n      // readers..\n      if (reader.reader instanceof SegmentReader) {\n        SegmentReader segmentReader = (SegmentReader) reader.reader;\n        boolean same = true;\n        FieldInfos segmentFieldInfos = segmentReader.getFieldInfos();\n        for (FieldInfo fi : segmentFieldInfos) {\n          FieldInfo other = mergeState.fieldInfos.fieldInfo(fi.number);\n          if (other == null || !other.name.equals(fi.name)) {\n            same = false;\n            break;\n          }\n        }\n        if (same) {\n          mergeState.matchingSegmentReaders[i] = segmentReader;\n          mergeState.matchedCount++;\n        }\n      }\n    }\n\n    if (mergeState.infoStream.isEnabled(\"SM\")) {\n      mergeState.infoStream.message(\"SM\", \"merge store matchedCount=\" + mergeState.matchedCount + \" vs \" + mergeState.readers.size());\n      if (mergeState.matchedCount != mergeState.readers.size()) {\n        mergeState.infoStream.message(\"SM\", \"\" + (mergeState.readers.size() - mergeState.matchedCount) + \" non-bulk merges\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/MatchingReaders#MatchingReaders(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#setMatchingSegmentReaders().mjava","sourceNew":"  MatchingReaders(MergeState mergeState) {\n    // If the i'th reader is a SegmentReader and has\n    // identical fieldName -> number mapping, then this\n    // array will be non-null at position i:\n    int numReaders = mergeState.readers.size();\n    int matchedCount = 0;\n    matchingSegmentReaders = new SegmentReader[numReaders];\n\n    // If this reader is a SegmentReader, and all of its\n    // field name -> number mappings match the \"merged\"\n    // FieldInfos, then we can do a bulk copy of the\n    // stored fields:\n    for (int i = 0; i < numReaders; i++) {\n      AtomicReader reader = mergeState.readers.get(i);\n      // TODO: we may be able to broaden this to\n      // non-SegmentReaders, since FieldInfos is now\n      // required?  But... this'd also require exposing\n      // bulk-copy (TVs and stored fields) API in foreign\n      // readers..\n      if (reader instanceof SegmentReader) {\n        SegmentReader segmentReader = (SegmentReader) reader;\n        boolean same = true;\n        FieldInfos segmentFieldInfos = segmentReader.getFieldInfos();\n        for (FieldInfo fi : segmentFieldInfos) {\n          FieldInfo other = mergeState.fieldInfos.fieldInfo(fi.number);\n          if (other == null || !other.name.equals(fi.name)) {\n            same = false;\n            break;\n          }\n        }\n        if (same) {\n          matchingSegmentReaders[i] = segmentReader;\n          matchedCount++;\n        }\n      }\n    }\n    \n    this.count = matchedCount;\n\n    if (mergeState.infoStream.isEnabled(\"SM\")) {\n      mergeState.infoStream.message(\"SM\", \"merge store matchedCount=\" + count + \" vs \" + mergeState.readers.size());\n      if (count != mergeState.readers.size()) {\n        mergeState.infoStream.message(\"SM\", \"\" + (mergeState.readers.size() - count) + \" non-bulk merges\");\n      }\n    }\n  }\n\n","sourceOld":"  private void setMatchingSegmentReaders() {\n    // If the i'th reader is a SegmentReader and has\n    // identical fieldName -> number mapping, then this\n    // array will be non-null at position i:\n    int numReaders = mergeState.readers.size();\n    mergeState.matchingSegmentReaders = new SegmentReader[numReaders];\n\n    // If this reader is a SegmentReader, and all of its\n    // field name -> number mappings match the \"merged\"\n    // FieldInfos, then we can do a bulk copy of the\n    // stored fields:\n    for (int i = 0; i < numReaders; i++) {\n      AtomicReader reader = mergeState.readers.get(i);\n      // TODO: we may be able to broaden this to\n      // non-SegmentReaders, since FieldInfos is now\n      // required?  But... this'd also require exposing\n      // bulk-copy (TVs and stored fields) API in foreign\n      // readers..\n      if (reader instanceof SegmentReader) {\n        SegmentReader segmentReader = (SegmentReader) reader;\n        boolean same = true;\n        FieldInfos segmentFieldInfos = segmentReader.getFieldInfos();\n        for (FieldInfo fi : segmentFieldInfos) {\n          FieldInfo other = mergeState.fieldInfos.fieldInfo(fi.number);\n          if (other == null || !other.name.equals(fi.name)) {\n            same = false;\n            break;\n          }\n        }\n        if (same) {\n          mergeState.matchingSegmentReaders[i] = segmentReader;\n          mergeState.matchedCount++;\n        }\n      }\n    }\n\n    if (mergeState.infoStream.isEnabled(\"SM\")) {\n      mergeState.infoStream.message(\"SM\", \"merge store matchedCount=\" + mergeState.matchedCount + \" vs \" + mergeState.readers.size());\n      if (mergeState.matchedCount != mergeState.readers.size()) {\n        mergeState.infoStream.message(\"SM\", \"\" + (mergeState.readers.size() - mergeState.matchedCount) + \" non-bulk merges\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c95a819869502635864dac0a788f874787e3395b":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","c22d44fa0ab988ba3253471cce23610e45a91052"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","c95a819869502635864dac0a788f874787e3395b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22a2e66dfda83847e80095b8693c660742ab3e9c":["c95a819869502635864dac0a788f874787e3395b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"c22d44fa0ab988ba3253471cce23610e45a91052":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c95a819869502635864dac0a788f874787e3395b":["fe33227f6805edab2036cbb80645cc4e2d1fa424","22a2e66dfda83847e80095b8693c660742ab3e9c"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["c95a819869502635864dac0a788f874787e3395b","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","c22d44fa0ab988ba3253471cce23610e45a91052"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c22d44fa0ab988ba3253471cce23610e45a91052":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}