{"path":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#checkIntervals(IntervalsSource,String,int,int[][]).mjava","commits":[{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#checkIntervals(IntervalsSource,String,int,int[][]).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#checkIntervals(IntervalsSource,String,int,int[][]).mjava","sourceNew":"  private void checkIntervals(IntervalsSource source, String field, int expectedMatchCount, int[][] expected) throws IOException {\n    int matchedDocs = 0;\n    for (LeafReaderContext ctx : searcher.getIndexReader().leaves()) {\n      assertNull(source.intervals(field + \"fake\", ctx));\n      NumericDocValues ids = DocValues.getNumeric(ctx.reader(), \"id\");\n      IntervalIterator intervals = source.intervals(field, ctx);\n      if (intervals == null)\n        continue;\n      for (int doc = 0; doc < ctx.reader().maxDoc(); doc++) {\n        ids.advance(doc);\n        int id = (int) ids.longValue();\n        if (intervals.docID() == doc ||\n            (intervals.docID() < doc && intervals.advance(doc) == doc)) {\n          int i = 0, pos;\n          assertEquals(-1, intervals.start());\n          assertEquals(-1, intervals.end());\n          while ((pos = intervals.nextInterval()) != IntervalIterator.NO_MORE_INTERVALS) {\n            if (i >= expected[id].length) {\n              fail(\"Unexpected match in doc \" + id + \": \" + intervals);\n            }\n            assertEquals(source + \": wrong start value in doc \" + id, expected[id][i], pos);\n            assertEquals(\"start() != pos returned from nextInterval()\", expected[id][i], intervals.start());\n            assertEquals(\"Wrong end value in doc \" + id, expected[id][i + 1], intervals.end());\n            i += 2;\n          }\n          assertEquals(source + \": wrong number of endpoints in doc \" + id, expected[id].length, i);\n          assertEquals(IntervalIterator.NO_MORE_INTERVALS, intervals.start());\n          assertEquals(IntervalIterator.NO_MORE_INTERVALS, intervals.end());\n          if (i > 0)\n            matchedDocs++;\n        }\n        else {\n          assertEquals(0, expected[id].length);\n        }\n      }\n    }\n    assertEquals(expectedMatchCount, matchedDocs);\n  }\n\n","sourceOld":"  private void checkIntervals(IntervalsSource source, String field, int expectedMatchCount, int[][] expected) throws IOException {\n    int matchedDocs = 0;\n    for (LeafReaderContext ctx : searcher.getIndexReader().leaves()) {\n      assertNull(source.intervals(field + \"fake\", ctx));\n      NumericDocValues ids = DocValues.getNumeric(ctx.reader(), \"id\");\n      IntervalIterator intervals = source.intervals(field, ctx);\n      if (intervals == null)\n        continue;\n      for (int doc = 0; doc < ctx.reader().maxDoc(); doc++) {\n        ids.advance(doc);\n        int id = (int) ids.longValue();\n        if (intervals.docID() == doc ||\n            (intervals.docID() < doc && intervals.advance(doc) == doc)) {\n          int i = 0, pos;\n          assertEquals(-1, intervals.start());\n          assertEquals(-1, intervals.end());\n          while ((pos = intervals.nextInterval()) != IntervalIterator.NO_MORE_INTERVALS) {\n            if (i >= expected[id].length) {\n              fail(\"Unexpected match in doc \" + id + \": \" + intervals);\n            }\n            assertEquals(source + \": wrong start value in doc \" + id, expected[id][i], pos);\n            assertEquals(\"start() != pos returned from nextInterval()\", expected[id][i], intervals.start());\n            assertEquals(\"Wrong end value in doc \" + id, expected[id][i + 1], intervals.end());\n            i += 2;\n          }\n          assertEquals(source + \": wrong number of endpoints in doc \" + id, expected[id].length, i);\n          assertEquals(IntervalIterator.NO_MORE_INTERVALS, intervals.start());\n          assertEquals(IntervalIterator.NO_MORE_INTERVALS, intervals.end());\n          if (i > 0)\n            matchedDocs++;\n        }\n        else {\n          assertEquals(0, expected[id].length);\n        }\n      }\n    }\n    assertEquals(expectedMatchCount, matchedDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c78dc09f599cd42c186ddd94084249c8db1ede","date":1581000287,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#checkIntervals(IntervalsSource,String,int,int[][]).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#checkIntervals(IntervalsSource,String,int,int[][]).mjava","sourceNew":"  private void checkIntervals(IntervalsSource source, String field, int expectedMatchCount, int[][] expected) throws IOException {\n    int matchedDocs = 0;\n    for (LeafReaderContext ctx : searcher.getIndexReader().leaves()) {\n      assertNull(source.intervals(field + \"fake\", ctx));\n      NumericDocValues ids = DocValues.getNumeric(ctx.reader(), \"id\");\n      IntervalIterator intervals = source.intervals(field, ctx);\n      if (intervals == null)\n        continue;\n      for (int doc = 0; doc < ctx.reader().maxDoc(); doc++) {\n        ids.advance(doc);\n        MatchesIterator mi = source.matches(field, ctx, doc);\n        int id = (int) ids.longValue();\n        if (intervals.docID() == doc ||\n            (intervals.docID() < doc && intervals.advance(doc) == doc)) {\n          int i = 0, pos;\n          assertEquals(-1, intervals.start());\n          assertEquals(-1, intervals.end());\n          while ((pos = intervals.nextInterval()) != IntervalIterator.NO_MORE_INTERVALS) {\n            if (i >= expected[id].length) {\n              fail(\"Unexpected match in doc \" + id + \": \" + intervals);\n            }\n            assertEquals(source + \": wrong start value in doc \" + id, expected[id][i], pos);\n            assertEquals(\"start() != pos returned from nextInterval()\", expected[id][i], intervals.start());\n            assertEquals(\"Wrong end value in doc \" + id, expected[id][i + 1], intervals.end());\n            i += 2;\n            assertTrue(mi.next());\n            assertEquals(source + \": wrong start value in match in doc \" + id, intervals.start(), mi.startPosition());\n            assertEquals(source + \": wrong end value in match in doc \" + id, intervals.end(), mi.endPosition());\n          }\n          assertEquals(source + \": wrong number of endpoints in doc \" + id, expected[id].length, i);\n          assertEquals(IntervalIterator.NO_MORE_INTERVALS, intervals.start());\n          assertEquals(IntervalIterator.NO_MORE_INTERVALS, intervals.end());\n          if (i > 0) {\n            matchedDocs++;\n            assertFalse(mi.next());\n          } else {\n            assertNull(\"Expected null matches iterator on doc \" + id, mi);\n          }\n        }\n        else {\n          assertEquals(0, expected[id].length);\n          assertNull(mi);\n        }\n      }\n    }\n    assertEquals(expectedMatchCount, matchedDocs);\n  }\n\n","sourceOld":"  private void checkIntervals(IntervalsSource source, String field, int expectedMatchCount, int[][] expected) throws IOException {\n    int matchedDocs = 0;\n    for (LeafReaderContext ctx : searcher.getIndexReader().leaves()) {\n      assertNull(source.intervals(field + \"fake\", ctx));\n      NumericDocValues ids = DocValues.getNumeric(ctx.reader(), \"id\");\n      IntervalIterator intervals = source.intervals(field, ctx);\n      if (intervals == null)\n        continue;\n      for (int doc = 0; doc < ctx.reader().maxDoc(); doc++) {\n        ids.advance(doc);\n        int id = (int) ids.longValue();\n        if (intervals.docID() == doc ||\n            (intervals.docID() < doc && intervals.advance(doc) == doc)) {\n          int i = 0, pos;\n          assertEquals(-1, intervals.start());\n          assertEquals(-1, intervals.end());\n          while ((pos = intervals.nextInterval()) != IntervalIterator.NO_MORE_INTERVALS) {\n            if (i >= expected[id].length) {\n              fail(\"Unexpected match in doc \" + id + \": \" + intervals);\n            }\n            assertEquals(source + \": wrong start value in doc \" + id, expected[id][i], pos);\n            assertEquals(\"start() != pos returned from nextInterval()\", expected[id][i], intervals.start());\n            assertEquals(\"Wrong end value in doc \" + id, expected[id][i + 1], intervals.end());\n            i += 2;\n          }\n          assertEquals(source + \": wrong number of endpoints in doc \" + id, expected[id].length, i);\n          assertEquals(IntervalIterator.NO_MORE_INTERVALS, intervals.start());\n          assertEquals(IntervalIterator.NO_MORE_INTERVALS, intervals.end());\n          if (i > 0)\n            matchedDocs++;\n        }\n        else {\n          assertEquals(0, expected[id].length);\n        }\n      }\n    }\n    assertEquals(expectedMatchCount, matchedDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30c78dc09f599cd42c186ddd94084249c8db1ede":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30c78dc09f599cd42c186ddd94084249c8db1ede"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["30c78dc09f599cd42c186ddd94084249c8db1ede"],"30c78dc09f599cd42c186ddd94084249c8db1ede":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}