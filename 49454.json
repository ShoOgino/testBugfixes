{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","commits":[{"id":"70b55953b6a72596cb534ead735a8b849a473cac","date":1363634568,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testBigDocuments().mjava","sourceNew":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(getClass().getSimpleName()));\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexed(false);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    iw.close();\n    dir.close();\n    dir = newFSDirectory(_TestUtil.getTempDir(getClass().getSimpleName()));\n    iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexed(false);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97e384bac6e0302198b7ccc306240b6c48271502","date":1368459931,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","sourceNew":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(_TestUtil.getTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexed(false);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(getClass().getSimpleName()));\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexed(false);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","sourceNew":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(TestUtil.getTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexed(false);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(_TestUtil.getTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexed(false);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","sourceNew":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(TestUtil.createTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexed(false);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(TestUtil.getTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexed(false);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","sourceNew":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexed(false);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(TestUtil.createTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexed(false);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","sourceNew":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexed(false);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(TestUtil.getTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexed(false);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","sourceNew":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexed(false);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexed(false);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","sourceNew":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexed(false);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexed(false);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","sourceNew":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexed(false);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexed(false);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","sourceNew":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexOptions(null);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexed(false);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","sourceNew":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexOptions(null);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexed(false);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","sourceNew":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexOptions(IndexOptions.NO);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexOptions(null);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95ce1375367b92d411a06175eab3915fe93c6bc","date":1414788502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","sourceNew":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexOptions(IndexOptions.NONE);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexOptions(IndexOptions.NO);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","sourceNew":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexOptions(IndexOptions.NONE);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final Document doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final IndexableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexOptions(IndexOptions.NONE);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6448f67be45147de82a85cd903fec34e8930da75","date":1477041277,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","sourceNew":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomNumbers.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexOptions(IndexOptions.NONE);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomNumbers.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomNumbers.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final Document doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final IndexableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexOptions(IndexOptions.NONE);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final Document doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final IndexableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","sourceNew":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomNumbers.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexOptions(IndexOptions.NONE);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomNumbers.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomNumbers.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final Document doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final IndexableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexOptions(IndexOptions.NONE);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final Document doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final IndexableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"336a0bd816238e31c31e191e1b046e974f7ae5fe","date":1482358070,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","sourceNew":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    assumeWorkingMMapOnWindows();\n    \n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomNumbers.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexOptions(IndexOptions.NONE);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomNumbers.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomNumbers.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final Document doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final IndexableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomNumbers.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexOptions(IndexOptions.NONE);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomNumbers.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomNumbers.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final Document doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final IndexableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","sourceNew":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    assumeWorkingMMapOnWindows();\n    \n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomNumbers.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexOptions(IndexOptions.NONE);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomNumbers.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomNumbers.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final Document doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final IndexableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomNumbers.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexOptions(IndexOptions.NONE);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomNumbers.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomNumbers.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final Document doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final IndexableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","sourceNew":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    assumeWorkingMMapOnWindows();\n    \n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomNumbers.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexOptions(IndexOptions.NONE);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomNumbers.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomNumbers.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits.value);\n      final Document doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final IndexableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    assumeWorkingMMapOnWindows();\n    \n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomNumbers.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexOptions(IndexOptions.NONE);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomNumbers.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomNumbers.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final Document doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final IndexableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbc046116d49cd3d0c50f7169cabaa295bc23a4a","date":1552989114,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testBigDocuments().mjava","sourceNew":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    assumeWorkingMMapOnWindows();\n    \n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomNumbers.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexOptions(IndexOptions.NONE);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomNumbers.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomNumbers.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = maybeWrapWithMergingReader(DirectoryReader.open(dir));\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits.value);\n      final Document doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final IndexableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    assumeWorkingMMapOnWindows();\n    \n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    // we can't just use newFSDirectory, because this test doesn't really index anything.\n    // so if we get NRTCachingDir+SimpleText, we make massive stored fields and OOM (LUCENE-4484)\n    Directory dir = new MockDirectoryWrapper(random(), new MMapDirectory(createTempDir(\"testBigDocuments\")));\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomNumbers.randomIntBetween(random(), 2, 30));\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexOptions(IndexOptions.NONE);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomNumbers.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomNumbers.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits.value);\n      final Document doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final IndexableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["6613659748fe4411a7dcf85266e55db1f95f7315","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["97e384bac6e0302198b7ccc306240b6c48271502"],"dbc046116d49cd3d0c50f7169cabaa295bc23a4a":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["3184874f7f3aca850248483485b4995343066875"],"d0d579490a72f2e6297eaa648940611234c57cf1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"97e384bac6e0302198b7ccc306240b6c48271502":["70b55953b6a72596cb534ead735a8b849a473cac"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"3184874f7f3aca850248483485b4995343066875":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","336a0bd816238e31c31e191e1b046e974f7ae5fe"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["d0ef034a4f10871667ae75181537775ddcf8ade4","3184874f7f3aca850248483485b4995343066875"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["d0d579490a72f2e6297eaa648940611234c57cf1"],"6448f67be45147de82a85cd903fec34e8930da75":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","6448f67be45147de82a85cd903fec34e8930da75"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"70b55953b6a72596cb534ead735a8b849a473cac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["336a0bd816238e31c31e191e1b046e974f7ae5fe"],"336a0bd816238e31c31e191e1b046e974f7ae5fe":["6448f67be45147de82a85cd903fec34e8930da75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dbc046116d49cd3d0c50f7169cabaa295bc23a4a"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["f95ce1375367b92d411a06175eab3915fe93c6bc"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"dbc046116d49cd3d0c50f7169cabaa295bc23a4a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"d0d579490a72f2e6297eaa648940611234c57cf1":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"97e384bac6e0302198b7ccc306240b6c48271502":["6613659748fe4411a7dcf85266e55db1f95f7315"],"3184874f7f3aca850248483485b4995343066875":["2bb2842e561df4e8e9ad89010605fc86ac265465","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"6448f67be45147de82a85cd903fec34e8930da75":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","336a0bd816238e31c31e191e1b046e974f7ae5fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70b55953b6a72596cb534ead735a8b849a473cac"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["3184874f7f3aca850248483485b4995343066875","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"70b55953b6a72596cb534ead735a8b849a473cac":["97e384bac6e0302198b7ccc306240b6c48271502"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["dbc046116d49cd3d0c50f7169cabaa295bc23a4a"],"336a0bd816238e31c31e191e1b046e974f7ae5fe":["f03e4bed5023ec3ef93a771b8888cae991cf448d","83788ad129a5154d5c6562c4e8ce3db48793aada"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["6448f67be45147de82a85cd903fec34e8930da75","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f03e4bed5023ec3ef93a771b8888cae991cf448d","0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}