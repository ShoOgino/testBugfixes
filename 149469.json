{"path":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testPhraseWithGap().mjava","commits":[{"id":"7327eec6fde8afb35c01f6234cb50c42a7c737d3","date":1374238360,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testPhraseWithGap().mjava","pathOld":"/dev/null","sourceNew":"  public void testPhraseWithGap() throws IOException {\n    final Directory directory = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), directory, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    Document doc = new Document();\n    FieldType withVectors = new FieldType(TextField.TYPE_STORED);\n    withVectors.setStoreTermVectors(true);\n    withVectors.setStoreTermVectorPositions(true);\n    withVectors.setStoreTermVectorOffsets(true);\n    doc.add(new Field(FIELD, \"a b c\", withVectors));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n\n    final PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(FIELD, \"c\"), 2);\n    pq.add(new Term(FIELD, \"a\"), 0);\n\n    assertEquals(1, new IndexSearcher(ir).search(pq, 1).totalHits);\n\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    FieldQuery fieldQuery  = highlighter.getFieldQuery(pq, ir);\n    String[] bestFragments = highlighter.getBestFragments(fieldQuery, ir, 0, FIELD, 1000, 1);\n    assertEquals(\"<b>a</b> b <b>c</b>\", bestFragments[0]);\n\n    ir.close();\n    iw.close();\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testPhraseWithGap().mjava","pathOld":"/dev/null","sourceNew":"  public void testPhraseWithGap() throws IOException {\n    final Directory directory = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), directory, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    Document doc = new Document();\n    FieldType withVectors = new FieldType(TextField.TYPE_STORED);\n    withVectors.setStoreTermVectors(true);\n    withVectors.setStoreTermVectorPositions(true);\n    withVectors.setStoreTermVectorOffsets(true);\n    doc.add(new Field(FIELD, \"a b c\", withVectors));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n\n    final PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(FIELD, \"c\"), 2);\n    pq.add(new Term(FIELD, \"a\"), 0);\n\n    assertEquals(1, new IndexSearcher(ir).search(pq, 1).totalHits);\n\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    FieldQuery fieldQuery  = highlighter.getFieldQuery(pq, ir);\n    String[] bestFragments = highlighter.getBestFragments(fieldQuery, ir, 0, FIELD, 1000, 1);\n    assertEquals(\"<b>a</b> b <b>c</b>\", bestFragments[0]);\n\n    ir.close();\n    iw.close();\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08","date":1378464767,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testPhraseWithGap().mjava","sourceNew":null,"sourceOld":"  public void testPhraseWithGap() throws IOException {\n    final Directory directory = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), directory, new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    Document doc = new Document();\n    FieldType withVectors = new FieldType(TextField.TYPE_STORED);\n    withVectors.setStoreTermVectors(true);\n    withVectors.setStoreTermVectorPositions(true);\n    withVectors.setStoreTermVectorOffsets(true);\n    doc.add(new Field(FIELD, \"a b c\", withVectors));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n\n    final PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(FIELD, \"c\"), 2);\n    pq.add(new Term(FIELD, \"a\"), 0);\n\n    assertEquals(1, new IndexSearcher(ir).search(pq, 1).totalHits);\n\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    FieldQuery fieldQuery  = highlighter.getFieldQuery(pq, ir);\n    String[] bestFragments = highlighter.getBestFragments(fieldQuery, ir, 0, FIELD, 1000, 1);\n    assertEquals(\"<b>a</b> b <b>c</b>\", bestFragments[0]);\n\n    ir.close();\n    iw.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7327eec6fde8afb35c01f6234cb50c42a7c737d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08":["7327eec6fde8afb35c01f6234cb50c42a7c737d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","7327eec6fde8afb35c01f6234cb50c42a7c737d3"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"7327eec6fde8afb35c01f6234cb50c42a7c737d3":["cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08"],"cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}