{"path":"lucene/core/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#setMaxTokenLength(int).mjava","commits":[{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#setMaxTokenLength(int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#setMaxTokenLength(int).mjava","sourceNew":"  /**\n   * Set the max allowed token length.  No tokens longer than this are emitted.\n   * \n   * @throws IllegalArgumentException if the given length is outside of the\n   *  range [1, {@value #MAX_TOKEN_LENGTH_LIMIT}].\n   */ \n  public void setMaxTokenLength(int length) {\n    if (length < 1) {\n      throw new IllegalArgumentException(\"maxTokenLength must be greater than zero\");\n    } else if (length > MAX_TOKEN_LENGTH_LIMIT) {\n      throw new IllegalArgumentException(\"maxTokenLength may not exceed \" + MAX_TOKEN_LENGTH_LIMIT);\n    }\n    if (length != maxTokenLength) {\n      maxTokenLength = length;\n      scanner.setBufferSize(length);\n    }\n  }\n\n","sourceOld":"  /**\n   * Set the max allowed token length.  No tokens longer than this are emitted.\n   * \n   * @throws IllegalArgumentException if the given length is outside of the\n   *  range [1, {@value #MAX_TOKEN_LENGTH_LIMIT}].\n   */ \n  public void setMaxTokenLength(int length) {\n    if (length < 1) {\n      throw new IllegalArgumentException(\"maxTokenLength must be greater than zero\");\n    } else if (length > MAX_TOKEN_LENGTH_LIMIT) {\n      throw new IllegalArgumentException(\"maxTokenLength may not exceed \" + MAX_TOKEN_LENGTH_LIMIT);\n    }\n    if (length != maxTokenLength) {\n      maxTokenLength = length;\n      scanner.setBufferSize(length);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#setMaxTokenLength(int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#setMaxTokenLength(int).mjava","sourceNew":"  /**\n   * Set the max allowed token length.  No tokens longer than this are emitted.\n   * \n   * @throws IllegalArgumentException if the given length is outside of the\n   *  range [1, {@value #MAX_TOKEN_LENGTH_LIMIT}].\n   */ \n  public void setMaxTokenLength(int length) {\n    if (length < 1) {\n      throw new IllegalArgumentException(\"maxTokenLength must be greater than zero\");\n    } else if (length > MAX_TOKEN_LENGTH_LIMIT) {\n      throw new IllegalArgumentException(\"maxTokenLength may not exceed \" + MAX_TOKEN_LENGTH_LIMIT);\n    }\n    if (length != maxTokenLength) {\n      maxTokenLength = length;\n      scanner.setBufferSize(length);\n    }\n  }\n\n","sourceOld":"  /**\n   * Set the max allowed token length.  No tokens longer than this are emitted.\n   * \n   * @throws IllegalArgumentException if the given length is outside of the\n   *  range [1, {@value #MAX_TOKEN_LENGTH_LIMIT}].\n   */ \n  public void setMaxTokenLength(int length) {\n    if (length < 1) {\n      throw new IllegalArgumentException(\"maxTokenLength must be greater than zero\");\n    } else if (length > MAX_TOKEN_LENGTH_LIMIT) {\n      throw new IllegalArgumentException(\"maxTokenLength may not exceed \" + MAX_TOKEN_LENGTH_LIMIT);\n    }\n    if (length != maxTokenLength) {\n      maxTokenLength = length;\n      scanner.setBufferSize(length);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56bed0a9b00f85c91255f5f43b34cbd65fba3c46","date":1491939476,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#setMaxTokenLength(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#setMaxTokenLength(int).mjava","sourceNew":"  /**\n   * Set the max allowed token length.  Tokens larger than this will be chopped\n   * up at this token length and emitted as multiple tokens.  If you need to\n   * skip such large tokens, you could increase this max length, and then\n   * use {@code LengthFilter} to remove long tokens.  The default is\n   * {@link StandardAnalyzer#DEFAULT_MAX_TOKEN_LENGTH}.\n   * \n   * @throws IllegalArgumentException if the given length is outside of the\n   *  range [1, {@value #MAX_TOKEN_LENGTH_LIMIT}].\n   */ \n  public void setMaxTokenLength(int length) {\n    if (length < 1) {\n      throw new IllegalArgumentException(\"maxTokenLength must be greater than zero\");\n    } else if (length > MAX_TOKEN_LENGTH_LIMIT) {\n      throw new IllegalArgumentException(\"maxTokenLength may not exceed \" + MAX_TOKEN_LENGTH_LIMIT);\n    }\n    if (length != maxTokenLength) {\n      maxTokenLength = length;\n      scanner.setBufferSize(length);\n    }\n  }\n\n","sourceOld":"  /**\n   * Set the max allowed token length.  No tokens longer than this are emitted.\n   * \n   * @throws IllegalArgumentException if the given length is outside of the\n   *  range [1, {@value #MAX_TOKEN_LENGTH_LIMIT}].\n   */ \n  public void setMaxTokenLength(int length) {\n    if (length < 1) {\n      throw new IllegalArgumentException(\"maxTokenLength must be greater than zero\");\n    } else if (length > MAX_TOKEN_LENGTH_LIMIT) {\n      throw new IllegalArgumentException(\"maxTokenLength may not exceed \" + MAX_TOKEN_LENGTH_LIMIT);\n    }\n    if (length != maxTokenLength) {\n      maxTokenLength = length;\n      scanner.setBufferSize(length);\n    }\n  }\n\n","bugFix":["6c778eaf7acbfbb4aff3494fe8b9e3674f0c87a8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#setMaxTokenLength(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#setMaxTokenLength(int).mjava","sourceNew":"  /**\n   * Set the max allowed token length.  Tokens larger than this will be chopped\n   * up at this token length and emitted as multiple tokens.  If you need to\n   * skip such large tokens, you could increase this max length, and then\n   * use {@code LengthFilter} to remove long tokens.  The default is\n   * {@link StandardAnalyzer#DEFAULT_MAX_TOKEN_LENGTH}.\n   * \n   * @throws IllegalArgumentException if the given length is outside of the\n   *  range [1, {@value #MAX_TOKEN_LENGTH_LIMIT}].\n   */ \n  public void setMaxTokenLength(int length) {\n    if (length < 1) {\n      throw new IllegalArgumentException(\"maxTokenLength must be greater than zero\");\n    } else if (length > MAX_TOKEN_LENGTH_LIMIT) {\n      throw new IllegalArgumentException(\"maxTokenLength may not exceed \" + MAX_TOKEN_LENGTH_LIMIT);\n    }\n    if (length != maxTokenLength) {\n      maxTokenLength = length;\n      scanner.setBufferSize(length);\n    }\n  }\n\n","sourceOld":"  /**\n   * Set the max allowed token length.  No tokens longer than this are emitted.\n   * \n   * @throws IllegalArgumentException if the given length is outside of the\n   *  range [1, {@value #MAX_TOKEN_LENGTH_LIMIT}].\n   */ \n  public void setMaxTokenLength(int length) {\n    if (length < 1) {\n      throw new IllegalArgumentException(\"maxTokenLength must be greater than zero\");\n    } else if (length > MAX_TOKEN_LENGTH_LIMIT) {\n      throw new IllegalArgumentException(\"maxTokenLength may not exceed \" + MAX_TOKEN_LENGTH_LIMIT);\n    }\n    if (length != maxTokenLength) {\n      maxTokenLength = length;\n      scanner.setBufferSize(length);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"56bed0a9b00f85c91255f5f43b34cbd65fba3c46":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["56bed0a9b00f85c91255f5f43b34cbd65fba3c46"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","56bed0a9b00f85c91255f5f43b34cbd65fba3c46","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"56bed0a9b00f85c91255f5f43b34cbd65fba3c46":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}