{"path":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testDistributedQueue().mjava","commits":[{"id":"a26e5b19dd569457c97ec923d7e132aa4c8b2a41","date":1414589895,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testDistributedQueue().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDistributedQueue() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    String testData = \"hello world\";\n    long timeoutMs = 500L;\n\n    DistributedQueue dq = new DistributedQueue(zkClient, setupDistributedQueueZNode(dqZNode));\n\n    // basic ops\n    assertTrue(dq.poll() == null);\n    byte[] data = testData.getBytes(\"UTF-8\");\n    dq.offer(data);\n    assertEquals(new String(dq.peek(),\"UTF-8\"), testData);\n    assertEquals(new String(dq.take(),\"UTF-8\"), testData);\n    assertTrue(dq.poll() == null);\n    QueueEvent qe = dq.offer(data, timeoutMs);\n    assertNotNull(qe);\n    assertEquals(new String(dq.remove(),\"UTF-8\"), testData);\n\n    // should block until the background thread makes the offer\n    (new QueueChangerThread(dq, 1000)).start();\n    qe = dq.peek(true);\n    assertNotNull(qe);\n    dq.remove();\n\n    // timeout scenario ... background thread won't offer until long after the peek times out\n    QueueChangerThread qct = new QueueChangerThread(dq, 1000);\n    qct.start();\n    qe = dq.peek(500);\n    assertTrue(qe == null);\n\n    try {\n      qct.interrupt();\n    } catch (Exception exc) {}\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b04fb085d4cabdbb4b2bbd931fb0571d37e24805","date":1414593989,"type":4,"author":"Timothy Potter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testDistributedQueue().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testDistributedQueue() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    String testData = \"hello world\";\n    long timeoutMs = 500L;\n\n    DistributedQueue dq = new DistributedQueue(zkClient, setupDistributedQueueZNode(dqZNode));\n\n    // basic ops\n    assertTrue(dq.poll() == null);\n    byte[] data = testData.getBytes(\"UTF-8\");\n    dq.offer(data);\n    assertEquals(new String(dq.peek(),\"UTF-8\"), testData);\n    assertEquals(new String(dq.take(),\"UTF-8\"), testData);\n    assertTrue(dq.poll() == null);\n    QueueEvent qe = dq.offer(data, timeoutMs);\n    assertNotNull(qe);\n    assertEquals(new String(dq.remove(),\"UTF-8\"), testData);\n\n    // should block until the background thread makes the offer\n    (new QueueChangerThread(dq, 1000)).start();\n    qe = dq.peek(true);\n    assertNotNull(qe);\n    dq.remove();\n\n    // timeout scenario ... background thread won't offer until long after the peek times out\n    QueueChangerThread qct = new QueueChangerThread(dq, 1000);\n    qct.start();\n    qe = dq.peek(500);\n    assertTrue(qe == null);\n\n    try {\n      qct.interrupt();\n    } catch (Exception exc) {}\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f1a0016e65424cb251992c72022616d73753b7e","date":1414693186,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testDistributedQueue().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDistributedQueue() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    String testData = \"hello world\";\n    long timeoutMs = 500L;\n\n    DistributedQueue dq = new DistributedQueue(zkClient, setupDistributedQueueZNode(dqZNode));\n\n    // basic ops\n    assertTrue(dq.poll() == null);\n    byte[] data = testData.getBytes(UTF8);\n    dq.offer(data);\n    assertEquals(new String(dq.peek(),UTF8), testData);\n    assertEquals(new String(dq.take(),UTF8), testData);\n    assertTrue(dq.poll() == null);\n    QueueEvent qe = dq.offer(data, timeoutMs);\n    assertNotNull(qe);\n    assertEquals(new String(dq.remove(),UTF8), testData);\n\n    // should block until the background thread makes the offer\n    (new QueueChangerThread(dq, 1000)).start();\n    qe = dq.peek(true);\n    assertNotNull(qe);\n    dq.remove();\n\n    // timeout scenario ... background thread won't offer until long after the peek times out\n    QueueChangerThread qct = new QueueChangerThread(dq, 1000);\n    qct.start();\n    qe = dq.peek(500);\n    assertTrue(qe == null);\n\n    try {\n      qct.interrupt();\n    } catch (Exception exc) {}\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a282020d6c9a4ea32a359539e283e4771a2fda8","date":1440047542,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testDistributedQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedQueueTest#testDistributedQueue().mjava","sourceNew":"  @Test\n  public void testDistributedQueue() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    // basic ops\n    assertNull(dq.poll());\n    try {\n      dq.remove();\n      fail(\"NoSuchElementException expected\");\n    } catch (NoSuchElementException expected) {\n      // expected\n    }\n\n    dq.offer(data);\n    assertArrayEquals(dq.peek(500), data);\n    assertArrayEquals(dq.remove(), data);\n    assertNull(dq.poll());\n\n    dq.offer(data);\n    assertArrayEquals(dq.take(), data); // waits for data\n    assertNull(dq.poll());\n\n    dq.offer(data);\n    dq.peek(true); // wait until data is definitely there before calling remove\n    assertArrayEquals(dq.remove(), data);\n    assertNull(dq.poll());\n\n    // should block until the background thread makes the offer\n    (new QueueChangerThread(dq, 1000)).start();\n    assertNotNull(dq.peek(true));\n    assertNotNull(dq.remove());\n    assertNull(dq.poll());\n\n    // timeout scenario ... background thread won't offer until long after the peek times out\n    QueueChangerThread qct = new QueueChangerThread(dq, 1000);\n    qct.start();\n    assertNull(dq.peek(500));\n    qct.join();\n  }\n\n","sourceOld":"  @Test\n  public void testDistributedQueue() throws Exception {\n    String dqZNode = \"/distqueue/test\";\n    String testData = \"hello world\";\n    long timeoutMs = 500L;\n\n    DistributedQueue dq = new DistributedQueue(zkClient, setupDistributedQueueZNode(dqZNode));\n\n    // basic ops\n    assertTrue(dq.poll() == null);\n    byte[] data = testData.getBytes(UTF8);\n    dq.offer(data);\n    assertEquals(new String(dq.peek(),UTF8), testData);\n    assertEquals(new String(dq.take(),UTF8), testData);\n    assertTrue(dq.poll() == null);\n    QueueEvent qe = dq.offer(data, timeoutMs);\n    assertNotNull(qe);\n    assertEquals(new String(dq.remove(),UTF8), testData);\n\n    // should block until the background thread makes the offer\n    (new QueueChangerThread(dq, 1000)).start();\n    qe = dq.peek(true);\n    assertNotNull(qe);\n    dq.remove();\n\n    // timeout scenario ... background thread won't offer until long after the peek times out\n    QueueChangerThread qct = new QueueChangerThread(dq, 1000);\n    qct.start();\n    qe = dq.peek(500);\n    assertTrue(qe == null);\n\n    try {\n      qct.interrupt();\n    } catch (Exception exc) {}\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b04fb085d4cabdbb4b2bbd931fb0571d37e24805":["a26e5b19dd569457c97ec923d7e132aa4c8b2a41"],"a26e5b19dd569457c97ec923d7e132aa4c8b2a41":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3f1a0016e65424cb251992c72022616d73753b7e":["b04fb085d4cabdbb4b2bbd931fb0571d37e24805"],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["3f1a0016e65424cb251992c72022616d73753b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a282020d6c9a4ea32a359539e283e4771a2fda8"]},"commit2Childs":{"b04fb085d4cabdbb4b2bbd931fb0571d37e24805":["3f1a0016e65424cb251992c72022616d73753b7e"],"a26e5b19dd569457c97ec923d7e132aa4c8b2a41":["b04fb085d4cabdbb4b2bbd931fb0571d37e24805"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a26e5b19dd569457c97ec923d7e132aa4c8b2a41"],"3f1a0016e65424cb251992c72022616d73753b7e":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}