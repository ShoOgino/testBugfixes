{"path":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testFarsi().mjava","commits":[{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testFarsi().mjava","pathOld":"/dev/null","sourceNew":"  public void testFarsi() throws Exception {\n\n    /* build an index */\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new SimpleAnalyzer(), T,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc\n        .add(new Field(\"body\", \"body\", Field.Store.YES,\n            Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not supported).\n    ScoreDoc[] result = search.search(csrq(\"content\", \"\\u062F\", \"\\u0698\", T, T,\n        c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = search.search(csrq(\"content\", \"\\u0633\", \"\\u0638\", T, T, c), null,\n        1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testFarsi().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testFarsi().mjava","sourceNew":"  public void testFarsi() throws Exception {\n\n    /* build an index */\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new SimpleAnalyzer(), T,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc\n        .add(new Field(\"body\", \"body\", Field.Store.YES,\n            Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not supported).\n    ScoreDoc[] result = search.search(csrq(\"content\", \"\\u062F\", \"\\u0698\", T, T,\n        c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = search.search(csrq(\"content\", \"\\u0633\", \"\\u0638\", T, T, c), null,\n        1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","sourceOld":"  public void testFarsi() throws Exception {\n\n    /* build an index */\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new SimpleAnalyzer(), T,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc\n        .add(new Field(\"body\", \"body\", Field.Store.YES,\n            Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not supported).\n    ScoreDoc[] result = search.search(csrq(\"content\", \"\\u062F\", \"\\u0698\", T, T,\n        c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = search.search(csrq(\"content\", \"\\u0633\", \"\\u0638\", T, T, c), null,\n        1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testFarsi().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testFarsi().mjava","sourceNew":"  public void testFarsi() throws Exception {\n\n    /* build an index */\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new SimpleAnalyzer(), T,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc\n        .add(new Field(\"body\", \"body\", Field.Store.YES,\n            Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not supported).\n    ScoreDoc[] result = search.search(csrq(\"content\", \"\\u062F\", \"\\u0698\", T, T,\n        c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = search.search(csrq(\"content\", \"\\u0633\", \"\\u0638\", T, T, c), null,\n        1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","sourceOld":"  public void testFarsi() throws Exception {\n\n    /* build an index */\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new SimpleAnalyzer(), T,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc\n        .add(new Field(\"body\", \"body\", Field.Store.YES,\n            Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not supported).\n    ScoreDoc[] result = search.search(csrq(\"content\", \"\\u062F\", \"\\u0698\", T, T,\n        c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = search.search(csrq(\"content\", \"\\u0633\", \"\\u0638\", T, T, c), null,\n        1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testFarsi().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testFarsi().mjava","sourceNew":"  public void testFarsi() throws Exception {\n\n    /* build an index */\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new SimpleAnalyzer(Version.LUCENE_CURRENT), T,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc\n        .add(new Field(\"body\", \"body\", Field.Store.YES,\n            Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not supported).\n    ScoreDoc[] result = search.search(csrq(\"content\", \"\\u062F\", \"\\u0698\", T, T,\n        c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = search.search(csrq(\"content\", \"\\u0633\", \"\\u0638\", T, T, c), null,\n        1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","sourceOld":"  public void testFarsi() throws Exception {\n\n    /* build an index */\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new SimpleAnalyzer(), T,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc\n        .add(new Field(\"body\", \"body\", Field.Store.YES,\n            Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not supported).\n    ScoreDoc[] result = search.search(csrq(\"content\", \"\\u062F\", \"\\u0698\", T, T,\n        c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = search.search(csrq(\"content\", \"\\u0633\", \"\\u0638\", T, T, c), null,\n        1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testFarsi().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testFarsi().mjava","sourceNew":"  public void testFarsi() throws Exception {\n\n    /* build an index */\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new SimpleAnalyzer(TEST_VERSION_CURRENT), T,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc\n        .add(new Field(\"body\", \"body\", Field.Store.YES,\n            Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not supported).\n    ScoreDoc[] result = search.search(csrq(\"content\", \"\\u062F\", \"\\u0698\", T, T,\n        c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = search.search(csrq(\"content\", \"\\u0633\", \"\\u0638\", T, T, c), null,\n        1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","sourceOld":"  public void testFarsi() throws Exception {\n\n    /* build an index */\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new SimpleAnalyzer(Version.LUCENE_CURRENT), T,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc\n        .add(new Field(\"body\", \"body\", Field.Store.YES,\n            Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not supported).\n    ScoreDoc[] result = search.search(csrq(\"content\", \"\\u062F\", \"\\u0698\", T, T,\n        c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = search.search(csrq(\"content\", \"\\u0633\", \"\\u0638\", T, T, c), null,\n        1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testFarsi().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testFarsi().mjava","sourceNew":"  public void testFarsi() throws Exception {\n\n    /* build an index */\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc\n        .add(new Field(\"body\", \"body\", Field.Store.YES,\n            Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not supported).\n    ScoreDoc[] result = search.search(csrq(\"content\", \"\\u062F\", \"\\u0698\", T, T,\n        c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = search.search(csrq(\"content\", \"\\u0633\", \"\\u0638\", T, T, c), null,\n        1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","sourceOld":"  public void testFarsi() throws Exception {\n\n    /* build an index */\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new SimpleAnalyzer(TEST_VERSION_CURRENT), T,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc\n        .add(new Field(\"body\", \"body\", Field.Store.YES,\n            Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not supported).\n    ScoreDoc[] result = search.search(csrq(\"content\", \"\\u062F\", \"\\u0698\", T, T,\n        c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = search.search(csrq(\"content\", \"\\u0633\", \"\\u0638\", T, T, c), null,\n        1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testFarsi().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testFarsi().mjava","sourceNew":"  public void testFarsi() throws Exception {\n\n    /* build an index */\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new SimpleAnalyzer(TEST_VERSION_CURRENT), T,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc\n        .add(new Field(\"body\", \"body\", Field.Store.YES,\n            Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not supported).\n    ScoreDoc[] result = search.search(csrq(\"content\", \"\\u062F\", \"\\u0698\", T, T,\n        c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = search.search(csrq(\"content\", \"\\u0633\", \"\\u0638\", T, T, c), null,\n        1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","sourceOld":"  public void testFarsi() throws Exception {\n\n    /* build an index */\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc\n        .add(new Field(\"body\", \"body\", Field.Store.YES,\n            Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not supported).\n    ScoreDoc[] result = search.search(csrq(\"content\", \"\\u062F\", \"\\u0698\", T, T,\n        c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = search.search(csrq(\"content\", \"\\u0633\", \"\\u0638\", T, T, c), null,\n        1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testFarsi().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testFarsi().mjava","sourceNew":"  public void testFarsi() throws Exception {\n\n    /* build an index */\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc\n        .add(new Field(\"body\", \"body\", Field.Store.YES,\n            Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not supported).\n    ScoreDoc[] result = search.search(csrq(\"content\", \"\\u062F\", \"\\u0698\", T, T,\n        c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = search.search(csrq(\"content\", \"\\u0633\", \"\\u0638\", T, T, c), null,\n        1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","sourceOld":"  public void testFarsi() throws Exception {\n\n    /* build an index */\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new SimpleAnalyzer(TEST_VERSION_CURRENT), T,\n        IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc\n        .add(new Field(\"body\", \"body\", Field.Store.YES,\n            Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not supported).\n    ScoreDoc[] result = search.search(csrq(\"content\", \"\\u062F\", \"\\u0698\", T, T,\n        c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = search.search(csrq(\"content\", \"\\u0633\", \"\\u0638\", T, T, c), null,\n        1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testFarsi().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testFarsi().mjava","sourceNew":"  public void testFarsi() throws Exception {\n\n    /* build an index */\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc\n        .add(new Field(\"body\", \"body\", Field.Store.YES,\n            Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not supported).\n    ScoreDoc[] result = search.search(csrq(\"content\", \"\\u062F\", \"\\u0698\", T, T,\n        c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = search.search(csrq(\"content\", \"\\u0633\", \"\\u0638\", T, T, c), null,\n        1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","sourceOld":"  public void testFarsi() throws Exception {\n\n    /* build an index */\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", Field.Store.YES,\n        Field.Index.NOT_ANALYZED));\n    doc\n        .add(new Field(\"body\", \"body\", Field.Store.YES,\n            Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in\n    // RuleBasedCollator. However, the Arabic Locale seems to order the Farsi\n    // characters properly.\n    Collator c = Collator.getInstance(new Locale(\"ar\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a ConstantScoreRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is\n    // not supported).\n    ScoreDoc[] result = search.search(csrq(\"content\", \"\\u062F\", \"\\u0698\", T, T,\n        c), null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = search.search(csrq(\"content\", \"\\u0633\", \"\\u0638\", T, T, c), null,\n        1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0a046c0c310bc77931fc8441bd920053b607dd14"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["6f7a11eba51d213f09b96054111cf56a1e5796a3","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}