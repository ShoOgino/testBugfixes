{"path":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexImpl.DocTermsIndexEnum#seekExact(long).mjava","commits":[{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexImpl.DocTermsIndexEnum#seekExact(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/cache/DocTermsIndexCreator.DocTermsIndexImpl.DocTermsIndexEnum#seekExact(long).mjava","sourceNew":"      public void seekExact(long ord) throws IOException {\n        assert(ord >= 0 && ord <= numOrd);\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillAndGetIndex(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n      }\n\n","sourceOld":"      public void seekExact(long ord) throws IOException {\n        assert(ord >= 0 && ord <= numOrd);\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillAndGetIndex(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexImpl.DocTermsIndexEnum#seekExact(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexImpl.DocTermsIndexEnum#seekExact(long).mjava","sourceNew":"      public void seekExact(long ord) throws IOException {\n        assert(ord >= 0 && ord <= numOrd);\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillAndGetIndex(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n      }\n\n","sourceOld":"      public void seekExact(long ord) throws IOException {\n        assert(ord >= 0 && ord <= numOrd);\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillAndGetIndex(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["382fe3a6ca9745891afebda9b9a57cc158305545"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"382fe3a6ca9745891afebda9b9a57cc158305545":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["382fe3a6ca9745891afebda9b9a57cc158305545"],"382fe3a6ca9745891afebda9b9a57cc158305545":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}