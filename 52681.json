{"path":"src/test/org/apache/lucene/queryParser/TestMultiAnalyzer#testAnalyzer().mjava","commits":[{"id":"a9c89e22383b1c327cc5d93984637d9a5165312e","date":1100358971,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiAnalyzer#testAnalyzer().mjava","pathOld":"/dev/null","sourceNew":"  public void testAnalyzer() throws ParseException {\n    \n    QueryParser qp = new QueryParser(\"\", new TestAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // non-default operator:\n    qp.setOperator(QueryParser.DEFAULT_OPERATOR_AND);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d535a1cf371b8d34c5adb9cfb8f38b759061782","date":1104771931,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiAnalyzer#testAnalyzer().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiAnalyzer#testAnalyzer().mjava","sourceNew":"  public void testAnalyzer() throws ParseException {\n    \n    QueryParser qp = new QueryParser(\"\", new TestAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","sourceOld":"  public void testAnalyzer() throws ParseException {\n    \n    QueryParser qp = new QueryParser(\"\", new TestAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // non-default operator:\n    qp.setOperator(QueryParser.DEFAULT_OPERATOR_AND);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d79a074a316c6cd3908ca819cd98ad74d1e4dd30","date":1131491144,"type":5,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiAnalyzer#testMultiAnalyzer().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiAnalyzer#testAnalyzer().mjava","sourceNew":"  public void testMultiAnalyzer() throws ParseException {\n    \n    QueryParser qp = new QueryParser(\"\", new MultiAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","sourceOld":"  public void testAnalyzer() throws ParseException {\n    \n    QueryParser qp = new QueryParser(\"\", new TestAnalyzer());\n\n    // trivial, no multiple tokens:\n    assertEquals(\"foo\", qp.parse(\"foo\").toString());\n    assertEquals(\"foo foobar\", qp.parse(\"foo foobar\").toString());\n\n    // two tokens at the same position:\n    assertEquals(\"(multi multi2) foo\", qp.parse(\"multi foo\").toString());\n    assertEquals(\"foo (multi multi2)\", qp.parse(\"foo multi\").toString());\n    assertEquals(\"(multi multi2) (multi multi2)\", qp.parse(\"multi multi\").toString());\n    assertEquals(\"+(foo (multi multi2)) +(bar (multi multi2))\",\n        qp.parse(\"+(foo multi) +(bar multi)\").toString());\n    assertEquals(\"+(foo (multi multi2)) field:\\\"bar (multi multi2)\\\"\",\n        qp.parse(\"+(foo multi) field:\\\"bar multi\\\"\").toString());\n\n    // phrases:\n    assertEquals(\"\\\"(multi multi2) foo\\\"\", qp.parse(\"\\\"multi foo\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2)\\\"\", qp.parse(\"\\\"foo multi\\\"\").toString());\n    assertEquals(\"\\\"foo (multi multi2) foobar (multi multi2)\\\"\",\n        qp.parse(\"\\\"foo multi foobar multi\\\"\").toString());\n\n    // fields:\n    assertEquals(\"(field:multi field:multi2) field:foo\", qp.parse(\"field:multi field:foo\").toString());\n    assertEquals(\"field:\\\"(multi multi2) foo\\\"\", qp.parse(\"field:\\\"multi foo\\\"\").toString());\n\n    // three tokens at one position:\n    assertEquals(\"triplemulti multi3 multi2\", qp.parse(\"triplemulti\").toString());\n    assertEquals(\"foo (triplemulti multi3 multi2) foobar\",\n        qp.parse(\"foo triplemulti foobar\").toString());\n\n    // phrase with non-default slop:\n    assertEquals(\"\\\"(multi multi2) foo\\\"~10\", qp.parse(\"\\\"multi foo\\\"~10\").toString());\n\n    // phrase with non-default boost:\n    assertEquals(\"\\\"(multi multi2) foo\\\"^2.0\", qp.parse(\"\\\"multi foo\\\"^2\").toString());\n\n    // non-default operator:\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(\"+(multi multi2) +foo\", qp.parse(\"multi foo\").toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d535a1cf371b8d34c5adb9cfb8f38b759061782":["a9c89e22383b1c327cc5d93984637d9a5165312e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d79a074a316c6cd3908ca819cd98ad74d1e4dd30"],"d79a074a316c6cd3908ca819cd98ad74d1e4dd30":["6d535a1cf371b8d34c5adb9cfb8f38b759061782"],"a9c89e22383b1c327cc5d93984637d9a5165312e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6d535a1cf371b8d34c5adb9cfb8f38b759061782":["d79a074a316c6cd3908ca819cd98ad74d1e4dd30"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a9c89e22383b1c327cc5d93984637d9a5165312e"],"a9c89e22383b1c327cc5d93984637d9a5165312e":["6d535a1cf371b8d34c5adb9cfb8f38b759061782"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d79a074a316c6cd3908ca819cd98ad74d1e4dd30":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}