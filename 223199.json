{"path":"lucene/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T]).mjava","commits":[{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readNextRealArc(Arc[T]).mjava","sourceNew":"  Arc<T> readNextRealArc(Arc<T> arc) throws IOException {\n    // this is a continuing arc in a fixed array\n    final BytesReader in;\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in = getBytesReader(arc.posArcsStart - arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in = getBytesReader(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","sourceOld":"  Arc<T> readNextRealArc(Arc<T> arc) throws IOException {\n    // this is a continuing arc in a fixed array\n    final BytesReader in;\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in = getBytesReader(arc.posArcsStart - arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in = getBytesReader(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readNextRealArc(Arc[T]).mjava","sourceNew":"  Arc<T> readNextRealArc(Arc<T> arc) throws IOException {\n    // this is a continuing arc in a fixed array\n    final BytesReader in;\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in = getBytesReader(arc.posArcsStart - arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in = getBytesReader(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","sourceOld":"  Arc<T> readNextRealArc(Arc<T> arc) throws IOException {\n    // this is a continuing arc in a fixed array\n    final BytesReader in;\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in = getBytesReader(arc.posArcsStart - arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in = getBytesReader(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readNextRealArc(Arc[T]).mjava","sourceNew":"  Arc<T> readNextRealArc(Arc<T> arc) throws IOException {\n    // this is a continuing arc in a fixed array\n    final BytesReader in;\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in = getBytesReader(arc.posArcsStart - arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in = getBytesReader(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","sourceOld":"  Arc<T> readNextRealArc(Arc<T> arc) throws IOException {\n    // this is a continuing arc in a fixed array\n    final BytesReader in;\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in = getBytesReader(arc.posArcsStart - arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in = getBytesReader(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T]).mjava","sourceNew":"  Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.pos = arc.posArcsStart - arc.arcIdx*arc.bytesPerArc;\n    } else {\n      // arcs are packed\n      in.pos = arc.nextArc;\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","sourceOld":"  Arc<T> readNextRealArc(Arc<T> arc) throws IOException {\n    // this is a continuing arc in a fixed array\n    final BytesReader in;\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in = getBytesReader(arc.posArcsStart - arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in = getBytesReader(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.pos = arc.posArcsStart - arc.bytesPerArc * arc.numArcs;\n        }\n      }\n      arc.target = in.pos;\n    } else {\n      arc.target = in.readInt();\n      arc.nextArc = in.pos;\n    }\n\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}