{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapePointQuery#queryMatches(byte[],ShapeField.DecodedTriangle,ShapeField.QueryRelation).mjava","commits":[{"id":"6afbfd2ecc6d7825f89bbcf75e25046650f937a6","date":1579085873,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapePointQuery#queryMatches(byte[],ShapeField.DecodedTriangle,ShapeField.QueryRelation).mjava","pathOld":"/dev/null","sourceNew":"  /** returns true if the query matches the encoded triangle */\n  @Override\n  protected boolean queryMatches(byte[] t, ShapeField.DecodedTriangle scratchTriangle, ShapeField.QueryRelation queryRelation) {\n    ShapeField.decodeTriangle(t, scratchTriangle);\n\n    double alat = GeoEncodingUtils.decodeLatitude(scratchTriangle.aY);\n    double alon = GeoEncodingUtils.decodeLongitude(scratchTriangle.aX);\n    double blat = GeoEncodingUtils.decodeLatitude(scratchTriangle.bY);\n    double blon = GeoEncodingUtils.decodeLongitude(scratchTriangle.bX);\n    double clat = GeoEncodingUtils.decodeLatitude(scratchTriangle.cY);\n    double clon = GeoEncodingUtils.decodeLongitude(scratchTriangle.cX);\n\n    switch (queryRelation) {\n      case INTERSECTS:\n        return point2D.relateTriangle(alon, alat, blon, blat, clon, clat) != Relation.CELL_OUTSIDE_QUERY;\n      case WITHIN:\n        return point2D.relateTriangle(alon, alat, blon, blat, clon, clat) == Relation.CELL_INSIDE_QUERY;\n      case DISJOINT:\n        return point2D.relateTriangle(alon, alat, blon, blat, clon, clat) == Relation.CELL_OUTSIDE_QUERY;\n      default:\n        throw new IllegalArgumentException(\"Unsupported query type :[\" + queryRelation + \"]\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fb9d9c81bf2e6709854f7e362e5e3a3a3e75f61","date":1579089602,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapePointQuery#queryMatches(byte[],ShapeField.DecodedTriangle,ShapeField.QueryRelation).mjava","pathOld":"/dev/null","sourceNew":"  /** returns true if the query matches the encoded triangle */\n  @Override\n  protected boolean queryMatches(byte[] t, ShapeField.DecodedTriangle scratchTriangle, ShapeField.QueryRelation queryRelation) {\n    ShapeField.decodeTriangle(t, scratchTriangle);\n\n    double alat = GeoEncodingUtils.decodeLatitude(scratchTriangle.aY);\n    double alon = GeoEncodingUtils.decodeLongitude(scratchTriangle.aX);\n    double blat = GeoEncodingUtils.decodeLatitude(scratchTriangle.bY);\n    double blon = GeoEncodingUtils.decodeLongitude(scratchTriangle.bX);\n    double clat = GeoEncodingUtils.decodeLatitude(scratchTriangle.cY);\n    double clon = GeoEncodingUtils.decodeLongitude(scratchTriangle.cX);\n\n    switch (queryRelation) {\n      case INTERSECTS:\n        return point2D.relateTriangle(alon, alat, blon, blat, clon, clat) != Relation.CELL_OUTSIDE_QUERY;\n      case WITHIN:\n        return point2D.relateTriangle(alon, alat, blon, blat, clon, clat) == Relation.CELL_INSIDE_QUERY;\n      case DISJOINT:\n        return point2D.relateTriangle(alon, alat, blon, blat, clon, clat) == Relation.CELL_OUTSIDE_QUERY;\n      default:\n        throw new IllegalArgumentException(\"Unsupported query type :[\" + queryRelation + \"]\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonShapePointQuery#queryMatches(byte[],ShapeField.DecodedTriangle,ShapeField.QueryRelation).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapePointQuery#queryMatches(byte[],ShapeField.DecodedTriangle,ShapeField.QueryRelation).mjava","sourceNew":"  /** returns true if the query matches the encoded triangle */\n  @Override\n  protected boolean queryMatches(byte[] t, ShapeField.DecodedTriangle scratchTriangle, ShapeField.QueryRelation queryRelation) {\n    ShapeField.decodeTriangle(t, scratchTriangle);\n\n    double alat = GeoEncodingUtils.decodeLatitude(scratchTriangle.aY);\n    double alon = GeoEncodingUtils.decodeLongitude(scratchTriangle.aX);\n    double blat = GeoEncodingUtils.decodeLatitude(scratchTriangle.bY);\n    double blon = GeoEncodingUtils.decodeLongitude(scratchTriangle.bX);\n    double clat = GeoEncodingUtils.decodeLatitude(scratchTriangle.cY);\n    double clon = GeoEncodingUtils.decodeLongitude(scratchTriangle.cX);\n\n    switch (queryRelation) {\n      case INTERSECTS:\n        return point2D.relateTriangle(alon, alat, blon, blat, clon, clat) != Relation.CELL_OUTSIDE_QUERY;\n      case WITHIN:\n        return point2D.relateTriangle(alon, alat, blon, blat, clon, clat) == Relation.CELL_INSIDE_QUERY;\n      case DISJOINT:\n        return point2D.relateTriangle(alon, alat, blon, blat, clon, clat) == Relation.CELL_OUTSIDE_QUERY;\n      default:\n        throw new IllegalArgumentException(\"Unsupported query type :[\" + queryRelation + \"]\");\n    }\n  }\n\n","sourceOld":"  /** returns true if the query matches the encoded triangle */\n  @Override\n  protected boolean queryMatches(byte[] t, ShapeField.DecodedTriangle scratchTriangle, ShapeField.QueryRelation queryRelation) {\n    ShapeField.decodeTriangle(t, scratchTriangle);\n\n    double alat = GeoEncodingUtils.decodeLatitude(scratchTriangle.aY);\n    double alon = GeoEncodingUtils.decodeLongitude(scratchTriangle.aX);\n    double blat = GeoEncodingUtils.decodeLatitude(scratchTriangle.bY);\n    double blon = GeoEncodingUtils.decodeLongitude(scratchTriangle.bX);\n    double clat = GeoEncodingUtils.decodeLatitude(scratchTriangle.cY);\n    double clon = GeoEncodingUtils.decodeLongitude(scratchTriangle.cX);\n\n    switch (queryRelation) {\n      case INTERSECTS:\n        return point2D.relateTriangle(alon, alat, blon, blat, clon, clat) != Relation.CELL_OUTSIDE_QUERY;\n      case WITHIN:\n        return point2D.relateTriangle(alon, alat, blon, blat, clon, clat) == Relation.CELL_INSIDE_QUERY;\n      case DISJOINT:\n        return point2D.relateTriangle(alon, alat, blon, blat, clon, clat) == Relation.CELL_OUTSIDE_QUERY;\n      default:\n        throw new IllegalArgumentException(\"Unsupported query type :[\" + queryRelation + \"]\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6afbfd2ecc6d7825f89bbcf75e25046650f937a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1fb9d9c81bf2e6709854f7e362e5e3a3a3e75f61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6afbfd2ecc6d7825f89bbcf75e25046650f937a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["6afbfd2ecc6d7825f89bbcf75e25046650f937a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"6afbfd2ecc6d7825f89bbcf75e25046650f937a6":["1fb9d9c81bf2e6709854f7e362e5e3a3a3e75f61","09c1e6d465800c73af60624bf9d4459a19f7940c"],"1fb9d9c81bf2e6709854f7e362e5e3a3a3e75f61":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6afbfd2ecc6d7825f89bbcf75e25046650f937a6","1fb9d9c81bf2e6709854f7e362e5e3a3a3e75f61"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1fb9d9c81bf2e6709854f7e362e5e3a3a3e75f61","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}