{"path":"contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashUtils#decode(String).mjava","commits":[{"id":"0584ee2be458044f19041ac184df00c69c632b4d","date":1231348258,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashUtils#decode(String).mjava","pathOld":"/dev/null","sourceNew":"\tpublic static double[] decode(String geohash) {\n\t\tdouble[] ge = decode_exactly(geohash);\n\t\tdouble lat, lon, lat_err, lon_err;\n\t\tlat = ge[0];\n\t\tlon = ge[1];\n\t\tlat_err = ge[2];\n\t\tlon_err = ge[3];\n\t\t\n\t\tdouble lat_precision = Math.max(1, Math.round(- Math.log10(lat_err))) - 1;\n\t\tdouble lon_precision = Math.max(1, Math.round(- Math.log10(lon_err))) - 1;\n\t\t\n\t\tlat = getPrecision(lat, lat_precision);\n\t\tlon = getPrecision(lon, lon_precision);\n\t\t\n\t\treturn new double[] {lat, lon};\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ffa9f5c51e7bbe3489bc384c0397cf904787438","date":1262729028,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashUtils#decode(String).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashUtils#decode(String).mjava","sourceNew":"  /**\n   * Decodes the given geohash into a latitude and longitude\n   *\n   * @param geohash Geohash to deocde\n   * @return Array with the latitude at index 0, and longitude at index 1\n   */\n  public static double[] decode(String geohash) {\n    final double[] latInterval = {-90.0, 90.0};\n    final double[] lngInterval = {-180.0, 180.0};\n\n    boolean isEven = true;\n\n    double latitude;\n    double longitude;\n    for (int i = 0; i < geohash.length(); i++) {\n      final int cd = DECODE_MAP.get(Character.valueOf(\n          geohash.charAt(i))).intValue();\n\n      for (int mask : BITS) {\n        if (isEven) {\n          if ((cd & mask) != 0) {\n            lngInterval[0] = (lngInterval[0] + lngInterval[1]) / 2D;\n          } else {\n            lngInterval[1] = (lngInterval[0] + lngInterval[1]) / 2D;\n          }\n        } else {\n          if ((cd & mask) != 0) {\n            latInterval[0] = (latInterval[0] + latInterval[1]) / 2D;\n          } else {\n            latInterval[1] = (latInterval[0] + latInterval[1]) / 2D;\n          }\n        }\n        isEven = !isEven;\n      }\n\n    }\n    latitude = (latInterval[0] + latInterval[1]) / 2D;\n    longitude = (lngInterval[0] + lngInterval[1]) / 2D;\n\n    return new double[] {latitude, longitude};\n\t}\n\n","sourceOld":"\tpublic static double[] decode(String geohash) {\n\t\tdouble[] ge = decode_exactly(geohash);\n\t\tdouble lat, lon, lat_err, lon_err;\n\t\tlat = ge[0];\n\t\tlon = ge[1];\n\t\tlat_err = ge[2];\n\t\tlon_err = ge[3];\n\t\t\n\t\tdouble lat_precision = Math.max(1, Math.round(- Math.log10(lat_err))) - 1;\n\t\tdouble lon_precision = Math.max(1, Math.round(- Math.log10(lon_err))) - 1;\n\t\t\n\t\tlat = getPrecision(lat, lat_precision);\n\t\tlon = getPrecision(lon, lon_precision);\n\t\t\n\t\treturn new double[] {lat, lon};\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashUtils#decode(String).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/geohash/GeoHashUtils#decode(String).mjava","sourceNew":"  /**\n   * Decodes the given geohash into a latitude and longitude\n   *\n   * @param geohash Geohash to deocde\n   * @return Array with the latitude at index 0, and longitude at index 1\n   */\n  public static double[] decode(String geohash) {\n    final double[] latInterval = {-90.0, 90.0};\n    final double[] lngInterval = {-180.0, 180.0};\n\n    boolean isEven = true;\n\n    double latitude;\n    double longitude;\n    for (int i = 0; i < geohash.length(); i++) {\n      final int cd = DECODE_MAP.get(Character.valueOf(\n          geohash.charAt(i))).intValue();\n\n      for (int mask : BITS) {\n        if (isEven) {\n          if ((cd & mask) != 0) {\n            lngInterval[0] = (lngInterval[0] + lngInterval[1]) / 2D;\n          } else {\n            lngInterval[1] = (lngInterval[0] + lngInterval[1]) / 2D;\n          }\n        } else {\n          if ((cd & mask) != 0) {\n            latInterval[0] = (latInterval[0] + latInterval[1]) / 2D;\n          } else {\n            latInterval[1] = (latInterval[0] + latInterval[1]) / 2D;\n          }\n        }\n        isEven = !isEven;\n      }\n\n    }\n    latitude = (latInterval[0] + latInterval[1]) / 2D;\n    longitude = (lngInterval[0] + lngInterval[1]) / 2D;\n\n    return new double[] {latitude, longitude};\n\t}\n\n","sourceOld":"  /**\n   * Decodes the given geohash into a latitude and longitude\n   *\n   * @param geohash Geohash to deocde\n   * @return Array with the latitude at index 0, and longitude at index 1\n   */\n  public static double[] decode(String geohash) {\n    final double[] latInterval = {-90.0, 90.0};\n    final double[] lngInterval = {-180.0, 180.0};\n\n    boolean isEven = true;\n\n    double latitude;\n    double longitude;\n    for (int i = 0; i < geohash.length(); i++) {\n      final int cd = DECODE_MAP.get(Character.valueOf(\n          geohash.charAt(i))).intValue();\n\n      for (int mask : BITS) {\n        if (isEven) {\n          if ((cd & mask) != 0) {\n            lngInterval[0] = (lngInterval[0] + lngInterval[1]) / 2D;\n          } else {\n            lngInterval[1] = (lngInterval[0] + lngInterval[1]) / 2D;\n          }\n        } else {\n          if ((cd & mask) != 0) {\n            latInterval[0] = (latInterval[0] + latInterval[1]) / 2D;\n          } else {\n            latInterval[1] = (latInterval[0] + latInterval[1]) / 2D;\n          }\n        }\n        isEven = !isEven;\n      }\n\n    }\n    latitude = (latInterval[0] + latInterval[1]) / 2D;\n    longitude = (lngInterval[0] + lngInterval[1]) / 2D;\n\n    return new double[] {latitude, longitude};\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ffa9f5c51e7bbe3489bc384c0397cf904787438":["0584ee2be458044f19041ac184df00c69c632b4d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0ffa9f5c51e7bbe3489bc384c0397cf904787438"],"0584ee2be458044f19041ac184df00c69c632b4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0ffa9f5c51e7bbe3489bc384c0397cf904787438":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0584ee2be458044f19041ac184df00c69c632b4d"],"0584ee2be458044f19041ac184df00c69c632b4d":["0ffa9f5c51e7bbe3489bc384c0397cf904787438"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}