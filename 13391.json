{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.ClientSnitchCtx#invokeWithRetry(String,String,SolrParams).mjava","commits":[{"id":"239ac2cf147bbfbf488bc36002d5d26b2939d4ba","date":1587405343,"type":0,"author":"Mike Drob","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.ClientSnitchCtx#invokeWithRetry(String,String,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Will attempt to call {@link #invoke(String, String, SolrParams)} up to five times, retrying on any IO Exceptions\n     */\n    public SimpleSolrResponse invokeWithRetry(String solrNode, String path, SolrParams params) throws InterruptedException, IOException, SolrServerException {\n      int retries = 5;\n      int cnt = 0;\n\n      while (cnt++ < retries) {\n        try {\n          return invoke(solrNode, path, params);\n        } catch (SolrException | SolrServerException | IOException e) {\n          boolean hasIOExceptionCause = false;\n\n          Throwable t = e;\n          while (t != null) {\n            if (t instanceof IOException) {\n              hasIOExceptionCause = true;\n              break;\n            }\n            t = t.getCause();\n          }\n\n          if (hasIOExceptionCause) {\n            log.info(\"Error on getting remote info, trying again: \" + e.getMessage());\n            Thread.sleep(500);\n          } else {\n            throw e;\n          }\n        }\n      }\n\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not get remote info after many retries on NoHttpResponseException\");\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"994eab87532060f539cec5351eaa699017edac03","date":1587575513,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.ClientSnitchCtx#invokeWithRetry(String,String,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.ClientSnitchCtx#invokeWithRetry(String,String,SolrParams).mjava","sourceNew":"    /**\n     * Will attempt to call {@link #invoke(String, String, SolrParams)} up to five times, retrying on any IO Exceptions\n     */\n    public SimpleSolrResponse invokeWithRetry(String solrNode, String path, SolrParams params) throws InterruptedException, IOException, SolrServerException {\n      int retries = 5;\n      int cnt = 0;\n\n      while (cnt++ < retries) {\n        try {\n          return invoke(solrNode, path, params);\n        } catch (SolrException | SolrServerException | IOException e) {\n          boolean hasIOExceptionCause = false;\n\n          Throwable t = e;\n          while (t != null) {\n            if (t instanceof IOException) {\n              hasIOExceptionCause = true;\n              break;\n            }\n            t = t.getCause();\n          }\n\n          if (hasIOExceptionCause) {\n            log.info(\"Error on getting remote info, trying again: {}\", e.getMessage());\n            Thread.sleep(500);\n          } else {\n            throw e;\n          }\n        }\n      }\n\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not get remote info after many retries on NoHttpResponseException\");\n    }\n\n","sourceOld":"    /**\n     * Will attempt to call {@link #invoke(String, String, SolrParams)} up to five times, retrying on any IO Exceptions\n     */\n    public SimpleSolrResponse invokeWithRetry(String solrNode, String path, SolrParams params) throws InterruptedException, IOException, SolrServerException {\n      int retries = 5;\n      int cnt = 0;\n\n      while (cnt++ < retries) {\n        try {\n          return invoke(solrNode, path, params);\n        } catch (SolrException | SolrServerException | IOException e) {\n          boolean hasIOExceptionCause = false;\n\n          Throwable t = e;\n          while (t != null) {\n            if (t instanceof IOException) {\n              hasIOExceptionCause = true;\n              break;\n            }\n            t = t.getCause();\n          }\n\n          if (hasIOExceptionCause) {\n            log.info(\"Error on getting remote info, trying again: \" + e.getMessage());\n            Thread.sleep(500);\n          } else {\n            throw e;\n          }\n        }\n      }\n\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not get remote info after many retries on NoHttpResponseException\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.ClientSnitchCtx#invokeWithRetry(String,String,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.ClientSnitchCtx#invokeWithRetry(String,String,SolrParams).mjava","sourceNew":"    /**\n     * Will attempt to call {@link #invoke(String, String, SolrParams)} up to five times, retrying on any IO Exceptions\n     */\n    public SimpleSolrResponse invokeWithRetry(String solrNode, String path, SolrParams params) throws InterruptedException, IOException, SolrServerException {\n      int retries = 5;\n      int cnt = 0;\n\n      while (cnt++ < retries) {\n        try {\n          return invoke(solrNode, path, params);\n        } catch (SolrException | SolrServerException | IOException e) {\n          boolean hasIOExceptionCause = false;\n\n          Throwable t = e;\n          while (t != null) {\n            if (t instanceof IOException) {\n              hasIOExceptionCause = true;\n              break;\n            }\n            t = t.getCause();\n          }\n\n          if (hasIOExceptionCause) {\n            if (log.isInfoEnabled()) {\n              log.info(\"Error on getting remote info, trying again: {}\", e.getMessage());\n            }\n            Thread.sleep(500);\n          } else {\n            throw e;\n          }\n        }\n      }\n\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not get remote info after many retries on NoHttpResponseException\");\n    }\n\n","sourceOld":"    /**\n     * Will attempt to call {@link #invoke(String, String, SolrParams)} up to five times, retrying on any IO Exceptions\n     */\n    public SimpleSolrResponse invokeWithRetry(String solrNode, String path, SolrParams params) throws InterruptedException, IOException, SolrServerException {\n      int retries = 5;\n      int cnt = 0;\n\n      while (cnt++ < retries) {\n        try {\n          return invoke(solrNode, path, params);\n        } catch (SolrException | SolrServerException | IOException e) {\n          boolean hasIOExceptionCause = false;\n\n          Throwable t = e;\n          while (t != null) {\n            if (t instanceof IOException) {\n              hasIOExceptionCause = true;\n              break;\n            }\n            t = t.getCause();\n          }\n\n          if (hasIOExceptionCause) {\n            log.info(\"Error on getting remote info, trying again: {}\", e.getMessage());\n            Thread.sleep(500);\n          } else {\n            throw e;\n          }\n        }\n      }\n\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not get remote info after many retries on NoHttpResponseException\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c238f5fb83803b49b37b3a1a12224a64d47542","date":1593655679,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.ClientSnitchCtx#invokeWithRetry(String,String,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.ClientSnitchCtx#invokeWithRetry(String,String,SolrParams).mjava","sourceNew":"    /**\n     * Will attempt to call {@link #invoke(String, String, SolrParams)} up to five times, retrying on any IO Exceptions\n     */\n    public SimpleSolrResponse invokeWithRetry(String solrNode, String path, SolrParams params) throws InterruptedException, IOException, SolrServerException {\n      int retries = 5;\n      int cnt = 0;\n\n      while (cnt++ < retries) {\n        try {\n          return invoke(solrNode, path, params);\n        } catch (SolrException | SolrServerException | IOException e) {\n          boolean hasIOExceptionCause = false;\n\n          Throwable t = e;\n          while (t != null) {\n            if (t instanceof IOException) {\n              hasIOExceptionCause = true;\n              break;\n            }\n            t = t.getCause();\n          }\n\n          if (hasIOExceptionCause) {\n            if (log.isInfoEnabled()) {\n              log.info(\"Error on getting remote info, trying again: \", e);\n            }\n            Thread.sleep(500);\n          } else {\n            throw e;\n          }\n        }\n      }\n\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not get remote info after many retries on NoHttpResponseException\");\n    }\n\n","sourceOld":"    /**\n     * Will attempt to call {@link #invoke(String, String, SolrParams)} up to five times, retrying on any IO Exceptions\n     */\n    public SimpleSolrResponse invokeWithRetry(String solrNode, String path, SolrParams params) throws InterruptedException, IOException, SolrServerException {\n      int retries = 5;\n      int cnt = 0;\n\n      while (cnt++ < retries) {\n        try {\n          return invoke(solrNode, path, params);\n        } catch (SolrException | SolrServerException | IOException e) {\n          boolean hasIOExceptionCause = false;\n\n          Throwable t = e;\n          while (t != null) {\n            if (t instanceof IOException) {\n              hasIOExceptionCause = true;\n              break;\n            }\n            t = t.getCause();\n          }\n\n          if (hasIOExceptionCause) {\n            if (log.isInfoEnabled()) {\n              log.info(\"Error on getting remote info, trying again: {}\", e.getMessage());\n            }\n            Thread.sleep(500);\n          } else {\n            throw e;\n          }\n        }\n      }\n\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not get remote info after many retries on NoHttpResponseException\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["994eab87532060f539cec5351eaa699017edac03"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57c238f5fb83803b49b37b3a1a12224a64d47542":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"994eab87532060f539cec5351eaa699017edac03":["239ac2cf147bbfbf488bc36002d5d26b2939d4ba"],"239ac2cf147bbfbf488bc36002d5d26b2939d4ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57c238f5fb83803b49b37b3a1a12224a64d47542"]},"commit2Childs":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["239ac2cf147bbfbf488bc36002d5d26b2939d4ba"],"57c238f5fb83803b49b37b3a1a12224a64d47542":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"994eab87532060f539cec5351eaa699017edac03":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"239ac2cf147bbfbf488bc36002d5d26b2939d4ba":["994eab87532060f539cec5351eaa699017edac03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}