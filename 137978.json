{"path":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","sourceNew":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    \n    assertSnapshotExists(dir, sdp, numSnapshots);\n\n    // open a reader on a snapshot - should succeed.\n    IndexReader.open(sdp.getSnapshot(\"snapshot0\")).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random, sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, DirectoryReader.listCommits(dir).size());\n    \n    for (int i = 0; i < numSnapshots; i++) {\n      try {\n        sdp.getSnapshot(\"snapshot\" + i);\n        fail(\"snapshot shouldn't have existed, but did: snapshot\" + i);\n      } catch (IllegalStateException e) {\n        // expected - snapshot should not exist\n      }\n    }\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    \n    assertSnapshotExists(dir, sdp, numSnapshots);\n\n    // open a reader on a snapshot - should succeed.\n    IndexReader.open(sdp.getSnapshot(\"snapshot0\")).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random, sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, DirectoryReader.listCommits(dir).size());\n    \n    for (int i = 0; i < numSnapshots; i++) {\n      try {\n        sdp.getSnapshot(\"snapshot\" + i);\n        fail(\"snapshot shouldn't have existed, but did: snapshot\" + i);\n      } catch (IllegalStateException e) {\n        // expected - snapshot should not exist\n      }\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","sourceNew":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    \n    assertSnapshotExists(dir, sdp, numSnapshots);\n\n    // open a reader on a snapshot - should succeed.\n    IndexReader.open(sdp.getSnapshot(\"snapshot0\")).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random(), sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, DirectoryReader.listCommits(dir).size());\n    \n    for (int i = 0; i < numSnapshots; i++) {\n      try {\n        sdp.getSnapshot(\"snapshot\" + i);\n        fail(\"snapshot shouldn't have existed, but did: snapshot\" + i);\n      } catch (IllegalStateException e) {\n        // expected - snapshot should not exist\n      }\n    }\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    \n    assertSnapshotExists(dir, sdp, numSnapshots);\n\n    // open a reader on a snapshot - should succeed.\n    IndexReader.open(sdp.getSnapshot(\"snapshot0\")).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random, sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, DirectoryReader.listCommits(dir).size());\n    \n    for (int i = 0; i < numSnapshots; i++) {\n      try {\n        sdp.getSnapshot(\"snapshot\" + i);\n        fail(\"snapshot shouldn't have existed, but did: snapshot\" + i);\n      } catch (IllegalStateException e) {\n        // expected - snapshot should not exist\n      }\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","sourceNew":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    \n    assertSnapshotExists(dir, sdp, numSnapshots);\n\n    // open a reader on a snapshot - should succeed.\n    DirectoryReader.open(sdp.getSnapshot(\"snapshot0\")).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random(), sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, DirectoryReader.listCommits(dir).size());\n    \n    for (int i = 0; i < numSnapshots; i++) {\n      try {\n        sdp.getSnapshot(\"snapshot\" + i);\n        fail(\"snapshot shouldn't have existed, but did: snapshot\" + i);\n      } catch (IllegalStateException e) {\n        // expected - snapshot should not exist\n      }\n    }\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    \n    assertSnapshotExists(dir, sdp, numSnapshots);\n\n    // open a reader on a snapshot - should succeed.\n    IndexReader.open(sdp.getSnapshot(\"snapshot0\")).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random(), sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, DirectoryReader.listCommits(dir).size());\n    \n    for (int i = 0; i < numSnapshots; i++) {\n      try {\n        sdp.getSnapshot(\"snapshot\" + i);\n        fail(\"snapshot shouldn't have existed, but did: snapshot\" + i);\n      } catch (IllegalStateException e) {\n        // expected - snapshot should not exist\n      }\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70790b11e79a0366b21b2cc5b82d03b6fddcef81","date":1364594206,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","sourceNew":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    \n    assertSnapshotExists(dir, sdp, numSnapshots);\n\n    // open a reader on a snapshot - should succeed.\n    DirectoryReader.open(sdp.getSnapshot(\"snapshot0\")).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random(), sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, DirectoryReader.listCommits(dir).size());\n    \n    for (int i = 0; i < numSnapshots; i++) {\n      try {\n        sdp.getSnapshot(\"snapshot\" + i);\n        fail(\"snapshot shouldn't have existed, but did: snapshot\" + i);\n      } catch (IllegalStateException e) {\n        // expected - snapshot should not exist\n      }\n    }\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    \n    assertSnapshotExists(dir, sdp, numSnapshots);\n\n    // open a reader on a snapshot - should succeed.\n    DirectoryReader.open(sdp.getSnapshot(\"snapshot0\")).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random(), sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, DirectoryReader.listCommits(dir).size());\n    \n    for (int i = 0; i < numSnapshots; i++) {\n      try {\n        sdp.getSnapshot(\"snapshot\" + i);\n        fail(\"snapshot shouldn't have existed, but did: snapshot\" + i);\n      } catch (IllegalStateException e) {\n        // expected - snapshot should not exist\n      }\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a207624ce3e468bca1819861084438d936e3b1c","date":1367514967,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","sourceNew":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots);\n    writer.close();\n    \n    assertSnapshotExists(dir, sdp, numSnapshots, true);\n\n    // open a reader on a snapshot - should succeed.\n    DirectoryReader.open(snapshots.get(0)).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random(), sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, DirectoryReader.listCommits(dir).size());\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    \n    assertSnapshotExists(dir, sdp, numSnapshots);\n\n    // open a reader on a snapshot - should succeed.\n    DirectoryReader.open(sdp.getSnapshot(\"snapshot0\")).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random(), sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, DirectoryReader.listCommits(dir).size());\n    \n    for (int i = 0; i < numSnapshots; i++) {\n      try {\n        sdp.getSnapshot(\"snapshot\" + i);\n        fail(\"snapshot shouldn't have existed, but did: snapshot\" + i);\n      } catch (IllegalStateException e) {\n        // expected - snapshot should not exist\n      }\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dce99db8590cdd065839ae4e6b228b66eeee8f38","date":1367579599,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","sourceNew":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots);\n    writer.close();\n    \n    assertEquals(numSnapshots, sdp.getSnapshots().size());\n    assertEquals(numSnapshots, sdp.getSnapshotCount());\n    assertSnapshotExists(dir, sdp, numSnapshots, true);\n\n    // open a reader on a snapshot - should succeed.\n    DirectoryReader.open(snapshots.get(0)).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random(), sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, DirectoryReader.listCommits(dir).size());\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots);\n    writer.close();\n    \n    assertSnapshotExists(dir, sdp, numSnapshots, true);\n\n    // open a reader on a snapshot - should succeed.\n    DirectoryReader.open(snapshots.get(0)).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random(), sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, DirectoryReader.listCommits(dir).size());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","sourceNew":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots);\n    writer.shutdown();\n    \n    assertEquals(numSnapshots, sdp.getSnapshots().size());\n    assertEquals(numSnapshots, sdp.getSnapshotCount());\n    assertSnapshotExists(dir, sdp, numSnapshots, true);\n\n    // open a reader on a snapshot - should succeed.\n    DirectoryReader.open(snapshots.get(0)).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random(), sdp));\n    writer.deleteUnusedFiles();\n    writer.shutdown();\n    assertEquals(\"no snapshots should exist\", 1, DirectoryReader.listCommits(dir).size());\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots);\n    writer.close();\n    \n    assertEquals(numSnapshots, sdp.getSnapshots().size());\n    assertEquals(numSnapshots, sdp.getSnapshotCount());\n    assertSnapshotExists(dir, sdp, numSnapshots, true);\n\n    // open a reader on a snapshot - should succeed.\n    DirectoryReader.open(snapshots.get(0)).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random(), sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, DirectoryReader.listCommits(dir).size());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","sourceNew":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots);\n    writer.close();\n    \n    assertEquals(numSnapshots, sdp.getSnapshots().size());\n    assertEquals(numSnapshots, sdp.getSnapshotCount());\n    assertSnapshotExists(dir, sdp, numSnapshots, true);\n\n    // open a reader on a snapshot - should succeed.\n    DirectoryReader.open(snapshots.get(0)).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random(), sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, DirectoryReader.listCommits(dir).size());\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots);\n    writer.shutdown();\n    \n    assertEquals(numSnapshots, sdp.getSnapshots().size());\n    assertEquals(numSnapshots, sdp.getSnapshotCount());\n    assertSnapshotExists(dir, sdp, numSnapshots, true);\n\n    // open a reader on a snapshot - should succeed.\n    DirectoryReader.open(snapshots.get(0)).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random(), sdp));\n    writer.deleteUnusedFiles();\n    writer.shutdown();\n    assertEquals(\"no snapshots should exist\", 1, DirectoryReader.listCommits(dir).size());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","sourceNew":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // we verify some files get deleted\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots);\n    writer.close();\n    \n    assertEquals(numSnapshots, sdp.getSnapshots().size());\n    assertEquals(numSnapshots, sdp.getSnapshotCount());\n    assertSnapshotExists(dir, sdp, numSnapshots, true);\n\n    // open a reader on a snapshot - should succeed.\n    DirectoryReader.open(snapshots.get(0)).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random(), sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, DirectoryReader.listCommits(dir).size());\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots);\n    writer.close();\n    \n    assertEquals(numSnapshots, sdp.getSnapshots().size());\n    assertEquals(numSnapshots, sdp.getSnapshotCount());\n    assertSnapshotExists(dir, sdp, numSnapshots, true);\n\n    // open a reader on a snapshot - should succeed.\n    DirectoryReader.open(snapshots.get(0)).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random(), sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, DirectoryReader.listCommits(dir).size());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","sourceNew":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots);\n    writer.close();\n    \n    assertEquals(numSnapshots, sdp.getSnapshots().size());\n    assertEquals(numSnapshots, sdp.getSnapshotCount());\n    assertSnapshotExists(dir, sdp, numSnapshots, true);\n\n    // open a reader on a snapshot - should succeed.\n    DirectoryReader.open(snapshots.get(0)).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random(), sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, DirectoryReader.listCommits(dir).size());\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // we verify some files get deleted\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots);\n    writer.close();\n    \n    assertEquals(numSnapshots, sdp.getSnapshots().size());\n    assertEquals(numSnapshots, sdp.getSnapshotCount());\n    assertSnapshotExists(dir, sdp, numSnapshots, true);\n\n    // open a reader on a snapshot - should succeed.\n    DirectoryReader.open(snapshots.get(0)).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random(), sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, DirectoryReader.listCommits(dir).size());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","sourceNew":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots);\n    writer.close();\n    \n    assertEquals(numSnapshots, sdp.getSnapshots().size());\n    assertEquals(numSnapshots, sdp.getSnapshotCount());\n    assertSnapshotExists(dir, sdp, numSnapshots, true);\n\n    // open a reader on a snapshot - should succeed.\n    DirectoryReader.open(snapshots.get(0)).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random(), sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, DirectoryReader.listCommits(dir).size());\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // we verify some files get deleted\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots);\n    writer.close();\n    \n    assertEquals(numSnapshots, sdp.getSnapshots().size());\n    assertEquals(numSnapshots, sdp.getSnapshotCount());\n    assertSnapshotExists(dir, sdp, numSnapshots, true);\n\n    // open a reader on a snapshot - should succeed.\n    DirectoryReader.open(snapshots.get(0)).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random(), sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, DirectoryReader.listCommits(dir).size());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","sourceNew":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots);\n    writer.close();\n    \n    assertEquals(numSnapshots, sdp.getSnapshots().size());\n    assertEquals(numSnapshots, sdp.getSnapshotCount());\n    assertSnapshotExists(dir, sdp, numSnapshots, true);\n\n    // open a reader on a snapshot - should succeed.\n    DirectoryReader.open(snapshots.get(0)).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random(), sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, DirectoryReader.listCommits(dir).size());\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // we verify some files get deleted\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots);\n    writer.close();\n    \n    assertEquals(numSnapshots, sdp.getSnapshots().size());\n    assertEquals(numSnapshots, sdp.getSnapshotCount());\n    assertSnapshotExists(dir, sdp, numSnapshots, true);\n\n    // open a reader on a snapshot - should succeed.\n    DirectoryReader.open(snapshots.get(0)).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random(), sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, DirectoryReader.listCommits(dir).size());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","sourceNew":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots);\n    writer.close();\n    \n    assertEquals(numSnapshots, sdp.getSnapshots().size());\n    assertEquals(numSnapshots, sdp.getSnapshotCount());\n    assertSnapshotExists(dir, sdp, numSnapshots, true);\n\n    // open a reader on a snapshot - should succeed.\n    DirectoryReader.open(snapshots.get(0)).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random(), sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, DirectoryReader.listCommits(dir).size());\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // we verify some files get deleted\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), getDeletionPolicy()));\n    SnapshotDeletionPolicy sdp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots);\n    writer.close();\n    \n    assertEquals(numSnapshots, sdp.getSnapshots().size());\n    assertEquals(numSnapshots, sdp.getSnapshotCount());\n    assertSnapshotExists(dir, sdp, numSnapshots, true);\n\n    // open a reader on a snapshot - should succeed.\n    DirectoryReader.open(snapshots.get(0)).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random(), sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, DirectoryReader.listCommits(dir).size());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70790b11e79a0366b21b2cc5b82d03b6fddcef81":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"dce99db8590cdd065839ae4e6b228b66eeee8f38":["8a207624ce3e468bca1819861084438d936e3b1c"],"8a207624ce3e468bca1819861084438d936e3b1c":["70790b11e79a0366b21b2cc5b82d03b6fddcef81"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","b470f36a9372c97283360b1304eacbde22df6c0d"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"b470f36a9372c97283360b1304eacbde22df6c0d":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["dce99db8590cdd065839ae4e6b228b66eeee8f38"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"]},"commit2Childs":{"70790b11e79a0366b21b2cc5b82d03b6fddcef81":["8a207624ce3e468bca1819861084438d936e3b1c"],"dce99db8590cdd065839ae4e6b228b66eeee8f38":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"8a207624ce3e468bca1819861084438d936e3b1c":["dce99db8590cdd065839ae4e6b228b66eeee8f38"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["70790b11e79a0366b21b2cc5b82d03b6fddcef81"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}