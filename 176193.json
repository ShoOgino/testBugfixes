{"path":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testBootstrapWithMultipleReplicas().mjava","commits":[{"id":"160430584bb0ed88bd4cb089d89d53a0db81f90e","date":1565319532,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testBootstrapWithMultipleReplicas().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This test successfully validates the follower nodes at target copies content\n   * from their respective leaders\n   */\n  public void testBootstrapWithMultipleReplicas() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(3, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      System.out.println(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(3, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 3)\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n        source.waitForActiveCollection(\"cdcr-source\", 1, 3);\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 3)\n            .process(target.getSolrClient());\n        target.waitForActiveCollection(\"cdcr-target\", 1, 3);\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n        assertTrue(\"leader followers didnt' match\", CdcrTestsUtil.assertShardInSync(\"cdcr-target\", \"shard1\", targetSolrClient)); // with more than 1 replica\n\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testBootstrapWithMultipleReplicas().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testBootstrapWithMultipleReplicas().mjava","sourceNew":"  /**\n   * This test successfully validates the follower nodes at target copies content\n   * from their respective leaders\n   */\n  public void testBootstrapWithMultipleReplicas() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(3, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      System.out.println(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(3, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 3)\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n        source.waitForActiveCollection(\"cdcr-source\", 1, 3);\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 3)\n            .process(target.getSolrClient());\n        target.waitForActiveCollection(\"cdcr-target\", 1, 3);\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        if (log.isInfoEnabled()) {\n          log.info(\"Cdcr queue response: {}\", response.getResponse());\n        }\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n        assertTrue(\"leader followers didnt' match\", CdcrTestsUtil.assertShardInSync(\"cdcr-target\", \"shard1\", targetSolrClient)); // with more than 1 replica\n\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","sourceOld":"  /**\n   * This test successfully validates the follower nodes at target copies content\n   * from their respective leaders\n   */\n  public void testBootstrapWithMultipleReplicas() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(3, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      System.out.println(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(3, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 3)\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n        source.waitForActiveCollection(\"cdcr-source\", 1, 3);\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 3)\n            .process(target.getSolrClient());\n        target.waitForActiveCollection(\"cdcr-target\", 1, 3);\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n        assertTrue(\"leader followers didnt' match\", CdcrTestsUtil.assertShardInSync(\"cdcr-target\", \"shard1\", targetSolrClient)); // with more than 1 replica\n\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testBootstrapWithMultipleReplicas().mjava","sourceNew":null,"sourceOld":"  /**\n   * This test successfully validates the follower nodes at target copies content\n   * from their respective leaders\n   */\n  public void testBootstrapWithMultipleReplicas() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(3, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      System.out.println(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(3, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 3)\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n        source.waitForActiveCollection(\"cdcr-source\", 1, 3);\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 3)\n            .process(target.getSolrClient());\n        target.waitForActiveCollection(\"cdcr-target\", 1, 3);\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        if (log.isInfoEnabled()) {\n          log.info(\"Cdcr queue response: {}\", response.getResponse());\n        }\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n        assertTrue(\"leader followers didnt' match\", CdcrTestsUtil.assertShardInSync(\"cdcr-target\", \"shard1\", targetSolrClient)); // with more than 1 replica\n\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"160430584bb0ed88bd4cb089d89d53a0db81f90e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["160430584bb0ed88bd4cb089d89d53a0db81f90e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"160430584bb0ed88bd4cb089d89d53a0db81f90e":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["160430584bb0ed88bd4cb089d89d53a0db81f90e"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}