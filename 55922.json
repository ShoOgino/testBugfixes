{"path":"solr/core/src/java/org/apache/solr/util/DateMathParser#add(LocalDateTime,int,String).mjava","commits":[{"id":"ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29","date":1463148204,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/DateMathParser#add(LocalDateTime,int,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/DateMathParser#add(Calendar,int,String).mjava","sourceNew":"  /**\n   * Returns a modified time by \"adding\" the specified value of units\n   *\n   * @exception IllegalArgumentException if unit isn't recognized.\n   * @see #CALENDAR_UNITS\n   */\n  private static LocalDateTime add(LocalDateTime t, int val, String unit) {\n    ChronoUnit uu = CALENDAR_UNITS.get(unit);\n    if (null == uu) {\n      throw new IllegalArgumentException(\"Adding Unit not recognized: \"\n                                         + unit);\n    }\n    return t.plus(val, uu);\n  }\n\n","sourceOld":"  /**\n   * Modifies the specified Calendar by \"adding\" the specified value of units\n   *\n   * @exception IllegalArgumentException if unit isn't recognized.\n   * @see #CALENDAR_UNITS\n   */\n  public static void add(Calendar c, int val, String unit) {\n    Integer uu = CALENDAR_UNITS.get(unit);\n    if (null == uu) {\n      throw new IllegalArgumentException(\"Adding Unit not recognized: \"\n                                         + unit);\n    }\n    c.add(uu.intValue(), val);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/DateMathParser#add(LocalDateTime,int,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/DateMathParser#add(Calendar,int,String).mjava","sourceNew":"  /**\n   * Returns a modified time by \"adding\" the specified value of units\n   *\n   * @exception IllegalArgumentException if unit isn't recognized.\n   * @see #CALENDAR_UNITS\n   */\n  private static LocalDateTime add(LocalDateTime t, int val, String unit) {\n    ChronoUnit uu = CALENDAR_UNITS.get(unit);\n    if (null == uu) {\n      throw new IllegalArgumentException(\"Adding Unit not recognized: \"\n                                         + unit);\n    }\n    return t.plus(val, uu);\n  }\n\n","sourceOld":"  /**\n   * Modifies the specified Calendar by \"adding\" the specified value of units\n   *\n   * @exception IllegalArgumentException if unit isn't recognized.\n   * @see #CALENDAR_UNITS\n   */\n  public static void add(Calendar c, int val, String unit) {\n    Integer uu = CALENDAR_UNITS.get(unit);\n    if (null == uu) {\n      throw new IllegalArgumentException(\"Adding Unit not recognized: \"\n                                         + unit);\n    }\n    c.add(uu.intValue(), val);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/DateMathParser#add(LocalDateTime,int,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/DateMathParser#add(Calendar,int,String).mjava","sourceNew":"  /**\n   * Returns a modified time by \"adding\" the specified value of units\n   *\n   * @exception IllegalArgumentException if unit isn't recognized.\n   * @see #CALENDAR_UNITS\n   */\n  private static LocalDateTime add(LocalDateTime t, int val, String unit) {\n    ChronoUnit uu = CALENDAR_UNITS.get(unit);\n    if (null == uu) {\n      throw new IllegalArgumentException(\"Adding Unit not recognized: \"\n                                         + unit);\n    }\n    return t.plus(val, uu);\n  }\n\n","sourceOld":"  /**\n   * Modifies the specified Calendar by \"adding\" the specified value of units\n   *\n   * @exception IllegalArgumentException if unit isn't recognized.\n   * @see #CALENDAR_UNITS\n   */\n  public static void add(Calendar c, int val, String unit) {\n    Integer uu = CALENDAR_UNITS.get(unit);\n    if (null == uu) {\n      throw new IllegalArgumentException(\"Adding Unit not recognized: \"\n                                         + unit);\n    }\n    c.add(uu.intValue(), val);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/DateMathParser#add(LocalDateTime,int,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a modified time by \"adding\" the specified value of units\n   *\n   * @exception IllegalArgumentException if unit isn't recognized.\n   * @see #CALENDAR_UNITS\n   */\n  private static LocalDateTime add(LocalDateTime t, int val, String unit) {\n    ChronoUnit uu = CALENDAR_UNITS.get(unit);\n    if (null == uu) {\n      throw new IllegalArgumentException(\"Adding Unit not recognized: \"\n                                         + unit);\n    }\n    return t.plus(val, uu);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29":["0ad30c6a479e764150a3316e57263319775f1df2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29","0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}