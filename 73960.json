{"path":"lucene/contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest#testArrays().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest#testArrays().mjava","pathOld":"contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest#testArrays().mjava","sourceNew":"    public void testArrays() throws Exception {\n        final int count = 250;\n        final int LENGTH_MASK = 0xffff;\n\n        Random r = newRandom();\n        final long seed = r.nextLong();\n        Random gen = new Random(seed);\n        int totalLength = 0;\n        int duration;\n        Date end;\n\n        Date veryStart = new Date();\n        Date start = new Date();\n        Transaction txn = env.beginTransaction(null, null);\n        Directory store = null;\n\n        if (VERBOSE) System.out.println(\"Writing files as one byte array\");\n\n        try {\n            store = new JEDirectory(txn, index, blocks);\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexOutput file = store.createOutput(name);\n                byte[] data = new byte[length];\n\n                totalLength += length;\n                gen.nextBytes(data);\n                file.writeBytes(data, length);\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          duration = (int) (end.getTime() - start.getTime());\n          System.out.print(duration);\n          System.out.print(\" total milliseconds to create, \");\n          System.out.print(totalLength / duration);\n          System.out.println(\" kb/s\");\n        }\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(seed);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexInput file = store.openInput(name);\n\n                if (file.length() != length)\n                    throw new Exception(\"length incorrect\");\n\n                byte[] data = new byte[length];\n                byte[] read = new byte[length];\n                gen.nextBytes(data);\n                file.readBytes(read, 0, length);\n\n                if (!Arrays.equals(data, read))\n                    throw new Exception(\"contents incorrect\");\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          duration = (int) (end.getTime() - start.getTime());\n          System.out.print(duration);\n          System.out.print(\" total milliseconds to read, \");\n          System.out.print(totalLength / duration);\n          System.out.println(\" kb/s\");\n        }\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(seed);\n            start = new Date();\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                store.deleteFile(name);\n            }\n\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          System.out.print(end.getTime() - start.getTime());\n          System.out.println(\" total milliseconds to delete\");\n\n          System.out.print(end.getTime() - veryStart.getTime());\n          System.out.println(\" total milliseconds\");\n        }\n    }\n\n","sourceOld":"    public void testArrays() throws Exception {\n        final int count = 250;\n        final int LENGTH_MASK = 0xffff;\n\n        Random r = newRandom();\n        final long seed = r.nextLong();\n        Random gen = new Random(seed);\n        int totalLength = 0;\n        int duration;\n        Date end;\n\n        Date veryStart = new Date();\n        Date start = new Date();\n        Transaction txn = env.beginTransaction(null, null);\n        Directory store = null;\n\n        if (VERBOSE) System.out.println(\"Writing files as one byte array\");\n\n        try {\n            store = new JEDirectory(txn, index, blocks);\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexOutput file = store.createOutput(name);\n                byte[] data = new byte[length];\n\n                totalLength += length;\n                gen.nextBytes(data);\n                file.writeBytes(data, length);\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          duration = (int) (end.getTime() - start.getTime());\n          System.out.print(duration);\n          System.out.print(\" total milliseconds to create, \");\n          System.out.print(totalLength / duration);\n          System.out.println(\" kb/s\");\n        }\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(seed);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexInput file = store.openInput(name);\n\n                if (file.length() != length)\n                    throw new Exception(\"length incorrect\");\n\n                byte[] data = new byte[length];\n                byte[] read = new byte[length];\n                gen.nextBytes(data);\n                file.readBytes(read, 0, length);\n\n                if (!Arrays.equals(data, read))\n                    throw new Exception(\"contents incorrect\");\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          duration = (int) (end.getTime() - start.getTime());\n          System.out.print(duration);\n          System.out.print(\" total milliseconds to read, \");\n          System.out.print(totalLength / duration);\n          System.out.println(\" kb/s\");\n        }\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(seed);\n            start = new Date();\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                store.deleteFile(name);\n            }\n\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          System.out.print(end.getTime() - start.getTime());\n          System.out.println(\" total milliseconds to delete\");\n\n          System.out.print(end.getTime() - veryStart.getTime());\n          System.out.println(\" total milliseconds\");\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest#testArrays().mjava","pathOld":"lucene/contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest#testArrays().mjava","sourceNew":"    public void testArrays() throws Exception {\n        final int count = 250;\n        final int LENGTH_MASK = 0xffff;\n\n        Random r = random;\n        final long seed = r.nextLong();\n        Random gen = new Random(seed);\n        int totalLength = 0;\n        int duration;\n        Date end;\n\n        Date veryStart = new Date();\n        Date start = new Date();\n        Transaction txn = env.beginTransaction(null, null);\n        Directory store = null;\n\n        if (VERBOSE) System.out.println(\"Writing files as one byte array\");\n\n        try {\n            store = new JEDirectory(txn, index, blocks);\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexOutput file = store.createOutput(name);\n                byte[] data = new byte[length];\n\n                totalLength += length;\n                gen.nextBytes(data);\n                file.writeBytes(data, length);\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          duration = (int) (end.getTime() - start.getTime());\n          System.out.print(duration);\n          System.out.print(\" total milliseconds to create, \");\n          System.out.print(totalLength / duration);\n          System.out.println(\" kb/s\");\n        }\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(seed);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexInput file = store.openInput(name);\n\n                if (file.length() != length)\n                    throw new Exception(\"length incorrect\");\n\n                byte[] data = new byte[length];\n                byte[] read = new byte[length];\n                gen.nextBytes(data);\n                file.readBytes(read, 0, length);\n\n                if (!Arrays.equals(data, read))\n                    throw new Exception(\"contents incorrect\");\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          duration = (int) (end.getTime() - start.getTime());\n          System.out.print(duration);\n          System.out.print(\" total milliseconds to read, \");\n          System.out.print(totalLength / duration);\n          System.out.println(\" kb/s\");\n        }\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(seed);\n            start = new Date();\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                store.deleteFile(name);\n            }\n\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          System.out.print(end.getTime() - start.getTime());\n          System.out.println(\" total milliseconds to delete\");\n\n          System.out.print(end.getTime() - veryStart.getTime());\n          System.out.println(\" total milliseconds\");\n        }\n    }\n\n","sourceOld":"    public void testArrays() throws Exception {\n        final int count = 250;\n        final int LENGTH_MASK = 0xffff;\n\n        Random r = newRandom();\n        final long seed = r.nextLong();\n        Random gen = new Random(seed);\n        int totalLength = 0;\n        int duration;\n        Date end;\n\n        Date veryStart = new Date();\n        Date start = new Date();\n        Transaction txn = env.beginTransaction(null, null);\n        Directory store = null;\n\n        if (VERBOSE) System.out.println(\"Writing files as one byte array\");\n\n        try {\n            store = new JEDirectory(txn, index, blocks);\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexOutput file = store.createOutput(name);\n                byte[] data = new byte[length];\n\n                totalLength += length;\n                gen.nextBytes(data);\n                file.writeBytes(data, length);\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          duration = (int) (end.getTime() - start.getTime());\n          System.out.print(duration);\n          System.out.print(\" total milliseconds to create, \");\n          System.out.print(totalLength / duration);\n          System.out.println(\" kb/s\");\n        }\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(seed);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexInput file = store.openInput(name);\n\n                if (file.length() != length)\n                    throw new Exception(\"length incorrect\");\n\n                byte[] data = new byte[length];\n                byte[] read = new byte[length];\n                gen.nextBytes(data);\n                file.readBytes(read, 0, length);\n\n                if (!Arrays.equals(data, read))\n                    throw new Exception(\"contents incorrect\");\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          duration = (int) (end.getTime() - start.getTime());\n          System.out.print(duration);\n          System.out.print(\" total milliseconds to read, \");\n          System.out.print(totalLength / duration);\n          System.out.println(\" kb/s\");\n        }\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(seed);\n            start = new Date();\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                store.deleteFile(name);\n            }\n\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          System.out.print(end.getTime() - start.getTime());\n          System.out.println(\" total milliseconds to delete\");\n\n          System.out.print(end.getTime() - veryStart.getTime());\n          System.out.println(\" total milliseconds\");\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest#testArrays().mjava","pathOld":"lucene/contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest#testArrays().mjava","sourceNew":"    public void testArrays() throws Exception {\n        final int count = 250;\n        final int LENGTH_MASK = 0xffff;\n\n        Random r = random;\n        final long seed = r.nextLong();\n        Random gen = new Random(seed);\n        int totalLength = 0;\n        int duration;\n        Date end;\n\n        Date veryStart = new Date();\n        Date start = new Date();\n        Transaction txn = env.beginTransaction(null, null);\n        Directory store = null;\n\n        if (VERBOSE) System.out.println(\"Writing files as one byte array\");\n\n        try {\n            store = new JEDirectory(txn, index, blocks);\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexOutput file = store.createOutput(name);\n                byte[] data = new byte[length];\n\n                totalLength += length;\n                gen.nextBytes(data);\n                file.writeBytes(data, length);\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          duration = (int) (end.getTime() - start.getTime());\n          System.out.print(duration);\n          System.out.print(\" total milliseconds to create, \");\n          System.out.print(totalLength / duration);\n          System.out.println(\" kb/s\");\n        }\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(seed);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexInput file = store.openInput(name);\n\n                if (file.length() != length)\n                    throw new Exception(\"length incorrect\");\n\n                byte[] data = new byte[length];\n                byte[] read = new byte[length];\n                gen.nextBytes(data);\n                file.readBytes(read, 0, length);\n\n                if (!Arrays.equals(data, read))\n                    throw new Exception(\"contents incorrect\");\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          duration = (int) (end.getTime() - start.getTime());\n          System.out.print(duration);\n          System.out.print(\" total milliseconds to read, \");\n          System.out.print(totalLength / duration);\n          System.out.println(\" kb/s\");\n        }\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(seed);\n            start = new Date();\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                store.deleteFile(name);\n            }\n\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          System.out.print(end.getTime() - start.getTime());\n          System.out.println(\" total milliseconds to delete\");\n\n          System.out.print(end.getTime() - veryStart.getTime());\n          System.out.println(\" total milliseconds\");\n        }\n    }\n\n","sourceOld":"    public void testArrays() throws Exception {\n        final int count = 250;\n        final int LENGTH_MASK = 0xffff;\n\n        Random r = newRandom();\n        final long seed = r.nextLong();\n        Random gen = new Random(seed);\n        int totalLength = 0;\n        int duration;\n        Date end;\n\n        Date veryStart = new Date();\n        Date start = new Date();\n        Transaction txn = env.beginTransaction(null, null);\n        Directory store = null;\n\n        if (VERBOSE) System.out.println(\"Writing files as one byte array\");\n\n        try {\n            store = new JEDirectory(txn, index, blocks);\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexOutput file = store.createOutput(name);\n                byte[] data = new byte[length];\n\n                totalLength += length;\n                gen.nextBytes(data);\n                file.writeBytes(data, length);\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          duration = (int) (end.getTime() - start.getTime());\n          System.out.print(duration);\n          System.out.print(\" total milliseconds to create, \");\n          System.out.print(totalLength / duration);\n          System.out.println(\" kb/s\");\n        }\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(seed);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexInput file = store.openInput(name);\n\n                if (file.length() != length)\n                    throw new Exception(\"length incorrect\");\n\n                byte[] data = new byte[length];\n                byte[] read = new byte[length];\n                gen.nextBytes(data);\n                file.readBytes(read, 0, length);\n\n                if (!Arrays.equals(data, read))\n                    throw new Exception(\"contents incorrect\");\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          duration = (int) (end.getTime() - start.getTime());\n          System.out.print(duration);\n          System.out.print(\" total milliseconds to read, \");\n          System.out.print(totalLength / duration);\n          System.out.println(\" kb/s\");\n        }\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(seed);\n            start = new Date();\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                store.deleteFile(name);\n            }\n\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          System.out.print(end.getTime() - start.getTime());\n          System.out.println(\" total milliseconds to delete\");\n\n          System.out.print(end.getTime() - veryStart.getTime());\n          System.out.println(\" total milliseconds\");\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a55c46ea262f9033bd9ab60542dea4b38abef33","date":1306109444,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest#testArrays().mjava","sourceNew":null,"sourceOld":"    public void testArrays() throws Exception {\n        final int count = 250;\n        final int LENGTH_MASK = 0xffff;\n\n        Random r = random;\n        final long seed = r.nextLong();\n        Random gen = new Random(seed);\n        int totalLength = 0;\n        int duration;\n        Date end;\n\n        Date veryStart = new Date();\n        Date start = new Date();\n        Transaction txn = env.beginTransaction(null, null);\n        Directory store = null;\n\n        if (VERBOSE) System.out.println(\"Writing files as one byte array\");\n\n        try {\n            store = new JEDirectory(txn, index, blocks);\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexOutput file = store.createOutput(name);\n                byte[] data = new byte[length];\n\n                totalLength += length;\n                gen.nextBytes(data);\n                file.writeBytes(data, length);\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          duration = (int) (end.getTime() - start.getTime());\n          System.out.print(duration);\n          System.out.print(\" total milliseconds to create, \");\n          System.out.print(totalLength / duration);\n          System.out.println(\" kb/s\");\n        }\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(seed);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexInput file = store.openInput(name);\n\n                if (file.length() != length)\n                    throw new Exception(\"length incorrect\");\n\n                byte[] data = new byte[length];\n                byte[] read = new byte[length];\n                gen.nextBytes(data);\n                file.readBytes(read, 0, length);\n\n                if (!Arrays.equals(data, read))\n                    throw new Exception(\"contents incorrect\");\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          duration = (int) (end.getTime() - start.getTime());\n          System.out.print(duration);\n          System.out.print(\" total milliseconds to read, \");\n          System.out.print(totalLength / duration);\n          System.out.println(\" kb/s\");\n        }\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(seed);\n            start = new Date();\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                store.deleteFile(name);\n            }\n\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          System.out.print(end.getTime() - start.getTime());\n          System.out.println(\" total milliseconds to delete\");\n\n          System.out.print(end.getTime() - veryStart.getTime());\n          System.out.println(\" total milliseconds\");\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae132b768aece5bf21cda14e2f17fba66eb6f7d6","date":1306128032,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest#testArrays().mjava","sourceNew":null,"sourceOld":"    public void testArrays() throws Exception {\n        final int count = 250;\n        final int LENGTH_MASK = 0xffff;\n\n        Random r = random;\n        final long seed = r.nextLong();\n        Random gen = new Random(seed);\n        int totalLength = 0;\n        int duration;\n        Date end;\n\n        Date veryStart = new Date();\n        Date start = new Date();\n        Transaction txn = env.beginTransaction(null, null);\n        Directory store = null;\n\n        if (VERBOSE) System.out.println(\"Writing files as one byte array\");\n\n        try {\n            store = new JEDirectory(txn, index, blocks);\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexOutput file = store.createOutput(name);\n                byte[] data = new byte[length];\n\n                totalLength += length;\n                gen.nextBytes(data);\n                file.writeBytes(data, length);\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          duration = (int) (end.getTime() - start.getTime());\n          System.out.print(duration);\n          System.out.print(\" total milliseconds to create, \");\n          System.out.print(totalLength / duration);\n          System.out.println(\" kb/s\");\n        }\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(seed);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexInput file = store.openInput(name);\n\n                if (file.length() != length)\n                    throw new Exception(\"length incorrect\");\n\n                byte[] data = new byte[length];\n                byte[] read = new byte[length];\n                gen.nextBytes(data);\n                file.readBytes(read, 0, length);\n\n                if (!Arrays.equals(data, read))\n                    throw new Exception(\"contents incorrect\");\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          duration = (int) (end.getTime() - start.getTime());\n          System.out.print(duration);\n          System.out.print(\" total milliseconds to read, \");\n          System.out.print(totalLength / duration);\n          System.out.println(\" kb/s\");\n        }\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(seed);\n            start = new Date();\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                store.deleteFile(name);\n            }\n\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          System.out.print(end.getTime() - start.getTime());\n          System.out.println(\" total milliseconds to delete\");\n\n          System.out.print(end.getTime() - veryStart.getTime());\n          System.out.println(\" total milliseconds\");\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","date":1306150983,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/db/bdb-je/src/test/org/apache/lucene/store/je/JEStoreTest#testArrays().mjava","sourceNew":null,"sourceOld":"    public void testArrays() throws Exception {\n        final int count = 250;\n        final int LENGTH_MASK = 0xffff;\n\n        Random r = random;\n        final long seed = r.nextLong();\n        Random gen = new Random(seed);\n        int totalLength = 0;\n        int duration;\n        Date end;\n\n        Date veryStart = new Date();\n        Date start = new Date();\n        Transaction txn = env.beginTransaction(null, null);\n        Directory store = null;\n\n        if (VERBOSE) System.out.println(\"Writing files as one byte array\");\n\n        try {\n            store = new JEDirectory(txn, index, blocks);\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexOutput file = store.createOutput(name);\n                byte[] data = new byte[length];\n\n                totalLength += length;\n                gen.nextBytes(data);\n                file.writeBytes(data, length);\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          duration = (int) (end.getTime() - start.getTime());\n          System.out.print(duration);\n          System.out.print(\" total milliseconds to create, \");\n          System.out.print(totalLength / duration);\n          System.out.println(\" kb/s\");\n        }\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(seed);\n            start = new Date();\n\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                int length = gen.nextInt() & LENGTH_MASK;\n                IndexInput file = store.openInput(name);\n\n                if (file.length() != length)\n                    throw new Exception(\"length incorrect\");\n\n                byte[] data = new byte[length];\n                byte[] read = new byte[length];\n                gen.nextBytes(data);\n                file.readBytes(read, 0, length);\n\n                if (!Arrays.equals(data, read))\n                    throw new Exception(\"contents incorrect\");\n\n                file.close();\n            }\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          duration = (int) (end.getTime() - start.getTime());\n          System.out.print(duration);\n          System.out.print(\" total milliseconds to read, \");\n          System.out.print(totalLength / duration);\n          System.out.println(\" kb/s\");\n        }\n\n        try {\n            txn = env.beginTransaction(null, null);\n            store = new JEDirectory(txn, index, blocks);\n\n            gen = new Random(seed);\n            start = new Date();\n            for (int i = 0; i < count; i++) {\n                String name = i + \".dat\";\n                store.deleteFile(name);\n            }\n\n        } catch (IOException e) {\n            txn.abort();\n            txn = null;\n            throw e;\n        } catch (DatabaseException e) {\n            if (txn != null) {\n                txn.abort();\n                txn = null;\n            }\n            throw e;\n        } finally {\n            if (txn != null)\n                txn.commit();\n\n            store.close();\n        }\n\n        end = new Date();\n\n        if (VERBOSE) {\n          System.out.print(end.getTime() - start.getTime());\n          System.out.println(\" total milliseconds to delete\");\n\n          System.out.print(end.getTime() - veryStart.getTime());\n          System.out.println(\" total milliseconds\");\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ae132b768aece5bf21cda14e2f17fba66eb6f7d6":["1f653cfcf159baeaafe5d01682a911e95bba4012","3a55c46ea262f9033bd9ab60542dea4b38abef33"],"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":["1f653cfcf159baeaafe5d01682a911e95bba4012","3a55c46ea262f9033bd9ab60542dea4b38abef33"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3a55c46ea262f9033bd9ab60542dea4b38abef33":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","1f653cfcf159baeaafe5d01682a911e95bba4012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a55c46ea262f9033bd9ab60542dea4b38abef33"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ae132b768aece5bf21cda14e2f17fba66eb6f7d6":[],"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ae132b768aece5bf21cda14e2f17fba66eb6f7d6","5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","3a55c46ea262f9033bd9ab60542dea4b38abef33","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a55c46ea262f9033bd9ab60542dea4b38abef33":["ae132b768aece5bf21cda14e2f17fba66eb6f7d6","5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1f653cfcf159baeaafe5d01682a911e95bba4012","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ae132b768aece5bf21cda14e2f17fba66eb6f7d6","5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}