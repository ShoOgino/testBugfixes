{"path":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/builders/RangeQueryNodeBuilder#build(QueryNode).mjava","commits":[{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/builders/RangeQueryNodeBuilder#build(QueryNode).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/original/builders/RangeQueryNodeBuilder#build(QueryNode).mjava","sourceNew":"  public TermRangeQuery build(QueryNode queryNode) throws QueryNodeException {\n    RangeQueryNode rangeNode = (RangeQueryNode) queryNode;\n    ParametricQueryNode upper = rangeNode.getUpperBound();\n    ParametricQueryNode lower = rangeNode.getLowerBound();\n\n    boolean lowerInclusive = false;\n    boolean upperInclusive = false;\n\n    if (upper.getOperator() == CompareOperator.LE) {\n      upperInclusive = true;\n    }\n\n    if (lower.getOperator() == CompareOperator.GE) {\n      lowerInclusive = true;\n    }\n\n    String field = rangeNode.getField().toString();\n\n    TermRangeQuery rangeQuery = new TermRangeQuery(field, lower\n        .getTextAsString(), upper.getTextAsString(), lowerInclusive,\n        upperInclusive, rangeNode.getCollator());\n    rangeQuery.setRewriteMethod(rangeNode.getMultiTermRewriteMethod());\n\n    return rangeQuery;\n\n  }\n\n","sourceOld":"  public TermRangeQuery build(QueryNode queryNode) throws QueryNodeException {\n    RangeQueryNode rangeNode = (RangeQueryNode) queryNode;\n    ParametricQueryNode upper = rangeNode.getUpperBound();\n    ParametricQueryNode lower = rangeNode.getLowerBound();\n\n    boolean lowerInclusive = false;\n    boolean upperInclusive = false;\n\n    if (upper.getOperator() == CompareOperator.LE) {\n      upperInclusive = true;\n    }\n\n    if (lower.getOperator() == CompareOperator.GE) {\n      lowerInclusive = true;\n    }\n\n    String field = rangeNode.getField().toString();\n\n    TermRangeQuery rangeQuery = new TermRangeQuery(field, lower\n        .getTextAsString(), upper.getTextAsString(), lowerInclusive,\n        upperInclusive, rangeNode.getCollator());\n    rangeQuery.setRewriteMethod(rangeNode.getMultiTermRewriteMethod());\n\n    return rangeQuery;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f75cd88b219e040b204bff4c189784659752f786","date":1250640581,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/builders/RangeQueryNodeBuilder#build(QueryNode).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/builders/RangeQueryNodeBuilder#build(QueryNode).mjava","sourceNew":"  public TermRangeQuery build(QueryNode queryNode) throws QueryNodeException {\n    RangeQueryNode rangeNode = (RangeQueryNode) queryNode;\n    ParametricQueryNode upper = rangeNode.getUpperBound();\n    ParametricQueryNode lower = rangeNode.getLowerBound();\n\n    boolean lowerInclusive = false;\n    boolean upperInclusive = false;\n\n    if (upper.getOperator() == CompareOperator.LE) {\n      upperInclusive = true;\n    }\n\n    if (lower.getOperator() == CompareOperator.GE) {\n      lowerInclusive = true;\n    }\n\n    String field = rangeNode.getField().toString();\n\n    TermRangeQuery rangeQuery = new TermRangeQuery(field, lower\n        .getTextAsString(), upper.getTextAsString(), lowerInclusive,\n        upperInclusive, rangeNode.getCollator());\n    \n    MultiTermQuery.RewriteMethod method = (MultiTermQuery.RewriteMethod)queryNode.getTag(MultiTermRewriteMethodAttribute.TAG_ID);\n    if (method != null) {\n      rangeQuery.setRewriteMethod(method);\n    }\n\n    return rangeQuery;\n\n  }\n\n","sourceOld":"  public TermRangeQuery build(QueryNode queryNode) throws QueryNodeException {\n    RangeQueryNode rangeNode = (RangeQueryNode) queryNode;\n    ParametricQueryNode upper = rangeNode.getUpperBound();\n    ParametricQueryNode lower = rangeNode.getLowerBound();\n\n    boolean lowerInclusive = false;\n    boolean upperInclusive = false;\n\n    if (upper.getOperator() == CompareOperator.LE) {\n      upperInclusive = true;\n    }\n\n    if (lower.getOperator() == CompareOperator.GE) {\n      lowerInclusive = true;\n    }\n\n    String field = rangeNode.getField().toString();\n\n    TermRangeQuery rangeQuery = new TermRangeQuery(field, lower\n        .getTextAsString(), upper.getTextAsString(), lowerInclusive,\n        upperInclusive, rangeNode.getCollator());\n    rangeQuery.setRewriteMethod(rangeNode.getMultiTermRewriteMethod());\n\n    return rangeQuery;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/builders/RangeQueryNodeBuilder#build(QueryNode).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/builders/RangeQueryNodeBuilder#build(QueryNode).mjava","sourceNew":"  public TermRangeQuery build(QueryNode queryNode) throws QueryNodeException {\n    RangeQueryNode rangeNode = (RangeQueryNode) queryNode;\n    ParametricQueryNode upper = rangeNode.getUpperBound();\n    ParametricQueryNode lower = rangeNode.getLowerBound();\n\n    boolean lowerInclusive = false;\n    boolean upperInclusive = false;\n\n    if (upper.getOperator() == CompareOperator.LE) {\n      upperInclusive = true;\n    }\n\n    if (lower.getOperator() == CompareOperator.GE) {\n      lowerInclusive = true;\n    }\n\n    String field = rangeNode.getField().toString();\n\n    TermRangeQuery rangeQuery = new TermRangeQuery(field, lower\n        .getTextAsString(), upper.getTextAsString(), lowerInclusive,\n        upperInclusive, rangeNode.getCollator());\n    \n    MultiTermQuery.RewriteMethod method = (MultiTermQuery.RewriteMethod)queryNode.getTag(MultiTermRewriteMethodAttribute.TAG_ID);\n    if (method != null) {\n      rangeQuery.setRewriteMethod(method);\n    }\n\n    return rangeQuery;\n\n  }\n\n","sourceOld":"  public TermRangeQuery build(QueryNode queryNode) throws QueryNodeException {\n    RangeQueryNode rangeNode = (RangeQueryNode) queryNode;\n    ParametricQueryNode upper = rangeNode.getUpperBound();\n    ParametricQueryNode lower = rangeNode.getLowerBound();\n\n    boolean lowerInclusive = false;\n    boolean upperInclusive = false;\n\n    if (upper.getOperator() == CompareOperator.LE) {\n      upperInclusive = true;\n    }\n\n    if (lower.getOperator() == CompareOperator.GE) {\n      lowerInclusive = true;\n    }\n\n    String field = rangeNode.getField().toString();\n\n    TermRangeQuery rangeQuery = new TermRangeQuery(field, lower\n        .getTextAsString(), upper.getTextAsString(), lowerInclusive,\n        upperInclusive, rangeNode.getCollator());\n    \n    MultiTermQuery.RewriteMethod method = (MultiTermQuery.RewriteMethod)queryNode.getTag(MultiTermRewriteMethodAttribute.TAG_ID);\n    if (method != null) {\n      rangeQuery.setRewriteMethod(method);\n    }\n\n    return rangeQuery;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8a848e758754282137f42bf85793c278e250390":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f75cd88b219e040b204bff4c189784659752f786":["e8a848e758754282137f42bf85793c278e250390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f75cd88b219e040b204bff4c189784659752f786"]},"commit2Childs":{"e8a848e758754282137f42bf85793c278e250390":["f75cd88b219e040b204bff4c189784659752f786"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8a848e758754282137f42bf85793c278e250390"],"f75cd88b219e040b204bff4c189784659752f786":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}