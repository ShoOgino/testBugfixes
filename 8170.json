{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean startInclusive,\n                                boolean endInclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1==null ? null : part1.toLowerCase();\n      part2 = part2==null ? null : part2.toLowerCase();\n    }\n\n\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n    df.setLenient(true);\n    DateTools.Resolution resolution = getDateResolution(field);\n    \n    try {\n      part1 = DateTools.dateToString(df.parse(part1), resolution);\n    } catch (Exception e) { }\n\n    try {\n      Date d2 = df.parse(part2);\n      if (endInclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      part2 = DateTools.dateToString(d2, resolution);\n    } catch (Exception e) { }\n\n    return newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  /**\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean startInclusive,\n                                boolean endInclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1==null ? null : part1.toLowerCase();\n      part2 = part2==null ? null : part2.toLowerCase();\n    }\n\n\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n    df.setLenient(true);\n    DateTools.Resolution resolution = getDateResolution(field);\n    \n    try {\n      part1 = DateTools.dateToString(df.parse(part1), resolution);\n    } catch (Exception e) { }\n\n    try {\n      Date d2 = df.parse(part2);\n      if (endInclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      part2 = DateTools.dateToString(d2, resolution);\n    } catch (Exception e) { }\n\n    return newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec57145e34263e28da6b82568e35471f7d67df69","date":1341768476,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean startInclusive,\n                                boolean endInclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1==null ? null : part1.toLowerCase(locale);\n      part2 = part2==null ? null : part2.toLowerCase(locale);\n    }\n\n\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n    df.setLenient(true);\n    DateTools.Resolution resolution = getDateResolution(field);\n    \n    try {\n      part1 = DateTools.dateToString(df.parse(part1), resolution);\n    } catch (Exception e) { }\n\n    try {\n      Date d2 = df.parse(part2);\n      if (endInclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      part2 = DateTools.dateToString(d2, resolution);\n    } catch (Exception e) { }\n\n    return newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  /**\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean startInclusive,\n                                boolean endInclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1==null ? null : part1.toLowerCase();\n      part2 = part2==null ? null : part2.toLowerCase();\n    }\n\n\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n    df.setLenient(true);\n    DateTools.Resolution resolution = getDateResolution(field);\n    \n    try {\n      part1 = DateTools.dateToString(df.parse(part1), resolution);\n    } catch (Exception e) { }\n\n    try {\n      Date d2 = df.parse(part2);\n      if (endInclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      part2 = DateTools.dateToString(d2, resolution);\n    } catch (Exception e) { }\n\n    return newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20459fa16fd43975af90f1c6ba6894eb74800065","date":1341839561,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean startInclusive,\n                                boolean endInclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1==null ? null : part1.toLowerCase(locale);\n      part2 = part2==null ? null : part2.toLowerCase(locale);\n    }\n\n\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n    df.setLenient(true);\n    DateTools.Resolution resolution = getDateResolution(field);\n    \n    try {\n      part1 = DateTools.dateToString(df.parse(part1), resolution);\n    } catch (Exception e) { }\n\n    try {\n      Date d2 = df.parse(part2);\n      if (endInclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(timeZone, locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      part2 = DateTools.dateToString(d2, resolution);\n    } catch (Exception e) { }\n\n    return newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  /**\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean startInclusive,\n                                boolean endInclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1==null ? null : part1.toLowerCase(locale);\n      part2 = part2==null ? null : part2.toLowerCase(locale);\n    }\n\n\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n    df.setLenient(true);\n    DateTools.Resolution resolution = getDateResolution(field);\n    \n    try {\n      part1 = DateTools.dateToString(df.parse(part1), resolution);\n    } catch (Exception e) { }\n\n    try {\n      Date d2 = df.parse(part2);\n      if (endInclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      part2 = DateTools.dateToString(d2, resolution);\n    } catch (Exception e) { }\n\n    return newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean startInclusive,\n                                boolean endInclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1==null ? null : part1.toLowerCase(locale);\n      part2 = part2==null ? null : part2.toLowerCase(locale);\n    }\n\n\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n    df.setLenient(true);\n    DateTools.Resolution resolution = getDateResolution(field);\n    \n    try {\n      part1 = DateTools.dateToString(df.parse(part1), resolution);\n    } catch (Exception e) { }\n\n    try {\n      Date d2 = df.parse(part2);\n      if (endInclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(timeZone, locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      part2 = DateTools.dateToString(d2, resolution);\n    } catch (Exception e) { }\n\n    return newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  /**\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean startInclusive,\n                                boolean endInclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1==null ? null : part1.toLowerCase();\n      part2 = part2==null ? null : part2.toLowerCase();\n    }\n\n\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n    df.setLenient(true);\n    DateTools.Resolution resolution = getDateResolution(field);\n    \n    try {\n      part1 = DateTools.dateToString(df.parse(part1), resolution);\n    } catch (Exception e) { }\n\n    try {\n      Date d2 = df.parse(part2);\n      if (endInclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      part2 = DateTools.dateToString(d2, resolution);\n    } catch (Exception e) { }\n\n    return newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean startInclusive,\n                                boolean endInclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1==null ? null : part1.toLowerCase(locale);\n      part2 = part2==null ? null : part2.toLowerCase(locale);\n    }\n\n\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n    df.setLenient(true);\n    DateTools.Resolution resolution = getDateResolution(field);\n    \n    try {\n      part1 = DateTools.dateToString(df.parse(part1), resolution);\n    } catch (Exception e) { }\n\n    try {\n      Date d2 = df.parse(part2);\n      if (endInclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(timeZone, locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      part2 = DateTools.dateToString(d2, resolution);\n    } catch (Exception e) { }\n\n    return newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  /**\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean startInclusive,\n                                boolean endInclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1==null ? null : part1.toLowerCase();\n      part2 = part2==null ? null : part2.toLowerCase();\n    }\n\n\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n    df.setLenient(true);\n    DateTools.Resolution resolution = getDateResolution(field);\n    \n    try {\n      part1 = DateTools.dateToString(df.parse(part1), resolution);\n    } catch (Exception e) { }\n\n    try {\n      Date d2 = df.parse(part2);\n      if (endInclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      part2 = DateTools.dateToString(d2, resolution);\n    } catch (Exception e) { }\n\n    return newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean startInclusive,\n                                boolean endInclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1==null ? null : part1.toLowerCase(locale);\n      part2 = part2==null ? null : part2.toLowerCase(locale);\n    }\n\n\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n    df.setLenient(true);\n    DateTools.Resolution resolution = getDateResolution(field);\n    \n    try {\n      part1 = DateTools.dateToString(df.parse(part1), resolution);\n    } catch (Exception e) { }\n\n    try {\n      Date d2 = df.parse(part2);\n      if (endInclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(timeZone, locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      part2 = DateTools.dateToString(d2, resolution);\n    } catch (Exception e) { }\n\n    return newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  /**\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean startInclusive,\n                                boolean endInclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1==null ? null : part1.toLowerCase();\n      part2 = part2==null ? null : part2.toLowerCase();\n    }\n\n\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n    df.setLenient(true);\n    DateTools.Resolution resolution = getDateResolution(field);\n    \n    try {\n      part1 = DateTools.dateToString(df.parse(part1), resolution);\n    } catch (Exception e) { }\n\n    try {\n      Date d2 = df.parse(part2);\n      if (endInclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      part2 = DateTools.dateToString(d2, resolution);\n    } catch (Exception e) { }\n\n    return newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean startInclusive,\n                                boolean endInclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1==null ? null : part1.toLowerCase(locale);\n      part2 = part2==null ? null : part2.toLowerCase(locale);\n    }\n\n\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n    df.setLenient(true);\n    DateTools.Resolution resolution = getDateResolution(field);\n    \n    try {\n      part1 = DateTools.dateToString(df.parse(part1), resolution);\n    } catch (Exception e) { }\n\n    try {\n      Date d2 = df.parse(part2);\n      if (endInclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(timeZone, locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      part2 = DateTools.dateToString(d2, resolution);\n    } catch (Exception e) { }\n\n    return newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  /**\n   *\n   * @exception org.apache.lucene.queryparser.classic.ParseException\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean startInclusive,\n                                boolean endInclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1==null ? null : part1.toLowerCase(locale);\n      part2 = part2==null ? null : part2.toLowerCase(locale);\n    }\n\n\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n    df.setLenient(true);\n    DateTools.Resolution resolution = getDateResolution(field);\n    \n    try {\n      part1 = DateTools.dateToString(df.parse(part1), resolution);\n    } catch (Exception e) { }\n\n    try {\n      Date d2 = df.parse(part2);\n      if (endInclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(timeZone, locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      part2 = DateTools.dateToString(d2, resolution);\n    } catch (Exception e) { }\n\n    return newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea4107f60b9f95623c16025c9c247412ff809092","date":1468333987,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean startInclusive,\n                                boolean endInclusive) throws ParseException\n  {\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n    df.setLenient(true);\n    DateTools.Resolution resolution = getDateResolution(field);\n    \n    try {\n      part1 = DateTools.dateToString(df.parse(part1), resolution);\n    } catch (Exception e) { }\n\n    try {\n      Date d2 = df.parse(part2);\n      if (endInclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(timeZone, locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      part2 = DateTools.dateToString(d2, resolution);\n    } catch (Exception e) { }\n\n    return newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean startInclusive,\n                                boolean endInclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1==null ? null : part1.toLowerCase(locale);\n      part2 = part2==null ? null : part2.toLowerCase(locale);\n    }\n\n\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n    df.setLenient(true);\n    DateTools.Resolution resolution = getDateResolution(field);\n    \n    try {\n      part1 = DateTools.dateToString(df.parse(part1), resolution);\n    } catch (Exception e) { }\n\n    try {\n      Date d2 = df.parse(part2);\n      if (endInclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(timeZone, locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      part2 = DateTools.dateToString(d2, resolution);\n    } catch (Exception e) { }\n\n    return newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean startInclusive,\n                                boolean endInclusive) throws ParseException\n  {\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n    df.setLenient(true);\n    DateTools.Resolution resolution = getDateResolution(field);\n    \n    try {\n      part1 = DateTools.dateToString(df.parse(part1), resolution);\n    } catch (Exception e) { }\n\n    try {\n      Date d2 = df.parse(part2);\n      if (endInclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(timeZone, locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      part2 = DateTools.dateToString(d2, resolution);\n    } catch (Exception e) { }\n\n    return newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean startInclusive,\n                                boolean endInclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1==null ? null : part1.toLowerCase(locale);\n      part2 = part2==null ? null : part2.toLowerCase(locale);\n    }\n\n\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n    df.setLenient(true);\n    DateTools.Resolution resolution = getDateResolution(field);\n    \n    try {\n      part1 = DateTools.dateToString(df.parse(part1), resolution);\n    } catch (Exception e) { }\n\n    try {\n      Date d2 = df.parse(part2);\n      if (endInclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(timeZone, locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      part2 = DateTools.dateToString(d2, resolution);\n    } catch (Exception e) { }\n\n    return newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["2acf500f78aa12b92e371fd89c719291986b6b90"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ec57145e34263e28da6b82568e35471f7d67df69":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"20459fa16fd43975af90f1c6ba6894eb74800065":["ec57145e34263e28da6b82568e35471f7d67df69"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","20459fa16fd43975af90f1c6ba6894eb74800065"],"ea4107f60b9f95623c16025c9c247412ff809092":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","ea4107f60b9f95623c16025c9c247412ff809092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea4107f60b9f95623c16025c9c247412ff809092"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["ea4107f60b9f95623c16025c9c247412ff809092","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","ec57145e34263e28da6b82568e35471f7d67df69","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ec57145e34263e28da6b82568e35471f7d67df69":["20459fa16fd43975af90f1c6ba6894eb74800065"],"20459fa16fd43975af90f1c6ba6894eb74800065":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","fe33227f6805edab2036cbb80645cc4e2d1fa424","46d8ada1fff8d18cb197c38c7983225162599948"],"ea4107f60b9f95623c16025c9c247412ff809092":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}