{"path":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVFirstPassGroupingCollector#[T]_create(Sort,int,String,DocValues.Type,boolean).mjava","commits":[{"id":"6b588d7000deacb0a01f30746b91644112b94326","date":1331201456,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVFirstPassGroupingCollector#[T]_create(Sort,int,String,DocValues.Type,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs a {@link DVFirstPassGroupingCollector}.\n   * Selects and constructs the most optimal first pass collector implementation for grouping by {@link DocValues}.\n   *\n   * @param groupField      The field to group by\n   * @param topNGroups      The maximum top number of groups to return. Typically this equals to offset + rows.\n   * @param diskResident    Whether the values to group by should be disk resident\n   * @param type            The {@link org.apache.lucene.index.DocValues.Type} which is used to select a concrete implementation.\n   * @param groupSort       The sort used for the groups\n   * @return the most optimal first pass collector implementation for grouping by {@link DocValues}\n   * @throws IOException    If I/O related errors occur\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <T> DVFirstPassGroupingCollector<T> create(Sort groupSort, int topNGroups, String groupField, DocValues.Type type, boolean diskResident) throws IOException {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVFirstPassGroupingCollector) new Lng(groupSort, topNGroups, groupField, diskResident, type);\n      case FLOAT_32:\n      case FLOAT_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVFirstPassGroupingCollector) new Dbl(groupSort, topNGroups, groupField, diskResident, type);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVFirstPassGroupingCollector) new BR(groupSort, topNGroups, groupField, diskResident, type);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVFirstPassGroupingCollector) new SortedBR(groupSort, topNGroups, groupField, diskResident, type);\n      default:\n        throw new IllegalArgumentException(String.format(\"ValueType %s not supported\", type));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e581a0182b73b8562786bb7f311da98768f61fb4","date":1331217692,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVFirstPassGroupingCollector#[T]_create(Sort,int,String,DocValues.Type,boolean).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVFirstPassGroupingCollector#[T]_create(Sort,int,String,DocValues.Type,boolean).mjava","sourceNew":"  /**\n   * Constructs a {@link DVFirstPassGroupingCollector}.\n   * Selects and constructs the most optimal first pass collector implementation for grouping by {@link DocValues}.\n   *\n   * @param groupField      The field to group by\n   * @param topNGroups      The maximum top number of groups to return. Typically this equals to offset + rows.\n   * @param diskResident    Whether the values to group by should be disk resident\n   * @param type            The {@link Type} which is used to select a concrete implementation.\n   * @param groupSort       The sort used for the groups\n   * @return the most optimal first pass collector implementation for grouping by {@link DocValues}\n   * @throws IOException    If I/O related errors occur\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <T> DVFirstPassGroupingCollector<T> create(Sort groupSort, int topNGroups, String groupField, DocValues.Type type, boolean diskResident) throws IOException {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVFirstPassGroupingCollector) new Lng(groupSort, topNGroups, groupField, diskResident, type);\n      case FLOAT_32:\n      case FLOAT_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVFirstPassGroupingCollector) new Dbl(groupSort, topNGroups, groupField, diskResident, type);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVFirstPassGroupingCollector) new BR(groupSort, topNGroups, groupField, diskResident, type);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVFirstPassGroupingCollector) new SortedBR(groupSort, topNGroups, groupField, diskResident, type);\n      default:\n        throw new IllegalArgumentException(String.format(\"ValueType %s not supported\", type));\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a {@link DVFirstPassGroupingCollector}.\n   * Selects and constructs the most optimal first pass collector implementation for grouping by {@link DocValues}.\n   *\n   * @param groupField      The field to group by\n   * @param topNGroups      The maximum top number of groups to return. Typically this equals to offset + rows.\n   * @param diskResident    Whether the values to group by should be disk resident\n   * @param type            The {@link org.apache.lucene.index.DocValues.Type} which is used to select a concrete implementation.\n   * @param groupSort       The sort used for the groups\n   * @return the most optimal first pass collector implementation for grouping by {@link DocValues}\n   * @throws IOException    If I/O related errors occur\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <T> DVFirstPassGroupingCollector<T> create(Sort groupSort, int topNGroups, String groupField, DocValues.Type type, boolean diskResident) throws IOException {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVFirstPassGroupingCollector) new Lng(groupSort, topNGroups, groupField, diskResident, type);\n      case FLOAT_32:\n      case FLOAT_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVFirstPassGroupingCollector) new Dbl(groupSort, topNGroups, groupField, diskResident, type);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVFirstPassGroupingCollector) new BR(groupSort, topNGroups, groupField, diskResident, type);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVFirstPassGroupingCollector) new SortedBR(groupSort, topNGroups, groupField, diskResident, type);\n      default:\n        throw new IllegalArgumentException(String.format(\"ValueType %s not supported\", type));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVFirstPassGroupingCollector#[T]_create(Sort,int,String,DocValues.Type,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs a {@link DVFirstPassGroupingCollector}.\n   * Selects and constructs the most optimal first pass collector implementation for grouping by {@link DocValues}.\n   *\n   * @param groupField      The field to group by\n   * @param topNGroups      The maximum top number of groups to return. Typically this equals to offset + rows.\n   * @param diskResident    Whether the values to group by should be disk resident\n   * @param type            The {@link Type} which is used to select a concrete implementation.\n   * @param groupSort       The sort used for the groups\n   * @return the most optimal first pass collector implementation for grouping by {@link DocValues}\n   * @throws IOException    If I/O related errors occur\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <T> DVFirstPassGroupingCollector<T> create(Sort groupSort, int topNGroups, String groupField, DocValues.Type type, boolean diskResident) throws IOException {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVFirstPassGroupingCollector) new Lng(groupSort, topNGroups, groupField, diskResident, type);\n      case FLOAT_32:\n      case FLOAT_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVFirstPassGroupingCollector) new Dbl(groupSort, topNGroups, groupField, diskResident, type);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVFirstPassGroupingCollector) new BR(groupSort, topNGroups, groupField, diskResident, type);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVFirstPassGroupingCollector) new SortedBR(groupSort, topNGroups, groupField, diskResident, type);\n      default:\n        throw new IllegalArgumentException(String.format(\"ValueType %s not supported\", type));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVFirstPassGroupingCollector#[T]_create(Sort,int,String,DocValues.Type,boolean).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVFirstPassGroupingCollector#[T]_create(Sort,int,String,DocValues.Type,boolean).mjava","sourceNew":"  /**\n   * Constructs a {@link DVFirstPassGroupingCollector}.\n   * Selects and constructs the most optimal first pass collector implementation for grouping by {@link DocValues}.\n   *\n   * @param groupField      The field to group by\n   * @param topNGroups      The maximum top number of groups to return. Typically this equals to offset + rows.\n   * @param diskResident    Whether the values to group by should be disk resident\n   * @param type            The {@link Type} which is used to select a concrete implementation.\n   * @param groupSort       The sort used for the groups\n   * @return the most optimal first pass collector implementation for grouping by {@link DocValues}\n   * @throws IOException    If I/O related errors occur\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <T> DVFirstPassGroupingCollector<T> create(Sort groupSort, int topNGroups, String groupField, DocValues.Type type, boolean diskResident) throws IOException {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVFirstPassGroupingCollector) new Lng(groupSort, topNGroups, groupField, diskResident, type);\n      case FLOAT_32:\n      case FLOAT_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVFirstPassGroupingCollector) new Dbl(groupSort, topNGroups, groupField, diskResident, type);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVFirstPassGroupingCollector) new BR(groupSort, topNGroups, groupField, diskResident, type);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVFirstPassGroupingCollector) new SortedBR(groupSort, topNGroups, groupField, diskResident, type);\n      default:\n        throw new IllegalArgumentException(String.format(\"ValueType %s not supported\", type));\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a {@link DVFirstPassGroupingCollector}.\n   * Selects and constructs the most optimal first pass collector implementation for grouping by {@link DocValues}.\n   *\n   * @param groupField      The field to group by\n   * @param topNGroups      The maximum top number of groups to return. Typically this equals to offset + rows.\n   * @param diskResident    Whether the values to group by should be disk resident\n   * @param type            The {@link Type} which is used to select a concrete implementation.\n   * @param groupSort       The sort used for the groups\n   * @return the most optimal first pass collector implementation for grouping by {@link DocValues}\n   * @throws IOException    If I/O related errors occur\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <T> DVFirstPassGroupingCollector<T> create(Sort groupSort, int topNGroups, String groupField, DocValues.Type type, boolean diskResident) throws IOException {\n    switch (type) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVFirstPassGroupingCollector) new Lng(groupSort, topNGroups, groupField, diskResident, type);\n      case FLOAT_32:\n      case FLOAT_64:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVFirstPassGroupingCollector) new Dbl(groupSort, topNGroups, groupField, diskResident, type);\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVFirstPassGroupingCollector) new BR(groupSort, topNGroups, groupField, diskResident, type);\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        // Type erasure b/c otherwise we have inconvertible types...\n        return (DVFirstPassGroupingCollector) new SortedBR(groupSort, topNGroups, groupField, diskResident, type);\n      default:\n        throw new IllegalArgumentException(String.format(\"ValueType %s not supported\", type));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e581a0182b73b8562786bb7f311da98768f61fb4"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e581a0182b73b8562786bb7f311da98768f61fb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6b588d7000deacb0a01f30746b91644112b94326":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e581a0182b73b8562786bb7f311da98768f61fb4":["6b588d7000deacb0a01f30746b91644112b94326"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","6b588d7000deacb0a01f30746b91644112b94326"],"6b588d7000deacb0a01f30746b91644112b94326":["e581a0182b73b8562786bb7f311da98768f61fb4"],"e581a0182b73b8562786bb7f311da98768f61fb4":["38e3b736c7ca086d61b7dbb841c905ee115490da","b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}