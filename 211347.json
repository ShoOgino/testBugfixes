{"path":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermDistinctValuesCollector#setNextReader(AtomicReaderContext).mjava","commits":[{"id":"166661dd25a09458b128e5c0b86e3b762a6ded68","date":1332333666,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermDistinctValuesCollector#setNextReader(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  public void setNextReader(AtomicReaderContext context) throws IOException {\n    groupFieldTermIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n    countFieldTermIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), countField);\n\n    ordSet.clear();\n    for (GroupCount group : groups) {\n      int groupOrd = group.groupValue == null ? 0 : groupFieldTermIndex.binarySearchLookup(group.groupValue, spare);\n      if (groupOrd < 0) {\n        continue;\n      }\n\n      groupCounts[ordSet.put(groupOrd)] = group;\n      group.ords = new int[group.uniqueValues.size()];\n      Arrays.fill(group.ords, -1);\n      int i = 0;\n      for (BytesRef value : group.uniqueValues) {\n        int countOrd = value == null ? 0 : countFieldTermIndex.binarySearchLookup(value, new BytesRef());\n        if (countOrd >= 0) {\n          group.ords[i++] = countOrd;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermDistinctValuesCollector#setNextReader(AtomicReaderContext).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermDistinctValuesCollector#setNextReader(AtomicReaderContext).mjava","sourceNew":"  public void setNextReader(AtomicReaderContext context) throws IOException {\n    groupFieldTermIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n    countFieldTermIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), countField);\n\n    ordSet.clear();\n    for (GroupCount group : groups) {\n      int groupOrd = group.groupValue == null ? 0 : groupFieldTermIndex.binarySearchLookup(group.groupValue, spare);\n      if (groupOrd < 0) {\n        continue;\n      }\n\n      groupCounts[ordSet.put(groupOrd)] = group;\n      group.ords = new int[group.uniqueValues.size()];\n      Arrays.fill(group.ords, -1);\n      int i = 0;\n      for (BytesRef value : group.uniqueValues) {\n        int countOrd = value == null ? 0 : countFieldTermIndex.binarySearchLookup(value, new BytesRef());\n        if (countOrd >= 0) {\n          group.ords[i++] = countOrd;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void setNextReader(AtomicReaderContext context) throws IOException {\n    groupFieldTermIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n    countFieldTermIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), countField);\n\n    ordSet.clear();\n    for (GroupCount group : groups) {\n      int groupOrd = group.groupValue == null ? 0 : groupFieldTermIndex.binarySearchLookup(group.groupValue, spare);\n      if (groupOrd < 0) {\n        continue;\n      }\n\n      groupCounts[ordSet.put(groupOrd)] = group;\n      group.ords = new int[group.uniqueValues.size()];\n      Arrays.fill(group.ords, -1);\n      int i = 0;\n      for (BytesRef value : group.uniqueValues) {\n        int countOrd = value == null ? 0 : countFieldTermIndex.binarySearchLookup(value, new BytesRef());\n        if (countOrd >= 0) {\n          group.ords[i++] = countOrd;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["166661dd25a09458b128e5c0b86e3b762a6ded68"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"166661dd25a09458b128e5c0b86e3b762a6ded68":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["166661dd25a09458b128e5c0b86e3b762a6ded68"],"166661dd25a09458b128e5c0b86e3b762a6ded68":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}