{"path":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsWriter#finish(int).mjava","commits":[{"id":"01f60198ece724a6e96cd0b45f289cf42ff83d4f","date":1286864103,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsWriter#finish(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    synchronized public void finish(int docCount) throws IOException {\n      if(!started)\n        return;\n      final IndexOutput datOut = dir.createOutput(IndexFileNames\n          .segmentFileName(id, \"\", IndexFileNames.CSF_DATA_EXTENSION));\n      CodecUtil.writeHeader(datOut, CODEC_NAME, VERSION_CURRENT);\n\n      // nocommit -- long can't work right since it's signed\n      datOut.writeLong(minValue);\n      // write a default value to recognize docs without a value for that field\n      final long defaultValue = ++maxValue - minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount, PackedInts.bitsRequired(maxValue-minValue));\n         \n      final int limit = maxDocID + 1;\n      for (int i = 0; i < minDocID; i++) {\n        w.add(defaultValue);\n      }\n      for (int i = minDocID; i < limit; i++) {\n        w.add(docToValue[i] - minValue);\n      }\n      for (int i = limit; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n      w.finish();\n\n      datOut.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d84736c4614acce6720851cbd2c823d7cd516e4","date":1290551630,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsWriter#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsWriter#finish(int).mjava","sourceNew":"    @Override\n    public synchronized void finish(int docCount) throws IOException {\n      if (!started)\n        return;\n      final IndexOutput datOut = dir.createOutput(IndexFileNames\n          .segmentFileName(id, \"\", DATA_EXTENSION));\n      CodecUtil.writeHeader(datOut, CODEC_NAME, VERSION_CURRENT);\n\n      // TODO -- long can't work right since it's signed\n      datOut.writeLong(minValue);\n      // write a default value to recognize docs without a value for that field\n      final long defaultValue = ++maxValue - minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount, PackedInts\n          .bitsRequired(maxValue - minValue));\n      final int firstDoc = defaultValues.nextSetBit(0);\n      assert firstDoc >= 0; // we have at lest one value!\n      for (int i = 0; i < firstDoc; i++) {\n        w.add(defaultValue); // fill with defaults until first bit set\n      }\n      lastDocId++;\n      for (int i = firstDoc; i < lastDocId;) {\n        w.add(docToValue[i] - minValue);\n        final int nextValue = defaultValues.nextSetBit(i);\n        for (i++; i < nextValue; i++) {\n          w.add(defaultValue); // fill all gaps\n        }\n      }\n      for (int i = lastDocId; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n      w.finish();\n\n      datOut.close();\n    }\n\n","sourceOld":"    @Override\n    synchronized public void finish(int docCount) throws IOException {\n      if(!started)\n        return;\n      final IndexOutput datOut = dir.createOutput(IndexFileNames\n          .segmentFileName(id, \"\", IndexFileNames.CSF_DATA_EXTENSION));\n      CodecUtil.writeHeader(datOut, CODEC_NAME, VERSION_CURRENT);\n\n      // nocommit -- long can't work right since it's signed\n      datOut.writeLong(minValue);\n      // write a default value to recognize docs without a value for that field\n      final long defaultValue = ++maxValue - minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount, PackedInts.bitsRequired(maxValue-minValue));\n         \n      final int limit = maxDocID + 1;\n      for (int i = 0; i < minDocID; i++) {\n        w.add(defaultValue);\n      }\n      for (int i = minDocID; i < limit; i++) {\n        w.add(docToValue[i] - minValue);\n      }\n      for (int i = limit; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n      w.finish();\n\n      datOut.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4","date":1291128345,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsWriter#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsWriter#finish(int).mjava","sourceNew":"    @Override\n    public synchronized void finish(int docCount) throws IOException {\n      if (!started)\n        return;\n      final IndexOutput datOut = dir.createOutput(IndexFileNames\n          .segmentFileName(id, \"\", DATA_EXTENSION));\n      CodecUtil.writeHeader(datOut, CODEC_NAME, VERSION_CURRENT);\n\n      // TODO -- long can't work right since it's signed\n      datOut.writeLong(minValue);\n      // write a default value to recognize docs without a value for that field\n      final long defaultValue = ++maxValue - minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount, PackedInts\n          .bitsRequired(maxValue - minValue));\n      final int firstDoc = defaultValues.nextSetBit(0);\n      assert firstDoc >= 0; // we have at lest one value!\n      for (int i = 0; i < firstDoc; i++) {\n        w.add(defaultValue); // fill with defaults until first bit set\n      }\n      lastDocId++;\n      for (int i = firstDoc; i < lastDocId;) {\n        w.add(docToValue[i] - minValue);\n        final int nextValue = defaultValues.nextSetBit(i);\n        for (i++; i < nextValue; i++) {\n          w.add(defaultValue); // fill all gaps\n        }\n      }\n      for (int i = lastDocId; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n      w.finish();\n      datOut.close();\n      bytesUsed.addAndGet(-(RamUsageEstimator.NUM_BYTES_LONG * docToValue.length ));\n      docToValue = null;\n      \n    }\n\n","sourceOld":"    @Override\n    public synchronized void finish(int docCount) throws IOException {\n      if (!started)\n        return;\n      final IndexOutput datOut = dir.createOutput(IndexFileNames\n          .segmentFileName(id, \"\", DATA_EXTENSION));\n      CodecUtil.writeHeader(datOut, CODEC_NAME, VERSION_CURRENT);\n\n      // TODO -- long can't work right since it's signed\n      datOut.writeLong(minValue);\n      // write a default value to recognize docs without a value for that field\n      final long defaultValue = ++maxValue - minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount, PackedInts\n          .bitsRequired(maxValue - minValue));\n      final int firstDoc = defaultValues.nextSetBit(0);\n      assert firstDoc >= 0; // we have at lest one value!\n      for (int i = 0; i < firstDoc; i++) {\n        w.add(defaultValue); // fill with defaults until first bit set\n      }\n      lastDocId++;\n      for (int i = firstDoc; i < lastDocId;) {\n        w.add(docToValue[i] - minValue);\n        final int nextValue = defaultValues.nextSetBit(i);\n        for (i++; i < nextValue; i++) {\n          w.add(defaultValue); // fill all gaps\n        }\n      }\n      for (int i = lastDocId; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n      w.finish();\n\n      datOut.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsWriter#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsWriter#finish(int).mjava","sourceNew":"    @Override\n    public synchronized void finish(int docCount) throws IOException {\n      try {\n        if (!started) {\n          minValue = maxValue = 0;\n        }\n        // TODO -- long can't work right since it's signed\n        datOut.writeLong(minValue);\n        // write a default value to recognize docs without a value for that\n        // field\n        final long defaultValue = ++maxValue - minValue;\n        datOut.writeLong(defaultValue);\n        PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n            PackedInts.bitsRequired(maxValue - minValue));\n        final int firstDoc = defaultValues.nextSetBit(0);\n        lastDocId++;\n        if(firstDoc != -1) { \n          for (int i = 0; i < firstDoc; i++) {\n            w.add(defaultValue); // fill with defaults until first bit set\n          }\n\n          for (int i = firstDoc; i < lastDocId;) {\n            w.add(docToValue[i] - minValue);\n            final int nextValue = defaultValues.nextSetBit(i);\n            for (i++; i < nextValue; i++) {\n              w.add(defaultValue); // fill all gaps\n            }\n          }\n        }\n        for (int i = lastDocId; i < docCount; i++) {\n          w.add(defaultValue);\n        }\n        w.finish();\n      } finally {\n        datOut.close();\n        bytesUsed\n            .addAndGet(-(RamUsageEstimator.NUM_BYTES_LONG * docToValue.length));\n        docToValue = null;\n      }\n\n    }\n\n","sourceOld":"    @Override\n    public synchronized void finish(int docCount) throws IOException {\n      if (!started)\n        return;\n      final IndexOutput datOut = dir.createOutput(IndexFileNames\n          .segmentFileName(id, \"\", DATA_EXTENSION));\n      CodecUtil.writeHeader(datOut, CODEC_NAME, VERSION_CURRENT);\n\n      // TODO -- long can't work right since it's signed\n      datOut.writeLong(minValue);\n      // write a default value to recognize docs without a value for that field\n      final long defaultValue = ++maxValue - minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount, PackedInts\n          .bitsRequired(maxValue - minValue));\n      final int firstDoc = defaultValues.nextSetBit(0);\n      assert firstDoc >= 0; // we have at lest one value!\n      for (int i = 0; i < firstDoc; i++) {\n        w.add(defaultValue); // fill with defaults until first bit set\n      }\n      lastDocId++;\n      for (int i = firstDoc; i < lastDocId;) {\n        w.add(docToValue[i] - minValue);\n        final int nextValue = defaultValues.nextSetBit(i);\n        for (i++; i < nextValue; i++) {\n          w.add(defaultValue); // fill all gaps\n        }\n      }\n      for (int i = lastDocId; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n      w.finish();\n      datOut.close();\n      bytesUsed.addAndGet(-(RamUsageEstimator.NUM_BYTES_LONG * docToValue.length ));\n      docToValue = null;\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85130289d2ed101fcc2d8798511c7c5b020ffab4","date":1297239859,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsWriter#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsWriter#finish(int).mjava","sourceNew":"    @Override\n    public synchronized void finish(int docCount) throws IOException {\n      try {\n        if (!started) {\n          minValue = maxValue = 0;\n        }\n        // TODO -- long can't work right since it's signed\n        datOut.writeLong(minValue);\n        // write a default value to recognize docs without a value for that\n        // field\n        final long defaultValue = ++maxValue - minValue;\n        datOut.writeLong(defaultValue);\n        PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n            PackedInts.bitsRequired(maxValue - minValue));\n        final int firstDoc = defaultValues.nextSetBit(0);\n        lastDocId++;\n        if (firstDoc != -1) { \n          for (int i = 0; i < firstDoc; i++) {\n            w.add(defaultValue); // fill with defaults until first bit set\n          }\n\n          for (int i = firstDoc; i < lastDocId;) {\n            w.add(docToValue[i] - minValue);\n            final int nextValue = defaultValues.nextSetBit(i);\n            for (i++; i < nextValue; i++) {\n              w.add(defaultValue); // fill all gaps\n            }\n          }\n        }\n        for (int i = lastDocId; i < docCount; i++) {\n          w.add(defaultValue);\n        }\n        w.finish();\n      } finally {\n        datOut.close();\n        bytesUsed\n            .addAndGet(-(RamUsageEstimator.NUM_BYTES_LONG * docToValue.length));\n        docToValue = null;\n      }\n\n    }\n\n","sourceOld":"    @Override\n    public synchronized void finish(int docCount) throws IOException {\n      try {\n        if (!started) {\n          minValue = maxValue = 0;\n        }\n        // TODO -- long can't work right since it's signed\n        datOut.writeLong(minValue);\n        // write a default value to recognize docs without a value for that\n        // field\n        final long defaultValue = ++maxValue - minValue;\n        datOut.writeLong(defaultValue);\n        PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n            PackedInts.bitsRequired(maxValue - minValue));\n        final int firstDoc = defaultValues.nextSetBit(0);\n        lastDocId++;\n        if(firstDoc != -1) { \n          for (int i = 0; i < firstDoc; i++) {\n            w.add(defaultValue); // fill with defaults until first bit set\n          }\n\n          for (int i = firstDoc; i < lastDocId;) {\n            w.add(docToValue[i] - minValue);\n            final int nextValue = defaultValues.nextSetBit(i);\n            for (i++; i < nextValue; i++) {\n              w.add(defaultValue); // fill all gaps\n            }\n          }\n        }\n        for (int i = lastDocId; i < docCount; i++) {\n          w.add(defaultValue);\n        }\n        w.finish();\n      } finally {\n        datOut.close();\n        bytesUsed\n            .addAndGet(-(RamUsageEstimator.NUM_BYTES_LONG * docToValue.length));\n        docToValue = null;\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9235b9d4454a46c066cda47fed7ca0a34e614529","date":1304414372,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsWriter#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsWriter#finish(int).mjava","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      try {\n        if (!started) {\n          minValue = maxValue = 0;\n        }\n        // TODO -- long can't work right since it's signed\n        datOut.writeLong(minValue);\n        // write a default value to recognize docs without a value for that\n        // field\n        final long defaultValue = ++maxValue - minValue;\n        datOut.writeLong(defaultValue);\n        PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n            PackedInts.bitsRequired(maxValue - minValue));\n        final int firstDoc = defaultValues.nextSetBit(0);\n        lastDocId++;\n        if (firstDoc != -1) { \n          for (int i = 0; i < firstDoc; i++) {\n            w.add(defaultValue); // fill with defaults until first bit set\n          }\n\n          for (int i = firstDoc; i < lastDocId;) {\n            w.add(docToValue[i] - minValue);\n            final int nextValue = defaultValues.nextSetBit(++i);\n            for (; i < nextValue; i++) {\n              w.add(defaultValue); // fill all gaps\n            }\n          }\n        }\n        for (int i = lastDocId; i < docCount; i++) {\n          w.add(defaultValue);\n        }\n        w.finish();\n      } finally {\n        datOut.close();\n        bytesUsed\n            .addAndGet(-(RamUsageEstimator.NUM_BYTES_LONG * docToValue.length));\n        docToValue = null;\n      }\n\n    }\n\n","sourceOld":"    @Override\n    public synchronized void finish(int docCount) throws IOException {\n      try {\n        if (!started) {\n          minValue = maxValue = 0;\n        }\n        // TODO -- long can't work right since it's signed\n        datOut.writeLong(minValue);\n        // write a default value to recognize docs without a value for that\n        // field\n        final long defaultValue = ++maxValue - minValue;\n        datOut.writeLong(defaultValue);\n        PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n            PackedInts.bitsRequired(maxValue - minValue));\n        final int firstDoc = defaultValues.nextSetBit(0);\n        lastDocId++;\n        if (firstDoc != -1) { \n          for (int i = 0; i < firstDoc; i++) {\n            w.add(defaultValue); // fill with defaults until first bit set\n          }\n\n          for (int i = firstDoc; i < lastDocId;) {\n            w.add(docToValue[i] - minValue);\n            final int nextValue = defaultValues.nextSetBit(i);\n            for (i++; i < nextValue; i++) {\n              w.add(defaultValue); // fill all gaps\n            }\n          }\n        }\n        for (int i = lastDocId; i < docCount; i++) {\n          w.add(defaultValue);\n        }\n        w.finish();\n      } finally {\n        datOut.close();\n        bytesUsed\n            .addAndGet(-(RamUsageEstimator.NUM_BYTES_LONG * docToValue.length));\n        docToValue = null;\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4034ca0f8f74fdf56e25be73822f2441fc1c1b46","date":1307111599,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsWriter#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsWriter#finish(int).mjava","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      try {\n        if (!started) {\n          minValue = maxValue = 0;\n        }\n        // if we exceed the range of positive longs we must switch to fixed ints\n        if ((maxValue - minValue) < (((long)1) << 63) && (maxValue - minValue) > 0) {\n          writePackedInts(docCount);\n        } else {\n          writeFixedInts(docCount);\n        }\n\n      } finally {\n        datOut.close();\n        bytesUsed\n            .addAndGet(-(RamUsageEstimator.NUM_BYTES_LONG * docToValue.length));\n        docToValue = null;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish(int docCount) throws IOException {\n      try {\n        if (!started) {\n          minValue = maxValue = 0;\n        }\n        // TODO -- long can't work right since it's signed\n        datOut.writeLong(minValue);\n        // write a default value to recognize docs without a value for that\n        // field\n        final long defaultValue = ++maxValue - minValue;\n        datOut.writeLong(defaultValue);\n        PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n            PackedInts.bitsRequired(maxValue - minValue));\n        final int firstDoc = defaultValues.nextSetBit(0);\n        lastDocId++;\n        if (firstDoc != -1) { \n          for (int i = 0; i < firstDoc; i++) {\n            w.add(defaultValue); // fill with defaults until first bit set\n          }\n\n          for (int i = firstDoc; i < lastDocId;) {\n            w.add(docToValue[i] - minValue);\n            final int nextValue = defaultValues.nextSetBit(++i);\n            for (; i < nextValue; i++) {\n              w.add(defaultValue); // fill all gaps\n            }\n          }\n        }\n        for (int i = lastDocId; i < docCount; i++) {\n          w.add(defaultValue);\n        }\n        w.finish();\n      } finally {\n        datOut.close();\n        bytesUsed\n            .addAndGet(-(RamUsageEstimator.NUM_BYTES_LONG * docToValue.length));\n        docToValue = null;\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"605b061fadf71aa6458c0005eaae83a98350c403","date":1307117658,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsWriter#finish(int).mjava","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      try {\n        if (!started) {\n          minValue = maxValue = 0;\n        }\n        // if we exceed the range of positive longs we must switch to fixed ints\n        if ((maxValue - minValue) < (((long)1) << 63) && (maxValue - minValue) > 0) {\n          writePackedInts(docCount);\n        } else {\n          writeFixedInts(docCount);\n        }\n\n      } finally {\n        datOut.close();\n        bytesUsed\n            .addAndGet(-(RamUsageEstimator.NUM_BYTES_LONG * docToValue.length));\n        docToValue = null;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish(int docCount) throws IOException {\n      try {\n        if (!started) {\n          minValue = maxValue = 0;\n        }\n        // if we exceed the range of positive longs we must switch to fixed ints\n        if ((maxValue - minValue) < (((long)1) << 63) && (maxValue - minValue) > 0) {\n          writePackedInts(docCount);\n        } else {\n          writeFixedInts(docCount);\n        }\n\n      } finally {\n        datOut.close();\n        bytesUsed\n            .addAndGet(-(RamUsageEstimator.NUM_BYTES_LONG * docToValue.length));\n        docToValue = null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"9235b9d4454a46c066cda47fed7ca0a34e614529":["85130289d2ed101fcc2d8798511c7c5b020ffab4"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"605b061fadf71aa6458c0005eaae83a98350c403":["4034ca0f8f74fdf56e25be73822f2441fc1c1b46"],"4034ca0f8f74fdf56e25be73822f2441fc1c1b46":["9235b9d4454a46c066cda47fed7ca0a34e614529"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"85130289d2ed101fcc2d8798511c7c5b020ffab4":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4"],"9235b9d4454a46c066cda47fed7ca0a34e614529":["4034ca0f8f74fdf56e25be73822f2441fc1c1b46"],"605b061fadf71aa6458c0005eaae83a98350c403":[],"4034ca0f8f74fdf56e25be73822f2441fc1c1b46":["605b061fadf71aa6458c0005eaae83a98350c403"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","01f60198ece724a6e96cd0b45f289cf42ff83d4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["85130289d2ed101fcc2d8798511c7c5b020ffab4"],"85130289d2ed101fcc2d8798511c7c5b020ffab4":["9235b9d4454a46c066cda47fed7ca0a34e614529"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["605b061fadf71aa6458c0005eaae83a98350c403","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}