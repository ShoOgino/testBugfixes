{"path":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testAdd().mjava","commits":[{"id":"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","date":1286023472,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testAdd().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#add(org.apache.lucene.util.BytesRef)}\n   * .\n   */\n  @Test\n  public void testAdd() {\n    BytesRef ref = new BytesRef();\n    for (int j = 0; j < 2 * RANDOM_MULTIPLIER; j++) {\n      Set<String> strings = new HashSet<String>();\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copy(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n\n        if (key >=0) {\n          assertTrue(strings.add(str));\n          assertEquals(i, key);\n          assertEquals(hash.size(), count + 1);\n        } else {\n          assertFalse(strings.add(str));\n          assertTrue((-key)-1 < count);\n          assertEquals(str, hash.get((-key)-1).utf8ToString());\n          assertEquals(count, hash.size());\n        }\n      }\n      \n      assertAllIn(strings, hash);\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb189bc11e1880ca8686216e1af74536edab3b1c","date":1287051106,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testAdd().mjava","sourceNew":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#add(org.apache.lucene.util.BytesRef)}\n   * .\n   */\n  @Test\n  public void testAdd() {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    for (int j = 0; j < 2 * RANDOM_MULTIPLIER; j++) {\n      Set<String> strings = new HashSet<String>();\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copy(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n\n        if (key >=0) {\n          assertTrue(strings.add(str));\n          assertEquals(i, key);\n          assertEquals(hash.size(), count + 1);\n        } else {\n          assertFalse(strings.add(str));\n          assertTrue((-key)-1 < count);\n          assertEquals(str, hash.get((-key)-1, scratch).utf8ToString());\n          assertEquals(count, hash.size());\n        }\n      }\n      \n      assertAllIn(strings, hash);\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#add(org.apache.lucene.util.BytesRef)}\n   * .\n   */\n  @Test\n  public void testAdd() {\n    BytesRef ref = new BytesRef();\n    for (int j = 0; j < 2 * RANDOM_MULTIPLIER; j++) {\n      Set<String> strings = new HashSet<String>();\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copy(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n\n        if (key >=0) {\n          assertTrue(strings.add(str));\n          assertEquals(i, key);\n          assertEquals(hash.size(), count + 1);\n        } else {\n          assertFalse(strings.add(str));\n          assertTrue((-key)-1 < count);\n          assertEquals(str, hash.get((-key)-1).utf8ToString());\n          assertEquals(count, hash.size());\n        }\n      }\n      \n      assertAllIn(strings, hash);\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testAdd().mjava","sourceNew":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#add(org.apache.lucene.util.BytesRef)}\n   * .\n   */\n  @Test\n  public void testAdd() {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    for (int j = 0; j < 2 * RANDOM_MULTIPLIER; j++) {\n      Set<String> strings = new HashSet<String>();\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copy(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n\n        if (key >=0) {\n          assertTrue(strings.add(str));\n          assertEquals(i, key);\n          assertEquals(hash.size(), count + 1);\n        } else {\n          assertFalse(strings.add(str));\n          assertTrue((-key)-1 < count);\n          assertEquals(str, hash.get((-key)-1, scratch).utf8ToString());\n          assertEquals(count, hash.size());\n        }\n      }\n      \n      assertAllIn(strings, hash);\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#add(org.apache.lucene.util.BytesRef)}\n   * .\n   */\n  @Test\n  public void testAdd() {\n    BytesRef ref = new BytesRef();\n    for (int j = 0; j < 2 * RANDOM_MULTIPLIER; j++) {\n      Set<String> strings = new HashSet<String>();\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copy(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n\n        if (key >=0) {\n          assertTrue(strings.add(str));\n          assertEquals(i, key);\n          assertEquals(hash.size(), count + 1);\n        } else {\n          assertFalse(strings.add(str));\n          assertTrue((-key)-1 < count);\n          assertEquals(str, hash.get((-key)-1).utf8ToString());\n          assertEquals(count, hash.size());\n        }\n      }\n      \n      assertAllIn(strings, hash);\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50bbf971453b84713105e556003cd394c29e25f6","date":1290348647,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testAdd().mjava","sourceNew":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#add(org.apache.lucene.util.BytesRef)}\n   * .\n   */\n  @Test\n  public void testAdd() {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    for (int j = 0; j < 2 * RANDOM_MULTIPLIER; j++) {\n      Set<String> strings = new HashSet<String>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copy(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n\n        if (key >=0) {\n          assertTrue(strings.add(str));\n          assertEquals(uniqueCount, key);\n          assertEquals(hash.size(), count + 1);\n          uniqueCount++;\n        } else {\n          assertFalse(strings.add(str));\n          assertTrue((-key)-1 < count);\n          assertEquals(str, hash.get((-key)-1, scratch).utf8ToString());\n          assertEquals(count, hash.size());\n        }\n      }\n      \n      assertAllIn(strings, hash);\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#add(org.apache.lucene.util.BytesRef)}\n   * .\n   */\n  @Test\n  public void testAdd() {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    for (int j = 0; j < 2 * RANDOM_MULTIPLIER; j++) {\n      Set<String> strings = new HashSet<String>();\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copy(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n\n        if (key >=0) {\n          assertTrue(strings.add(str));\n          assertEquals(i, key);\n          assertEquals(hash.size(), count + 1);\n        } else {\n          assertFalse(strings.add(str));\n          assertTrue((-key)-1 < count);\n          assertEquals(str, hash.get((-key)-1, scratch).utf8ToString());\n          assertEquals(count, hash.size());\n        }\n      }\n      \n      assertAllIn(strings, hash);\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testAdd().mjava","sourceNew":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#add(org.apache.lucene.util.BytesRef)}\n   * .\n   */\n  @Test\n  public void testAdd() {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    for (int j = 0; j < 2 * RANDOM_MULTIPLIER; j++) {\n      Set<String> strings = new HashSet<String>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copy(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n\n        if (key >=0) {\n          assertTrue(strings.add(str));\n          assertEquals(uniqueCount, key);\n          assertEquals(hash.size(), count + 1);\n          uniqueCount++;\n        } else {\n          assertFalse(strings.add(str));\n          assertTrue((-key)-1 < count);\n          assertEquals(str, hash.get((-key)-1, scratch).utf8ToString());\n          assertEquals(count, hash.size());\n        }\n      }\n      \n      assertAllIn(strings, hash);\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#add(org.apache.lucene.util.BytesRef)}\n   * .\n   */\n  @Test\n  public void testAdd() {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    for (int j = 0; j < 2 * RANDOM_MULTIPLIER; j++) {\n      Set<String> strings = new HashSet<String>();\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copy(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n\n        if (key >=0) {\n          assertTrue(strings.add(str));\n          assertEquals(i, key);\n          assertEquals(hash.size(), count + 1);\n        } else {\n          assertFalse(strings.add(str));\n          assertTrue((-key)-1 < count);\n          assertEquals(str, hash.get((-key)-1, scratch).utf8ToString());\n          assertEquals(count, hash.size());\n        }\n      }\n      \n      assertAllIn(strings, hash);\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testAdd().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#add(org.apache.lucene.util.BytesRef)}\n   * .\n   */\n  @Test\n  public void testAdd() {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    for (int j = 0; j < 2 * RANDOM_MULTIPLIER; j++) {\n      Set<String> strings = new HashSet<String>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copy(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n\n        if (key >=0) {\n          assertTrue(strings.add(str));\n          assertEquals(uniqueCount, key);\n          assertEquals(hash.size(), count + 1);\n          uniqueCount++;\n        } else {\n          assertFalse(strings.add(str));\n          assertTrue((-key)-1 < count);\n          assertEquals(str, hash.get((-key)-1, scratch).utf8ToString());\n          assertEquals(count, hash.size());\n        }\n      }\n      \n      assertAllIn(strings, hash);\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testAdd().mjava","sourceNew":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#add(org.apache.lucene.util.BytesRef)}\n   * .\n   */\n  @Test\n  public void testAdd() {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      Set<String> strings = new HashSet<String>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copy(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n\n        if (key >=0) {\n          assertTrue(strings.add(str));\n          assertEquals(uniqueCount, key);\n          assertEquals(hash.size(), count + 1);\n          uniqueCount++;\n        } else {\n          assertFalse(strings.add(str));\n          assertTrue((-key)-1 < count);\n          assertEquals(str, hash.get((-key)-1, scratch).utf8ToString());\n          assertEquals(count, hash.size());\n        }\n      }\n      \n      assertAllIn(strings, hash);\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#add(org.apache.lucene.util.BytesRef)}\n   * .\n   */\n  @Test\n  public void testAdd() {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    for (int j = 0; j < 2 * RANDOM_MULTIPLIER; j++) {\n      Set<String> strings = new HashSet<String>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copy(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n\n        if (key >=0) {\n          assertTrue(strings.add(str));\n          assertEquals(uniqueCount, key);\n          assertEquals(hash.size(), count + 1);\n          uniqueCount++;\n        } else {\n          assertFalse(strings.add(str));\n          assertTrue((-key)-1 < count);\n          assertEquals(str, hash.get((-key)-1, scratch).utf8ToString());\n          assertEquals(count, hash.size());\n        }\n      }\n      \n      assertAllIn(strings, hash);\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testAdd().mjava","sourceNew":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#add(org.apache.lucene.util.BytesRef)}\n   * .\n   */\n  @Test\n  public void testAdd() {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      Set<String> strings = new HashSet<String>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copy(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n\n        if (key >=0) {\n          assertTrue(strings.add(str));\n          assertEquals(uniqueCount, key);\n          assertEquals(hash.size(), count + 1);\n          uniqueCount++;\n        } else {\n          assertFalse(strings.add(str));\n          assertTrue((-key)-1 < count);\n          assertEquals(str, hash.get((-key)-1, scratch).utf8ToString());\n          assertEquals(count, hash.size());\n        }\n      }\n      \n      assertAllIn(strings, hash);\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#add(org.apache.lucene.util.BytesRef)}\n   * .\n   */\n  @Test\n  public void testAdd() {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    for (int j = 0; j < 2 * RANDOM_MULTIPLIER; j++) {\n      Set<String> strings = new HashSet<String>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copy(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n\n        if (key >=0) {\n          assertTrue(strings.add(str));\n          assertEquals(uniqueCount, key);\n          assertEquals(hash.size(), count + 1);\n          uniqueCount++;\n        } else {\n          assertFalse(strings.add(str));\n          assertTrue((-key)-1 < count);\n          assertEquals(str, hash.get((-key)-1, scratch).utf8ToString());\n          assertEquals(count, hash.size());\n        }\n      }\n      \n      assertAllIn(strings, hash);\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testAdd().mjava","sourceNew":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#add(org.apache.lucene.util.BytesRef)}\n   * .\n   */\n  @Test\n  public void testAdd() {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      Set<String> strings = new HashSet<String>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copy(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n\n        if (key >=0) {\n          assertTrue(strings.add(str));\n          assertEquals(uniqueCount, key);\n          assertEquals(hash.size(), count + 1);\n          uniqueCount++;\n        } else {\n          assertFalse(strings.add(str));\n          assertTrue((-key)-1 < count);\n          assertEquals(str, hash.get((-key)-1, scratch).utf8ToString());\n          assertEquals(count, hash.size());\n        }\n      }\n      \n      assertAllIn(strings, hash);\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#add(org.apache.lucene.util.BytesRef)}\n   * .\n   */\n  @Test\n  public void testAdd() {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    for (int j = 0; j < 2 * RANDOM_MULTIPLIER; j++) {\n      Set<String> strings = new HashSet<String>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copy(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n\n        if (key >=0) {\n          assertTrue(strings.add(str));\n          assertEquals(uniqueCount, key);\n          assertEquals(hash.size(), count + 1);\n          uniqueCount++;\n        } else {\n          assertFalse(strings.add(str));\n          assertTrue((-key)-1 < count);\n          assertEquals(str, hash.get((-key)-1, scratch).utf8ToString());\n          assertEquals(count, hash.size());\n        }\n      }\n      \n      assertAllIn(strings, hash);\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6e919043fa85ee891123768dd655a98edbbf63c","date":1322225413,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testAdd().mjava","sourceNew":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#add(org.apache.lucene.util.BytesRef)}\n   * .\n   */\n  @Test\n  public void testAdd() {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      Set<String> strings = new HashSet<String>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n\n        if (key >=0) {\n          assertTrue(strings.add(str));\n          assertEquals(uniqueCount, key);\n          assertEquals(hash.size(), count + 1);\n          uniqueCount++;\n        } else {\n          assertFalse(strings.add(str));\n          assertTrue((-key)-1 < count);\n          assertEquals(str, hash.get((-key)-1, scratch).utf8ToString());\n          assertEquals(count, hash.size());\n        }\n      }\n      \n      assertAllIn(strings, hash);\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#add(org.apache.lucene.util.BytesRef)}\n   * .\n   */\n  @Test\n  public void testAdd() {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      Set<String> strings = new HashSet<String>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copy(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n\n        if (key >=0) {\n          assertTrue(strings.add(str));\n          assertEquals(uniqueCount, key);\n          assertEquals(hash.size(), count + 1);\n          uniqueCount++;\n        } else {\n          assertFalse(strings.add(str));\n          assertTrue((-key)-1 < count);\n          assertEquals(str, hash.get((-key)-1, scratch).utf8ToString());\n          assertEquals(count, hash.size());\n        }\n      }\n      \n      assertAllIn(strings, hash);\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testAdd().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testAdd().mjava","sourceNew":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#add(org.apache.lucene.util.BytesRef)}\n   * .\n   */\n  @Test\n  public void testAdd() {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      Set<String> strings = new HashSet<String>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n\n        if (key >=0) {\n          assertTrue(strings.add(str));\n          assertEquals(uniqueCount, key);\n          assertEquals(hash.size(), count + 1);\n          uniqueCount++;\n        } else {\n          assertFalse(strings.add(str));\n          assertTrue((-key)-1 < count);\n          assertEquals(str, hash.get((-key)-1, scratch).utf8ToString());\n          assertEquals(count, hash.size());\n        }\n      }\n      \n      assertAllIn(strings, hash);\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#add(org.apache.lucene.util.BytesRef)}\n   * .\n   */\n  @Test\n  public void testAdd() {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      Set<String> strings = new HashSet<String>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n\n        if (key >=0) {\n          assertTrue(strings.add(str));\n          assertEquals(uniqueCount, key);\n          assertEquals(hash.size(), count + 1);\n          uniqueCount++;\n        } else {\n          assertFalse(strings.add(str));\n          assertTrue((-key)-1 < count);\n          assertEquals(str, hash.get((-key)-1, scratch).utf8ToString());\n          assertEquals(count, hash.size());\n        }\n      }\n      \n      assertAllIn(strings, hash);\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["50bbf971453b84713105e556003cd394c29e25f6","f83af14a2a8131b14d7aee6274c740334e0363d3"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["50bbf971453b84713105e556003cd394c29e25f6"],"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e6e919043fa85ee891123768dd655a98edbbf63c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","50bbf971453b84713105e556003cd394c29e25f6"],"50bbf971453b84713105e556003cd394c29e25f6":["fb189bc11e1880ca8686216e1af74536edab3b1c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["3bb13258feba31ab676502787ab2e1779f129b7a","f83af14a2a8131b14d7aee6274c740334e0363d3"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","fb189bc11e1880ca8686216e1af74536edab3b1c"],"e6e919043fa85ee891123768dd655a98edbbf63c":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"3bb13258feba31ab676502787ab2e1779f129b7a":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","50bbf971453b84713105e556003cd394c29e25f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fb189bc11e1880ca8686216e1af74536edab3b1c":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","e6e919043fa85ee891123768dd655a98edbbf63c"],"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","fb189bc11e1880ca8686216e1af74536edab3b1c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"50bbf971453b84713105e556003cd394c29e25f6":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","f83af14a2a8131b14d7aee6274c740334e0363d3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["3bb13258feba31ab676502787ab2e1779f129b7a"],"e6e919043fa85ee891123768dd655a98edbbf63c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3bb13258feba31ab676502787ab2e1779f129b7a":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"fb189bc11e1880ca8686216e1af74536edab3b1c":["50bbf971453b84713105e556003cd394c29e25f6","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}