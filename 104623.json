{"path":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      if (VERBOSE) System.out.println(\"Killing \" + leaderPort);\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 30; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(100);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 20) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was shutdown, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      if (VERBOSE) System.out.println(\"Killing \" + leaderPort);\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 30; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(100);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 20) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was shutdown, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      if (VERBOSE) System.out.println(\"Killing \" + leaderPort);\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 30; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(100);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 20) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was shutdown, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52aa8538d23f046de4a22d633043361c3e07fb16","date":1327549005,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","sourceNew":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      if (VERBOSE) System.out.println(\"Killing \" + leaderPort);\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 30; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 20) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was shutdown, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      if (VERBOSE) System.out.println(\"Killing \" + leaderPort);\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 30; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(100);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 20) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was shutdown, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afa7f746771c03b10753e537caa14fbaf64a8312","date":1327593250,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","sourceNew":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      if (VERBOSE) System.out.println(\"Killing \" + leaderPort);\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 60; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 20) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was shutdown, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      if (VERBOSE) System.out.println(\"Killing \" + leaderPort);\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 30; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 20) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was shutdown, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9026e7431453f783c536b9cdb2a68e25090055b6","date":1327615294,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","sourceNew":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      if (VERBOSE) System.out.println(\"Killing \" + leaderPort);\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 75; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 20) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was shutdown, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      if (VERBOSE) System.out.println(\"Killing \" + leaderPort);\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 60; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 20) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was shutdown, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba97d103fbcb7552957e84cae331a73215c20864","date":1327627479,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","sourceNew":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      if (VERBOSE) System.out.println(\"Killing \" + leaderPort);\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 20) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was shutdown, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      if (VERBOSE) System.out.println(\"Killing \" + leaderPort);\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 75; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 20) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was shutdown, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78a55f24d9b493c2a1cecf79f1d78279062b545b","date":1327688152,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","sourceNew":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      if (VERBOSE) System.out.println(\"Killing \" + leaderPort);\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 20) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was shutdown, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      if (VERBOSE) System.out.println(\"Killing \" + leaderPort);\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 30; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(100);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 20) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was shutdown, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","sourceNew":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      if (VERBOSE) System.out.println(\"Killing \" + leaderPort);\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 20) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was shutdown, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      if (VERBOSE) System.out.println(\"Killing \" + leaderPort);\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 30; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(100);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 20) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was shutdown, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52ae7051bd9161fb49863393ff0ff8e94fbb3f77","date":1335279935,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","sourceNew":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      if (VERBOSE) System.out.println(\"Killing \" + leaderPort);\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 20) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        zkClient.printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was shutdown, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      if (VERBOSE) System.out.println(\"Killing \" + leaderPort);\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 20) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was shutdown, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab8a40832af668890c01b68de2eb457364ddd2a","date":1343075293,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","sourceNew":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      if (VERBOSE) System.out.println(\"Killing \" + leaderPort);\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        zkClient.printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was shutdown, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      if (VERBOSE) System.out.println(\"Killing \" + leaderPort);\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 20) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        zkClient.printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was shutdown, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57635ff388fa1bee703f3b892a86a3e48975576a","date":1343077051,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","sourceNew":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      if (VERBOSE) System.out.println(\"Killing \" + leaderPort);\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        zkClient.printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was shutdown, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      if (VERBOSE) System.out.println(\"Killing \" + leaderPort);\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 20) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        zkClient.printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was shutdown, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","sourceNew":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      if (VERBOSE) System.out.println(\"Killing \" + leaderPort);\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        zkClient.printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was shutdown, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      if (VERBOSE) System.out.println(\"Killing \" + leaderPort);\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 20) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        zkClient.printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was shutdown, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","sourceNew":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      if (VERBOSE) System.out.println(\"Killing \" + leaderPort);\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        zkClient.printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was close, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      if (VERBOSE) System.out.println(\"Killing \" + leaderPort);\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        zkClient.printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was shutdown, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82fbc9a4af34a68002cd5cf8bbac6b604aeef413","date":1474634253,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","sourceNew":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        zkClient.printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was close, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      if (VERBOSE) System.out.println(\"Killing \" + leaderPort);\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        zkClient.printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was close, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","sourceNew":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        zkClient.printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was close, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      if (VERBOSE) System.out.println(\"Killing \" + leaderPort);\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        zkClient.printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was close, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","sourceNew":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        zkClient.printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was close, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      if (VERBOSE) System.out.println(\"Killing \" + leaderPort);\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        zkClient.printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was close, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","sourceNew":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n    String collection = \"collection1\";\n    createCollection(collection);\n\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader(collection);\n      JettySolrRunner jetty = getRunner(leader);\n      assertNotNull(jetty);\n      assertTrue(\"shard1\".equals(jetty.getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n      jetty.stop();\n\n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader(collection);\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n\n      leader = getLeader(collection);\n      int retry = 0;\n      while (jetty == getRunner(leader)) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n\n      if (jetty == getRunner(leader)) {\n        cluster.getZkClient().printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + jetty + \" was close, but it's still showing as the leader\");\n      }\n\n      assertTrue(\"shard1\".equals(getRunner(leader).getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n    }\n\n    cluster.getJettySolrRunners().parallelStream().forEach(jetty -> {\n      if (jetty.isStopped())\n        try {\n          jetty.start();\n        } catch (Exception e) {\n          e.printStackTrace();\n        }\n    });\n    waitForState(\"Expected to see nodes come back \" + collection, collection,\n        (n, c) -> {\n          return n.size() == 6;\n        });\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n\n    // testLeaderElectionAfterClientTimeout\n    collection = \"collection2\";\n    createCollection(collection);\n\n    // TODO: work out the best timing here...\n    System.setProperty(\"zkClientTimeout\", Integer.toString(ZkTestServer.TICK_TIME * 2 + 100));\n    // timeout the leader\n    String leader = getLeader(collection);\n    JettySolrRunner jetty = getRunner(leader);\n    ZkController zkController = jetty.getCoreContainer().getZkController();\n\n    zkController.getZkClient().getSolrZooKeeper().closeCnxn();\n    cluster.getZkServer().expire(zkController.getZkClient().getSolrZooKeeper().getSessionId());\n\n    for (int i = 0; i < 60; i++) { // wait till leader is changed\n      if (jetty != getRunner(getLeader(collection))) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    // make sure we have waited long enough for the first leader to have come back\n    Thread.sleep(ZkTestServer.TICK_TIME * 2 + 100);\n\n    // kill everyone but the first leader that should have reconnected by now\n    for (JettySolrRunner jetty2 : cluster.getJettySolrRunners()) {\n      if (jetty != jetty2) {\n        jetty2.stop();\n      }\n    }\n\n    for (int i = 0; i < 320; i++) { // wait till leader is changed\n      try {\n        if (jetty == getRunner(getLeader(collection))) {\n          break;\n        }\n        Thread.sleep(100);\n      } catch (Exception e) {\n        continue;\n      }\n    }\n\n    assertEquals(jetty, getRunner(getLeader(collection)));\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        zkClient.printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was close, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5","date":1498283633,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","sourceNew":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n    String collection = \"collection1\";\n    createCollection(collection);\n\n    List<JettySolrRunner> stoppedRunners = new ArrayList<>();\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader(collection);\n      JettySolrRunner jetty = getRunner(leader);\n      assertNotNull(jetty);\n      assertTrue(\"shard1\".equals(jetty.getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n      jetty.stop();\n      stoppedRunners.add(jetty);\n\n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader(collection);\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n\n      leader = getLeader(collection);\n      int retry = 0;\n      while (jetty == getRunner(leader)) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n\n      if (jetty == getRunner(leader)) {\n        cluster.getZkClient().printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + jetty + \" was close, but it's still showing as the leader\");\n      }\n\n      assertTrue(\"shard1\".equals(getRunner(leader).getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n    }\n\n    for (JettySolrRunner runner : stoppedRunners) {\n      runner.start();\n    }\n    waitForState(\"Expected to see nodes come back \" + collection, collection,\n        (n, c) -> {\n          return n.size() == 6;\n        });\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n\n    // testLeaderElectionAfterClientTimeout\n    collection = \"collection2\";\n    createCollection(collection);\n\n    // TODO: work out the best timing here...\n    System.setProperty(\"zkClientTimeout\", Integer.toString(ZkTestServer.TICK_TIME * 2 + 100));\n    // timeout the leader\n    String leader = getLeader(collection);\n    JettySolrRunner jetty = getRunner(leader);\n    ZkController zkController = jetty.getCoreContainer().getZkController();\n\n    zkController.getZkClient().getSolrZooKeeper().closeCnxn();\n    cluster.getZkServer().expire(zkController.getZkClient().getSolrZooKeeper().getSessionId());\n\n    for (int i = 0; i < 60; i++) { // wait till leader is changed\n      if (jetty != getRunner(getLeader(collection))) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    // make sure we have waited long enough for the first leader to have come back\n    Thread.sleep(ZkTestServer.TICK_TIME * 2 + 100);\n\n    // kill everyone but the first leader that should have reconnected by now\n    for (JettySolrRunner jetty2 : cluster.getJettySolrRunners()) {\n      if (jetty != jetty2) {\n        jetty2.stop();\n      }\n    }\n\n    for (int i = 0; i < 320; i++) { // wait till leader is changed\n      try {\n        if (jetty == getRunner(getLeader(collection))) {\n          break;\n        }\n        Thread.sleep(100);\n      } catch (Exception e) {\n        continue;\n      }\n    }\n\n    assertEquals(jetty, getRunner(getLeader(collection)));\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n    String collection = \"collection1\";\n    createCollection(collection);\n\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader(collection);\n      JettySolrRunner jetty = getRunner(leader);\n      assertNotNull(jetty);\n      assertTrue(\"shard1\".equals(jetty.getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n      jetty.stop();\n\n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader(collection);\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n\n      leader = getLeader(collection);\n      int retry = 0;\n      while (jetty == getRunner(leader)) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n\n      if (jetty == getRunner(leader)) {\n        cluster.getZkClient().printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + jetty + \" was close, but it's still showing as the leader\");\n      }\n\n      assertTrue(\"shard1\".equals(getRunner(leader).getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n    }\n\n    cluster.getJettySolrRunners().parallelStream().forEach(jetty -> {\n      if (jetty.isStopped())\n        try {\n          jetty.start();\n        } catch (Exception e) {\n          e.printStackTrace();\n        }\n    });\n    waitForState(\"Expected to see nodes come back \" + collection, collection,\n        (n, c) -> {\n          return n.size() == 6;\n        });\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n\n    // testLeaderElectionAfterClientTimeout\n    collection = \"collection2\";\n    createCollection(collection);\n\n    // TODO: work out the best timing here...\n    System.setProperty(\"zkClientTimeout\", Integer.toString(ZkTestServer.TICK_TIME * 2 + 100));\n    // timeout the leader\n    String leader = getLeader(collection);\n    JettySolrRunner jetty = getRunner(leader);\n    ZkController zkController = jetty.getCoreContainer().getZkController();\n\n    zkController.getZkClient().getSolrZooKeeper().closeCnxn();\n    cluster.getZkServer().expire(zkController.getZkClient().getSolrZooKeeper().getSessionId());\n\n    for (int i = 0; i < 60; i++) { // wait till leader is changed\n      if (jetty != getRunner(getLeader(collection))) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    // make sure we have waited long enough for the first leader to have come back\n    Thread.sleep(ZkTestServer.TICK_TIME * 2 + 100);\n\n    // kill everyone but the first leader that should have reconnected by now\n    for (JettySolrRunner jetty2 : cluster.getJettySolrRunners()) {\n      if (jetty != jetty2) {\n        jetty2.stop();\n      }\n    }\n\n    for (int i = 0; i < 320; i++) { // wait till leader is changed\n      try {\n        if (jetty == getRunner(getLeader(collection))) {\n          break;\n        }\n        Thread.sleep(100);\n      } catch (Exception e) {\n        continue;\n      }\n    }\n\n    assertEquals(jetty, getRunner(getLeader(collection)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","sourceNew":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n    String collection = \"collection1\";\n    createCollection(collection);\n\n    List<JettySolrRunner> stoppedRunners = new ArrayList<>();\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader(collection);\n      JettySolrRunner jetty = getRunner(leader);\n      assertNotNull(jetty);\n      assertTrue(\"shard1\".equals(jetty.getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n      jetty.stop();\n      stoppedRunners.add(jetty);\n\n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader(collection);\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n\n      leader = getLeader(collection);\n      int retry = 0;\n      while (jetty == getRunner(leader)) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n\n      if (jetty == getRunner(leader)) {\n        cluster.getZkClient().printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + jetty + \" was close, but it's still showing as the leader\");\n      }\n\n      assertTrue(\"shard1\".equals(getRunner(leader).getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n    }\n\n    for (JettySolrRunner runner : stoppedRunners) {\n      runner.start();\n    }\n    waitForState(\"Expected to see nodes come back \" + collection, collection,\n        (n, c) -> {\n          return n.size() == 6;\n        });\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n\n    // testLeaderElectionAfterClientTimeout\n    collection = \"collection2\";\n    createCollection(collection);\n\n    // TODO: work out the best timing here...\n    System.setProperty(\"zkClientTimeout\", Integer.toString(ZkTestServer.TICK_TIME * 2 + 100));\n    // timeout the leader\n    String leader = getLeader(collection);\n    JettySolrRunner jetty = getRunner(leader);\n    ZkController zkController = jetty.getCoreContainer().getZkController();\n\n    zkController.getZkClient().getSolrZooKeeper().closeCnxn();\n    cluster.getZkServer().expire(zkController.getZkClient().getSolrZooKeeper().getSessionId());\n\n    for (int i = 0; i < 60; i++) { // wait till leader is changed\n      if (jetty != getRunner(getLeader(collection))) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    // make sure we have waited long enough for the first leader to have come back\n    Thread.sleep(ZkTestServer.TICK_TIME * 2 + 100);\n\n    // kill everyone but the first leader that should have reconnected by now\n    for (JettySolrRunner jetty2 : cluster.getJettySolrRunners()) {\n      if (jetty != jetty2) {\n        jetty2.stop();\n      }\n    }\n\n    for (int i = 0; i < 320; i++) { // wait till leader is changed\n      try {\n        if (jetty == getRunner(getLeader(collection))) {\n          break;\n        }\n        Thread.sleep(100);\n      } catch (Exception e) {\n        continue;\n      }\n    }\n\n    assertEquals(jetty, getRunner(getLeader(collection)));\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        zkClient.printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was close, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","sourceNew":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n    String collection = \"collection1\";\n    createCollection(collection);\n\n    List<JettySolrRunner> stoppedRunners = new ArrayList<>();\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader(collection);\n      JettySolrRunner jetty = getRunner(leader);\n      assertNotNull(jetty);\n      assertTrue(\"shard1\".equals(jetty.getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n      jetty.stop();\n      stoppedRunners.add(jetty);\n\n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader(collection);\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n\n      leader = getLeader(collection);\n      int retry = 0;\n      while (jetty == getRunner(leader)) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n\n      if (jetty == getRunner(leader)) {\n        cluster.getZkClient().printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + jetty + \" was close, but it's still showing as the leader\");\n      }\n\n      assertTrue(\"shard1\".equals(getRunner(leader).getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n    }\n\n    for (JettySolrRunner runner : stoppedRunners) {\n      runner.start();\n    }\n    waitForState(\"Expected to see nodes come back \" + collection, collection,\n        (n, c) -> {\n          return n.size() == 6;\n        });\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n\n    // testLeaderElectionAfterClientTimeout\n    collection = \"collection2\";\n    createCollection(collection);\n\n    // TODO: work out the best timing here...\n    System.setProperty(\"zkClientTimeout\", Integer.toString(ZkTestServer.TICK_TIME * 2 + 100));\n    // timeout the leader\n    String leader = getLeader(collection);\n    JettySolrRunner jetty = getRunner(leader);\n    ZkController zkController = jetty.getCoreContainer().getZkController();\n\n    zkController.getZkClient().getSolrZooKeeper().closeCnxn();\n    cluster.getZkServer().expire(zkController.getZkClient().getSolrZooKeeper().getSessionId());\n\n    for (int i = 0; i < 60; i++) { // wait till leader is changed\n      if (jetty != getRunner(getLeader(collection))) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    // make sure we have waited long enough for the first leader to have come back\n    Thread.sleep(ZkTestServer.TICK_TIME * 2 + 100);\n\n    // kill everyone but the first leader that should have reconnected by now\n    for (JettySolrRunner jetty2 : cluster.getJettySolrRunners()) {\n      if (jetty != jetty2) {\n        jetty2.stop();\n      }\n    }\n\n    for (int i = 0; i < 320; i++) { // wait till leader is changed\n      try {\n        if (jetty == getRunner(getLeader(collection))) {\n          break;\n        }\n        Thread.sleep(100);\n      } catch (Exception e) {\n        continue;\n      }\n    }\n\n    assertEquals(jetty, getRunner(getLeader(collection)));\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n\n    //printLayout(zkServer.getZkAddress());\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader();\n      \n      Set<Integer> shard1Ports = shardPorts.get(\"shard1\");\n      \n      int leaderPort = getLeaderPort(leader);\n      assertTrue(shard1Ports.toString(), shard1Ports.contains(leaderPort));\n      \n      shard1Ports.remove(leaderPort);\n      \n      // kill the leader\n      containerMap.get(leaderPort).shutdown();\n      \n      //printLayout(zkServer.getZkAddress());\n      \n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader();\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n      \n      leader = getLeader();\n      int newLeaderPort = getLeaderPort(leader);\n      int retry = 0;\n      while (leaderPort == newLeaderPort) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n      \n      if (leaderPort == newLeaderPort) {\n        zkClient.printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + leaderPort + \" was close, but it's still showing as the leader\");\n      }\n      \n      assertTrue(\"Could not find leader \" + newLeaderPort + \" in \" + shard1Ports, shard1Ports.contains(newLeaderPort));\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bab9eeea60eefbea2957be27b8d1923095df771","date":1525498218,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  public void testSimpleSliceLeaderElection() throws Exception {\n    String collection = \"collection1\";\n    createCollection(collection);\n\n    List<JettySolrRunner> stoppedRunners = new ArrayList<>();\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader(collection);\n      JettySolrRunner jetty = getRunner(leader);\n      assertNotNull(jetty);\n      assertTrue(\"shard1\".equals(jetty.getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n      jetty.stop();\n      stoppedRunners.add(jetty);\n\n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader(collection);\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n\n      leader = getLeader(collection);\n      int retry = 0;\n      while (jetty == getRunner(leader)) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n\n      if (jetty == getRunner(leader)) {\n        cluster.getZkClient().printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + jetty + \" was close, but it's still showing as the leader\");\n      }\n\n      assertTrue(\"shard1\".equals(getRunner(leader).getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n    }\n\n    for (JettySolrRunner runner : stoppedRunners) {\n      runner.start();\n    }\n    waitForState(\"Expected to see nodes come back \" + collection, collection,\n        (n, c) -> {\n          return n.size() == 6;\n        });\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n\n    // testLeaderElectionAfterClientTimeout\n    collection = \"collection2\";\n    createCollection(collection);\n\n    // TODO: work out the best timing here...\n    System.setProperty(\"zkClientTimeout\", Integer.toString(ZkTestServer.TICK_TIME * 2 + 100));\n    // timeout the leader\n    String leader = getLeader(collection);\n    JettySolrRunner jetty = getRunner(leader);\n    ZkController zkController = jetty.getCoreContainer().getZkController();\n\n    zkController.getZkClient().getSolrZooKeeper().closeCnxn();\n    cluster.getZkServer().expire(zkController.getZkClient().getSolrZooKeeper().getSessionId());\n\n    for (int i = 0; i < 60; i++) { // wait till leader is changed\n      if (jetty != getRunner(getLeader(collection))) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    // make sure we have waited long enough for the first leader to have come back\n    Thread.sleep(ZkTestServer.TICK_TIME * 2 + 100);\n\n    // kill everyone but the first leader that should have reconnected by now\n    for (JettySolrRunner jetty2 : cluster.getJettySolrRunners()) {\n      if (jetty != jetty2) {\n        jetty2.stop();\n      }\n    }\n\n    for (int i = 0; i < 320; i++) { // wait till leader is changed\n      try {\n        if (jetty == getRunner(getLeader(collection))) {\n          break;\n        }\n        Thread.sleep(100);\n      } catch (Exception e) {\n        continue;\n      }\n    }\n\n    assertEquals(jetty, getRunner(getLeader(collection)));\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleSliceLeaderElection() throws Exception {\n    String collection = \"collection1\";\n    createCollection(collection);\n\n    List<JettySolrRunner> stoppedRunners = new ArrayList<>();\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader(collection);\n      JettySolrRunner jetty = getRunner(leader);\n      assertNotNull(jetty);\n      assertTrue(\"shard1\".equals(jetty.getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n      jetty.stop();\n      stoppedRunners.add(jetty);\n\n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader(collection);\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n\n      leader = getLeader(collection);\n      int retry = 0;\n      while (jetty == getRunner(leader)) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n\n      if (jetty == getRunner(leader)) {\n        cluster.getZkClient().printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + jetty + \" was close, but it's still showing as the leader\");\n      }\n\n      assertTrue(\"shard1\".equals(getRunner(leader).getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n    }\n\n    for (JettySolrRunner runner : stoppedRunners) {\n      runner.start();\n    }\n    waitForState(\"Expected to see nodes come back \" + collection, collection,\n        (n, c) -> {\n          return n.size() == 6;\n        });\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n\n    // testLeaderElectionAfterClientTimeout\n    collection = \"collection2\";\n    createCollection(collection);\n\n    // TODO: work out the best timing here...\n    System.setProperty(\"zkClientTimeout\", Integer.toString(ZkTestServer.TICK_TIME * 2 + 100));\n    // timeout the leader\n    String leader = getLeader(collection);\n    JettySolrRunner jetty = getRunner(leader);\n    ZkController zkController = jetty.getCoreContainer().getZkController();\n\n    zkController.getZkClient().getSolrZooKeeper().closeCnxn();\n    cluster.getZkServer().expire(zkController.getZkClient().getSolrZooKeeper().getSessionId());\n\n    for (int i = 0; i < 60; i++) { // wait till leader is changed\n      if (jetty != getRunner(getLeader(collection))) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    // make sure we have waited long enough for the first leader to have come back\n    Thread.sleep(ZkTestServer.TICK_TIME * 2 + 100);\n\n    // kill everyone but the first leader that should have reconnected by now\n    for (JettySolrRunner jetty2 : cluster.getJettySolrRunners()) {\n      if (jetty != jetty2) {\n        jetty2.stop();\n      }\n    }\n\n    for (int i = 0; i < 320; i++) { // wait till leader is changed\n      try {\n        if (jetty == getRunner(getLeader(collection))) {\n          break;\n        }\n        Thread.sleep(100);\n      } catch (Exception e) {\n        continue;\n      }\n    }\n\n    assertEquals(jetty, getRunner(getLeader(collection)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1c374690db69470f6aa4bffc43dcacf1f4e3e49","date":1529007399,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  public void testSimpleSliceLeaderElection() throws Exception {\n    String collection = \"collection1\";\n    createCollection(collection);\n\n    List<JettySolrRunner> stoppedRunners = new ArrayList<>();\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader(collection);\n      JettySolrRunner jetty = getRunner(leader);\n      assertNotNull(jetty);\n      assertTrue(\"shard1\".equals(jetty.getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n      jetty.stop();\n      stoppedRunners.add(jetty);\n\n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader(collection);\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n\n      leader = getLeader(collection);\n      int retry = 0;\n      while (jetty == getRunner(leader)) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n\n      if (jetty == getRunner(leader)) {\n        cluster.getZkClient().printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + jetty + \" was close, but it's still showing as the leader\");\n      }\n\n      assertTrue(\"shard1\".equals(getRunner(leader).getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n    }\n\n    for (JettySolrRunner runner : stoppedRunners) {\n      runner.start();\n    }\n    waitForState(\"Expected to see nodes come back \" + collection, collection,\n        (n, c) -> {\n          return n.size() == 6;\n        });\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n\n    // testLeaderElectionAfterClientTimeout\n    collection = \"collection2\";\n    createCollection(collection);\n\n    // TODO: work out the best timing here...\n    System.setProperty(\"zkClientTimeout\", Integer.toString(ZkTestServer.TICK_TIME * 2 + 100));\n    // timeout the leader\n    String leader = getLeader(collection);\n    JettySolrRunner jetty = getRunner(leader);\n    ZkController zkController = jetty.getCoreContainer().getZkController();\n\n    zkController.getZkClient().getSolrZooKeeper().closeCnxn();\n    cluster.getZkServer().expire(zkController.getZkClient().getSolrZooKeeper().getSessionId());\n\n    for (int i = 0; i < 60; i++) { // wait till leader is changed\n      if (jetty != getRunner(getLeader(collection))) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    // make sure we have waited long enough for the first leader to have come back\n    Thread.sleep(ZkTestServer.TICK_TIME * 2 + 100);\n\n    // kill everyone but the first leader that should have reconnected by now\n    for (JettySolrRunner jetty2 : cluster.getJettySolrRunners()) {\n      if (jetty != jetty2) {\n        jetty2.stop();\n      }\n    }\n\n    for (int i = 0; i < 320; i++) { // wait till leader is changed\n      try {\n        if (jetty == getRunner(getLeader(collection))) {\n          break;\n        }\n        Thread.sleep(100);\n      } catch (Exception e) {\n        continue;\n      }\n    }\n\n    assertEquals(jetty, getRunner(getLeader(collection)));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  public void testSimpleSliceLeaderElection() throws Exception {\n    String collection = \"collection1\";\n    createCollection(collection);\n\n    List<JettySolrRunner> stoppedRunners = new ArrayList<>();\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader(collection);\n      JettySolrRunner jetty = getRunner(leader);\n      assertNotNull(jetty);\n      assertTrue(\"shard1\".equals(jetty.getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n      jetty.stop();\n      stoppedRunners.add(jetty);\n\n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader(collection);\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n\n      leader = getLeader(collection);\n      int retry = 0;\n      while (jetty == getRunner(leader)) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n\n      if (jetty == getRunner(leader)) {\n        cluster.getZkClient().printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + jetty + \" was close, but it's still showing as the leader\");\n      }\n\n      assertTrue(\"shard1\".equals(getRunner(leader).getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n    }\n\n    for (JettySolrRunner runner : stoppedRunners) {\n      runner.start();\n    }\n    waitForState(\"Expected to see nodes come back \" + collection, collection,\n        (n, c) -> {\n          return n.size() == 6;\n        });\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n\n    // testLeaderElectionAfterClientTimeout\n    collection = \"collection2\";\n    createCollection(collection);\n\n    // TODO: work out the best timing here...\n    System.setProperty(\"zkClientTimeout\", Integer.toString(ZkTestServer.TICK_TIME * 2 + 100));\n    // timeout the leader\n    String leader = getLeader(collection);\n    JettySolrRunner jetty = getRunner(leader);\n    ZkController zkController = jetty.getCoreContainer().getZkController();\n\n    zkController.getZkClient().getSolrZooKeeper().closeCnxn();\n    cluster.getZkServer().expire(zkController.getZkClient().getSolrZooKeeper().getSessionId());\n\n    for (int i = 0; i < 60; i++) { // wait till leader is changed\n      if (jetty != getRunner(getLeader(collection))) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    // make sure we have waited long enough for the first leader to have come back\n    Thread.sleep(ZkTestServer.TICK_TIME * 2 + 100);\n\n    // kill everyone but the first leader that should have reconnected by now\n    for (JettySolrRunner jetty2 : cluster.getJettySolrRunners()) {\n      if (jetty != jetty2) {\n        jetty2.stop();\n      }\n    }\n\n    for (int i = 0; i < 320; i++) { // wait till leader is changed\n      try {\n        if (jetty == getRunner(getLeader(collection))) {\n          break;\n        }\n        Thread.sleep(100);\n      } catch (Exception e) {\n        continue;\n      }\n    }\n\n    assertEquals(jetty, getRunner(getLeader(collection)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  public void testSimpleSliceLeaderElection() throws Exception {\n    String collection = \"collection1\";\n    createCollection(collection);\n\n    List<JettySolrRunner> stoppedRunners = new ArrayList<>();\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader(collection);\n      JettySolrRunner jetty = getRunner(leader);\n      assertNotNull(jetty);\n      assertTrue(\"shard1\".equals(jetty.getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n      jetty.stop();\n      stoppedRunners.add(jetty);\n\n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader(collection);\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n\n      leader = getLeader(collection);\n      int retry = 0;\n      while (jetty == getRunner(leader)) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n\n      if (jetty == getRunner(leader)) {\n        cluster.getZkClient().printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + jetty + \" was close, but it's still showing as the leader\");\n      }\n\n      assertTrue(\"shard1\".equals(getRunner(leader).getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n    }\n\n    for (JettySolrRunner runner : stoppedRunners) {\n      runner.start();\n    }\n    waitForState(\"Expected to see nodes come back \" + collection, collection,\n        (n, c) -> {\n          return n.size() == 6;\n        });\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n\n    // testLeaderElectionAfterClientTimeout\n    collection = \"collection2\";\n    createCollection(collection);\n\n    // TODO: work out the best timing here...\n    System.setProperty(\"zkClientTimeout\", Integer.toString(ZkTestServer.TICK_TIME * 2 + 100));\n    // timeout the leader\n    String leader = getLeader(collection);\n    JettySolrRunner jetty = getRunner(leader);\n    ZkController zkController = jetty.getCoreContainer().getZkController();\n\n    zkController.getZkClient().getSolrZooKeeper().closeCnxn();\n    cluster.getZkServer().expire(zkController.getZkClient().getSolrZooKeeper().getSessionId());\n\n    for (int i = 0; i < 60; i++) { // wait till leader is changed\n      if (jetty != getRunner(getLeader(collection))) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    // make sure we have waited long enough for the first leader to have come back\n    Thread.sleep(ZkTestServer.TICK_TIME * 2 + 100);\n\n    // kill everyone but the first leader that should have reconnected by now\n    for (JettySolrRunner jetty2 : cluster.getJettySolrRunners()) {\n      if (jetty != jetty2) {\n        jetty2.stop();\n      }\n    }\n\n    for (int i = 0; i < 320; i++) { // wait till leader is changed\n      try {\n        if (jetty == getRunner(getLeader(collection))) {\n          break;\n        }\n        Thread.sleep(100);\n      } catch (Exception e) {\n        continue;\n      }\n    }\n\n    assertEquals(jetty, getRunner(getLeader(collection)));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  public void testSimpleSliceLeaderElection() throws Exception {\n    String collection = \"collection1\";\n    createCollection(collection);\n\n    List<JettySolrRunner> stoppedRunners = new ArrayList<>();\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader(collection);\n      JettySolrRunner jetty = getRunner(leader);\n      assertNotNull(jetty);\n      assertTrue(\"shard1\".equals(jetty.getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n      jetty.stop();\n      stoppedRunners.add(jetty);\n\n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader(collection);\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n\n      leader = getLeader(collection);\n      int retry = 0;\n      while (jetty == getRunner(leader)) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n\n      if (jetty == getRunner(leader)) {\n        cluster.getZkClient().printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + jetty + \" was close, but it's still showing as the leader\");\n      }\n\n      assertTrue(\"shard1\".equals(getRunner(leader).getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n    }\n\n    for (JettySolrRunner runner : stoppedRunners) {\n      runner.start();\n    }\n    waitForState(\"Expected to see nodes come back \" + collection, collection,\n        (n, c) -> {\n          return n.size() == 6;\n        });\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n\n    // testLeaderElectionAfterClientTimeout\n    collection = \"collection2\";\n    createCollection(collection);\n\n    // TODO: work out the best timing here...\n    System.setProperty(\"zkClientTimeout\", Integer.toString(ZkTestServer.TICK_TIME * 2 + 100));\n    // timeout the leader\n    String leader = getLeader(collection);\n    JettySolrRunner jetty = getRunner(leader);\n    ZkController zkController = jetty.getCoreContainer().getZkController();\n\n    zkController.getZkClient().getSolrZooKeeper().closeCnxn();\n    cluster.getZkServer().expire(zkController.getZkClient().getSolrZooKeeper().getSessionId());\n\n    for (int i = 0; i < 60; i++) { // wait till leader is changed\n      if (jetty != getRunner(getLeader(collection))) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    // make sure we have waited long enough for the first leader to have come back\n    Thread.sleep(ZkTestServer.TICK_TIME * 2 + 100);\n\n    // kill everyone but the first leader that should have reconnected by now\n    for (JettySolrRunner jetty2 : cluster.getJettySolrRunners()) {\n      if (jetty != jetty2) {\n        jetty2.stop();\n      }\n    }\n\n    for (int i = 0; i < 320; i++) { // wait till leader is changed\n      try {\n        if (jetty == getRunner(getLeader(collection))) {\n          break;\n        }\n        Thread.sleep(100);\n      } catch (Exception e) {\n        continue;\n      }\n    }\n\n    assertEquals(jetty, getRunner(getLeader(collection)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  public void testSimpleSliceLeaderElection() throws Exception {\n    String collection = \"collection1\";\n    createCollection(collection);\n\n    List<JettySolrRunner> stoppedRunners = new ArrayList<>();\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader(collection);\n      JettySolrRunner jetty = getRunner(leader);\n      assertNotNull(jetty);\n      assertTrue(\"shard1\".equals(jetty.getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n      jetty.stop();\n      stoppedRunners.add(jetty);\n\n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader(collection);\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n\n      leader = getLeader(collection);\n      int retry = 0;\n      while (jetty == getRunner(leader)) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n\n      if (jetty == getRunner(leader)) {\n        cluster.getZkClient().printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + jetty + \" was close, but it's still showing as the leader\");\n      }\n\n      assertTrue(\"shard1\".equals(getRunner(leader).getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n    }\n\n    for (JettySolrRunner runner : stoppedRunners) {\n      runner.start();\n    }\n    waitForState(\"Expected to see nodes come back \" + collection, collection,\n        (n, c) -> {\n          return n.size() == 6;\n        });\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n\n    // testLeaderElectionAfterClientTimeout\n    collection = \"collection2\";\n    createCollection(collection);\n\n    // TODO: work out the best timing here...\n    System.setProperty(\"zkClientTimeout\", Integer.toString(ZkTestServer.TICK_TIME * 2 + 100));\n    // timeout the leader\n    String leader = getLeader(collection);\n    JettySolrRunner jetty = getRunner(leader);\n    ZkController zkController = jetty.getCoreContainer().getZkController();\n\n    zkController.getZkClient().getSolrZooKeeper().closeCnxn();\n    cluster.getZkServer().expire(zkController.getZkClient().getSolrZooKeeper().getSessionId());\n\n    for (int i = 0; i < 60; i++) { // wait till leader is changed\n      if (jetty != getRunner(getLeader(collection))) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    // make sure we have waited long enough for the first leader to have come back\n    Thread.sleep(ZkTestServer.TICK_TIME * 2 + 100);\n\n    // kill everyone but the first leader that should have reconnected by now\n    for (JettySolrRunner jetty2 : cluster.getJettySolrRunners()) {\n      if (jetty != jetty2) {\n        jetty2.stop();\n      }\n    }\n\n    for (int i = 0; i < 320; i++) { // wait till leader is changed\n      try {\n        if (jetty == getRunner(getLeader(collection))) {\n          break;\n        }\n        Thread.sleep(100);\n      } catch (Exception e) {\n        continue;\n      }\n    }\n\n    assertEquals(jetty, getRunner(getLeader(collection)));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  public void testSimpleSliceLeaderElection() throws Exception {\n    String collection = \"collection1\";\n    createCollection(collection);\n\n    List<JettySolrRunner> stoppedRunners = new ArrayList<>();\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader(collection);\n      JettySolrRunner jetty = getRunner(leader);\n      assertNotNull(jetty);\n      assertTrue(\"shard1\".equals(jetty.getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n      jetty.stop();\n      stoppedRunners.add(jetty);\n\n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader(collection);\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n\n      leader = getLeader(collection);\n      int retry = 0;\n      while (jetty == getRunner(leader)) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n\n      if (jetty == getRunner(leader)) {\n        cluster.getZkClient().printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + jetty + \" was close, but it's still showing as the leader\");\n      }\n\n      assertTrue(\"shard1\".equals(getRunner(leader).getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n    }\n\n    for (JettySolrRunner runner : stoppedRunners) {\n      runner.start();\n    }\n    waitForState(\"Expected to see nodes come back \" + collection, collection,\n        (n, c) -> {\n          return n.size() == 6;\n        });\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n\n    // testLeaderElectionAfterClientTimeout\n    collection = \"collection2\";\n    createCollection(collection);\n\n    // TODO: work out the best timing here...\n    System.setProperty(\"zkClientTimeout\", Integer.toString(ZkTestServer.TICK_TIME * 2 + 100));\n    // timeout the leader\n    String leader = getLeader(collection);\n    JettySolrRunner jetty = getRunner(leader);\n    ZkController zkController = jetty.getCoreContainer().getZkController();\n\n    zkController.getZkClient().getSolrZooKeeper().closeCnxn();\n    cluster.getZkServer().expire(zkController.getZkClient().getSolrZooKeeper().getSessionId());\n\n    for (int i = 0; i < 60; i++) { // wait till leader is changed\n      if (jetty != getRunner(getLeader(collection))) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    // make sure we have waited long enough for the first leader to have come back\n    Thread.sleep(ZkTestServer.TICK_TIME * 2 + 100);\n\n    // kill everyone but the first leader that should have reconnected by now\n    for (JettySolrRunner jetty2 : cluster.getJettySolrRunners()) {\n      if (jetty != jetty2) {\n        jetty2.stop();\n      }\n    }\n\n    for (int i = 0; i < 320; i++) { // wait till leader is changed\n      try {\n        if (jetty == getRunner(getLeader(collection))) {\n          break;\n        }\n        Thread.sleep(100);\n      } catch (Exception e) {\n        continue;\n      }\n    }\n\n    assertEquals(jetty, getRunner(getLeader(collection)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","date":1533256859,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testSimpleSliceLeaderElection() throws Exception {\n    String collection = \"collection1\";\n    createCollection(collection);\n\n    List<JettySolrRunner> stoppedRunners = new ArrayList<>();\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader(collection);\n      JettySolrRunner jetty = getRunner(leader);\n      assertNotNull(jetty);\n      assertTrue(\"shard1\".equals(jetty.getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n      jetty.stop();\n      stoppedRunners.add(jetty);\n\n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader(collection);\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n\n      leader = getLeader(collection);\n      int retry = 0;\n      while (jetty == getRunner(leader)) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n\n      if (jetty == getRunner(leader)) {\n        cluster.getZkClient().printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + jetty + \" was close, but it's still showing as the leader\");\n      }\n\n      assertTrue(\"shard1\".equals(getRunner(leader).getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n    }\n\n    for (JettySolrRunner runner : stoppedRunners) {\n      runner.start();\n    }\n    waitForState(\"Expected to see nodes come back \" + collection, collection,\n        (n, c) -> {\n          return n.size() == 6;\n        });\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n\n    // testLeaderElectionAfterClientTimeout\n    collection = \"collection2\";\n    createCollection(collection);\n\n    // TODO: work out the best timing here...\n    System.setProperty(\"zkClientTimeout\", Integer.toString(ZkTestServer.TICK_TIME * 2 + 100));\n    // timeout the leader\n    String leader = getLeader(collection);\n    JettySolrRunner jetty = getRunner(leader);\n    ZkController zkController = jetty.getCoreContainer().getZkController();\n\n    zkController.getZkClient().getSolrZooKeeper().closeCnxn();\n    cluster.getZkServer().expire(zkController.getZkClient().getSolrZooKeeper().getSessionId());\n\n    for (int i = 0; i < 60; i++) { // wait till leader is changed\n      if (jetty != getRunner(getLeader(collection))) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    // make sure we have waited long enough for the first leader to have come back\n    Thread.sleep(ZkTestServer.TICK_TIME * 2 + 100);\n\n    // kill everyone but the first leader that should have reconnected by now\n    for (JettySolrRunner jetty2 : cluster.getJettySolrRunners()) {\n      if (jetty != jetty2) {\n        jetty2.stop();\n      }\n    }\n\n    for (int i = 0; i < 320; i++) { // wait till leader is changed\n      try {\n        if (jetty == getRunner(getLeader(collection))) {\n          break;\n        }\n        Thread.sleep(100);\n      } catch (Exception e) {\n        continue;\n      }\n    }\n\n    assertEquals(jetty, getRunner(getLeader(collection)));\n  }\n\n","sourceOld":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  public void testSimpleSliceLeaderElection() throws Exception {\n    String collection = \"collection1\";\n    createCollection(collection);\n\n    List<JettySolrRunner> stoppedRunners = new ArrayList<>();\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader(collection);\n      JettySolrRunner jetty = getRunner(leader);\n      assertNotNull(jetty);\n      assertTrue(\"shard1\".equals(jetty.getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n      jetty.stop();\n      stoppedRunners.add(jetty);\n\n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader(collection);\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n\n      leader = getLeader(collection);\n      int retry = 0;\n      while (jetty == getRunner(leader)) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n\n      if (jetty == getRunner(leader)) {\n        cluster.getZkClient().printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + jetty + \" was close, but it's still showing as the leader\");\n      }\n\n      assertTrue(\"shard1\".equals(getRunner(leader).getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n    }\n\n    for (JettySolrRunner runner : stoppedRunners) {\n      runner.start();\n    }\n    waitForState(\"Expected to see nodes come back \" + collection, collection,\n        (n, c) -> {\n          return n.size() == 6;\n        });\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n\n    // testLeaderElectionAfterClientTimeout\n    collection = \"collection2\";\n    createCollection(collection);\n\n    // TODO: work out the best timing here...\n    System.setProperty(\"zkClientTimeout\", Integer.toString(ZkTestServer.TICK_TIME * 2 + 100));\n    // timeout the leader\n    String leader = getLeader(collection);\n    JettySolrRunner jetty = getRunner(leader);\n    ZkController zkController = jetty.getCoreContainer().getZkController();\n\n    zkController.getZkClient().getSolrZooKeeper().closeCnxn();\n    cluster.getZkServer().expire(zkController.getZkClient().getSolrZooKeeper().getSessionId());\n\n    for (int i = 0; i < 60; i++) { // wait till leader is changed\n      if (jetty != getRunner(getLeader(collection))) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    // make sure we have waited long enough for the first leader to have come back\n    Thread.sleep(ZkTestServer.TICK_TIME * 2 + 100);\n\n    // kill everyone but the first leader that should have reconnected by now\n    for (JettySolrRunner jetty2 : cluster.getJettySolrRunners()) {\n      if (jetty != jetty2) {\n        jetty2.stop();\n      }\n    }\n\n    for (int i = 0; i < 320; i++) { // wait till leader is changed\n      try {\n        if (jetty == getRunner(getLeader(collection))) {\n          break;\n        }\n        Thread.sleep(100);\n      } catch (Exception e) {\n        continue;\n      }\n    }\n\n    assertEquals(jetty, getRunner(getLeader(collection)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a","date":1536291831,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testSimpleSliceLeaderElection() throws Exception {\n    String collection = \"collection1\";\n    createCollection(collection);\n\n    List<JettySolrRunner> stoppedRunners = new ArrayList<>();\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader(collection);\n      JettySolrRunner jetty = getRunner(leader);\n      assertNotNull(jetty);\n      assertTrue(\"shard1\".equals(jetty.getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n      jetty.stop();\n      stoppedRunners.add(jetty);\n\n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader(collection);\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n\n      leader = getLeader(collection);\n      int retry = 0;\n      while (jetty == getRunner(leader)) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n\n      if (jetty == getRunner(leader)) {\n        cluster.getZkClient().printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + jetty + \" was close, but it's still showing as the leader\");\n      }\n\n      assertTrue(\"shard1\".equals(getRunner(leader).getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n    }\n\n    for (JettySolrRunner runner : stoppedRunners) {\n      runner.start();\n    }\n    waitForState(\"Expected to see nodes come back \" + collection, collection,\n        (n, c) -> {\n          return n.size() == 6;\n        });\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n\n    // testLeaderElectionAfterClientTimeout\n    collection = \"collection2\";\n    createCollection(collection);\n\n    // TODO: work out the best timing here...\n    System.setProperty(\"zkClientTimeout\", Integer.toString(ZkTestServer.TICK_TIME * 2 + 100));\n    // timeout the leader\n    String leader = getLeader(collection);\n    JettySolrRunner jetty = getRunner(leader);\n    ZkController zkController = jetty.getCoreContainer().getZkController();\n\n    zkController.getZkClient().getSolrZooKeeper().closeCnxn();\n    cluster.getZkServer().expire(zkController.getZkClient().getSolrZooKeeper().getSessionId());\n\n    for (int i = 0; i < 60; i++) { // wait till leader is changed\n      if (jetty != getRunner(getLeader(collection))) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    // make sure we have waited long enough for the first leader to have come back\n    Thread.sleep(ZkTestServer.TICK_TIME * 2 + 100);\n\n    // kill everyone but the first leader that should have reconnected by now\n    for (JettySolrRunner jetty2 : cluster.getJettySolrRunners()) {\n      if (jetty != jetty2) {\n        jetty2.stop();\n      }\n    }\n\n    for (int i = 0; i < 320; i++) { // wait till leader is changed\n      try {\n        if (jetty == getRunner(getLeader(collection))) {\n          break;\n        }\n        Thread.sleep(100);\n      } catch (Exception e) {\n        continue;\n      }\n    }\n\n    assertEquals(jetty, getRunner(getLeader(collection)));\n  }\n\n","sourceOld":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testSimpleSliceLeaderElection() throws Exception {\n    String collection = \"collection1\";\n    createCollection(collection);\n\n    List<JettySolrRunner> stoppedRunners = new ArrayList<>();\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader(collection);\n      JettySolrRunner jetty = getRunner(leader);\n      assertNotNull(jetty);\n      assertTrue(\"shard1\".equals(jetty.getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n      jetty.stop();\n      stoppedRunners.add(jetty);\n\n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader(collection);\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n\n      leader = getLeader(collection);\n      int retry = 0;\n      while (jetty == getRunner(leader)) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n\n      if (jetty == getRunner(leader)) {\n        cluster.getZkClient().printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + jetty + \" was close, but it's still showing as the leader\");\n      }\n\n      assertTrue(\"shard1\".equals(getRunner(leader).getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n    }\n\n    for (JettySolrRunner runner : stoppedRunners) {\n      runner.start();\n    }\n    waitForState(\"Expected to see nodes come back \" + collection, collection,\n        (n, c) -> {\n          return n.size() == 6;\n        });\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n\n    // testLeaderElectionAfterClientTimeout\n    collection = \"collection2\";\n    createCollection(collection);\n\n    // TODO: work out the best timing here...\n    System.setProperty(\"zkClientTimeout\", Integer.toString(ZkTestServer.TICK_TIME * 2 + 100));\n    // timeout the leader\n    String leader = getLeader(collection);\n    JettySolrRunner jetty = getRunner(leader);\n    ZkController zkController = jetty.getCoreContainer().getZkController();\n\n    zkController.getZkClient().getSolrZooKeeper().closeCnxn();\n    cluster.getZkServer().expire(zkController.getZkClient().getSolrZooKeeper().getSessionId());\n\n    for (int i = 0; i < 60; i++) { // wait till leader is changed\n      if (jetty != getRunner(getLeader(collection))) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    // make sure we have waited long enough for the first leader to have come back\n    Thread.sleep(ZkTestServer.TICK_TIME * 2 + 100);\n\n    // kill everyone but the first leader that should have reconnected by now\n    for (JettySolrRunner jetty2 : cluster.getJettySolrRunners()) {\n      if (jetty != jetty2) {\n        jetty2.stop();\n      }\n    }\n\n    for (int i = 0; i < 320; i++) { // wait till leader is changed\n      try {\n        if (jetty == getRunner(getLeader(collection))) {\n          break;\n        }\n        Thread.sleep(100);\n      } catch (Exception e) {\n        continue;\n      }\n    }\n\n    assertEquals(jetty, getRunner(getLeader(collection)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#testSimpleSliceLeaderElection().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testSimpleSliceLeaderElection() throws Exception {\n    String collection = \"collection1\";\n    createCollection(collection);\n\n    List<JettySolrRunner> stoppedRunners = new ArrayList<>();\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader(collection);\n      JettySolrRunner jetty = getRunner(leader);\n      assertNotNull(jetty);\n      assertTrue(\"shard1\".equals(jetty.getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n      jetty.stop();\n      stoppedRunners.add(jetty);\n\n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader(collection);\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n\n      leader = getLeader(collection);\n      int retry = 0;\n      while (jetty == getRunner(leader)) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n\n      if (jetty == getRunner(leader)) {\n        cluster.getZkClient().printLayoutToStream(System.out);\n        fail(\"We didn't find a new leader! \" + jetty + \" was close, but it's still showing as the leader\");\n      }\n\n      assertTrue(\"shard1\".equals(getRunner(leader).getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n    }\n\n    for (JettySolrRunner runner : stoppedRunners) {\n      runner.start();\n    }\n    waitForState(\"Expected to see nodes come back \" + collection, collection,\n        (n, c) -> {\n          return n.size() == 6;\n        });\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n\n    // testLeaderElectionAfterClientTimeout\n    collection = \"collection2\";\n    createCollection(collection);\n\n    // TODO: work out the best timing here...\n    System.setProperty(\"zkClientTimeout\", Integer.toString(ZkTestServer.TICK_TIME * 2 + 100));\n    // timeout the leader\n    String leader = getLeader(collection);\n    JettySolrRunner jetty = getRunner(leader);\n    ZkController zkController = jetty.getCoreContainer().getZkController();\n\n    zkController.getZkClient().getSolrZooKeeper().closeCnxn();\n    cluster.getZkServer().expire(zkController.getZkClient().getSolrZooKeeper().getSessionId());\n\n    for (int i = 0; i < 60; i++) { // wait till leader is changed\n      if (jetty != getRunner(getLeader(collection))) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    // make sure we have waited long enough for the first leader to have come back\n    Thread.sleep(ZkTestServer.TICK_TIME * 2 + 100);\n\n    // kill everyone but the first leader that should have reconnected by now\n    for (JettySolrRunner jetty2 : cluster.getJettySolrRunners()) {\n      if (jetty != jetty2) {\n        jetty2.stop();\n      }\n    }\n\n    for (int i = 0; i < 320; i++) { // wait till leader is changed\n      try {\n        if (jetty == getRunner(getLeader(collection))) {\n          break;\n        }\n        Thread.sleep(100);\n      } catch (Exception e) {\n        continue;\n      }\n    }\n\n    assertEquals(jetty, getRunner(getLeader(collection)));\n  }\n\n","sourceOld":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testSimpleSliceLeaderElection() throws Exception {\n    String collection = \"collection1\";\n    createCollection(collection);\n\n    List<JettySolrRunner> stoppedRunners = new ArrayList<>();\n    for (int i = 0; i < 4; i++) {\n      // who is the leader?\n      String leader = getLeader(collection);\n      JettySolrRunner jetty = getRunner(leader);\n      assertNotNull(jetty);\n      assertTrue(\"shard1\".equals(jetty.getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n      jetty.stop();\n      stoppedRunners.add(jetty);\n\n      // poll until leader change is visible\n      for (int j = 0; j < 90; j++) {\n        String currentLeader = getLeader(collection);\n        if(!leader.equals(currentLeader)) {\n          break;\n        }\n        Thread.sleep(500);\n      }\n\n      leader = getLeader(collection);\n      int retry = 0;\n      while (jetty == getRunner(leader)) {\n        if (retry++ == 60) {\n          break;\n        }\n        Thread.sleep(1000);\n      }\n\n      if (jetty == getRunner(leader)) {\n        cluster.getZkClient().printLayoutToStdOut();\n        fail(\"We didn't find a new leader! \" + jetty + \" was close, but it's still showing as the leader\");\n      }\n\n      assertTrue(\"shard1\".equals(getRunner(leader).getCoreContainer().getCores().iterator().next()\n          .getCoreDescriptor().getCloudDescriptor().getShardId()));\n    }\n\n    for (JettySolrRunner runner : stoppedRunners) {\n      runner.start();\n    }\n    waitForState(\"Expected to see nodes come back \" + collection, collection,\n        (n, c) -> {\n          return n.size() == 6;\n        });\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n\n    // testLeaderElectionAfterClientTimeout\n    collection = \"collection2\";\n    createCollection(collection);\n\n    // TODO: work out the best timing here...\n    System.setProperty(\"zkClientTimeout\", Integer.toString(ZkTestServer.TICK_TIME * 2 + 100));\n    // timeout the leader\n    String leader = getLeader(collection);\n    JettySolrRunner jetty = getRunner(leader);\n    ZkController zkController = jetty.getCoreContainer().getZkController();\n\n    zkController.getZkClient().getSolrZooKeeper().closeCnxn();\n    cluster.getZkServer().expire(zkController.getZkClient().getSolrZooKeeper().getSessionId());\n\n    for (int i = 0; i < 60; i++) { // wait till leader is changed\n      if (jetty != getRunner(getLeader(collection))) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    // make sure we have waited long enough for the first leader to have come back\n    Thread.sleep(ZkTestServer.TICK_TIME * 2 + 100);\n\n    // kill everyone but the first leader that should have reconnected by now\n    for (JettySolrRunner jetty2 : cluster.getJettySolrRunners()) {\n      if (jetty != jetty2) {\n        jetty2.stop();\n      }\n    }\n\n    for (int i = 0; i < 320; i++) { // wait till leader is changed\n      try {\n        if (jetty == getRunner(getLeader(collection))) {\n          break;\n        }\n        Thread.sleep(100);\n      } catch (Exception e) {\n        continue;\n      }\n    }\n\n    assertEquals(jetty, getRunner(getLeader(collection)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"82fbc9a4af34a68002cd5cf8bbac6b604aeef413":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5":["a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"fab8a40832af668890c01b68de2eb457364ddd2a":["52ae7051bd9161fb49863393ff0ff8e94fbb3f77"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["0d22ac6a4146774c1bc8400160fc0b6150294e92","ba97d103fbcb7552957e84cae331a73215c20864"],"52aa8538d23f046de4a22d633043361c3e07fb16":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"57635ff388fa1bee703f3b892a86a3e48975576a":["52ae7051bd9161fb49863393ff0ff8e94fbb3f77","fab8a40832af668890c01b68de2eb457364ddd2a"],"afa7f746771c03b10753e537caa14fbaf64a8312":["52aa8538d23f046de4a22d633043361c3e07fb16"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["4bab9eeea60eefbea2957be27b8d1923095df771","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"aba371508186796cc6151d8223a5b4e16d02e26e":["52ae7051bd9161fb49863393ff0ff8e94fbb3f77","fab8a40832af668890c01b68de2eb457364ddd2a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d0ef034a4f10871667ae75181537775ddcf8ade4","82fbc9a4af34a68002cd5cf8bbac6b604aeef413"],"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["4bab9eeea60eefbea2957be27b8d1923095df771"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["4bab9eeea60eefbea2957be27b8d1923095df771","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"78a55f24d9b493c2a1cecf79f1d78279062b545b":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","ba97d103fbcb7552957e84cae331a73215c20864"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"52ae7051bd9161fb49863393ff0ff8e94fbb3f77":["ba97d103fbcb7552957e84cae331a73215c20864"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5"],"28288370235ed02234a64753cdbf0c6ec096304a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d0ef034a4f10871667ae75181537775ddcf8ade4","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"9026e7431453f783c536b9cdb2a68e25090055b6":["afa7f746771c03b10753e537caa14fbaf64a8312"],"ba97d103fbcb7552957e84cae331a73215c20864":["9026e7431453f783c536b9cdb2a68e25090055b6"],"4bab9eeea60eefbea2957be27b8d1923095df771":["28288370235ed02234a64753cdbf0c6ec096304a"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["fab8a40832af668890c01b68de2eb457364ddd2a"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"]},"commit2Childs":{"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a"],"82fbc9a4af34a68002cd5cf8bbac6b604aeef413":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"fab8a40832af668890c01b68de2eb457364ddd2a":["57635ff388fa1bee703f3b892a86a3e48975576a","aba371508186796cc6151d8223a5b4e16d02e26e","d0ef034a4f10871667ae75181537775ddcf8ade4"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"52aa8538d23f046de4a22d633043361c3e07fb16":["afa7f746771c03b10753e537caa14fbaf64a8312"],"57635ff388fa1bee703f3b892a86a3e48975576a":[],"afa7f746771c03b10753e537caa14fbaf64a8312":["9026e7431453f783c536b9cdb2a68e25090055b6"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[],"78a55f24d9b493c2a1cecf79f1d78279062b545b":[],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5"],"52ae7051bd9161fb49863393ff0ff8e94fbb3f77":["fab8a40832af668890c01b68de2eb457364ddd2a","57635ff388fa1bee703f3b892a86a3e48975576a","aba371508186796cc6151d8223a5b4e16d02e26e"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["78a55f24d9b493c2a1cecf79f1d78279062b545b"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["4bab9eeea60eefbea2957be27b8d1923095df771"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"9026e7431453f783c536b9cdb2a68e25090055b6":["ba97d103fbcb7552957e84cae331a73215c20864"],"ba97d103fbcb7552957e84cae331a73215c20864":["fd92b8bcc88e969302510acf77bd6970da3994c4","78a55f24d9b493c2a1cecf79f1d78279062b545b","52ae7051bd9161fb49863393ff0ff8e94fbb3f77"],"4bab9eeea60eefbea2957be27b8d1923095df771":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a1c374690db69470f6aa4bffc43dcacf1f4e3e49","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["82fbc9a4af34a68002cd5cf8bbac6b604aeef413","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["52aa8538d23f046de4a22d633043361c3e07fb16","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd92b8bcc88e969302510acf77bd6970da3994c4","57635ff388fa1bee703f3b892a86a3e48975576a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","aba371508186796cc6151d8223a5b4e16d02e26e","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","78a55f24d9b493c2a1cecf79f1d78279062b545b","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}