{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#setClusterProperties(Map[String,Object]).mjava","commits":[{"id":"9fa9cb6b109951110cc6d6a6a79c22ad6ee88444","date":1527778252,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#setClusterProperties(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  public void setClusterProperties(Map<String, Object> properties) throws IOException, KeeperException, InterruptedException {\n    client.atomicUpdate(ZkStateReader.CLUSTER_PROPS, zkData -> {\n      if (zkData == null) return Utils.toJSON(properties);\n      Map<String, Object> zkJson = (Map<String, Object>) Utils.fromJSON(zkData);\n      boolean modified = Utils.mergeJson(zkJson, properties);\n      return modified ? Utils.toJSON(zkJson) : null;\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03ac95daf4ee56bf1430dc5f8c54fcbcc5f3646e","date":1538649775,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#setClusterProperties(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#setClusterProperties(Map[String,Object]).mjava","sourceNew":"  public void setClusterProperties(Map<String, Object> properties) throws IOException, KeeperException, InterruptedException {\n    client.atomicUpdate(ZkStateReader.CLUSTER_PROPS, zkData -> {\n      if (zkData == null) return Utils.toJSON(convertCollectionDefaultsToNestedFormat(properties));\n      Map<String, Object> zkJson = (Map<String, Object>) Utils.fromJSON(zkData);\n      zkJson = convertCollectionDefaultsToNestedFormat(zkJson);\n      boolean modified = Utils.mergeJson(zkJson, convertCollectionDefaultsToNestedFormat(properties));\n      return modified ? Utils.toJSON(zkJson) : null;\n    });\n  }\n\n","sourceOld":"  public void setClusterProperties(Map<String, Object> properties) throws IOException, KeeperException, InterruptedException {\n    client.atomicUpdate(ZkStateReader.CLUSTER_PROPS, zkData -> {\n      if (zkData == null) return Utils.toJSON(properties);\n      Map<String, Object> zkJson = (Map<String, Object>) Utils.fromJSON(zkData);\n      boolean modified = Utils.mergeJson(zkJson, properties);\n      return modified ? Utils.toJSON(zkJson) : null;\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#setClusterProperties(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#setClusterProperties(Map[String,Object]).mjava","sourceNew":"  /**This applies the new map over the existing map. it's a merge operation, not an overwrite\n   * This applies the changes atomically over an existing object tree even if multiple nodes are\n   * trying to update this simultaneously\n   *\n   * @param properties The partial Object tree that needs to be applied\n   */\n  public void setClusterProperties(Map<String, Object> properties) throws IOException, KeeperException, InterruptedException {\n    client.atomicUpdate(ZkStateReader.CLUSTER_PROPS, zkData -> {\n      if (zkData == null) return Utils.toJSON(convertCollectionDefaultsToNestedFormat(properties));\n      Map<String, Object> zkJson = (Map<String, Object>) Utils.fromJSON(zkData);\n      zkJson = convertCollectionDefaultsToNestedFormat(zkJson);\n      boolean modified = Utils.mergeJson(zkJson, convertCollectionDefaultsToNestedFormat(properties));\n      return modified ? Utils.toJSON(zkJson) : null;\n    });\n  }\n\n","sourceOld":"  public void setClusterProperties(Map<String, Object> properties) throws IOException, KeeperException, InterruptedException {\n    client.atomicUpdate(ZkStateReader.CLUSTER_PROPS, zkData -> {\n      if (zkData == null) return Utils.toJSON(convertCollectionDefaultsToNestedFormat(properties));\n      Map<String, Object> zkJson = (Map<String, Object>) Utils.fromJSON(zkData);\n      zkJson = convertCollectionDefaultsToNestedFormat(zkJson);\n      boolean modified = Utils.mergeJson(zkJson, convertCollectionDefaultsToNestedFormat(properties));\n      return modified ? Utils.toJSON(zkJson) : null;\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#setClusterProperties(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#setClusterProperties(Map[String,Object]).mjava","sourceNew":"  public void setClusterProperties(Map<String, Object> properties) throws IOException, KeeperException, InterruptedException {\n    client.atomicUpdate(ZkStateReader.CLUSTER_PROPS, zkData -> {\n      if (zkData == null) return Utils.toJSON(convertCollectionDefaultsToNestedFormat(properties));\n      Map<String, Object> zkJson = (Map<String, Object>) Utils.fromJSON(zkData);\n      zkJson = convertCollectionDefaultsToNestedFormat(zkJson);\n      boolean modified = Utils.mergeJson(zkJson, convertCollectionDefaultsToNestedFormat(properties));\n      return modified ? Utils.toJSON(zkJson) : null;\n    });\n  }\n\n","sourceOld":"  /**This applies the new map over the existing map. it's a merge operation, not an overwrite\n   * This applies the changes atomically over an existing object tree even if multiple nodes are\n   * trying to update this simultaneously\n   *\n   * @param properties The partial Object tree that needs to be applied\n   */\n  public void setClusterProperties(Map<String, Object> properties) throws IOException, KeeperException, InterruptedException {\n    client.atomicUpdate(ZkStateReader.CLUSTER_PROPS, zkData -> {\n      if (zkData == null) return Utils.toJSON(convertCollectionDefaultsToNestedFormat(properties));\n      Map<String, Object> zkJson = (Map<String, Object>) Utils.fromJSON(zkData);\n      zkJson = convertCollectionDefaultsToNestedFormat(zkJson);\n      boolean modified = Utils.mergeJson(zkJson, convertCollectionDefaultsToNestedFormat(properties));\n      return modified ? Utils.toJSON(zkJson) : null;\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#setClusterProperties(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#setClusterProperties(Map[String,Object]).mjava","sourceNew":"  public void setClusterProperties(Map<String, Object> properties) throws IOException, KeeperException, InterruptedException {\n    client.atomicUpdate(ZkStateReader.CLUSTER_PROPS, zkData -> {\n      if (zkData == null) return Utils.toJSON(convertCollectionDefaultsToNestedFormat(properties));\n      Map<String, Object> zkJson = (Map<String, Object>) Utils.fromJSON(zkData);\n      zkJson = convertCollectionDefaultsToNestedFormat(zkJson);\n      boolean modified = Utils.mergeJson(zkJson, convertCollectionDefaultsToNestedFormat(properties));\n      return modified ? Utils.toJSON(zkJson) : null;\n    });\n  }\n\n","sourceOld":"  /**This applies the new map over the existing map. it's a merge operation, not an overwrite\n   * This applies the changes atomically over an existing object tree even if multiple nodes are\n   * trying to update this simultaneously\n   *\n   * @param properties The partial Object tree that needs to be applied\n   */\n  public void setClusterProperties(Map<String, Object> properties) throws IOException, KeeperException, InterruptedException {\n    client.atomicUpdate(ZkStateReader.CLUSTER_PROPS, zkData -> {\n      if (zkData == null) return Utils.toJSON(convertCollectionDefaultsToNestedFormat(properties));\n      Map<String, Object> zkJson = (Map<String, Object>) Utils.fromJSON(zkData);\n      zkJson = convertCollectionDefaultsToNestedFormat(zkJson);\n      boolean modified = Utils.mergeJson(zkJson, convertCollectionDefaultsToNestedFormat(properties));\n      return modified ? Utils.toJSON(zkJson) : null;\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76","date":1591450217,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#setClusterProperties(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#setClusterProperties(Map[String,Object]).mjava","sourceNew":"  public void setClusterProperties(Map<String, Object> properties) throws IOException, KeeperException, InterruptedException {\n    client.atomicUpdate(ZkStateReader.CLUSTER_PROPS, zkData -> {\n      if (zkData == null) return Utils.toJSON(convertCollectionDefaultsToNestedFormat(properties));\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, Object> zkJson = (Map<String, Object>) Utils.fromJSON(zkData);\n      zkJson = convertCollectionDefaultsToNestedFormat(zkJson);\n      boolean modified = Utils.mergeJson(zkJson, convertCollectionDefaultsToNestedFormat(properties));\n      return modified ? Utils.toJSON(zkJson) : null;\n    });\n  }\n\n","sourceOld":"  public void setClusterProperties(Map<String, Object> properties) throws IOException, KeeperException, InterruptedException {\n    client.atomicUpdate(ZkStateReader.CLUSTER_PROPS, zkData -> {\n      if (zkData == null) return Utils.toJSON(convertCollectionDefaultsToNestedFormat(properties));\n      Map<String, Object> zkJson = (Map<String, Object>) Utils.fromJSON(zkData);\n      zkJson = convertCollectionDefaultsToNestedFormat(zkJson);\n      boolean modified = Utils.mergeJson(zkJson, convertCollectionDefaultsToNestedFormat(properties));\n      return modified ? Utils.toJSON(zkJson) : null;\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["c44cc06c26e456fe9c215072b79fce30babe3975"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["03ac95daf4ee56bf1430dc5f8c54fcbcc5f3646e"],"03ac95daf4ee56bf1430dc5f8c54fcbcc5f3646e":["9fa9cb6b109951110cc6d6a6a79c22ad6ee88444"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c44cc06c26e456fe9c215072b79fce30babe3975":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"],"9fa9cb6b109951110cc6d6a6a79c22ad6ee88444":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b0b597c65628ca9e73913a07e81691f8229bae35":["fb50877dc038c021eba3a70999fd1f6ed85001c1","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"03ac95daf4ee56bf1430dc5f8c54fcbcc5f3646e":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fa9cb6b109951110cc6d6a6a79c22ad6ee88444"],"c44cc06c26e456fe9c215072b79fce30babe3975":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76","b0b597c65628ca9e73913a07e81691f8229bae35"],"9fa9cb6b109951110cc6d6a6a79c22ad6ee88444":["03ac95daf4ee56bf1430dc5f8c54fcbcc5f3646e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}