{"path":"lucene/src/test/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec#fieldsProducer(SegmentReadState).mjava","commits":[{"id":"03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8","date":1281277545,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    StandardPostingsReader postingsReader = new SepPostingsReaderImpl(state.dir,\n                                                                      state.segmentInfo,\n                                                                      state.readBufferSize,\n                                                                      new MockIntFactory());\n\n    StandardTermsIndexReader indexReader;\n    boolean success = false;\n    try {\n      indexReader = new SimpleStandardTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new StandardTermsDictReader(indexReader,\n                                                       state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       postingsReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReaderImpl(state.dir,\n                                                                      state.segmentInfo,\n                                                                      state.readBufferSize,\n                                                                      new MockIntFactory());\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                       state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       postingsReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    StandardPostingsReader postingsReader = new SepPostingsReaderImpl(state.dir,\n                                                                      state.segmentInfo,\n                                                                      state.readBufferSize,\n                                                                      new MockIntFactory());\n\n    StandardTermsIndexReader indexReader;\n    boolean success = false;\n    try {\n      indexReader = new SimpleStandardTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new StandardTermsDictReader(indexReader,\n                                                       state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       postingsReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16c697f6ca5cdc82f918f753317a4ac9c70d259f","date":1289840486,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReaderImpl(state.dir,\n                                                                      state.segmentInfo,\n                                                                      state.readBufferSize,\n                                                                      new MockIntFactory(), state.codecId);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                       state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       postingsReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE,\n                                                       state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReaderImpl(state.dir,\n                                                                      state.segmentInfo,\n                                                                      state.readBufferSize,\n                                                                      new MockIntFactory());\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                       state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       postingsReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReaderImpl(state.dir,\n                                                                      state.segmentInfo,\n                                                                      state.readBufferSize,\n                                                                      new MockIntFactory(), state.codecId);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                       state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       postingsReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE,\n                                                       state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReaderImpl(state.dir,\n                                                                      state.segmentInfo,\n                                                                      state.readBufferSize,\n                                                                      new MockIntFactory());\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                       state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       postingsReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReaderImpl(state.dir,\n                                                                      state.segmentInfo,\n                                                                      state.readBufferSize,\n                                                                      new MockIntFactory(), state.codecId);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                       state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       postingsReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE,\n                                                       state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReaderImpl(state.dir,\n                                                                      state.segmentInfo,\n                                                                      state.readBufferSize,\n                                                                      new MockIntFactory(baseBlockSize), state.codecId);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                       state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       postingsReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE,\n                                                       state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReaderImpl(state.dir,\n                                                                      state.segmentInfo,\n                                                                      state.readBufferSize,\n                                                                      new MockIntFactory(), state.codecId);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                       state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       postingsReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE,\n                                                       state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReaderImpl(state.dir,\n                                                                      state.segmentInfo,\n                                                                      state.readBufferSize,\n                                                                      new MockIntFactory(baseBlockSize), state.codecId);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                       state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       postingsReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE,\n                                                       state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReaderImpl(state.dir,\n                                                                      state.segmentInfo,\n                                                                      state.readBufferSize,\n                                                                      new MockIntFactory(), state.codecId);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                       state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       postingsReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE,\n                                                       state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReaderImpl(state.dir,\n                                                                      state.segmentInfo,\n                                                                      state.readBufferSize,\n                                                                      new MockIntFactory(baseBlockSize), state.codecId);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                       state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       postingsReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE,\n                                                       state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReaderImpl(state.dir,\n                                                                      state.segmentInfo,\n                                                                      state.readBufferSize,\n                                                                      new MockIntFactory(), state.codecId);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                       state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       postingsReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE,\n                                                       state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReaderImpl(state.dir,\n                                                                      state.segmentInfo,\n                                                                      state.readBufferSize,\n                                                                      new MockIntFactory(baseBlockSize), state.codecId);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.readBufferSize,\n                                                BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                StandardCodec.TERMS_CACHE_SIZE,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReaderImpl(state.dir,\n                                                                      state.segmentInfo,\n                                                                      state.readBufferSize,\n                                                                      new MockIntFactory(baseBlockSize), state.codecId);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                       state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       postingsReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE,\n                                                       state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReaderImpl(state.dir,\n                                                                      state.segmentInfo,\n                                                                      state.readBufferSize,\n                                                                      new MockIntFactory(baseBlockSize), state.codecId);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.readBufferSize,\n                                                BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                StandardCodec.TERMS_CACHE_SIZE,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReaderImpl(state.dir,\n                                                                      state.segmentInfo,\n                                                                      state.readBufferSize,\n                                                                      new MockIntFactory(baseBlockSize), state.codecId);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                       state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       postingsReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE,\n                                                       state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReaderImpl(state.dir,\n                                                                      state.segmentInfo,\n                                                                      state.readBufferSize,\n                                                                      new MockIntFactory(baseBlockSize), state.codecId);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.readBufferSize,\n                                                BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                StandardCodec.TERMS_CACHE_SIZE,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReaderImpl(state.dir,\n                                                                      state.segmentInfo,\n                                                                      state.readBufferSize,\n                                                                      new MockIntFactory(baseBlockSize), state.codecId);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.readBufferSize,\n                                                BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                StandardCodec.TERMS_CACHE_SIZE,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReaderImpl(state.dir,\n                                                                      state.segmentInfo,\n                                                                      state.readBufferSize,\n                                                                      new MockIntFactory(baseBlockSize), state.codecId);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                       state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       postingsReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE,\n                                                       state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReaderImpl(state.dir,\n                                                                      state.segmentInfo,\n                                                                      state.readBufferSize,\n                                                                      new MockIntFactory(baseBlockSize), state.codecId);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.readBufferSize,\n                                                StandardCodec.TERMS_CACHE_SIZE,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReaderImpl(state.dir,\n                                                                      state.segmentInfo,\n                                                                      state.readBufferSize,\n                                                                      new MockIntFactory(baseBlockSize), state.codecId);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.readBufferSize,\n                                                BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                StandardCodec.TERMS_CACHE_SIZE,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"70ad682703b8585f5d0a637efec044d57ec05efb":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","56da903869515527852ee21ea7ef7bfe414cd40d"],"16c697f6ca5cdc82f918f753317a4ac9c70d259f":["99cf56f3a650b908f7017a72f9d23940418f8a52"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["99cf56f3a650b908f7017a72f9d23940418f8a52","16c697f6ca5cdc82f918f753317a4ac9c70d259f"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["56da903869515527852ee21ea7ef7bfe414cd40d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","16c697f6ca5cdc82f918f753317a4ac9c70d259f"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","b1add9ddc0005b07550d4350720aac22dc9886b3"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"56da903869515527852ee21ea7ef7bfe414cd40d":["16c697f6ca5cdc82f918f753317a4ac9c70d259f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["e79a6d080bdd5b2a8f56342cf571b5476de04180","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"]},"commit2Childs":{"03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8":["99cf56f3a650b908f7017a72f9d23940418f8a52"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["70ad682703b8585f5d0a637efec044d57ec05efb"],"16c697f6ca5cdc82f918f753317a4ac9c70d259f":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["e79a6d080bdd5b2a8f56342cf571b5476de04180","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","b1add9ddc0005b07550d4350720aac22dc9886b3","868da859b43505d9d2a023bfeae6dd0c795f5295"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["16c697f6ca5cdc82f918f753317a4ac9c70d259f","9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}