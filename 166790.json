{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFetchStream().mjava","commits":[{"id":"5f21dc022708e502f89f154bdcf6dc53b9409aec","date":1476123629,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFetchStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFetchStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class);\n\n    stream = factory.constructStream(\"fetch(\"+COLLECTION+\",  search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), on=\\\"id=a_i\\\", batchSize=\\\"2\\\", fl=\\\"subject\\\")\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 10);\n    Tuple t = tuples.get(0);\n    assertTrue(\"blah blah blah 0\".equals(t.getString(\"subject\")));\n    t = tuples.get(1);\n    assertTrue(\"blah blah blah 2\".equals(t.getString(\"subject\")));\n    t = tuples.get(2);\n    assertTrue(\"blah blah blah 3\".equals(t.getString(\"subject\")));\n    t = tuples.get(3);\n    assertTrue(\"blah blah blah 4\".equals(t.getString(\"subject\")));\n    t = tuples.get(4);\n    assertTrue(\"blah blah blah 1\".equals(t.getString(\"subject\")));\n    t = tuples.get(5);\n    assertTrue(\"blah blah blah 5\".equals(t.getString(\"subject\")));\n    t = tuples.get(6);\n    assertTrue(\"blah blah blah 6\".equals(t.getString(\"subject\")));\n    t = tuples.get(7);\n    assertTrue(\"blah blah blah 7\".equals(t.getString(\"subject\")));\n    t = tuples.get(8);\n    assertTrue(\"blah blah blah 8\".equals(t.getString(\"subject\")));\n    t = tuples.get(9);\n    assertTrue(\"blah blah blah 9\".equals(t.getString(\"subject\")));\n\n    //Change the batch size\n    stream = factory.constructStream(\"fetch(\"+COLLECTION+\",  search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), on=\\\"id=a_i\\\", batchSize=\\\"3\\\", fl=\\\"subject\\\")\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 10);\n    t = tuples.get(0);\n    assertTrue(\"blah blah blah 0\".equals(t.getString(\"subject\")));\n    t = tuples.get(1);\n    assertTrue(\"blah blah blah 2\".equals(t.getString(\"subject\")));\n    t = tuples.get(2);\n    assertTrue(\"blah blah blah 3\".equals(t.getString(\"subject\")));\n    t = tuples.get(3);\n    assertTrue(\"blah blah blah 4\".equals(t.getString(\"subject\")));\n    t = tuples.get(4);\n    assertTrue(\"blah blah blah 1\".equals(t.getString(\"subject\")));\n    t = tuples.get(5);\n    assertTrue(\"blah blah blah 5\".equals(t.getString(\"subject\")));\n    t = tuples.get(6);\n    assertTrue(\"blah blah blah 6\".equals(t.getString(\"subject\")));\n    t = tuples.get(7);\n    assertTrue(\"blah blah blah 7\".equals(t.getString(\"subject\")));\n    t = tuples.get(8);\n    assertTrue(\"blah blah blah 8\".equals(t.getString(\"subject\")));\n    t = tuples.get(9);\n    assertTrue(\"blah blah blah 9\".equals(t.getString(\"subject\")));\n    solrClientCache.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["78fdfa12f5b4304b0f5df4f8c29fbc6bb396ae5a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFetchStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFetchStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class);\n\n    stream = factory.constructStream(\"fetch(\"+COLLECTION+\",  search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), on=\\\"id=a_i\\\", batchSize=\\\"2\\\", fl=\\\"subject\\\")\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 10);\n    Tuple t = tuples.get(0);\n    assertTrue(\"blah blah blah 0\".equals(t.getString(\"subject\")));\n    t = tuples.get(1);\n    assertTrue(\"blah blah blah 2\".equals(t.getString(\"subject\")));\n    t = tuples.get(2);\n    assertTrue(\"blah blah blah 3\".equals(t.getString(\"subject\")));\n    t = tuples.get(3);\n    assertTrue(\"blah blah blah 4\".equals(t.getString(\"subject\")));\n    t = tuples.get(4);\n    assertTrue(\"blah blah blah 1\".equals(t.getString(\"subject\")));\n    t = tuples.get(5);\n    assertTrue(\"blah blah blah 5\".equals(t.getString(\"subject\")));\n    t = tuples.get(6);\n    assertTrue(\"blah blah blah 6\".equals(t.getString(\"subject\")));\n    t = tuples.get(7);\n    assertTrue(\"blah blah blah 7\".equals(t.getString(\"subject\")));\n    t = tuples.get(8);\n    assertTrue(\"blah blah blah 8\".equals(t.getString(\"subject\")));\n    t = tuples.get(9);\n    assertTrue(\"blah blah blah 9\".equals(t.getString(\"subject\")));\n\n    //Change the batch size\n    stream = factory.constructStream(\"fetch(\"+COLLECTION+\",  search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), on=\\\"id=a_i\\\", batchSize=\\\"3\\\", fl=\\\"subject\\\")\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 10);\n    t = tuples.get(0);\n    assertTrue(\"blah blah blah 0\".equals(t.getString(\"subject\")));\n    t = tuples.get(1);\n    assertTrue(\"blah blah blah 2\".equals(t.getString(\"subject\")));\n    t = tuples.get(2);\n    assertTrue(\"blah blah blah 3\".equals(t.getString(\"subject\")));\n    t = tuples.get(3);\n    assertTrue(\"blah blah blah 4\".equals(t.getString(\"subject\")));\n    t = tuples.get(4);\n    assertTrue(\"blah blah blah 1\".equals(t.getString(\"subject\")));\n    t = tuples.get(5);\n    assertTrue(\"blah blah blah 5\".equals(t.getString(\"subject\")));\n    t = tuples.get(6);\n    assertTrue(\"blah blah blah 6\".equals(t.getString(\"subject\")));\n    t = tuples.get(7);\n    assertTrue(\"blah blah blah 7\".equals(t.getString(\"subject\")));\n    t = tuples.get(8);\n    assertTrue(\"blah blah blah 8\".equals(t.getString(\"subject\")));\n    t = tuples.get(9);\n    assertTrue(\"blah blah blah 9\".equals(t.getString(\"subject\")));\n    solrClientCache.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFetchStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFetchStream().mjava","sourceNew":"  @Test\n  public void testFetchStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class);\n\n    stream = factory.constructStream(\"fetch(\"+ COLLECTIONORALIAS +\",  search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), on=\\\"id=a_i\\\", batchSize=\\\"2\\\", fl=\\\"subject\\\")\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 10);\n    Tuple t = tuples.get(0);\n    assertTrue(\"blah blah blah 0\".equals(t.getString(\"subject\")));\n    t = tuples.get(1);\n    assertTrue(\"blah blah blah 2\".equals(t.getString(\"subject\")));\n    t = tuples.get(2);\n    assertTrue(\"blah blah blah 3\".equals(t.getString(\"subject\")));\n    t = tuples.get(3);\n    assertTrue(\"blah blah blah 4\".equals(t.getString(\"subject\")));\n    t = tuples.get(4);\n    assertTrue(\"blah blah blah 1\".equals(t.getString(\"subject\")));\n    t = tuples.get(5);\n    assertTrue(\"blah blah blah 5\".equals(t.getString(\"subject\")));\n    t = tuples.get(6);\n    assertTrue(\"blah blah blah 6\".equals(t.getString(\"subject\")));\n    t = tuples.get(7);\n    assertTrue(\"blah blah blah 7\".equals(t.getString(\"subject\")));\n    t = tuples.get(8);\n    assertTrue(\"blah blah blah 8\".equals(t.getString(\"subject\")));\n    t = tuples.get(9);\n    assertTrue(\"blah blah blah 9\".equals(t.getString(\"subject\")));\n\n    //Change the batch size\n    stream = factory.constructStream(\"fetch(\"+ COLLECTIONORALIAS +\",  search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), on=\\\"id=a_i\\\", batchSize=\\\"3\\\", fl=\\\"subject\\\")\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 10);\n    t = tuples.get(0);\n    assertTrue(\"blah blah blah 0\".equals(t.getString(\"subject\")));\n    t = tuples.get(1);\n    assertTrue(\"blah blah blah 2\".equals(t.getString(\"subject\")));\n    t = tuples.get(2);\n    assertTrue(\"blah blah blah 3\".equals(t.getString(\"subject\")));\n    t = tuples.get(3);\n    assertTrue(\"blah blah blah 4\".equals(t.getString(\"subject\")));\n    t = tuples.get(4);\n    assertTrue(\"blah blah blah 1\".equals(t.getString(\"subject\")));\n    t = tuples.get(5);\n    assertTrue(\"blah blah blah 5\".equals(t.getString(\"subject\")));\n    t = tuples.get(6);\n    assertTrue(\"blah blah blah 6\".equals(t.getString(\"subject\")));\n    t = tuples.get(7);\n    assertTrue(\"blah blah blah 7\".equals(t.getString(\"subject\")));\n    t = tuples.get(8);\n    assertTrue(\"blah blah blah 8\".equals(t.getString(\"subject\")));\n    t = tuples.get(9);\n    assertTrue(\"blah blah blah 9\".equals(t.getString(\"subject\")));\n    solrClientCache.close();\n  }\n\n","sourceOld":"  @Test\n  public void testFetchStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class);\n\n    stream = factory.constructStream(\"fetch(\"+COLLECTION+\",  search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), on=\\\"id=a_i\\\", batchSize=\\\"2\\\", fl=\\\"subject\\\")\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 10);\n    Tuple t = tuples.get(0);\n    assertTrue(\"blah blah blah 0\".equals(t.getString(\"subject\")));\n    t = tuples.get(1);\n    assertTrue(\"blah blah blah 2\".equals(t.getString(\"subject\")));\n    t = tuples.get(2);\n    assertTrue(\"blah blah blah 3\".equals(t.getString(\"subject\")));\n    t = tuples.get(3);\n    assertTrue(\"blah blah blah 4\".equals(t.getString(\"subject\")));\n    t = tuples.get(4);\n    assertTrue(\"blah blah blah 1\".equals(t.getString(\"subject\")));\n    t = tuples.get(5);\n    assertTrue(\"blah blah blah 5\".equals(t.getString(\"subject\")));\n    t = tuples.get(6);\n    assertTrue(\"blah blah blah 6\".equals(t.getString(\"subject\")));\n    t = tuples.get(7);\n    assertTrue(\"blah blah blah 7\".equals(t.getString(\"subject\")));\n    t = tuples.get(8);\n    assertTrue(\"blah blah blah 8\".equals(t.getString(\"subject\")));\n    t = tuples.get(9);\n    assertTrue(\"blah blah blah 9\".equals(t.getString(\"subject\")));\n\n    //Change the batch size\n    stream = factory.constructStream(\"fetch(\"+COLLECTION+\",  search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), on=\\\"id=a_i\\\", batchSize=\\\"3\\\", fl=\\\"subject\\\")\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 10);\n    t = tuples.get(0);\n    assertTrue(\"blah blah blah 0\".equals(t.getString(\"subject\")));\n    t = tuples.get(1);\n    assertTrue(\"blah blah blah 2\".equals(t.getString(\"subject\")));\n    t = tuples.get(2);\n    assertTrue(\"blah blah blah 3\".equals(t.getString(\"subject\")));\n    t = tuples.get(3);\n    assertTrue(\"blah blah blah 4\".equals(t.getString(\"subject\")));\n    t = tuples.get(4);\n    assertTrue(\"blah blah blah 1\".equals(t.getString(\"subject\")));\n    t = tuples.get(5);\n    assertTrue(\"blah blah blah 5\".equals(t.getString(\"subject\")));\n    t = tuples.get(6);\n    assertTrue(\"blah blah blah 6\".equals(t.getString(\"subject\")));\n    t = tuples.get(7);\n    assertTrue(\"blah blah blah 7\".equals(t.getString(\"subject\")));\n    t = tuples.get(8);\n    assertTrue(\"blah blah blah 8\".equals(t.getString(\"subject\")));\n    t = tuples.get(9);\n    assertTrue(\"blah blah blah 9\".equals(t.getString(\"subject\")));\n    solrClientCache.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFetchStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFetchStream().mjava","sourceNew":"  @Test\n  public void testFetchStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class);\n\n    stream = factory.constructStream(\"fetch(\"+ COLLECTIONORALIAS +\",  search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), on=\\\"id=a_i\\\", batchSize=\\\"2\\\", fl=\\\"subject\\\")\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 10);\n    Tuple t = tuples.get(0);\n    assertTrue(\"blah blah blah 0\".equals(t.getString(\"subject\")));\n    t = tuples.get(1);\n    assertTrue(\"blah blah blah 2\".equals(t.getString(\"subject\")));\n    t = tuples.get(2);\n    assertTrue(\"blah blah blah 3\".equals(t.getString(\"subject\")));\n    t = tuples.get(3);\n    assertTrue(\"blah blah blah 4\".equals(t.getString(\"subject\")));\n    t = tuples.get(4);\n    assertTrue(\"blah blah blah 1\".equals(t.getString(\"subject\")));\n    t = tuples.get(5);\n    assertTrue(\"blah blah blah 5\".equals(t.getString(\"subject\")));\n    t = tuples.get(6);\n    assertTrue(\"blah blah blah 6\".equals(t.getString(\"subject\")));\n    t = tuples.get(7);\n    assertTrue(\"blah blah blah 7\".equals(t.getString(\"subject\")));\n    t = tuples.get(8);\n    assertTrue(\"blah blah blah 8\".equals(t.getString(\"subject\")));\n    t = tuples.get(9);\n    assertTrue(\"blah blah blah 9\".equals(t.getString(\"subject\")));\n\n    //Change the batch size\n    stream = factory.constructStream(\"fetch(\"+ COLLECTIONORALIAS +\",  search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), on=\\\"id=a_i\\\", batchSize=\\\"3\\\", fl=\\\"subject\\\")\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 10);\n    t = tuples.get(0);\n    assertTrue(\"blah blah blah 0\".equals(t.getString(\"subject\")));\n    t = tuples.get(1);\n    assertTrue(\"blah blah blah 2\".equals(t.getString(\"subject\")));\n    t = tuples.get(2);\n    assertTrue(\"blah blah blah 3\".equals(t.getString(\"subject\")));\n    t = tuples.get(3);\n    assertTrue(\"blah blah blah 4\".equals(t.getString(\"subject\")));\n    t = tuples.get(4);\n    assertTrue(\"blah blah blah 1\".equals(t.getString(\"subject\")));\n    t = tuples.get(5);\n    assertTrue(\"blah blah blah 5\".equals(t.getString(\"subject\")));\n    t = tuples.get(6);\n    assertTrue(\"blah blah blah 6\".equals(t.getString(\"subject\")));\n    t = tuples.get(7);\n    assertTrue(\"blah blah blah 7\".equals(t.getString(\"subject\")));\n    t = tuples.get(8);\n    assertTrue(\"blah blah blah 8\".equals(t.getString(\"subject\")));\n    t = tuples.get(9);\n    assertTrue(\"blah blah blah 9\".equals(t.getString(\"subject\")));\n    solrClientCache.close();\n  }\n\n","sourceOld":"  @Test\n  public void testFetchStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class);\n\n    stream = factory.constructStream(\"fetch(\"+COLLECTION+\",  search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), on=\\\"id=a_i\\\", batchSize=\\\"2\\\", fl=\\\"subject\\\")\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 10);\n    Tuple t = tuples.get(0);\n    assertTrue(\"blah blah blah 0\".equals(t.getString(\"subject\")));\n    t = tuples.get(1);\n    assertTrue(\"blah blah blah 2\".equals(t.getString(\"subject\")));\n    t = tuples.get(2);\n    assertTrue(\"blah blah blah 3\".equals(t.getString(\"subject\")));\n    t = tuples.get(3);\n    assertTrue(\"blah blah blah 4\".equals(t.getString(\"subject\")));\n    t = tuples.get(4);\n    assertTrue(\"blah blah blah 1\".equals(t.getString(\"subject\")));\n    t = tuples.get(5);\n    assertTrue(\"blah blah blah 5\".equals(t.getString(\"subject\")));\n    t = tuples.get(6);\n    assertTrue(\"blah blah blah 6\".equals(t.getString(\"subject\")));\n    t = tuples.get(7);\n    assertTrue(\"blah blah blah 7\".equals(t.getString(\"subject\")));\n    t = tuples.get(8);\n    assertTrue(\"blah blah blah 8\".equals(t.getString(\"subject\")));\n    t = tuples.get(9);\n    assertTrue(\"blah blah blah 9\".equals(t.getString(\"subject\")));\n\n    //Change the batch size\n    stream = factory.constructStream(\"fetch(\"+COLLECTION+\",  search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), on=\\\"id=a_i\\\", batchSize=\\\"3\\\", fl=\\\"subject\\\")\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 10);\n    t = tuples.get(0);\n    assertTrue(\"blah blah blah 0\".equals(t.getString(\"subject\")));\n    t = tuples.get(1);\n    assertTrue(\"blah blah blah 2\".equals(t.getString(\"subject\")));\n    t = tuples.get(2);\n    assertTrue(\"blah blah blah 3\".equals(t.getString(\"subject\")));\n    t = tuples.get(3);\n    assertTrue(\"blah blah blah 4\".equals(t.getString(\"subject\")));\n    t = tuples.get(4);\n    assertTrue(\"blah blah blah 1\".equals(t.getString(\"subject\")));\n    t = tuples.get(5);\n    assertTrue(\"blah blah blah 5\".equals(t.getString(\"subject\")));\n    t = tuples.get(6);\n    assertTrue(\"blah blah blah 6\".equals(t.getString(\"subject\")));\n    t = tuples.get(7);\n    assertTrue(\"blah blah blah 7\".equals(t.getString(\"subject\")));\n    t = tuples.get(8);\n    assertTrue(\"blah blah blah 8\".equals(t.getString(\"subject\")));\n    t = tuples.get(9);\n    assertTrue(\"blah blah blah 9\".equals(t.getString(\"subject\")));\n    solrClientCache.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78fdfa12f5b4304b0f5df4f8c29fbc6bb396ae5a","date":1491397010,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFetchStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFetchStream().mjava","sourceNew":"  @Test\n  public void testFetchStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();//TODO share in @Before ; close in @After ?\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class);\n\n    stream = factory.constructStream(\"fetch(\"+ COLLECTIONORALIAS +\",  search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), on=\\\"id=a_i\\\", batchSize=\\\"2\\\", fl=\\\"subject\\\")\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 10);\n    Tuple t = tuples.get(0);\n    assertTrue(\"blah blah blah 0\".equals(t.getString(\"subject\")));\n    t = tuples.get(1);\n    assertTrue(\"blah blah blah 2\".equals(t.getString(\"subject\")));\n    t = tuples.get(2);\n    assertTrue(\"blah blah blah 3\".equals(t.getString(\"subject\")));\n    t = tuples.get(3);\n    assertTrue(\"blah blah blah 4\".equals(t.getString(\"subject\")));\n    t = tuples.get(4);\n    assertTrue(\"blah blah blah 1\".equals(t.getString(\"subject\")));\n    t = tuples.get(5);\n    assertTrue(\"blah blah blah 5\".equals(t.getString(\"subject\")));\n    t = tuples.get(6);\n    assertTrue(\"blah blah blah 6\".equals(t.getString(\"subject\")));\n    t = tuples.get(7);\n    assertTrue(\"blah blah blah 7\".equals(t.getString(\"subject\")));\n    t = tuples.get(8);\n    assertTrue(\"blah blah blah 8\".equals(t.getString(\"subject\")));\n    t = tuples.get(9);\n    assertTrue(\"blah blah blah 9\".equals(t.getString(\"subject\")));\n\n    //Change the batch size\n    stream = factory.constructStream(\"fetch(\"+ COLLECTIONORALIAS +\",  search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), on=\\\"id=a_i\\\", batchSize=\\\"3\\\", fl=\\\"subject\\\")\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 10);\n    t = tuples.get(0);\n    assertTrue(\"blah blah blah 0\".equals(t.getString(\"subject\")));\n    t = tuples.get(1);\n    assertTrue(\"blah blah blah 2\".equals(t.getString(\"subject\")));\n    t = tuples.get(2);\n    assertTrue(\"blah blah blah 3\".equals(t.getString(\"subject\")));\n    t = tuples.get(3);\n    assertTrue(\"blah blah blah 4\".equals(t.getString(\"subject\")));\n    t = tuples.get(4);\n    assertTrue(\"blah blah blah 1\".equals(t.getString(\"subject\")));\n    t = tuples.get(5);\n    assertTrue(\"blah blah blah 5\".equals(t.getString(\"subject\")));\n    t = tuples.get(6);\n    assertTrue(\"blah blah blah 6\".equals(t.getString(\"subject\")));\n    t = tuples.get(7);\n    assertTrue(\"blah blah blah 7\".equals(t.getString(\"subject\")));\n    t = tuples.get(8);\n    assertTrue(\"blah blah blah 8\".equals(t.getString(\"subject\")));\n    t = tuples.get(9);\n    assertTrue(\"blah blah blah 9\".equals(t.getString(\"subject\")));\n\n    // SOLR-10404 test that \"hello 99\" as a value gets escaped\n    new UpdateRequest()\n        .add(id, \"99\", \"a1_s\", \"hello 99\", \"a2_s\", \"hello 99\", \"subject\", \"blah blah blah 99\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    stream = factory.constructStream(\"fetch(\"+ COLLECTIONORALIAS +\",  search(\" + COLLECTIONORALIAS + \", q=\" + id + \":99, fl=\\\"id,a1_s\\\", sort=\\\"id asc\\\"), on=\\\"a1_s=a2_s\\\", fl=\\\"subject\\\")\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assertEquals(1, tuples.size());\n    t = tuples.get(0);\n    assertTrue(\"blah blah blah 99\".equals(t.getString(\"subject\")));\n\n    solrClientCache.close();\n  }\n\n","sourceOld":"  @Test\n  public void testFetchStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class);\n\n    stream = factory.constructStream(\"fetch(\"+ COLLECTIONORALIAS +\",  search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), on=\\\"id=a_i\\\", batchSize=\\\"2\\\", fl=\\\"subject\\\")\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 10);\n    Tuple t = tuples.get(0);\n    assertTrue(\"blah blah blah 0\".equals(t.getString(\"subject\")));\n    t = tuples.get(1);\n    assertTrue(\"blah blah blah 2\".equals(t.getString(\"subject\")));\n    t = tuples.get(2);\n    assertTrue(\"blah blah blah 3\".equals(t.getString(\"subject\")));\n    t = tuples.get(3);\n    assertTrue(\"blah blah blah 4\".equals(t.getString(\"subject\")));\n    t = tuples.get(4);\n    assertTrue(\"blah blah blah 1\".equals(t.getString(\"subject\")));\n    t = tuples.get(5);\n    assertTrue(\"blah blah blah 5\".equals(t.getString(\"subject\")));\n    t = tuples.get(6);\n    assertTrue(\"blah blah blah 6\".equals(t.getString(\"subject\")));\n    t = tuples.get(7);\n    assertTrue(\"blah blah blah 7\".equals(t.getString(\"subject\")));\n    t = tuples.get(8);\n    assertTrue(\"blah blah blah 8\".equals(t.getString(\"subject\")));\n    t = tuples.get(9);\n    assertTrue(\"blah blah blah 9\".equals(t.getString(\"subject\")));\n\n    //Change the batch size\n    stream = factory.constructStream(\"fetch(\"+ COLLECTIONORALIAS +\",  search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), on=\\\"id=a_i\\\", batchSize=\\\"3\\\", fl=\\\"subject\\\")\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 10);\n    t = tuples.get(0);\n    assertTrue(\"blah blah blah 0\".equals(t.getString(\"subject\")));\n    t = tuples.get(1);\n    assertTrue(\"blah blah blah 2\".equals(t.getString(\"subject\")));\n    t = tuples.get(2);\n    assertTrue(\"blah blah blah 3\".equals(t.getString(\"subject\")));\n    t = tuples.get(3);\n    assertTrue(\"blah blah blah 4\".equals(t.getString(\"subject\")));\n    t = tuples.get(4);\n    assertTrue(\"blah blah blah 1\".equals(t.getString(\"subject\")));\n    t = tuples.get(5);\n    assertTrue(\"blah blah blah 5\".equals(t.getString(\"subject\")));\n    t = tuples.get(6);\n    assertTrue(\"blah blah blah 6\".equals(t.getString(\"subject\")));\n    t = tuples.get(7);\n    assertTrue(\"blah blah blah 7\".equals(t.getString(\"subject\")));\n    t = tuples.get(8);\n    assertTrue(\"blah blah blah 8\".equals(t.getString(\"subject\")));\n    t = tuples.get(9);\n    assertTrue(\"blah blah blah 9\".equals(t.getString(\"subject\")));\n    solrClientCache.close();\n  }\n\n","bugFix":["5f21dc022708e502f89f154bdcf6dc53b9409aec"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11e5446472f245825b6f1cc220252acaab5990cf","date":1491429444,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFetchStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFetchStream().mjava","sourceNew":"  @Test\n  public void testFetchStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();//TODO share in @Before ; close in @After ?\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class);\n\n    stream = factory.constructStream(\"fetch(\"+ COLLECTIONORALIAS +\",  search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), on=\\\"id=a_i\\\", batchSize=\\\"2\\\", fl=\\\"subject\\\")\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 10);\n    Tuple t = tuples.get(0);\n    assertTrue(\"blah blah blah 0\".equals(t.getString(\"subject\")));\n    t = tuples.get(1);\n    assertTrue(\"blah blah blah 2\".equals(t.getString(\"subject\")));\n    t = tuples.get(2);\n    assertTrue(\"blah blah blah 3\".equals(t.getString(\"subject\")));\n    t = tuples.get(3);\n    assertTrue(\"blah blah blah 4\".equals(t.getString(\"subject\")));\n    t = tuples.get(4);\n    assertTrue(\"blah blah blah 1\".equals(t.getString(\"subject\")));\n    t = tuples.get(5);\n    assertTrue(\"blah blah blah 5\".equals(t.getString(\"subject\")));\n    t = tuples.get(6);\n    assertTrue(\"blah blah blah 6\".equals(t.getString(\"subject\")));\n    t = tuples.get(7);\n    assertTrue(\"blah blah blah 7\".equals(t.getString(\"subject\")));\n    t = tuples.get(8);\n    assertTrue(\"blah blah blah 8\".equals(t.getString(\"subject\")));\n    t = tuples.get(9);\n    assertTrue(\"blah blah blah 9\".equals(t.getString(\"subject\")));\n\n    //Change the batch size\n    stream = factory.constructStream(\"fetch(\" + COLLECTIONORALIAS + \",  search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), on=\\\"id=a_i\\\", batchSize=\\\"3\\\", fl=\\\"subject\\\")\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 10);\n    t = tuples.get(0);\n    assertTrue(\"blah blah blah 0\".equals(t.getString(\"subject\")));\n    t = tuples.get(1);\n    assertTrue(\"blah blah blah 2\".equals(t.getString(\"subject\")));\n    t = tuples.get(2);\n    assertTrue(\"blah blah blah 3\".equals(t.getString(\"subject\")));\n    t = tuples.get(3);\n    assertTrue(\"blah blah blah 4\".equals(t.getString(\"subject\")));\n    t = tuples.get(4);\n    assertTrue(\"blah blah blah 1\".equals(t.getString(\"subject\")));\n    t = tuples.get(5);\n    assertTrue(\"blah blah blah 5\".equals(t.getString(\"subject\")));\n    t = tuples.get(6);\n    assertTrue(\"blah blah blah 6\".equals(t.getString(\"subject\")));\n    t = tuples.get(7);\n    assertTrue(\"blah blah blah 7\".equals(t.getString(\"subject\")));\n    t = tuples.get(8);\n    assertTrue(\"blah blah blah 8\".equals(t.getString(\"subject\")));\n    t = tuples.get(9);\n    assertTrue(\"blah blah blah 9\".equals(t.getString(\"subject\")));\n\n    // SOLR-10404 test that \"hello 99\" as a value gets escaped\n    new UpdateRequest()\n        .add(id, \"99\", \"a1_s\", \"hello 99\", \"a2_s\", \"hello 99\", \"subject\", \"blah blah blah 99\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    stream = factory.constructStream(\"fetch(\"+ COLLECTIONORALIAS +\",  search(\" + COLLECTIONORALIAS + \", q=\" + id + \":99, fl=\\\"id,a1_s\\\", sort=\\\"id asc\\\"), on=\\\"a1_s=a2_s\\\", fl=\\\"subject\\\")\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assertEquals(1, tuples.size());\n    t = tuples.get(0);\n    assertTrue(\"blah blah blah 99\".equals(t.getString(\"subject\")));\n\n    solrClientCache.close();\n  }\n\n","sourceOld":"  @Test\n  public void testFetchStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();//TODO share in @Before ; close in @After ?\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class);\n\n    stream = factory.constructStream(\"fetch(\"+ COLLECTIONORALIAS +\",  search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), on=\\\"id=a_i\\\", batchSize=\\\"2\\\", fl=\\\"subject\\\")\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 10);\n    Tuple t = tuples.get(0);\n    assertTrue(\"blah blah blah 0\".equals(t.getString(\"subject\")));\n    t = tuples.get(1);\n    assertTrue(\"blah blah blah 2\".equals(t.getString(\"subject\")));\n    t = tuples.get(2);\n    assertTrue(\"blah blah blah 3\".equals(t.getString(\"subject\")));\n    t = tuples.get(3);\n    assertTrue(\"blah blah blah 4\".equals(t.getString(\"subject\")));\n    t = tuples.get(4);\n    assertTrue(\"blah blah blah 1\".equals(t.getString(\"subject\")));\n    t = tuples.get(5);\n    assertTrue(\"blah blah blah 5\".equals(t.getString(\"subject\")));\n    t = tuples.get(6);\n    assertTrue(\"blah blah blah 6\".equals(t.getString(\"subject\")));\n    t = tuples.get(7);\n    assertTrue(\"blah blah blah 7\".equals(t.getString(\"subject\")));\n    t = tuples.get(8);\n    assertTrue(\"blah blah blah 8\".equals(t.getString(\"subject\")));\n    t = tuples.get(9);\n    assertTrue(\"blah blah blah 9\".equals(t.getString(\"subject\")));\n\n    //Change the batch size\n    stream = factory.constructStream(\"fetch(\"+ COLLECTIONORALIAS +\",  search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), on=\\\"id=a_i\\\", batchSize=\\\"3\\\", fl=\\\"subject\\\")\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 10);\n    t = tuples.get(0);\n    assertTrue(\"blah blah blah 0\".equals(t.getString(\"subject\")));\n    t = tuples.get(1);\n    assertTrue(\"blah blah blah 2\".equals(t.getString(\"subject\")));\n    t = tuples.get(2);\n    assertTrue(\"blah blah blah 3\".equals(t.getString(\"subject\")));\n    t = tuples.get(3);\n    assertTrue(\"blah blah blah 4\".equals(t.getString(\"subject\")));\n    t = tuples.get(4);\n    assertTrue(\"blah blah blah 1\".equals(t.getString(\"subject\")));\n    t = tuples.get(5);\n    assertTrue(\"blah blah blah 5\".equals(t.getString(\"subject\")));\n    t = tuples.get(6);\n    assertTrue(\"blah blah blah 6\".equals(t.getString(\"subject\")));\n    t = tuples.get(7);\n    assertTrue(\"blah blah blah 7\".equals(t.getString(\"subject\")));\n    t = tuples.get(8);\n    assertTrue(\"blah blah blah 8\".equals(t.getString(\"subject\")));\n    t = tuples.get(9);\n    assertTrue(\"blah blah blah 9\".equals(t.getString(\"subject\")));\n\n    // SOLR-10404 test that \"hello 99\" as a value gets escaped\n    new UpdateRequest()\n        .add(id, \"99\", \"a1_s\", \"hello 99\", \"a2_s\", \"hello 99\", \"subject\", \"blah blah blah 99\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    stream = factory.constructStream(\"fetch(\"+ COLLECTIONORALIAS +\",  search(\" + COLLECTIONORALIAS + \", q=\" + id + \":99, fl=\\\"id,a1_s\\\", sort=\\\"id asc\\\"), on=\\\"a1_s=a2_s\\\", fl=\\\"subject\\\")\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assertEquals(1, tuples.size());\n    t = tuples.get(0);\n    assertTrue(\"blah blah blah 99\".equals(t.getString(\"subject\")));\n\n    solrClientCache.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFetchStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFetchStream().mjava","sourceNew":"  @Test\n  public void testFetchStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();//TODO share in @Before ; close in @After ?\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class);\n\n    stream = factory.constructStream(\"fetch(\"+ COLLECTIONORALIAS +\",  search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), on=\\\"id=a_i\\\", batchSize=\\\"2\\\", fl=\\\"subject\\\")\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 10);\n    Tuple t = tuples.get(0);\n    assertTrue(\"blah blah blah 0\".equals(t.getString(\"subject\")));\n    t = tuples.get(1);\n    assertTrue(\"blah blah blah 2\".equals(t.getString(\"subject\")));\n    t = tuples.get(2);\n    assertTrue(\"blah blah blah 3\".equals(t.getString(\"subject\")));\n    t = tuples.get(3);\n    assertTrue(\"blah blah blah 4\".equals(t.getString(\"subject\")));\n    t = tuples.get(4);\n    assertTrue(\"blah blah blah 1\".equals(t.getString(\"subject\")));\n    t = tuples.get(5);\n    assertTrue(\"blah blah blah 5\".equals(t.getString(\"subject\")));\n    t = tuples.get(6);\n    assertTrue(\"blah blah blah 6\".equals(t.getString(\"subject\")));\n    t = tuples.get(7);\n    assertTrue(\"blah blah blah 7\".equals(t.getString(\"subject\")));\n    t = tuples.get(8);\n    assertTrue(\"blah blah blah 8\".equals(t.getString(\"subject\")));\n    t = tuples.get(9);\n    assertTrue(\"blah blah blah 9\".equals(t.getString(\"subject\")));\n\n    //Change the batch size\n    stream = factory.constructStream(\"fetch(\" + COLLECTIONORALIAS + \",  search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), on=\\\"id=a_i\\\", batchSize=\\\"3\\\", fl=\\\"subject\\\")\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 10);\n    t = tuples.get(0);\n    assertTrue(\"blah blah blah 0\".equals(t.getString(\"subject\")));\n    t = tuples.get(1);\n    assertTrue(\"blah blah blah 2\".equals(t.getString(\"subject\")));\n    t = tuples.get(2);\n    assertTrue(\"blah blah blah 3\".equals(t.getString(\"subject\")));\n    t = tuples.get(3);\n    assertTrue(\"blah blah blah 4\".equals(t.getString(\"subject\")));\n    t = tuples.get(4);\n    assertTrue(\"blah blah blah 1\".equals(t.getString(\"subject\")));\n    t = tuples.get(5);\n    assertTrue(\"blah blah blah 5\".equals(t.getString(\"subject\")));\n    t = tuples.get(6);\n    assertTrue(\"blah blah blah 6\".equals(t.getString(\"subject\")));\n    t = tuples.get(7);\n    assertTrue(\"blah blah blah 7\".equals(t.getString(\"subject\")));\n    t = tuples.get(8);\n    assertTrue(\"blah blah blah 8\".equals(t.getString(\"subject\")));\n    t = tuples.get(9);\n    assertTrue(\"blah blah blah 9\".equals(t.getString(\"subject\")));\n\n    // SOLR-10404 test that \"hello 99\" as a value gets escaped\n    new UpdateRequest()\n        .add(id, \"99\", \"a1_s\", \"hello 99\", \"a2_s\", \"hello 99\", \"subject\", \"blah blah blah 99\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    stream = factory.constructStream(\"fetch(\"+ COLLECTIONORALIAS +\",  search(\" + COLLECTIONORALIAS + \", q=\" + id + \":99, fl=\\\"id,a1_s\\\", sort=\\\"id asc\\\"), on=\\\"a1_s=a2_s\\\", fl=\\\"subject\\\")\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assertEquals(1, tuples.size());\n    t = tuples.get(0);\n    assertTrue(\"blah blah blah 99\".equals(t.getString(\"subject\")));\n\n    solrClientCache.close();\n  }\n\n","sourceOld":"  @Test\n  public void testFetchStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class);\n\n    stream = factory.constructStream(\"fetch(\"+ COLLECTIONORALIAS +\",  search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), on=\\\"id=a_i\\\", batchSize=\\\"2\\\", fl=\\\"subject\\\")\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 10);\n    Tuple t = tuples.get(0);\n    assertTrue(\"blah blah blah 0\".equals(t.getString(\"subject\")));\n    t = tuples.get(1);\n    assertTrue(\"blah blah blah 2\".equals(t.getString(\"subject\")));\n    t = tuples.get(2);\n    assertTrue(\"blah blah blah 3\".equals(t.getString(\"subject\")));\n    t = tuples.get(3);\n    assertTrue(\"blah blah blah 4\".equals(t.getString(\"subject\")));\n    t = tuples.get(4);\n    assertTrue(\"blah blah blah 1\".equals(t.getString(\"subject\")));\n    t = tuples.get(5);\n    assertTrue(\"blah blah blah 5\".equals(t.getString(\"subject\")));\n    t = tuples.get(6);\n    assertTrue(\"blah blah blah 6\".equals(t.getString(\"subject\")));\n    t = tuples.get(7);\n    assertTrue(\"blah blah blah 7\".equals(t.getString(\"subject\")));\n    t = tuples.get(8);\n    assertTrue(\"blah blah blah 8\".equals(t.getString(\"subject\")));\n    t = tuples.get(9);\n    assertTrue(\"blah blah blah 9\".equals(t.getString(\"subject\")));\n\n    //Change the batch size\n    stream = factory.constructStream(\"fetch(\"+ COLLECTIONORALIAS +\",  search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), on=\\\"id=a_i\\\", batchSize=\\\"3\\\", fl=\\\"subject\\\")\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 10);\n    t = tuples.get(0);\n    assertTrue(\"blah blah blah 0\".equals(t.getString(\"subject\")));\n    t = tuples.get(1);\n    assertTrue(\"blah blah blah 2\".equals(t.getString(\"subject\")));\n    t = tuples.get(2);\n    assertTrue(\"blah blah blah 3\".equals(t.getString(\"subject\")));\n    t = tuples.get(3);\n    assertTrue(\"blah blah blah 4\".equals(t.getString(\"subject\")));\n    t = tuples.get(4);\n    assertTrue(\"blah blah blah 1\".equals(t.getString(\"subject\")));\n    t = tuples.get(5);\n    assertTrue(\"blah blah blah 5\".equals(t.getString(\"subject\")));\n    t = tuples.get(6);\n    assertTrue(\"blah blah blah 6\".equals(t.getString(\"subject\")));\n    t = tuples.get(7);\n    assertTrue(\"blah blah blah 7\".equals(t.getString(\"subject\")));\n    t = tuples.get(8);\n    assertTrue(\"blah blah blah 8\".equals(t.getString(\"subject\")));\n    t = tuples.get(9);\n    assertTrue(\"blah blah blah 9\".equals(t.getString(\"subject\")));\n    solrClientCache.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testFetchStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFetchStream().mjava","sourceNew":"  @Test\n  public void testFetchStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();//TODO share in @Before ; close in @After ?\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class);\n\n    stream = factory.constructStream(\"fetch(\"+ COLLECTIONORALIAS +\",  search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), on=\\\"id=a_i\\\", batchSize=\\\"2\\\", fl=\\\"subject\\\")\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 10);\n    Tuple t = tuples.get(0);\n    assertTrue(\"blah blah blah 0\".equals(t.getString(\"subject\")));\n    t = tuples.get(1);\n    assertTrue(\"blah blah blah 2\".equals(t.getString(\"subject\")));\n    t = tuples.get(2);\n    assertTrue(\"blah blah blah 3\".equals(t.getString(\"subject\")));\n    t = tuples.get(3);\n    assertTrue(\"blah blah blah 4\".equals(t.getString(\"subject\")));\n    t = tuples.get(4);\n    assertTrue(\"blah blah blah 1\".equals(t.getString(\"subject\")));\n    t = tuples.get(5);\n    assertTrue(\"blah blah blah 5\".equals(t.getString(\"subject\")));\n    t = tuples.get(6);\n    assertTrue(\"blah blah blah 6\".equals(t.getString(\"subject\")));\n    t = tuples.get(7);\n    assertTrue(\"blah blah blah 7\".equals(t.getString(\"subject\")));\n    t = tuples.get(8);\n    assertTrue(\"blah blah blah 8\".equals(t.getString(\"subject\")));\n    t = tuples.get(9);\n    assertTrue(\"blah blah blah 9\".equals(t.getString(\"subject\")));\n\n    //Change the batch size\n    stream = factory.constructStream(\"fetch(\" + COLLECTIONORALIAS + \",  search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), on=\\\"id=a_i\\\", batchSize=\\\"3\\\", fl=\\\"subject\\\")\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 10);\n    t = tuples.get(0);\n    assertTrue(\"blah blah blah 0\".equals(t.getString(\"subject\")));\n    t = tuples.get(1);\n    assertTrue(\"blah blah blah 2\".equals(t.getString(\"subject\")));\n    t = tuples.get(2);\n    assertTrue(\"blah blah blah 3\".equals(t.getString(\"subject\")));\n    t = tuples.get(3);\n    assertTrue(\"blah blah blah 4\".equals(t.getString(\"subject\")));\n    t = tuples.get(4);\n    assertTrue(\"blah blah blah 1\".equals(t.getString(\"subject\")));\n    t = tuples.get(5);\n    assertTrue(\"blah blah blah 5\".equals(t.getString(\"subject\")));\n    t = tuples.get(6);\n    assertTrue(\"blah blah blah 6\".equals(t.getString(\"subject\")));\n    t = tuples.get(7);\n    assertTrue(\"blah blah blah 7\".equals(t.getString(\"subject\")));\n    t = tuples.get(8);\n    assertTrue(\"blah blah blah 8\".equals(t.getString(\"subject\")));\n    t = tuples.get(9);\n    assertTrue(\"blah blah blah 9\".equals(t.getString(\"subject\")));\n\n    // SOLR-10404 test that \"hello 99\" as a value gets escaped\n    new UpdateRequest()\n        .add(id, \"99\", \"a1_s\", \"hello 99\", \"a2_s\", \"hello 99\", \"subject\", \"blah blah blah 99\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    stream = factory.constructStream(\"fetch(\"+ COLLECTIONORALIAS +\",  search(\" + COLLECTIONORALIAS + \", q=\" + id + \":99, fl=\\\"id,a1_s\\\", sort=\\\"id asc\\\"), on=\\\"a1_s=a2_s\\\", fl=\\\"subject\\\")\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assertEquals(1, tuples.size());\n    t = tuples.get(0);\n    assertTrue(\"blah blah blah 99\".equals(t.getString(\"subject\")));\n\n    solrClientCache.close();\n  }\n\n","sourceOld":"  @Test\n  public void testFetchStream() throws Exception {\n\n    SolrClientCache solrClientCache = new SolrClientCache();//TODO share in @Before ; close in @After ?\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\", \"subject\", \"blah blah blah 0\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\", \"subject\", \"blah blah blah 2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"subject\", \"blah blah blah 3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"subject\", \"blah blah blah 4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\", \"subject\", \"blah blah blah 1\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"5\", \"a_f\", \"6\", \"subject\", \"blah blah blah 5\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"6\", \"a_f\", \"7\", \"subject\", \"blah blah blah 6\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"7\", \"a_f\", \"8\", \"subject\", \"blah blah blah 7\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"8\", \"a_f\", \"9\", \"subject\", \"blah blah blah 8\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"9\", \"a_f\", \"10\", \"subject\", \"blah blah blah 9\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class);\n\n    stream = factory.constructStream(\"fetch(\"+ COLLECTIONORALIAS +\",  search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), on=\\\"id=a_i\\\", batchSize=\\\"2\\\", fl=\\\"subject\\\")\");\n    StreamContext context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 10);\n    Tuple t = tuples.get(0);\n    assertTrue(\"blah blah blah 0\".equals(t.getString(\"subject\")));\n    t = tuples.get(1);\n    assertTrue(\"blah blah blah 2\".equals(t.getString(\"subject\")));\n    t = tuples.get(2);\n    assertTrue(\"blah blah blah 3\".equals(t.getString(\"subject\")));\n    t = tuples.get(3);\n    assertTrue(\"blah blah blah 4\".equals(t.getString(\"subject\")));\n    t = tuples.get(4);\n    assertTrue(\"blah blah blah 1\".equals(t.getString(\"subject\")));\n    t = tuples.get(5);\n    assertTrue(\"blah blah blah 5\".equals(t.getString(\"subject\")));\n    t = tuples.get(6);\n    assertTrue(\"blah blah blah 6\".equals(t.getString(\"subject\")));\n    t = tuples.get(7);\n    assertTrue(\"blah blah blah 7\".equals(t.getString(\"subject\")));\n    t = tuples.get(8);\n    assertTrue(\"blah blah blah 8\".equals(t.getString(\"subject\")));\n    t = tuples.get(9);\n    assertTrue(\"blah blah blah 9\".equals(t.getString(\"subject\")));\n\n    //Change the batch size\n    stream = factory.constructStream(\"fetch(\" + COLLECTIONORALIAS + \",  search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), on=\\\"id=a_i\\\", batchSize=\\\"3\\\", fl=\\\"subject\\\")\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 10);\n    t = tuples.get(0);\n    assertTrue(\"blah blah blah 0\".equals(t.getString(\"subject\")));\n    t = tuples.get(1);\n    assertTrue(\"blah blah blah 2\".equals(t.getString(\"subject\")));\n    t = tuples.get(2);\n    assertTrue(\"blah blah blah 3\".equals(t.getString(\"subject\")));\n    t = tuples.get(3);\n    assertTrue(\"blah blah blah 4\".equals(t.getString(\"subject\")));\n    t = tuples.get(4);\n    assertTrue(\"blah blah blah 1\".equals(t.getString(\"subject\")));\n    t = tuples.get(5);\n    assertTrue(\"blah blah blah 5\".equals(t.getString(\"subject\")));\n    t = tuples.get(6);\n    assertTrue(\"blah blah blah 6\".equals(t.getString(\"subject\")));\n    t = tuples.get(7);\n    assertTrue(\"blah blah blah 7\".equals(t.getString(\"subject\")));\n    t = tuples.get(8);\n    assertTrue(\"blah blah blah 8\".equals(t.getString(\"subject\")));\n    t = tuples.get(9);\n    assertTrue(\"blah blah blah 9\".equals(t.getString(\"subject\")));\n\n    // SOLR-10404 test that \"hello 99\" as a value gets escaped\n    new UpdateRequest()\n        .add(id, \"99\", \"a1_s\", \"hello 99\", \"a2_s\", \"hello 99\", \"subject\", \"blah blah blah 99\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    stream = factory.constructStream(\"fetch(\"+ COLLECTIONORALIAS +\",  search(\" + COLLECTIONORALIAS + \", q=\" + id + \":99, fl=\\\"id,a1_s\\\", sort=\\\"id asc\\\"), on=\\\"a1_s=a2_s\\\", fl=\\\"subject\\\")\");\n    context = new StreamContext();\n    context.setSolrClientCache(solrClientCache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    assertEquals(1, tuples.size());\n    t = tuples.get(0);\n    assertTrue(\"blah blah blah 99\".equals(t.getString(\"subject\")));\n\n    solrClientCache.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8c969f15cd04d31e520319c619a445ae21f02d72"],"11e5446472f245825b6f1cc220252acaab5990cf":["78fdfa12f5b4304b0f5df4f8c29fbc6bb396ae5a"],"78fdfa12f5b4304b0f5df4f8c29fbc6bb396ae5a":["8c969f15cd04d31e520319c619a445ae21f02d72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8c969f15cd04d31e520319c619a445ae21f02d72"],"8c969f15cd04d31e520319c619a445ae21f02d72":["5f21dc022708e502f89f154bdcf6dc53b9409aec"],"5f21dc022708e502f89f154bdcf6dc53b9409aec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5f21dc022708e502f89f154bdcf6dc53b9409aec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["11e5446472f245825b6f1cc220252acaab5990cf"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"11e5446472f245825b6f1cc220252acaab5990cf":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"78fdfa12f5b4304b0f5df4f8c29fbc6bb396ae5a":["11e5446472f245825b6f1cc220252acaab5990cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f21dc022708e502f89f154bdcf6dc53b9409aec","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"8c969f15cd04d31e520319c619a445ae21f02d72":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","78fdfa12f5b4304b0f5df4f8c29fbc6bb396ae5a","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"5f21dc022708e502f89f154bdcf6dc53b9409aec":["8c969f15cd04d31e520319c619a445ae21f02d72","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}