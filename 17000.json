{"path":"solr/core/src/java/org/apache/solr/handler/admin/HealthCheckHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"2f472c757c161e228505e389efda705e2cf3c09e","date":1501700089,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/HealthCheckHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    log.info(\"Invoked HealthCheckHandler on [{}]\", coreContainer.getZkController().getNodeName());\n    CoreContainer cores = getCoreContainer();\n\n    if(cores == null) {\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Core container not initialized\"));\n      return;\n    }\n    if(!cores.isZooKeeperAware()) {\n      rsp.setException(new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Health check is only available when running in SolrCloud mode\"));\n      return;\n    }\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    // Check for isConnected and isClosed\n    if(zkStateReader.getZkClient().isClosed() || !zkStateReader.getZkClient().isConnected()) {\n      rsp.add(STATUS, FAILURE);\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not connected to zk\"));\n      return;\n    }\n\n    try {\n      zkStateReader.updateLiveNodes();\n\n      // Set status to true if this node is in live_nodes\n      if (clusterState.getLiveNodes().contains(cores.getZkController().getNodeName())) {\n        rsp.add(STATUS, OK);\n      } else {\n        rsp.add(STATUS, FAILURE);\n        rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not in live nodes as per zk\"));\n      }\n    } catch (KeeperException e) {\n      rsp.add(STATUS, FAILURE);\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not connected to zk\"));\n    }\n\n    rsp.setHttpCaching(false);\n\n    return;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4398d1e0cbcc108b2b09b57c614139809ddd58fd","date":1502145938,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/HealthCheckHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/HealthCheckHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    log.debug(\"Invoked HealthCheckHandler on [{}]\", coreContainer.getZkController().getNodeName());\n    CoreContainer cores = getCoreContainer();\n\n    if(cores == null) {\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Core container not initialized\"));\n      return;\n    }\n    if(!cores.isZooKeeperAware()) {\n      //TODO: Support standalone instances\n      rsp.setException(new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Health check is only available when running in SolrCloud mode\"));\n      return;\n    }\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    // Check for isConnected and isClosed\n    if(zkStateReader.getZkClient().isClosed() || !zkStateReader.getZkClient().isConnected()) {\n      rsp.add(STATUS, FAILURE);\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not connected to zk\"));\n      return;\n    }\n\n    // Set status to true if this node is in live_nodes\n    if (clusterState.getLiveNodes().contains(cores.getZkController().getNodeName())) {\n      rsp.add(STATUS, OK);\n    } else {\n      rsp.add(STATUS, FAILURE);\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not in live nodes as per zk\"));\n    }\n\n    rsp.setHttpCaching(false);\n\n    return;\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    log.info(\"Invoked HealthCheckHandler on [{}]\", coreContainer.getZkController().getNodeName());\n    CoreContainer cores = getCoreContainer();\n\n    if(cores == null) {\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Core container not initialized\"));\n      return;\n    }\n    if(!cores.isZooKeeperAware()) {\n      rsp.setException(new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Health check is only available when running in SolrCloud mode\"));\n      return;\n    }\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    // Check for isConnected and isClosed\n    if(zkStateReader.getZkClient().isClosed() || !zkStateReader.getZkClient().isConnected()) {\n      rsp.add(STATUS, FAILURE);\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not connected to zk\"));\n      return;\n    }\n\n    try {\n      zkStateReader.updateLiveNodes();\n\n      // Set status to true if this node is in live_nodes\n      if (clusterState.getLiveNodes().contains(cores.getZkController().getNodeName())) {\n        rsp.add(STATUS, OK);\n      } else {\n        rsp.add(STATUS, FAILURE);\n        rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not in live nodes as per zk\"));\n      }\n    } catch (KeeperException e) {\n      rsp.add(STATUS, FAILURE);\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not connected to zk\"));\n    }\n\n    rsp.setHttpCaching(false);\n\n    return;\n  }\n\n","bugFix":null,"bugIntro":["d0bc5867d53ab9aa5c35d32559e876a5c93e2e5f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/HealthCheckHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    log.debug(\"Invoked HealthCheckHandler on [{}]\", coreContainer.getZkController().getNodeName());\n    CoreContainer cores = getCoreContainer();\n\n    if(cores == null) {\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Core container not initialized\"));\n      return;\n    }\n    if(!cores.isZooKeeperAware()) {\n      //TODO: Support standalone instances\n      rsp.setException(new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Health check is only available when running in SolrCloud mode\"));\n      return;\n    }\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    // Check for isConnected and isClosed\n    if(zkStateReader.getZkClient().isClosed() || !zkStateReader.getZkClient().isConnected()) {\n      rsp.add(STATUS, FAILURE);\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not connected to zk\"));\n      return;\n    }\n\n    // Set status to true if this node is in live_nodes\n    if (clusterState.getLiveNodes().contains(cores.getZkController().getNodeName())) {\n      rsp.add(STATUS, OK);\n    } else {\n      rsp.add(STATUS, FAILURE);\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not in live nodes as per zk\"));\n    }\n\n    rsp.setHttpCaching(false);\n\n    return;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/HealthCheckHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/HealthCheckHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    log.debug(\"Invoked HealthCheckHandler on [{}]\", coreContainer.getZkController().getNodeName());\n    CoreContainer cores = getCoreContainer();\n\n    if(cores == null) {\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Core container not initialized\"));\n      return;\n    }\n    if(!cores.isZooKeeperAware()) {\n      //TODO: Support standalone instances\n      rsp.setException(new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Health check is only available when running in SolrCloud mode\"));\n      return;\n    }\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    // Check for isConnected and isClosed\n    if(zkStateReader.getZkClient().isClosed() || !zkStateReader.getZkClient().isConnected()) {\n      rsp.add(STATUS, FAILURE);\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not connected to zk\"));\n      return;\n    }\n\n    // Set status to true if this node is in live_nodes\n    if (clusterState.getLiveNodes().contains(cores.getZkController().getNodeName())) {\n      rsp.add(STATUS, OK);\n    } else {\n      rsp.add(STATUS, FAILURE);\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not in live nodes as per zk\"));\n    }\n\n    rsp.setHttpCaching(false);\n\n    return;\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    log.info(\"Invoked HealthCheckHandler on [{}]\", coreContainer.getZkController().getNodeName());\n    CoreContainer cores = getCoreContainer();\n\n    if(cores == null) {\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Core container not initialized\"));\n      return;\n    }\n    if(!cores.isZooKeeperAware()) {\n      rsp.setException(new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Health check is only available when running in SolrCloud mode\"));\n      return;\n    }\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    // Check for isConnected and isClosed\n    if(zkStateReader.getZkClient().isClosed() || !zkStateReader.getZkClient().isConnected()) {\n      rsp.add(STATUS, FAILURE);\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not connected to zk\"));\n      return;\n    }\n\n    try {\n      zkStateReader.updateLiveNodes();\n\n      // Set status to true if this node is in live_nodes\n      if (clusterState.getLiveNodes().contains(cores.getZkController().getNodeName())) {\n        rsp.add(STATUS, OK);\n      } else {\n        rsp.add(STATUS, FAILURE);\n        rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not in live nodes as per zk\"));\n      }\n    } catch (KeeperException e) {\n      rsp.add(STATUS, FAILURE);\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not connected to zk\"));\n    }\n\n    rsp.setHttpCaching(false);\n\n    return;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bb866c04f137107dcf5b8f0e5bcee02fc832050","date":1546758709,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/HealthCheckHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/HealthCheckHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    log.debug(\"Invoked HealthCheckHandler on [{}]\", coreContainer.getZkController().getNodeName());\n    CoreContainer cores = getCoreContainer();\n\n    // Core container should not be null and active (redundant check)\n    if(cores == null || cores.isShutDown()) {\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"CoreContainer is either not initialized or shutting down\"));\n      return;\n    }\n    if(!cores.isZooKeeperAware()) {\n      //TODO: Support standalone instances\n      rsp.setException(new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Health check is only available when running in SolrCloud mode\"));\n      return;\n    }\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    // Check for isConnected and isClosed\n    if(zkStateReader.getZkClient().isClosed() || !zkStateReader.getZkClient().isConnected()) {\n      rsp.add(STATUS, FAILURE);\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not connected to zk\"));\n      return;\n    }\n\n    // Set status to true if this node is in live_nodes\n    if (clusterState.getLiveNodes().contains(cores.getZkController().getNodeName())) {\n      rsp.add(STATUS, OK);\n    } else {\n      rsp.add(STATUS, FAILURE);\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not in live nodes as per zk\"));\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    log.debug(\"Invoked HealthCheckHandler on [{}]\", coreContainer.getZkController().getNodeName());\n    CoreContainer cores = getCoreContainer();\n\n    if(cores == null) {\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Core container not initialized\"));\n      return;\n    }\n    if(!cores.isZooKeeperAware()) {\n      //TODO: Support standalone instances\n      rsp.setException(new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Health check is only available when running in SolrCloud mode\"));\n      return;\n    }\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    // Check for isConnected and isClosed\n    if(zkStateReader.getZkClient().isClosed() || !zkStateReader.getZkClient().isConnected()) {\n      rsp.add(STATUS, FAILURE);\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not connected to zk\"));\n      return;\n    }\n\n    // Set status to true if this node is in live_nodes\n    if (clusterState.getLiveNodes().contains(cores.getZkController().getNodeName())) {\n      rsp.add(STATUS, OK);\n    } else {\n      rsp.add(STATUS, FAILURE);\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not in live nodes as per zk\"));\n    }\n\n    rsp.setHttpCaching(false);\n\n    return;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0bc5867d53ab9aa5c35d32559e876a5c93e2e5f","date":1575088440,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/HealthCheckHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/HealthCheckHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    CoreContainer cores = getCoreContainer();\n\n    // Core container should not be null and active (redundant check)\n    if(cores == null || cores.isShutDown()) {\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"CoreContainer is either not initialized or shutting down\"));\n      return;\n    }\n    if(!cores.isZooKeeperAware()) {\n      //TODO: Support standalone instances\n      rsp.setException(new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Health check is only available when running in SolrCloud mode\"));\n      return;\n    }\n    log.debug(\"Invoked HealthCheckHandler on [{}]\", coreContainer.getZkController().getNodeName());\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    // Check for isConnected and isClosed\n    if(zkStateReader.getZkClient().isClosed() || !zkStateReader.getZkClient().isConnected()) {\n      rsp.add(STATUS, FAILURE);\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not connected to zk\"));\n      return;\n    }\n\n    // Set status to true if this node is in live_nodes\n    if (clusterState.getLiveNodes().contains(cores.getZkController().getNodeName())) {\n      rsp.add(STATUS, OK);\n    } else {\n      rsp.add(STATUS, FAILURE);\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not in live nodes as per zk\"));\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    log.debug(\"Invoked HealthCheckHandler on [{}]\", coreContainer.getZkController().getNodeName());\n    CoreContainer cores = getCoreContainer();\n\n    // Core container should not be null and active (redundant check)\n    if(cores == null || cores.isShutDown()) {\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"CoreContainer is either not initialized or shutting down\"));\n      return;\n    }\n    if(!cores.isZooKeeperAware()) {\n      //TODO: Support standalone instances\n      rsp.setException(new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Health check is only available when running in SolrCloud mode\"));\n      return;\n    }\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    // Check for isConnected and isClosed\n    if(zkStateReader.getZkClient().isClosed() || !zkStateReader.getZkClient().isConnected()) {\n      rsp.add(STATUS, FAILURE);\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not connected to zk\"));\n      return;\n    }\n\n    // Set status to true if this node is in live_nodes\n    if (clusterState.getLiveNodes().contains(cores.getZkController().getNodeName())) {\n      rsp.add(STATUS, OK);\n    } else {\n      rsp.add(STATUS, FAILURE);\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not in live nodes as per zk\"));\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":["4398d1e0cbcc108b2b09b57c614139809ddd58fd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1949be020da305d0d64d348458ac933994b52e8d","date":1586255171,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/HealthCheckHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/HealthCheckHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    CoreContainer cores = getCoreContainer();\n    rsp.setHttpCaching(false);\n\n    // Core container should not be null and active (redundant check)\n    if(cores == null || cores.isShutDown()) {\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"CoreContainer is either not initialized or shutting down\"));\n      return;\n    }\n    if(!cores.isZooKeeperAware()) {\n      //TODO: Support standalone instances\n      rsp.setException(new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Health check is only available when running in SolrCloud mode\"));\n      return;\n    }\n    log.debug(\"Invoked HealthCheckHandler on [{}]\", coreContainer.getZkController().getNodeName());\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    // Check for isConnected and isClosed\n    if(zkStateReader.getZkClient().isClosed() || !zkStateReader.getZkClient().isConnected()) {\n      rsp.add(STATUS, FAILURE);\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not connected to zk\"));\n      return;\n    }\n\n    // Fail if not in live_nodes\n    if (!clusterState.getLiveNodes().contains(cores.getZkController().getNodeName())) {\n      rsp.add(STATUS, FAILURE);\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not in live nodes as per zk\"));\n      return;\n    }\n\n    // Optionally require that all cores on this node are active if param 'requireHealthyCores=true'\n    if (req.getParams().getBool(PARAM_REQUIRE_HEALTHY_CORES, false)) {\n      Collection<CloudDescriptor> coreDescriptors = cores.getCores().stream()\n          .map(c -> c.getCoreDescriptor().getCloudDescriptor()).collect(Collectors.toList());\n      long unhealthyCores = findUnhealthyCores(coreDescriptors, clusterState);\n      if (unhealthyCores > 0) {\n          rsp.add(STATUS, FAILURE);\n          rsp.add(\"num_cores_unhealthy\", unhealthyCores);\n          rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, unhealthyCores + \" out of \"\n              + cores.getAllCoreNames().size() + \" replicas are currently initializing or recovering\"));\n          return;\n      }\n      rsp.add(\"message\", \"All cores are healthy\");\n    }\n\n    // All lights green, report healthy\n    rsp.add(STATUS, OK);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    CoreContainer cores = getCoreContainer();\n\n    // Core container should not be null and active (redundant check)\n    if(cores == null || cores.isShutDown()) {\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"CoreContainer is either not initialized or shutting down\"));\n      return;\n    }\n    if(!cores.isZooKeeperAware()) {\n      //TODO: Support standalone instances\n      rsp.setException(new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Health check is only available when running in SolrCloud mode\"));\n      return;\n    }\n    log.debug(\"Invoked HealthCheckHandler on [{}]\", coreContainer.getZkController().getNodeName());\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    // Check for isConnected and isClosed\n    if(zkStateReader.getZkClient().isClosed() || !zkStateReader.getZkClient().isConnected()) {\n      rsp.add(STATUS, FAILURE);\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not connected to zk\"));\n      return;\n    }\n\n    // Set status to true if this node is in live_nodes\n    if (clusterState.getLiveNodes().contains(cores.getZkController().getNodeName())) {\n      rsp.add(STATUS, OK);\n    } else {\n      rsp.add(STATUS, FAILURE);\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not in live nodes as per zk\"));\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/HealthCheckHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/HealthCheckHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    CoreContainer cores = getCoreContainer();\n    rsp.setHttpCaching(false);\n\n    // Core container should not be null and active (redundant check)\n    if(cores == null || cores.isShutDown()) {\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"CoreContainer is either not initialized or shutting down\"));\n      return;\n    }\n    if(!cores.isZooKeeperAware()) {\n      //TODO: Support standalone instances\n      rsp.setException(new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Health check is only available when running in SolrCloud mode\"));\n      return;\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"Invoked HealthCheckHandler on [{}]\", coreContainer.getZkController().getNodeName());\n    }\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    // Check for isConnected and isClosed\n    if(zkStateReader.getZkClient().isClosed() || !zkStateReader.getZkClient().isConnected()) {\n      rsp.add(STATUS, FAILURE);\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not connected to zk\"));\n      return;\n    }\n\n    // Fail if not in live_nodes\n    if (!clusterState.getLiveNodes().contains(cores.getZkController().getNodeName())) {\n      rsp.add(STATUS, FAILURE);\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not in live nodes as per zk\"));\n      return;\n    }\n\n    // Optionally require that all cores on this node are active if param 'requireHealthyCores=true'\n    if (req.getParams().getBool(PARAM_REQUIRE_HEALTHY_CORES, false)) {\n      Collection<CloudDescriptor> coreDescriptors = cores.getCores().stream()\n          .map(c -> c.getCoreDescriptor().getCloudDescriptor()).collect(Collectors.toList());\n      long unhealthyCores = findUnhealthyCores(coreDescriptors, clusterState);\n      if (unhealthyCores > 0) {\n          rsp.add(STATUS, FAILURE);\n          rsp.add(\"num_cores_unhealthy\", unhealthyCores);\n          rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, unhealthyCores + \" out of \"\n              + cores.getAllCoreNames().size() + \" replicas are currently initializing or recovering\"));\n          return;\n      }\n      rsp.add(\"message\", \"All cores are healthy\");\n    }\n\n    // All lights green, report healthy\n    rsp.add(STATUS, OK);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    CoreContainer cores = getCoreContainer();\n    rsp.setHttpCaching(false);\n\n    // Core container should not be null and active (redundant check)\n    if(cores == null || cores.isShutDown()) {\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"CoreContainer is either not initialized or shutting down\"));\n      return;\n    }\n    if(!cores.isZooKeeperAware()) {\n      //TODO: Support standalone instances\n      rsp.setException(new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Health check is only available when running in SolrCloud mode\"));\n      return;\n    }\n    log.debug(\"Invoked HealthCheckHandler on [{}]\", coreContainer.getZkController().getNodeName());\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    // Check for isConnected and isClosed\n    if(zkStateReader.getZkClient().isClosed() || !zkStateReader.getZkClient().isConnected()) {\n      rsp.add(STATUS, FAILURE);\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not connected to zk\"));\n      return;\n    }\n\n    // Fail if not in live_nodes\n    if (!clusterState.getLiveNodes().contains(cores.getZkController().getNodeName())) {\n      rsp.add(STATUS, FAILURE);\n      rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Host Unavailable: Not in live nodes as per zk\"));\n      return;\n    }\n\n    // Optionally require that all cores on this node are active if param 'requireHealthyCores=true'\n    if (req.getParams().getBool(PARAM_REQUIRE_HEALTHY_CORES, false)) {\n      Collection<CloudDescriptor> coreDescriptors = cores.getCores().stream()\n          .map(c -> c.getCoreDescriptor().getCloudDescriptor()).collect(Collectors.toList());\n      long unhealthyCores = findUnhealthyCores(coreDescriptors, clusterState);\n      if (unhealthyCores > 0) {\n          rsp.add(STATUS, FAILURE);\n          rsp.add(\"num_cores_unhealthy\", unhealthyCores);\n          rsp.setException(new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, unhealthyCores + \" out of \"\n              + cores.getAllCoreNames().size() + \" replicas are currently initializing or recovering\"));\n          return;\n      }\n      rsp.add(\"message\", \"All cores are healthy\");\n    }\n\n    // All lights green, report healthy\n    rsp.add(STATUS, OK);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58884af1f68e9d61c217c753fbd6266d86a63b14":["2f472c757c161e228505e389efda705e2cf3c09e","4398d1e0cbcc108b2b09b57c614139809ddd58fd"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4398d1e0cbcc108b2b09b57c614139809ddd58fd"],"4bb866c04f137107dcf5b8f0e5bcee02fc832050":["4398d1e0cbcc108b2b09b57c614139809ddd58fd"],"d0bc5867d53ab9aa5c35d32559e876a5c93e2e5f":["4bb866c04f137107dcf5b8f0e5bcee02fc832050"],"1949be020da305d0d64d348458ac933994b52e8d":["d0bc5867d53ab9aa5c35d32559e876a5c93e2e5f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["1949be020da305d0d64d348458ac933994b52e8d"],"4398d1e0cbcc108b2b09b57c614139809ddd58fd":["2f472c757c161e228505e389efda705e2cf3c09e"],"2f472c757c161e228505e389efda705e2cf3c09e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"]},"commit2Childs":{"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"4bb866c04f137107dcf5b8f0e5bcee02fc832050":["d0bc5867d53ab9aa5c35d32559e876a5c93e2e5f"],"d0bc5867d53ab9aa5c35d32559e876a5c93e2e5f":["1949be020da305d0d64d348458ac933994b52e8d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","2f472c757c161e228505e389efda705e2cf3c09e"],"1949be020da305d0d64d348458ac933994b52e8d":["575e66bd4b2349209027f6801184da7fc3cba13f"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4398d1e0cbcc108b2b09b57c614139809ddd58fd":["58884af1f68e9d61c217c753fbd6266d86a63b14","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","4bb866c04f137107dcf5b8f0e5bcee02fc832050"],"2f472c757c161e228505e389efda705e2cf3c09e":["58884af1f68e9d61c217c753fbd6266d86a63b14","4398d1e0cbcc108b2b09b57c614139809ddd58fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}