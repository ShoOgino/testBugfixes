{"path":"src/java/org/apache/lucene/document/Document#getFields(String).mjava","commits":[{"id":"4eb734dc106080869b1e7a65b9a7275b16ffb8b1","date":1041906561,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getFields(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns an array of {@link Field}s with the given name.\n   *\n   * @param name the name of the field\n   * @return a <code>Field[]</code> array\n   */\n   public final Field[] getFields(String name)\n   {\n     List tempFieldList = new ArrayList();\n     for (DocumentFieldList list = fieldList; list != null; list = list.next)\n     {\n       if (list.field.name().equals(name))\n       {\n         tempFieldList.add(list.field);\n       }\n     }\n     int fieldCount = tempFieldList.size();\n     if (fieldCount == 0)\n       return null;\n     else\n     {\n       Field[] fields = new Field[fieldCount];\n       for (int i = 0; i < fieldCount; i++)\n       {\n         fields[i] = (Field) tempFieldList.get(i);\n       }\n       return fields;\n     }\n   }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e471b4e6ba118157929336dab998d9290232326b","date":1041914960,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getFields(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#getFields(String).mjava","sourceNew":"  /**\n   * Returns an array of {@link Field}s with the given name.\n   *\n   * @param name the name of the field\n   * @return a <code>Field[]</code> array\n   */\n   public final Field[] getFields(String name) {\n     List tempFieldList = new ArrayList();\n     for (DocumentFieldList list = fieldList; list != null; list = list.next) {\n       if (list.field.name().equals(name)) {\n         tempFieldList.add(list.field);\n       }\n     }\n     int fieldCount = tempFieldList.size();\n     if (fieldCount == 0)\n       return null;\n     else {\n       Field[] fields = new Field[fieldCount];\n       for (int i = 0; i < fieldCount; i++) {\n         fields[i] = (Field) tempFieldList.get(i);\n       }\n       return fields;\n     }\n   }\n\n","sourceOld":"  /**\n   * Returns an array of {@link Field}s with the given name.\n   *\n   * @param name the name of the field\n   * @return a <code>Field[]</code> array\n   */\n   public final Field[] getFields(String name)\n   {\n     List tempFieldList = new ArrayList();\n     for (DocumentFieldList list = fieldList; list != null; list = list.next)\n     {\n       if (list.field.name().equals(name))\n       {\n         tempFieldList.add(list.field);\n       }\n     }\n     int fieldCount = tempFieldList.size();\n     if (fieldCount == 0)\n       return null;\n     else\n     {\n       Field[] fields = new Field[fieldCount];\n       for (int i = 0; i < fieldCount; i++)\n       {\n         fields[i] = (Field) tempFieldList.get(i);\n       }\n       return fields;\n     }\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc59af24137a8855e59731feeea3c95c72c35542","date":1041955743,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getFields(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#getFields(String).mjava","sourceNew":"  /**\n   * Returns an array of {@link Field}s with the given name.\n   * This method can return <code>null</code>.\n   *\n   * @param name the name of the field\n   * @return a <code>Field[]</code> array\n   */\n   public final Field[] getFields(String name) {\n     List tempFieldList = new ArrayList();\n     for (DocumentFieldList list = fieldList; list != null; list = list.next) {\n       if (list.field.name().equals(name)) {\n         tempFieldList.add(list.field);\n       }\n     }\n     int fieldCount = tempFieldList.size();\n     if (fieldCount == 0)\n       return null;\n     else {\n       Field[] fields = new Field[fieldCount];\n       for (int i = 0; i < fieldCount; i++) {\n         fields[i] = (Field) tempFieldList.get(i);\n       }\n       return fields;\n     }\n   }\n\n","sourceOld":"  /**\n   * Returns an array of {@link Field}s with the given name.\n   *\n   * @param name the name of the field\n   * @return a <code>Field[]</code> array\n   */\n   public final Field[] getFields(String name) {\n     List tempFieldList = new ArrayList();\n     for (DocumentFieldList list = fieldList; list != null; list = list.next) {\n       if (list.field.name().equals(name)) {\n         tempFieldList.add(list.field);\n       }\n     }\n     int fieldCount = tempFieldList.size();\n     if (fieldCount == 0)\n       return null;\n     else {\n       Field[] fields = new Field[fieldCount];\n       for (int i = 0; i < fieldCount; i++) {\n         fields[i] = (Field) tempFieldList.get(i);\n       }\n       return fields;\n     }\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d750531b1c5e8c9bab02396b2b22f8ce02fada9f","date":1043552068,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getFields(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#getFields(String).mjava","sourceNew":"  /**\n   * Returns an array of {@link Field}s with the given name.\n   * This method can return <code>null</code>.\n   *\n   * @param name the name of the field\n   * @return a <code>Field[]</code> array\n   */\n   public final Field[] getFields(String name) {\n     List tempFieldList = new ArrayList();\n     for (DocumentFieldList list = fieldList; list != null; list = list.next) {\n       if (list.field.name().equals(name)) {\n         tempFieldList.add(list.field);\n       }\n     }\n     int fieldCount = tempFieldList.size();\n     if (fieldCount == 0) {\n       return null;\n     }\n     else {\n       return (Field[])tempFieldList.toArray(new Field[] {});\n     }\n   }\n\n","sourceOld":"  /**\n   * Returns an array of {@link Field}s with the given name.\n   * This method can return <code>null</code>.\n   *\n   * @param name the name of the field\n   * @return a <code>Field[]</code> array\n   */\n   public final Field[] getFields(String name) {\n     List tempFieldList = new ArrayList();\n     for (DocumentFieldList list = fieldList; list != null; list = list.next) {\n       if (list.field.name().equals(name)) {\n         tempFieldList.add(list.field);\n       }\n     }\n     int fieldCount = tempFieldList.size();\n     if (fieldCount == 0)\n       return null;\n     else {\n       Field[] fields = new Field[fieldCount];\n       for (int i = 0; i < fieldCount; i++) {\n         fields[i] = (Field) tempFieldList.get(i);\n       }\n       return fields;\n     }\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29d597fb9cab5d0207f322b489e4260b6758531f","date":1078162370,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getFields(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#getFields(String).mjava","sourceNew":"  /**\n   * Returns an array of {@link Field}s with the given name.\n   * This method can return <code>null</code>.\n   *\n   * @param name the name of the field\n   * @return a <code>Field[]</code> array\n   */\n   public final Field[] getFields(String name) {\n     List result = new ArrayList();\n     for (int i = 0; i < fields.size(); i++) {\n       Field field = (Field)fields.get(i);\n       if (field.name().equals(name)) {\n         result.add(field);\n       }\n     }\n\n     if (result.size() == 0)\n       return null;\n\n     return (Field[])result.toArray(new Field[result.size()]);\n   }\n\n","sourceOld":"  /**\n   * Returns an array of {@link Field}s with the given name.\n   * This method can return <code>null</code>.\n   *\n   * @param name the name of the field\n   * @return a <code>Field[]</code> array\n   */\n   public final Field[] getFields(String name) {\n     List tempFieldList = new ArrayList();\n     for (DocumentFieldList list = fieldList; list != null; list = list.next) {\n       if (list.field.name().equals(name)) {\n         tempFieldList.add(list.field);\n       }\n     }\n     int fieldCount = tempFieldList.size();\n     if (fieldCount == 0) {\n       return null;\n     }\n     else {\n       return (Field[])tempFieldList.toArray(new Field[] {});\n     }\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getFields(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#getFields(String).mjava","sourceNew":"  /**\n   * Returns an array of {@link Fieldable}s with the given name.\n   * This method can return <code>null</code>.\n   *\n   * @param name the name of the field\n   * @return a <code>Fieldable[]</code> array\n   */\n   public final Fieldable[] getFields(String name) {\n     List result = new ArrayList();\n     for (int i = 0; i < fields.size(); i++) {\n       Fieldable field = (Fieldable)fields.get(i);\n       if (field.name().equals(name)) {\n         result.add(field);\n       }\n     }\n\n     if (result.size() == 0)\n       return null;\n\n     return (Fieldable[])result.toArray(new Fieldable[result.size()]);\n   }\n\n","sourceOld":"  /**\n   * Returns an array of {@link Field}s with the given name.\n   * This method can return <code>null</code>.\n   *\n   * @param name the name of the field\n   * @return a <code>Field[]</code> array\n   */\n   public final Field[] getFields(String name) {\n     List result = new ArrayList();\n     for (int i = 0; i < fields.size(); i++) {\n       Field field = (Field)fields.get(i);\n       if (field.name().equals(name)) {\n         result.add(field);\n       }\n     }\n\n     if (result.size() == 0)\n       return null;\n\n     return (Field[])result.toArray(new Field[result.size()]);\n   }\n\n","bugFix":null,"bugIntro":["044cc6e1551cd0687478395eeceb9cde12caf10b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"044cc6e1551cd0687478395eeceb9cde12caf10b","date":1150919367,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getFields(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#getFields(String).mjava","sourceNew":"  /**\n   * Returns an array of {@link Field}s with the given name.\n   * This method can return <code>null</code>.\n   * Do not use with lazy loaded fields.\n   *\n   * @param name the name of the field\n   * @return a <code>Field[]</code> array\n   */\n   public final Field[] getFields(String name) {\n     List result = new ArrayList();\n     for (int i = 0; i < fields.size(); i++) {\n       Field field = (Field)fields.get(i);\n       if (field.name().equals(name)) {\n         result.add(field);\n       }\n     }\n\n     if (result.size() == 0)\n       return null;\n\n     return (Field[])result.toArray(new Field[result.size()]);\n   }\n\n","sourceOld":"  /**\n   * Returns an array of {@link Fieldable}s with the given name.\n   * This method can return <code>null</code>.\n   *\n   * @param name the name of the field\n   * @return a <code>Fieldable[]</code> array\n   */\n   public final Fieldable[] getFields(String name) {\n     List result = new ArrayList();\n     for (int i = 0; i < fields.size(); i++) {\n       Fieldable field = (Fieldable)fields.get(i);\n       if (field.name().equals(name)) {\n         result.add(field);\n       }\n     }\n\n     if (result.size() == 0)\n       return null;\n\n     return (Fieldable[])result.toArray(new Fieldable[result.size()]);\n   }\n\n","bugFix":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f01f28d422fb8f120bbdfd69b63e199d848415f","date":1205492908,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getFields(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#getFields(String).mjava","sourceNew":"  /**\n   * Returns an array of {@link Field}s with the given name.\n   * Do not use with lazy loaded fields.\n   *\n   * @param name the name of the field\n   * @return a <code>Field[]</code> array\n   */\n   public final Field[] getFields(String name) {\n     List result = new ArrayList();\n     for (int i = 0; i < fields.size(); i++) {\n       Field field = (Field)fields.get(i);\n       if (field.name().equals(name)) {\n         result.add(field);\n       }\n     }\n\n     if (result.size() == 0)\n       return NO_FIELDS;\n\n     return (Field[])result.toArray(new Field[result.size()]);\n   }\n\n","sourceOld":"  /**\n   * Returns an array of {@link Field}s with the given name.\n   * This method can return <code>null</code>.\n   * Do not use with lazy loaded fields.\n   *\n   * @param name the name of the field\n   * @return a <code>Field[]</code> array\n   */\n   public final Field[] getFields(String name) {\n     List result = new ArrayList();\n     for (int i = 0; i < fields.size(); i++) {\n       Field field = (Field)fields.get(i);\n       if (field.name().equals(name)) {\n         result.add(field);\n       }\n     }\n\n     if (result.size() == 0)\n       return null;\n\n     return (Field[])result.toArray(new Field[result.size()]);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbf6c7bd2a2227ed1883f39804a356e29a7949a2","date":1205753506,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getFields(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#getFields(String).mjava","sourceNew":"  /**\n   * Returns an array of {@link Field}s with the given name.\n   * Do not use with lazy loaded fields.\n   * This method returns an empty array when there are no\n   * matching fields.  It never returns null.\n   *\n   * @param name the name of the field\n   * @return a <code>Field[]</code> array\n   */\n   public final Field[] getFields(String name) {\n     List result = new ArrayList();\n     for (int i = 0; i < fields.size(); i++) {\n       Field field = (Field)fields.get(i);\n       if (field.name().equals(name)) {\n         result.add(field);\n       }\n     }\n\n     if (result.size() == 0)\n       return NO_FIELDS;\n\n     return (Field[])result.toArray(new Field[result.size()]);\n   }\n\n","sourceOld":"  /**\n   * Returns an array of {@link Field}s with the given name.\n   * Do not use with lazy loaded fields.\n   *\n   * @param name the name of the field\n   * @return a <code>Field[]</code> array\n   */\n   public final Field[] getFields(String name) {\n     List result = new ArrayList();\n     for (int i = 0; i < fields.size(); i++) {\n       Field field = (Field)fields.get(i);\n       if (field.name().equals(name)) {\n         result.add(field);\n       }\n     }\n\n     if (result.size() == 0)\n       return NO_FIELDS;\n\n     return (Field[])result.toArray(new Field[result.size()]);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a70c362dc47e16ef90835bd9d78415bdceefbd7e","date":1254561360,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getFields(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#getFields(String).mjava","sourceNew":"  /**\n   * Returns an array of {@link Field}s with the given name.\n   * Do not use with lazy loaded fields.\n   * This method returns an empty array when there are no\n   * matching fields.  It never returns null.\n   *\n   * @param name the name of the field\n   * @return a <code>Field[]</code> array\n   */\n   public final Field[] getFields(String name) {\n     List<Field> result = new ArrayList<Field>();\n     for (Fieldable field : fields) {\n       if (field.name().equals(name)) {\n         result.add((Field) field);\n       }\n     }\n\n     if (result.size() == 0)\n       return NO_FIELDS;\n\n     return (Field[])result.toArray(new Field[result.size()]);\n   }\n\n","sourceOld":"  /**\n   * Returns an array of {@link Field}s with the given name.\n   * Do not use with lazy loaded fields.\n   * This method returns an empty array when there are no\n   * matching fields.  It never returns null.\n   *\n   * @param name the name of the field\n   * @return a <code>Field[]</code> array\n   */\n   public final Field[] getFields(String name) {\n     List result = new ArrayList();\n     for (int i = 0; i < fields.size(); i++) {\n       Field field = (Field)fields.get(i);\n       if (field.name().equals(name)) {\n         result.add(field);\n       }\n     }\n\n     if (result.size() == 0)\n       return NO_FIELDS;\n\n     return (Field[])result.toArray(new Field[result.size()]);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f63c5771d883c45d43e7d5ac11344582906f7d17","date":1256132259,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Document#getFields(String).mjava","pathOld":"src/java/org/apache/lucene/document/Document#getFields(String).mjava","sourceNew":"  /**\n   * Returns an array of {@link Field}s with the given name.\n   * Do not use with lazy loaded fields.\n   * This method returns an empty array when there are no\n   * matching fields.  It never returns null.\n   *\n   * @param name the name of the field\n   * @return a <code>Field[]</code> array\n   */\n   public final Field[] getFields(String name) {\n     List<Field> result = new ArrayList<Field>();\n     for (Fieldable field : fields) {\n       if (field.name().equals(name)) {\n         result.add((Field) field);\n       }\n     }\n\n     if (result.size() == 0)\n       return NO_FIELDS;\n\n     return result.toArray(new Field[result.size()]);\n   }\n\n","sourceOld":"  /**\n   * Returns an array of {@link Field}s with the given name.\n   * Do not use with lazy loaded fields.\n   * This method returns an empty array when there are no\n   * matching fields.  It never returns null.\n   *\n   * @param name the name of the field\n   * @return a <code>Field[]</code> array\n   */\n   public final Field[] getFields(String name) {\n     List<Field> result = new ArrayList<Field>();\n     for (Fieldable field : fields) {\n       if (field.name().equals(name)) {\n         result.add((Field) field);\n       }\n     }\n\n     if (result.size() == 0)\n       return NO_FIELDS;\n\n     return (Field[])result.toArray(new Field[result.size()]);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/document/Document#getFields(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns an array of {@link Field}s with the given name.\n   * Do not use with lazy loaded fields.\n   * This method returns an empty array when there are no\n   * matching fields.  It never returns null.\n   *\n   * @param name the name of the field\n   * @return a <code>Field[]</code> array\n   */\n   public final Field[] getFields(String name) {\n     List<Field> result = new ArrayList<Field>();\n     for (Fieldable field : fields) {\n       if (field.name().equals(name)) {\n         result.add((Field) field);\n       }\n     }\n\n     if (result.size() == 0)\n       return NO_FIELDS;\n\n     return result.toArray(new Field[result.size()]);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f01f28d422fb8f120bbdfd69b63e199d848415f":["044cc6e1551cd0687478395eeceb9cde12caf10b"],"f63c5771d883c45d43e7d5ac11344582906f7d17":["a70c362dc47e16ef90835bd9d78415bdceefbd7e"],"044cc6e1551cd0687478395eeceb9cde12caf10b":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["29d597fb9cab5d0207f322b489e4260b6758531f"],"bc59af24137a8855e59731feeea3c95c72c35542":["e471b4e6ba118157929336dab998d9290232326b"],"d750531b1c5e8c9bab02396b2b22f8ce02fada9f":["bc59af24137a8855e59731feeea3c95c72c35542"],"a70c362dc47e16ef90835bd9d78415bdceefbd7e":["dbf6c7bd2a2227ed1883f39804a356e29a7949a2"],"4eb734dc106080869b1e7a65b9a7275b16ffb8b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dbf6c7bd2a2227ed1883f39804a356e29a7949a2":["3f01f28d422fb8f120bbdfd69b63e199d848415f"],"29d597fb9cab5d0207f322b489e4260b6758531f":["d750531b1c5e8c9bab02396b2b22f8ce02fada9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f63c5771d883c45d43e7d5ac11344582906f7d17"],"e471b4e6ba118157929336dab998d9290232326b":["4eb734dc106080869b1e7a65b9a7275b16ffb8b1"]},"commit2Childs":{"3f01f28d422fb8f120bbdfd69b63e199d848415f":["dbf6c7bd2a2227ed1883f39804a356e29a7949a2"],"044cc6e1551cd0687478395eeceb9cde12caf10b":["3f01f28d422fb8f120bbdfd69b63e199d848415f"],"f63c5771d883c45d43e7d5ac11344582906f7d17":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["044cc6e1551cd0687478395eeceb9cde12caf10b"],"bc59af24137a8855e59731feeea3c95c72c35542":["d750531b1c5e8c9bab02396b2b22f8ce02fada9f"],"d750531b1c5e8c9bab02396b2b22f8ce02fada9f":["29d597fb9cab5d0207f322b489e4260b6758531f"],"a70c362dc47e16ef90835bd9d78415bdceefbd7e":["f63c5771d883c45d43e7d5ac11344582906f7d17"],"4eb734dc106080869b1e7a65b9a7275b16ffb8b1":["e471b4e6ba118157929336dab998d9290232326b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4eb734dc106080869b1e7a65b9a7275b16ffb8b1"],"29d597fb9cab5d0207f322b489e4260b6758531f":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"dbf6c7bd2a2227ed1883f39804a356e29a7949a2":["a70c362dc47e16ef90835bd9d78415bdceefbd7e"],"e471b4e6ba118157929336dab998d9290232326b":["bc59af24137a8855e59731feeea3c95c72c35542"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}