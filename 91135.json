{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/TaskStats#add(TaskStats).mjava","commits":[{"id":"b2e70b697d9f5a6130848741a4f0cdc08a1fe258","date":1168661303,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/TaskStats#add(TaskStats).mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Add data from another stat, for aggregation\r\n   * @param stat2 the added stat data.\r\n   */\r\n  public void add(TaskStats stat2) {\r\n    numRuns += stat2.getNumRuns();\r\n    elapsed += stat2.getElapsed();\r\n    maxTotMem += stat2.getMaxTotMem();\r\n    maxUsedMem += stat2.getMaxUsedMem();\r\n    count += stat2.getCount();\r\n    if (round != stat2.round) {\r\n      round = -1; // no meaning if agregating tasks of different ruond. \r\n    }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3738fa43eaa87dc7b393fe98b04cde1019e20bac","date":1175557034,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/TaskStats#add(TaskStats).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/TaskStats#add(TaskStats).mjava","sourceNew":"  /**\n   * Add data from another stat, for aggregation\n   * @param stat2 the added stat data.\n   */\n  public void add(TaskStats stat2) {\n    numRuns += stat2.getNumRuns();\n    elapsed += stat2.getElapsed();\n    maxTotMem += stat2.getMaxTotMem();\n    maxUsedMem += stat2.getMaxUsedMem();\n    count += stat2.getCount();\n    if (round != stat2.round) {\n      round = -1; // no meaning if agregating tasks of different ruond. \n    }\n  }\n\n","sourceOld":"  /**\r\n   * Add data from another stat, for aggregation\r\n   * @param stat2 the added stat data.\r\n   */\r\n  public void add(TaskStats stat2) {\r\n    numRuns += stat2.getNumRuns();\r\n    elapsed += stat2.getElapsed();\r\n    maxTotMem += stat2.getMaxTotMem();\r\n    maxUsedMem += stat2.getMaxUsedMem();\r\n    count += stat2.getCount();\r\n    if (round != stat2.round) {\r\n      round = -1; // no meaning if agregating tasks of different ruond. \r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add7d922e63099fbce8f0a1b31216df7ef5067f1","date":1252002701,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/TaskStats#add(TaskStats).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/TaskStats#add(TaskStats).mjava","sourceNew":"  /**\n   * Add data from another stat, for aggregation\n   * @param stat2 the added stat data.\n   */\n  public void add(TaskStats stat2) {\n    numRuns += stat2.getNumRuns();\n    elapsed += stat2.getElapsed();\n    maxTotMem += stat2.getMaxTotMem();\n    maxUsedMem += stat2.getMaxUsedMem();\n    count += stat2.getCount();\n    if (round != stat2.round) {\n      round = -1; // no meaning if aggregating tasks of different round. \n    }\n  }\n\n","sourceOld":"  /**\n   * Add data from another stat, for aggregation\n   * @param stat2 the added stat data.\n   */\n  public void add(TaskStats stat2) {\n    numRuns += stat2.getNumRuns();\n    elapsed += stat2.getElapsed();\n    maxTotMem += stat2.getMaxTotMem();\n    maxUsedMem += stat2.getMaxUsedMem();\n    count += stat2.getCount();\n    if (round != stat2.round) {\n      round = -1; // no meaning if agregating tasks of different ruond. \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5ebdc25cde64f1bd2b6337721292bdd1b23f714","date":1258737814,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/TaskStats#add(TaskStats).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/TaskStats#add(TaskStats).mjava","sourceNew":"  /**\n   * Add data from another stat, for aggregation\n   * @param stat2 the added stat data.\n   */\n  public void add(TaskStats stat2) {\n    numRuns += stat2.getNumRuns();\n    elapsed += stat2.getElapsed();\n    maxTotMem += stat2.getMaxTotMem();\n    maxUsedMem += stat2.getMaxUsedMem();\n    count += stat2.getCount();\n    if (round != stat2.round) {\n      round = -1; // no meaning if aggregating tasks of different round. \n    }\n\n    if (countsByTime != null && stat2.countsByTime != null) {\n      if (countsByTimeStepMSec != stat2.countsByTimeStepMSec) {\n        throw new IllegalStateException(\"different by-time msec step\");\n      }\n      if (countsByTime.length != stat2.countsByTime.length) {\n        throw new IllegalStateException(\"different by-time msec count\");\n      }\n      for(int i=0;i<stat2.countsByTime.length;i++) {\n        countsByTime[i] += stat2.countsByTime[i];\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Add data from another stat, for aggregation\n   * @param stat2 the added stat data.\n   */\n  public void add(TaskStats stat2) {\n    numRuns += stat2.getNumRuns();\n    elapsed += stat2.getElapsed();\n    maxTotMem += stat2.getMaxTotMem();\n    maxUsedMem += stat2.getMaxUsedMem();\n    count += stat2.getCount();\n    if (round != stat2.round) {\n      round = -1; // no meaning if aggregating tasks of different round. \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/TaskStats#add(TaskStats).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/stats/TaskStats#add(TaskStats).mjava","sourceNew":"  /**\n   * Add data from another stat, for aggregation\n   * @param stat2 the added stat data.\n   */\n  public void add(TaskStats stat2) {\n    numRuns += stat2.getNumRuns();\n    elapsed += stat2.getElapsed();\n    maxTotMem += stat2.getMaxTotMem();\n    maxUsedMem += stat2.getMaxUsedMem();\n    count += stat2.getCount();\n    if (round != stat2.round) {\n      round = -1; // no meaning if aggregating tasks of different round. \n    }\n\n    if (countsByTime != null && stat2.countsByTime != null) {\n      if (countsByTimeStepMSec != stat2.countsByTimeStepMSec) {\n        throw new IllegalStateException(\"different by-time msec step\");\n      }\n      if (countsByTime.length != stat2.countsByTime.length) {\n        throw new IllegalStateException(\"different by-time msec count\");\n      }\n      for(int i=0;i<stat2.countsByTime.length;i++) {\n        countsByTime[i] += stat2.countsByTime[i];\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Add data from another stat, for aggregation\n   * @param stat2 the added stat data.\n   */\n  public void add(TaskStats stat2) {\n    numRuns += stat2.getNumRuns();\n    elapsed += stat2.getElapsed();\n    maxTotMem += stat2.getMaxTotMem();\n    maxUsedMem += stat2.getMaxUsedMem();\n    count += stat2.getCount();\n    if (round != stat2.round) {\n      round = -1; // no meaning if aggregating tasks of different round. \n    }\n\n    if (countsByTime != null && stat2.countsByTime != null) {\n      if (countsByTimeStepMSec != stat2.countsByTimeStepMSec) {\n        throw new IllegalStateException(\"different by-time msec step\");\n      }\n      if (countsByTime.length != stat2.countsByTime.length) {\n        throw new IllegalStateException(\"different by-time msec count\");\n      }\n      for(int i=0;i<stat2.countsByTime.length;i++) {\n        countsByTime[i] += stat2.countsByTime[i];\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"add7d922e63099fbce8f0a1b31216df7ef5067f1":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"f5ebdc25cde64f1bd2b6337721292bdd1b23f714":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f5ebdc25cde64f1bd2b6337721292bdd1b23f714"]},"commit2Childs":{"add7d922e63099fbce8f0a1b31216df7ef5067f1":["f5ebdc25cde64f1bd2b6337721292bdd1b23f714"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"f5ebdc25cde64f1bd2b6337721292bdd1b23f714":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}