{"path":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#testGarbageParsing().mjava","commits":[{"id":"d5bc8e25f59990525f5beb14afe9c96240dcf4a2","date":1389042945,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#testGarbageParsing().mjava","pathOld":"/dev/null","sourceNew":"  public void testGarbageParsing() {\n    final SolrQueryRequest req = req();\n    final IndexSchema schema = req.getSchema();\n    final SortSpec ss = QueryParsing.parseSortSpec(\"str asc, float desc, id asc\", req);\n    final CursorMark totem = new CursorMark(schema, ss);\n\n    // totem string that isn't even valid base64\n    try {\n      totem.parseSerializedTotem(\"all the documents please\");\n      fail(\"didn't fail on invalid base64 totem\");\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(e.getMessage().contains(\"Unable to parse 'cursorMark'\"));\n    }\n\n    // empty totem string\n    try {\n      totem.parseSerializedTotem(\"\");\n      fail(\"didn't fail on empty totem\");\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(e.getMessage().contains(\"Unable to parse 'cursorMark'\"));\n    }\n\n    // whitespace-only totem string\n    try {\n      totem.parseSerializedTotem(\"       \");\n      fail(\"didn't fail on whitespace-only totem\");\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(e.getMessage().contains(\"Unable to parse 'cursorMark'\"));\n    }\n\n    // totem string from sort with diff num clauses\n    try {\n      final SortSpec otherSort = QueryParsing.parseSortSpec(\"double desc, id asc\", req);\n      final CursorMark otherTotem = new CursorMark(schema, otherSort);\n      otherTotem.setSortValues(Arrays.<Object>asList(buildRandomSortObjects(otherSort)));\n      \n      totem.parseSerializedTotem(otherTotem.getSerializedTotem());\n      fail(\"didn't fail on totem from incorrect sort (num clauses)\");\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(e.getMessage().contains(\"wrong size\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd3693b696a64d987bf4b3a14399d2105f16b05e","date":1396054865,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#testGarbageParsing().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#testGarbageParsing().mjava","sourceNew":"  public void testGarbageParsing() throws IOException {\n    final SolrQueryRequest req = req();\n    final IndexSchema schema = req.getSchema();\n    final SortSpec ss = QueryParsing.parseSortSpec(\"str asc, float desc, id asc\", req);\n    final CursorMark totem = new CursorMark(schema, ss);\n\n    // totem string that isn't even valid base64\n    try {\n      totem.parseSerializedTotem(\"all the documents please\");\n      fail(\"didn't fail on invalid base64 totem\");\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(e.getMessage().contains(\"Unable to parse 'cursorMark'\"));\n    }\n\n    // empty totem string\n    try {\n      totem.parseSerializedTotem(\"\");\n      fail(\"didn't fail on empty totem\");\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(e.getMessage().contains(\"Unable to parse 'cursorMark'\"));\n    }\n\n    // whitespace-only totem string\n    try {\n      totem.parseSerializedTotem(\"       \");\n      fail(\"didn't fail on whitespace-only totem\");\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(e.getMessage().contains(\"Unable to parse 'cursorMark'\"));\n    }\n\n    // totem string from sort with diff num clauses\n    try {\n      final SortSpec otherSort = QueryParsing.parseSortSpec(\"double desc, id asc\", req);\n      final CursorMark otherTotem = new CursorMark(schema, otherSort);\n      otherTotem.setSortValues(Arrays.<Object>asList(buildRandomSortObjects(otherSort)));\n      \n      totem.parseSerializedTotem(otherTotem.getSerializedTotem());\n      fail(\"didn't fail on totem from incorrect sort (num clauses)\");\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(e.getMessage().contains(\"wrong size\"));\n    }\n  }\n\n","sourceOld":"  public void testGarbageParsing() {\n    final SolrQueryRequest req = req();\n    final IndexSchema schema = req.getSchema();\n    final SortSpec ss = QueryParsing.parseSortSpec(\"str asc, float desc, id asc\", req);\n    final CursorMark totem = new CursorMark(schema, ss);\n\n    // totem string that isn't even valid base64\n    try {\n      totem.parseSerializedTotem(\"all the documents please\");\n      fail(\"didn't fail on invalid base64 totem\");\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(e.getMessage().contains(\"Unable to parse 'cursorMark'\"));\n    }\n\n    // empty totem string\n    try {\n      totem.parseSerializedTotem(\"\");\n      fail(\"didn't fail on empty totem\");\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(e.getMessage().contains(\"Unable to parse 'cursorMark'\"));\n    }\n\n    // whitespace-only totem string\n    try {\n      totem.parseSerializedTotem(\"       \");\n      fail(\"didn't fail on whitespace-only totem\");\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(e.getMessage().contains(\"Unable to parse 'cursorMark'\"));\n    }\n\n    // totem string from sort with diff num clauses\n    try {\n      final SortSpec otherSort = QueryParsing.parseSortSpec(\"double desc, id asc\", req);\n      final CursorMark otherTotem = new CursorMark(schema, otherSort);\n      otherTotem.setSortValues(Arrays.<Object>asList(buildRandomSortObjects(otherSort)));\n      \n      totem.parseSerializedTotem(otherTotem.getSerializedTotem());\n      fail(\"didn't fail on totem from incorrect sort (num clauses)\");\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(e.getMessage().contains(\"wrong size\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#testGarbageParsing().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#testGarbageParsing().mjava","sourceNew":"  public void testGarbageParsing() throws IOException {\n    final SolrQueryRequest req = req();\n    final IndexSchema schema = req.getSchema();\n    final SortSpec ss = QueryParsing.parseSortSpec(\"str asc, float desc, id asc\", req);\n    final CursorMark totem = new CursorMark(schema, ss);\n\n    // totem string that isn't even valid base64\n    try {\n      totem.parseSerializedTotem(\"all the documents please\");\n      fail(\"didn't fail on invalid base64 totem\");\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(e.getMessage().contains(\"Unable to parse 'cursorMark'\"));\n    }\n\n    // empty totem string\n    try {\n      totem.parseSerializedTotem(\"\");\n      fail(\"didn't fail on empty totem\");\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(e.getMessage().contains(\"Unable to parse 'cursorMark'\"));\n    }\n\n    // whitespace-only totem string\n    try {\n      totem.parseSerializedTotem(\"       \");\n      fail(\"didn't fail on whitespace-only totem\");\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(e.getMessage().contains(\"Unable to parse 'cursorMark'\"));\n    }\n\n    // totem string from sort with diff num clauses\n    try {\n      final SortSpec otherSort = QueryParsing.parseSortSpec(\"double desc, id asc\", req);\n      final CursorMark otherTotem = new CursorMark(schema, otherSort);\n      otherTotem.setSortValues(Arrays.<Object>asList(buildRandomSortObjects(otherSort)));\n      \n      totem.parseSerializedTotem(otherTotem.getSerializedTotem());\n      fail(\"didn't fail on totem from incorrect sort (num clauses)\");\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(e.getMessage().contains(\"wrong size\"));\n    }\n  }\n\n","sourceOld":"  public void testGarbageParsing() {\n    final SolrQueryRequest req = req();\n    final IndexSchema schema = req.getSchema();\n    final SortSpec ss = QueryParsing.parseSortSpec(\"str asc, float desc, id asc\", req);\n    final CursorMark totem = new CursorMark(schema, ss);\n\n    // totem string that isn't even valid base64\n    try {\n      totem.parseSerializedTotem(\"all the documents please\");\n      fail(\"didn't fail on invalid base64 totem\");\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(e.getMessage().contains(\"Unable to parse 'cursorMark'\"));\n    }\n\n    // empty totem string\n    try {\n      totem.parseSerializedTotem(\"\");\n      fail(\"didn't fail on empty totem\");\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(e.getMessage().contains(\"Unable to parse 'cursorMark'\"));\n    }\n\n    // whitespace-only totem string\n    try {\n      totem.parseSerializedTotem(\"       \");\n      fail(\"didn't fail on whitespace-only totem\");\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(e.getMessage().contains(\"Unable to parse 'cursorMark'\"));\n    }\n\n    // totem string from sort with diff num clauses\n    try {\n      final SortSpec otherSort = QueryParsing.parseSortSpec(\"double desc, id asc\", req);\n      final CursorMark otherTotem = new CursorMark(schema, otherSort);\n      otherTotem.setSortValues(Arrays.<Object>asList(buildRandomSortObjects(otherSort)));\n      \n      totem.parseSerializedTotem(otherTotem.getSerializedTotem());\n      fail(\"didn't fail on totem from incorrect sort (num clauses)\");\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(e.getMessage().contains(\"wrong size\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c8dc56dbae186505066de8a78986cba31525ef0","date":1447876120,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#testGarbageParsing().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#testGarbageParsing().mjava","sourceNew":"  public void testGarbageParsing() throws IOException {\n    final SolrQueryRequest req = req();\n    final IndexSchema schema = req.getSchema();\n    final SortSpec ss = SortSpecParsing.parseSortSpec(\"str asc, float desc, id asc\", req);\n    final CursorMark totem = new CursorMark(schema, ss);\n\n    // totem string that isn't even valid base64\n    try {\n      totem.parseSerializedTotem(\"all the documents please\");\n      fail(\"didn't fail on invalid base64 totem\");\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(e.getMessage().contains(\"Unable to parse 'cursorMark'\"));\n    }\n\n    // empty totem string\n    try {\n      totem.parseSerializedTotem(\"\");\n      fail(\"didn't fail on empty totem\");\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(e.getMessage().contains(\"Unable to parse 'cursorMark'\"));\n    }\n\n    // whitespace-only totem string\n    try {\n      totem.parseSerializedTotem(\"       \");\n      fail(\"didn't fail on whitespace-only totem\");\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(e.getMessage().contains(\"Unable to parse 'cursorMark'\"));\n    }\n\n    // totem string from sort with diff num clauses\n    try {\n      final SortSpec otherSort = SortSpecParsing.parseSortSpec(\"double desc, id asc\", req);\n      final CursorMark otherTotem = new CursorMark(schema, otherSort);\n      otherTotem.setSortValues(Arrays.<Object>asList(buildRandomSortObjects(otherSort)));\n      \n      totem.parseSerializedTotem(otherTotem.getSerializedTotem());\n      fail(\"didn't fail on totem from incorrect sort (num clauses)\");\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(e.getMessage().contains(\"wrong size\"));\n    }\n  }\n\n","sourceOld":"  public void testGarbageParsing() throws IOException {\n    final SolrQueryRequest req = req();\n    final IndexSchema schema = req.getSchema();\n    final SortSpec ss = QueryParsing.parseSortSpec(\"str asc, float desc, id asc\", req);\n    final CursorMark totem = new CursorMark(schema, ss);\n\n    // totem string that isn't even valid base64\n    try {\n      totem.parseSerializedTotem(\"all the documents please\");\n      fail(\"didn't fail on invalid base64 totem\");\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(e.getMessage().contains(\"Unable to parse 'cursorMark'\"));\n    }\n\n    // empty totem string\n    try {\n      totem.parseSerializedTotem(\"\");\n      fail(\"didn't fail on empty totem\");\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(e.getMessage().contains(\"Unable to parse 'cursorMark'\"));\n    }\n\n    // whitespace-only totem string\n    try {\n      totem.parseSerializedTotem(\"       \");\n      fail(\"didn't fail on whitespace-only totem\");\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(e.getMessage().contains(\"Unable to parse 'cursorMark'\"));\n    }\n\n    // totem string from sort with diff num clauses\n    try {\n      final SortSpec otherSort = QueryParsing.parseSortSpec(\"double desc, id asc\", req);\n      final CursorMark otherTotem = new CursorMark(schema, otherSort);\n      otherTotem.setSortValues(Arrays.<Object>asList(buildRandomSortObjects(otherSort)));\n      \n      totem.parseSerializedTotem(otherTotem.getSerializedTotem());\n      fail(\"didn't fail on totem from incorrect sort (num clauses)\");\n    } catch (SolrException e) {\n      assertEquals(ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(e.getMessage().contains(\"wrong size\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2","cd3693b696a64d987bf4b3a14399d2105f16b05e"],"6c8dc56dbae186505066de8a78986cba31525ef0":["cd3693b696a64d987bf4b3a14399d2105f16b05e"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd3693b696a64d987bf4b3a14399d2105f16b05e":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6c8dc56dbae186505066de8a78986cba31525ef0"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"6c8dc56dbae186505066de8a78986cba31525ef0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["5eb2511ababf862ea11e10761c70ee560cd84510","cd3693b696a64d987bf4b3a14399d2105f16b05e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"cd3693b696a64d987bf4b3a14399d2105f16b05e":["5eb2511ababf862ea11e10761c70ee560cd84510","6c8dc56dbae186505066de8a78986cba31525ef0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}