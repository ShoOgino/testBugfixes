{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#add(Term,DeleteSlice).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#add(Term,DeleteSlice).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#add(Term,DeleteSlice).mjava","sourceNew":"  /**\n   * invariant for document update\n   */\n  void add(Term term, DeleteSlice slice) {\n    final TermNode termNode = new TermNode(term);\n//    System.out.println(Thread.currentThread().getName() + \": push \" + termNode + \" this=\" + this);\n    add(termNode);\n    /*\n     * this is an update request where the term is the updated documents\n     * delTerm. in that case we need to guarantee that this insert is atomic\n     * with regards to the given delete slice. This means if two threads try to\n     * update the same document with in turn the same delTerm one of them must\n     * win. By taking the node we have created for our del term as the new tail\n     * it is guaranteed that if another thread adds the same right after us we\n     * will apply this delete next time we update our slice and one of the two\n     * competing updates wins!\n     */\n    slice.sliceTail = termNode;\n    assert slice.sliceHead != slice.sliceTail : \"slice head and tail must differ after add\";\n    tryApplyGlobalSlice(); // TODO doing this each time is not necessary maybe\n    // we can do it just every n times or so?\n  }\n\n","sourceOld":"  /**\n   * invariant for document update\n   */\n  void add(Term term, DeleteSlice slice) {\n    final TermNode termNode = new TermNode(term);\n//    System.out.println(Thread.currentThread().getName() + \": push \" + termNode + \" this=\" + this);\n    add(termNode);\n    /*\n     * this is an update request where the term is the updated documents\n     * delTerm. in that case we need to guarantee that this insert is atomic\n     * with regards to the given delete slice. This means if two threads try to\n     * update the same document with in turn the same delTerm one of them must\n     * win. By taking the node we have created for our del term as the new tail\n     * it is guaranteed that if another thread adds the same right after us we\n     * will apply this delete next time we update our slice and one of the two\n     * competing updates wins!\n     */\n    slice.sliceTail = termNode;\n    assert slice.sliceHead != slice.sliceTail : \"slice head and tail must differ after add\";\n    tryApplyGlobalSlice(); // TODO doing this each time is not necessary maybe\n    // we can do it just every n times or so?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f492fe129985750df09c8dac738aecc503158bb3","date":1464099630,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#add(Term,DeleteSlice).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#add(Term,DeleteSlice).mjava","sourceNew":"  /**\n   * invariant for document update\n   */\n  long add(Term term, DeleteSlice slice) {\n    final TermNode termNode = new TermNode(term);\n//    System.out.println(Thread.currentThread().getName() + \": push \" + termNode + \" this=\" + this);\n    long seqNo = add(termNode);\n    /*\n     * this is an update request where the term is the updated documents\n     * delTerm. in that case we need to guarantee that this insert is atomic\n     * with regards to the given delete slice. This means if two threads try to\n     * update the same document with in turn the same delTerm one of them must\n     * win. By taking the node we have created for our del term as the new tail\n     * it is guaranteed that if another thread adds the same right after us we\n     * will apply this delete next time we update our slice and one of the two\n     * competing updates wins!\n     */\n    slice.sliceTail = termNode;\n    assert slice.sliceHead != slice.sliceTail : \"slice head and tail must differ after add\";\n    tryApplyGlobalSlice(); // TODO doing this each time is not necessary maybe\n    // we can do it just every n times or so?\n\n    return seqNo;\n  }\n\n","sourceOld":"  /**\n   * invariant for document update\n   */\n  void add(Term term, DeleteSlice slice) {\n    final TermNode termNode = new TermNode(term);\n//    System.out.println(Thread.currentThread().getName() + \": push \" + termNode + \" this=\" + this);\n    add(termNode);\n    /*\n     * this is an update request where the term is the updated documents\n     * delTerm. in that case we need to guarantee that this insert is atomic\n     * with regards to the given delete slice. This means if two threads try to\n     * update the same document with in turn the same delTerm one of them must\n     * win. By taking the node we have created for our del term as the new tail\n     * it is guaranteed that if another thread adds the same right after us we\n     * will apply this delete next time we update our slice and one of the two\n     * competing updates wins!\n     */\n    slice.sliceTail = termNode;\n    assert slice.sliceHead != slice.sliceTail : \"slice head and tail must differ after add\";\n    tryApplyGlobalSlice(); // TODO doing this each time is not necessary maybe\n    // we can do it just every n times or so?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"122251c49e5a9fa95f056ea257ae3ab452099fc7","date":1464820065,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#add(Term,DeleteSlice).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#add(Term,DeleteSlice).mjava","sourceNew":"  /**\n   * invariant for document update\n   */\n  long add(Term term, DeleteSlice slice) {\n    final TermNode termNode = new TermNode(term);\n    long seqNo = add(termNode);\n    /*\n     * this is an update request where the term is the updated documents\n     * delTerm. in that case we need to guarantee that this insert is atomic\n     * with regards to the given delete slice. This means if two threads try to\n     * update the same document with in turn the same delTerm one of them must\n     * win. By taking the node we have created for our del term as the new tail\n     * it is guaranteed that if another thread adds the same right after us we\n     * will apply this delete next time we update our slice and one of the two\n     * competing updates wins!\n     */\n    slice.sliceTail = termNode;\n    assert slice.sliceHead != slice.sliceTail : \"slice head and tail must differ after add\";\n    tryApplyGlobalSlice(); // TODO doing this each time is not necessary maybe\n    // we can do it just every n times or so?\n\n    return seqNo;\n  }\n\n","sourceOld":"  /**\n   * invariant for document update\n   */\n  long add(Term term, DeleteSlice slice) {\n    final TermNode termNode = new TermNode(term);\n//    System.out.println(Thread.currentThread().getName() + \": push \" + termNode + \" this=\" + this);\n    long seqNo = add(termNode);\n    /*\n     * this is an update request where the term is the updated documents\n     * delTerm. in that case we need to guarantee that this insert is atomic\n     * with regards to the given delete slice. This means if two threads try to\n     * update the same document with in turn the same delTerm one of them must\n     * win. By taking the node we have created for our del term as the new tail\n     * it is guaranteed that if another thread adds the same right after us we\n     * will apply this delete next time we update our slice and one of the two\n     * competing updates wins!\n     */\n    slice.sliceTail = termNode;\n    assert slice.sliceHead != slice.sliceTail : \"slice head and tail must differ after add\";\n    tryApplyGlobalSlice(); // TODO doing this each time is not necessary maybe\n    // we can do it just every n times or so?\n\n    return seqNo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#add(Term,DeleteSlice).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#add(Term,DeleteSlice).mjava","sourceNew":"  /**\n   * invariant for document update\n   */\n  long add(Term term, DeleteSlice slice) {\n    final TermNode termNode = new TermNode(term);\n    long seqNo = add(termNode);\n    /*\n     * this is an update request where the term is the updated documents\n     * delTerm. in that case we need to guarantee that this insert is atomic\n     * with regards to the given delete slice. This means if two threads try to\n     * update the same document with in turn the same delTerm one of them must\n     * win. By taking the node we have created for our del term as the new tail\n     * it is guaranteed that if another thread adds the same right after us we\n     * will apply this delete next time we update our slice and one of the two\n     * competing updates wins!\n     */\n    slice.sliceTail = termNode;\n    assert slice.sliceHead != slice.sliceTail : \"slice head and tail must differ after add\";\n    tryApplyGlobalSlice(); // TODO doing this each time is not necessary maybe\n    // we can do it just every n times or so?\n\n    return seqNo;\n  }\n\n","sourceOld":"  /**\n   * invariant for document update\n   */\n  long add(Term term, DeleteSlice slice) {\n    final TermNode termNode = new TermNode(term);\n//    System.out.println(Thread.currentThread().getName() + \": push \" + termNode + \" this=\" + this);\n    long seqNo = add(termNode);\n    /*\n     * this is an update request where the term is the updated documents\n     * delTerm. in that case we need to guarantee that this insert is atomic\n     * with regards to the given delete slice. This means if two threads try to\n     * update the same document with in turn the same delTerm one of them must\n     * win. By taking the node we have created for our del term as the new tail\n     * it is guaranteed that if another thread adds the same right after us we\n     * will apply this delete next time we update our slice and one of the two\n     * competing updates wins!\n     */\n    slice.sliceTail = termNode;\n    assert slice.sliceHead != slice.sliceTail : \"slice head and tail must differ after add\";\n    tryApplyGlobalSlice(); // TODO doing this each time is not necessary maybe\n    // we can do it just every n times or so?\n\n    return seqNo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6483e4260c08168709c02238ae083a51519a28dd","date":1465117546,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#add(Term,DeleteSlice).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#add(Term,DeleteSlice).mjava","sourceNew":"  /**\n   * invariant for document update\n   */\n  long add(Term term, DeleteSlice slice) {\n    final TermNode termNode = new TermNode(term);\n    long seqNo = add(termNode);\n    /*\n     * this is an update request where the term is the updated documents\n     * delTerm. in that case we need to guarantee that this insert is atomic\n     * with regards to the given delete slice. This means if two threads try to\n     * update the same document with in turn the same delTerm one of them must\n     * win. By taking the node we have created for our del term as the new tail\n     * it is guaranteed that if another thread adds the same right after us we\n     * will apply this delete next time we update our slice and one of the two\n     * competing updates wins!\n     */\n    slice.sliceTail = termNode;\n    assert slice.sliceHead != slice.sliceTail : \"slice head and tail must differ after add\";\n    tryApplyGlobalSlice(); // TODO doing this each time is not necessary maybe\n    // we can do it just every n times or so?\n\n    return seqNo;\n  }\n\n","sourceOld":"  /**\n   * invariant for document update\n   */\n  void add(Term term, DeleteSlice slice) {\n    final TermNode termNode = new TermNode(term);\n//    System.out.println(Thread.currentThread().getName() + \": push \" + termNode + \" this=\" + this);\n    add(termNode);\n    /*\n     * this is an update request where the term is the updated documents\n     * delTerm. in that case we need to guarantee that this insert is atomic\n     * with regards to the given delete slice. This means if two threads try to\n     * update the same document with in turn the same delTerm one of them must\n     * win. By taking the node we have created for our del term as the new tail\n     * it is guaranteed that if another thread adds the same right after us we\n     * will apply this delete next time we update our slice and one of the two\n     * competing updates wins!\n     */\n    slice.sliceTail = termNode;\n    assert slice.sliceHead != slice.sliceTail : \"slice head and tail must differ after add\";\n    tryApplyGlobalSlice(); // TODO doing this each time is not necessary maybe\n    // we can do it just every n times or so?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#add(Term,DeleteSlice).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#add(Term,DeleteSlice).mjava","sourceNew":"  /**\n   * invariant for document update\n   */\n  long add(Term term, DeleteSlice slice) {\n    final TermNode termNode = new TermNode(term);\n    long seqNo = add(termNode);\n    /*\n     * this is an update request where the term is the updated documents\n     * delTerm. in that case we need to guarantee that this insert is atomic\n     * with regards to the given delete slice. This means if two threads try to\n     * update the same document with in turn the same delTerm one of them must\n     * win. By taking the node we have created for our del term as the new tail\n     * it is guaranteed that if another thread adds the same right after us we\n     * will apply this delete next time we update our slice and one of the two\n     * competing updates wins!\n     */\n    slice.sliceTail = termNode;\n    assert slice.sliceHead != slice.sliceTail : \"slice head and tail must differ after add\";\n    tryApplyGlobalSlice(); // TODO doing this each time is not necessary maybe\n    // we can do it just every n times or so?\n\n    return seqNo;\n  }\n\n","sourceOld":"  /**\n   * invariant for document update\n   */\n  void add(Term term, DeleteSlice slice) {\n    final TermNode termNode = new TermNode(term);\n//    System.out.println(Thread.currentThread().getName() + \": push \" + termNode + \" this=\" + this);\n    add(termNode);\n    /*\n     * this is an update request where the term is the updated documents\n     * delTerm. in that case we need to guarantee that this insert is atomic\n     * with regards to the given delete slice. This means if two threads try to\n     * update the same document with in turn the same delTerm one of them must\n     * win. By taking the node we have created for our del term as the new tail\n     * it is guaranteed that if another thread adds the same right after us we\n     * will apply this delete next time we update our slice and one of the two\n     * competing updates wins!\n     */\n    slice.sliceTail = termNode;\n    assert slice.sliceHead != slice.sliceTail : \"slice head and tail must differ after add\";\n    tryApplyGlobalSlice(); // TODO doing this each time is not necessary maybe\n    // we can do it just every n times or so?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#add(Term,DeleteSlice).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#add(Term,DeleteSlice).mjava","sourceNew":"  /**\n   * invariant for document update\n   */\n  long add(Term term, DeleteSlice slice) {\n    final TermNode termNode = new TermNode(term);\n    long seqNo = add(termNode);\n    /*\n     * this is an update request where the term is the updated documents\n     * delTerm. in that case we need to guarantee that this insert is atomic\n     * with regards to the given delete slice. This means if two threads try to\n     * update the same document with in turn the same delTerm one of them must\n     * win. By taking the node we have created for our del term as the new tail\n     * it is guaranteed that if another thread adds the same right after us we\n     * will apply this delete next time we update our slice and one of the two\n     * competing updates wins!\n     */\n    slice.sliceTail = termNode;\n    assert slice.sliceHead != slice.sliceTail : \"slice head and tail must differ after add\";\n    tryApplyGlobalSlice(); // TODO doing this each time is not necessary maybe\n    // we can do it just every n times or so?\n\n    return seqNo;\n  }\n\n","sourceOld":"  /**\n   * invariant for document update\n   */\n  void add(Term term, DeleteSlice slice) {\n    final TermNode termNode = new TermNode(term);\n//    System.out.println(Thread.currentThread().getName() + \": push \" + termNode + \" this=\" + this);\n    add(termNode);\n    /*\n     * this is an update request where the term is the updated documents\n     * delTerm. in that case we need to guarantee that this insert is atomic\n     * with regards to the given delete slice. This means if two threads try to\n     * update the same document with in turn the same delTerm one of them must\n     * win. By taking the node we have created for our del term as the new tail\n     * it is guaranteed that if another thread adds the same right after us we\n     * will apply this delete next time we update our slice and one of the two\n     * competing updates wins!\n     */\n    slice.sliceTail = termNode;\n    assert slice.sliceHead != slice.sliceTail : \"slice head and tail must differ after add\";\n    tryApplyGlobalSlice(); // TODO doing this each time is not necessary maybe\n    // we can do it just every n times or so?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"110125c995236a7f61057dd04b039ed2d267f3a1","date":1521014987,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#add(Node[#],DeleteSlice).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#add(Term,DeleteSlice).mjava","sourceNew":"  /**\n   * invariant for document update\n   */\n  long add(Node<?> deleteNode, DeleteSlice slice) {\n    long seqNo = add(deleteNode);\n    /*\n     * this is an update request where the term is the updated documents\n     * delTerm. in that case we need to guarantee that this insert is atomic\n     * with regards to the given delete slice. This means if two threads try to\n     * update the same document with in turn the same delTerm one of them must\n     * win. By taking the node we have created for our del term as the new tail\n     * it is guaranteed that if another thread adds the same right after us we\n     * will apply this delete next time we update our slice and one of the two\n     * competing updates wins!\n     */\n    slice.sliceTail = deleteNode;\n    assert slice.sliceHead != slice.sliceTail : \"slice head and tail must differ after add\";\n    tryApplyGlobalSlice(); // TODO doing this each time is not necessary maybe\n    // we can do it just every n times or so?\n\n    return seqNo;\n  }\n\n","sourceOld":"  /**\n   * invariant for document update\n   */\n  long add(Term term, DeleteSlice slice) {\n    final TermNode termNode = new TermNode(term);\n    long seqNo = add(termNode);\n    /*\n     * this is an update request where the term is the updated documents\n     * delTerm. in that case we need to guarantee that this insert is atomic\n     * with regards to the given delete slice. This means if two threads try to\n     * update the same document with in turn the same delTerm one of them must\n     * win. By taking the node we have created for our del term as the new tail\n     * it is guaranteed that if another thread adds the same right after us we\n     * will apply this delete next time we update our slice and one of the two\n     * competing updates wins!\n     */\n    slice.sliceTail = termNode;\n    assert slice.sliceHead != slice.sliceTail : \"slice head and tail must differ after add\";\n    tryApplyGlobalSlice(); // TODO doing this each time is not necessary maybe\n    // we can do it just every n times or so?\n\n    return seqNo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f492fe129985750df09c8dac738aecc503158bb3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6483e4260c08168709c02238ae083a51519a28dd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"191128ac5b85671b1671e2c857437694283b6ebf":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","6483e4260c08168709c02238ae083a51519a28dd"],"110125c995236a7f61057dd04b039ed2d267f3a1":["191128ac5b85671b1671e2c857437694283b6ebf"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["f492fe129985750df09c8dac738aecc503158bb3","122251c49e5a9fa95f056ea257ae3ab452099fc7"],"122251c49e5a9fa95f056ea257ae3ab452099fc7":["f492fe129985750df09c8dac738aecc503158bb3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","191128ac5b85671b1671e2c857437694283b6ebf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["110125c995236a7f61057dd04b039ed2d267f3a1"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f492fe129985750df09c8dac738aecc503158bb3","6483e4260c08168709c02238ae083a51519a28dd","191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f492fe129985750df09c8dac738aecc503158bb3":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","122251c49e5a9fa95f056ea257ae3ab452099fc7"],"6483e4260c08168709c02238ae083a51519a28dd":["191128ac5b85671b1671e2c857437694283b6ebf"],"191128ac5b85671b1671e2c857437694283b6ebf":["110125c995236a7f61057dd04b039ed2d267f3a1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"110125c995236a7f61057dd04b039ed2d267f3a1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["6483e4260c08168709c02238ae083a51519a28dd"],"122251c49e5a9fa95f056ea257ae3ab452099fc7":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}