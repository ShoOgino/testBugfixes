{"path":"solr/core/src/test/org/apache/solr/search/json/TestJsonRequest#doJsonRequest(Client,boolean).mjava","commits":[{"id":"10eda272dbca4b0397f9b0c2aa6fadad3601db47","date":1504272103,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/json/TestJsonRequest#doJsonRequest(Client,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/json/TestJsonRequest#doJsonRequest(Client).mjava","sourceNew":"  public static void doJsonRequest(Client client, boolean isDistrib) throws Exception {\n    client.deleteByQuery(\"*:*\", null);\n    client.add(sdoc(\"id\", \"1\", \"cat_s\", \"A\", \"where_s\", \"NY\"), null);\n    client.add(sdoc(\"id\", \"2\", \"cat_s\", \"B\", \"where_s\", \"NJ\"), null);\n    client.add(sdoc(\"id\", \"3\"), null);\n    client.commit();\n    client.add(sdoc(\"id\", \"4\", \"cat_s\", \"A\", \"where_s\", \"NJ\"), null);\n    client.add(sdoc(\"id\", \"5\", \"cat_s\", \"B\", \"where_s\", \"NJ\"), null);\n    client.commit();\n    client.add(sdoc(\"id\", \"6\", \"cat_s\", \"B\", \"where_s\", \"NY\"), null);\n    client.commit();\n\n\n    // test json param\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==2\"\n    );\n\n    // test multiple json params\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being zero length\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being a comment\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, second value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, first value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, both values are already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths with an empty string and a comment\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.filter\",\"\", \"json.filter\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test overwriting of non-multivalued params\n    client.testJQ( params(\"json.query\",\"'foo_s:NONE'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.query\",\"'*:*'\")\n        , \"response/numFound==1\"\n    );\n\n    // normal parameter specified in the params block, including numeric params cast back to string\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:NY'], start:0, rows:5, fl:id}}\")\n        , \"response/docs==[{id:'1'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:id, sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5'], sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n    // test merge params\n    client.testJQ( params(\"json\",\"{params:{q:'*:*'}}\", \"json\",\"{params:{fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5']}}\", \"json\",\"{params:{sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n\n\n    // test offset/limit/sort/fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\")\n        , \"response/docs==[{id:'5'},{id:'4'}]\"\n    );\n    // test offset/limit/sort/fields, multi-valued json.fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n    // test offset/limit/sort/fields, overwriting non-multivalued params\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"17\", \"json.offset\",\"1\", \"json.limit\",\"42\", \"json.limit\",\"2\", \"json.sort\",\"'id asc'\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n\n\n\n    // test templating before parsing JSON\n    client.testJQ( params(\"json\",\"${OPENBRACE} query:'cat_s:A' ${CLOSEBRACE}\", \"json\",\"${OPENBRACE} filter:'where_s:NY'${CLOSEBRACE}\",  \"OPENBRACE\",\"{\", \"CLOSEBRACE\",\"}\")\n        , \"response/numFound==1\"\n    );\n\n    // test templating with params defined in the JSON itself!  Do we want to keep this functionality?\n    client.testJQ( params(\"json\",\"{params:{V1:A,V2:NY}, query:'cat_s:${V1}'}\", \"json\",\"{filter:'where_s:${V2}'}\")\n        , \"response/numFound==1\"\n    );\n\n\n    //\n    // with body\n    //\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\")\n        , \"response/numFound==2\"\n    );\n\n    // test body in conjunction with query params\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\", \"json.filter\", \"'where_s:NY'\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json body in params come \"after\" (will overwrite)\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json.x params come after body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json.query\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n\n    // test facet with json body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\")\n        , \"facets=={count:6,x:2}\"\n    );\n\n    // test facet with json body, insert additional facets via query parameter\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\", \"json.facet.y\",\"{terms:{field:where_s}}\", \"json.facet.z\",\"'unique(where_s)'\")\n        , \"facets=={count:6,x:2, y:{buckets:[{val:NJ,count:3},{val:NY,count:2}]}, z:2}\"\n    );\n\n    // test debug\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json.filter\",\"'where_s:NY'\", \"debug\",\"true\")\n        , \"debug/json=={query:'cat_s:A', filter:'where_s:NY'}\"\n    );\n\n    // test query dsl\n    client.testJQ( params(\"json\", \"{'query':'{!lucene}id:1'}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'lucene' : {'query' : 'id:1'}},\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        'id:1',\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{   \" +\n            \" query : {\" +\n            \"  boost : {\" +\n            \"   query : {\" +\n            \"    lucene : {      \" +\n            \"     df : cat_s,      \" +\n            \"     query : A     \" +\n            \"    }\" +\n            \"   },   \" +\n            \"   b : 1.5 \" +\n            \"  }  \" +\n            \" } \" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : {lucene : {query:'id: 1'}}\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : [{lucene : {query:'id: 1'}}]\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : '{!lucene q.op=AND df=cat_s}A'\" +\n            \"   must_not : '{!lucene v=\\\\'id:1\\\\'}'\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : '*:*',\" +\n            \" filter : {\" +\n            \"  collapse : {\" +\n            \"   field : cat_s\" +\n            \"  } \" +\n            \" } \" +\n            \"}\")\n        , isDistrib ? \"\" : \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NJ'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NY'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'1'},{id:'4'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : 'cat_s^0.1 where_s^100'\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'5'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : ['cat_s^100', 'where_s^0.1']\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" :  \"response/docs==[{id:'4'},{id:'1'},{id:'5'}]\"\n    );\n\n    try {\n      client.testJQ(params(\"json\", \"{query:{'lucene':'id:1'}}\"));\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"id:1\"));\n    }\n\n    try {\n      // test failure on unknown parameter\n      client.testJQ(params(\"json\", \"{query:'cat_s:A', foobar_ignore_exception:5}\")\n          , \"response/numFound==2\"\n      );\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foobar\"));\n    }\n\n  }\n\n","sourceOld":"  public static void doJsonRequest(Client client) throws Exception {\n    client.deleteByQuery(\"*:*\", null);\n    client.add(sdoc(\"id\", \"1\", \"cat_s\", \"A\", \"where_s\", \"NY\"), null);\n    client.add(sdoc(\"id\", \"2\", \"cat_s\", \"B\", \"where_s\", \"NJ\"), null);\n    client.add(sdoc(\"id\", \"3\"), null);\n    client.commit();\n    client.add(sdoc(\"id\", \"4\", \"cat_s\", \"A\", \"where_s\", \"NJ\"), null);\n    client.add(sdoc(\"id\", \"5\", \"cat_s\", \"B\", \"where_s\", \"NJ\"), null);\n    client.commit();\n    client.add(sdoc(\"id\", \"6\", \"cat_s\", \"B\", \"where_s\", \"NY\"), null);\n    client.commit();\n\n\n    // test json param\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==2\"\n    );\n\n    // test multiple json params\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being zero length\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being a comment\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, second value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, first value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, both values are already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths with an empty string and a comment\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.filter\",\"\", \"json.filter\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test overwriting of non-multivalued params\n    client.testJQ( params(\"json.query\",\"'foo_s:NONE'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.query\",\"'*:*'\")\n        , \"response/numFound==1\"\n    );\n\n    // normal parameter specified in the params block, including numeric params cast back to string\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:NY'], start:0, rows:5, fl:id}}\")\n        , \"response/docs==[{id:'1'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:id, sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5'], sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n    // test merge params\n    client.testJQ( params(\"json\",\"{params:{q:'*:*'}}\", \"json\",\"{params:{fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5']}}\", \"json\",\"{params:{sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n\n\n    // test offset/limit/sort/fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\")\n        , \"response/docs==[{id:'5'},{id:'4'}]\"\n    );\n    // test offset/limit/sort/fields, multi-valued json.fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n    // test offset/limit/sort/fields, overwriting non-multivalued params\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"17\", \"json.offset\",\"1\", \"json.limit\",\"42\", \"json.limit\",\"2\", \"json.sort\",\"'id asc'\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n\n\n\n    // test templating before parsing JSON\n    client.testJQ( params(\"json\",\"${OPENBRACE} query:'cat_s:A' ${CLOSEBRACE}\", \"json\",\"${OPENBRACE} filter:'where_s:NY'${CLOSEBRACE}\",  \"OPENBRACE\",\"{\", \"CLOSEBRACE\",\"}\")\n        , \"response/numFound==1\"\n    );\n\n    // test templating with params defined in the JSON itself!  Do we want to keep this functionality?\n    client.testJQ( params(\"json\",\"{params:{V1:A,V2:NY}, query:'cat_s:${V1}'}\", \"json\",\"{filter:'where_s:${V2}'}\")\n        , \"response/numFound==1\"\n    );\n\n\n    //\n    // with body\n    //\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\")\n        , \"response/numFound==2\"\n    );\n\n    // test body in conjunction with query params\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\", \"json.filter\", \"'where_s:NY'\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json body in params come \"after\" (will overwrite)\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json.x params come after body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json.query\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n\n    // test facet with json body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\")\n        , \"facets=={count:6,x:2}\"\n    );\n\n    // test facet with json body, insert additional facets via query parameter\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\", \"json.facet.y\",\"{terms:{field:where_s}}\", \"json.facet.z\",\"'unique(where_s)'\")\n        , \"facets=={count:6,x:2, y:{buckets:[{val:NJ,count:3},{val:NY,count:2}]}, z:2}\"\n    );\n\n    // test debug\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json.filter\",\"'where_s:NY'\", \"debug\",\"true\")\n        , \"debug/json=={query:'cat_s:A', filter:'where_s:NY'}\"\n    );\n\n\n    try {\n      // test failure on unknown parameter\n      client.testJQ(params(\"json\", \"{query:'cat_s:A', foobar_ignore_exception:5}\")\n          , \"response/numFound==2\"\n      );\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foobar\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/json/TestJsonRequest#doJsonRequest(Client,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/json/TestJsonRequest#doJsonRequest(Client).mjava","sourceNew":"  public static void doJsonRequest(Client client, boolean isDistrib) throws Exception {\n    client.deleteByQuery(\"*:*\", null);\n    client.add(sdoc(\"id\", \"1\", \"cat_s\", \"A\", \"where_s\", \"NY\"), null);\n    client.add(sdoc(\"id\", \"2\", \"cat_s\", \"B\", \"where_s\", \"NJ\"), null);\n    client.add(sdoc(\"id\", \"3\"), null);\n    client.commit();\n    client.add(sdoc(\"id\", \"4\", \"cat_s\", \"A\", \"where_s\", \"NJ\"), null);\n    client.add(sdoc(\"id\", \"5\", \"cat_s\", \"B\", \"where_s\", \"NJ\"), null);\n    client.commit();\n    client.add(sdoc(\"id\", \"6\", \"cat_s\", \"B\", \"where_s\", \"NY\"), null);\n    client.commit();\n\n\n    // test json param\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==2\"\n    );\n\n    // test multiple json params\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being zero length\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being a comment\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, second value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, first value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, both values are already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths with an empty string and a comment\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.filter\",\"\", \"json.filter\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test overwriting of non-multivalued params\n    client.testJQ( params(\"json.query\",\"'foo_s:NONE'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.query\",\"'*:*'\")\n        , \"response/numFound==1\"\n    );\n\n    // normal parameter specified in the params block, including numeric params cast back to string\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:NY'], start:0, rows:5, fl:id}}\")\n        , \"response/docs==[{id:'1'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:id, sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5'], sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n    // test merge params\n    client.testJQ( params(\"json\",\"{params:{q:'*:*'}}\", \"json\",\"{params:{fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5']}}\", \"json\",\"{params:{sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n\n\n    // test offset/limit/sort/fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\")\n        , \"response/docs==[{id:'5'},{id:'4'}]\"\n    );\n    // test offset/limit/sort/fields, multi-valued json.fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n    // test offset/limit/sort/fields, overwriting non-multivalued params\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"17\", \"json.offset\",\"1\", \"json.limit\",\"42\", \"json.limit\",\"2\", \"json.sort\",\"'id asc'\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n\n\n\n    // test templating before parsing JSON\n    client.testJQ( params(\"json\",\"${OPENBRACE} query:'cat_s:A' ${CLOSEBRACE}\", \"json\",\"${OPENBRACE} filter:'where_s:NY'${CLOSEBRACE}\",  \"OPENBRACE\",\"{\", \"CLOSEBRACE\",\"}\")\n        , \"response/numFound==1\"\n    );\n\n    // test templating with params defined in the JSON itself!  Do we want to keep this functionality?\n    client.testJQ( params(\"json\",\"{params:{V1:A,V2:NY}, query:'cat_s:${V1}'}\", \"json\",\"{filter:'where_s:${V2}'}\")\n        , \"response/numFound==1\"\n    );\n\n\n    //\n    // with body\n    //\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\")\n        , \"response/numFound==2\"\n    );\n\n    // test body in conjunction with query params\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\", \"json.filter\", \"'where_s:NY'\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json body in params come \"after\" (will overwrite)\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json.x params come after body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json.query\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n\n    // test facet with json body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\")\n        , \"facets=={count:6,x:2}\"\n    );\n\n    // test facet with json body, insert additional facets via query parameter\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\", \"json.facet.y\",\"{terms:{field:where_s}}\", \"json.facet.z\",\"'unique(where_s)'\")\n        , \"facets=={count:6,x:2, y:{buckets:[{val:NJ,count:3},{val:NY,count:2}]}, z:2}\"\n    );\n\n    // test debug\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json.filter\",\"'where_s:NY'\", \"debug\",\"true\")\n        , \"debug/json=={query:'cat_s:A', filter:'where_s:NY'}\"\n    );\n\n    // test query dsl\n    client.testJQ( params(\"json\", \"{'query':'{!lucene}id:1'}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'lucene' : {'query' : 'id:1'}},\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        'id:1',\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{   \" +\n            \" query : {\" +\n            \"  boost : {\" +\n            \"   query : {\" +\n            \"    lucene : {      \" +\n            \"     df : cat_s,      \" +\n            \"     query : A     \" +\n            \"    }\" +\n            \"   },   \" +\n            \"   b : 1.5 \" +\n            \"  }  \" +\n            \" } \" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : {lucene : {query:'id: 1'}}\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : [{lucene : {query:'id: 1'}}]\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : '{!lucene q.op=AND df=cat_s}A'\" +\n            \"   must_not : '{!lucene v=\\\\'id:1\\\\'}'\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : '*:*',\" +\n            \" filter : {\" +\n            \"  collapse : {\" +\n            \"   field : cat_s\" +\n            \"  } \" +\n            \" } \" +\n            \"}\")\n        , isDistrib ? \"\" : \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NJ'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NY'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'1'},{id:'4'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : 'cat_s^0.1 where_s^100'\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'5'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : ['cat_s^100', 'where_s^0.1']\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" :  \"response/docs==[{id:'4'},{id:'1'},{id:'5'}]\"\n    );\n\n    try {\n      client.testJQ(params(\"json\", \"{query:{'lucene':'id:1'}}\"));\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"id:1\"));\n    }\n\n    try {\n      // test failure on unknown parameter\n      client.testJQ(params(\"json\", \"{query:'cat_s:A', foobar_ignore_exception:5}\")\n          , \"response/numFound==2\"\n      );\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foobar\"));\n    }\n\n  }\n\n","sourceOld":"  public static void doJsonRequest(Client client) throws Exception {\n    client.deleteByQuery(\"*:*\", null);\n    client.add(sdoc(\"id\", \"1\", \"cat_s\", \"A\", \"where_s\", \"NY\"), null);\n    client.add(sdoc(\"id\", \"2\", \"cat_s\", \"B\", \"where_s\", \"NJ\"), null);\n    client.add(sdoc(\"id\", \"3\"), null);\n    client.commit();\n    client.add(sdoc(\"id\", \"4\", \"cat_s\", \"A\", \"where_s\", \"NJ\"), null);\n    client.add(sdoc(\"id\", \"5\", \"cat_s\", \"B\", \"where_s\", \"NJ\"), null);\n    client.commit();\n    client.add(sdoc(\"id\", \"6\", \"cat_s\", \"B\", \"where_s\", \"NY\"), null);\n    client.commit();\n\n\n    // test json param\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==2\"\n    );\n\n    // test multiple json params\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being zero length\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being a comment\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, second value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, first value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, both values are already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths with an empty string and a comment\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.filter\",\"\", \"json.filter\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test overwriting of non-multivalued params\n    client.testJQ( params(\"json.query\",\"'foo_s:NONE'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.query\",\"'*:*'\")\n        , \"response/numFound==1\"\n    );\n\n    // normal parameter specified in the params block, including numeric params cast back to string\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:NY'], start:0, rows:5, fl:id}}\")\n        , \"response/docs==[{id:'1'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:id, sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5'], sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n    // test merge params\n    client.testJQ( params(\"json\",\"{params:{q:'*:*'}}\", \"json\",\"{params:{fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5']}}\", \"json\",\"{params:{sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n\n\n    // test offset/limit/sort/fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\")\n        , \"response/docs==[{id:'5'},{id:'4'}]\"\n    );\n    // test offset/limit/sort/fields, multi-valued json.fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n    // test offset/limit/sort/fields, overwriting non-multivalued params\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"17\", \"json.offset\",\"1\", \"json.limit\",\"42\", \"json.limit\",\"2\", \"json.sort\",\"'id asc'\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n\n\n\n    // test templating before parsing JSON\n    client.testJQ( params(\"json\",\"${OPENBRACE} query:'cat_s:A' ${CLOSEBRACE}\", \"json\",\"${OPENBRACE} filter:'where_s:NY'${CLOSEBRACE}\",  \"OPENBRACE\",\"{\", \"CLOSEBRACE\",\"}\")\n        , \"response/numFound==1\"\n    );\n\n    // test templating with params defined in the JSON itself!  Do we want to keep this functionality?\n    client.testJQ( params(\"json\",\"{params:{V1:A,V2:NY}, query:'cat_s:${V1}'}\", \"json\",\"{filter:'where_s:${V2}'}\")\n        , \"response/numFound==1\"\n    );\n\n\n    //\n    // with body\n    //\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\")\n        , \"response/numFound==2\"\n    );\n\n    // test body in conjunction with query params\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\", \"json.filter\", \"'where_s:NY'\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json body in params come \"after\" (will overwrite)\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json.x params come after body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json.query\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n\n    // test facet with json body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\")\n        , \"facets=={count:6,x:2}\"\n    );\n\n    // test facet with json body, insert additional facets via query parameter\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\", \"json.facet.y\",\"{terms:{field:where_s}}\", \"json.facet.z\",\"'unique(where_s)'\")\n        , \"facets=={count:6,x:2, y:{buckets:[{val:NJ,count:3},{val:NY,count:2}]}, z:2}\"\n    );\n\n    // test debug\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json.filter\",\"'where_s:NY'\", \"debug\",\"true\")\n        , \"debug/json=={query:'cat_s:A', filter:'where_s:NY'}\"\n    );\n\n\n    try {\n      // test failure on unknown parameter\n      client.testJQ(params(\"json\", \"{query:'cat_s:A', foobar_ignore_exception:5}\")\n          , \"response/numFound==2\"\n      );\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foobar\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21283ed01203901a7257aa4b7f0a0899c86e56e","date":1504689720,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/json/TestJsonRequest#doJsonRequest(Client,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/json/TestJsonRequest#doJsonRequest(Client).mjava","sourceNew":"  public static void doJsonRequest(Client client, boolean isDistrib) throws Exception {\n    client.deleteByQuery(\"*:*\", null);\n    client.add(sdoc(\"id\", \"1\", \"cat_s\", \"A\", \"where_s\", \"NY\"), null);\n    client.add(sdoc(\"id\", \"2\", \"cat_s\", \"B\", \"where_s\", \"NJ\"), null);\n    client.add(sdoc(\"id\", \"3\"), null);\n    client.commit();\n    client.add(sdoc(\"id\", \"4\", \"cat_s\", \"A\", \"where_s\", \"NJ\"), null);\n    client.add(sdoc(\"id\", \"5\", \"cat_s\", \"B\", \"where_s\", \"NJ\"), null);\n    client.commit();\n    client.add(sdoc(\"id\", \"6\", \"cat_s\", \"B\", \"where_s\", \"NY\"), null);\n    client.commit();\n\n\n    // test json param\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==2\"\n    );\n\n    // test multiple json params\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being zero length\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being a comment\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, second value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, first value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, both values are already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths with an empty string and a comment\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.filter\",\"\", \"json.filter\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test overwriting of non-multivalued params\n    client.testJQ( params(\"json.query\",\"'foo_s:NONE'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.query\",\"'*:*'\")\n        , \"response/numFound==1\"\n    );\n\n    // normal parameter specified in the params block, including numeric params cast back to string\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:NY'], start:0, rows:5, fl:id}}\")\n        , \"response/docs==[{id:'1'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:id, sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5'], sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n    // test merge params\n    client.testJQ( params(\"json\",\"{params:{q:'*:*'}}\", \"json\",\"{params:{fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5']}}\", \"json\",\"{params:{sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n\n\n    // test offset/limit/sort/fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\")\n        , \"response/docs==[{id:'5'},{id:'4'}]\"\n    );\n    // test offset/limit/sort/fields, multi-valued json.fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n    // test offset/limit/sort/fields, overwriting non-multivalued params\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"17\", \"json.offset\",\"1\", \"json.limit\",\"42\", \"json.limit\",\"2\", \"json.sort\",\"'id asc'\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n\n\n\n    // test templating before parsing JSON\n    client.testJQ( params(\"json\",\"${OPENBRACE} query:'cat_s:A' ${CLOSEBRACE}\", \"json\",\"${OPENBRACE} filter:'where_s:NY'${CLOSEBRACE}\",  \"OPENBRACE\",\"{\", \"CLOSEBRACE\",\"}\")\n        , \"response/numFound==1\"\n    );\n\n    // test templating with params defined in the JSON itself!  Do we want to keep this functionality?\n    client.testJQ( params(\"json\",\"{params:{V1:A,V2:NY}, query:'cat_s:${V1}'}\", \"json\",\"{filter:'where_s:${V2}'}\")\n        , \"response/numFound==1\"\n    );\n\n\n    //\n    // with body\n    //\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\")\n        , \"response/numFound==2\"\n    );\n\n    // test body in conjunction with query params\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\", \"json.filter\", \"'where_s:NY'\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json body in params come \"after\" (will overwrite)\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json.x params come after body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json.query\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n\n    // test facet with json body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\")\n        , \"facets=={count:6,x:2}\"\n    );\n\n    // test facet with json body, insert additional facets via query parameter\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\", \"json.facet.y\",\"{terms:{field:where_s}}\", \"json.facet.z\",\"'unique(where_s)'\")\n        , \"facets=={count:6,x:2, y:{buckets:[{val:NJ,count:3},{val:NY,count:2}]}, z:2}\"\n    );\n\n    // test debug\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json.filter\",\"'where_s:NY'\", \"debug\",\"true\")\n        , \"debug/json=={query:'cat_s:A', filter:'where_s:NY'}\"\n    );\n\n    // test query dsl\n    client.testJQ( params(\"json\", \"{'query':'{!lucene}id:1'}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'lucene' : {'query' : 'id:1'}},\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        'id:1',\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{   \" +\n            \" query : {\" +\n            \"  boost : {\" +\n            \"   query : {\" +\n            \"    lucene : {      \" +\n            \"     df : cat_s,      \" +\n            \"     query : A     \" +\n            \"    }\" +\n            \"   },   \" +\n            \"   b : 1.5 \" +\n            \"  }  \" +\n            \" } \" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : {lucene : {query:'id: 1'}}\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : [{lucene : {query:'id: 1'}}]\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : '{!lucene q.op=AND df=cat_s}A'\" +\n            \"   must_not : '{!lucene v=\\\\'id:1\\\\'}'\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : '*:*',\" +\n            \" filter : {\" +\n            \"  collapse : {\" +\n            \"   field : cat_s\" +\n            \"  } \" +\n            \" } \" +\n            \"}\")\n        , isDistrib ? \"\" : \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NJ'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NY'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'1'},{id:'4'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : 'cat_s^0.1 where_s^100'\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'5'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : ['cat_s^100', 'where_s^0.1']\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" :  \"response/docs==[{id:'4'},{id:'1'},{id:'5'}]\"\n    );\n\n    try {\n      client.testJQ(params(\"json\", \"{query:{'lucene':'id:1'}}\"));\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"id:1\"));\n    }\n\n    try {\n      // test failure on unknown parameter\n      client.testJQ(params(\"json\", \"{query:'cat_s:A', foobar_ignore_exception:5}\")\n          , \"response/numFound==2\"\n      );\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foobar\"));\n    }\n\n  }\n\n","sourceOld":"  public static void doJsonRequest(Client client) throws Exception {\n    client.deleteByQuery(\"*:*\", null);\n    client.add(sdoc(\"id\", \"1\", \"cat_s\", \"A\", \"where_s\", \"NY\"), null);\n    client.add(sdoc(\"id\", \"2\", \"cat_s\", \"B\", \"where_s\", \"NJ\"), null);\n    client.add(sdoc(\"id\", \"3\"), null);\n    client.commit();\n    client.add(sdoc(\"id\", \"4\", \"cat_s\", \"A\", \"where_s\", \"NJ\"), null);\n    client.add(sdoc(\"id\", \"5\", \"cat_s\", \"B\", \"where_s\", \"NJ\"), null);\n    client.commit();\n    client.add(sdoc(\"id\", \"6\", \"cat_s\", \"B\", \"where_s\", \"NY\"), null);\n    client.commit();\n\n\n    // test json param\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==2\"\n    );\n\n    // test multiple json params\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being zero length\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being a comment\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, second value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, first value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, both values are already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths with an empty string and a comment\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.filter\",\"\", \"json.filter\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test overwriting of non-multivalued params\n    client.testJQ( params(\"json.query\",\"'foo_s:NONE'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.query\",\"'*:*'\")\n        , \"response/numFound==1\"\n    );\n\n    // normal parameter specified in the params block, including numeric params cast back to string\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:NY'], start:0, rows:5, fl:id}}\")\n        , \"response/docs==[{id:'1'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:id, sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5'], sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n    // test merge params\n    client.testJQ( params(\"json\",\"{params:{q:'*:*'}}\", \"json\",\"{params:{fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5']}}\", \"json\",\"{params:{sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n\n\n    // test offset/limit/sort/fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\")\n        , \"response/docs==[{id:'5'},{id:'4'}]\"\n    );\n    // test offset/limit/sort/fields, multi-valued json.fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n    // test offset/limit/sort/fields, overwriting non-multivalued params\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"17\", \"json.offset\",\"1\", \"json.limit\",\"42\", \"json.limit\",\"2\", \"json.sort\",\"'id asc'\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n\n\n\n    // test templating before parsing JSON\n    client.testJQ( params(\"json\",\"${OPENBRACE} query:'cat_s:A' ${CLOSEBRACE}\", \"json\",\"${OPENBRACE} filter:'where_s:NY'${CLOSEBRACE}\",  \"OPENBRACE\",\"{\", \"CLOSEBRACE\",\"}\")\n        , \"response/numFound==1\"\n    );\n\n    // test templating with params defined in the JSON itself!  Do we want to keep this functionality?\n    client.testJQ( params(\"json\",\"{params:{V1:A,V2:NY}, query:'cat_s:${V1}'}\", \"json\",\"{filter:'where_s:${V2}'}\")\n        , \"response/numFound==1\"\n    );\n\n\n    //\n    // with body\n    //\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\")\n        , \"response/numFound==2\"\n    );\n\n    // test body in conjunction with query params\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\", \"json.filter\", \"'where_s:NY'\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json body in params come \"after\" (will overwrite)\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json.x params come after body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json.query\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n\n    // test facet with json body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\")\n        , \"facets=={count:6,x:2}\"\n    );\n\n    // test facet with json body, insert additional facets via query parameter\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\", \"json.facet.y\",\"{terms:{field:where_s}}\", \"json.facet.z\",\"'unique(where_s)'\")\n        , \"facets=={count:6,x:2, y:{buckets:[{val:NJ,count:3},{val:NY,count:2}]}, z:2}\"\n    );\n\n    // test debug\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json.filter\",\"'where_s:NY'\", \"debug\",\"true\")\n        , \"debug/json=={query:'cat_s:A', filter:'where_s:NY'}\"\n    );\n\n\n    try {\n      // test failure on unknown parameter\n      client.testJQ(params(\"json\", \"{query:'cat_s:A', foobar_ignore_exception:5}\")\n          , \"response/numFound==2\"\n      );\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foobar\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","date":1504848000,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/json/TestJsonRequest#doJsonRequest(Client,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/json/TestJsonRequest#doJsonRequest(Client).mjava","sourceNew":"  public static void doJsonRequest(Client client, boolean isDistrib) throws Exception {\n    client.deleteByQuery(\"*:*\", null);\n    client.add(sdoc(\"id\", \"1\", \"cat_s\", \"A\", \"where_s\", \"NY\"), null);\n    client.add(sdoc(\"id\", \"2\", \"cat_s\", \"B\", \"where_s\", \"NJ\"), null);\n    client.add(sdoc(\"id\", \"3\"), null);\n    client.commit();\n    client.add(sdoc(\"id\", \"4\", \"cat_s\", \"A\", \"where_s\", \"NJ\"), null);\n    client.add(sdoc(\"id\", \"5\", \"cat_s\", \"B\", \"where_s\", \"NJ\"), null);\n    client.commit();\n    client.add(sdoc(\"id\", \"6\", \"cat_s\", \"B\", \"where_s\", \"NY\"), null);\n    client.commit();\n\n\n    // test json param\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==2\"\n    );\n\n    // test multiple json params\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being zero length\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being a comment\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, second value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, first value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, both values are already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths with an empty string and a comment\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.filter\",\"\", \"json.filter\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test overwriting of non-multivalued params\n    client.testJQ( params(\"json.query\",\"'foo_s:NONE'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.query\",\"'*:*'\")\n        , \"response/numFound==1\"\n    );\n\n    // normal parameter specified in the params block, including numeric params cast back to string\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:NY'], start:0, rows:5, fl:id}}\")\n        , \"response/docs==[{id:'1'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:id, sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5'], sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n    // test merge params\n    client.testJQ( params(\"json\",\"{params:{q:'*:*'}}\", \"json\",\"{params:{fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5']}}\", \"json\",\"{params:{sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n\n\n    // test offset/limit/sort/fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\")\n        , \"response/docs==[{id:'5'},{id:'4'}]\"\n    );\n    // test offset/limit/sort/fields, multi-valued json.fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n    // test offset/limit/sort/fields, overwriting non-multivalued params\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"17\", \"json.offset\",\"1\", \"json.limit\",\"42\", \"json.limit\",\"2\", \"json.sort\",\"'id asc'\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n\n\n\n    // test templating before parsing JSON\n    client.testJQ( params(\"json\",\"${OPENBRACE} query:'cat_s:A' ${CLOSEBRACE}\", \"json\",\"${OPENBRACE} filter:'where_s:NY'${CLOSEBRACE}\",  \"OPENBRACE\",\"{\", \"CLOSEBRACE\",\"}\")\n        , \"response/numFound==1\"\n    );\n\n    // test templating with params defined in the JSON itself!  Do we want to keep this functionality?\n    client.testJQ( params(\"json\",\"{params:{V1:A,V2:NY}, query:'cat_s:${V1}'}\", \"json\",\"{filter:'where_s:${V2}'}\")\n        , \"response/numFound==1\"\n    );\n\n\n    //\n    // with body\n    //\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\")\n        , \"response/numFound==2\"\n    );\n\n    // test body in conjunction with query params\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\", \"json.filter\", \"'where_s:NY'\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json body in params come \"after\" (will overwrite)\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json.x params come after body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json.query\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n\n    // test facet with json body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\")\n        , \"facets=={count:6,x:2}\"\n    );\n\n    // test facet with json body, insert additional facets via query parameter\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\", \"json.facet.y\",\"{terms:{field:where_s}}\", \"json.facet.z\",\"'unique(where_s)'\")\n        , \"facets=={count:6,x:2, y:{buckets:[{val:NJ,count:3},{val:NY,count:2}]}, z:2}\"\n    );\n\n    // test debug\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json.filter\",\"'where_s:NY'\", \"debug\",\"true\")\n        , \"debug/json=={query:'cat_s:A', filter:'where_s:NY'}\"\n    );\n\n    // test query dsl\n    client.testJQ( params(\"json\", \"{'query':'{!lucene}id:1'}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'lucene' : {'query' : 'id:1'}},\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        'id:1',\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{   \" +\n            \" query : {\" +\n            \"  boost : {\" +\n            \"   query : {\" +\n            \"    lucene : {      \" +\n            \"     df : cat_s,      \" +\n            \"     query : A     \" +\n            \"    }\" +\n            \"   },   \" +\n            \"   b : 1.5 \" +\n            \"  }  \" +\n            \" } \" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : {lucene : {query:'id: 1'}}\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : [{lucene : {query:'id: 1'}}]\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : '{!lucene q.op=AND df=cat_s}A'\" +\n            \"   must_not : '{!lucene v=\\\\'id:1\\\\'}'\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : '*:*',\" +\n            \" filter : {\" +\n            \"  collapse : {\" +\n            \"   field : cat_s\" +\n            \"  } \" +\n            \" } \" +\n            \"}\")\n        , isDistrib ? \"\" : \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NJ'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NY'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'1'},{id:'4'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : 'cat_s^0.1 where_s^100'\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'5'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : ['cat_s^100', 'where_s^0.1']\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" :  \"response/docs==[{id:'4'},{id:'1'},{id:'5'}]\"\n    );\n\n    try {\n      client.testJQ(params(\"json\", \"{query:{'lucene':'id:1'}}\"));\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"id:1\"));\n    }\n\n    try {\n      // test failure on unknown parameter\n      client.testJQ(params(\"json\", \"{query:'cat_s:A', foobar_ignore_exception:5}\")\n          , \"response/numFound==2\"\n      );\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foobar\"));\n    }\n\n  }\n\n","sourceOld":"  public static void doJsonRequest(Client client) throws Exception {\n    client.deleteByQuery(\"*:*\", null);\n    client.add(sdoc(\"id\", \"1\", \"cat_s\", \"A\", \"where_s\", \"NY\"), null);\n    client.add(sdoc(\"id\", \"2\", \"cat_s\", \"B\", \"where_s\", \"NJ\"), null);\n    client.add(sdoc(\"id\", \"3\"), null);\n    client.commit();\n    client.add(sdoc(\"id\", \"4\", \"cat_s\", \"A\", \"where_s\", \"NJ\"), null);\n    client.add(sdoc(\"id\", \"5\", \"cat_s\", \"B\", \"where_s\", \"NJ\"), null);\n    client.commit();\n    client.add(sdoc(\"id\", \"6\", \"cat_s\", \"B\", \"where_s\", \"NY\"), null);\n    client.commit();\n\n\n    // test json param\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==2\"\n    );\n\n    // test multiple json params\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being zero length\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being a comment\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, second value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, first value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, both values are already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths with an empty string and a comment\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.filter\",\"\", \"json.filter\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test overwriting of non-multivalued params\n    client.testJQ( params(\"json.query\",\"'foo_s:NONE'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.query\",\"'*:*'\")\n        , \"response/numFound==1\"\n    );\n\n    // normal parameter specified in the params block, including numeric params cast back to string\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:NY'], start:0, rows:5, fl:id}}\")\n        , \"response/docs==[{id:'1'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:id, sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5'], sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n    // test merge params\n    client.testJQ( params(\"json\",\"{params:{q:'*:*'}}\", \"json\",\"{params:{fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5']}}\", \"json\",\"{params:{sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n\n\n    // test offset/limit/sort/fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\")\n        , \"response/docs==[{id:'5'},{id:'4'}]\"\n    );\n    // test offset/limit/sort/fields, multi-valued json.fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n    // test offset/limit/sort/fields, overwriting non-multivalued params\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"17\", \"json.offset\",\"1\", \"json.limit\",\"42\", \"json.limit\",\"2\", \"json.sort\",\"'id asc'\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n\n\n\n    // test templating before parsing JSON\n    client.testJQ( params(\"json\",\"${OPENBRACE} query:'cat_s:A' ${CLOSEBRACE}\", \"json\",\"${OPENBRACE} filter:'where_s:NY'${CLOSEBRACE}\",  \"OPENBRACE\",\"{\", \"CLOSEBRACE\",\"}\")\n        , \"response/numFound==1\"\n    );\n\n    // test templating with params defined in the JSON itself!  Do we want to keep this functionality?\n    client.testJQ( params(\"json\",\"{params:{V1:A,V2:NY}, query:'cat_s:${V1}'}\", \"json\",\"{filter:'where_s:${V2}'}\")\n        , \"response/numFound==1\"\n    );\n\n\n    //\n    // with body\n    //\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\")\n        , \"response/numFound==2\"\n    );\n\n    // test body in conjunction with query params\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\", \"json.filter\", \"'where_s:NY'\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json body in params come \"after\" (will overwrite)\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json.x params come after body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json.query\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n\n    // test facet with json body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\")\n        , \"facets=={count:6,x:2}\"\n    );\n\n    // test facet with json body, insert additional facets via query parameter\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\", \"json.facet.y\",\"{terms:{field:where_s}}\", \"json.facet.z\",\"'unique(where_s)'\")\n        , \"facets=={count:6,x:2, y:{buckets:[{val:NJ,count:3},{val:NY,count:2}]}, z:2}\"\n    );\n\n    // test debug\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json.filter\",\"'where_s:NY'\", \"debug\",\"true\")\n        , \"debug/json=={query:'cat_s:A', filter:'where_s:NY'}\"\n    );\n\n\n    try {\n      // test failure on unknown parameter\n      client.testJQ(params(\"json\", \"{query:'cat_s:A', foobar_ignore_exception:5}\")\n          , \"response/numFound==2\"\n      );\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foobar\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddce5ba13e43e3b34a1772ed921d9b9d7a67e48d","date":1527452536,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/json/TestJsonRequest#doJsonRequest(Client,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/json/TestJsonRequest#doJsonRequest(Client,boolean).mjava","sourceNew":"  public static void doJsonRequest(Client client, boolean isDistrib) throws Exception {\n    addDocs(client);\n\n    // test json param\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==2\"\n    );\n\n    // test multiple json params\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being zero length\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being a comment\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, second value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, first value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, both values are already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths with an empty string and a comment\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.filter\",\"\", \"json.filter\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test overwriting of non-multivalued params\n    client.testJQ( params(\"json.query\",\"'foo_s:NONE'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.query\",\"'*:*'\")\n        , \"response/numFound==1\"\n    );\n\n    // normal parameter specified in the params block, including numeric params cast back to string\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:NY'], start:0, rows:5, fl:id}}\")\n        , \"response/docs==[{id:'1'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:id, sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5'], sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n    // test merge params\n    client.testJQ( params(\"json\",\"{params:{q:'*:*'}}\", \"json\",\"{params:{fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5']}}\", \"json\",\"{params:{sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n\n\n    // test offset/limit/sort/fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\")\n        , \"response/docs==[{id:'5'},{id:'4'}]\"\n    );\n    // test offset/limit/sort/fields, multi-valued json.fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n    // test offset/limit/sort/fields, overwriting non-multivalued params\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"17\", \"json.offset\",\"1\", \"json.limit\",\"42\", \"json.limit\",\"2\", \"json.sort\",\"'id asc'\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n\n\n\n    // test templating before parsing JSON\n    client.testJQ( params(\"json\",\"${OPENBRACE} query:'cat_s:A' ${CLOSEBRACE}\", \"json\",\"${OPENBRACE} filter:'where_s:NY'${CLOSEBRACE}\",  \"OPENBRACE\",\"{\", \"CLOSEBRACE\",\"}\")\n        , \"response/numFound==1\"\n    );\n\n    // test templating with params defined in the JSON itself!  Do we want to keep this functionality?\n    client.testJQ( params(\"json\",\"{params:{V1:A,V2:NY}, query:'cat_s:${V1}'}\", \"json\",\"{filter:'where_s:${V2}'}\")\n        , \"response/numFound==1\"\n    );\n\n\n    //\n    // with body\n    //\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\")\n        , \"response/numFound==2\"\n    );\n\n    // test body in conjunction with query params\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\", \"json.filter\", \"'where_s:NY'\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json body in params come \"after\" (will overwrite)\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json.x params come after body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json.query\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n\n    // test facet with json body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\")\n        , \"facets=={count:6,x:2}\"\n    );\n\n    // test facet with json body, insert additional facets via query parameter\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\", \"json.facet.y\",\"{terms:{field:where_s}}\", \"json.facet.z\",\"'unique(where_s)'\")\n        , \"facets=={count:6,x:2, y:{buckets:[{val:NJ,count:3},{val:NY,count:2}]}, z:2}\"\n    );\n\n    // test debug\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json.filter\",\"'where_s:NY'\", \"debug\",\"true\")\n        , \"debug/json=={query:'cat_s:A', filter:'where_s:NY'}\"\n    );\n\n    // test query dsl\n    client.testJQ( params(\"json\", \"{'query':'{!lucene}id:1'}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'lucene' : {'query' : 'id:1'}},\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        'id:1',\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{   \" +\n            \" query : {\" +\n            \"  boost : {\" +\n            \"   query : {\" +\n            \"    lucene : {      \" +\n            \"     df : cat_s,      \" +\n            \"     query : A     \" +\n            \"    }\" +\n            \"   },   \" +\n            \"   b : 1.5 \" +\n            \"  }  \" +\n            \" } \" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : {lucene : {query:'id: 1'}}\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : [{lucene : {query:'id: 1'}}]\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : '{!lucene q.op=AND df=cat_s}A'\" +\n            \"   must_not : '{!lucene v=\\\\'id:1\\\\'}'\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : '*:*',\" +\n            \" filter : {\" +\n            \"  collapse : {\" +\n            \"   field : cat_s\" +\n            \"  } \" +\n            \" } \" +\n            \"}\")\n        , isDistrib ? \"\" : \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NJ'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NY'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'1'},{id:'4'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : 'cat_s^0.1 where_s^100'\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'5'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : ['cat_s^100', 'where_s^0.1']\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" :  \"response/docs==[{id:'4'},{id:'1'},{id:'5'}]\"\n    );\n\n    try {\n      client.testJQ(params(\"json\", \"{query:{'lucene':'id:1'}}\"));\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"id:1\"));\n    }\n\n    try {\n      // test failure on unknown parameter\n      client.testJQ(params(\"json\", \"{query:'cat_s:A', foobar_ignore_exception:5}\")\n          , \"response/numFound==2\"\n      );\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foobar\"));\n    }\n\n  }\n\n","sourceOld":"  public static void doJsonRequest(Client client, boolean isDistrib) throws Exception {\n    client.deleteByQuery(\"*:*\", null);\n    client.add(sdoc(\"id\", \"1\", \"cat_s\", \"A\", \"where_s\", \"NY\"), null);\n    client.add(sdoc(\"id\", \"2\", \"cat_s\", \"B\", \"where_s\", \"NJ\"), null);\n    client.add(sdoc(\"id\", \"3\"), null);\n    client.commit();\n    client.add(sdoc(\"id\", \"4\", \"cat_s\", \"A\", \"where_s\", \"NJ\"), null);\n    client.add(sdoc(\"id\", \"5\", \"cat_s\", \"B\", \"where_s\", \"NJ\"), null);\n    client.commit();\n    client.add(sdoc(\"id\", \"6\", \"cat_s\", \"B\", \"where_s\", \"NY\"), null);\n    client.commit();\n\n\n    // test json param\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==2\"\n    );\n\n    // test multiple json params\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being zero length\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being a comment\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, second value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, first value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, both values are already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths with an empty string and a comment\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.filter\",\"\", \"json.filter\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test overwriting of non-multivalued params\n    client.testJQ( params(\"json.query\",\"'foo_s:NONE'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.query\",\"'*:*'\")\n        , \"response/numFound==1\"\n    );\n\n    // normal parameter specified in the params block, including numeric params cast back to string\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:NY'], start:0, rows:5, fl:id}}\")\n        , \"response/docs==[{id:'1'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:id, sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5'], sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n    // test merge params\n    client.testJQ( params(\"json\",\"{params:{q:'*:*'}}\", \"json\",\"{params:{fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5']}}\", \"json\",\"{params:{sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n\n\n    // test offset/limit/sort/fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\")\n        , \"response/docs==[{id:'5'},{id:'4'}]\"\n    );\n    // test offset/limit/sort/fields, multi-valued json.fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n    // test offset/limit/sort/fields, overwriting non-multivalued params\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"17\", \"json.offset\",\"1\", \"json.limit\",\"42\", \"json.limit\",\"2\", \"json.sort\",\"'id asc'\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n\n\n\n    // test templating before parsing JSON\n    client.testJQ( params(\"json\",\"${OPENBRACE} query:'cat_s:A' ${CLOSEBRACE}\", \"json\",\"${OPENBRACE} filter:'where_s:NY'${CLOSEBRACE}\",  \"OPENBRACE\",\"{\", \"CLOSEBRACE\",\"}\")\n        , \"response/numFound==1\"\n    );\n\n    // test templating with params defined in the JSON itself!  Do we want to keep this functionality?\n    client.testJQ( params(\"json\",\"{params:{V1:A,V2:NY}, query:'cat_s:${V1}'}\", \"json\",\"{filter:'where_s:${V2}'}\")\n        , \"response/numFound==1\"\n    );\n\n\n    //\n    // with body\n    //\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\")\n        , \"response/numFound==2\"\n    );\n\n    // test body in conjunction with query params\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\", \"json.filter\", \"'where_s:NY'\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json body in params come \"after\" (will overwrite)\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json.x params come after body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json.query\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n\n    // test facet with json body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\")\n        , \"facets=={count:6,x:2}\"\n    );\n\n    // test facet with json body, insert additional facets via query parameter\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\", \"json.facet.y\",\"{terms:{field:where_s}}\", \"json.facet.z\",\"'unique(where_s)'\")\n        , \"facets=={count:6,x:2, y:{buckets:[{val:NJ,count:3},{val:NY,count:2}]}, z:2}\"\n    );\n\n    // test debug\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json.filter\",\"'where_s:NY'\", \"debug\",\"true\")\n        , \"debug/json=={query:'cat_s:A', filter:'where_s:NY'}\"\n    );\n\n    // test query dsl\n    client.testJQ( params(\"json\", \"{'query':'{!lucene}id:1'}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'lucene' : {'query' : 'id:1'}},\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        'id:1',\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{   \" +\n            \" query : {\" +\n            \"  boost : {\" +\n            \"   query : {\" +\n            \"    lucene : {      \" +\n            \"     df : cat_s,      \" +\n            \"     query : A     \" +\n            \"    }\" +\n            \"   },   \" +\n            \"   b : 1.5 \" +\n            \"  }  \" +\n            \" } \" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : {lucene : {query:'id: 1'}}\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : [{lucene : {query:'id: 1'}}]\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : '{!lucene q.op=AND df=cat_s}A'\" +\n            \"   must_not : '{!lucene v=\\\\'id:1\\\\'}'\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : '*:*',\" +\n            \" filter : {\" +\n            \"  collapse : {\" +\n            \"   field : cat_s\" +\n            \"  } \" +\n            \" } \" +\n            \"}\")\n        , isDistrib ? \"\" : \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NJ'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NY'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'1'},{id:'4'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : 'cat_s^0.1 where_s^100'\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'5'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : ['cat_s^100', 'where_s^0.1']\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" :  \"response/docs==[{id:'4'},{id:'1'},{id:'5'}]\"\n    );\n\n    try {\n      client.testJQ(params(\"json\", \"{query:{'lucene':'id:1'}}\"));\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"id:1\"));\n    }\n\n    try {\n      // test failure on unknown parameter\n      client.testJQ(params(\"json\", \"{query:'cat_s:A', foobar_ignore_exception:5}\")\n          , \"response/numFound==2\"\n      );\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foobar\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff95b5e47fe4df3d066c51f0a3f8970e8fbb2aa4","date":1528834006,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/json/TestJsonRequest#doJsonRequest(Client,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/json/TestJsonRequest#doJsonRequest(Client,boolean).mjava","sourceNew":"  public static void doJsonRequest(Client client, boolean isDistrib) throws Exception {\n    addDocs(client);\n\n    // test json param\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==2\"\n    );\n\n    // test multiple json params\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being zero length\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being a comment\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, second value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, first value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, both values are already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths with an empty string and a comment\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.filter\",\"\", \"json.filter\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test overwriting of non-multivalued params\n    client.testJQ( params(\"json.query\",\"'foo_s:NONE'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.query\",\"'*:*'\")\n        , \"response/numFound==1\"\n    );\n\n    // normal parameter specified in the params block, including numeric params cast back to string\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:NY'], start:0, rows:5, fl:id}}\")\n        , \"response/docs==[{id:'1'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:id, sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5'], sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n    // test merge params\n    client.testJQ( params(\"json\",\"{params:{q:'*:*'}}\", \"json\",\"{params:{fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5']}}\", \"json\",\"{params:{sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n\n\n    // test offset/limit/sort/fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\")\n        , \"response/docs==[{id:'5'},{id:'4'}]\"\n    );\n    // test offset/limit/sort/fields, multi-valued json.fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n    // test offset/limit/sort/fields, overwriting non-multivalued params\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"17\", \"json.offset\",\"1\", \"json.limit\",\"42\", \"json.limit\",\"2\", \"json.sort\",\"'id asc'\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n\n\n\n    // test templating before parsing JSON\n    client.testJQ( params(\"json\",\"${OPENBRACE} query:'cat_s:A' ${CLOSEBRACE}\", \"json\",\"${OPENBRACE} filter:'where_s:NY'${CLOSEBRACE}\",  \"OPENBRACE\",\"{\", \"CLOSEBRACE\",\"}\")\n        , \"response/numFound==1\"\n    );\n\n    // test templating with params defined in the JSON itself!  Do we want to keep this functionality?\n    client.testJQ( params(\"json\",\"{params:{V1:A,V2:NY}, query:'cat_s:${V1}'}\", \"json\",\"{filter:'where_s:${V2}'}\")\n        , \"response/numFound==1\"\n    );\n\n\n    //\n    // with body\n    //\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\")\n        , \"response/numFound==2\"\n    );\n\n    // test body in conjunction with query params\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\", \"json.filter\", \"'where_s:NY'\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json body in params come \"after\" (will overwrite)\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json.x params come after body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json.query\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n\n    // test facet with json body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\")\n        , \"facets=={count:6,x:2}\"\n    );\n\n    // test facet with json body, insert additional facets via query parameter\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\", \"json.facet.y\",\"{terms:{field:where_s}}\", \"json.facet.z\",\"'unique(where_s)'\")\n        , \"facets=={count:6,x:2, y:{buckets:[{val:NJ,count:3},{val:NY,count:2}]}, z:2}\"\n    );\n\n    // test debug\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json.filter\",\"'where_s:NY'\", \"debug\",\"true\")\n        , \"debug/json=={query:'cat_s:A', filter:'where_s:NY'}\"\n    );\n\n    // test query dsl\n    client.testJQ( params(\"json\", \"{'query':'{!lucene}id:1'}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'lucene' : {'query' : 'id:1'}},\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'#MYTAG' : 'id:1'},\" +  // tagged query (the tag should do nothing here)\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{   \" +\n            \" query : {\" +\n            \"  boost : {\" +\n            \"   query : {\" +\n            \"    lucene : {      \" +\n            \"     df : cat_s,      \" +\n            \"     query : A     \" +\n            \"    }\" +\n            \"   },   \" +\n            \"   b : 1.5 \" +\n            \"  }  \" +\n            \" } \" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : {'#NOT':{lucene : {query:'id: 1'}}}\" +  // testing tagging syntax at the same time (the tag should do nothing here)\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : [{lucene : {query:'id: 1'}}]\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : '{!lucene q.op=AND df=cat_s}A'\" +\n            \"   must_not : '{!lucene v=\\\\'id:1\\\\'}'\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : '*:*',\" +\n            \" filter : {\" +\n            \"  collapse : {\" +\n            \"   field : cat_s\" +\n            \"  } \" +\n            \" } \" +\n            \"}\")\n        , isDistrib ? \"\" : \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NJ'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NY'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'1'},{id:'4'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : 'cat_s^0.1 where_s^100'\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'5'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : ['cat_s^100', 'where_s^0.1']\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" :  \"response/docs==[{id:'4'},{id:'1'},{id:'5'}]\"\n    );\n\n    try {\n      client.testJQ(params(\"json\", \"{query:{'lucene':'foo_s:ignore_exception'}}\"));  // TODO: this seems like a reasonable capability that we would want to support in the future.  It should be OK to make this pass.\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foo_s\"));\n    }\n\n    try {\n      // test failure on unknown parameter\n      client.testJQ(params(\"json\", \"{query:'cat_s:A', foobar_ignore_exception:5}\")\n          , \"response/numFound==2\"\n      );\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foobar\"));\n    }\n\n  }\n\n","sourceOld":"  public static void doJsonRequest(Client client, boolean isDistrib) throws Exception {\n    addDocs(client);\n\n    // test json param\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==2\"\n    );\n\n    // test multiple json params\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being zero length\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being a comment\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, second value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, first value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, both values are already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths with an empty string and a comment\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.filter\",\"\", \"json.filter\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test overwriting of non-multivalued params\n    client.testJQ( params(\"json.query\",\"'foo_s:NONE'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.query\",\"'*:*'\")\n        , \"response/numFound==1\"\n    );\n\n    // normal parameter specified in the params block, including numeric params cast back to string\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:NY'], start:0, rows:5, fl:id}}\")\n        , \"response/docs==[{id:'1'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:id, sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5'], sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n    // test merge params\n    client.testJQ( params(\"json\",\"{params:{q:'*:*'}}\", \"json\",\"{params:{fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5']}}\", \"json\",\"{params:{sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n\n\n    // test offset/limit/sort/fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\")\n        , \"response/docs==[{id:'5'},{id:'4'}]\"\n    );\n    // test offset/limit/sort/fields, multi-valued json.fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n    // test offset/limit/sort/fields, overwriting non-multivalued params\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"17\", \"json.offset\",\"1\", \"json.limit\",\"42\", \"json.limit\",\"2\", \"json.sort\",\"'id asc'\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n\n\n\n    // test templating before parsing JSON\n    client.testJQ( params(\"json\",\"${OPENBRACE} query:'cat_s:A' ${CLOSEBRACE}\", \"json\",\"${OPENBRACE} filter:'where_s:NY'${CLOSEBRACE}\",  \"OPENBRACE\",\"{\", \"CLOSEBRACE\",\"}\")\n        , \"response/numFound==1\"\n    );\n\n    // test templating with params defined in the JSON itself!  Do we want to keep this functionality?\n    client.testJQ( params(\"json\",\"{params:{V1:A,V2:NY}, query:'cat_s:${V1}'}\", \"json\",\"{filter:'where_s:${V2}'}\")\n        , \"response/numFound==1\"\n    );\n\n\n    //\n    // with body\n    //\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\")\n        , \"response/numFound==2\"\n    );\n\n    // test body in conjunction with query params\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\", \"json.filter\", \"'where_s:NY'\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json body in params come \"after\" (will overwrite)\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json.x params come after body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json.query\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n\n    // test facet with json body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\")\n        , \"facets=={count:6,x:2}\"\n    );\n\n    // test facet with json body, insert additional facets via query parameter\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\", \"json.facet.y\",\"{terms:{field:where_s}}\", \"json.facet.z\",\"'unique(where_s)'\")\n        , \"facets=={count:6,x:2, y:{buckets:[{val:NJ,count:3},{val:NY,count:2}]}, z:2}\"\n    );\n\n    // test debug\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json.filter\",\"'where_s:NY'\", \"debug\",\"true\")\n        , \"debug/json=={query:'cat_s:A', filter:'where_s:NY'}\"\n    );\n\n    // test query dsl\n    client.testJQ( params(\"json\", \"{'query':'{!lucene}id:1'}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'lucene' : {'query' : 'id:1'}},\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        'id:1',\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{   \" +\n            \" query : {\" +\n            \"  boost : {\" +\n            \"   query : {\" +\n            \"    lucene : {      \" +\n            \"     df : cat_s,      \" +\n            \"     query : A     \" +\n            \"    }\" +\n            \"   },   \" +\n            \"   b : 1.5 \" +\n            \"  }  \" +\n            \" } \" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : {lucene : {query:'id: 1'}}\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : [{lucene : {query:'id: 1'}}]\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : '{!lucene q.op=AND df=cat_s}A'\" +\n            \"   must_not : '{!lucene v=\\\\'id:1\\\\'}'\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : '*:*',\" +\n            \" filter : {\" +\n            \"  collapse : {\" +\n            \"   field : cat_s\" +\n            \"  } \" +\n            \" } \" +\n            \"}\")\n        , isDistrib ? \"\" : \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NJ'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NY'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'1'},{id:'4'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : 'cat_s^0.1 where_s^100'\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'5'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : ['cat_s^100', 'where_s^0.1']\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" :  \"response/docs==[{id:'4'},{id:'1'},{id:'5'}]\"\n    );\n\n    try {\n      client.testJQ(params(\"json\", \"{query:{'lucene':'id:1'}}\"));\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"id:1\"));\n    }\n\n    try {\n      // test failure on unknown parameter\n      client.testJQ(params(\"json\", \"{query:'cat_s:A', foobar_ignore_exception:5}\")\n          , \"response/numFound==2\"\n      );\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foobar\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["664c02a9f8ee4f39f4731f071c69e1932178f381"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/json/TestJsonRequest#doJsonRequest(Client,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/json/TestJsonRequest#doJsonRequest(Client,boolean).mjava","sourceNew":"  public static void doJsonRequest(Client client, boolean isDistrib) throws Exception {\n    addDocs(client);\n\n    // test json param\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==2\"\n    );\n\n    // test multiple json params\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being zero length\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being a comment\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, second value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, first value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, both values are already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths with an empty string and a comment\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.filter\",\"\", \"json.filter\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test overwriting of non-multivalued params\n    client.testJQ( params(\"json.query\",\"'foo_s:NONE'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.query\",\"'*:*'\")\n        , \"response/numFound==1\"\n    );\n\n    // normal parameter specified in the params block, including numeric params cast back to string\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:NY'], start:0, rows:5, fl:id}}\")\n        , \"response/docs==[{id:'1'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:id, sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5'], sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n    // test merge params\n    client.testJQ( params(\"json\",\"{params:{q:'*:*'}}\", \"json\",\"{params:{fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5']}}\", \"json\",\"{params:{sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n\n\n    // test offset/limit/sort/fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\")\n        , \"response/docs==[{id:'5'},{id:'4'}]\"\n    );\n    // test offset/limit/sort/fields, multi-valued json.fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n    // test offset/limit/sort/fields, overwriting non-multivalued params\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"17\", \"json.offset\",\"1\", \"json.limit\",\"42\", \"json.limit\",\"2\", \"json.sort\",\"'id asc'\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n\n\n\n    // test templating before parsing JSON\n    client.testJQ( params(\"json\",\"${OPENBRACE} query:'cat_s:A' ${CLOSEBRACE}\", \"json\",\"${OPENBRACE} filter:'where_s:NY'${CLOSEBRACE}\",  \"OPENBRACE\",\"{\", \"CLOSEBRACE\",\"}\")\n        , \"response/numFound==1\"\n    );\n\n    // test templating with params defined in the JSON itself!  Do we want to keep this functionality?\n    client.testJQ( params(\"json\",\"{params:{V1:A,V2:NY}, query:'cat_s:${V1}'}\", \"json\",\"{filter:'where_s:${V2}'}\")\n        , \"response/numFound==1\"\n    );\n\n\n    //\n    // with body\n    //\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\")\n        , \"response/numFound==2\"\n    );\n\n    // test body in conjunction with query params\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\", \"json.filter\", \"'where_s:NY'\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json body in params come \"after\" (will overwrite)\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json.x params come after body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json.query\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n\n    // test facet with json body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\")\n        , \"facets=={count:6,x:2}\"\n    );\n\n    // test facet with json body, insert additional facets via query parameter\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\", \"json.facet.y\",\"{terms:{field:where_s}}\", \"json.facet.z\",\"'unique(where_s)'\")\n        , \"facets=={count:6,x:2, y:{buckets:[{val:NJ,count:3},{val:NY,count:2}]}, z:2}\"\n    );\n\n    // test debug\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json.filter\",\"'where_s:NY'\", \"debug\",\"true\")\n        , \"debug/json=={query:'cat_s:A', filter:'where_s:NY'}\"\n    );\n\n    // test query dsl\n    client.testJQ( params(\"json\", \"{'query':'{!lucene}id:1'}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'lucene' : {'query' : 'id:1'}},\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'#MYTAG' : 'id:1'},\" +  // tagged query (the tag should do nothing here)\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{   \" +\n            \" query : {\" +\n            \"  boost : {\" +\n            \"   query : {\" +\n            \"    lucene : {      \" +\n            \"     df : cat_s,      \" +\n            \"     query : A     \" +\n            \"    }\" +\n            \"   },   \" +\n            \"   b : 1.5 \" +\n            \"  }  \" +\n            \" } \" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : {'#NOT':{lucene : {query:'id: 1'}}}\" +  // testing tagging syntax at the same time (the tag should do nothing here)\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : [{lucene : {query:'id: 1'}}]\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : '{!lucene q.op=AND df=cat_s}A'\" +\n            \"   must_not : '{!lucene v=\\\\'id:1\\\\'}'\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : '*:*',\" +\n            \" filter : {\" +\n            \"  collapse : {\" +\n            \"   field : cat_s\" +\n            \"  } \" +\n            \" } \" +\n            \"}\")\n        , isDistrib ? \"\" : \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NJ'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NY'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'1'},{id:'4'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : 'cat_s^0.1 where_s^100'\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'5'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : ['cat_s^100', 'where_s^0.1']\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" :  \"response/docs==[{id:'4'},{id:'1'},{id:'5'}]\"\n    );\n\n    try {\n      client.testJQ(params(\"json\", \"{query:{'lucene':'foo_s:ignore_exception'}}\"));  // TODO: this seems like a reasonable capability that we would want to support in the future.  It should be OK to make this pass.\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foo_s\"));\n    }\n\n    try {\n      // test failure on unknown parameter\n      client.testJQ(params(\"json\", \"{query:'cat_s:A', foobar_ignore_exception:5}\")\n          , \"response/numFound==2\"\n      );\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foobar\"));\n    }\n\n  }\n\n","sourceOld":"  public static void doJsonRequest(Client client, boolean isDistrib) throws Exception {\n    addDocs(client);\n\n    // test json param\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==2\"\n    );\n\n    // test multiple json params\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being zero length\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being a comment\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, second value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, first value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, both values are already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths with an empty string and a comment\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.filter\",\"\", \"json.filter\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test overwriting of non-multivalued params\n    client.testJQ( params(\"json.query\",\"'foo_s:NONE'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.query\",\"'*:*'\")\n        , \"response/numFound==1\"\n    );\n\n    // normal parameter specified in the params block, including numeric params cast back to string\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:NY'], start:0, rows:5, fl:id}}\")\n        , \"response/docs==[{id:'1'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:id, sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5'], sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n    // test merge params\n    client.testJQ( params(\"json\",\"{params:{q:'*:*'}}\", \"json\",\"{params:{fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5']}}\", \"json\",\"{params:{sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n\n\n    // test offset/limit/sort/fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\")\n        , \"response/docs==[{id:'5'},{id:'4'}]\"\n    );\n    // test offset/limit/sort/fields, multi-valued json.fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n    // test offset/limit/sort/fields, overwriting non-multivalued params\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"17\", \"json.offset\",\"1\", \"json.limit\",\"42\", \"json.limit\",\"2\", \"json.sort\",\"'id asc'\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n\n\n\n    // test templating before parsing JSON\n    client.testJQ( params(\"json\",\"${OPENBRACE} query:'cat_s:A' ${CLOSEBRACE}\", \"json\",\"${OPENBRACE} filter:'where_s:NY'${CLOSEBRACE}\",  \"OPENBRACE\",\"{\", \"CLOSEBRACE\",\"}\")\n        , \"response/numFound==1\"\n    );\n\n    // test templating with params defined in the JSON itself!  Do we want to keep this functionality?\n    client.testJQ( params(\"json\",\"{params:{V1:A,V2:NY}, query:'cat_s:${V1}'}\", \"json\",\"{filter:'where_s:${V2}'}\")\n        , \"response/numFound==1\"\n    );\n\n\n    //\n    // with body\n    //\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\")\n        , \"response/numFound==2\"\n    );\n\n    // test body in conjunction with query params\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\", \"json.filter\", \"'where_s:NY'\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json body in params come \"after\" (will overwrite)\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json.x params come after body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json.query\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n\n    // test facet with json body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\")\n        , \"facets=={count:6,x:2}\"\n    );\n\n    // test facet with json body, insert additional facets via query parameter\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\", \"json.facet.y\",\"{terms:{field:where_s}}\", \"json.facet.z\",\"'unique(where_s)'\")\n        , \"facets=={count:6,x:2, y:{buckets:[{val:NJ,count:3},{val:NY,count:2}]}, z:2}\"\n    );\n\n    // test debug\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json.filter\",\"'where_s:NY'\", \"debug\",\"true\")\n        , \"debug/json=={query:'cat_s:A', filter:'where_s:NY'}\"\n    );\n\n    // test query dsl\n    client.testJQ( params(\"json\", \"{'query':'{!lucene}id:1'}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'lucene' : {'query' : 'id:1'}},\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        'id:1',\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{   \" +\n            \" query : {\" +\n            \"  boost : {\" +\n            \"   query : {\" +\n            \"    lucene : {      \" +\n            \"     df : cat_s,      \" +\n            \"     query : A     \" +\n            \"    }\" +\n            \"   },   \" +\n            \"   b : 1.5 \" +\n            \"  }  \" +\n            \" } \" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : {lucene : {query:'id: 1'}}\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : [{lucene : {query:'id: 1'}}]\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : '{!lucene q.op=AND df=cat_s}A'\" +\n            \"   must_not : '{!lucene v=\\\\'id:1\\\\'}'\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : '*:*',\" +\n            \" filter : {\" +\n            \"  collapse : {\" +\n            \"   field : cat_s\" +\n            \"  } \" +\n            \" } \" +\n            \"}\")\n        , isDistrib ? \"\" : \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NJ'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NY'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'1'},{id:'4'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : 'cat_s^0.1 where_s^100'\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'5'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : ['cat_s^100', 'where_s^0.1']\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" :  \"response/docs==[{id:'4'},{id:'1'},{id:'5'}]\"\n    );\n\n    try {\n      client.testJQ(params(\"json\", \"{query:{'lucene':'id:1'}}\"));\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"id:1\"));\n    }\n\n    try {\n      // test failure on unknown parameter\n      client.testJQ(params(\"json\", \"{query:'cat_s:A', foobar_ignore_exception:5}\")\n          , \"response/numFound==2\"\n      );\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foobar\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/json/TestJsonRequest#doJsonRequest(Client,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/json/TestJsonRequest#doJsonRequest(Client,boolean).mjava","sourceNew":"  public static void doJsonRequest(Client client, boolean isDistrib) throws Exception {\n    addDocs(client);\n\n    // test json param\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==2\"\n    );\n\n    // test multiple json params\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being zero length\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being a comment\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, second value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, first value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, both values are already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths with an empty string and a comment\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.filter\",\"\", \"json.filter\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test overwriting of non-multivalued params\n    client.testJQ( params(\"json.query\",\"'foo_s:NONE'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.query\",\"'*:*'\")\n        , \"response/numFound==1\"\n    );\n\n    // normal parameter specified in the params block, including numeric params cast back to string\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:NY'], start:0, rows:5, fl:id}}\")\n        , \"response/docs==[{id:'1'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:id, sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5'], sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n    // test merge params\n    client.testJQ( params(\"json\",\"{params:{q:'*:*'}}\", \"json\",\"{params:{fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5']}}\", \"json\",\"{params:{sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n\n\n    // test offset/limit/sort/fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\")\n        , \"response/docs==[{id:'5'},{id:'4'}]\"\n    );\n    // test offset/limit/sort/fields, multi-valued json.fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n    // test offset/limit/sort/fields, overwriting non-multivalued params\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"17\", \"json.offset\",\"1\", \"json.limit\",\"42\", \"json.limit\",\"2\", \"json.sort\",\"'id asc'\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n\n\n\n    // test templating before parsing JSON\n    client.testJQ( params(\"json\",\"${OPENBRACE} query:'cat_s:A' ${CLOSEBRACE}\", \"json\",\"${OPENBRACE} filter:'where_s:NY'${CLOSEBRACE}\",  \"OPENBRACE\",\"{\", \"CLOSEBRACE\",\"}\")\n        , \"response/numFound==1\"\n    );\n\n    // test templating with params defined in the JSON itself!  Do we want to keep this functionality?\n    client.testJQ( params(\"json\",\"{params:{V1:A,V2:NY}, query:'cat_s:${V1}'}\", \"json\",\"{filter:'where_s:${V2}'}\")\n        , \"response/numFound==1\"\n    );\n\n\n    //\n    // with body\n    //\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\")\n        , \"response/numFound==2\"\n    );\n\n    // test body in conjunction with query params\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\", \"json.filter\", \"'where_s:NY'\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json body in params come \"after\" (will overwrite)\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json.x params come after body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json.query\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n\n    // test facet with json body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\")\n        , \"facets=={count:6,x:2}\"\n    );\n\n    // test facet with json body, insert additional facets via query parameter\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\", \"json.facet.y\",\"{terms:{field:where_s}}\", \"json.facet.z\",\"'unique(where_s)'\")\n        , \"facets=={count:6,x:2, y:{buckets:[{val:NJ,count:3},{val:NY,count:2}]}, z:2}\"\n    );\n\n    // test debug\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json.filter\",\"'where_s:NY'\", \"debug\",\"true\")\n        , \"debug/json=={query:'cat_s:A', filter:'where_s:NY'}\"\n    );\n\n    // test query dsl\n    client.testJQ( params(\"json\", \"{'query':'{!lucene}id:1'}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'lucene' : {'query' : 'id:1'}},\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'#MYTAG' : 'id:1'},\" +  // tagged query (the tag should do nothing here)\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{   \" +\n            \" query : {\" +\n            \"  boost : {\" +\n            \"   query : {\" +\n            \"    lucene : {      \" +\n            \"     df : cat_s,      \" +\n            \"     query : A     \" +\n            \"    }\" +\n            \"   },   \" +\n            \"   b : 1.5 \" +\n            \"  }  \" +\n            \" } \" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : {'#NOT':{lucene : {query:'id: 1'}}}\" +  // testing tagging syntax at the same time (the tag should do nothing here)\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : [{lucene : {query:'id: 1'}}]\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : '{!lucene q.op=AND df=cat_s}A'\" +\n            \"   must_not : '{!lucene v=\\\\'id:1\\\\'}'\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : '*:*',\" +\n            \" filter : {\" +\n            \"  collapse : {\" +\n            \"   field : cat_s\" +\n            \"  } \" +\n            \" } \" +\n            \"}\")\n        , isDistrib ? \"\" : \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NJ'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NY'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'1'},{id:'4'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : 'cat_s^0.1 where_s^100'\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'5'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : ['cat_s^100', 'where_s^0.1']\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" :  \"response/docs==[{id:'4'},{id:'1'},{id:'5'}]\"\n    );\n\n    try {\n      client.testJQ(params(\"json\", \"{query:{'lucene':'foo_s:ignore_exception'}}\"));  // TODO: this seems like a reasonable capability that we would want to support in the future.  It should be OK to make this pass.\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foo_s\"));\n    }\n\n    try {\n      // test failure on unknown parameter\n      client.testJQ(params(\"json\", \"{query:'cat_s:A', foobar_ignore_exception:5}\")\n          , \"response/numFound==2\"\n      );\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foobar\"));\n    }\n\n  }\n\n","sourceOld":"  public static void doJsonRequest(Client client, boolean isDistrib) throws Exception {\n    addDocs(client);\n\n    // test json param\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==2\"\n    );\n\n    // test multiple json params\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being zero length\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being a comment\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, second value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, first value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, both values are already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths with an empty string and a comment\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.filter\",\"\", \"json.filter\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test overwriting of non-multivalued params\n    client.testJQ( params(\"json.query\",\"'foo_s:NONE'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.query\",\"'*:*'\")\n        , \"response/numFound==1\"\n    );\n\n    // normal parameter specified in the params block, including numeric params cast back to string\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:NY'], start:0, rows:5, fl:id}}\")\n        , \"response/docs==[{id:'1'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:id, sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5'], sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n    // test merge params\n    client.testJQ( params(\"json\",\"{params:{q:'*:*'}}\", \"json\",\"{params:{fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5']}}\", \"json\",\"{params:{sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n\n\n    // test offset/limit/sort/fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\")\n        , \"response/docs==[{id:'5'},{id:'4'}]\"\n    );\n    // test offset/limit/sort/fields, multi-valued json.fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n    // test offset/limit/sort/fields, overwriting non-multivalued params\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"17\", \"json.offset\",\"1\", \"json.limit\",\"42\", \"json.limit\",\"2\", \"json.sort\",\"'id asc'\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n\n\n\n    // test templating before parsing JSON\n    client.testJQ( params(\"json\",\"${OPENBRACE} query:'cat_s:A' ${CLOSEBRACE}\", \"json\",\"${OPENBRACE} filter:'where_s:NY'${CLOSEBRACE}\",  \"OPENBRACE\",\"{\", \"CLOSEBRACE\",\"}\")\n        , \"response/numFound==1\"\n    );\n\n    // test templating with params defined in the JSON itself!  Do we want to keep this functionality?\n    client.testJQ( params(\"json\",\"{params:{V1:A,V2:NY}, query:'cat_s:${V1}'}\", \"json\",\"{filter:'where_s:${V2}'}\")\n        , \"response/numFound==1\"\n    );\n\n\n    //\n    // with body\n    //\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\")\n        , \"response/numFound==2\"\n    );\n\n    // test body in conjunction with query params\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\", \"json.filter\", \"'where_s:NY'\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json body in params come \"after\" (will overwrite)\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json.x params come after body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json.query\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n\n    // test facet with json body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\")\n        , \"facets=={count:6,x:2}\"\n    );\n\n    // test facet with json body, insert additional facets via query parameter\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\", \"json.facet.y\",\"{terms:{field:where_s}}\", \"json.facet.z\",\"'unique(where_s)'\")\n        , \"facets=={count:6,x:2, y:{buckets:[{val:NJ,count:3},{val:NY,count:2}]}, z:2}\"\n    );\n\n    // test debug\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json.filter\",\"'where_s:NY'\", \"debug\",\"true\")\n        , \"debug/json=={query:'cat_s:A', filter:'where_s:NY'}\"\n    );\n\n    // test query dsl\n    client.testJQ( params(\"json\", \"{'query':'{!lucene}id:1'}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'lucene' : {'query' : 'id:1'}},\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        'id:1',\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{   \" +\n            \" query : {\" +\n            \"  boost : {\" +\n            \"   query : {\" +\n            \"    lucene : {      \" +\n            \"     df : cat_s,      \" +\n            \"     query : A     \" +\n            \"    }\" +\n            \"   },   \" +\n            \"   b : 1.5 \" +\n            \"  }  \" +\n            \" } \" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : {lucene : {query:'id: 1'}}\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : [{lucene : {query:'id: 1'}}]\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : '{!lucene q.op=AND df=cat_s}A'\" +\n            \"   must_not : '{!lucene v=\\\\'id:1\\\\'}'\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : '*:*',\" +\n            \" filter : {\" +\n            \"  collapse : {\" +\n            \"   field : cat_s\" +\n            \"  } \" +\n            \" } \" +\n            \"}\")\n        , isDistrib ? \"\" : \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NJ'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NY'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'1'},{id:'4'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : 'cat_s^0.1 where_s^100'\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'5'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : ['cat_s^100', 'where_s^0.1']\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" :  \"response/docs==[{id:'4'},{id:'1'},{id:'5'}]\"\n    );\n\n    try {\n      client.testJQ(params(\"json\", \"{query:{'lucene':'id:1'}}\"));\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"id:1\"));\n    }\n\n    try {\n      // test failure on unknown parameter\n      client.testJQ(params(\"json\", \"{query:'cat_s:A', foobar_ignore_exception:5}\")\n          , \"response/numFound==2\"\n      );\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foobar\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7fc85b1dff2ce036b914dcd14fb0bf4a113cf0ab","date":1569649338,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/json/TestJsonRequest#doJsonRequest(Client,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/json/TestJsonRequest#doJsonRequest(Client,boolean).mjava","sourceNew":"  public static void doJsonRequest(Client client, boolean isDistrib) throws Exception {\n    addDocs(client);\n\n    // test json param\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==2\"\n    );\n\n    // invalid value\n    SolrException ex = expectThrows(SolrException.class, () -> client.testJQ(params(\"q\", \"*:*\", \"json\", \"5\")));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n\n    // this is to verify other json params are not affected\n    client.testJQ( params(\"q\", \"cat_s:A\", \"json.limit\", \"1\"),\n        \"response/numFound==2\"\n    );\n\n    // test multiple json params\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being zero length\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being a comment\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, second value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, first value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, both values are already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths with an empty string and a comment\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.filter\",\"\", \"json.filter\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test overwriting of non-multivalued params\n    client.testJQ( params(\"json.query\",\"'foo_s:NONE'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.query\",\"'*:*'\")\n        , \"response/numFound==1\"\n    );\n\n    // normal parameter specified in the params block, including numeric params cast back to string\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:NY'], start:0, rows:5, fl:id}}\")\n        , \"response/docs==[{id:'1'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:id, sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5'], sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n    // test merge params\n    client.testJQ( params(\"json\",\"{params:{q:'*:*'}}\", \"json\",\"{params:{fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5']}}\", \"json\",\"{params:{sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n\n\n    // test offset/limit/sort/fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\")\n        , \"response/docs==[{id:'5'},{id:'4'}]\"\n    );\n    // test offset/limit/sort/fields, multi-valued json.fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n    // test offset/limit/sort/fields, overwriting non-multivalued params\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"17\", \"json.offset\",\"1\", \"json.limit\",\"42\", \"json.limit\",\"2\", \"json.sort\",\"'id asc'\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n\n\n\n    // test templating before parsing JSON\n    client.testJQ( params(\"json\",\"${OPENBRACE} query:'cat_s:A' ${CLOSEBRACE}\", \"json\",\"${OPENBRACE} filter:'where_s:NY'${CLOSEBRACE}\",  \"OPENBRACE\",\"{\", \"CLOSEBRACE\",\"}\")\n        , \"response/numFound==1\"\n    );\n\n    // test templating with params defined in the JSON itself!  Do we want to keep this functionality?\n    client.testJQ( params(\"json\",\"{params:{V1:A,V2:NY}, query:'cat_s:${V1}'}\", \"json\",\"{filter:'where_s:${V2}'}\")\n        , \"response/numFound==1\"\n    );\n\n\n    //\n    // with body\n    //\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\")\n        , \"response/numFound==2\"\n    );\n\n    // test body in conjunction with query params\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\", \"json.filter\", \"'where_s:NY'\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json body in params come \"after\" (will overwrite)\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json.x params come after body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json.query\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n\n    // test facet with json body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\")\n        , \"facets=={count:6,x:2}\"\n    );\n\n    // test facet with json body, insert additional facets via query parameter\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\", \"json.facet.y\",\"{terms:{field:where_s}}\", \"json.facet.z\",\"'unique(where_s)'\")\n        , \"facets=={count:6,x:2, y:{buckets:[{val:NJ,count:3},{val:NY,count:2}]}, z:2}\"\n    );\n\n    // test debug\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json.filter\",\"'where_s:NY'\", \"debug\",\"true\")\n        , \"debug/json=={query:'cat_s:A', filter:'where_s:NY'}\"\n    );\n\n    // test query dsl\n    client.testJQ( params(\"json\", \"{'query':'{!lucene}id:1'}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'lucene' : {'query' : 'id:1'}},\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'#MYTAG' : 'id:1'},\" +  // tagged query (the tag should do nothing here)\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{   \" +\n            \" query : {\" +\n            \"  boost : {\" +\n            \"   query : {\" +\n            \"    lucene : {      \" +\n            \"     df : cat_s,      \" +\n            \"     query : A     \" +\n            \"    }\" +\n            \"   },   \" +\n            \"   b : 1.5 \" +\n            \"  }  \" +\n            \" } \" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : {'#NOT':{lucene : {query:'id: 1'}}}\" +  // testing tagging syntax at the same time (the tag should do nothing here)\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : [{lucene : {query:'id: 1'}}]\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : '{!lucene q.op=AND df=cat_s}A'\" +\n            \"   must_not : '{!lucene v=\\\\'id:1\\\\'}'\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : '*:*',\" +\n            \" filter : {\" +\n            \"  collapse : {\" +\n            \"   field : cat_s\" +\n            \"  } \" +\n            \" } \" +\n            \"}\")\n        , isDistrib ? \"\" : \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NJ'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NY'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'1'},{id:'4'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : 'cat_s^0.1 where_s^100'\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'5'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : ['cat_s^100', 'where_s^0.1']\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" :  \"response/docs==[{id:'4'},{id:'1'},{id:'5'}]\"\n    );\n\n    try {\n      client.testJQ(params(\"json\", \"{query:{'lucene':'foo_s:ignore_exception'}}\"));  // TODO: this seems like a reasonable capability that we would want to support in the future.  It should be OK to make this pass.\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foo_s\"));\n    }\n\n    try {\n      // test failure on unknown parameter\n      client.testJQ(params(\"json\", \"{query:'cat_s:A', foobar_ignore_exception:5}\")\n          , \"response/numFound==2\"\n      );\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foobar\"));\n    }\n\n  }\n\n","sourceOld":"  public static void doJsonRequest(Client client, boolean isDistrib) throws Exception {\n    addDocs(client);\n\n    // test json param\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==2\"\n    );\n\n    // test multiple json params\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being zero length\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being a comment\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, second value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, first value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, both values are already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths with an empty string and a comment\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.filter\",\"\", \"json.filter\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test overwriting of non-multivalued params\n    client.testJQ( params(\"json.query\",\"'foo_s:NONE'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.query\",\"'*:*'\")\n        , \"response/numFound==1\"\n    );\n\n    // normal parameter specified in the params block, including numeric params cast back to string\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:NY'], start:0, rows:5, fl:id}}\")\n        , \"response/docs==[{id:'1'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:id, sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5'], sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n    // test merge params\n    client.testJQ( params(\"json\",\"{params:{q:'*:*'}}\", \"json\",\"{params:{fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5']}}\", \"json\",\"{params:{sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n\n\n    // test offset/limit/sort/fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\")\n        , \"response/docs==[{id:'5'},{id:'4'}]\"\n    );\n    // test offset/limit/sort/fields, multi-valued json.fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n    // test offset/limit/sort/fields, overwriting non-multivalued params\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"17\", \"json.offset\",\"1\", \"json.limit\",\"42\", \"json.limit\",\"2\", \"json.sort\",\"'id asc'\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n\n\n\n    // test templating before parsing JSON\n    client.testJQ( params(\"json\",\"${OPENBRACE} query:'cat_s:A' ${CLOSEBRACE}\", \"json\",\"${OPENBRACE} filter:'where_s:NY'${CLOSEBRACE}\",  \"OPENBRACE\",\"{\", \"CLOSEBRACE\",\"}\")\n        , \"response/numFound==1\"\n    );\n\n    // test templating with params defined in the JSON itself!  Do we want to keep this functionality?\n    client.testJQ( params(\"json\",\"{params:{V1:A,V2:NY}, query:'cat_s:${V1}'}\", \"json\",\"{filter:'where_s:${V2}'}\")\n        , \"response/numFound==1\"\n    );\n\n\n    //\n    // with body\n    //\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\")\n        , \"response/numFound==2\"\n    );\n\n    // test body in conjunction with query params\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\", \"json.filter\", \"'where_s:NY'\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json body in params come \"after\" (will overwrite)\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json.x params come after body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json.query\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n\n    // test facet with json body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\")\n        , \"facets=={count:6,x:2}\"\n    );\n\n    // test facet with json body, insert additional facets via query parameter\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\", \"json.facet.y\",\"{terms:{field:where_s}}\", \"json.facet.z\",\"'unique(where_s)'\")\n        , \"facets=={count:6,x:2, y:{buckets:[{val:NJ,count:3},{val:NY,count:2}]}, z:2}\"\n    );\n\n    // test debug\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json.filter\",\"'where_s:NY'\", \"debug\",\"true\")\n        , \"debug/json=={query:'cat_s:A', filter:'where_s:NY'}\"\n    );\n\n    // test query dsl\n    client.testJQ( params(\"json\", \"{'query':'{!lucene}id:1'}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'lucene' : {'query' : 'id:1'}},\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'#MYTAG' : 'id:1'},\" +  // tagged query (the tag should do nothing here)\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{   \" +\n            \" query : {\" +\n            \"  boost : {\" +\n            \"   query : {\" +\n            \"    lucene : {      \" +\n            \"     df : cat_s,      \" +\n            \"     query : A     \" +\n            \"    }\" +\n            \"   },   \" +\n            \"   b : 1.5 \" +\n            \"  }  \" +\n            \" } \" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : {'#NOT':{lucene : {query:'id: 1'}}}\" +  // testing tagging syntax at the same time (the tag should do nothing here)\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : [{lucene : {query:'id: 1'}}]\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : '{!lucene q.op=AND df=cat_s}A'\" +\n            \"   must_not : '{!lucene v=\\\\'id:1\\\\'}'\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : '*:*',\" +\n            \" filter : {\" +\n            \"  collapse : {\" +\n            \"   field : cat_s\" +\n            \"  } \" +\n            \" } \" +\n            \"}\")\n        , isDistrib ? \"\" : \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NJ'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NY'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'1'},{id:'4'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : 'cat_s^0.1 where_s^100'\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'5'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : ['cat_s^100', 'where_s^0.1']\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" :  \"response/docs==[{id:'4'},{id:'1'},{id:'5'}]\"\n    );\n\n    try {\n      client.testJQ(params(\"json\", \"{query:{'lucene':'foo_s:ignore_exception'}}\"));  // TODO: this seems like a reasonable capability that we would want to support in the future.  It should be OK to make this pass.\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foo_s\"));\n    }\n\n    try {\n      // test failure on unknown parameter\n      client.testJQ(params(\"json\", \"{query:'cat_s:A', foobar_ignore_exception:5}\")\n          , \"response/numFound==2\"\n      );\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foobar\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b9f74021389e2b32ee750fa5a24281c87951ec3","date":1569845983,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/json/TestJsonRequest#doJsonRequest(Client,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/json/TestJsonRequest#doJsonRequest(Client,boolean).mjava","sourceNew":"  public static void doJsonRequest(Client client, boolean isDistrib) throws Exception {\n    addDocs(client);\n\n    // test json param\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==2\"\n    );\n\n    // invalid value\n    SolrException ex = expectThrows(SolrException.class, () -> client.testJQ(params(\"q\", \"*:*\", \"json\", \"5\")));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n\n    // this is to verify other json params are not affected\n    client.testJQ( params(\"q\", \"cat_s:A\", \"json.limit\", \"1\"),\n        \"response/numFound==2\"\n    );\n\n    // test multiple json params\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being zero length\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being a comment\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, second value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, first value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, both values are already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths with an empty string and a comment\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.filter\",\"\", \"json.filter\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test overwriting of non-multivalued params\n    client.testJQ( params(\"json.query\",\"'foo_s:NONE'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.query\",\"'*:*'\")\n        , \"response/numFound==1\"\n    );\n\n    // normal parameter specified in the params block, including numeric params cast back to string\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:NY'], start:0, rows:5, fl:id}}\")\n        , \"response/docs==[{id:'1'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:id, sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5'], sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n    // test merge params\n    client.testJQ( params(\"json\",\"{params:{q:'*:*'}}\", \"json\",\"{params:{fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5']}}\", \"json\",\"{params:{sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n\n\n    // test offset/limit/sort/fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\")\n        , \"response/docs==[{id:'5'},{id:'4'}]\"\n    );\n    // test offset/limit/sort/fields, multi-valued json.fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n    // test offset/limit/sort/fields, overwriting non-multivalued params\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"17\", \"json.offset\",\"1\", \"json.limit\",\"42\", \"json.limit\",\"2\", \"json.sort\",\"'id asc'\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n\n\n\n    // test templating before parsing JSON\n    client.testJQ( params(\"json\",\"${OPENBRACE} query:'cat_s:A' ${CLOSEBRACE}\", \"json\",\"${OPENBRACE} filter:'where_s:NY'${CLOSEBRACE}\",  \"OPENBRACE\",\"{\", \"CLOSEBRACE\",\"}\")\n        , \"response/numFound==1\"\n    );\n\n    // test templating with params defined in the JSON itself!  Do we want to keep this functionality?\n    client.testJQ( params(\"json\",\"{params:{V1:A,V2:NY}, query:'cat_s:${V1}'}\", \"json\",\"{filter:'where_s:${V2}'}\")\n        , \"response/numFound==1\"\n    );\n\n\n    //\n    // with body\n    //\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\")\n        , \"response/numFound==2\"\n    );\n\n    // test body in conjunction with query params\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\", \"json.filter\", \"'where_s:NY'\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json body in params come \"after\" (will overwrite)\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json.x params come after body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json.query\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n\n    // test facet with json body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\")\n        , \"facets=={count:6,x:2}\"\n    );\n\n    // test facet with json body, insert additional facets via query parameter\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\", \"json.facet.y\",\"{terms:{field:where_s}}\", \"json.facet.z\",\"'unique(where_s)'\")\n        , \"facets=={count:6,x:2, y:{buckets:[{val:NJ,count:3},{val:NY,count:2}]}, z:2}\"\n    );\n\n    // test debug\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json.filter\",\"'where_s:NY'\", \"debug\",\"true\")\n        , \"debug/json=={query:'cat_s:A', filter:'where_s:NY'}\"\n    );\n\n    // test query dsl\n    client.testJQ( params(\"json\", \"{'query':'{!lucene}id:1'}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'lucene' : {'query' : 'id:1'}},\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'#MYTAG' : 'id:1'},\" +  // tagged query (the tag should do nothing here)\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{   \" +\n            \" query : {\" +\n            \"  boost : {\" +\n            \"   query : {\" +\n            \"    lucene : {      \" +\n            \"     df : cat_s,      \" +\n            \"     query : A     \" +\n            \"    }\" +\n            \"   },   \" +\n            \"   b : 1.5 \" +\n            \"  }  \" +\n            \" } \" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : {'#NOT':{lucene : {query:'id: 1'}}}\" +  // testing tagging syntax at the same time (the tag should do nothing here)\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : [{lucene : {query:'id: 1'}}]\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : '{!lucene q.op=AND df=cat_s}A'\" +\n            \"   must_not : '{!lucene v=\\\\'id:1\\\\'}'\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : '*:*',\" +\n            \" filter : {\" +\n            \"  collapse : {\" +\n            \"   field : cat_s\" +\n            \"  } \" +\n            \" } \" +\n            \"}\")\n        , isDistrib ? \"\" : \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NJ'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NY'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'1'},{id:'4'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : 'cat_s^0.1 where_s^100'\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'5'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : ['cat_s^100', 'where_s^0.1']\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" :  \"response/docs==[{id:'4'},{id:'1'},{id:'5'}]\"\n    );\n\n    try {\n      client.testJQ(params(\"json\", \"{query:{'lucene':'foo_s:ignore_exception'}}\"));  // TODO: this seems like a reasonable capability that we would want to support in the future.  It should be OK to make this pass.\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foo_s\"));\n    }\n\n    try {\n      // test failure on unknown parameter\n      client.testJQ(params(\"json\", \"{query:'cat_s:A', foobar_ignore_exception:5}\")\n          , \"response/numFound==2\"\n      );\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foobar\"));\n    }\n\n  }\n\n","sourceOld":"  public static void doJsonRequest(Client client, boolean isDistrib) throws Exception {\n    addDocs(client);\n\n    // test json param\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==2\"\n    );\n\n    // test multiple json params\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being zero length\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being a comment\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, second value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, first value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, both values are already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths with an empty string and a comment\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.filter\",\"\", \"json.filter\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test overwriting of non-multivalued params\n    client.testJQ( params(\"json.query\",\"'foo_s:NONE'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.query\",\"'*:*'\")\n        , \"response/numFound==1\"\n    );\n\n    // normal parameter specified in the params block, including numeric params cast back to string\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:NY'], start:0, rows:5, fl:id}}\")\n        , \"response/docs==[{id:'1'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:id, sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5'], sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n    // test merge params\n    client.testJQ( params(\"json\",\"{params:{q:'*:*'}}\", \"json\",\"{params:{fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5']}}\", \"json\",\"{params:{sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n\n\n    // test offset/limit/sort/fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\")\n        , \"response/docs==[{id:'5'},{id:'4'}]\"\n    );\n    // test offset/limit/sort/fields, multi-valued json.fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n    // test offset/limit/sort/fields, overwriting non-multivalued params\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"17\", \"json.offset\",\"1\", \"json.limit\",\"42\", \"json.limit\",\"2\", \"json.sort\",\"'id asc'\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n\n\n\n    // test templating before parsing JSON\n    client.testJQ( params(\"json\",\"${OPENBRACE} query:'cat_s:A' ${CLOSEBRACE}\", \"json\",\"${OPENBRACE} filter:'where_s:NY'${CLOSEBRACE}\",  \"OPENBRACE\",\"{\", \"CLOSEBRACE\",\"}\")\n        , \"response/numFound==1\"\n    );\n\n    // test templating with params defined in the JSON itself!  Do we want to keep this functionality?\n    client.testJQ( params(\"json\",\"{params:{V1:A,V2:NY}, query:'cat_s:${V1}'}\", \"json\",\"{filter:'where_s:${V2}'}\")\n        , \"response/numFound==1\"\n    );\n\n\n    //\n    // with body\n    //\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\")\n        , \"response/numFound==2\"\n    );\n\n    // test body in conjunction with query params\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\", \"json.filter\", \"'where_s:NY'\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json body in params come \"after\" (will overwrite)\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json.x params come after body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json.query\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n\n    // test facet with json body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\")\n        , \"facets=={count:6,x:2}\"\n    );\n\n    // test facet with json body, insert additional facets via query parameter\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\", \"json.facet.y\",\"{terms:{field:where_s}}\", \"json.facet.z\",\"'unique(where_s)'\")\n        , \"facets=={count:6,x:2, y:{buckets:[{val:NJ,count:3},{val:NY,count:2}]}, z:2}\"\n    );\n\n    // test debug\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json.filter\",\"'where_s:NY'\", \"debug\",\"true\")\n        , \"debug/json=={query:'cat_s:A', filter:'where_s:NY'}\"\n    );\n\n    // test query dsl\n    client.testJQ( params(\"json\", \"{'query':'{!lucene}id:1'}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'lucene' : {'query' : 'id:1'}},\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'#MYTAG' : 'id:1'},\" +  // tagged query (the tag should do nothing here)\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{   \" +\n            \" query : {\" +\n            \"  boost : {\" +\n            \"   query : {\" +\n            \"    lucene : {      \" +\n            \"     df : cat_s,      \" +\n            \"     query : A     \" +\n            \"    }\" +\n            \"   },   \" +\n            \"   b : 1.5 \" +\n            \"  }  \" +\n            \" } \" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : {'#NOT':{lucene : {query:'id: 1'}}}\" +  // testing tagging syntax at the same time (the tag should do nothing here)\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : [{lucene : {query:'id: 1'}}]\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : '{!lucene q.op=AND df=cat_s}A'\" +\n            \"   must_not : '{!lucene v=\\\\'id:1\\\\'}'\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : '*:*',\" +\n            \" filter : {\" +\n            \"  collapse : {\" +\n            \"   field : cat_s\" +\n            \"  } \" +\n            \" } \" +\n            \"}\")\n        , isDistrib ? \"\" : \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NJ'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NY'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'1'},{id:'4'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : 'cat_s^0.1 where_s^100'\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'5'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : ['cat_s^100', 'where_s^0.1']\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" :  \"response/docs==[{id:'4'},{id:'1'},{id:'5'}]\"\n    );\n\n    try {\n      client.testJQ(params(\"json\", \"{query:{'lucene':'foo_s:ignore_exception'}}\"));  // TODO: this seems like a reasonable capability that we would want to support in the future.  It should be OK to make this pass.\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foo_s\"));\n    }\n\n    try {\n      // test failure on unknown parameter\n      client.testJQ(params(\"json\", \"{query:'cat_s:A', foobar_ignore_exception:5}\")\n          , \"response/numFound==2\"\n      );\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foobar\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e927cf171dca7f8ff7b206baec5eb7fadadccb92","date":1577558891,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/json/TestJsonRequest#doJsonRequest(Client,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/json/TestJsonRequest#doJsonRequest(Client,boolean).mjava","sourceNew":"  public static void doJsonRequest(Client client, boolean isDistrib) throws Exception {\n    addDocs(client);\n\n    // test json param\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==2\"\n    );\n\n    // invalid value\n    SolrException ex = expectThrows(SolrException.class, () -> client.testJQ(params(\"q\", \"*:*\", \"json\", \"5\")));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n\n    // this is to verify other json params are not affected\n    client.testJQ( params(\"q\", \"cat_s:A\", \"json.limit\", \"1\"),\n        \"response/numFound==2\"\n    );\n\n    // test multiple json params\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being zero length\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being a comment\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, second value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, first value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, both values are already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths with an empty string and a comment\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.filter\",\"\", \"json.filter\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test overwriting of non-multivalued params\n    client.testJQ( params(\"json.query\",\"'foo_s:NONE'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.query\",\"'*:*'\")\n        , \"response/numFound==1\"\n    );\n\n    // normal parameter specified in the params block, including numeric params cast back to string\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:NY'], start:0, rows:5, fl:id}}\")\n        , \"response/docs==[{id:'1'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:id, sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5'], sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n    // test merge params\n    client.testJQ( params(\"json\",\"{params:{q:'*:*'}}\", \"json\",\"{params:{fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5']}}\", \"json\",\"{params:{sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n\n\n    // test offset/limit/sort/fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\")\n        , \"response/docs==[{id:'5'},{id:'4'}]\"\n    );\n    // test offset/limit/sort/fields, multi-valued json.fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n    // test offset/limit/sort/fields, overwriting non-multivalued params\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"17\", \"json.offset\",\"1\", \"json.limit\",\"42\", \"json.limit\",\"2\", \"json.sort\",\"'id asc'\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n\n\n\n    // test templating before parsing JSON\n    client.testJQ( params(\"json\",\"${OPENBRACE} query:'cat_s:A' ${CLOSEBRACE}\", \"json\",\"${OPENBRACE} filter:'where_s:NY'${CLOSEBRACE}\",  \"OPENBRACE\",\"{\", \"CLOSEBRACE\",\"}\")\n        , \"response/numFound==1\"\n    );\n\n    // test templating with params defined in the JSON itself!  Do we want to keep this functionality?\n    client.testJQ( params(\"json\",\"{params:{V1:A,V2:NY}, query:'cat_s:${V1}'}\", \"json\",\"{filter:'where_s:${V2}'}\")\n        , \"response/numFound==1\"\n    );\n\n\n    //\n    // with body\n    //\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\")\n        , \"response/numFound==2\"\n    );\n\n    // test body in conjunction with query params\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\", \"json.filter\", \"'where_s:NY'\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json body in params come \"after\" (will overwrite)\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json.x params come after body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json.query\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n\n    // test facet with json body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\")\n        , \"facets=={count:6,x:2}\"\n    );\n\n    // test facet with json body, insert additional facets via query parameter\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\", \"json.facet.y\",\"{terms:{field:where_s}}\", \"json.facet.z\",\"'unique(where_s)'\")\n        , \"facets=={count:6,x:2, y:{buckets:[{val:NJ,count:3},{val:NY,count:2}]}, z:2}\"\n    );\n\n    // test debug\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json.filter\",\"'where_s:NY'\", \"debug\",\"true\")\n        , \"debug/json=={query:'cat_s:A', filter:'where_s:NY'}\"\n    );\n\n    // test query dsl\n    client.testJQ( params(\"json\", \"{'query':'{!lucene}id:1'}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'lucene' : {'query' : 'id:1'}},\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'#MYTAG' : 'id:1'},\" +  // tagged query (the tag should do nothing here)\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{   \" +\n            \" query : {\" +\n            \"  boost : {\" +\n            \"   query : {\" +\n            \"    lucene : {      \" +\n            \"     df : cat_s,      \" +\n            \"     query : A     \" +\n            \"    }\" +\n            \"   },   \" +\n            \"   b : 1.5 \" +\n            \"  }  \" +\n            \" } \" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : {'#NOT':{lucene : {query:'id: 1'}}}\" +  // testing tagging syntax at the same time (the tag should do nothing here)\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : [{lucene : {query:'id: 1'}}]\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    assertCatANot1(client, \"must\");\n    \n    testFilterCachingLocally(client);\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : '*:*',\" +\n            \" filter : {\" +\n            \"  collapse : {\" +\n            \"   field : cat_s\" +\n            \"  } \" +\n            \" } \" +\n            \"}\")\n        , isDistrib ? \"\" : \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NJ'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NY'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'1'},{id:'4'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : 'cat_s^0.1 where_s^100'\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'5'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : ['cat_s^100', 'where_s^0.1']\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" :  \"response/docs==[{id:'4'},{id:'1'},{id:'5'}]\"\n    );\n\n    try {\n      client.testJQ(params(\"json\", \"{query:{'lucene':'foo_s:ignore_exception'}}\"));  // TODO: this seems like a reasonable capability that we would want to support in the future.  It should be OK to make this pass.\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foo_s\"));\n    }\n\n    try {\n      // test failure on unknown parameter\n      client.testJQ(params(\"json\", \"{query:'cat_s:A', foobar_ignore_exception:5}\")\n          , \"response/numFound==2\"\n      );\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foobar\"));\n    }\n\n  }\n\n","sourceOld":"  public static void doJsonRequest(Client client, boolean isDistrib) throws Exception {\n    addDocs(client);\n\n    // test json param\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==2\"\n    );\n\n    // invalid value\n    SolrException ex = expectThrows(SolrException.class, () -> client.testJQ(params(\"q\", \"*:*\", \"json\", \"5\")));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n\n    // this is to verify other json params are not affected\n    client.testJQ( params(\"q\", \"cat_s:A\", \"json.limit\", \"1\"),\n        \"response/numFound==2\"\n    );\n\n    // test multiple json params\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being zero length\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being a comment\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, second value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, first value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, both values are already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths with an empty string and a comment\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.filter\",\"\", \"json.filter\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test overwriting of non-multivalued params\n    client.testJQ( params(\"json.query\",\"'foo_s:NONE'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.query\",\"'*:*'\")\n        , \"response/numFound==1\"\n    );\n\n    // normal parameter specified in the params block, including numeric params cast back to string\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:NY'], start:0, rows:5, fl:id}}\")\n        , \"response/docs==[{id:'1'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:id, sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5'], sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n    // test merge params\n    client.testJQ( params(\"json\",\"{params:{q:'*:*'}}\", \"json\",\"{params:{fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5']}}\", \"json\",\"{params:{sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n\n\n    // test offset/limit/sort/fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\")\n        , \"response/docs==[{id:'5'},{id:'4'}]\"\n    );\n    // test offset/limit/sort/fields, multi-valued json.fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n    // test offset/limit/sort/fields, overwriting non-multivalued params\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"17\", \"json.offset\",\"1\", \"json.limit\",\"42\", \"json.limit\",\"2\", \"json.sort\",\"'id asc'\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n\n\n\n    // test templating before parsing JSON\n    client.testJQ( params(\"json\",\"${OPENBRACE} query:'cat_s:A' ${CLOSEBRACE}\", \"json\",\"${OPENBRACE} filter:'where_s:NY'${CLOSEBRACE}\",  \"OPENBRACE\",\"{\", \"CLOSEBRACE\",\"}\")\n        , \"response/numFound==1\"\n    );\n\n    // test templating with params defined in the JSON itself!  Do we want to keep this functionality?\n    client.testJQ( params(\"json\",\"{params:{V1:A,V2:NY}, query:'cat_s:${V1}'}\", \"json\",\"{filter:'where_s:${V2}'}\")\n        , \"response/numFound==1\"\n    );\n\n\n    //\n    // with body\n    //\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\")\n        , \"response/numFound==2\"\n    );\n\n    // test body in conjunction with query params\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\", \"json.filter\", \"'where_s:NY'\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json body in params come \"after\" (will overwrite)\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json.x params come after body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json.query\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n\n    // test facet with json body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\")\n        , \"facets=={count:6,x:2}\"\n    );\n\n    // test facet with json body, insert additional facets via query parameter\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\", \"json.facet.y\",\"{terms:{field:where_s}}\", \"json.facet.z\",\"'unique(where_s)'\")\n        , \"facets=={count:6,x:2, y:{buckets:[{val:NJ,count:3},{val:NY,count:2}]}, z:2}\"\n    );\n\n    // test debug\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json.filter\",\"'where_s:NY'\", \"debug\",\"true\")\n        , \"debug/json=={query:'cat_s:A', filter:'where_s:NY'}\"\n    );\n\n    // test query dsl\n    client.testJQ( params(\"json\", \"{'query':'{!lucene}id:1'}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'lucene' : {'query' : 'id:1'}},\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'#MYTAG' : 'id:1'},\" +  // tagged query (the tag should do nothing here)\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{   \" +\n            \" query : {\" +\n            \"  boost : {\" +\n            \"   query : {\" +\n            \"    lucene : {      \" +\n            \"     df : cat_s,      \" +\n            \"     query : A     \" +\n            \"    }\" +\n            \"   },   \" +\n            \"   b : 1.5 \" +\n            \"  }  \" +\n            \" } \" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : {'#NOT':{lucene : {query:'id: 1'}}}\" +  // testing tagging syntax at the same time (the tag should do nothing here)\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : [{lucene : {query:'id: 1'}}]\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : '{!lucene q.op=AND df=cat_s}A'\" +\n            \"   must_not : '{!lucene v=\\\\'id:1\\\\'}'\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : '*:*',\" +\n            \" filter : {\" +\n            \"  collapse : {\" +\n            \"   field : cat_s\" +\n            \"  } \" +\n            \" } \" +\n            \"}\")\n        , isDistrib ? \"\" : \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NJ'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NY'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'1'},{id:'4'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : 'cat_s^0.1 where_s^100'\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'5'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : ['cat_s^100', 'where_s^0.1']\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" :  \"response/docs==[{id:'4'},{id:'1'},{id:'5'}]\"\n    );\n\n    try {\n      client.testJQ(params(\"json\", \"{query:{'lucene':'foo_s:ignore_exception'}}\"));  // TODO: this seems like a reasonable capability that we would want to support in the future.  It should be OK to make this pass.\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foo_s\"));\n    }\n\n    try {\n      // test failure on unknown parameter\n      client.testJQ(params(\"json\", \"{query:'cat_s:A', foobar_ignore_exception:5}\")\n          , \"response/numFound==2\"\n      );\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foobar\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4414d09a90891bc59e6e5fec445b178928fc4ca3","date":1577694286,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/json/TestJsonRequest#doJsonRequest(Client,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/json/TestJsonRequest#doJsonRequest(Client,boolean).mjava","sourceNew":"  public static void doJsonRequest(Client client, boolean isDistrib) throws Exception {\n    addDocs(client);\n\n    // test json param\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==2\"\n    );\n\n    // invalid value\n    SolrException ex = expectThrows(SolrException.class, () -> client.testJQ(params(\"q\", \"*:*\", \"json\", \"5\")));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n\n    // this is to verify other json params are not affected\n    client.testJQ( params(\"q\", \"cat_s:A\", \"json.limit\", \"1\"),\n        \"response/numFound==2\"\n    );\n\n    // test multiple json params\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being zero length\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being a comment\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, second value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, first value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, both values are already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths with an empty string and a comment\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.filter\",\"\", \"json.filter\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test overwriting of non-multivalued params\n    client.testJQ( params(\"json.query\",\"'foo_s:NONE'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.query\",\"'*:*'\")\n        , \"response/numFound==1\"\n    );\n\n    // normal parameter specified in the params block, including numeric params cast back to string\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:NY'], start:0, rows:5, fl:id}}\")\n        , \"response/docs==[{id:'1'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:id, sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5'], sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n    // test merge params\n    client.testJQ( params(\"json\",\"{params:{q:'*:*'}}\", \"json\",\"{params:{fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5']}}\", \"json\",\"{params:{sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n\n\n    // test offset/limit/sort/fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\")\n        , \"response/docs==[{id:'5'},{id:'4'}]\"\n    );\n    // test offset/limit/sort/fields, multi-valued json.fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n    // test offset/limit/sort/fields, overwriting non-multivalued params\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"17\", \"json.offset\",\"1\", \"json.limit\",\"42\", \"json.limit\",\"2\", \"json.sort\",\"'id asc'\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n\n\n\n    // test templating before parsing JSON\n    client.testJQ( params(\"json\",\"${OPENBRACE} query:'cat_s:A' ${CLOSEBRACE}\", \"json\",\"${OPENBRACE} filter:'where_s:NY'${CLOSEBRACE}\",  \"OPENBRACE\",\"{\", \"CLOSEBRACE\",\"}\")\n        , \"response/numFound==1\"\n    );\n\n    // test templating with params defined in the JSON itself!  Do we want to keep this functionality?\n    client.testJQ( params(\"json\",\"{params:{V1:A,V2:NY}, query:'cat_s:${V1}'}\", \"json\",\"{filter:'where_s:${V2}'}\")\n        , \"response/numFound==1\"\n    );\n\n\n    //\n    // with body\n    //\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\")\n        , \"response/numFound==2\"\n    );\n\n    // test body in conjunction with query params\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\", \"json.filter\", \"'where_s:NY'\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json body in params come \"after\" (will overwrite)\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json.x params come after body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json.query\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n\n    // test facet with json body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\")\n        , \"facets=={count:6,x:2}\"\n    );\n\n    // test facet with json body, insert additional facets via query parameter\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\", \"json.facet.y\",\"{terms:{field:where_s}}\", \"json.facet.z\",\"'unique(where_s)'\")\n        , \"facets=={count:6,x:2, y:{buckets:[{val:NJ,count:3},{val:NY,count:2}]}, z:2}\"\n    );\n\n    // test debug\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json.filter\",\"'where_s:NY'\", \"debug\",\"true\")\n        , \"debug/json=={query:'cat_s:A', filter:'where_s:NY'}\"\n    );\n\n    // test query dsl\n    client.testJQ( params(\"json\", \"{'query':'{!lucene}id:1'}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'lucene' : {'query' : 'id:1'}},\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'#MYTAG' : 'id:1'},\" +  // tagged query (the tag should do nothing here)\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{   \" +\n            \" query : {\" +\n            \"  boost : {\" +\n            \"   query : {\" +\n            \"    lucene : {      \" +\n            \"     df : cat_s,      \" +\n            \"     query : A     \" +\n            \"    }\" +\n            \"   },   \" +\n            \"   b : 1.5 \" +\n            \"  }  \" +\n            \" } \" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : {'#NOT':{lucene : {query:'id: 1'}}}\" +  // testing tagging syntax at the same time (the tag should do nothing here)\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : [{lucene : {query:'id: 1'}}]\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    assertCatANot1(client, \"must\");\n    \n    testFilterCachingLocally(client);\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : '*:*',\" +\n            \" filter : {\" +\n            \"  collapse : {\" +\n            \"   field : cat_s\" +\n            \"  } \" +\n            \" } \" +\n            \"}\")\n        , isDistrib ? \"\" : \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NJ'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NY'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'1'},{id:'4'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : 'cat_s^0.1 where_s^100'\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'5'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : ['cat_s^100', 'where_s^0.1']\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" :  \"response/docs==[{id:'4'},{id:'1'},{id:'5'}]\"\n    );\n\n    try {\n      client.testJQ(params(\"json\", \"{query:{'lucene':'foo_s:ignore_exception'}}\"));  // TODO: this seems like a reasonable capability that we would want to support in the future.  It should be OK to make this pass.\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foo_s\"));\n    }\n\n    try {\n      // test failure on unknown parameter\n      client.testJQ(params(\"json\", \"{query:'cat_s:A', foobar_ignore_exception:5}\")\n          , \"response/numFound==2\"\n      );\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foobar\"));\n    }\n\n  }\n\n","sourceOld":"  public static void doJsonRequest(Client client, boolean isDistrib) throws Exception {\n    addDocs(client);\n\n    // test json param\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==2\"\n    );\n\n    // invalid value\n    SolrException ex = expectThrows(SolrException.class, () -> client.testJQ(params(\"q\", \"*:*\", \"json\", \"5\")));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n\n    // this is to verify other json params are not affected\n    client.testJQ( params(\"q\", \"cat_s:A\", \"json.limit\", \"1\"),\n        \"response/numFound==2\"\n    );\n\n    // test multiple json params\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being zero length\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being a comment\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, second value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, first value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, both values are already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths with an empty string and a comment\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.filter\",\"\", \"json.filter\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test overwriting of non-multivalued params\n    client.testJQ( params(\"json.query\",\"'foo_s:NONE'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.query\",\"'*:*'\")\n        , \"response/numFound==1\"\n    );\n\n    // normal parameter specified in the params block, including numeric params cast back to string\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:NY'], start:0, rows:5, fl:id}}\")\n        , \"response/docs==[{id:'1'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:id, sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5'], sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n    // test merge params\n    client.testJQ( params(\"json\",\"{params:{q:'*:*'}}\", \"json\",\"{params:{fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5']}}\", \"json\",\"{params:{sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n\n\n    // test offset/limit/sort/fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\")\n        , \"response/docs==[{id:'5'},{id:'4'}]\"\n    );\n    // test offset/limit/sort/fields, multi-valued json.fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n    // test offset/limit/sort/fields, overwriting non-multivalued params\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"17\", \"json.offset\",\"1\", \"json.limit\",\"42\", \"json.limit\",\"2\", \"json.sort\",\"'id asc'\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n\n\n\n    // test templating before parsing JSON\n    client.testJQ( params(\"json\",\"${OPENBRACE} query:'cat_s:A' ${CLOSEBRACE}\", \"json\",\"${OPENBRACE} filter:'where_s:NY'${CLOSEBRACE}\",  \"OPENBRACE\",\"{\", \"CLOSEBRACE\",\"}\")\n        , \"response/numFound==1\"\n    );\n\n    // test templating with params defined in the JSON itself!  Do we want to keep this functionality?\n    client.testJQ( params(\"json\",\"{params:{V1:A,V2:NY}, query:'cat_s:${V1}'}\", \"json\",\"{filter:'where_s:${V2}'}\")\n        , \"response/numFound==1\"\n    );\n\n\n    //\n    // with body\n    //\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\")\n        , \"response/numFound==2\"\n    );\n\n    // test body in conjunction with query params\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\", \"json.filter\", \"'where_s:NY'\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json body in params come \"after\" (will overwrite)\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json.x params come after body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json.query\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n\n    // test facet with json body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\")\n        , \"facets=={count:6,x:2}\"\n    );\n\n    // test facet with json body, insert additional facets via query parameter\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\", \"json.facet.y\",\"{terms:{field:where_s}}\", \"json.facet.z\",\"'unique(where_s)'\")\n        , \"facets=={count:6,x:2, y:{buckets:[{val:NJ,count:3},{val:NY,count:2}]}, z:2}\"\n    );\n\n    // test debug\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json.filter\",\"'where_s:NY'\", \"debug\",\"true\")\n        , \"debug/json=={query:'cat_s:A', filter:'where_s:NY'}\"\n    );\n\n    // test query dsl\n    client.testJQ( params(\"json\", \"{'query':'{!lucene}id:1'}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'lucene' : {'query' : 'id:1'}},\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'#MYTAG' : 'id:1'},\" +  // tagged query (the tag should do nothing here)\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{   \" +\n            \" query : {\" +\n            \"  boost : {\" +\n            \"   query : {\" +\n            \"    lucene : {      \" +\n            \"     df : cat_s,      \" +\n            \"     query : A     \" +\n            \"    }\" +\n            \"   },   \" +\n            \"   b : 1.5 \" +\n            \"  }  \" +\n            \" } \" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : {'#NOT':{lucene : {query:'id: 1'}}}\" +  // testing tagging syntax at the same time (the tag should do nothing here)\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : [{lucene : {query:'id: 1'}}]\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : '{!lucene q.op=AND df=cat_s}A'\" +\n            \"   must_not : '{!lucene v=\\\\'id:1\\\\'}'\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : '*:*',\" +\n            \" filter : {\" +\n            \"  collapse : {\" +\n            \"   field : cat_s\" +\n            \"  } \" +\n            \" } \" +\n            \"}\")\n        , isDistrib ? \"\" : \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NJ'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NY'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'1'},{id:'4'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : 'cat_s^0.1 where_s^100'\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'5'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : ['cat_s^100', 'where_s^0.1']\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" :  \"response/docs==[{id:'4'},{id:'1'},{id:'5'}]\"\n    );\n\n    try {\n      client.testJQ(params(\"json\", \"{query:{'lucene':'foo_s:ignore_exception'}}\"));  // TODO: this seems like a reasonable capability that we would want to support in the future.  It should be OK to make this pass.\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foo_s\"));\n    }\n\n    try {\n      // test failure on unknown parameter\n      client.testJQ(params(\"json\", \"{query:'cat_s:A', foobar_ignore_exception:5}\")\n          , \"response/numFound==2\"\n      );\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foobar\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1900ff20b0f8f377a2de0af89d5dff96418ad3ff","date":1590699113,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/json/TestJsonRequest#doJsonRequest(Client,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/json/TestJsonRequest#doJsonRequest(Client,boolean).mjava","sourceNew":"  public static void doJsonRequest(Client client, boolean isDistrib) throws Exception {\n    addDocs(client);\n\n    // test json param\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==2\"\n    );\n\n    // invalid value\n    SolrException ex = expectThrows(SolrException.class, () -> client.testJQ(params(\"q\", \"*:*\", \"json\", \"5\")));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n\n    // this is to verify other json params are not affected\n    client.testJQ( params(\"q\", \"cat_s:A\", \"json.limit\", \"1\"),\n        \"response/numFound==2\"\n    );\n\n    // test multiple json params\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being zero length\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being a comment\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, second value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, first value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, both values are already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths with an empty string and a comment\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.filter\",\"\", \"json.filter\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test overwriting of non-multivalued params\n    client.testJQ( params(\"json.query\",\"'foo_s:NONE'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.query\",\"'*:*'\")\n        , \"response/numFound==1\"\n    );\n\n    // normal parameter specified in the params block, including numeric params cast back to string\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:NY'], start:0, rows:5, fl:id}}\")\n        , \"response/docs==[{id:'1'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:id, sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5'], sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n    // test merge params\n    client.testJQ( params(\"json\",\"{params:{q:'*:*'}}\", \"json\",\"{params:{fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5']}}\", \"json\",\"{params:{sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n\n\n    // test offset/limit/sort/fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\")\n        , \"response/docs==[{id:'5'},{id:'4'}]\"\n    );\n    // test offset/limit/sort/fields, multi-valued json.fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n    // test offset/limit/sort/fields, overwriting non-multivalued params\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"17\", \"json.offset\",\"1\", \"json.limit\",\"42\", \"json.limit\",\"2\", \"json.sort\",\"'id asc'\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n\n    doParamRefDslTest(client);\n\n    // test templating before parsing JSON\n    client.testJQ( params(\"json\",\"${OPENBRACE} query:'cat_s:A' ${CLOSEBRACE}\", \"json\",\"${OPENBRACE} filter:'where_s:NY'${CLOSEBRACE}\",  \"OPENBRACE\",\"{\", \"CLOSEBRACE\",\"}\")\n        , \"response/numFound==1\"\n    );\n\n    // test templating with params defined in the JSON itself!  Do we want to keep this functionality?\n    client.testJQ( params(\"json\",\"{params:{V1:A,V2:NY}, query:'cat_s:${V1}'}\", \"json\",\"{filter:'where_s:${V2}'}\")\n        , \"response/numFound==1\"\n    );\n\n\n    //\n    // with body\n    //\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\")\n        , \"response/numFound==2\"\n    );\n\n    // test body in conjunction with query params\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\", \"json.filter\", \"'where_s:NY'\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json body in params come \"after\" (will overwrite)\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json.x params come after body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json.query\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n\n    // test facet with json body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\")\n        , \"facets=={count:6,x:2}\"\n    );\n\n    // test facet with json body, insert additional facets via query parameter\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\", \"json.facet.y\",\"{terms:{field:where_s}}\", \"json.facet.z\",\"'unique(where_s)'\")\n        , \"facets=={count:6,x:2, y:{buckets:[{val:NJ,count:3},{val:NY,count:2}]}, z:2}\"\n    );\n\n    // test debug\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json.filter\",\"'where_s:NY'\", \"debug\",\"true\")\n        , \"debug/json=={query:'cat_s:A', filter:'where_s:NY'}\"\n    );\n\n    // test query dsl\n    client.testJQ( params(\"json\", \"{'query':'{!lucene}id:1'}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'lucene' : {'query' : 'id:1'}},\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'#MYTAG' : 'id:1'},\" +  // tagged query (the tag should do nothing here)\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{   \" +\n            \" query : {\" +\n            \"  boost : {\" +\n            \"   query : {\" +\n            \"    lucene : {      \" +\n            \"     df : cat_s,      \" +\n            \"     query : A     \" +\n            \"    }\" +\n            \"   },   \" +\n            \"   b : 1.5 \" +\n            \"  }  \" +\n            \" } \" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : {'#NOT':{lucene : {query:'id: 1'}}}\" +  // testing tagging syntax at the same time (the tag should do nothing here)\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : [{lucene : {query:'id: 1'}}]\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    assertCatANot1(client, \"must\");\n    \n    testFilterCachingLocally(client);\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : '*:*',\" +\n            \" filter : {\" +\n            \"  collapse : {\" +\n            \"   field : cat_s\" +\n            \"  } \" +\n            \" } \" +\n            \"}\")\n        , isDistrib ? \"\" : \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NJ'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NY'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'1'},{id:'4'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : 'cat_s^0.1 where_s^100'\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'5'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : ['cat_s^100', 'where_s^0.1']\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" :  \"response/docs==[{id:'4'},{id:'1'},{id:'5'}]\"\n    );\n\n    try {\n      client.testJQ(params(\"json\", \"{query:{'lucene':'foo_s:ignore_exception'}}\"));  // TODO: this seems like a reasonable capability that we would want to support in the future.  It should be OK to make this pass.\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foo_s\"));\n    }\n\n    try {\n      // test failure on unknown parameter\n      client.testJQ(params(\"json\", \"{query:'cat_s:A', foobar_ignore_exception:5}\")\n          , \"response/numFound==2\"\n      );\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foobar\"));\n    }\n\n  }\n\n","sourceOld":"  public static void doJsonRequest(Client client, boolean isDistrib) throws Exception {\n    addDocs(client);\n\n    // test json param\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==2\"\n    );\n\n    // invalid value\n    SolrException ex = expectThrows(SolrException.class, () -> client.testJQ(params(\"q\", \"*:*\", \"json\", \"5\")));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n\n    // this is to verify other json params are not affected\n    client.testJQ( params(\"q\", \"cat_s:A\", \"json.limit\", \"1\"),\n        \"response/numFound==2\"\n    );\n\n    // test multiple json params\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being zero length\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being a comment\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, second value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, first value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, both values are already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths with an empty string and a comment\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.filter\",\"\", \"json.filter\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test overwriting of non-multivalued params\n    client.testJQ( params(\"json.query\",\"'foo_s:NONE'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.query\",\"'*:*'\")\n        , \"response/numFound==1\"\n    );\n\n    // normal parameter specified in the params block, including numeric params cast back to string\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:NY'], start:0, rows:5, fl:id}}\")\n        , \"response/docs==[{id:'1'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:id, sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5'], sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n    // test merge params\n    client.testJQ( params(\"json\",\"{params:{q:'*:*'}}\", \"json\",\"{params:{fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5']}}\", \"json\",\"{params:{sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n\n\n    // test offset/limit/sort/fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\")\n        , \"response/docs==[{id:'5'},{id:'4'}]\"\n    );\n    // test offset/limit/sort/fields, multi-valued json.fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n    // test offset/limit/sort/fields, overwriting non-multivalued params\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"17\", \"json.offset\",\"1\", \"json.limit\",\"42\", \"json.limit\",\"2\", \"json.sort\",\"'id asc'\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n\n\n\n    // test templating before parsing JSON\n    client.testJQ( params(\"json\",\"${OPENBRACE} query:'cat_s:A' ${CLOSEBRACE}\", \"json\",\"${OPENBRACE} filter:'where_s:NY'${CLOSEBRACE}\",  \"OPENBRACE\",\"{\", \"CLOSEBRACE\",\"}\")\n        , \"response/numFound==1\"\n    );\n\n    // test templating with params defined in the JSON itself!  Do we want to keep this functionality?\n    client.testJQ( params(\"json\",\"{params:{V1:A,V2:NY}, query:'cat_s:${V1}'}\", \"json\",\"{filter:'where_s:${V2}'}\")\n        , \"response/numFound==1\"\n    );\n\n\n    //\n    // with body\n    //\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\")\n        , \"response/numFound==2\"\n    );\n\n    // test body in conjunction with query params\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\", \"json.filter\", \"'where_s:NY'\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json body in params come \"after\" (will overwrite)\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json.x params come after body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json.query\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n\n    // test facet with json body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\")\n        , \"facets=={count:6,x:2}\"\n    );\n\n    // test facet with json body, insert additional facets via query parameter\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\", \"json.facet.y\",\"{terms:{field:where_s}}\", \"json.facet.z\",\"'unique(where_s)'\")\n        , \"facets=={count:6,x:2, y:{buckets:[{val:NJ,count:3},{val:NY,count:2}]}, z:2}\"\n    );\n\n    // test debug\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json.filter\",\"'where_s:NY'\", \"debug\",\"true\")\n        , \"debug/json=={query:'cat_s:A', filter:'where_s:NY'}\"\n    );\n\n    // test query dsl\n    client.testJQ( params(\"json\", \"{'query':'{!lucene}id:1'}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'lucene' : {'query' : 'id:1'}},\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'#MYTAG' : 'id:1'},\" +  // tagged query (the tag should do nothing here)\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{   \" +\n            \" query : {\" +\n            \"  boost : {\" +\n            \"   query : {\" +\n            \"    lucene : {      \" +\n            \"     df : cat_s,      \" +\n            \"     query : A     \" +\n            \"    }\" +\n            \"   },   \" +\n            \"   b : 1.5 \" +\n            \"  }  \" +\n            \" } \" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : {'#NOT':{lucene : {query:'id: 1'}}}\" +  // testing tagging syntax at the same time (the tag should do nothing here)\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : [{lucene : {query:'id: 1'}}]\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    assertCatANot1(client, \"must\");\n    \n    testFilterCachingLocally(client);\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : '*:*',\" +\n            \" filter : {\" +\n            \"  collapse : {\" +\n            \"   field : cat_s\" +\n            \"  } \" +\n            \" } \" +\n            \"}\")\n        , isDistrib ? \"\" : \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NJ'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NY'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'1'},{id:'4'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : 'cat_s^0.1 where_s^100'\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'5'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : ['cat_s^100', 'where_s^0.1']\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" :  \"response/docs==[{id:'4'},{id:'1'},{id:'5'}]\"\n    );\n\n    try {\n      client.testJQ(params(\"json\", \"{query:{'lucene':'foo_s:ignore_exception'}}\"));  // TODO: this seems like a reasonable capability that we would want to support in the future.  It should be OK to make this pass.\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foo_s\"));\n    }\n\n    try {\n      // test failure on unknown parameter\n      client.testJQ(params(\"json\", \"{query:'cat_s:A', foobar_ignore_exception:5}\")\n          , \"response/numFound==2\"\n      );\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foobar\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"664c02a9f8ee4f39f4731f071c69e1932178f381","date":1591796512,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/json/TestJsonRequest#doJsonRequest(Client,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/json/TestJsonRequest#doJsonRequest(Client,boolean).mjava","sourceNew":"  public static void doJsonRequest(Client client, boolean isDistrib) throws Exception {\n    addDocs(client);\n\n    ignoreException(\"Expected JSON\");\n\n    // test json param\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==2\"\n    );\n\n    // invalid value\n    SolrException ex = expectThrows(SolrException.class, () -> client.testJQ(params(\"q\", \"*:*\", \"json\", \"5\")));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertThat(ex.getMessage(), containsString(\"Expected JSON Object but got Long=5\"));\n\n    // this is to verify other json params are not affected\n    client.testJQ( params(\"q\", \"cat_s:A\", \"json.limit\", \"1\"),\n        \"response/numFound==2\"\n    );\n\n    // test multiple json params\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being zero length\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being a comment\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, second value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, first value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, both values are already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths with an empty string and a comment\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.filter\",\"\", \"json.filter\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test overwriting of non-multivalued params\n    client.testJQ( params(\"json.query\",\"'foo_s:NONE'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.query\",\"'*:*'\")\n        , \"response/numFound==1\"\n    );\n\n    // normal parameter specified in the params block, including numeric params cast back to string\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:NY'], start:0, rows:5, fl:id}}\")\n        , \"response/docs==[{id:'1'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:id, sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5'], sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n    // test merge params\n    client.testJQ( params(\"json\",\"{params:{q:'*:*'}}\", \"json\",\"{params:{fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5']}}\", \"json\",\"{params:{sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n\n\n    // test offset/limit/sort/fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\")\n        , \"response/docs==[{id:'5'},{id:'4'}]\"\n    );\n    // test offset/limit/sort/fields, multi-valued json.fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n    // test offset/limit/sort/fields, overwriting non-multivalued params\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"17\", \"json.offset\",\"1\", \"json.limit\",\"42\", \"json.limit\",\"2\", \"json.sort\",\"'id asc'\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n\n    doParamRefDslTest(client);\n\n    // test templating before parsing JSON\n    client.testJQ( params(\"json\",\"${OPENBRACE} query:'cat_s:A' ${CLOSEBRACE}\", \"json\",\"${OPENBRACE} filter:'where_s:NY'${CLOSEBRACE}\",  \"OPENBRACE\",\"{\", \"CLOSEBRACE\",\"}\")\n        , \"response/numFound==1\"\n    );\n\n    // test templating with params defined in the JSON itself!  Do we want to keep this functionality?\n    client.testJQ( params(\"json\",\"{params:{V1:A,V2:NY}, query:'cat_s:${V1}'}\", \"json\",\"{filter:'where_s:${V2}'}\")\n        , \"response/numFound==1\"\n    );\n\n\n    //\n    // with body\n    //\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\")\n        , \"response/numFound==2\"\n    );\n\n    // test body in conjunction with query params\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\", \"json.filter\", \"'where_s:NY'\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json body in params come \"after\" (will overwrite)\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json.x params come after body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json.query\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n\n    // test facet with json body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\")\n        , \"facets=={count:6,x:2}\"\n    );\n\n    // test facet with json body, insert additional facets via query parameter\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\", \"json.facet.y\",\"{terms:{field:where_s}}\", \"json.facet.z\",\"'unique(where_s)'\")\n        , \"facets=={count:6,x:2, y:{buckets:[{val:NJ,count:3},{val:NY,count:2}]}, z:2}\"\n    );\n\n    // test debug\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json.filter\",\"'where_s:NY'\", \"debug\",\"true\")\n        , \"debug/json=={query:'cat_s:A', filter:'where_s:NY'}\"\n    );\n\n    // test query dsl\n    client.testJQ( params(\"json\", \"{'query':'{!lucene}id:1'}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'lucene' : {'query' : 'id:1'}},\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'#MYTAG' : 'id:1'},\" +  // tagged query (the tag should do nothing here)\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{   \" +\n            \" query : {\" +\n            \"  boost : {\" +\n            \"   query : {\" +\n            \"    lucene : {      \" +\n            \"     df : cat_s,      \" +\n            \"     query : A     \" +\n            \"    }\" +\n            \"   },   \" +\n            \"   b : 1.5 \" +\n            \"  }  \" +\n            \" } \" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : {'#NOT':{lucene : {query:'id: 1'}}}\" +  // testing tagging syntax at the same time (the tag should do nothing here)\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : [{lucene : {query:'id: 1'}}]\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    assertCatANot1(client, \"must\");\n    \n    testFilterCachingLocally(client);\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : '*:*',\" +\n            \" filter : {\" +\n            \"  collapse : {\" +\n            \"   field : cat_s\" +\n            \"  } \" +\n            \" } \" +\n            \"}\")\n        , isDistrib ? \"\" : \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NJ'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NY'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'1'},{id:'4'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : 'cat_s^0.1 where_s^100'\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'5'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : ['cat_s^100', 'where_s^0.1']\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" :  \"response/docs==[{id:'4'},{id:'1'},{id:'5'}]\"\n    );\n\n    // TODO: this seems like a reasonable capability that we would want to support in the future.  It should be OK to make this pass.\n    Exception e = expectThrows(Exception.class, () -> {\n      client.testJQ(params(\"json\", \"{query:{'lucene':'foo_s:ignore_exception'}}\"));\n    });\n    assertThat(e.getMessage(), containsString(\"foo_s\"));\n\n    // test failure on unknown parameter\n    e = expectThrows(Exception.class, () -> {\n      client.testJQ(params(\"json\", \"{query:'cat_s:A', foobar_ignore_exception:5}\"), \"response/numFound==2\");\n    });\n    assertThat(e.getMessage(), containsString(\"foobar\"));\n\n    resetExceptionIgnores();\n  }\n\n","sourceOld":"  public static void doJsonRequest(Client client, boolean isDistrib) throws Exception {\n    addDocs(client);\n\n    // test json param\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==2\"\n    );\n\n    // invalid value\n    SolrException ex = expectThrows(SolrException.class, () -> client.testJQ(params(\"q\", \"*:*\", \"json\", \"5\")));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n\n    // this is to verify other json params are not affected\n    client.testJQ( params(\"q\", \"cat_s:A\", \"json.limit\", \"1\"),\n        \"response/numFound==2\"\n    );\n\n    // test multiple json params\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being zero length\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"\")\n        , \"response/numFound==1\"\n    );\n\n    // test multiple json params with one being a comment\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, second value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:'where_s:NY'}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, first value is already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test merging multi-valued params into list, both values are already list\n    client.testJQ( params(\"json\",\"{query:'*:*'}\", \"json\",\"{filter:['where_s:NY']}\", \"json\",\"{filter:['cat_s:A']}\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n    // test inserting and merging with paths with an empty string and a comment\n    client.testJQ( params(\"json.query\",\"'*:*'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.filter\",\"\", \"json.filter\",\"/* */\")\n        , \"response/numFound==1\"\n    );\n\n    // test overwriting of non-multivalued params\n    client.testJQ( params(\"json.query\",\"'foo_s:NONE'\", \"json.filter\",\"'where_s:NY'\", \"json.filter\",\"'cat_s:A'\", \"json.query\",\"'*:*'\")\n        , \"response/numFound==1\"\n    );\n\n    // normal parameter specified in the params block, including numeric params cast back to string\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:NY'], start:0, rows:5, fl:id}}\")\n        , \"response/docs==[{id:'1'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:id, sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4'}]\"\n    );\n    client.testJQ( params(\"json\",\"{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5'], sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n    // test merge params\n    client.testJQ( params(\"json\",\"{params:{q:'*:*'}}\", \"json\",\"{params:{fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5']}}\", \"json\",\"{params:{sort:'where_s asc'}}\")\n        , \"response/numFound==2\"\n        , \"response/docs==[{id:'4', x:5.5}]\"\n    );\n\n\n    // test offset/limit/sort/fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\")\n        , \"response/docs==[{id:'5'},{id:'4'}]\"\n    );\n    // test offset/limit/sort/fields, multi-valued json.fields\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"1\", \"json.limit\",\"2\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n    // test offset/limit/sort/fields, overwriting non-multivalued params\n    client.testJQ( params(\"json.query\",\"'*:*'\",  \"json.offset\",\"17\", \"json.offset\",\"1\", \"json.limit\",\"42\", \"json.limit\",\"2\", \"json.sort\",\"'id asc'\", \"json.sort\",\"'id desc'\", \"json.fields\",\"'id'\", \"json.fields\",\"'x:5.5'\")\n        , \"response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]\"\n    );\n\n    doParamRefDslTest(client);\n\n    // test templating before parsing JSON\n    client.testJQ( params(\"json\",\"${OPENBRACE} query:'cat_s:A' ${CLOSEBRACE}\", \"json\",\"${OPENBRACE} filter:'where_s:NY'${CLOSEBRACE}\",  \"OPENBRACE\",\"{\", \"CLOSEBRACE\",\"}\")\n        , \"response/numFound==1\"\n    );\n\n    // test templating with params defined in the JSON itself!  Do we want to keep this functionality?\n    client.testJQ( params(\"json\",\"{params:{V1:A,V2:NY}, query:'cat_s:${V1}'}\", \"json\",\"{filter:'where_s:${V2}'}\")\n        , \"response/numFound==1\"\n    );\n\n\n    //\n    // with body\n    //\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\")\n        , \"response/numFound==2\"\n    );\n\n    // test body in conjunction with query params\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'cat_s:A'}\", \"stream.contentType\", \"application/json\", \"json.filter\", \"'where_s:NY'\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json body in params come \"after\" (will overwrite)\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json\",\"{query:'cat_s:A'}\")\n        , \"response/numFound==1\"\n    );\n\n    // test that json.x params come after body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', filter:'where_s:NY'}\", \"stream.contentType\", \"application/json\", \"json.query\",\"'cat_s:A'\")\n        , \"response/numFound==1\"\n    );\n\n\n    // test facet with json body\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\")\n        , \"facets=={count:6,x:2}\"\n    );\n\n    // test facet with json body, insert additional facets via query parameter\n    client.testJQ(params(CommonParams.STREAM_BODY, \"{query:'*:*', facet:{x:'unique(where_s)'}}\", \"stream.contentType\", \"application/json\", \"json.facet.y\",\"{terms:{field:where_s}}\", \"json.facet.z\",\"'unique(where_s)'\")\n        , \"facets=={count:6,x:2, y:{buckets:[{val:NJ,count:3},{val:NY,count:2}]}, z:2}\"\n    );\n\n    // test debug\n    client.testJQ( params(\"json\",\"{query:'cat_s:A'}\", \"json.filter\",\"'where_s:NY'\", \"debug\",\"true\")\n        , \"debug/json=={query:'cat_s:A', filter:'where_s:NY'}\"\n    );\n\n    // test query dsl\n    client.testJQ( params(\"json\", \"{'query':'{!lucene}id:1'}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'lucene' : {'query' : 'id:1'}},\" +\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{\" +\n            \"  'query': {\" +\n            \"    'bool' : {\" +\n            \"      'should' : [\" +\n            \"        {'#MYTAG' : 'id:1'},\" +  // tagged query (the tag should do nothing here)\n            \"        'id:2'\" +\n            \"      ]\" +\n            \"    }\" +\n            \"  }\" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\", \"{   \" +\n            \" query : {\" +\n            \"  boost : {\" +\n            \"   query : {\" +\n            \"    lucene : {      \" +\n            \"     df : cat_s,      \" +\n            \"     query : A     \" +\n            \"    }\" +\n            \"   },   \" +\n            \"   b : 1.5 \" +\n            \"  }  \" +\n            \" } \" +\n            \"}\")\n        , \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : {'#NOT':{lucene : {query:'id: 1'}}}\" +  // testing tagging syntax at the same time (the tag should do nothing here)\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    client.testJQ( params(\"json\",\"{ \" +\n            \" query : {\" +\n            \"  bool : {\" +\n            \"   must : {\" +\n            \"    lucene : {\" +\n            \"     q.op : AND,\" +\n            \"     df : cat_s,\" +\n            \"     query : A\" +\n            \"    }\" +\n            \"   }\" +\n            \"   must_not : [{lucene : {query:'id: 1'}}]\" +\n            \"  }\" +\n            \" }\" +\n            \"}\")\n        , \"response/numFound==1\"\n    );\n\n    assertCatANot1(client, \"must\");\n    \n    testFilterCachingLocally(client);\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : '*:*',\" +\n            \" filter : {\" +\n            \"  collapse : {\" +\n            \"   field : cat_s\" +\n            \"  } \" +\n            \" } \" +\n            \"}\")\n        , isDistrib ? \"\" : \"response/numFound==2\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NJ'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  edismax : {\" +\n            \"   query : 'A',\" +\n            \"   qf : 'cat_s',\" +\n            \"   bq : {\" +\n            \"    edismax : {\" +\n            \"     query : 'NY'\" +\n            \"     qf : 'where_s'\" +\n            \"    }\" +\n            \"   }\" +\n            \"  }\" +\n            \" }, \" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==2\", isDistrib? \"\" : \"response/docs==[{id:'1'},{id:'4'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : 'cat_s^0.1 where_s^100'\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" : \"response/docs==[{id:'4'},{id:'5'},{id:'1'}]\"\n    );\n\n    client.testJQ( params(\"json\",\"{\" +\n            \" query : {\" +\n            \"  dismax : {\" +\n            \"   query : 'A NJ'\" +\n            \"   qf : ['cat_s^100', 'where_s^0.1']\" +\n            \"  } \" +\n            \" }, \" +\n            \" filter : '-id:2',\" +\n            \" fields : id\" +\n            \"}\")\n        , \"response/numFound==3\", isDistrib? \"\" :  \"response/docs==[{id:'4'},{id:'1'},{id:'5'}]\"\n    );\n\n    try {\n      client.testJQ(params(\"json\", \"{query:{'lucene':'foo_s:ignore_exception'}}\"));  // TODO: this seems like a reasonable capability that we would want to support in the future.  It should be OK to make this pass.\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foo_s\"));\n    }\n\n    try {\n      // test failure on unknown parameter\n      client.testJQ(params(\"json\", \"{query:'cat_s:A', foobar_ignore_exception:5}\")\n          , \"response/numFound==2\"\n      );\n      fail();\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"foobar\"));\n    }\n\n  }\n\n","bugFix":["10eda272dbca4b0397f9b0c2aa6fadad3601db47","ff95b5e47fe4df3d066c51f0a3f8970e8fbb2aa4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b21283ed01203901a7257aa4b7f0a0899c86e56e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","10eda272dbca4b0397f9b0c2aa6fadad3601db47"],"ddce5ba13e43e3b34a1772ed921d9b9d7a67e48d":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["ddce5ba13e43e3b34a1772ed921d9b9d7a67e48d","ff95b5e47fe4df3d066c51f0a3f8970e8fbb2aa4"],"664c02a9f8ee4f39f4731f071c69e1932178f381":["1900ff20b0f8f377a2de0af89d5dff96418ad3ff"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b21283ed01203901a7257aa4b7f0a0899c86e56e"],"10eda272dbca4b0397f9b0c2aa6fadad3601db47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","10eda272dbca4b0397f9b0c2aa6fadad3601db47"],"7fc85b1dff2ce036b914dcd14fb0bf4a113cf0ab":["ff95b5e47fe4df3d066c51f0a3f8970e8fbb2aa4"],"ff95b5e47fe4df3d066c51f0a3f8970e8fbb2aa4":["ddce5ba13e43e3b34a1772ed921d9b9d7a67e48d"],"4414d09a90891bc59e6e5fec445b178928fc4ca3":["7fc85b1dff2ce036b914dcd14fb0bf4a113cf0ab","e927cf171dca7f8ff7b206baec5eb7fadadccb92"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e927cf171dca7f8ff7b206baec5eb7fadadccb92":["7fc85b1dff2ce036b914dcd14fb0bf4a113cf0ab"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":["ff95b5e47fe4df3d066c51f0a3f8970e8fbb2aa4","7fc85b1dff2ce036b914dcd14fb0bf4a113cf0ab"],"1900ff20b0f8f377a2de0af89d5dff96418ad3ff":["e927cf171dca7f8ff7b206baec5eb7fadadccb92"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["664c02a9f8ee4f39f4731f071c69e1932178f381"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["ddce5ba13e43e3b34a1772ed921d9b9d7a67e48d","ff95b5e47fe4df3d066c51f0a3f8970e8fbb2aa4"]},"commit2Childs":{"b21283ed01203901a7257aa4b7f0a0899c86e56e":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"ddce5ba13e43e3b34a1772ed921d9b9d7a67e48d":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","ff95b5e47fe4df3d066c51f0a3f8970e8fbb2aa4","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"664c02a9f8ee4f39f4731f071c69e1932178f381":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"10eda272dbca4b0397f9b0c2aa6fadad3601db47":["b21283ed01203901a7257aa4b7f0a0899c86e56e","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["ddce5ba13e43e3b34a1772ed921d9b9d7a67e48d"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"7fc85b1dff2ce036b914dcd14fb0bf4a113cf0ab":["4414d09a90891bc59e6e5fec445b178928fc4ca3","e927cf171dca7f8ff7b206baec5eb7fadadccb92","4b9f74021389e2b32ee750fa5a24281c87951ec3"],"ff95b5e47fe4df3d066c51f0a3f8970e8fbb2aa4":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7fc85b1dff2ce036b914dcd14fb0bf4a113cf0ab","4b9f74021389e2b32ee750fa5a24281c87951ec3","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"4414d09a90891bc59e6e5fec445b178928fc4ca3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b21283ed01203901a7257aa4b7f0a0899c86e56e","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","10eda272dbca4b0397f9b0c2aa6fadad3601db47","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"e927cf171dca7f8ff7b206baec5eb7fadadccb92":["4414d09a90891bc59e6e5fec445b178928fc4ca3","1900ff20b0f8f377a2de0af89d5dff96418ad3ff"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":[],"1900ff20b0f8f377a2de0af89d5dff96418ad3ff":["664c02a9f8ee4f39f4731f071c69e1932178f381"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","3a7809d1d753b67f48b1a706e17034bf8b624ea3","4414d09a90891bc59e6e5fec445b178928fc4ca3","4b9f74021389e2b32ee750fa5a24281c87951ec3","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}