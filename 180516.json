{"path":"lucene/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#testGetHighFreqTerms().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#testGetHighFreqTerms().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#testGetHighFreqTerms().mjava","sourceNew":"  public void testGetHighFreqTerms () throws Exception{\n    int numTerms=12;\n    String field=\"FIELD_1\";\n    TermStats[] terms = HighFreqTerms.getHighFreqTerms(reader, numTerms, field);\n       \n    for (int i = 0; i < terms.length; i++) {\n      String termtext = terms[i].termtext.utf8ToString();\n      // hardcoded highTF or highTFmedDF\n      if (termtext.contains(\"highTF\")) {\n        if (termtext.contains(\"medDF\")) {\n          assertEquals(\"doc freq is not as expected\", 5, terms[i].docFreq);\n        } else {\n          assertEquals(\"doc freq is not as expected\", 1, terms[i].docFreq);\n        }\n      } else {\n        int n = Integer.parseInt(termtext);\n        assertEquals(\"doc freq is not as expected\", getExpecteddocFreq(n),\n            terms[i].docFreq);\n      }\n    }\n  }\n\n","sourceOld":"  public void testGetHighFreqTerms () throws Exception{\n    int numTerms=12;\n    String field=\"FIELD_1\";\n    TermStats[] terms = HighFreqTerms.getHighFreqTerms(reader, numTerms, field);\n       \n    for (int i = 0; i < terms.length; i++) {\n      String termtext = terms[i].termtext.utf8ToString();\n      // hardcoded highTF or highTFmedDF\n      if (termtext.contains(\"highTF\")) {\n        if (termtext.contains(\"medDF\")) {\n          assertEquals(\"doc freq is not as expected\", 5, terms[i].docFreq);\n        } else {\n          assertEquals(\"doc freq is not as expected\", 1, terms[i].docFreq);\n        }\n      } else {\n        int n = Integer.parseInt(termtext);\n        assertEquals(\"doc freq is not as expected\", getExpecteddocFreq(n),\n            terms[i].docFreq);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0aae73ca2eeb899108e9fe36611ddf5a83ec790","date":1378482998,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#testGetHighFreqTerms().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/misc/TestHighFreqTerms#testGetHighFreqTerms().mjava","sourceNew":"  public void testGetHighFreqTerms () throws Exception{\n    int numTerms=12;\n    String field=\"FIELD_1\";\n    TermStats[] terms = HighFreqTerms.getHighFreqTerms(reader, numTerms, field, new HighFreqTerms.DocFreqComparator());\n       \n    for (int i = 0; i < terms.length; i++) {\n      String termtext = terms[i].termtext.utf8ToString();\n      // hardcoded highTF or highTFmedDF\n      if (termtext.contains(\"highTF\")) {\n        if (termtext.contains(\"medDF\")) {\n          assertEquals(\"doc freq is not as expected\", 5, terms[i].docFreq);\n        } else {\n          assertEquals(\"doc freq is not as expected\", 1, terms[i].docFreq);\n        }\n      } else {\n        int n = Integer.parseInt(termtext);\n        assertEquals(\"doc freq is not as expected\", getExpecteddocFreq(n),\n            terms[i].docFreq);\n      }\n    }\n  }\n\n","sourceOld":"  public void testGetHighFreqTerms () throws Exception{\n    int numTerms=12;\n    String field=\"FIELD_1\";\n    TermStats[] terms = HighFreqTerms.getHighFreqTerms(reader, numTerms, field);\n       \n    for (int i = 0; i < terms.length; i++) {\n      String termtext = terms[i].termtext.utf8ToString();\n      // hardcoded highTF or highTFmedDF\n      if (termtext.contains(\"highTF\")) {\n        if (termtext.contains(\"medDF\")) {\n          assertEquals(\"doc freq is not as expected\", 5, terms[i].docFreq);\n        } else {\n          assertEquals(\"doc freq is not as expected\", 1, terms[i].docFreq);\n        }\n      } else {\n        int n = Integer.parseInt(termtext);\n        assertEquals(\"doc freq is not as expected\", getExpecteddocFreq(n),\n            terms[i].docFreq);\n      }\n    }\n  }\n\n","bugFix":["1513361122ebc5ddd6075f633cd77d2345611767"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0aae73ca2eeb899108e9fe36611ddf5a83ec790"],"f0aae73ca2eeb899108e9fe36611ddf5a83ec790":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["f0aae73ca2eeb899108e9fe36611ddf5a83ec790"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f0aae73ca2eeb899108e9fe36611ddf5a83ec790":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}