{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory#addSpanQuery(Query).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory#addSpanQuery(Query).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory#addSpanQuery(Query).mjava","sourceNew":"  public void addSpanQuery(Query q) {\n    if (q == SrndQuery.theEmptyLcnQuery)\n      return;\n    if (! (q instanceof SpanQuery))\n      throw new AssertionError(\"Expected SpanQuery: \" + q.toString(getFieldName()));\n    addSpanQueryWeighted((SpanQuery)q, q.getBoost());\n  }\n\n","sourceOld":"  public void addSpanQuery(Query q) {\n    if (q == SrndQuery.theEmptyLcnQuery)\n      return;\n    if (! (q instanceof SpanQuery))\n      throw new AssertionError(\"Expected SpanQuery: \" + q.toString(getFieldName()));\n    addSpanQueryWeighted((SpanQuery)q, q.getBoost());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory#addSpanQuery(Query).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory#addSpanQuery(Query).mjava","sourceNew":"  public void addSpanQuery(Query q) {\n    if (q.getClass() == MatchNoDocsQuery.class)\n      return;\n    if (! (q instanceof SpanQuery))\n      throw new AssertionError(\"Expected SpanQuery: \" + q.toString(getFieldName()));\n    addSpanQueryWeighted((SpanQuery)q, q.getBoost());\n  }\n\n","sourceOld":"  public void addSpanQuery(Query q) {\n    if (q == SrndQuery.theEmptyLcnQuery)\n      return;\n    if (! (q instanceof SpanQuery))\n      throw new AssertionError(\"Expected SpanQuery: \" + q.toString(getFieldName()));\n    addSpanQueryWeighted((SpanQuery)q, q.getBoost());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory#addSpanQuery(Query).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory#addSpanQuery(Query).mjava","sourceNew":"  public void addSpanQuery(Query q) {\n    if (q.getClass() == MatchNoDocsQuery.class)\n      return;\n    if (! (q instanceof SpanQuery))\n      throw new AssertionError(\"Expected SpanQuery: \" + q.toString(getFieldName()));\n    float boost = 1f;\n    if (q instanceof SpanBoostQuery) {\n      SpanBoostQuery bq = (SpanBoostQuery) q;\n      boost = bq.getBoost();\n      q = bq.getQuery();\n    }\n    addSpanQueryWeighted((SpanQuery)q, boost);\n  }\n\n","sourceOld":"  public void addSpanQuery(Query q) {\n    if (q.getClass() == MatchNoDocsQuery.class)\n      return;\n    if (! (q instanceof SpanQuery))\n      throw new AssertionError(\"Expected SpanQuery: \" + q.toString(getFieldName()));\n    addSpanQueryWeighted((SpanQuery)q, q.getBoost());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}