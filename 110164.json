{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#resumeTriggers(long).mjava","commits":[{"id":"0d5ef2a9b4062088bd74169faad5ae11897a6d77","date":1516279764,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#resumeTriggers(long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Resumes all previously cancelled triggers to be scheduled after the given initial delay\n   * @param afterDelayMillis the initial delay in milliseconds after which triggers should be resumed\n   */\n  private synchronized void resumeTriggers(long afterDelayMillis) {\n    scheduledTriggers.forEach((s, scheduledTrigger) ->  {\n      if (scheduledTrigger.scheduledFuture.isCancelled()) {\n        log.debug(\"Resuming trigger: {} after {}ms\", s, afterDelayMillis);\n        scheduledTrigger.scheduledFuture = scheduledThreadPoolExecutor.scheduleWithFixedDelay(scheduledTrigger, afterDelayMillis,\n            cloudManager.getTimeSource().convertDelay(TimeUnit.SECONDS, triggerDelay.get(), TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0fe47cc69ceafdaffbdb2e9251f3a197d3cbb6e8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#resumeTriggers(long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Resumes all previously cancelled triggers to be scheduled after the given initial delay\n   * @param afterDelayMillis the initial delay in milliseconds after which triggers should be resumed\n   */\n  private synchronized void resumeTriggers(long afterDelayMillis) {\n    scheduledTriggers.forEach((s, scheduledTrigger) ->  {\n      if (scheduledTrigger.scheduledFuture.isCancelled()) {\n        log.debug(\"Resuming trigger: {} after {}ms\", s, afterDelayMillis);\n        scheduledTrigger.scheduledFuture = scheduledThreadPoolExecutor.scheduleWithFixedDelay(scheduledTrigger, afterDelayMillis,\n            cloudManager.getTimeSource().convertDelay(TimeUnit.SECONDS, triggerDelay.get(), TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"01e3e55745c6667006f67aaa604466b9974425f4","date":1518776937,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#resumeTriggers(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#resumeTriggers(long).mjava","sourceNew":"  /**\n   * Resumes all previously cancelled triggers to be scheduled after the given initial delay\n   * @param afterDelayMillis the initial delay in milliseconds after which triggers should be resumed\n   * @lucene.internal\n   */\n  public synchronized void resumeTriggers(long afterDelayMillis) {\n    scheduledTriggers.forEach((s, scheduledTrigger) ->  {\n      if (scheduledTrigger.scheduledFuture.isCancelled()) {\n        log.debug(\"Resuming trigger: {} after {}ms\", s, afterDelayMillis);\n        scheduledTrigger.scheduledFuture = scheduledThreadPoolExecutor.scheduleWithFixedDelay(scheduledTrigger, afterDelayMillis,\n            cloudManager.getTimeSource().convertDelay(TimeUnit.SECONDS, triggerDelay.get(), TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n      }\n    });\n  }\n\n","sourceOld":"  /**\n   * Resumes all previously cancelled triggers to be scheduled after the given initial delay\n   * @param afterDelayMillis the initial delay in milliseconds after which triggers should be resumed\n   */\n  private synchronized void resumeTriggers(long afterDelayMillis) {\n    scheduledTriggers.forEach((s, scheduledTrigger) ->  {\n      if (scheduledTrigger.scheduledFuture.isCancelled()) {\n        log.debug(\"Resuming trigger: {} after {}ms\", s, afterDelayMillis);\n        scheduledTrigger.scheduledFuture = scheduledThreadPoolExecutor.scheduleWithFixedDelay(scheduledTrigger, afterDelayMillis,\n            cloudManager.getTimeSource().convertDelay(TimeUnit.SECONDS, triggerDelay.get(), TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8af24f206736d88373229e8c83ddb84a433e57f3","date":1520362563,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#resumeTriggers(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#resumeTriggers(long).mjava","sourceNew":"  /**\n   * Resumes all previously cancelled triggers to be scheduled after the given initial delay\n   * @param afterDelayMillis the initial delay in milliseconds after which triggers should be resumed\n   * @lucene.internal\n   */\n  public synchronized void resumeTriggers(long afterDelayMillis) {\n    scheduledTriggerWrappers.forEach((s, triggerWrapper) ->  {\n      if (triggerWrapper.scheduledFuture.isCancelled()) {\n        log.debug(\"Resuming trigger: {} after {}ms\", s, afterDelayMillis);\n        triggerWrapper.scheduledFuture = scheduledThreadPoolExecutor.scheduleWithFixedDelay(triggerWrapper, afterDelayMillis,\n            cloudManager.getTimeSource().convertDelay(TimeUnit.SECONDS, triggerDelay.get(), TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n      }\n    });\n  }\n\n","sourceOld":"  /**\n   * Resumes all previously cancelled triggers to be scheduled after the given initial delay\n   * @param afterDelayMillis the initial delay in milliseconds after which triggers should be resumed\n   * @lucene.internal\n   */\n  public synchronized void resumeTriggers(long afterDelayMillis) {\n    scheduledTriggers.forEach((s, scheduledTrigger) ->  {\n      if (scheduledTrigger.scheduledFuture.isCancelled()) {\n        log.debug(\"Resuming trigger: {} after {}ms\", s, afterDelayMillis);\n        scheduledTrigger.scheduledFuture = scheduledThreadPoolExecutor.scheduleWithFixedDelay(scheduledTrigger, afterDelayMillis,\n            cloudManager.getTimeSource().convertDelay(TimeUnit.SECONDS, triggerDelay.get(), TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":["0fe47cc69ceafdaffbdb2e9251f3a197d3cbb6e8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0fe47cc69ceafdaffbdb2e9251f3a197d3cbb6e8","date":1546410540,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#resumeTriggers(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#resumeTriggers(long).mjava","sourceNew":"  /**\n   * Resumes all previously cancelled triggers to be scheduled after the given initial delay\n   * @param afterDelayMillis the initial delay in milliseconds after which triggers should be resumed\n   * @lucene.internal\n   */\n  public synchronized void resumeTriggers(long afterDelayMillis) {\n    List<Map.Entry<String, TriggerWrapper>> entries = new ArrayList<>(scheduledTriggerWrappers.entrySet());\n    Collections.shuffle(entries, RANDOM);\n    entries.forEach(e ->  {\n      String key = e.getKey();\n      TriggerWrapper triggerWrapper = e.getValue();\n      if (triggerWrapper.scheduledFuture.isCancelled()) {\n        log.debug(\"Resuming trigger: {} after {}ms\", key, afterDelayMillis);\n        triggerWrapper.scheduledFuture = scheduledThreadPoolExecutor.scheduleWithFixedDelay(triggerWrapper, afterDelayMillis,\n            cloudManager.getTimeSource().convertDelay(TimeUnit.SECONDS, triggerDelay.get(), TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n      }\n    });\n  }\n\n","sourceOld":"  /**\n   * Resumes all previously cancelled triggers to be scheduled after the given initial delay\n   * @param afterDelayMillis the initial delay in milliseconds after which triggers should be resumed\n   * @lucene.internal\n   */\n  public synchronized void resumeTriggers(long afterDelayMillis) {\n    scheduledTriggerWrappers.forEach((s, triggerWrapper) ->  {\n      if (triggerWrapper.scheduledFuture.isCancelled()) {\n        log.debug(\"Resuming trigger: {} after {}ms\", s, afterDelayMillis);\n        triggerWrapper.scheduledFuture = scheduledThreadPoolExecutor.scheduleWithFixedDelay(triggerWrapper, afterDelayMillis,\n            cloudManager.getTimeSource().convertDelay(TimeUnit.SECONDS, triggerDelay.get(), TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n      }\n    });\n  }\n\n","bugFix":["8af24f206736d88373229e8c83ddb84a433e57f3","0d5ef2a9b4062088bd74169faad5ae11897a6d77"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ScheduledTriggers#resumeTriggers(long).mjava","sourceNew":null,"sourceOld":"  /**\n   * Resumes all previously cancelled triggers to be scheduled after the given initial delay\n   * @param afterDelayMillis the initial delay in milliseconds after which triggers should be resumed\n   * @lucene.internal\n   */\n  public synchronized void resumeTriggers(long afterDelayMillis) {\n    List<Map.Entry<String, TriggerWrapper>> entries = new ArrayList<>(scheduledTriggerWrappers.entrySet());\n    Collections.shuffle(entries, RANDOM);\n    entries.forEach(e ->  {\n      String key = e.getKey();\n      TriggerWrapper triggerWrapper = e.getValue();\n      if (triggerWrapper.scheduledFuture.isCancelled()) {\n        log.debug(\"Resuming trigger: {} after {}ms\", key, afterDelayMillis);\n        triggerWrapper.scheduledFuture = scheduledThreadPoolExecutor.scheduleWithFixedDelay(triggerWrapper, afterDelayMillis,\n            cloudManager.getTimeSource().convertDelay(TimeUnit.SECONDS, triggerDelay.get(), TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS);\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0d5ef2a9b4062088bd74169faad5ae11897a6d77"],"3f504512a03d978990cbff30db0522b354e846db":["0fe47cc69ceafdaffbdb2e9251f3a197d3cbb6e8"],"0fe47cc69ceafdaffbdb2e9251f3a197d3cbb6e8":["8af24f206736d88373229e8c83ddb84a433e57f3"],"0d5ef2a9b4062088bd74169faad5ae11897a6d77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8af24f206736d88373229e8c83ddb84a433e57f3":["01e3e55745c6667006f67aaa604466b9974425f4"],"01e3e55745c6667006f67aaa604466b9974425f4":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["01e3e55745c6667006f67aaa604466b9974425f4"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0fe47cc69ceafdaffbdb2e9251f3a197d3cbb6e8":["3f504512a03d978990cbff30db0522b354e846db"],"0d5ef2a9b4062088bd74169faad5ae11897a6d77":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","0d5ef2a9b4062088bd74169faad5ae11897a6d77"],"8af24f206736d88373229e8c83ddb84a433e57f3":["0fe47cc69ceafdaffbdb2e9251f3a197d3cbb6e8"],"01e3e55745c6667006f67aaa604466b9974425f4":["8af24f206736d88373229e8c83ddb84a433e57f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}