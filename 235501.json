{"path":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"/dev/null","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass == 1)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList failure = new ArrayList();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw (Throwable) failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.UNLIMITED);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass == 1)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList failure = new ArrayList();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw (Throwable) failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.UNLIMITED);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    RAMDirectory directory = new MockRAMDirectory();\n\n    final Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n      //System.out.println(\"TEST: pass=\" + pass + \" cms=\" + (pass >= 2));\n      for(int iter=0;iter<10;iter++) {\n        //System.out.println(\"TEST: iter=\" + iter);\n        MergeScheduler ms;\n        if (pass == 1)\n          ms = new ConcurrentMergeScheduler();\n        else\n          ms = new SerialMergeScheduler();\n        \n        writer.setMergeScheduler(ms);\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(100);\n\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        writer.setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList failure = new ArrayList();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0)\n          throw (Throwable) failure.get(0);\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory, true);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.UNLIMITED);\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}