{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionFieldsConsumer#close().mjava","commits":[{"id":"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a","date":1427495869,"type":0,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionFieldsConsumer#close().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    closed = true;\n    String indexFile = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, INDEX_EXTENSION);\n    boolean success = false;\n    try (IndexOutput indexOut = state.directory.createOutput(indexFile, state.context)) {\n      delegateFieldsConsumer.close();\n      CodecUtil.writeIndexHeader(indexOut, CODEC_NAME, COMPLETION_VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      /*\n       * we write the delegate postings format name so we can load it\n       * without getting an instance in the ctor\n       */\n      indexOut.writeString(delegatePostingsFormatName);\n      // write # of seen fields\n      indexOut.writeVInt(seenFields.size());\n      // write field numbers and dictOut offsets\n      for (Map.Entry<String, Long> seenField : seenFields.entrySet()) {\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(seenField.getKey());\n        indexOut.writeVInt(fieldInfo.number);\n        indexOut.writeVLong(seenField.getValue());\n      }\n      CodecUtil.writeFooter(indexOut);\n      CodecUtil.writeFooter(dictOut);\n      IOUtils.close(dictOut);\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(dictOut, delegateFieldsConsumer);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionFieldsConsumer#close().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    closed = true;\n    String indexFile = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, INDEX_EXTENSION);\n    boolean success = false;\n    try (IndexOutput indexOut = state.directory.createOutput(indexFile, state.context)) {\n      delegateFieldsConsumer.close();\n      CodecUtil.writeIndexHeader(indexOut, CODEC_NAME, COMPLETION_VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      /*\n       * we write the delegate postings format name so we can load it\n       * without getting an instance in the ctor\n       */\n      indexOut.writeString(delegatePostingsFormatName);\n      // write # of seen fields\n      indexOut.writeVInt(seenFields.size());\n      // write field numbers and dictOut offsets\n      for (Map.Entry<String, Long> seenField : seenFields.entrySet()) {\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(seenField.getKey());\n        indexOut.writeVInt(fieldInfo.number);\n        indexOut.writeVLong(seenField.getValue());\n      }\n      CodecUtil.writeFooter(indexOut);\n      CodecUtil.writeFooter(dictOut);\n      IOUtils.close(dictOut);\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(dictOut, delegateFieldsConsumer);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c33f6677a2078739058f81eca1df69d12cd62b0","date":1432799589,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionFieldsConsumer#close().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionFieldsConsumer#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    closed = true;\n    String indexFile = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, INDEX_EXTENSION);\n    boolean success = false;\n    try (IndexOutput indexOut = state.directory.createOutput(indexFile, state.context)) {\n      delegateFieldsConsumer.close();\n      CodecUtil.writeIndexHeader(indexOut, CODEC_NAME, COMPLETION_VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      /*\n       * we write the delegate postings format name so we can load it\n       * without getting an instance in the ctor\n       */\n      indexOut.writeString(delegatePostingsFormatName);\n      // write # of seen fields\n      indexOut.writeVInt(seenFields.size());\n      // write field numbers and dictOut offsets\n      for (Map.Entry<String, CompletionMetaData> seenField : seenFields.entrySet()) {\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(seenField.getKey());\n        indexOut.writeVInt(fieldInfo.number);\n        CompletionMetaData metaData = seenField.getValue();\n        indexOut.writeVLong(metaData.filePointer);\n        indexOut.writeVLong(metaData.minWeight);\n        indexOut.writeVLong(metaData.maxWeight);\n        indexOut.writeByte(metaData.type);\n      }\n      CodecUtil.writeFooter(indexOut);\n      CodecUtil.writeFooter(dictOut);\n      IOUtils.close(dictOut);\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(dictOut, delegateFieldsConsumer);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    closed = true;\n    String indexFile = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, INDEX_EXTENSION);\n    boolean success = false;\n    try (IndexOutput indexOut = state.directory.createOutput(indexFile, state.context)) {\n      delegateFieldsConsumer.close();\n      CodecUtil.writeIndexHeader(indexOut, CODEC_NAME, COMPLETION_VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      /*\n       * we write the delegate postings format name so we can load it\n       * without getting an instance in the ctor\n       */\n      indexOut.writeString(delegatePostingsFormatName);\n      // write # of seen fields\n      indexOut.writeVInt(seenFields.size());\n      // write field numbers and dictOut offsets\n      for (Map.Entry<String, Long> seenField : seenFields.entrySet()) {\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(seenField.getKey());\n        indexOut.writeVInt(fieldInfo.number);\n        indexOut.writeVLong(seenField.getValue());\n      }\n      CodecUtil.writeFooter(indexOut);\n      CodecUtil.writeFooter(dictOut);\n      IOUtils.close(dictOut);\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(dictOut, delegateFieldsConsumer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionFieldsConsumer#close().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionFieldsConsumer#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    closed = true;\n    String indexFile = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, INDEX_EXTENSION);\n    boolean success = false;\n    try (IndexOutput indexOut = state.directory.createOutput(indexFile, state.context)) {\n      delegateFieldsConsumer.close();\n      CodecUtil.writeIndexHeader(indexOut, codecName, COMPLETION_VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      /*\n       * we write the delegate postings format name so we can load it\n       * without getting an instance in the ctor\n       */\n      indexOut.writeString(delegatePostingsFormatName);\n      // write # of seen fields\n      indexOut.writeVInt(seenFields.size());\n      // write field numbers and dictOut offsets\n      for (Map.Entry<String, CompletionMetaData> seenField : seenFields.entrySet()) {\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(seenField.getKey());\n        indexOut.writeVInt(fieldInfo.number);\n        CompletionMetaData metaData = seenField.getValue();\n        indexOut.writeVLong(metaData.filePointer);\n        indexOut.writeVLong(metaData.minWeight);\n        indexOut.writeVLong(metaData.maxWeight);\n        indexOut.writeByte(metaData.type);\n      }\n      CodecUtil.writeFooter(indexOut);\n      CodecUtil.writeFooter(dictOut);\n      IOUtils.close(dictOut);\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(dictOut, delegateFieldsConsumer);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    closed = true;\n    String indexFile = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, INDEX_EXTENSION);\n    boolean success = false;\n    try (IndexOutput indexOut = state.directory.createOutput(indexFile, state.context)) {\n      delegateFieldsConsumer.close();\n      CodecUtil.writeIndexHeader(indexOut, CODEC_NAME, COMPLETION_VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n      /*\n       * we write the delegate postings format name so we can load it\n       * without getting an instance in the ctor\n       */\n      indexOut.writeString(delegatePostingsFormatName);\n      // write # of seen fields\n      indexOut.writeVInt(seenFields.size());\n      // write field numbers and dictOut offsets\n      for (Map.Entry<String, CompletionMetaData> seenField : seenFields.entrySet()) {\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(seenField.getKey());\n        indexOut.writeVInt(fieldInfo.number);\n        CompletionMetaData metaData = seenField.getValue();\n        indexOut.writeVLong(metaData.filePointer);\n        indexOut.writeVLong(metaData.minWeight);\n        indexOut.writeVLong(metaData.maxWeight);\n        indexOut.writeByte(metaData.type);\n      }\n      CodecUtil.writeFooter(indexOut);\n      CodecUtil.writeFooter(dictOut);\n      IOUtils.close(dictOut);\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(dictOut, delegateFieldsConsumer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["8c33f6677a2078739058f81eca1df69d12cd62b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8c33f6677a2078739058f81eca1df69d12cd62b0":["07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","8c33f6677a2078739058f81eca1df69d12cd62b0"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"8c33f6677a2078739058f81eca1df69d12cd62b0":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}