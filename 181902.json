{"path":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testAbuseOfSort().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testAbuseOfSort().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testAbuseOfSort().mjava","sourceNew":"  @Test\n  public void testAbuseOfSort() {\n\n    assertU(adoc(\"id\", \"9999991\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn aaa sss ddd fff ggg\"));\n    assertU(adoc(\"id\", \"9999992\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn qqq www eee rrr ttt\"));\n\n    assertU(commit());\n  \n    try {\n      ignoreException(\"can not sort on multivalued field: sortabuse_t\");\n      assertQ(\"sort on something that shouldn't work\",\n              req(\"q\", \"sortabuse_b:true\",\n                  \"sort\", \"sortabuse_t asc\"),\n              \"*[count(//doc)=2]\");\n      fail(\"no error encountered when sorting on sortabuse_t\");\n    } catch (Exception outer) {\n      // EXPECTED\n      Throwable root = getRootCause(outer);\n      assertEquals(\"sort exception root cause\", \n                   SolrException.class, root.getClass());\n      SolrException e = (SolrException) root;\n      assertEquals(\"incorrect error type\", \n                   SolrException.ErrorCode.BAD_REQUEST,\n                   SolrException.ErrorCode.getErrorCode(e.code()));\n      assertTrue(\"exception doesn't contain field name\",\n                 -1 != e.getMessage().indexOf(\"sortabuse_t\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAbuseOfSort() {\n\n    assertU(adoc(\"id\", \"9999991\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn aaa sss ddd fff ggg\"));\n    assertU(adoc(\"id\", \"9999992\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn qqq www eee rrr ttt\"));\n\n    assertU(commit());\n  \n    try {\n      ignoreException(\"can not sort on multivalued field: sortabuse_t\");\n      assertQ(\"sort on something that shouldn't work\",\n              req(\"q\", \"sortabuse_b:true\",\n                  \"sort\", \"sortabuse_t asc\"),\n              \"*[count(//doc)=2]\");\n      fail(\"no error encountered when sorting on sortabuse_t\");\n    } catch (Exception outer) {\n      // EXPECTED\n      Throwable root = getRootCause(outer);\n      assertEquals(\"sort exception root cause\", \n                   SolrException.class, root.getClass());\n      SolrException e = (SolrException) root;\n      assertEquals(\"incorrect error type\", \n                   SolrException.ErrorCode.BAD_REQUEST,\n                   SolrException.ErrorCode.getErrorCode(e.code()));\n      assertTrue(\"exception doesn't contain field name\",\n                 -1 != e.getMessage().indexOf(\"sortabuse_t\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testAbuseOfSort().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testAbuseOfSort().mjava","sourceNew":"  @Test\n  public void testAbuseOfSort() {\n\n    assertU(adoc(\"id\", \"9999991\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn aaa sss ddd fff ggg\"));\n    assertU(adoc(\"id\", \"9999992\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn qqq www eee rrr ttt\"));\n\n    assertU(commit());\n  \n    try {\n      ignoreException(\"can not sort on multivalued field: sortabuse_t\");\n      assertQ(\"sort on something that shouldn't work\",\n              req(\"q\", \"sortabuse_b:true\",\n                  \"sort\", \"sortabuse_t asc\"),\n              \"*[count(//doc)=2]\");\n      fail(\"no error encountered when sorting on sortabuse_t\");\n    } catch (Exception outer) {\n      // EXPECTED\n      Throwable root = getRootCause(outer);\n      assertEquals(\"sort exception root cause\", \n                   SolrException.class, root.getClass());\n      SolrException e = (SolrException) root;\n      assertEquals(\"incorrect error type\", \n                   SolrException.ErrorCode.BAD_REQUEST,\n                   SolrException.ErrorCode.getErrorCode(e.code()));\n      assertTrue(\"exception doesn't contain field name\",\n                 -1 != e.getMessage().indexOf(\"sortabuse_t\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAbuseOfSort() {\n\n    assertU(adoc(\"id\", \"9999991\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn aaa sss ddd fff ggg\"));\n    assertU(adoc(\"id\", \"9999992\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn qqq www eee rrr ttt\"));\n\n    assertU(commit());\n  \n    try {\n      ignoreException(\"can not sort on multivalued field: sortabuse_t\");\n      assertQ(\"sort on something that shouldn't work\",\n              req(\"q\", \"sortabuse_b:true\",\n                  \"sort\", \"sortabuse_t asc\"),\n              \"*[count(//doc)=2]\");\n      fail(\"no error encountered when sorting on sortabuse_t\");\n    } catch (Exception outer) {\n      // EXPECTED\n      Throwable root = getRootCause(outer);\n      assertEquals(\"sort exception root cause\", \n                   SolrException.class, root.getClass());\n      SolrException e = (SolrException) root;\n      assertEquals(\"incorrect error type\", \n                   SolrException.ErrorCode.BAD_REQUEST,\n                   SolrException.ErrorCode.getErrorCode(e.code()));\n      assertTrue(\"exception doesn't contain field name\",\n                 -1 != e.getMessage().indexOf(\"sortabuse_t\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testAbuseOfSort().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testAbuseOfSort().mjava","sourceNew":"  @Test\n  public void testAbuseOfSort() {\n\n    assertU(adoc(\"id\", \"9999991\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn aaa sss ddd fff ggg\"));\n    assertU(adoc(\"id\", \"9999992\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn qqq www eee rrr ttt\"));\n\n    assertU(commit());\n  \n    try {\n      ignoreException(\"can not sort on multivalued field: sortabuse_t\");\n      assertQ(\"sort on something that shouldn't work\",\n              req(\"q\", \"sortabuse_b:true\",\n                  \"sort\", \"sortabuse_t asc\"),\n              \"*[count(//doc)=2]\");\n      fail(\"no error encountered when sorting on sortabuse_t\");\n    } catch (Exception outer) {\n      // EXPECTED\n      Throwable root = getRootCause(outer);\n      assertEquals(\"sort exception root cause\", \n                   SolrException.class, root.getClass());\n      SolrException e = (SolrException) root;\n      assertEquals(\"incorrect error type\", \n                   SolrException.ErrorCode.BAD_REQUEST,\n                   SolrException.ErrorCode.getErrorCode(e.code()));\n      assertTrue(\"exception doesn't contain field name\",\n                 -1 != e.getMessage().indexOf(\"sortabuse_t\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAbuseOfSort() {\n\n    assertU(adoc(\"id\", \"9999991\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn aaa sss ddd fff ggg\"));\n    assertU(adoc(\"id\", \"9999992\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn qqq www eee rrr ttt\"));\n\n    assertU(commit());\n  \n    try {\n      ignoreException(\"can not sort on multivalued field: sortabuse_t\");\n      assertQ(\"sort on something that shouldn't work\",\n              req(\"q\", \"sortabuse_b:true\",\n                  \"sort\", \"sortabuse_t asc\"),\n              \"*[count(//doc)=2]\");\n      fail(\"no error encountered when sorting on sortabuse_t\");\n    } catch (Exception outer) {\n      // EXPECTED\n      Throwable root = getRootCause(outer);\n      assertEquals(\"sort exception root cause\", \n                   SolrException.class, root.getClass());\n      SolrException e = (SolrException) root;\n      assertEquals(\"incorrect error type\", \n                   SolrException.ErrorCode.BAD_REQUEST,\n                   SolrException.ErrorCode.getErrorCode(e.code()));\n      assertTrue(\"exception doesn't contain field name\",\n                 -1 != e.getMessage().indexOf(\"sortabuse_t\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92f789dbd1886e4b468e61b0def88b29a3f55228","date":1533844010,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testAbuseOfSort().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testAbuseOfSort().mjava","sourceNew":"  @Test\n  public void testAbuseOfSort() {\n\n    assertU(adoc(\"id\", \"9999991\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn aaa sss ddd fff ggg\"));\n    assertU(adoc(\"id\", \"9999992\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn qqq www eee rrr ttt\"));\n\n    assertU(commit());\n\n    RuntimeException outerEx = expectThrows(RuntimeException.class, () -> {\n      ignoreException(\"can not sort on multivalued field: sortabuse_t\");\n      assertQ(\"sort on something that shouldn't work\",\n          req(\"q\", \"sortabuse_b:true\",\n              \"sort\", \"sortabuse_t asc\"),\n          \"*[count(//doc)=2]\");\n    });\n    Throwable root = getRootCause(outerEx);\n    assertEquals(\"sort exception root cause\",\n        SolrException.class, root.getClass());\n    SolrException e = (SolrException) root;\n    assertEquals(\"incorrect error type\",\n        SolrException.ErrorCode.BAD_REQUEST,\n        SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(\"exception doesn't contain field name\",\n        e.getMessage().contains(\"sortabuse_t\"));\n  }\n\n","sourceOld":"  @Test\n  public void testAbuseOfSort() {\n\n    assertU(adoc(\"id\", \"9999991\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn aaa sss ddd fff ggg\"));\n    assertU(adoc(\"id\", \"9999992\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn qqq www eee rrr ttt\"));\n\n    assertU(commit());\n  \n    try {\n      ignoreException(\"can not sort on multivalued field: sortabuse_t\");\n      assertQ(\"sort on something that shouldn't work\",\n              req(\"q\", \"sortabuse_b:true\",\n                  \"sort\", \"sortabuse_t asc\"),\n              \"*[count(//doc)=2]\");\n      fail(\"no error encountered when sorting on sortabuse_t\");\n    } catch (Exception outer) {\n      // EXPECTED\n      Throwable root = getRootCause(outer);\n      assertEquals(\"sort exception root cause\", \n                   SolrException.class, root.getClass());\n      SolrException e = (SolrException) root;\n      assertEquals(\"incorrect error type\", \n                   SolrException.ErrorCode.BAD_REQUEST,\n                   SolrException.ErrorCode.getErrorCode(e.code()));\n      assertTrue(\"exception doesn't contain field name\",\n                 -1 != e.getMessage().indexOf(\"sortabuse_t\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e","date":1541777404,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testAbuseOfSort().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testAbuseOfSort().mjava","sourceNew":"  @Test\n  public void testAbuseOfSort() {\n\n    assertU(adoc(\"id\", \"9999991\",\n                 \"sortabuse_not_uninvertible\", \"xxx\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn aaa sss ddd fff ggg\"));\n    assertU(adoc(\"id\", \"9999992\",\n                 \"sortabuse_not_uninvertible\", \"yyy\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn qqq www eee rrr ttt\"));\n\n    assertU(commit());\n\n    for (String f : Arrays.asList(\"sortabuse_not_uninvertible\", \"sortabuse_t\")) {\n      RuntimeException outerEx = expectThrows(RuntimeException.class, () -> {\n          ignoreException(\"sortabuse\");\n          assertQ(\"sort on something that shouldn't work\",\n                  req(\"q\", \"*:*\",\n                      \"sort\", f+ \" asc\"),\n                  \"*[count(//doc)=2]\");\n        });\n      Throwable root = getRootCause(outerEx);\n      assertEquals(\"sort exception root cause\",\n                   SolrException.class, root.getClass());\n      SolrException e = (SolrException) root;\n      assertEquals(\"incorrect error type\",\n                   SolrException.ErrorCode.BAD_REQUEST,\n                   SolrException.ErrorCode.getErrorCode(e.code()));\n      assertTrue(\"exception doesn't contain field name\",\n                 e.getMessage().contains(f));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAbuseOfSort() {\n\n    assertU(adoc(\"id\", \"9999991\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn aaa sss ddd fff ggg\"));\n    assertU(adoc(\"id\", \"9999992\",\n                 \"sortabuse_b\", \"true\",\n                 \"sortabuse_t\", \"zzz xxx ccc vvv bbb nnn qqq www eee rrr ttt\"));\n\n    assertU(commit());\n\n    RuntimeException outerEx = expectThrows(RuntimeException.class, () -> {\n      ignoreException(\"can not sort on multivalued field: sortabuse_t\");\n      assertQ(\"sort on something that shouldn't work\",\n          req(\"q\", \"sortabuse_b:true\",\n              \"sort\", \"sortabuse_t asc\"),\n          \"*[count(//doc)=2]\");\n    });\n    Throwable root = getRootCause(outerEx);\n    assertEquals(\"sort exception root cause\",\n        SolrException.class, root.getClass());\n    SolrException e = (SolrException) root;\n    assertEquals(\"incorrect error type\",\n        SolrException.ErrorCode.BAD_REQUEST,\n        SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(\"exception doesn't contain field name\",\n        e.getMessage().contains(\"sortabuse_t\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92f789dbd1886e4b468e61b0def88b29a3f55228":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e":["92f789dbd1886e4b468e61b0def88b29a3f55228"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["92f789dbd1886e4b468e61b0def88b29a3f55228"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"92f789dbd1886e4b468e61b0def88b29a3f55228":["0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}