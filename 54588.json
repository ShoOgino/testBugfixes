{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/ConcurrentDeleteAndCreateCollectionTest#testConcurrentCreateAndDeleteOverTheSameConfig().mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ConcurrentDeleteAndCreateCollectionTest#testConcurrentCreateAndDeleteOverTheSameConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ConcurrentDeleteAndCreateCollectionTest#testConcurrentCreateAndDeleteOverTheSameConfig().mjava","sourceNew":"  public void testConcurrentCreateAndDeleteOverTheSameConfig() {\n    final String configName = \"testconfig\";\n    uploadConfig(configset(\"configset-2\"), configName); // upload config once, to be used by all collections\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final AtomicReference<Exception> failure = new AtomicReference<>();\n    final int timeToRunSec = 30;\n    final CreateDeleteCollectionThread[] threads = new CreateDeleteCollectionThread[2];\n    for (int i = 0; i < threads.length; i++) {\n      final String collectionName = \"collection\" + i;\n      final SolrClient solrClient = getHttpSolrClient(baseUrl);\n      threads[i] = new CreateDeleteCollectionThread(\"create-delete-\" + i, collectionName, configName,\n                                                    timeToRunSec, solrClient, failure);\n    }\n\n    startAll(threads);\n    joinAll(threads);\n\n    assertNull(\"concurrent create and delete collection failed: \" + failure.get(), failure.get());\n  }\n\n","sourceOld":"  public void testConcurrentCreateAndDeleteOverTheSameConfig() {\n    final String configName = \"testconfig\";\n    uploadConfig(configset(\"configset-2\"), configName); // upload config once, to be used by all collections\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final AtomicReference<Exception> failure = new AtomicReference<>();\n    final int timeToRunSec = 30;\n    final CreateDeleteCollectionThread[] threads = new CreateDeleteCollectionThread[2];\n    for (int i = 0; i < threads.length; i++) {\n      final String collectionName = \"collection\" + i;\n      final SolrClient solrClient = getHttpSolrClient(baseUrl);\n      threads[i] = new CreateDeleteCollectionThread(\"create-delete-\" + i, collectionName, configName,\n                                                    timeToRunSec, solrClient, failure);\n    }\n\n    startAll(threads);\n    joinAll(threads);\n\n    assertNull(\"concurrent create and delete collection failed: \" + failure.get(), failure.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ConcurrentDeleteAndCreateCollectionTest#testConcurrentCreateAndDeleteOverTheSameConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ConcurrentDeleteAndCreateCollectionTest#testConcurrentCreateAndDeleteOverTheSameConfig().mjava","sourceNew":"  public void testConcurrentCreateAndDeleteOverTheSameConfig() {\n    final String configName = \"testconfig\";\n    uploadConfig(configset(\"configset-2\"), configName); // upload config once, to be used by all collections\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final AtomicReference<Exception> failure = new AtomicReference<>();\n    final int timeToRunSec = 30;\n    final CreateDeleteCollectionThread[] threads = new CreateDeleteCollectionThread[2];\n    for (int i = 0; i < threads.length; i++) {\n      final String collectionName = \"collection\" + i;\n      final SolrClient solrClient = getHttpSolrClient(baseUrl);\n      threads[i] = new CreateDeleteCollectionThread(\"create-delete-\" + i, collectionName, configName,\n                                                    timeToRunSec, solrClient, failure);\n    }\n\n    startAll(threads);\n    joinAll(threads);\n\n    assertNull(\"concurrent create and delete collection failed: \" + failure.get(), failure.get());\n  }\n\n","sourceOld":"  public void testConcurrentCreateAndDeleteOverTheSameConfig() {\n    final String configName = \"testconfig\";\n    uploadConfig(configset(\"configset-2\"), configName); // upload config once, to be used by all collections\n    final String baseUrl = solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString();\n    final AtomicReference<Exception> failure = new AtomicReference<>();\n    final int timeToRunSec = 30;\n    final CreateDeleteCollectionThread[] threads = new CreateDeleteCollectionThread[2];\n    for (int i = 0; i < threads.length; i++) {\n      final String collectionName = \"collection\" + i;\n      final SolrClient solrClient = getHttpSolrClient(baseUrl);\n      threads[i] = new CreateDeleteCollectionThread(\"create-delete-\" + i, collectionName, configName,\n                                                    timeToRunSec, solrClient, failure);\n    }\n\n    startAll(threads);\n    joinAll(threads);\n\n    assertNull(\"concurrent create and delete collection failed: \" + failure.get(), failure.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}