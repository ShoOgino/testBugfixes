{"path":"src/java/org/apache/lucene/search/spans/SpanOrQuery#SpanOrQuery(SpanQuery[]).mjava","commits":[{"id":"0bcbf4ed0baed877c8b36d024e17a99bedfdd904","date":1075500600,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanOrQuery#SpanOrQuery(SpanQuery[]).mjava","pathOld":"/dev/null","sourceNew":"  /** Construct a SpanOrQuery merging the provided clauses. */\n  public SpanOrQuery(SpanQuery[] clauses) {\n\n    // copy clauses array into an ArrayList\n    this.clauses = new ArrayList(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpanQuery clause = clauses[i];\n      if (i == 0) {                               // check field\n        field = clause.getField();\n      } else if (!clause.getField().equals(field)) {\n        throw new IllegalArgumentException(\"Clauses must have same field.\");\n      }\n      this.clauses.add(clause);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanOrQuery#SpanOrQuery(SpanQuery[]).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanOrQuery#SpanOrQuery(SpanQuery[]).mjava","sourceNew":"  /** Construct a SpanOrQuery merging the provided clauses. */\n  public SpanOrQuery(SpanQuery[] clauses) {\n\n    // copy clauses array into an ArrayList\n    this.clauses = new ArrayList<SpanQuery>(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpanQuery clause = clauses[i];\n      if (i == 0) {                               // check field\n        field = clause.getField();\n      } else if (!clause.getField().equals(field)) {\n        throw new IllegalArgumentException(\"Clauses must have same field.\");\n      }\n      this.clauses.add(clause);\n    }\n  }\n\n","sourceOld":"  /** Construct a SpanOrQuery merging the provided clauses. */\n  public SpanOrQuery(SpanQuery[] clauses) {\n\n    // copy clauses array into an ArrayList\n    this.clauses = new ArrayList(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpanQuery clause = clauses[i];\n      if (i == 0) {                               // check field\n        field = clause.getField();\n      } else if (!clause.getField().equals(field)) {\n        throw new IllegalArgumentException(\"Clauses must have same field.\");\n      }\n      this.clauses.add(clause);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87e76a976d5469661c89ff8931edd3df1f5b9cb2","date":1258226809,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanOrQuery#SpanOrQuery(SpanQuery...).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanOrQuery#SpanOrQuery(SpanQuery[]).mjava","sourceNew":"  /** Construct a SpanOrQuery merging the provided clauses. */\n  public SpanOrQuery(SpanQuery... clauses) {\n\n    // copy clauses array into an ArrayList\n    this.clauses = new ArrayList<SpanQuery>(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpanQuery clause = clauses[i];\n      if (i == 0) {                               // check field\n        field = clause.getField();\n      } else if (!clause.getField().equals(field)) {\n        throw new IllegalArgumentException(\"Clauses must have same field.\");\n      }\n      this.clauses.add(clause);\n    }\n  }\n\n","sourceOld":"  /** Construct a SpanOrQuery merging the provided clauses. */\n  public SpanOrQuery(SpanQuery[] clauses) {\n\n    // copy clauses array into an ArrayList\n    this.clauses = new ArrayList<SpanQuery>(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpanQuery clause = clauses[i];\n      if (i == 0) {                               // check field\n        field = clause.getField();\n      } else if (!clause.getField().equals(field)) {\n        throw new IllegalArgumentException(\"Clauses must have same field.\");\n      }\n      this.clauses.add(clause);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"87e76a976d5469661c89ff8931edd3df1f5b9cb2":["ef82ff03e4016c705811b2658e81471a645c0e49"],"ef82ff03e4016c705811b2658e81471a645c0e49":["0bcbf4ed0baed877c8b36d024e17a99bedfdd904"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0bcbf4ed0baed877c8b36d024e17a99bedfdd904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["87e76a976d5469661c89ff8931edd3df1f5b9cb2"]},"commit2Childs":{"87e76a976d5469661c89ff8931edd3df1f5b9cb2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef82ff03e4016c705811b2658e81471a645c0e49":["87e76a976d5469661c89ff8931edd3df1f5b9cb2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0bcbf4ed0baed877c8b36d024e17a99bedfdd904"],"0bcbf4ed0baed877c8b36d024e17a99bedfdd904":["ef82ff03e4016c705811b2658e81471a645c0e49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}