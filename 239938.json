{"path":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(List[Scorer]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(List[Scorer]).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(List[Scorer]).mjava","sourceNew":"  private Scorer countingConjunctionSumScorer(List<Scorer> requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(defaultSimilarity, requiredScorers) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","sourceOld":"  private Scorer countingConjunctionSumScorer(List<Scorer> requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(defaultSimilarity, requiredScorers) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e00f80591de714c6975f454e33e0fa5218b5902","date":1294514405,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(boolean,Similarity,List[Scorer]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(List[Scorer]).mjava","sourceNew":"  private Scorer countingConjunctionSumScorer(boolean disableCoord,\n                                              Similarity similarity,\n                                              List<Scorer> requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(disableCoord ? 1.0f : similarity.coord(requiredScorers.size(), requiredScorers.size()), requiredScorers) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","sourceOld":"  private Scorer countingConjunctionSumScorer(List<Scorer> requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(defaultSimilarity, requiredScorers) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(List[Scorer]).mjava","sourceNew":null,"sourceOld":"  private Scorer countingConjunctionSumScorer(List<Scorer> requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(defaultSimilarity, requiredScorers) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(List[Scorer]).mjava","sourceNew":null,"sourceOld":"  private Scorer countingConjunctionSumScorer(List<Scorer> requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(defaultSimilarity, requiredScorers) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e00f80591de714c6975f454e33e0fa5218b5902":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","3e00f80591de714c6975f454e33e0fa5218b5902"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","3e00f80591de714c6975f454e33e0fa5218b5902"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e00f80591de714c6975f454e33e0fa5218b5902"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3e00f80591de714c6975f454e33e0fa5218b5902":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3e00f80591de714c6975f454e33e0fa5218b5902","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}