{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,Replica.State,Replica.State,EnumSet[Replica.Type]).mjava","commits":[{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,Replica.State,Replica.State,EnumSet[Replica.Type]).mjava","pathOld":"/dev/null","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection, String shardId, String thisCoreNodeName,\n      Replica.State mustMatchStateFilter, Replica.State mustNotMatchStateFilter, final EnumSet<Replica.Type> acceptReplicaType) {\n    assert thisCoreNodeName != null;\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection);\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<>(shardMap.size());\n    for (Entry<String,Replica> entry : shardMap.entrySet().stream().filter((e)->acceptReplicaType.contains(e.getValue().getType())).collect(Collectors.toList())) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      \n      String coreNodeName = entry.getValue().getName();\n      \n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter == Replica.State.getState(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || mustNotMatchStateFilter != Replica.State.getState(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas\n      return null;\n    }\n\n    return nodes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e92ecc804db94989e3c224b898b8dc978ebb584f","344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,Replica.State,Replica.State,EnumSet[Replica.Type]).mjava","pathOld":"/dev/null","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection, String shardId, String thisCoreNodeName,\n      Replica.State mustMatchStateFilter, Replica.State mustNotMatchStateFilter, final EnumSet<Replica.Type> acceptReplicaType) {\n    assert thisCoreNodeName != null;\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection);\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<>(shardMap.size());\n    for (Entry<String,Replica> entry : shardMap.entrySet().stream().filter((e)->acceptReplicaType.contains(e.getValue().getType())).collect(Collectors.toList())) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      \n      String coreNodeName = entry.getValue().getName();\n      \n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter == Replica.State.getState(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || mustNotMatchStateFilter != Replica.State.getState(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas\n      return null;\n    }\n\n    return nodes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,Replica.State,Replica.State,EnumSet[Replica.Type]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,Replica.State,Replica.State,EnumSet[Replica.Type]).mjava","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection, String shardId, String thisCoreNodeName,\n      Replica.State mustMatchStateFilter, Replica.State mustNotMatchStateFilter, final EnumSet<Replica.Type> acceptReplicaType) {\n    assert thisCoreNodeName != null;\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collection);\n    if (docCollection == null || docCollection.getSlicesMap() == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection);\n    }\n    \n    Map<String,Slice> slices = docCollection.getSlicesMap();\n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<>(shardMap.size());\n    for (Entry<String,Replica> entry : shardMap.entrySet().stream().filter((e)->acceptReplicaType.contains(e.getValue().getType())).collect(Collectors.toList())) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      \n      String coreNodeName = entry.getValue().getName();\n      \n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter == Replica.State.getState(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || mustNotMatchStateFilter != Replica.State.getState(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas\n      return null;\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  public List<ZkCoreNodeProps> getReplicaProps(String collection, String shardId, String thisCoreNodeName,\n      Replica.State mustMatchStateFilter, Replica.State mustNotMatchStateFilter, final EnumSet<Replica.Type> acceptReplicaType) {\n    assert thisCoreNodeName != null;\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection);\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<>(shardMap.size());\n    for (Entry<String,Replica> entry : shardMap.entrySet().stream().filter((e)->acceptReplicaType.contains(e.getValue().getType())).collect(Collectors.toList())) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      \n      String coreNodeName = entry.getValue().getName();\n      \n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter == Replica.State.getState(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || mustNotMatchStateFilter != Replica.State.getState(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas\n      return null;\n    }\n\n    return nodes;\n  }\n\n","bugFix":["61c45e99cf6676da48f19d7511c73712ad39402b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,Replica.State,Replica.State,EnumSet[Replica.Type]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,Replica.State,Replica.State,EnumSet[Replica.Type]).mjava","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection, String shardId, String thisCoreNodeName,\n      Replica.State mustMatchStateFilter, Replica.State mustNotMatchStateFilter, final EnumSet<Replica.Type> acceptReplicaType) {\n    assert thisCoreNodeName != null;\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collection);\n    if (docCollection == null || docCollection.getSlicesMap() == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection);\n    }\n    \n    Map<String,Slice> slices = docCollection.getSlicesMap();\n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<>(shardMap.size());\n    for (Entry<String,Replica> entry : shardMap.entrySet().stream().filter((e)->acceptReplicaType.contains(e.getValue().getType())).collect(Collectors.toList())) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      \n      String coreNodeName = entry.getValue().getName();\n      \n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter == Replica.State.getState(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || mustNotMatchStateFilter != Replica.State.getState(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas\n      return null;\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  public List<ZkCoreNodeProps> getReplicaProps(String collection, String shardId, String thisCoreNodeName,\n      Replica.State mustMatchStateFilter, Replica.State mustNotMatchStateFilter, final EnumSet<Replica.Type> acceptReplicaType) {\n    assert thisCoreNodeName != null;\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    if (slices == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection);\n    }\n    \n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<>(shardMap.size());\n    for (Entry<String,Replica> entry : shardMap.entrySet().stream().filter((e)->acceptReplicaType.contains(e.getValue().getType())).collect(Collectors.toList())) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      \n      String coreNodeName = entry.getValue().getName();\n      \n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter == Replica.State.getState(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || mustNotMatchStateFilter != Replica.State.getState(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas\n      return null;\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e92ecc804db94989e3c224b898b8dc978ebb584f","date":1556036948,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,Replica.State,Replica.State,EnumSet[Replica.Type]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,Replica.State,Replica.State,EnumSet[Replica.Type]).mjava","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection, String shardId, String thisCoreNodeName,\n      Replica.State mustMatchStateFilter, Replica.State mustNotMatchStateFilter, final EnumSet<Replica.Type> acceptReplicaType) {\n    assert thisCoreNodeName != null;\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collection);\n    if (docCollection == null || docCollection.getSlicesMap() == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection);\n    }\n\n    Map<String,Slice> slices = docCollection.getSlicesMap();\n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n\n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<>(shardMap.size());\n    for (Entry<String,Replica> entry : shardMap.entrySet().stream().filter((e)->acceptReplicaType.contains(e.getValue().getType())).collect(Collectors.toList())) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n\n      String coreNodeName = entry.getValue().getName();\n\n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter == Replica.State.getState(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || mustNotMatchStateFilter != Replica.State.getState(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas\n      return null;\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  public List<ZkCoreNodeProps> getReplicaProps(String collection, String shardId, String thisCoreNodeName,\n      Replica.State mustMatchStateFilter, Replica.State mustNotMatchStateFilter, final EnumSet<Replica.Type> acceptReplicaType) {\n    assert thisCoreNodeName != null;\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collection);\n    if (docCollection == null || docCollection.getSlicesMap() == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection);\n    }\n    \n    Map<String,Slice> slices = docCollection.getSlicesMap();\n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n    \n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<>(shardMap.size());\n    for (Entry<String,Replica> entry : shardMap.entrySet().stream().filter((e)->acceptReplicaType.contains(e.getValue().getType())).collect(Collectors.toList())) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n      \n      String coreNodeName = entry.getValue().getName();\n      \n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter == Replica.State.getState(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || mustNotMatchStateFilter != Replica.State.getState(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas\n      return null;\n    }\n\n    return nodes;\n  }\n\n","bugFix":["61c45e99cf6676da48f19d7511c73712ad39402b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,Replica.State,Replica.State,EnumSet[Replica.Type]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getReplicaProps(String,String,String,Replica.State,Replica.State,EnumSet[Replica.Type]).mjava","sourceNew":"  public List<ZkCoreNodeProps> getReplicaProps(String collection, String shardId, String thisCoreNodeName,\n                                               Replica.State mustMatchStateFilter, Replica.State mustNotMatchStateFilter, final EnumSet<Replica.Type> acceptReplicaType) {\n    assert thisCoreNodeName != null;\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collection);\n    if (docCollection == null || docCollection.getSlicesMap() == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection);\n    }\n\n    Map<String, Slice> slices = docCollection.getSlicesMap();\n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n\n    Map<String, Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<>(shardMap.size());\n    for (Entry<String, Replica> entry : shardMap.entrySet().stream().filter((e) -> acceptReplicaType.contains(e.getValue().getType())).collect(Collectors.toList())) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n\n      String coreNodeName = entry.getValue().getName();\n\n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter == Replica.State.getState(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || mustNotMatchStateFilter != Replica.State.getState(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas\n      return null;\n    }\n\n    return nodes;\n  }\n\n","sourceOld":"  public List<ZkCoreNodeProps> getReplicaProps(String collection, String shardId, String thisCoreNodeName,\n      Replica.State mustMatchStateFilter, Replica.State mustNotMatchStateFilter, final EnumSet<Replica.Type> acceptReplicaType) {\n    assert thisCoreNodeName != null;\n    ClusterState clusterState = this.clusterState;\n    if (clusterState == null) {\n      return null;\n    }\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collection);\n    if (docCollection == null || docCollection.getSlicesMap() == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection in zk: \" + collection);\n    }\n\n    Map<String,Slice> slices = docCollection.getSlicesMap();\n    Slice replicas = slices.get(shardId);\n    if (replicas == null) {\n      throw new ZooKeeperException(ErrorCode.BAD_REQUEST, \"Could not find shardId in zk: \" + shardId);\n    }\n\n    Map<String,Replica> shardMap = replicas.getReplicasMap();\n    List<ZkCoreNodeProps> nodes = new ArrayList<>(shardMap.size());\n    for (Entry<String,Replica> entry : shardMap.entrySet().stream().filter((e)->acceptReplicaType.contains(e.getValue().getType())).collect(Collectors.toList())) {\n      ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());\n\n      String coreNodeName = entry.getValue().getName();\n\n      if (clusterState.liveNodesContain(nodeProps.getNodeName()) && !coreNodeName.equals(thisCoreNodeName)) {\n        if (mustMatchStateFilter == null || mustMatchStateFilter == Replica.State.getState(nodeProps.getState())) {\n          if (mustNotMatchStateFilter == null || mustNotMatchStateFilter != Replica.State.getState(nodeProps.getState())) {\n            nodes.add(nodeProps);\n          }\n        }\n      }\n    }\n    if (nodes.size() == 0) {\n      // no replicas\n      return null;\n    }\n\n    return nodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e92ecc804db94989e3c224b898b8dc978ebb584f":["344b0840364d990b29b97467bfcc766ff8325d11"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61c45e99cf6676da48f19d7511c73712ad39402b"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["e9017cf144952056066919f1ebc7897ff9bd71b1","344b0840364d990b29b97467bfcc766ff8325d11"],"61c45e99cf6676da48f19d7511c73712ad39402b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["e92ecc804db94989e3c224b898b8dc978ebb584f"],"344b0840364d990b29b97467bfcc766ff8325d11":["61c45e99cf6676da48f19d7511c73712ad39402b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2668c99990e4c94a78bac005aa682b7c5986d23a"]},"commit2Childs":{"e92ecc804db94989e3c224b898b8dc978ebb584f":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","344b0840364d990b29b97467bfcc766ff8325d11"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"344b0840364d990b29b97467bfcc766ff8325d11":["e92ecc804db94989e3c224b898b8dc978ebb584f","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}