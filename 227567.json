{"path":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#setupSolrCluster(int,int,int,int).mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#setupSolrCluster(int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void setupSolrCluster(int numShards, int numReplicas, int numServers, int maxShardsPerNode) throws Exception {\n    JettyConfig jc = buildJettyConfig(\"/solr\");\n    jc = JettyConfig.builder(jc).withServlets(extraServlets).build();\n    solrCluster = new MiniSolrCloudCluster(numServers, tmpSolrHome.toPath(), jc);\n    File configDir = tmpSolrHome.toPath().resolve(\"collection1/conf\").toFile();\n    solrCluster.uploadConfigSet(configDir.toPath(), \"conf1\");\n\n    solrCluster.getSolrClient().setDefaultCollection(COLLECTION);\n\n    createCollection(COLLECTION, \"conf1\", numShards, numReplicas, maxShardsPerNode);\n    indexDocuments(COLLECTION);\n\n    createJettyAndHarness(tmpSolrHome.getAbsolutePath(), solrconfig, schema,\n            \"/solr\", true, extraServlets);\n    loadModelsAndFeatures();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#setupSolrCluster(int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void setupSolrCluster(int numShards, int numReplicas, int numServers, int maxShardsPerNode) throws Exception {\n    JettyConfig jc = buildJettyConfig(\"/solr\");\n    jc = JettyConfig.builder(jc).withServlets(extraServlets).build();\n    solrCluster = new MiniSolrCloudCluster(numServers, tmpSolrHome.toPath(), jc);\n    File configDir = tmpSolrHome.toPath().resolve(\"collection1/conf\").toFile();\n    solrCluster.uploadConfigSet(configDir.toPath(), \"conf1\");\n\n    solrCluster.getSolrClient().setDefaultCollection(COLLECTION);\n\n    createCollection(COLLECTION, \"conf1\", numShards, numReplicas, maxShardsPerNode);\n    indexDocuments(COLLECTION);\n\n    createJettyAndHarness(tmpSolrHome.getAbsolutePath(), solrconfig, schema,\n            \"/solr\", true, extraServlets);\n    loadModelsAndFeatures();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5","date":1498283633,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#setupSolrCluster(int,int,int,int).mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#setupSolrCluster(int,int,int,int).mjava","sourceNew":"  private void setupSolrCluster(int numShards, int numReplicas, int numServers, int maxShardsPerNode) throws Exception {\n    JettyConfig jc = buildJettyConfig(\"/solr\");\n    jc = JettyConfig.builder(jc).withServlets(extraServlets).build();\n    solrCluster = new MiniSolrCloudCluster(numServers, tmpSolrHome.toPath(), jc);\n    File configDir = tmpSolrHome.toPath().resolve(\"collection1/conf\").toFile();\n    solrCluster.uploadConfigSet(configDir.toPath(), \"conf1\");\n\n    solrCluster.getSolrClient().setDefaultCollection(COLLECTION);\n\n    createCollection(COLLECTION, \"conf1\", numShards, numReplicas, maxShardsPerNode);\n    indexDocuments(COLLECTION);\n    for (JettySolrRunner solrRunner : solrCluster.getJettySolrRunners()) {\n      if (!solrRunner.getCoreContainer().getCores().isEmpty()){\n        String coreName = solrRunner.getCoreContainer().getCores().iterator().next().getName();\n        restTestHarness = new RestTestHarness(() -> solrRunner.getBaseUrl().toString() + \"/\" + coreName);\n        break;\n      }\n    }\n    loadModelsAndFeatures();\n  }\n\n","sourceOld":"  private void setupSolrCluster(int numShards, int numReplicas, int numServers, int maxShardsPerNode) throws Exception {\n    JettyConfig jc = buildJettyConfig(\"/solr\");\n    jc = JettyConfig.builder(jc).withServlets(extraServlets).build();\n    solrCluster = new MiniSolrCloudCluster(numServers, tmpSolrHome.toPath(), jc);\n    File configDir = tmpSolrHome.toPath().resolve(\"collection1/conf\").toFile();\n    solrCluster.uploadConfigSet(configDir.toPath(), \"conf1\");\n\n    solrCluster.getSolrClient().setDefaultCollection(COLLECTION);\n\n    createCollection(COLLECTION, \"conf1\", numShards, numReplicas, maxShardsPerNode);\n    indexDocuments(COLLECTION);\n\n    createJettyAndHarness(tmpSolrHome.getAbsolutePath(), solrconfig, schema,\n            \"/solr\", true, extraServlets);\n    loadModelsAndFeatures();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#setupSolrCluster(int,int,int,int).mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#setupSolrCluster(int,int,int,int).mjava","sourceNew":"  private void setupSolrCluster(int numShards, int numReplicas, int numServers, int maxShardsPerNode) throws Exception {\n    JettyConfig jc = buildJettyConfig(\"/solr\");\n    jc = JettyConfig.builder(jc).withServlets(extraServlets).build();\n    solrCluster = new MiniSolrCloudCluster(numServers, tmpSolrHome.toPath(), jc);\n    File configDir = tmpSolrHome.toPath().resolve(\"collection1/conf\").toFile();\n    solrCluster.uploadConfigSet(configDir.toPath(), \"conf1\");\n\n    solrCluster.getSolrClient().setDefaultCollection(COLLECTION);\n\n    createCollection(COLLECTION, \"conf1\", numShards, numReplicas, maxShardsPerNode);\n    indexDocuments(COLLECTION);\n    for (JettySolrRunner solrRunner : solrCluster.getJettySolrRunners()) {\n      if (!solrRunner.getCoreContainer().getCores().isEmpty()){\n        String coreName = solrRunner.getCoreContainer().getCores().iterator().next().getName();\n        restTestHarness = new RestTestHarness(() -> solrRunner.getBaseUrl().toString() + \"/\" + coreName);\n        break;\n      }\n    }\n    loadModelsAndFeatures();\n  }\n\n","sourceOld":"  private void setupSolrCluster(int numShards, int numReplicas, int numServers, int maxShardsPerNode) throws Exception {\n    JettyConfig jc = buildJettyConfig(\"/solr\");\n    jc = JettyConfig.builder(jc).withServlets(extraServlets).build();\n    solrCluster = new MiniSolrCloudCluster(numServers, tmpSolrHome.toPath(), jc);\n    File configDir = tmpSolrHome.toPath().resolve(\"collection1/conf\").toFile();\n    solrCluster.uploadConfigSet(configDir.toPath(), \"conf1\");\n\n    solrCluster.getSolrClient().setDefaultCollection(COLLECTION);\n\n    createCollection(COLLECTION, \"conf1\", numShards, numReplicas, maxShardsPerNode);\n    indexDocuments(COLLECTION);\n\n    createJettyAndHarness(tmpSolrHome.getAbsolutePath(), solrconfig, schema,\n            \"/solr\", true, extraServlets);\n    loadModelsAndFeatures();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#setupSolrCluster(int,int,int,int).mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#setupSolrCluster(int,int,int,int).mjava","sourceNew":"  private void setupSolrCluster(int numShards, int numReplicas, int numServers, int maxShardsPerNode) throws Exception {\n    JettyConfig jc = buildJettyConfig(\"/solr\");\n    jc = JettyConfig.builder(jc).withServlets(extraServlets).build();\n    solrCluster = new MiniSolrCloudCluster(numServers, tmpSolrHome.toPath(), jc);\n    File configDir = tmpSolrHome.toPath().resolve(\"collection1/conf\").toFile();\n    solrCluster.uploadConfigSet(configDir.toPath(), \"conf1\");\n\n    solrCluster.getSolrClient().setDefaultCollection(COLLECTION);\n\n    createCollection(COLLECTION, \"conf1\", numShards, numReplicas, maxShardsPerNode);\n    indexDocuments(COLLECTION);\n    for (JettySolrRunner solrRunner : solrCluster.getJettySolrRunners()) {\n      if (!solrRunner.getCoreContainer().getCores().isEmpty()){\n        String coreName = solrRunner.getCoreContainer().getCores().iterator().next().getName();\n        restTestHarness = new RestTestHarness(() -> solrRunner.getBaseUrl().toString() + \"/\" + coreName);\n        break;\n      }\n    }\n    loadModelsAndFeatures();\n  }\n\n","sourceOld":"  private void setupSolrCluster(int numShards, int numReplicas, int numServers, int maxShardsPerNode) throws Exception {\n    JettyConfig jc = buildJettyConfig(\"/solr\");\n    jc = JettyConfig.builder(jc).withServlets(extraServlets).build();\n    solrCluster = new MiniSolrCloudCluster(numServers, tmpSolrHome.toPath(), jc);\n    File configDir = tmpSolrHome.toPath().resolve(\"collection1/conf\").toFile();\n    solrCluster.uploadConfigSet(configDir.toPath(), \"conf1\");\n\n    solrCluster.getSolrClient().setDefaultCollection(COLLECTION);\n\n    createCollection(COLLECTION, \"conf1\", numShards, numReplicas, maxShardsPerNode);\n    indexDocuments(COLLECTION);\n\n    createJettyAndHarness(tmpSolrHome.getAbsolutePath(), solrconfig, schema,\n            \"/solr\", true, extraServlets);\n    loadModelsAndFeatures();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#setupSolrCluster(int,int,int).mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud#setupSolrCluster(int,int,int,int).mjava","sourceNew":"  private void setupSolrCluster(int numShards, int numReplicas, int numServers) throws Exception {\n    JettyConfig jc = buildJettyConfig(\"/solr\");\n    jc = JettyConfig.builder(jc).withServlets(extraServlets).build();\n    solrCluster = new MiniSolrCloudCluster(numServers, tmpSolrHome.toPath(), jc);\n    File configDir = tmpSolrHome.toPath().resolve(\"collection1/conf\").toFile();\n    solrCluster.uploadConfigSet(configDir.toPath(), \"conf1\");\n\n    solrCluster.getSolrClient().setDefaultCollection(COLLECTION);\n\n    createCollection(COLLECTION, \"conf1\", numShards, numReplicas);\n    indexDocuments(COLLECTION);\n    for (JettySolrRunner solrRunner : solrCluster.getJettySolrRunners()) {\n      if (!solrRunner.getCoreContainer().getCores().isEmpty()){\n        String coreName = solrRunner.getCoreContainer().getCores().iterator().next().getName();\n        restTestHarness = new RestTestHarness(() -> solrRunner.getBaseUrl().toString() + \"/\" + coreName);\n        break;\n      }\n    }\n    loadModelsAndFeatures();\n  }\n\n","sourceOld":"  private void setupSolrCluster(int numShards, int numReplicas, int numServers, int maxShardsPerNode) throws Exception {\n    JettyConfig jc = buildJettyConfig(\"/solr\");\n    jc = JettyConfig.builder(jc).withServlets(extraServlets).build();\n    solrCluster = new MiniSolrCloudCluster(numServers, tmpSolrHome.toPath(), jc);\n    File configDir = tmpSolrHome.toPath().resolve(\"collection1/conf\").toFile();\n    solrCluster.uploadConfigSet(configDir.toPath(), \"conf1\");\n\n    solrCluster.getSolrClient().setDefaultCollection(COLLECTION);\n\n    createCollection(COLLECTION, \"conf1\", numShards, numReplicas, maxShardsPerNode);\n    indexDocuments(COLLECTION);\n    for (JettySolrRunner solrRunner : solrCluster.getJettySolrRunners()) {\n      if (!solrRunner.getCoreContainer().getCores().isEmpty()){\n        String coreName = solrRunner.getCoreContainer().getCores().iterator().next().getName();\n        restTestHarness = new RestTestHarness(() -> solrRunner.getBaseUrl().toString() + \"/\" + coreName);\n        break;\n      }\n    }\n    loadModelsAndFeatures();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5","9720b151fde2073f4e401450f4574e5f31c2d0ff","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9720b151fde2073f4e401450f4574e5f31c2d0ff","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}