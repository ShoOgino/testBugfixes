{"path":"src/java/org/apache/lucene/index/IndexWriter#applyDeletes(HashMap,IndexReader).mjava","commits":[{"id":"42a18cb0bca2c4ac9747f31c7a74fac90c661f39","date":1171363388,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#applyDeletes(HashMap,IndexReader).mjava","pathOld":"src/java/org/apache/lucene/index/NewIndexModifier#applyDeletes(HashMap,IndexReader).mjava","sourceNew":"  // Apply buffered delete terms to this reader.\n  private final void applyDeletes(HashMap deleteTerms, IndexReader reader)\n      throws IOException {\n    Iterator iter = deleteTerms.entrySet().iterator();\n    while (iter.hasNext()) {\n      Entry entry = (Entry) iter.next();\n      reader.deleteDocuments((Term) entry.getKey());\n    }\n  }\n\n","sourceOld":"  // apply buffered delete terms to disk segments\n  // except the one just flushed from ram\n  private final void applyDeletes(HashMap deleteTerms, IndexReader reader)\n      throws IOException {\n    Iterator iter = deleteTerms.entrySet().iterator();\n    while (iter.hasNext()) {\n      Entry entry = (Entry)iter.next();\n      Term term = (Term)entry.getKey();\n      reader.deleteDocuments(term);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#applyDeletes(HashMap,IndexReader).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#applyDeletes(HashMap,IndexReader).mjava","sourceNew":"  // Apply buffered delete terms to this reader.\n  private final void applyDeletes(HashMap deleteTerms, IndexReader reader)\n      throws CorruptIndexException, IOException {\n    Iterator iter = deleteTerms.entrySet().iterator();\n    while (iter.hasNext()) {\n      Entry entry = (Entry) iter.next();\n      reader.deleteDocuments((Term) entry.getKey());\n    }\n  }\n\n","sourceOld":"  // Apply buffered delete terms to this reader.\n  private final void applyDeletes(HashMap deleteTerms, IndexReader reader)\n      throws IOException {\n    Iterator iter = deleteTerms.entrySet().iterator();\n    while (iter.hasNext()) {\n      Entry entry = (Entry) iter.next();\n      reader.deleteDocuments((Term) entry.getKey());\n    }\n  }\n\n","bugFix":["42a18cb0bca2c4ac9747f31c7a74fac90c661f39"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fde68de507dbf344495d7b5e8052866fe5f254ab","date":1189434831,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#applyDeletes(HashMap,IndexReader).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#applyDeletes(HashMap,IndexReader).mjava","sourceNew":"  // Apply buffered delete terms to this reader.\n  private final int applyDeletes(HashMap deleteTerms, IndexReader reader)\n      throws CorruptIndexException, IOException {\n    Iterator iter = deleteTerms.entrySet().iterator();\n    int delCount = 0;\n    while (iter.hasNext()) {\n      Entry entry = (Entry) iter.next();\n      delCount += reader.deleteDocuments((Term) entry.getKey());\n    }\n    return delCount;\n  }\n\n","sourceOld":"  // Apply buffered delete terms to this reader.\n  private final void applyDeletes(HashMap deleteTerms, IndexReader reader)\n      throws CorruptIndexException, IOException {\n    Iterator iter = deleteTerms.entrySet().iterator();\n    while (iter.hasNext()) {\n      Entry entry = (Entry) iter.next();\n      reader.deleteDocuments((Term) entry.getKey());\n    }\n  }\n\n","bugFix":["42a18cb0bca2c4ac9747f31c7a74fac90c661f39"],"bugIntro":["5a251aa47d1808cbae42c0e172d698c377430e60"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a251aa47d1808cbae42c0e172d698c377430e60","date":1199375390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#applyDeletes(HashMap,IndexReader).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#applyDeletes(HashMap,IndexReader).mjava","sourceNew":"  // Apply buffered delete terms to this reader.\n  private final void applyDeletes(HashMap deleteTerms, IndexReader reader)\n      throws CorruptIndexException, IOException {\n    Iterator iter = deleteTerms.entrySet().iterator();\n    while (iter.hasNext()) {\n      Entry entry = (Entry) iter.next();\n      reader.deleteDocuments((Term) entry.getKey());\n    }\n  }\n\n","sourceOld":"  // Apply buffered delete terms to this reader.\n  private final int applyDeletes(HashMap deleteTerms, IndexReader reader)\n      throws CorruptIndexException, IOException {\n    Iterator iter = deleteTerms.entrySet().iterator();\n    int delCount = 0;\n    while (iter.hasNext()) {\n      Entry entry = (Entry) iter.next();\n      delCount += reader.deleteDocuments((Term) entry.getKey());\n    }\n    return delCount;\n  }\n\n","bugFix":["fde68de507dbf344495d7b5e8052866fe5f254ab"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be","date":1204801324,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/IndexWriter#applyDeletes(HashMap,IndexReader).mjava","sourceNew":null,"sourceOld":"  // Apply buffered delete terms to this reader.\n  private final void applyDeletes(HashMap deleteTerms, IndexReader reader)\n      throws CorruptIndexException, IOException {\n    Iterator iter = deleteTerms.entrySet().iterator();\n    while (iter.hasNext()) {\n      Entry entry = (Entry) iter.next();\n      reader.deleteDocuments((Term) entry.getKey());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fde68de507dbf344495d7b5e8052866fe5f254ab":["1b54a9bc667895a2095a886184bf69a3179e63df"],"42a18cb0bca2c4ac9747f31c7a74fac90c661f39":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1b54a9bc667895a2095a886184bf69a3179e63df":["42a18cb0bca2c4ac9747f31c7a74fac90c661f39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5a251aa47d1808cbae42c0e172d698c377430e60":["fde68de507dbf344495d7b5e8052866fe5f254ab"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["5a251aa47d1808cbae42c0e172d698c377430e60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"]},"commit2Childs":{"fde68de507dbf344495d7b5e8052866fe5f254ab":["5a251aa47d1808cbae42c0e172d698c377430e60"],"42a18cb0bca2c4ac9747f31c7a74fac90c661f39":["1b54a9bc667895a2095a886184bf69a3179e63df"],"1b54a9bc667895a2095a886184bf69a3179e63df":["fde68de507dbf344495d7b5e8052866fe5f254ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["42a18cb0bca2c4ac9747f31c7a74fac90c661f39"],"5a251aa47d1808cbae42c0e172d698c377430e60":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}