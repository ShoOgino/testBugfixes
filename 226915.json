{"path":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#list(int).mjava","commits":[{"id":"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","date":1527582939,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#list(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * List all available databases created by this node name\n   * @param maxLength maximum number of results to return\n   * @return list of database names, or empty\n   * @throws IOException on server errors\n   */\n  public List<String> list(int maxLength) throws IOException {\n    Set<String> names = new HashSet<>();\n    if (persistent) {\n      try {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(CommonParams.Q, \"*:*\");\n        params.add(CommonParams.FQ, CommonParams.TYPE + \":\" + DOC_TYPE);\n        params.add(CommonParams.FL, \"id\");\n        params.add(CommonParams.ROWS, String.valueOf(maxLength));\n        QueryResponse rsp = solrClient.query(collection, params);\n        SolrDocumentList docs = rsp.getResults();\n        if (docs != null) {\n          docs.forEach(d -> names.add(((String)d.getFieldValue(\"id\")).substring(idPrefixLength)));\n        }\n      } catch (SolrServerException e) {\n        log.warn(\"Error retrieving RRD list\", e);\n      }\n    }\n    // add in-memory backends not yet stored\n    names.addAll(backends.keySet());\n    ArrayList<String> list = new ArrayList<>(names);\n    Collections.sort(list);\n    return list;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8f0f2472d437d44ec2144932e1d13fb494e82a3","date":1528403207,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#list(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#list(int).mjava","sourceNew":"  /**\n   * List all available databases created by this node name\n   * @param maxLength maximum number of results to return\n   * @return list of database names and their last update times, or empty\n   * @throws IOException on server errors\n   */\n  public List<Pair<String, Long>> list(int maxLength) throws IOException {\n    Map<String, Pair<String, Long>> byName = new HashMap<>();\n    if (persistent) {\n      try {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(CommonParams.Q, \"*:*\");\n        params.add(CommonParams.FQ, CommonParams.TYPE + \":\" + DOC_TYPE);\n        params.add(CommonParams.FL, \"id,timestamp_l\");\n        params.add(CommonParams.ROWS, String.valueOf(maxLength));\n        QueryResponse rsp = solrClient.query(collection, params);\n        SolrDocumentList docs = rsp.getResults();\n        if (docs != null) {\n          docs.forEach(d -> {\n            Long time = (Long)d.getFieldValue(\"timestamp_l\");\n            Pair<String, Long> p = new Pair<>(((String)d.getFieldValue(\"id\")).substring(idPrefixLength), time);\n            byName.put(p.first(), p);\n          });\n        }\n      } catch (SolrServerException e) {\n        log.warn(\"Error retrieving RRD list\", e);\n      }\n    }\n    // add in-memory backends not yet stored, or replace with more recent versions\n    backends.forEach((name, db) -> {\n      long lastModifiedTime = db.getLastModifiedTime();\n      Pair<String, Long> stored = byName.get(name);\n      Pair<String, Long> inMemory = new Pair(name, lastModifiedTime);\n      if (stored != null) {\n        if (stored.second() < lastModifiedTime) {\n          byName.put(name, inMemory);\n        }\n      } else {\n        byName.put(name, inMemory);\n      }\n    });\n    ArrayList<Pair<String, Long>> list = new ArrayList<>(byName.values());\n    Collections.sort(list, DbComparator.INSTANCE);\n    return list;\n  }\n\n","sourceOld":"  /**\n   * List all available databases created by this node name\n   * @param maxLength maximum number of results to return\n   * @return list of database names, or empty\n   * @throws IOException on server errors\n   */\n  public List<String> list(int maxLength) throws IOException {\n    Set<String> names = new HashSet<>();\n    if (persistent) {\n      try {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(CommonParams.Q, \"*:*\");\n        params.add(CommonParams.FQ, CommonParams.TYPE + \":\" + DOC_TYPE);\n        params.add(CommonParams.FL, \"id\");\n        params.add(CommonParams.ROWS, String.valueOf(maxLength));\n        QueryResponse rsp = solrClient.query(collection, params);\n        SolrDocumentList docs = rsp.getResults();\n        if (docs != null) {\n          docs.forEach(d -> names.add(((String)d.getFieldValue(\"id\")).substring(idPrefixLength)));\n        }\n      } catch (SolrServerException e) {\n        log.warn(\"Error retrieving RRD list\", e);\n      }\n    }\n    // add in-memory backends not yet stored\n    names.addAll(backends.keySet());\n    ArrayList<String> list = new ArrayList<>(names);\n    Collections.sort(list);\n    return list;\n  }\n\n","bugFix":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"bugIntro":["2d7769c1ceca6a76710f154832127db9f9df2bf1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#list(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#list(int).mjava","sourceNew":"  /**\n   * List all available databases created by this node name\n   * @param maxLength maximum number of results to return\n   * @return list of database names and their last update times, or empty\n   * @throws IOException on server errors\n   */\n  public List<Pair<String, Long>> list(int maxLength) throws IOException {\n    Map<String, Pair<String, Long>> byName = new HashMap<>();\n    if (persistent) {\n      try {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(CommonParams.Q, \"*:*\");\n        params.add(CommonParams.FQ, CommonParams.TYPE + \":\" + DOC_TYPE);\n        params.add(CommonParams.FL, \"id,timestamp_l\");\n        params.add(CommonParams.ROWS, String.valueOf(maxLength));\n        QueryResponse rsp = solrClient.query(collection, params);\n        SolrDocumentList docs = rsp.getResults();\n        if (docs != null) {\n          docs.forEach(d -> {\n            Long time = (Long)d.getFieldValue(\"timestamp_l\");\n            Pair<String, Long> p = new Pair<>(((String)d.getFieldValue(\"id\")).substring(idPrefixLength), time);\n            byName.put(p.first(), p);\n          });\n        }\n      } catch (SolrServerException e) {\n        log.warn(\"Error retrieving RRD list\", e);\n      }\n    }\n    // add in-memory backends not yet stored, or replace with more recent versions\n    backends.forEach((name, db) -> {\n      long lastModifiedTime = db.getLastModifiedTime();\n      Pair<String, Long> stored = byName.get(name);\n      Pair<String, Long> inMemory = new Pair(name, lastModifiedTime);\n      if (stored != null) {\n        if (stored.second() < lastModifiedTime) {\n          byName.put(name, inMemory);\n        }\n      } else {\n        byName.put(name, inMemory);\n      }\n    });\n    ArrayList<Pair<String, Long>> list = new ArrayList<>(byName.values());\n    Collections.sort(list, DbComparator.INSTANCE);\n    return list;\n  }\n\n","sourceOld":"  /**\n   * List all available databases created by this node name\n   * @param maxLength maximum number of results to return\n   * @return list of database names, or empty\n   * @throws IOException on server errors\n   */\n  public List<String> list(int maxLength) throws IOException {\n    Set<String> names = new HashSet<>();\n    if (persistent) {\n      try {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(CommonParams.Q, \"*:*\");\n        params.add(CommonParams.FQ, CommonParams.TYPE + \":\" + DOC_TYPE);\n        params.add(CommonParams.FL, \"id\");\n        params.add(CommonParams.ROWS, String.valueOf(maxLength));\n        QueryResponse rsp = solrClient.query(collection, params);\n        SolrDocumentList docs = rsp.getResults();\n        if (docs != null) {\n          docs.forEach(d -> names.add(((String)d.getFieldValue(\"id\")).substring(idPrefixLength)));\n        }\n      } catch (SolrServerException e) {\n        log.warn(\"Error retrieving RRD list\", e);\n      }\n    }\n    // add in-memory backends not yet stored\n    names.addAll(backends.keySet());\n    ArrayList<String> list = new ArrayList<>(names);\n    Collections.sort(list);\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#list(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#list(int).mjava","sourceNew":"  /**\n   * List all available databases created by this node name\n   * @param maxLength maximum number of results to return\n   * @return list of database names and their last update times, or empty\n   * @throws IOException on server errors\n   */\n  public List<Pair<String, Long>> list(int maxLength) throws IOException {\n    Map<String, Pair<String, Long>> byName = new HashMap<>();\n    if (persistent) {\n      try {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(CommonParams.Q, \"*:*\");\n        params.add(CommonParams.FQ, CommonParams.TYPE + \":\" + DOC_TYPE);\n        params.add(CommonParams.FL, \"id,timestamp_l\");\n        params.add(CommonParams.ROWS, String.valueOf(maxLength));\n        QueryResponse rsp = solrClient.query(collection, params);\n        SolrDocumentList docs = rsp.getResults();\n        if (docs != null) {\n          docs.forEach(d -> {\n            Long time = (Long)d.getFieldValue(\"timestamp_l\");\n            Pair<String, Long> p = new Pair<>(((String)d.getFieldValue(\"id\")).substring(idPrefixLength), time);\n            byName.put(p.first(), p);\n          });\n        }\n      } catch (SolrServerException e) {\n        log.warn(\"Error retrieving RRD list\", e);\n      }\n    }\n    // add in-memory backends not yet stored, or replace with more recent versions\n    backends.forEach((name, db) -> {\n      long lastModifiedTime = db.getLastModifiedTime();\n      Pair<String, Long> stored = byName.get(name);\n      Pair<String, Long> inMemory = new Pair(name, lastModifiedTime);\n      if (stored != null) {\n        if (stored.second() < lastModifiedTime) {\n          byName.put(name, inMemory);\n        }\n      } else {\n        byName.put(name, inMemory);\n      }\n    });\n    ArrayList<Pair<String, Long>> list = new ArrayList<>(byName.values());\n    Collections.sort(list, DbComparator.INSTANCE);\n    return list;\n  }\n\n","sourceOld":"  /**\n   * List all available databases created by this node name\n   * @param maxLength maximum number of results to return\n   * @return list of database names, or empty\n   * @throws IOException on server errors\n   */\n  public List<String> list(int maxLength) throws IOException {\n    Set<String> names = new HashSet<>();\n    if (persistent) {\n      try {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(CommonParams.Q, \"*:*\");\n        params.add(CommonParams.FQ, CommonParams.TYPE + \":\" + DOC_TYPE);\n        params.add(CommonParams.FL, \"id\");\n        params.add(CommonParams.ROWS, String.valueOf(maxLength));\n        QueryResponse rsp = solrClient.query(collection, params);\n        SolrDocumentList docs = rsp.getResults();\n        if (docs != null) {\n          docs.forEach(d -> names.add(((String)d.getFieldValue(\"id\")).substring(idPrefixLength)));\n        }\n      } catch (SolrServerException e) {\n        log.warn(\"Error retrieving RRD list\", e);\n      }\n    }\n    // add in-memory backends not yet stored\n    names.addAll(backends.keySet());\n    ArrayList<String> list = new ArrayList<>(names);\n    Collections.sort(list);\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d7769c1ceca6a76710f154832127db9f9df2bf1","date":1533228478,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#list(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#list(int).mjava","sourceNew":"  /**\n   * List all available databases created by this node name\n   * @param maxLength maximum number of results to return\n   * @return list of database names and their last update times, or empty\n   * @throws IOException on server errors\n   */\n  public List<Pair<String, Long>> list(int maxLength) throws IOException {\n    Map<String, Pair<String, Long>> byName = new HashMap<>();\n    if (persistent) {\n      try {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(CommonParams.Q, \"*:*\");\n        params.add(CommonParams.FQ, CommonParams.TYPE + \":\" + DOC_TYPE);\n        params.add(CommonParams.FL, \"id,timestamp_l\");\n        params.add(CommonParams.ROWS, String.valueOf(maxLength));\n        QueryResponse rsp = solrClient.query(collection, params);\n        SolrDocumentList docs = rsp.getResults();\n        if (docs != null) {\n          docs.forEach(d -> {\n            Object o = d.getFieldValue(\"timestamp_l\");\n            if (o == null) {\n              return;\n            }\n            Long time = o instanceof Number ? ((Number)o).longValue() : Long.parseLong(String.valueOf(o));\n            Pair<String, Long> p = new Pair<>(((String)d.getFieldValue(\"id\")).substring(idPrefixLength), time);\n            byName.put(p.first(), p);\n          });\n        }\n      } catch (SolrServerException e) {\n        log.warn(\"Error retrieving RRD list\", e);\n      }\n    }\n    // add in-memory backends not yet stored, or replace with more recent versions\n    backends.forEach((name, db) -> {\n      long lastModifiedTime = db.getLastModifiedTime();\n      Pair<String, Long> stored = byName.get(name);\n      Pair<String, Long> inMemory = new Pair(name, lastModifiedTime);\n      if (stored != null) {\n        if (stored.second() < lastModifiedTime) {\n          byName.put(name, inMemory);\n        }\n      } else {\n        byName.put(name, inMemory);\n      }\n    });\n    ArrayList<Pair<String, Long>> list = new ArrayList<>(byName.values());\n    Collections.sort(list, DbComparator.INSTANCE);\n    return list;\n  }\n\n","sourceOld":"  /**\n   * List all available databases created by this node name\n   * @param maxLength maximum number of results to return\n   * @return list of database names and their last update times, or empty\n   * @throws IOException on server errors\n   */\n  public List<Pair<String, Long>> list(int maxLength) throws IOException {\n    Map<String, Pair<String, Long>> byName = new HashMap<>();\n    if (persistent) {\n      try {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(CommonParams.Q, \"*:*\");\n        params.add(CommonParams.FQ, CommonParams.TYPE + \":\" + DOC_TYPE);\n        params.add(CommonParams.FL, \"id,timestamp_l\");\n        params.add(CommonParams.ROWS, String.valueOf(maxLength));\n        QueryResponse rsp = solrClient.query(collection, params);\n        SolrDocumentList docs = rsp.getResults();\n        if (docs != null) {\n          docs.forEach(d -> {\n            Long time = (Long)d.getFieldValue(\"timestamp_l\");\n            Pair<String, Long> p = new Pair<>(((String)d.getFieldValue(\"id\")).substring(idPrefixLength), time);\n            byName.put(p.first(), p);\n          });\n        }\n      } catch (SolrServerException e) {\n        log.warn(\"Error retrieving RRD list\", e);\n      }\n    }\n    // add in-memory backends not yet stored, or replace with more recent versions\n    backends.forEach((name, db) -> {\n      long lastModifiedTime = db.getLastModifiedTime();\n      Pair<String, Long> stored = byName.get(name);\n      Pair<String, Long> inMemory = new Pair(name, lastModifiedTime);\n      if (stored != null) {\n        if (stored.second() < lastModifiedTime) {\n          byName.put(name, inMemory);\n        }\n      } else {\n        byName.put(name, inMemory);\n      }\n    });\n    ArrayList<Pair<String, Long>> list = new ArrayList<>(byName.values());\n    Collections.sort(list, DbComparator.INSTANCE);\n    return list;\n  }\n\n","bugFix":["f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#list(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#list(int).mjava","sourceNew":"  /**\n   * List all available databases created by this node name\n   * @param maxLength maximum number of results to return\n   * @return list of database names and their last update times, or empty\n   * @throws IOException on server errors\n   */\n  public List<Pair<String, Long>> list(int maxLength) throws IOException {\n    Map<String, Pair<String, Long>> byName = new HashMap<>();\n    if (persistent) {\n      try {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(CommonParams.Q, \"*:*\");\n        params.add(CommonParams.FQ, CommonParams.TYPE + \":\" + DOC_TYPE);\n        params.add(CommonParams.FL, \"id,timestamp_l\");\n        params.add(CommonParams.ROWS, String.valueOf(maxLength));\n        QueryResponse rsp = solrClient.query(collection, params);\n        SolrDocumentList docs = rsp.getResults();\n        if (docs != null) {\n          docs.forEach(d -> {\n            Object o = d.getFieldValue(\"timestamp_l\");\n            if (o == null) {\n              return;\n            }\n            Long time = o instanceof Number ? ((Number)o).longValue() : Long.parseLong(String.valueOf(o));\n            Pair<String, Long> p = new Pair<>(((String)d.getFieldValue(\"id\")).substring(idPrefixLength), time);\n            byName.put(p.first(), p);\n          });\n        }\n      } catch (SolrServerException e) {\n        log.warn(\"Error retrieving RRD list\", e);\n      }\n    }\n    // add in-memory backends not yet stored, or replace with more recent versions\n    backends.forEach((name, db) -> {\n      long lastModifiedTime = db.getLastModifiedTime();\n      Pair<String, Long> stored = byName.get(name);\n      Pair<String, Long> inMemory = new Pair<>(name, lastModifiedTime);\n      if (stored != null) {\n        if (stored.second() < lastModifiedTime) {\n          byName.put(name, inMemory);\n        }\n      } else {\n        byName.put(name, inMemory);\n      }\n    });\n    ArrayList<Pair<String, Long>> list = new ArrayList<>(byName.values());\n    Collections.sort(list, DbComparator.INSTANCE);\n    return list;\n  }\n\n","sourceOld":"  /**\n   * List all available databases created by this node name\n   * @param maxLength maximum number of results to return\n   * @return list of database names and their last update times, or empty\n   * @throws IOException on server errors\n   */\n  public List<Pair<String, Long>> list(int maxLength) throws IOException {\n    Map<String, Pair<String, Long>> byName = new HashMap<>();\n    if (persistent) {\n      try {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(CommonParams.Q, \"*:*\");\n        params.add(CommonParams.FQ, CommonParams.TYPE + \":\" + DOC_TYPE);\n        params.add(CommonParams.FL, \"id,timestamp_l\");\n        params.add(CommonParams.ROWS, String.valueOf(maxLength));\n        QueryResponse rsp = solrClient.query(collection, params);\n        SolrDocumentList docs = rsp.getResults();\n        if (docs != null) {\n          docs.forEach(d -> {\n            Object o = d.getFieldValue(\"timestamp_l\");\n            if (o == null) {\n              return;\n            }\n            Long time = o instanceof Number ? ((Number)o).longValue() : Long.parseLong(String.valueOf(o));\n            Pair<String, Long> p = new Pair<>(((String)d.getFieldValue(\"id\")).substring(idPrefixLength), time);\n            byName.put(p.first(), p);\n          });\n        }\n      } catch (SolrServerException e) {\n        log.warn(\"Error retrieving RRD list\", e);\n      }\n    }\n    // add in-memory backends not yet stored, or replace with more recent versions\n    backends.forEach((name, db) -> {\n      long lastModifiedTime = db.getLastModifiedTime();\n      Pair<String, Long> stored = byName.get(name);\n      Pair<String, Long> inMemory = new Pair(name, lastModifiedTime);\n      if (stored != null) {\n        if (stored.second() < lastModifiedTime) {\n          byName.put(name, inMemory);\n        }\n      } else {\n        byName.put(name, inMemory);\n      }\n    });\n    ArrayList<Pair<String, Long>> list = new ArrayList<>(byName.values());\n    Collections.sort(list, DbComparator.INSTANCE);\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f8f0f2472d437d44ec2144932e1d13fb494e82a3":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["2d7769c1ceca6a76710f154832127db9f9df2bf1"],"2d7769c1ceca6a76710f154832127db9f9df2bf1":["f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","f8f0f2472d437d44ec2144932e1d13fb494e82a3"]},"commit2Childs":{"f8f0f2472d437d44ec2144932e1d13fb494e82a3":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","2d7769c1ceca6a76710f154832127db9f9df2bf1","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["f8f0f2472d437d44ec2144932e1d13fb494e82a3","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2d7769c1ceca6a76710f154832127db9f9df2bf1":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}