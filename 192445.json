{"path":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestMatchRegionRetriever#testMultiFieldHighlights().mjava","commits":[{"id":"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c","date":1597407672,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestMatchRegionRetriever#testMultiFieldHighlights().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMultiFieldHighlights() throws IOException {\n    for (String[] fields :\n        new String[][]{\n            {FLD_TEXT_POS_OFFS1, FLD_TEXT_POS_OFFS2},\n            {FLD_TEXT_POS, FLD_TEXT_POS_OFFS2},\n            {FLD_TEXT_POS_OFFS1, FLD_TEXT_POS}\n        }) {\n      String field1 = fields[0];\n      String field2 = fields[1];\n      withReader(\n          List.of(\n              Map.of(\n                  field1, values(\"foo bar\", \"baz abc\"),\n                  field2, values(\"foo baz\", \"loo bar\"))),\n          reader -> {\n            String ordered =\n                Stream.of(fmt(\"(%s: '>baz< abc')\", field1), fmt(\"(%s: 'loo >bar<')\", field2))\n                    .sorted()\n                    .collect(Collectors.joining(\"\"));\n\n            assertThat(\n                highlights(\n                    reader,\n                    stdQueryParser.apply(field1 + \":baz\" + \" OR \" + field2 + \":bar\", field1)),\n                containsInAnyOrder(fmt(\"0: %s\", ordered)));\n          });\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"930e5c340e08514a7f57a54cf65e2f8f1f90c8f0","date":1599736633,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestMatchRegionRetriever#testMultiFieldHighlights().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestMatchRegionRetriever#testMultiFieldHighlights().mjava","sourceNew":"  @Test\n  public void testMultiFieldHighlights() throws IOException {\n    for (String[] fieldPairs :\n        new String[][]{\n            {FLD_TEXT_POS_OFFS1, FLD_TEXT_POS_OFFS2},\n            {FLD_TEXT_POS, FLD_TEXT_POS_OFFS2},\n            {FLD_TEXT_POS_OFFS1, FLD_TEXT_POS}\n        }) {\n      String field1 = fieldPairs[0];\n      String field2 = fieldPairs[1];\n\n      new IndexBuilder(this::toField)\n          .doc(fields -> {\n            fields.add(field1, \"foo bar\", \"baz abc\");\n            fields.add(field2, \"foo baz\", \"loo bar\");\n          })\n          .build(analyzer, reader -> {\n            String ordered =\n                Stream.of(fmt(\"(%s: '>baz< abc')\", field1), fmt(\"(%s: 'loo >bar<')\", field2))\n                    .sorted()\n                    .collect(Collectors.joining(\"\"));\n\n            assertThat(\n                highlights(\n                    reader,\n                    stdQueryParser.apply(field1 + \":baz\" + \" OR \" + field2 + \":bar\", field1)),\n                containsInAnyOrder(fmt(\"0: %s\", ordered)));\n          }\n      );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMultiFieldHighlights() throws IOException {\n    for (String[] fields :\n        new String[][]{\n            {FLD_TEXT_POS_OFFS1, FLD_TEXT_POS_OFFS2},\n            {FLD_TEXT_POS, FLD_TEXT_POS_OFFS2},\n            {FLD_TEXT_POS_OFFS1, FLD_TEXT_POS}\n        }) {\n      String field1 = fields[0];\n      String field2 = fields[1];\n      withReader(\n          List.of(\n              Map.of(\n                  field1, values(\"foo bar\", \"baz abc\"),\n                  field2, values(\"foo baz\", \"loo bar\"))),\n          reader -> {\n            String ordered =\n                Stream.of(fmt(\"(%s: '>baz< abc')\", field1), fmt(\"(%s: 'loo >bar<')\", field2))\n                    .sorted()\n                    .collect(Collectors.joining(\"\"));\n\n            assertThat(\n                highlights(\n                    reader,\n                    stdQueryParser.apply(field1 + \":baz\" + \" OR \" + field2 + \":bar\", field1)),\n                containsInAnyOrder(fmt(\"0: %s\", ordered)));\n          });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"930e5c340e08514a7f57a54cf65e2f8f1f90c8f0":["2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["930e5c340e08514a7f57a54cf65e2f8f1f90c8f0"]},"commit2Childs":{"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c":["930e5c340e08514a7f57a54cf65e2f8f1f90c8f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c"],"930e5c340e08514a7f57a54cf65e2f8f1f90c8f0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}