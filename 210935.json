{"path":"src/java/org/apache/solr/core/SolrResourceLoader#newAdminHandlerInstance(CoreContainer,String,String...).mjava","commits":[{"id":"64dd09b29d9d8046920d09defbc90ae1791c725d","date":1240554655,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrResourceLoader#newAdminHandlerInstance(CoreContainer,String,String...).mjava","pathOld":"/dev/null","sourceNew":"  public Object newAdminHandlerInstance(final CoreContainer coreContainer, String cname, String ... subpackages) {\n    Class clazz = findClass(cname,subpackages);\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Can not find class: \"+cname + \" in \" + classLoader, false);\n    }\n    \n    Object obj = null;\n    try {\n      Constructor ctor = clazz.getConstructor(CoreContainer.class);\n       obj = ctor.newInstance(coreContainer);\n    } \n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error instantiating class: '\" + clazz.getName()+\"'\", e, false );\n    }\n    //TODO: Does SolrCoreAware make sense here since in a multi-core context\n    // which core are we talking about ? \n    if( obj instanceof ResourceLoaderAware ) {\n      assertAwareCompatibility( ResourceLoaderAware.class, obj );\n      waitingForResources.add( (ResourceLoaderAware)obj );\n    }\n    return obj;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["48d548a14602be2584dd07e610109753923812e2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrResourceLoader#newAdminHandlerInstance(CoreContainer,String,String...).mjava","pathOld":"src/java/org/apache/solr/core/SolrResourceLoader#newAdminHandlerInstance(CoreContainer,String,String...).mjava","sourceNew":"  public Object newAdminHandlerInstance(final CoreContainer coreContainer, String cname, String ... subpackages) {\n    Class clazz = findClass(cname,subpackages);\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Can not find class: \"+cname + \" in \" + classLoader, false);\n    }\n    \n    Object obj = null;\n    try {\n      Constructor ctor = clazz.getConstructor(CoreContainer.class);\n       obj = ctor.newInstance(coreContainer);\n    } \n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error instantiating class: '\" + clazz.getName()+\"'\", e, false );\n    }\n    //TODO: Does SolrCoreAware make sense here since in a multi-core context\n    // which core are we talking about ? \n    if( obj instanceof ResourceLoaderAware ) {\n      assertAwareCompatibility( ResourceLoaderAware.class, obj );\n      waitingForResources.add( (ResourceLoaderAware)obj );\n    }\n    return obj;\n  }\n\n","sourceOld":"  public Object newAdminHandlerInstance(final CoreContainer coreContainer, String cname, String ... subpackages) {\n    Class clazz = findClass(cname,subpackages);\n    if( clazz == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Can not find class: \"+cname + \" in \" + classLoader, false);\n    }\n    \n    Object obj = null;\n    try {\n      Constructor ctor = clazz.getConstructor(CoreContainer.class);\n       obj = ctor.newInstance(coreContainer);\n    } \n    catch (Exception e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error instantiating class: '\" + clazz.getName()+\"'\", e, false );\n    }\n    //TODO: Does SolrCoreAware make sense here since in a multi-core context\n    // which core are we talking about ? \n    if( obj instanceof ResourceLoaderAware ) {\n      assertAwareCompatibility( ResourceLoaderAware.class, obj );\n      waitingForResources.add( (ResourceLoaderAware)obj );\n    }\n    return obj;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["64dd09b29d9d8046920d09defbc90ae1791c725d"],"64dd09b29d9d8046920d09defbc90ae1791c725d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["64dd09b29d9d8046920d09defbc90ae1791c725d"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"64dd09b29d9d8046920d09defbc90ae1791c725d":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}