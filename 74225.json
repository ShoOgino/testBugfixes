{"path":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#SolrRrdBackendFactory(SolrClient,String,int,TimeSource).mjava","commits":[{"id":"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","date":1527582939,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#SolrRrdBackendFactory(SolrClient,String,int,TimeSource).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a factory.\n   * @param solrClient SolrClient to use\n   * @param collection collection name where documents are stored (typically this is\n   *                   {@link CollectionAdminParams#SYSTEM_COLL})\n   * @param syncPeriod synchronization period in seconds - how often modified\n   *                   databases are stored as updated Solr documents\n   * @param timeSource time source\n   */\n  public SolrRrdBackendFactory(SolrClient solrClient, String collection, int syncPeriod, TimeSource timeSource) {\n    this.solrClient = solrClient;\n    this.timeSource = timeSource;\n    this.collection = collection;\n    this.syncPeriod = syncPeriod;\n    log.debug(\"Created \" + hashCode());\n    this.idPrefixLength = ID_PREFIX.length() + ID_SEP.length();\n    syncService = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(2,\n        new DefaultSolrThreadFactory(\"SolrRrdBackendFactory\"));\n    syncService.setRemoveOnCancelPolicy(true);\n    syncService.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    syncService.scheduleWithFixedDelay(() -> maybeSyncBackends(),\n        timeSource.convertDelay(TimeUnit.SECONDS, syncPeriod, TimeUnit.MILLISECONDS),\n        timeSource.convertDelay(TimeUnit.SECONDS, syncPeriod, TimeUnit.MILLISECONDS),\n        TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#SolrRrdBackendFactory(SolrClient,String,int,TimeSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#SolrRrdBackendFactory(SolrClient,String,int,TimeSource).mjava","sourceNew":"  /**\n   * Create a factory.\n   * @param solrClient SolrClient to use\n   * @param collection collection name where documents are stored (typically this is\n   *                   {@link CollectionAdminParams#SYSTEM_COLL})\n   * @param syncPeriod synchronization period in seconds - how often modified\n   *                   databases are stored as updated Solr documents\n   * @param timeSource time source\n   */\n  public SolrRrdBackendFactory(SolrClient solrClient, String collection, int syncPeriod, TimeSource timeSource) {\n    this.solrClient = solrClient;\n    this.timeSource = timeSource;\n    this.collection = collection;\n    this.syncPeriod = syncPeriod;\n    log.debug(\"Created \" + hashCode());\n    this.idPrefixLength = ID_PREFIX.length() + ID_SEP.length();\n    syncService = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(2,\n        new SolrNamedThreadFactory(\"SolrRrdBackendFactory\"));\n    syncService.setRemoveOnCancelPolicy(true);\n    syncService.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    syncService.scheduleWithFixedDelay(() -> maybeSyncBackends(),\n        timeSource.convertDelay(TimeUnit.SECONDS, syncPeriod, TimeUnit.MILLISECONDS),\n        timeSource.convertDelay(TimeUnit.SECONDS, syncPeriod, TimeUnit.MILLISECONDS),\n        TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  /**\n   * Create a factory.\n   * @param solrClient SolrClient to use\n   * @param collection collection name where documents are stored (typically this is\n   *                   {@link CollectionAdminParams#SYSTEM_COLL})\n   * @param syncPeriod synchronization period in seconds - how often modified\n   *                   databases are stored as updated Solr documents\n   * @param timeSource time source\n   */\n  public SolrRrdBackendFactory(SolrClient solrClient, String collection, int syncPeriod, TimeSource timeSource) {\n    this.solrClient = solrClient;\n    this.timeSource = timeSource;\n    this.collection = collection;\n    this.syncPeriod = syncPeriod;\n    log.debug(\"Created \" + hashCode());\n    this.idPrefixLength = ID_PREFIX.length() + ID_SEP.length();\n    syncService = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(2,\n        new DefaultSolrThreadFactory(\"SolrRrdBackendFactory\"));\n    syncService.setRemoveOnCancelPolicy(true);\n    syncService.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    syncService.scheduleWithFixedDelay(() -> maybeSyncBackends(),\n        timeSource.convertDelay(TimeUnit.SECONDS, syncPeriod, TimeUnit.MILLISECONDS),\n        timeSource.convertDelay(TimeUnit.SECONDS, syncPeriod, TimeUnit.MILLISECONDS),\n        TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#SolrRrdBackendFactory(SolrClient,String,int,TimeSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#SolrRrdBackendFactory(SolrClient,String,int,TimeSource).mjava","sourceNew":"  /**\n   * Create a factory.\n   * @param solrClient SolrClient to use\n   * @param collection collection name where documents are stored (typically this is\n   *                   {@link CollectionAdminParams#SYSTEM_COLL})\n   * @param syncPeriod synchronization period in seconds - how often modified\n   *                   databases are stored as updated Solr documents\n   * @param timeSource time source\n   */\n  public SolrRrdBackendFactory(SolrClient solrClient, String collection, int syncPeriod, TimeSource timeSource) {\n    this.solrClient = solrClient;\n    this.timeSource = timeSource;\n    this.collection = collection;\n    this.syncPeriod = syncPeriod;\n    if (log.isDebugEnabled()) {\n      log.debug(\"Created {}\", hashCode());\n    }\n    this.idPrefixLength = ID_PREFIX.length() + ID_SEP.length();\n    syncService = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(2,\n        new SolrNamedThreadFactory(\"SolrRrdBackendFactory\"));\n    syncService.setRemoveOnCancelPolicy(true);\n    syncService.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    syncService.scheduleWithFixedDelay(() -> maybeSyncBackends(),\n        timeSource.convertDelay(TimeUnit.SECONDS, syncPeriod, TimeUnit.MILLISECONDS),\n        timeSource.convertDelay(TimeUnit.SECONDS, syncPeriod, TimeUnit.MILLISECONDS),\n        TimeUnit.MILLISECONDS);\n  }\n\n","sourceOld":"  /**\n   * Create a factory.\n   * @param solrClient SolrClient to use\n   * @param collection collection name where documents are stored (typically this is\n   *                   {@link CollectionAdminParams#SYSTEM_COLL})\n   * @param syncPeriod synchronization period in seconds - how often modified\n   *                   databases are stored as updated Solr documents\n   * @param timeSource time source\n   */\n  public SolrRrdBackendFactory(SolrClient solrClient, String collection, int syncPeriod, TimeSource timeSource) {\n    this.solrClient = solrClient;\n    this.timeSource = timeSource;\n    this.collection = collection;\n    this.syncPeriod = syncPeriod;\n    log.debug(\"Created \" + hashCode());\n    this.idPrefixLength = ID_PREFIX.length() + ID_SEP.length();\n    syncService = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(2,\n        new SolrNamedThreadFactory(\"SolrRrdBackendFactory\"));\n    syncService.setRemoveOnCancelPolicy(true);\n    syncService.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n    syncService.scheduleWithFixedDelay(() -> maybeSyncBackends(),\n        timeSource.convertDelay(TimeUnit.SECONDS, syncPeriod, TimeUnit.MILLISECONDS),\n        timeSource.convertDelay(TimeUnit.SECONDS, syncPeriod, TimeUnit.MILLISECONDS),\n        TimeUnit.MILLISECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9df8125ba9193a2e2e285ed92157810b1952a244"],"9df8125ba9193a2e2e285ed92157810b1952a244":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"]},"commit2Childs":{"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["9df8125ba9193a2e2e285ed92157810b1952a244"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9df8125ba9193a2e2e285ed92157810b1952a244":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}