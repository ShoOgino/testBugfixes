{"path":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#addDocsRandomly().mjava","commits":[{"id":"cc9c42f0c1f89f2b3964f2d39efe57860e578838","date":1438774812,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF#addDocsRandomly().mjava","pathOld":"/dev/null","sourceNew":"  private void addDocsRandomly() throws IOException, SolrServerException {\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"cat\", \"football\");\n    solrCluster.getSolrClient().add(\"collection1\", doc);\n    solrCluster.getSolrClient().add(\"collection1_local\", doc);\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", 2);\n    doc.setField(\"cat\", \"football\");\n    solrCluster.getSolrClient().add(\"collection2\", doc);\n    solrCluster.getSolrClient().add(\"collection2_local\", doc);\n\n    int nDocs = TestUtil.nextInt(random(), 10, 100);\n    int collection1Count = 1;\n    int collection2Count = 1;\n    for (int i=0; i<nDocs; i++) {\n      doc = new SolrInputDocument();\n      doc.setField(\"id\", 3 + i);\n      String cat = TestUtil.randomSimpleString(random());\n      if (!cat.equals(\"football\")) { //Making sure no other document has the query term in it.\n        doc.setField(\"cat\", cat);\n        if (rarely()) { //Put most documents in collection2* so that 'football' becomes 'rare' in collection2*\n          solrCluster.getSolrClient().add(\"collection1\", doc);\n          solrCluster.getSolrClient().add(\"collection1_local\", doc);\n          collection1Count++;\n        } else {\n          solrCluster.getSolrClient().add(\"collection2\", doc);\n          solrCluster.getSolrClient().add(\"collection2_local\", doc);\n          collection2Count++;\n        }\n      }\n    }\n    log.info(\"numDocs={}. collection1Count={} collection2Count={}\", nDocs, collection1Count, collection2Count);\n\n    solrCluster.getSolrClient().commit(\"collection1\");\n    solrCluster.getSolrClient().commit(\"collection2\");\n    solrCluster.getSolrClient().commit(\"collection1_local\");\n    solrCluster.getSolrClient().commit(\"collection2_local\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc9c42f0c1f89f2b3964f2d39efe57860e578838":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cc9c42f0c1f89f2b3964f2d39efe57860e578838"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cc9c42f0c1f89f2b3964f2d39efe57860e578838"],"cc9c42f0c1f89f2b3964f2d39efe57860e578838":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}