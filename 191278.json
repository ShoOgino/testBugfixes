{"path":"lucene/src/java/org/apache/lucene/search/FieldComparator#setNextReader(AtomicReaderContext).mjava","commits":[{"id":"323f871ffe96b871d8c534a614be60751bb023c2","date":1294820532,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator#setNextReader(IndexReader,int).mjava","sourceNew":"  /**\n   * Set a new {@link AtomicReaderContext}. All subsequent docIDs are relative to\n   * the current reader (you must add docBase if you need to\n   * map it to a top-level docID).\n   * \n   * @param context current reader context\n   * @return the comparator to use for this segment; most\n   *   comparators can just return \"this\" to reuse the same\n   *   comparator across segments\n   * @throws IOException\n   * @throws IOException\n   */\n  public abstract FieldComparator setNextReader(AtomicReaderContext context) throws IOException;\n\n","sourceOld":"  /**\n   * Set a new Reader. All subsequent docIDs are relative to\n   * the current reader (you must add docBase if you need to\n   * map it to a top-level docID).\n   * \n   * @param reader current reader\n   * @param docBase docBase of this reader \n   * @return the comparator to use for this segment; most\n   *   comparators can just return \"this\" to reuse the same\n   *   comparator across segments\n   * @throws IOException\n   * @throws IOException\n   */\n  public abstract FieldComparator setNextReader(IndexReader reader, int docBase) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator#setNextReader(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set a new {@link AtomicReaderContext}. All subsequent docIDs are relative to\n   * the current reader (you must add docBase if you need to\n   * map it to a top-level docID).\n   * \n   * @param context current reader context\n   * @return the comparator to use for this segment; most\n   *   comparators can just return \"this\" to reuse the same\n   *   comparator across segments\n   * @throws IOException\n   * @throws IOException\n   */\n  public abstract FieldComparator setNextReader(AtomicReaderContext context) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator#setNextReader(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set a new {@link AtomicReaderContext}. All subsequent docIDs are relative to\n   * the current reader (you must add docBase if you need to\n   * map it to a top-level docID).\n   * \n   * @param context current reader context\n   * @return the comparator to use for this segment; most\n   *   comparators can just return \"this\" to reuse the same\n   *   comparator across segments\n   * @throws IOException\n   */\n  public abstract FieldComparator setNextReader(AtomicReaderContext context) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator#setNextReader(AtomicReaderContext).mjava","sourceNew":"  /**\n   * Set a new {@link AtomicReaderContext}. All subsequent docIDs are relative to\n   * the current reader (you must add docBase if you need to\n   * map it to a top-level docID).\n   * \n   * @param context current reader context\n   * @return the comparator to use for this segment; most\n   *   comparators can just return \"this\" to reuse the same\n   *   comparator across segments\n   * @throws IOException\n   */\n  public abstract FieldComparator setNextReader(AtomicReaderContext context) throws IOException;\n\n","sourceOld":"  /**\n   * Set a new {@link AtomicReaderContext}. All subsequent docIDs are relative to\n   * the current reader (you must add docBase if you need to\n   * map it to a top-level docID).\n   * \n   * @param context current reader context\n   * @return the comparator to use for this segment; most\n   *   comparators can just return \"this\" to reuse the same\n   *   comparator across segments\n   * @throws IOException\n   * @throws IOException\n   */\n  public abstract FieldComparator setNextReader(AtomicReaderContext context) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator#setNextReader(AtomicReaderContext).mjava","sourceNew":"  /**\n   * Set a new {@link AtomicReaderContext}. All subsequent docIDs are relative to\n   * the current reader (you must add docBase if you need to\n   * map it to a top-level docID).\n   * \n   * @param context current reader context\n   * @return the comparator to use for this segment; most\n   *   comparators can just return \"this\" to reuse the same\n   *   comparator across segments\n   * @throws IOException\n   */\n  public abstract FieldComparator setNextReader(AtomicReaderContext context) throws IOException;\n\n","sourceOld":"  /**\n   * Set a new {@link AtomicReaderContext}. All subsequent docIDs are relative to\n   * the current reader (you must add docBase if you need to\n   * map it to a top-level docID).\n   * \n   * @param context current reader context\n   * @return the comparator to use for this segment; most\n   *   comparators can just return \"this\" to reuse the same\n   *   comparator across segments\n   * @throws IOException\n   * @throws IOException\n   */\n  public abstract FieldComparator setNextReader(AtomicReaderContext context) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator#setNextReader(AtomicReaderContext).mjava","sourceNew":"  /**\n   * Set a new {@link AtomicReaderContext}. All subsequent docIDs are relative to\n   * the current reader (you must add docBase if you need to\n   * map it to a top-level docID).\n   * \n   * @param context current reader context\n   * @return the comparator to use for this segment; most\n   *   comparators can just return \"this\" to reuse the same\n   *   comparator across segments\n   * @throws IOException\n   */\n  public abstract FieldComparator setNextReader(AtomicReaderContext context) throws IOException;\n\n","sourceOld":"  /**\n   * Set a new {@link AtomicReaderContext}. All subsequent docIDs are relative to\n   * the current reader (you must add docBase if you need to\n   * map it to a top-level docID).\n   * \n   * @param context current reader context\n   * @return the comparator to use for this segment; most\n   *   comparators can just return \"this\" to reuse the same\n   *   comparator across segments\n   * @throws IOException\n   */\n  public abstract FieldComparator setNextReader(AtomicReaderContext context) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["323f871ffe96b871d8c534a614be60751bb023c2","2e8d7ba2175f47e280231533f7d3016249cea88b"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["323f871ffe96b871d8c534a614be60751bb023c2","29ef99d61cda9641b6250bf9567329a6e65f901d"],"323f871ffe96b871d8c534a614be60751bb023c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","323f871ffe96b871d8c534a614be60751bb023c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","323f871ffe96b871d8c534a614be60751bb023c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"323f871ffe96b871d8c534a614be60751bb023c2":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2e8d7ba2175f47e280231533f7d3016249cea88b","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["323f871ffe96b871d8c534a614be60751bb023c2","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}