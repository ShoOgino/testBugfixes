{"path":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.FieldsWriter#buildFieldsGroupMapping(Fields).mjava","commits":[{"id":"132f1575a9078b618f9e1c35ac94f06444006662","date":1475595294,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.FieldsWriter#buildFieldsGroupMapping(Fields).mjava","pathOld":"/dev/null","sourceNew":"    private Map<PostingsFormat, FieldsGroup> buildFieldsGroupMapping(Fields fields) {\n      // Maps a PostingsFormat instance to the suffix it\n      // should use\n      Map<PostingsFormat,FieldsGroup> formatToGroups = new HashMap<>();\n\n      // Holds last suffix of each PostingFormat name\n      Map<String,Integer> suffixes = new HashMap<>();\n\n      // Assign field -> PostingsFormat\n      for(String field : fields) {\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n\n        final PostingsFormat format = getPostingsFormatForField(field);\n  \n        if (format == null) {\n          throw new IllegalStateException(\"invalid null PostingsFormat for field=\\\"\" + field + \"\\\"\");\n        }\n        String formatName = format.getName();\n      \n        FieldsGroup group = formatToGroups.get(format);\n        if (group == null) {\n          // First time we are seeing this format; create a\n          // new instance\n\n          // bump the suffix\n          Integer suffix = suffixes.get(formatName);\n          if (suffix == null) {\n            suffix = 0;\n          } else {\n            suffix = suffix + 1;\n          }\n          suffixes.put(formatName, suffix);\n\n          String segmentSuffix = getFullSegmentSuffix(field,\n                                                      writeState.segmentSuffix,\n                                                      getSuffix(formatName, Integer.toString(suffix)));\n          group = new FieldsGroup();\n          group.state = new SegmentWriteState(writeState, segmentSuffix);\n          group.suffix = suffix;\n          formatToGroups.put(format, group);\n        } else {\n          // we've already seen this format, so just grab its suffix\n          if (!suffixes.containsKey(formatName)) {\n            throw new IllegalStateException(\"no suffix for format name: \" + formatName + \", expected: \" + group.suffix);\n          }\n        }\n\n        group.fields.add(field);\n\n        String previousValue = fieldInfo.putAttribute(PER_FIELD_FORMAT_KEY, formatName);\n        if (previousValue != null) {\n          throw new IllegalStateException(\"found existing value for \" + PER_FIELD_FORMAT_KEY + \n                                          \", field=\" + fieldInfo.name + \", old=\" + previousValue + \", new=\" + formatName);\n        }\n\n        previousValue = fieldInfo.putAttribute(PER_FIELD_SUFFIX_KEY, Integer.toString(group.suffix));\n        if (previousValue != null) {\n          throw new IllegalStateException(\"found existing value for \" + PER_FIELD_SUFFIX_KEY + \n                                          \", field=\" + fieldInfo.name + \", old=\" + previousValue + \", new=\" + group.suffix);\n        }\n      }\n      return formatToGroups;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.FieldsWriter#buildFieldsGroupMapping(Fields).mjava","pathOld":"/dev/null","sourceNew":"    private Map<PostingsFormat, FieldsGroup> buildFieldsGroupMapping(Fields fields) {\n      // Maps a PostingsFormat instance to the suffix it\n      // should use\n      Map<PostingsFormat,FieldsGroup> formatToGroups = new HashMap<>();\n\n      // Holds last suffix of each PostingFormat name\n      Map<String,Integer> suffixes = new HashMap<>();\n\n      // Assign field -> PostingsFormat\n      for(String field : fields) {\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n\n        final PostingsFormat format = getPostingsFormatForField(field);\n  \n        if (format == null) {\n          throw new IllegalStateException(\"invalid null PostingsFormat for field=\\\"\" + field + \"\\\"\");\n        }\n        String formatName = format.getName();\n      \n        FieldsGroup group = formatToGroups.get(format);\n        if (group == null) {\n          // First time we are seeing this format; create a\n          // new instance\n\n          // bump the suffix\n          Integer suffix = suffixes.get(formatName);\n          if (suffix == null) {\n            suffix = 0;\n          } else {\n            suffix = suffix + 1;\n          }\n          suffixes.put(formatName, suffix);\n\n          String segmentSuffix = getFullSegmentSuffix(field,\n                                                      writeState.segmentSuffix,\n                                                      getSuffix(formatName, Integer.toString(suffix)));\n          group = new FieldsGroup();\n          group.state = new SegmentWriteState(writeState, segmentSuffix);\n          group.suffix = suffix;\n          formatToGroups.put(format, group);\n        } else {\n          // we've already seen this format, so just grab its suffix\n          if (!suffixes.containsKey(formatName)) {\n            throw new IllegalStateException(\"no suffix for format name: \" + formatName + \", expected: \" + group.suffix);\n          }\n        }\n\n        group.fields.add(field);\n\n        String previousValue = fieldInfo.putAttribute(PER_FIELD_FORMAT_KEY, formatName);\n        if (previousValue != null) {\n          throw new IllegalStateException(\"found existing value for \" + PER_FIELD_FORMAT_KEY + \n                                          \", field=\" + fieldInfo.name + \", old=\" + previousValue + \", new=\" + formatName);\n        }\n\n        previousValue = fieldInfo.putAttribute(PER_FIELD_SUFFIX_KEY, Integer.toString(group.suffix));\n        if (previousValue != null) {\n          throw new IllegalStateException(\"found existing value for \" + PER_FIELD_SUFFIX_KEY + \n                                          \", field=\" + fieldInfo.name + \", old=\" + previousValue + \", new=\" + group.suffix);\n        }\n      }\n      return formatToGroups;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7","date":1538404752,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.FieldsWriter#buildFieldsGroupMapping(Iterable[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.FieldsWriter#buildFieldsGroupMapping(Fields).mjava","sourceNew":"    private Map<PostingsFormat, FieldsGroup> buildFieldsGroupMapping(Iterable<String> indexedFieldNames) {\n      // Maps a PostingsFormat instance to the suffix it\n      // should use\n      Map<PostingsFormat,FieldsGroup> formatToGroups = new HashMap<>();\n\n      // Holds last suffix of each PostingFormat name\n      Map<String,Integer> suffixes = new HashMap<>();\n\n      // Assign field -> PostingsFormat\n      for(String field : indexedFieldNames) {\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n\n        final PostingsFormat format = getPostingsFormatForField(field);\n  \n        if (format == null) {\n          throw new IllegalStateException(\"invalid null PostingsFormat for field=\\\"\" + field + \"\\\"\");\n        }\n        String formatName = format.getName();\n      \n        FieldsGroup group = formatToGroups.get(format);\n        if (group == null) {\n          // First time we are seeing this format; create a\n          // new instance\n\n          // bump the suffix\n          Integer suffix = suffixes.get(formatName);\n          if (suffix == null) {\n            suffix = 0;\n          } else {\n            suffix = suffix + 1;\n          }\n          suffixes.put(formatName, suffix);\n\n          String segmentSuffix = getFullSegmentSuffix(field,\n                                                      writeState.segmentSuffix,\n                                                      getSuffix(formatName, Integer.toString(suffix)));\n          group = new FieldsGroup();\n          group.state = new SegmentWriteState(writeState, segmentSuffix);\n          group.suffix = suffix;\n          formatToGroups.put(format, group);\n        } else {\n          // we've already seen this format, so just grab its suffix\n          if (!suffixes.containsKey(formatName)) {\n            throw new IllegalStateException(\"no suffix for format name: \" + formatName + \", expected: \" + group.suffix);\n          }\n        }\n\n        group.fields.add(field);\n\n        String previousValue = fieldInfo.putAttribute(PER_FIELD_FORMAT_KEY, formatName);\n        if (previousValue != null) {\n          throw new IllegalStateException(\"found existing value for \" + PER_FIELD_FORMAT_KEY + \n                                          \", field=\" + fieldInfo.name + \", old=\" + previousValue + \", new=\" + formatName);\n        }\n\n        previousValue = fieldInfo.putAttribute(PER_FIELD_SUFFIX_KEY, Integer.toString(group.suffix));\n        if (previousValue != null) {\n          throw new IllegalStateException(\"found existing value for \" + PER_FIELD_SUFFIX_KEY + \n                                          \", field=\" + fieldInfo.name + \", old=\" + previousValue + \", new=\" + group.suffix);\n        }\n      }\n      return formatToGroups;\n    }\n\n","sourceOld":"    private Map<PostingsFormat, FieldsGroup> buildFieldsGroupMapping(Fields fields) {\n      // Maps a PostingsFormat instance to the suffix it\n      // should use\n      Map<PostingsFormat,FieldsGroup> formatToGroups = new HashMap<>();\n\n      // Holds last suffix of each PostingFormat name\n      Map<String,Integer> suffixes = new HashMap<>();\n\n      // Assign field -> PostingsFormat\n      for(String field : fields) {\n        FieldInfo fieldInfo = writeState.fieldInfos.fieldInfo(field);\n\n        final PostingsFormat format = getPostingsFormatForField(field);\n  \n        if (format == null) {\n          throw new IllegalStateException(\"invalid null PostingsFormat for field=\\\"\" + field + \"\\\"\");\n        }\n        String formatName = format.getName();\n      \n        FieldsGroup group = formatToGroups.get(format);\n        if (group == null) {\n          // First time we are seeing this format; create a\n          // new instance\n\n          // bump the suffix\n          Integer suffix = suffixes.get(formatName);\n          if (suffix == null) {\n            suffix = 0;\n          } else {\n            suffix = suffix + 1;\n          }\n          suffixes.put(formatName, suffix);\n\n          String segmentSuffix = getFullSegmentSuffix(field,\n                                                      writeState.segmentSuffix,\n                                                      getSuffix(formatName, Integer.toString(suffix)));\n          group = new FieldsGroup();\n          group.state = new SegmentWriteState(writeState, segmentSuffix);\n          group.suffix = suffix;\n          formatToGroups.put(format, group);\n        } else {\n          // we've already seen this format, so just grab its suffix\n          if (!suffixes.containsKey(formatName)) {\n            throw new IllegalStateException(\"no suffix for format name: \" + formatName + \", expected: \" + group.suffix);\n          }\n        }\n\n        group.fields.add(field);\n\n        String previousValue = fieldInfo.putAttribute(PER_FIELD_FORMAT_KEY, formatName);\n        if (previousValue != null) {\n          throw new IllegalStateException(\"found existing value for \" + PER_FIELD_FORMAT_KEY + \n                                          \", field=\" + fieldInfo.name + \", old=\" + previousValue + \", new=\" + formatName);\n        }\n\n        previousValue = fieldInfo.putAttribute(PER_FIELD_SUFFIX_KEY, Integer.toString(group.suffix));\n        if (previousValue != null) {\n          throw new IllegalStateException(\"found existing value for \" + PER_FIELD_SUFFIX_KEY + \n                                          \", field=\" + fieldInfo.name + \", old=\" + previousValue + \", new=\" + group.suffix);\n        }\n      }\n      return formatToGroups;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"132f1575a9078b618f9e1c35ac94f06444006662":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7":["132f1575a9078b618f9e1c35ac94f06444006662"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","132f1575a9078b618f9e1c35ac94f06444006662"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7"]},"commit2Childs":{"132f1575a9078b618f9e1c35ac94f06444006662":["9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["132f1575a9078b618f9e1c35ac94f06444006662","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}