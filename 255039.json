{"path":"backwards/src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testGeneral().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testGeneral().mjava","pathOld":"/dev/null","sourceNew":"  public void testGeneral() throws IOException {\n    final TeeSinkTokenFilter source = new TeeSinkTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())));\n    final TokenStream sink1 = source.newSinkTokenStream();\n    final TokenStream sink2 = source.newSinkTokenStream(theFilter);\n    int i = 0;\n    TermAttribute termAtt = source.getAttribute(TermAttribute.class);\n    while (source.incrementToken()) {\n      assertEquals(tokens1[i], termAtt.term());\n      i++;\n    }\n    assertEquals(tokens1.length, i);\n    \n    i = 0;\n    termAtt = sink1.getAttribute(TermAttribute.class);\n    while (sink1.incrementToken()) {\n      assertEquals(tokens1[i], termAtt.term());\n      i++;\n    }\n    assertEquals(tokens1.length, i);\n    \n    i = 0;\n    termAtt = sink2.getAttribute(TermAttribute.class);\n    while (sink2.incrementToken()) {\n      assertTrue(termAtt.term().equalsIgnoreCase(\"The\"));\n      i++;\n    }\n    assertEquals(\"there should be two times 'the' in the stream\", 2, i);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testGeneral().mjava","pathOld":"backwards/src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#testGeneral().mjava","sourceNew":"  public void testGeneral() throws IOException {\n    final TeeSinkTokenFilter source = new TeeSinkTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())));\n    final TokenStream sink1 = source.newSinkTokenStream();\n    final TokenStream sink2 = source.newSinkTokenStream(theFilter);\n    int i = 0;\n    TermAttribute termAtt = source.getAttribute(TermAttribute.class);\n    while (source.incrementToken()) {\n      assertEquals(tokens1[i], termAtt.term());\n      i++;\n    }\n    assertEquals(tokens1.length, i);\n    \n    i = 0;\n    termAtt = sink1.getAttribute(TermAttribute.class);\n    while (sink1.incrementToken()) {\n      assertEquals(tokens1[i], termAtt.term());\n      i++;\n    }\n    assertEquals(tokens1.length, i);\n    \n    i = 0;\n    termAtt = sink2.getAttribute(TermAttribute.class);\n    while (sink2.incrementToken()) {\n      assertTrue(termAtt.term().equalsIgnoreCase(\"The\"));\n      i++;\n    }\n    assertEquals(\"there should be two times 'the' in the stream\", 2, i);\n  }\n\n","sourceOld":"  public void testGeneral() throws IOException {\n    final TeeSinkTokenFilter source = new TeeSinkTokenFilter(new WhitespaceTokenizer(new StringReader(buffer1.toString())));\n    final TokenStream sink1 = source.newSinkTokenStream();\n    final TokenStream sink2 = source.newSinkTokenStream(theFilter);\n    int i = 0;\n    TermAttribute termAtt = source.getAttribute(TermAttribute.class);\n    while (source.incrementToken()) {\n      assertEquals(tokens1[i], termAtt.term());\n      i++;\n    }\n    assertEquals(tokens1.length, i);\n    \n    i = 0;\n    termAtt = sink1.getAttribute(TermAttribute.class);\n    while (sink1.incrementToken()) {\n      assertEquals(tokens1[i], termAtt.term());\n      i++;\n    }\n    assertEquals(tokens1.length, i);\n    \n    i = 0;\n    termAtt = sink2.getAttribute(TermAttribute.class);\n    while (sink2.incrementToken()) {\n      assertTrue(termAtt.term().equalsIgnoreCase(\"The\"));\n      i++;\n    }\n    assertEquals(\"there should be two times 'the' in the stream\", 2, i);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}