{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createTokenStream(Shape,int).mjava","commits":[{"id":"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6","date":1397789149,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createTokenStream(Shape,int).mjava","pathOld":"/dev/null","sourceNew":"  protected CellTokenStream createTokenStream(Shape shape, int detailLevel) {\n    Iterator<Cell> cells = grid.getTreeCellIterator(shape, detailLevel);\n    return new CellTokenStream().setCells(cells);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed4b7e3122231169a256f3d2b2c0dcf50f708ba0","date":1397823899,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createTokenStream(Shape,int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createTokenStream(Shape,int).mjava","sourceNew":"  protected TokenStream createTokenStream(Shape shape, int detailLevel) {\n    Iterator<Cell> cells = grid.getTreeCellIterator(shape, detailLevel);\n    return new CellTokenStream().setCells(cells);\n  }\n\n","sourceOld":"  protected CellTokenStream createTokenStream(Shape shape, int detailLevel) {\n    Iterator<Cell> cells = grid.getTreeCellIterator(shape, detailLevel);\n    return new CellTokenStream().setCells(cells);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2eac2ea580938d5a0741b09b15fe7edfd99199e","date":1421337567,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createTokenStream(Shape,int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createTokenStream(Shape,int).mjava","sourceNew":"  protected TokenStream createTokenStream(Shape shape, int detailLevel) {\n    if (pointsOnly && shape instanceof Point) {\n      throw new IllegalArgumentException(\"pointsOnly is true yet a point is given for indexing\");\n    }\n    Iterator<Cell> cells = grid.getTreeCellIterator(shape, detailLevel);\n    return new CellTokenStream().setCells(cells);\n  }\n\n","sourceOld":"  protected TokenStream createTokenStream(Shape shape, int detailLevel) {\n    Iterator<Cell> cells = grid.getTreeCellIterator(shape, detailLevel);\n    return new CellTokenStream().setCells(cells);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08d66351e38e2caff4121a3751e5d8662a9890d2","date":1421687814,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createTokenStream(Shape,int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createTokenStream(Shape,int).mjava","sourceNew":"  protected TokenStream createTokenStream(Shape shape, int detailLevel) {\n    if (pointsOnly && !(shape instanceof Point)) {\n      throw new IllegalArgumentException(\"pointsOnly is true yet a \" + shape.getClass() + \" is given for indexing\");\n    }\n    Iterator<Cell> cells = grid.getTreeCellIterator(shape, detailLevel);\n    return new CellTokenStream().setCells(cells);\n  }\n\n","sourceOld":"  protected TokenStream createTokenStream(Shape shape, int detailLevel) {\n    if (pointsOnly && shape instanceof Point) {\n      throw new IllegalArgumentException(\"pointsOnly is true yet a point is given for indexing\");\n    }\n    Iterator<Cell> cells = grid.getTreeCellIterator(shape, detailLevel);\n    return new CellTokenStream().setCells(cells);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0","date":1426015524,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createCellIteratorToIndex(Shape,int,Iterator[Cell]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createTokenStream(Shape,int).mjava","sourceNew":"  protected Iterator<Cell> createCellIteratorToIndex(Shape shape, int detailLevel, Iterator<Cell> reuse) {\n    if (pointsOnly && !(shape instanceof Point)) {\n      throw new IllegalArgumentException(\"pointsOnly is true yet a \" + shape.getClass() + \" is given for indexing\");\n    }\n    return grid.getTreeCellIterator(shape, detailLevel);//TODO should take a re-use iterator\n  }\n\n","sourceOld":"  protected TokenStream createTokenStream(Shape shape, int detailLevel) {\n    if (pointsOnly && !(shape instanceof Point)) {\n      throw new IllegalArgumentException(\"pointsOnly is true yet a \" + shape.getClass() + \" is given for indexing\");\n    }\n    Iterator<Cell> cells = grid.getTreeCellIterator(shape, detailLevel);\n    return new CellTokenStream().setCells(cells);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeStrategy#createTokenStream(Shape,int).mjava","sourceNew":null,"sourceOld":"  protected TokenStream createTokenStream(Shape shape, int detailLevel) {\n    if (pointsOnly && !(shape instanceof Point)) {\n      throw new IllegalArgumentException(\"pointsOnly is true yet a \" + shape.getClass() + \" is given for indexing\");\n    }\n    Iterator<Cell> cells = grid.getTreeCellIterator(shape, detailLevel);\n    return new CellTokenStream().setCells(cells);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2eac2ea580938d5a0741b09b15fe7edfd99199e":["ed4b7e3122231169a256f3d2b2c0dcf50f708ba0"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["08d66351e38e2caff4121a3751e5d8662a9890d2","11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"08d66351e38e2caff4121a3751e5d8662a9890d2":["d2eac2ea580938d5a0741b09b15fe7edfd99199e"],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0":["08d66351e38e2caff4121a3751e5d8662a9890d2"],"ed4b7e3122231169a256f3d2b2c0dcf50f708ba0":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"]},"commit2Childs":{"d2eac2ea580938d5a0741b09b15fe7edfd99199e":["08d66351e38e2caff4121a3751e5d8662a9890d2"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"08d66351e38e2caff4121a3751e5d8662a9890d2":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["ed4b7e3122231169a256f3d2b2c0dcf50f708ba0"],"ed4b7e3122231169a256f3d2b2c0dcf50f708ba0":["d2eac2ea580938d5a0741b09b15fe7edfd99199e"],"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}