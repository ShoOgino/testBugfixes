{"path":"src/java/org/apache/lucene/document/Field#Field(String,byte[],int,int).mjava","commits":[{"id":"3f16ad31b2a8f005ac68e5a48dbed0e0aad0d4a2","date":1261491902,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,byte[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a stored field with binary value. Optionally the value may be compressed.\n   * \n   * @param name The name of the field\n   * @param value The binary value\n   * @param offset Starting offset in value where this Field's bytes are\n   * @param length Number of bytes to use for this Field, starting at offset\n   */\n  public Field(String name, byte[] value, int offset, int length) {\n\n    if (name == null)\n      throw new IllegalArgumentException(\"name cannot be null\");\n    if (value == null)\n      throw new IllegalArgumentException(\"value cannot be null\");\n    \n    this.name = StringHelper.intern(name);        // field names are interned\n    fieldsData = value;\n    \n    isStored = true;\n    isIndexed   = false;\n    isTokenized = false;\n    omitTermFreqAndPositions = false;\n    omitNorms = true;\n    \n    isBinary    = true;\n    binaryLength = length;\n    binaryOffset = offset;\n    \n    setStoreTermVector(TermVector.NO);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/Field#Field(String,byte[],int,int).mjava","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,byte[],int,int).mjava","sourceNew":"  /**\n   * Create a stored field with binary value. Optionally the value may be compressed.\n   * \n   * @param name The name of the field\n   * @param value The binary value\n   * @param offset Starting offset in value where this Field's bytes are\n   * @param length Number of bytes to use for this Field, starting at offset\n   */\n  public Field(String name, byte[] value, int offset, int length) {\n\n    if (name == null)\n      throw new IllegalArgumentException(\"name cannot be null\");\n    if (value == null)\n      throw new IllegalArgumentException(\"value cannot be null\");\n    \n    this.name = StringHelper.intern(name);        // field names are interned\n    fieldsData = value;\n    \n    isStored = true;\n    isIndexed   = false;\n    isTokenized = false;\n    omitTermFreqAndPositions = false;\n    omitNorms = true;\n    \n    isBinary    = true;\n    binaryLength = length;\n    binaryOffset = offset;\n    \n    setStoreTermVector(TermVector.NO);\n  }\n\n","sourceOld":"  /**\n   * Create a stored field with binary value. Optionally the value may be compressed.\n   * \n   * @param name The name of the field\n   * @param value The binary value\n   * @param offset Starting offset in value where this Field's bytes are\n   * @param length Number of bytes to use for this Field, starting at offset\n   */\n  public Field(String name, byte[] value, int offset, int length) {\n\n    if (name == null)\n      throw new IllegalArgumentException(\"name cannot be null\");\n    if (value == null)\n      throw new IllegalArgumentException(\"value cannot be null\");\n    \n    this.name = StringHelper.intern(name);        // field names are interned\n    fieldsData = value;\n    \n    isStored = true;\n    isIndexed   = false;\n    isTokenized = false;\n    omitTermFreqAndPositions = false;\n    omitNorms = true;\n    \n    isBinary    = true;\n    binaryLength = length;\n    binaryOffset = offset;\n    \n    setStoreTermVector(TermVector.NO);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f16ad31b2a8f005ac68e5a48dbed0e0aad0d4a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3f16ad31b2a8f005ac68e5a48dbed0e0aad0d4a2"]},"commit2Childs":{"3f16ad31b2a8f005ac68e5a48dbed0e0aad0d4a2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f16ad31b2a8f005ac68e5a48dbed0e0aad0d4a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}