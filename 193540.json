{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest#testUnigrams().mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest#testUnigrams().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest#testUnigrams().mjava","sourceNew":"    public void testUnigrams() throws Exception {\n        NGramTokenizer tokenizer = new NGramTokenizer(input, 1, 1);\n        \n        final Token reusableToken = new Token();\n        for (Token nextToken = tokenizer.next(reusableToken); nextToken != null; nextToken = tokenizer.next(reusableToken)) {\n          tokens.add(nextToken.toString());\n//        System.out.println(token.term());\n//        System.out.println(token);\n//        Thread.sleep(1000);\n      }\n\n        assertEquals(5, tokens.size());\n        ArrayList exp = new ArrayList();\n        exp.add(\"(a,0,1)\"); exp.add(\"(b,1,2)\"); exp.add(\"(c,2,3)\"); exp.add(\"(d,3,4)\"); exp.add(\"(e,4,5)\");\n        assertEquals(exp, tokens);\n    }\n\n","sourceOld":"    public void testUnigrams() throws Exception {\n        NGramTokenizer tokenizer = new NGramTokenizer(input, 1, 1);\n        \n        final Token reusableToken = new Token();\n        for (Token nextToken = tokenizer.next(reusableToken); nextToken != null; nextToken = tokenizer.next(reusableToken)) {\n          tokens.add(nextToken.toString());\n//        System.out.println(token.term());\n//        System.out.println(token);\n//        Thread.sleep(1000);\n      }\n\n        assertEquals(5, tokens.size());\n        ArrayList exp = new ArrayList();\n        exp.add(\"(a,0,1)\"); exp.add(\"(b,1,2)\"); exp.add(\"(c,2,3)\"); exp.add(\"(d,3,4)\"); exp.add(\"(e,4,5)\");\n        assertEquals(exp, tokens);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest#testUnigrams().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest#testUnigrams().mjava","sourceNew":"    public void testUnigrams() throws Exception {\n        NGramTokenizer tokenizer = new NGramTokenizer(input, 1, 1);\n        \n        String[] exp = new String[] {\n            \"(a,0,1)\", \"(b,1,2)\", \"(c,2,3)\", \"(d,3,4)\", \"(e,4,5)\"\n          };\n          \n        checkStream(tokenizer, exp);\n    }\n\n","sourceOld":"    public void testUnigrams() throws Exception {\n        NGramTokenizer tokenizer = new NGramTokenizer(input, 1, 1);\n        \n        final Token reusableToken = new Token();\n        for (Token nextToken = tokenizer.next(reusableToken); nextToken != null; nextToken = tokenizer.next(reusableToken)) {\n          tokens.add(nextToken.toString());\n//        System.out.println(token.term());\n//        System.out.println(token);\n//        Thread.sleep(1000);\n      }\n\n        assertEquals(5, tokens.size());\n        ArrayList exp = new ArrayList();\n        exp.add(\"(a,0,1)\"); exp.add(\"(b,1,2)\"); exp.add(\"(c,2,3)\"); exp.add(\"(d,3,4)\"); exp.add(\"(e,4,5)\");\n        assertEquals(exp, tokens);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc","date":1251117853,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest#testUnigrams().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest#testUnigrams().mjava","sourceNew":"    public void testUnigrams() throws Exception {\n        NGramTokenizer tokenizer = new NGramTokenizer(input, 1, 1);\n        assertTokenStreamContents(tokenizer, new String[]{\"a\",\"b\",\"c\",\"d\",\"e\"}, new int[]{0,1,2,3,4}, new int[]{1,2,3,4,5});\n    }\n\n","sourceOld":"    public void testUnigrams() throws Exception {\n        NGramTokenizer tokenizer = new NGramTokenizer(input, 1, 1);\n        \n        String[] exp = new String[] {\n            \"(a,0,1)\", \"(b,1,2)\", \"(c,2,3)\", \"(d,3,4)\", \"(e,4,5)\"\n          };\n          \n        checkStream(tokenizer, exp);\n    }\n\n","bugFix":null,"bugIntro":["e64a71406348a5942a2166256238aff8313d0914"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e64a71406348a5942a2166256238aff8313d0914","date":1263756357,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest#testUnigrams().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest#testUnigrams().mjava","sourceNew":"    public void testUnigrams() throws Exception {\n        NGramTokenizer tokenizer = new NGramTokenizer(input, 1, 1);\n        assertTokenStreamContents(tokenizer, new String[]{\"a\",\"b\",\"c\",\"d\",\"e\"}, new int[]{0,1,2,3,4}, new int[]{1,2,3,4,5}, 5 /* abcde */);\n    }\n\n","sourceOld":"    public void testUnigrams() throws Exception {\n        NGramTokenizer tokenizer = new NGramTokenizer(input, 1, 1);\n        assertTokenStreamContents(tokenizer, new String[]{\"a\",\"b\",\"c\",\"d\",\"e\"}, new int[]{0,1,2,3,4}, new int[]{1,2,3,4,5});\n    }\n\n","bugFix":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest#testUnigrams().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest#testUnigrams().mjava","sourceNew":"    public void testUnigrams() throws Exception {\n        NGramTokenizer tokenizer = new NGramTokenizer(input, 1, 1);\n        assertTokenStreamContents(tokenizer, new String[]{\"a\",\"b\",\"c\",\"d\",\"e\"}, new int[]{0,1,2,3,4}, new int[]{1,2,3,4,5}, 5 /* abcde */);\n    }\n\n","sourceOld":"    public void testUnigrams() throws Exception {\n        NGramTokenizer tokenizer = new NGramTokenizer(input, 1, 1);\n        assertTokenStreamContents(tokenizer, new String[]{\"a\",\"b\",\"c\",\"d\",\"e\"}, new int[]{0,1,2,3,4}, new int[]{1,2,3,4,5}, 5 /* abcde */);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e64a71406348a5942a2166256238aff8313d0914":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e64a71406348a5942a2166256238aff8313d0914"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"e64a71406348a5942a2166256238aff8313d0914":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["e64a71406348a5942a2166256238aff8313d0914"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}