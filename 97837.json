{"path":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","commits":[{"id":"9ca3876d7ad90122420134007bec508c30af5a18","date":1302308866,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"/dev/null","sourceNew":"  public void testLongPostings() throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(new File(LuceneTestCase.TEMP_DIR, \"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = (int) ((TEST_NIGHTLY ? 4e6 : (RANDOM_MULTIPLIER*2e4)) * (1+random.nextDouble()));\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final OpenBitSet isS1 = new OpenBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3741149a89925c02f14dbeef8365b896798d91fc","fdbabcdfbf0ec1640188c28570cd54fd30440942"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(new File(LuceneTestCase.TEMP_DIR, \"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = (int) ((TEST_NIGHTLY ? 4e6 : (RANDOM_MULTIPLIER*2e4)) * (1+random.nextDouble()));\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final OpenBitSet isS1 = new OpenBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(new File(LuceneTestCase.TEMP_DIR, \"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = (int) ((TEST_NIGHTLY ? 4e6 : (RANDOM_MULTIPLIER*2e4)) * (1+random.nextDouble()));\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final OpenBitSet isS1 = new OpenBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"/dev/null","sourceNew":"  public void testLongPostings() throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(new File(LuceneTestCase.TEMP_DIR, \"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = (int) ((TEST_NIGHTLY ? 4e6 : (RANDOM_MULTIPLIER*2e4)) * (1+random.nextDouble()));\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final OpenBitSet isS1 = new OpenBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3741149a89925c02f14dbeef8365b896798d91fc","date":1303483574,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = (int) ((TEST_NIGHTLY ? 4e6 : (RANDOM_MULTIPLIER*2e4)) * (1+random.nextDouble()));\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final OpenBitSet isS1 = new OpenBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(new File(LuceneTestCase.TEMP_DIR, \"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = (int) ((TEST_NIGHTLY ? 4e6 : (RANDOM_MULTIPLIER*2e4)) * (1+random.nextDouble()));\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final OpenBitSet isS1 = new OpenBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["9ca3876d7ad90122420134007bec508c30af5a18"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = (int) ((TEST_NIGHTLY ? 4e6 : (RANDOM_MULTIPLIER*2e4)) * (1+random.nextDouble()));\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final OpenBitSet isS1 = new OpenBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(new File(LuceneTestCase.TEMP_DIR, \"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = (int) ((TEST_NIGHTLY ? 4e6 : (RANDOM_MULTIPLIER*2e4)) * (1+random.nextDouble()));\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final OpenBitSet isS1 = new OpenBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"/dev/null","sourceNew":"  public void testLongPostings() throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = (int) ((TEST_NIGHTLY ? 4e6 : (RANDOM_MULTIPLIER*2e4)) * (1+random.nextDouble()));\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final OpenBitSet isS1 = new OpenBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"/dev/null","sourceNew":"  public void testLongPostings() throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = (int) ((TEST_NIGHTLY ? 4e6 : (RANDOM_MULTIPLIER*2e4)) * (1+random.nextDouble()));\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final OpenBitSet isS1 = new OpenBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = (int) ((TEST_NIGHTLY ? 4e6 : (RANDOM_MULTIPLIER*2e3)) * (1+random.nextDouble()));\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final OpenBitSet isS1 = new OpenBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = (int) ((TEST_NIGHTLY ? 4e6 : (RANDOM_MULTIPLIER*2e4)) * (1+random.nextDouble()));\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final OpenBitSet isS1 = new OpenBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = (int) ((TEST_NIGHTLY ? 4e6 : (RANDOM_MULTIPLIER*2e3)) * (1+random.nextDouble()));\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final OpenBitSet isS1 = new OpenBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = (int) ((TEST_NIGHTLY ? 4e6 : (RANDOM_MULTIPLIER*2e4)) * (1+random.nextDouble()));\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final OpenBitSet isS1 = new OpenBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final OpenBitSet isS1 = new OpenBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = (int) ((TEST_NIGHTLY ? 4e6 : (RANDOM_MULTIPLIER*2e3)) * (1+random.nextDouble()));\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final OpenBitSet isS1 = new OpenBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final OpenBitSet isS1 = new OpenBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = (int) ((TEST_NIGHTLY ? 4e6 : (RANDOM_MULTIPLIER*2e4)) * (1+random.nextDouble()));\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final OpenBitSet isS1 = new OpenBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final OpenBitSet isS1 = new OpenBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = (int) ((TEST_NIGHTLY ? 4e6 : (RANDOM_MULTIPLIER*2e3)) * (1+random.nextDouble()));\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final OpenBitSet isS1 = new OpenBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc","date":1308411958,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n    assumeFalse(\"Too slow with Memory codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"Memory\"));\n\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final OpenBitSet isS1 = new OpenBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final OpenBitSet isS1 = new OpenBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","date":1308439813,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n    assumeFalse(\"Too slow with Memory codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"Memory\"));\n\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final OpenBitSet isS1 = new OpenBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final OpenBitSet isS1 = new OpenBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","date":1310403131,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n    assumeFalse(\"Too slow with Memory codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"Memory\"));\n\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n    assumeFalse(\"Too slow with Memory codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"Memory\"));\n\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final OpenBitSet isS1 = new OpenBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec at night\", TEST_NIGHTLY && CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n    assumeFalse(\"Too slow with Memory codec at night\", TEST_NIGHTLY && CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"Memory\"));\n\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n    assumeFalse(\"Too slow with Memory codec\", CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"Memory\"));\n\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["fdbabcdfbf0ec1640188c28570cd54fd30440942"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec at night\", TEST_NIGHTLY && CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n    assumeFalse(\"Too slow with Memory codec at night\", TEST_NIGHTLY && CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"Memory\"));\n\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, TextField.TYPE_UNSTORED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec at night\", TEST_NIGHTLY && CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n    assumeFalse(\"Too slow with Memory codec at night\", TEST_NIGHTLY && CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"Memory\"));\n\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, Field.Index.ANALYZED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fdbabcdfbf0ec1640188c28570cd54fd30440942","date":1317820582,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, TextField.TYPE_UNSTORED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    assumeFalse(\"Too slow with SimpleText codec at night\", TEST_NIGHTLY && CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"SimpleText\"));\n    assumeFalse(\"Too slow with Memory codec at night\", TEST_NIGHTLY && CodecProvider.getDefault().getFieldCodec(\"field\").equals(\"Memory\"));\n\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, TextField.TYPE_UNSTORED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","9ca3876d7ad90122420134007bec508c30af5a18"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, TextField.TYPE_UNSTORED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term), false);\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, TextField.TYPE_UNSTORED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term));\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLongPostings#testLongPostings().mjava","sourceNew":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, TextField.TYPE_UNSTORED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term), false);\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLongPostings() throws Exception {\n    // Don't use _TestUtil.getTempDir so that we own the\n    // randomness (ie same seed will point to same dir):\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"longpostings\" + \".\" + random.nextLong()));\n\n    final int NUM_DOCS = atLeast(2000);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS);\n    }\n\n    final String s1 = getRandomTerm(null);\n    final String s2 = getRandomTerm(s1);\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: s1=\" + s1 + \" s2=\" + s2);\n      /*\n      for(int idx=0;idx<s1.length();idx++) {\n        System.out.println(\"  s1 ch=0x\" + Integer.toHexString(s1.charAt(idx)));\n      }\n      for(int idx=0;idx<s2.length();idx++) {\n        System.out.println(\"  s2 ch=0x\" + Integer.toHexString(s2.charAt(idx)));\n      }\n      */\n    }\n\n    final FixedBitSet isS1 = new FixedBitSet(NUM_DOCS);\n    for(int idx=0;idx<NUM_DOCS;idx++) {\n      if (random.nextBoolean()) {\n        isS1.set(idx);\n      }\n    }\n\n    final IndexReader r;\n    if (true) { \n      final IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setMergePolicy(newLogMergePolicy());\n      iwc.setRAMBufferSizeMB(16.0 + 16.0 * random.nextDouble());\n      iwc.setMaxBufferedDocs(-1);\n      final RandomIndexWriter riw = new RandomIndexWriter(random, dir, iwc);\n\n      for(int idx=0;idx<NUM_DOCS;idx++) {\n        final Document doc = new Document();\n        String s = isS1.get(idx) ? s1 : s2;\n        final Field f = newField(\"field\", s, TextField.TYPE_UNSTORED);\n        final int count = _TestUtil.nextInt(random, 1, 4);\n        for(int ct=0;ct<count;ct++) {\n          doc.add(f);\n        }\n        riw.addDocument(doc);\n      }\n\n      r = riw.getReader();\n      riw.close();\n    } else {\n      r = IndexReader.open(dir);\n    }\n\n    /*\n    if (VERBOSE) {\n      System.out.println(\"TEST: terms\");\n      TermEnum termEnum = r.terms();\n      while(termEnum.next()) {\n        System.out.println(\"  term=\" + termEnum.term() + \" len=\" + termEnum.term().text().length());\n        assertTrue(termEnum.docFreq() > 0);\n        System.out.println(\"    s1?=\" + (termEnum.term().text().equals(s1)) + \" s1len=\" + s1.length());\n        System.out.println(\"    s2?=\" + (termEnum.term().text().equals(s2)) + \" s2len=\" + s2.length());\n        final String s = termEnum.term().text();\n        for(int idx=0;idx<s.length();idx++) {\n          System.out.println(\"      ch=0x\" + Integer.toHexString(s.charAt(idx)));\n        }\n      }\n    }\n    */\n\n    assertEquals(NUM_DOCS, r.numDocs());\n    assertTrue(r.docFreq(new Term(\"field\", s1)) > 0);\n    assertTrue(r.docFreq(new Term(\"field\", s2)) > 0);\n\n    int num = atLeast(1000);\n    for(int iter=0;iter<num;iter++) {\n\n      final String term;\n      final boolean doS1;\n      if (random.nextBoolean()) {\n        term = s1;\n        doS1 = true;\n      } else {\n        term = s2;\n        doS1 = false;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" doS1=\" + doS1);\n      }\n        \n      final DocsAndPositionsEnum postings = MultiFields.getTermPositionsEnum(r, null, \"field\", new BytesRef(term), false);\n\n      int docID = -1;\n      while(docID < DocsEnum.NO_MORE_DOCS) {\n        final int what = random.nextInt(3);\n        if (what == 0) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do next()\");\n          }\n          // nextDoc\n          int expected = docID+1;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          docID = postings.nextDoc();\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        } else {\n          // advance\n          final int targetDocID;\n          if (docID == -1) {\n            targetDocID = random.nextInt(NUM_DOCS+1);\n          } else {\n            targetDocID = docID + _TestUtil.nextInt(random, 1, NUM_DOCS - docID);\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST: docID=\" + docID + \"; do advance(\" + targetDocID + \")\");\n          }\n          int expected = targetDocID;\n          while(true) {\n            if (expected == NUM_DOCS) {\n              expected = Integer.MAX_VALUE;\n              break;\n            } else if (isS1.get(expected) == doS1) {\n              break;\n            } else {\n              expected++;\n            }\n          }\n          \n          docID = postings.advance(targetDocID);\n          if (VERBOSE) {\n            System.out.println(\"  got docID=\" + docID);\n          }\n          assertEquals(expected, docID);\n          if (docID == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          \n          if (random.nextInt(6) == 3) {\n            final int freq = postings.freq();\n            assertTrue(freq >=1 && freq <= 4);\n            for(int pos=0;pos<freq;pos++) {\n              assertEquals(pos, postings.nextPosition());\n              if (random.nextBoolean() && postings.hasPayload()) {\n                postings.getPayload();\n              }\n            }\n          }\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["79c2cb24929f2649a8875fb629086171f914d5ce","f83af14a2a8131b14d7aee6274c740334e0363d3"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["3741149a89925c02f14dbeef8365b896798d91fc"],"9ca3876d7ad90122420134007bec508c30af5a18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3741149a89925c02f14dbeef8365b896798d91fc"],"962d04139994fce5193143ef35615499a9a96d78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["962d04139994fce5193143ef35615499a9a96d78","3741149a89925c02f14dbeef8365b896798d91fc"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["9ca3876d7ad90122420134007bec508c30af5a18"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3741149a89925c02f14dbeef8365b896798d91fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","f83af14a2a8131b14d7aee6274c740334e0363d3"],"3741149a89925c02f14dbeef8365b896798d91fc":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"fdbabcdfbf0ec1640188c28570cd54fd30440942":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["fdbabcdfbf0ec1640188c28570cd54fd30440942"],"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc":["f83af14a2a8131b14d7aee6274c740334e0363d3"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["f83af14a2a8131b14d7aee6274c740334e0363d3","79c2cb24929f2649a8875fb629086171f914d5ce"],"9ca3876d7ad90122420134007bec508c30af5a18":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"962d04139994fce5193143ef35615499a9a96d78":["d493718201f0d0c54c773fb323d87bbd2fbffe41"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":[],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["962d04139994fce5193143ef35615499a9a96d78","3741149a89925c02f14dbeef8365b896798d91fc"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ca3876d7ad90122420134007bec508c30af5a18","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"3741149a89925c02f14dbeef8365b896798d91fc":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","a3776dccca01c11e7046323cfad46a3b4a471233"],"fdbabcdfbf0ec1640188c28570cd54fd30440942":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["fdbabcdfbf0ec1640188c28570cd54fd30440942"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d493718201f0d0c54c773fb323d87bbd2fbffe41","d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}