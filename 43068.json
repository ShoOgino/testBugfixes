{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    // examine the values to determine best type to use\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for (Number n : values) {\n      long v = n == null ? 0 : n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    IndexOutput data = dir.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 4) {\n        // fits in a byte[], would be more than 4bpv, just write byte[]\n        addBytesField(field, data, values);\n      } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 8) {\n        // fits in a short[], would be more than 8bpv, just write short[]\n        addShortsField(field, data, values);\n      } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 16) {\n        // fits in a int[], would be more than 16bpv, just write int[]\n        addIntsField(field, data, values);\n      } else {\n        addVarIntsField(field, data, values, minValue, maxValue);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data);\n      } else {\n        IOUtils.closeWhileHandlingException(data);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    // examine the values to determine best type to use\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for (Number n : values) {\n      long v = n == null ? 0 : n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    IndexOutput data = dir.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 4) {\n        // fits in a byte[], would be more than 4bpv, just write byte[]\n        addBytesField(field, data, values);\n      } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 8) {\n        // fits in a short[], would be more than 8bpv, just write short[]\n        addShortsField(field, data, values);\n      } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 16) {\n        // fits in a int[], would be more than 16bpv, just write int[]\n        addIntsField(field, data, values);\n      } else {\n        addVarIntsField(field, data, values, minValue, maxValue);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data);\n      } else {\n        IOUtils.closeWhileHandlingException(data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2daae254c28b627693692fbf8f14d2f36c3591c1","date":1409582110,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    if (field.getDocValuesGen() != -1) {\n      throw new UnsupportedOperationException(\"4.0 does not support dv updates\");\n    }\n    // examine the values to determine best type to use\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for (Number n : values) {\n      long v = n == null ? 0 : n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    IndexOutput data = dir.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 4) {\n        // fits in a byte[], would be more than 4bpv, just write byte[]\n        addBytesField(field, data, values);\n      } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 8) {\n        // fits in a short[], would be more than 8bpv, just write short[]\n        addShortsField(field, data, values);\n      } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 16) {\n        // fits in a int[], would be more than 16bpv, just write int[]\n        addIntsField(field, data, values);\n      } else {\n        addVarIntsField(field, data, values, minValue, maxValue);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data);\n      } else {\n        IOUtils.closeWhileHandlingException(data);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    // examine the values to determine best type to use\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for (Number n : values) {\n      long v = n == null ? 0 : n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    IndexOutput data = dir.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 4) {\n        // fits in a byte[], would be more than 4bpv, just write byte[]\n        addBytesField(field, data, values);\n      } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 8) {\n        // fits in a short[], would be more than 8bpv, just write short[]\n        addShortsField(field, data, values);\n      } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 16) {\n        // fits in a int[], would be more than 16bpv, just write int[]\n        addIntsField(field, data, values);\n      } else {\n        addVarIntsField(field, data, values, minValue, maxValue);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data);\n      } else {\n        IOUtils.closeWhileHandlingException(data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    if (field.getDocValuesGen() != -1) {\n      throw new UnsupportedOperationException(\"4.0 does not support dv updates\");\n    }\n    // examine the values to determine best type to use\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for (Number n : values) {\n      long v = n == null ? 0 : n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    IndexOutput data = dir.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 4) {\n        // fits in a byte[], would be more than 4bpv, just write byte[]\n        addBytesField(field, data, values);\n      } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 8) {\n        // fits in a short[], would be more than 8bpv, just write short[]\n        addShortsField(field, data, values);\n      } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 16) {\n        // fits in a int[], would be more than 16bpv, just write int[]\n        addIntsField(field, data, values);\n      } else {\n        addVarIntsField(field, data, values, minValue, maxValue);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data);\n      } else {\n        IOUtils.closeWhileHandlingException(data);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    // examine the values to determine best type to use\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for (Number n : values) {\n      long v = n == null ? 0 : n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    IndexOutput data = dir.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 4) {\n        // fits in a byte[], would be more than 4bpv, just write byte[]\n        addBytesField(field, data, values);\n      } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 8) {\n        // fits in a short[], would be more than 8bpv, just write short[]\n        addShortsField(field, data, values);\n      } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 16) {\n        // fits in a int[], would be more than 16bpv, just write int[]\n        addIntsField(field, data, values);\n      } else {\n        addVarIntsField(field, data, values, minValue, maxValue);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data);\n      } else {\n        IOUtils.closeWhileHandlingException(data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    if (field.getDocValuesGen() != -1) {\n      throw new UnsupportedOperationException(\"4.0 does not support dv updates\");\n    }\n    // examine the values to determine best type to use\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for (Number n : values) {\n      long v = n == null ? 0 : n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    IndexOutput data = dir.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 4) {\n        // fits in a byte[], would be more than 4bpv, just write byte[]\n        addBytesField(field, data, values);\n      } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 8) {\n        // fits in a short[], would be more than 8bpv, just write short[]\n        addShortsField(field, data, values);\n      } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE && PackedInts.bitsRequired(maxValue-minValue) > 16) {\n        // fits in a int[], would be more than 16bpv, just write int[]\n        addIntsField(field, data, values);\n      } else {\n        addVarIntsField(field, data, values, minValue, maxValue);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data);\n      } else {\n        IOUtils.closeWhileHandlingException(data);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2daae254c28b627693692fbf8f14d2f36c3591c1"],"2daae254c28b627693692fbf8f14d2f36c3591c1":["4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["2daae254c28b627693692fbf8f14d2f36c3591c1"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2daae254c28b627693692fbf8f14d2f36c3591c1":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}