{"path":"lucene/core/src/java/org/apache/lucene/util/OpenBitSetDISI#inPlaceAnd(DocIdSetIterator).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OpenBitSetDISI#inPlaceAnd(DocIdSetIterator).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/OpenBitSetDISI#inPlaceAnd(DocIdSetIterator).mjava","sourceNew":"  /**\n   * Perform an inplace AND with the doc ids from a given DocIdSetIterator,\n   * leaving only the bits set for which the doc ids are in common.\n   * These doc ids should be smaller than the maximum size passed to the\n   * constructor.\n   */   \n  public void inPlaceAnd(DocIdSetIterator disi) throws IOException {\n    int bitSetDoc = nextSetBit(0);\n    int disiDoc;\n    while (bitSetDoc != -1 && (disiDoc = disi.advance(bitSetDoc)) != DocIdSetIterator.NO_MORE_DOCS) {\n      clear(bitSetDoc, disiDoc);\n      bitSetDoc = nextSetBit(disiDoc + 1);\n    }\n    if (bitSetDoc != -1) {\n      clear(bitSetDoc, size());\n    }\n  }\n\n","sourceOld":"  /**\n   * Perform an inplace AND with the doc ids from a given DocIdSetIterator,\n   * leaving only the bits set for which the doc ids are in common.\n   * These doc ids should be smaller than the maximum size passed to the\n   * constructor.\n   */   \n  public void inPlaceAnd(DocIdSetIterator disi) throws IOException {\n    int bitSetDoc = nextSetBit(0);\n    int disiDoc;\n    while (bitSetDoc != -1 && (disiDoc = disi.advance(bitSetDoc)) != DocIdSetIterator.NO_MORE_DOCS) {\n      clear(bitSetDoc, disiDoc);\n      bitSetDoc = nextSetBit(disiDoc + 1);\n    }\n    if (bitSetDoc != -1) {\n      clear(bitSetDoc, size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4","date":1413466868,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/OpenBitSetDISI#inPlaceAnd(DocIdSetIterator).mjava","sourceNew":null,"sourceOld":"  /**\n   * Perform an inplace AND with the doc ids from a given DocIdSetIterator,\n   * leaving only the bits set for which the doc ids are in common.\n   * These doc ids should be smaller than the maximum size passed to the\n   * constructor.\n   */   \n  public void inPlaceAnd(DocIdSetIterator disi) throws IOException {\n    int bitSetDoc = nextSetBit(0);\n    int disiDoc;\n    while (bitSetDoc != -1 && (disiDoc = disi.advance(bitSetDoc)) != DocIdSetIterator.NO_MORE_DOCS) {\n      clear(bitSetDoc, disiDoc);\n      bitSetDoc = nextSetBit(disiDoc + 1);\n    }\n    if (bitSetDoc != -1) {\n      clear(bitSetDoc, size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/OpenBitSetDISI#inPlaceAnd(DocIdSetIterator).mjava","sourceNew":null,"sourceOld":"  /**\n   * Perform an inplace AND with the doc ids from a given DocIdSetIterator,\n   * leaving only the bits set for which the doc ids are in common.\n   * These doc ids should be smaller than the maximum size passed to the\n   * constructor.\n   */   \n  public void inPlaceAnd(DocIdSetIterator disi) throws IOException {\n    int bitSetDoc = nextSetBit(0);\n    int disiDoc;\n    while (bitSetDoc != -1 && (disiDoc = disi.advance(bitSetDoc)) != DocIdSetIterator.NO_MORE_DOCS) {\n      clear(bitSetDoc, disiDoc);\n      bitSetDoc = nextSetBit(disiDoc + 1);\n    }\n    if (bitSetDoc != -1) {\n      clear(bitSetDoc, size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"]},"commit2Childs":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}