{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testFeminineNouns().mjava","commits":[{"id":"b0f3337a69aad7b5cb531fa8e233ac5771a6aaf5","date":1259495978,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testFeminineNouns().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test showing how feminine noun forms conflate\n   */\n  public void testFeminineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer(Version.LUCENE_CURRENT);\n    \n    /* ending with hard consonant */\n    assertAnalyzesTo(cz, \"kost\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kosti\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostí\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostem\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostech\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostmi\", new String[] { \"kost\" });\n    \n    /* ending with a soft consonant */\n    // note: in this example sing nom. and sing acc. don't conflate w/ the rest\n    assertAnalyzesTo(cz, \"píseň\", new String[] { \"písň\" });\n    assertAnalyzesTo(cz, \"písně\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písni\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písněmi\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písních\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písním\", new String[] { \"písn\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"růže\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růží\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžím\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžích\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžemi\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růži\", new String[] { \"růh\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"žena\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženy\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"žen\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženě\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženám\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženu\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženo\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženách\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženou\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženami\", new String[] { \"žn\" });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testFeminineNouns().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testFeminineNouns().mjava","sourceNew":"  /**\n   * Test showing how feminine noun forms conflate\n   */\n  public void testFeminineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer(TEST_VERSION_CURRENT);\n    \n    /* ending with hard consonant */\n    assertAnalyzesTo(cz, \"kost\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kosti\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostí\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostem\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostech\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostmi\", new String[] { \"kost\" });\n    \n    /* ending with a soft consonant */\n    // note: in this example sing nom. and sing acc. don't conflate w/ the rest\n    assertAnalyzesTo(cz, \"píseň\", new String[] { \"písň\" });\n    assertAnalyzesTo(cz, \"písně\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písni\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písněmi\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písních\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písním\", new String[] { \"písn\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"růže\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růží\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžím\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžích\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžemi\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růži\", new String[] { \"růh\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"žena\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženy\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"žen\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženě\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženám\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženu\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženo\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženách\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženou\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženami\", new String[] { \"žn\" });\n  }\n\n","sourceOld":"  /**\n   * Test showing how feminine noun forms conflate\n   */\n  public void testFeminineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer(Version.LUCENE_CURRENT);\n    \n    /* ending with hard consonant */\n    assertAnalyzesTo(cz, \"kost\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kosti\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostí\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostem\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostech\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostmi\", new String[] { \"kost\" });\n    \n    /* ending with a soft consonant */\n    // note: in this example sing nom. and sing acc. don't conflate w/ the rest\n    assertAnalyzesTo(cz, \"píseň\", new String[] { \"písň\" });\n    assertAnalyzesTo(cz, \"písně\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písni\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písněmi\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písních\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písním\", new String[] { \"písn\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"růže\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růží\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžím\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžích\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžemi\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růži\", new String[] { \"růh\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"žena\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženy\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"žen\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženě\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženám\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženu\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženo\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženách\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženou\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženami\", new String[] { \"žn\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testFeminineNouns().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testFeminineNouns().mjava","sourceNew":"  /**\n   * Test showing how feminine noun forms conflate\n   */\n  public void testFeminineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer(TEST_VERSION_CURRENT);\n    \n    /* ending with hard consonant */\n    assertAnalyzesTo(cz, \"kost\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kosti\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostí\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostem\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostech\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostmi\", new String[] { \"kost\" });\n    \n    /* ending with a soft consonant */\n    // note: in this example sing nom. and sing acc. don't conflate w/ the rest\n    assertAnalyzesTo(cz, \"píseň\", new String[] { \"písň\" });\n    assertAnalyzesTo(cz, \"písně\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písni\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písněmi\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písních\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písním\", new String[] { \"písn\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"růže\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růží\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžím\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžích\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžemi\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růži\", new String[] { \"růh\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"žena\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženy\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"žen\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženě\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženám\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženu\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženo\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženách\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženou\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženami\", new String[] { \"žn\" });\n  }\n\n","sourceOld":"  /**\n   * Test showing how feminine noun forms conflate\n   */\n  public void testFeminineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer(TEST_VERSION_CURRENT);\n    \n    /* ending with hard consonant */\n    assertAnalyzesTo(cz, \"kost\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kosti\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostí\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostem\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostech\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostmi\", new String[] { \"kost\" });\n    \n    /* ending with a soft consonant */\n    // note: in this example sing nom. and sing acc. don't conflate w/ the rest\n    assertAnalyzesTo(cz, \"píseň\", new String[] { \"písň\" });\n    assertAnalyzesTo(cz, \"písně\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písni\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písněmi\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písních\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písním\", new String[] { \"písn\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"růže\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růží\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžím\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžích\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžemi\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růži\", new String[] { \"růh\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"žena\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženy\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"žen\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženě\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženám\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženu\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženo\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženách\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženou\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženami\", new String[] { \"žn\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b0f3337a69aad7b5cb531fa8e233ac5771a6aaf5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["b0f3337a69aad7b5cb531fa8e233ac5771a6aaf5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"b0f3337a69aad7b5cb531fa8e233ac5771a6aaf5":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b0f3337a69aad7b5cb531fa8e233ac5771a6aaf5"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}