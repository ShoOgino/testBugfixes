{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#caseOf(char[],int).mjava","commits":[{"id":"422da43e6414338103dfc37b7c8c68dcbe309d87","date":1405540909,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#caseOf(char[],int).mjava","pathOld":"/dev/null","sourceNew":"  /** returns EXACT_CASE,TITLE_CASE, or UPPER_CASE type for the word */\n  private int caseOf(char word[], int length) {\n    if (dictionary.ignoreCase || length == 0 || !Character.isUpperCase(word[0])) {\n      return EXACT_CASE;\n    }\n    \n    // determine if we are title or lowercase (or something funky, in which its exact)\n    boolean seenUpper = false;\n    boolean seenLower = false;\n    for (int i = 1; i < length; i++) {\n      boolean v = Character.isUpperCase(word[i]);\n      seenUpper |= v;\n      seenLower |= !v;\n    }\n    \n    if (!seenLower) {\n      return UPPER_CASE;\n    } else if (!seenUpper) {\n      return TITLE_CASE;\n    } else {\n      return EXACT_CASE;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#caseOf(char[],int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#caseOf(char[],int).mjava","sourceNew":"  /** returns EXACT_CASE,TITLE_CASE, or UPPER_CASE type for the word */\n  private int caseOf(char word[], int length) {\n    if (dictionary.ignoreCase || length == 0 || !Character.isUpperCase(word[0])) {\n      return EXACT_CASE;\n    }\n    \n    // determine if we are title or lowercase (or something funky, in which it's exact)\n    boolean seenUpper = false;\n    boolean seenLower = false;\n    for (int i = 1; i < length; i++) {\n      boolean v = Character.isUpperCase(word[i]);\n      seenUpper |= v;\n      seenLower |= !v;\n    }\n    \n    if (!seenLower) {\n      return UPPER_CASE;\n    } else if (!seenUpper) {\n      return TITLE_CASE;\n    } else {\n      return EXACT_CASE;\n    }\n  }\n\n","sourceOld":"  /** returns EXACT_CASE,TITLE_CASE, or UPPER_CASE type for the word */\n  private int caseOf(char word[], int length) {\n    if (dictionary.ignoreCase || length == 0 || !Character.isUpperCase(word[0])) {\n      return EXACT_CASE;\n    }\n    \n    // determine if we are title or lowercase (or something funky, in which its exact)\n    boolean seenUpper = false;\n    boolean seenLower = false;\n    for (int i = 1; i < length; i++) {\n      boolean v = Character.isUpperCase(word[i]);\n      seenUpper |= v;\n      seenLower |= !v;\n    }\n    \n    if (!seenLower) {\n      return UPPER_CASE;\n    } else if (!seenUpper) {\n      return TITLE_CASE;\n    } else {\n      return EXACT_CASE;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["422da43e6414338103dfc37b7c8c68dcbe309d87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"422da43e6414338103dfc37b7c8c68dcbe309d87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"]},"commit2Childs":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["422da43e6414338103dfc37b7c8c68dcbe309d87"],"422da43e6414338103dfc37b7c8c68dcbe309d87":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}