{"path":"lucene/src/java/org/apache/lucene/util/SmallFloat#floatToByte315(float).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/SmallFloat#floatToByte315(float).mjava","pathOld":"src/java/org/apache/lucene/util/SmallFloat#floatToByte315(float).mjava","sourceNew":"  /** floatToByte(b, mantissaBits=3, zeroExponent=15)\n   * <br>smallest non-zero value = 5.820766E-10\n   * <br>largest value = 7.5161928E9\n   * <br>epsilon = 0.125\n   */\n  public static byte floatToByte315(float f) {\n    int bits = Float.floatToRawIntBits(f);\n    int smallfloat = bits >> (24-3);\n    if (smallfloat < (63-15)<<3) {\n      return (bits<=0) ? (byte)0 : (byte)1;\n    }\n    if (smallfloat >= ((63-15)<<3) + 0x100) {\n      return -1;\n    }\n    return (byte)(smallfloat - ((63-15)<<3));\n }\n\n","sourceOld":"  /** floatToByte(b, mantissaBits=3, zeroExponent=15)\n   * <br>smallest non-zero value = 5.820766E-10\n   * <br>largest value = 7.5161928E9\n   * <br>epsilon = 0.125\n   */\n  public static byte floatToByte315(float f) {\n    int bits = Float.floatToRawIntBits(f);\n    int smallfloat = bits >> (24-3);\n    if (smallfloat < (63-15)<<3) {\n      return (bits<=0) ? (byte)0 : (byte)1;\n    }\n    if (smallfloat >= ((63-15)<<3) + 0x100) {\n      return -1;\n    }\n    return (byte)(smallfloat - ((63-15)<<3));\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c162cf3bb7fd2a150aaeeab80495a0a25bb9aee","date":1298483754,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/SmallFloat#floatToByte315(float).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/SmallFloat#floatToByte315(float).mjava","sourceNew":"  /** floatToByte(b, mantissaBits=3, zeroExponent=15)\n   * <br>smallest non-zero value = 5.820766E-10\n   * <br>largest value = 7.5161928E9\n   * <br>epsilon = 0.125\n   */\n  public static byte floatToByte315(float f) {\n    int bits = Float.floatToRawIntBits(f);\n    int smallfloat = bits >> (24-3);\n    if (smallfloat <= ((63-15)<<3)) {\n      return (bits<=0) ? (byte)0 : (byte)1;\n    }\n    if (smallfloat >= ((63-15)<<3) + 0x100) {\n      return -1;\n    }\n    return (byte)(smallfloat - ((63-15)<<3));\n }\n\n","sourceOld":"  /** floatToByte(b, mantissaBits=3, zeroExponent=15)\n   * <br>smallest non-zero value = 5.820766E-10\n   * <br>largest value = 7.5161928E9\n   * <br>epsilon = 0.125\n   */\n  public static byte floatToByte315(float f) {\n    int bits = Float.floatToRawIntBits(f);\n    int smallfloat = bits >> (24-3);\n    if (smallfloat < (63-15)<<3) {\n      return (bits<=0) ? (byte)0 : (byte)1;\n    }\n    if (smallfloat >= ((63-15)<<3) + 0x100) {\n      return -1;\n    }\n    return (byte)(smallfloat - ((63-15)<<3));\n }\n\n","bugFix":["2123bddbd65dea198cac380540636ce43a880403"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"692804e172a5810620fac3194db7b7616a21ad3d","date":1298513499,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/SmallFloat#floatToByte315(float).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/SmallFloat#floatToByte315(float).mjava","sourceNew":"  /** floatToByte(b, mantissaBits=3, zeroExponent=15)\n   * <br>smallest non-zero value = 5.820766E-10\n   * <br>largest value = 7.5161928E9\n   * <br>epsilon = 0.125\n   */\n  public static byte floatToByte315(float f) {\n    int bits = Float.floatToRawIntBits(f);\n    int smallfloat = bits >> (24-3);\n    if (smallfloat <= ((63-15)<<3)) {\n      return (bits<=0) ? (byte)0 : (byte)1;\n    }\n    if (smallfloat >= ((63-15)<<3) + 0x100) {\n      return -1;\n    }\n    return (byte)(smallfloat - ((63-15)<<3));\n }\n\n","sourceOld":"  /** floatToByte(b, mantissaBits=3, zeroExponent=15)\n   * <br>smallest non-zero value = 5.820766E-10\n   * <br>largest value = 7.5161928E9\n   * <br>epsilon = 0.125\n   */\n  public static byte floatToByte315(float f) {\n    int bits = Float.floatToRawIntBits(f);\n    int smallfloat = bits >> (24-3);\n    if (smallfloat < (63-15)<<3) {\n      return (bits<=0) ? (byte)0 : (byte)1;\n    }\n    if (smallfloat >= ((63-15)<<3) + 0x100) {\n      return -1;\n    }\n    return (byte)(smallfloat - ((63-15)<<3));\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/SmallFloat#floatToByte315(float).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/SmallFloat#floatToByte315(float).mjava","sourceNew":"  /** floatToByte(b, mantissaBits=3, zeroExponent=15)\n   * <br>smallest non-zero value = 5.820766E-10\n   * <br>largest value = 7.5161928E9\n   * <br>epsilon = 0.125\n   */\n  public static byte floatToByte315(float f) {\n    int bits = Float.floatToRawIntBits(f);\n    int smallfloat = bits >> (24-3);\n    if (smallfloat <= ((63-15)<<3)) {\n      return (bits<=0) ? (byte)0 : (byte)1;\n    }\n    if (smallfloat >= ((63-15)<<3) + 0x100) {\n      return -1;\n    }\n    return (byte)(smallfloat - ((63-15)<<3));\n }\n\n","sourceOld":"  /** floatToByte(b, mantissaBits=3, zeroExponent=15)\n   * <br>smallest non-zero value = 5.820766E-10\n   * <br>largest value = 7.5161928E9\n   * <br>epsilon = 0.125\n   */\n  public static byte floatToByte315(float f) {\n    int bits = Float.floatToRawIntBits(f);\n    int smallfloat = bits >> (24-3);\n    if (smallfloat < (63-15)<<3) {\n      return (bits<=0) ? (byte)0 : (byte)1;\n    }\n    if (smallfloat >= ((63-15)<<3) + 0x100) {\n      return -1;\n    }\n    return (byte)(smallfloat - ((63-15)<<3));\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SmallFloat#floatToByte315(float).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/SmallFloat#floatToByte315(float).mjava","sourceNew":"  /** floatToByte(b, mantissaBits=3, zeroExponent=15)\n   * <br>smallest non-zero value = 5.820766E-10\n   * <br>largest value = 7.5161928E9\n   * <br>epsilon = 0.125\n   */\n  public static byte floatToByte315(float f) {\n    int bits = Float.floatToRawIntBits(f);\n    int smallfloat = bits >> (24-3);\n    if (smallfloat <= ((63-15)<<3)) {\n      return (bits<=0) ? (byte)0 : (byte)1;\n    }\n    if (smallfloat >= ((63-15)<<3) + 0x100) {\n      return -1;\n    }\n    return (byte)(smallfloat - ((63-15)<<3));\n }\n\n","sourceOld":"  /** floatToByte(b, mantissaBits=3, zeroExponent=15)\n   * <br>smallest non-zero value = 5.820766E-10\n   * <br>largest value = 7.5161928E9\n   * <br>epsilon = 0.125\n   */\n  public static byte floatToByte315(float f) {\n    int bits = Float.floatToRawIntBits(f);\n    int smallfloat = bits >> (24-3);\n    if (smallfloat <= ((63-15)<<3)) {\n      return (bits<=0) ? (byte)0 : (byte)1;\n    }\n    if (smallfloat >= ((63-15)<<3) + 0x100) {\n      return -1;\n    }\n    return (byte)(smallfloat - ((63-15)<<3));\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"692804e172a5810620fac3194db7b7616a21ad3d":["9454a6510e2db155fb01faa5c049b06ece95fab9","4c162cf3bb7fd2a150aaeeab80495a0a25bb9aee"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["9454a6510e2db155fb01faa5c049b06ece95fab9","4c162cf3bb7fd2a150aaeeab80495a0a25bb9aee"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4c162cf3bb7fd2a150aaeeab80495a0a25bb9aee"],"4c162cf3bb7fd2a150aaeeab80495a0a25bb9aee":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"692804e172a5810620fac3194db7b7616a21ad3d":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4c162cf3bb7fd2a150aaeeab80495a0a25bb9aee":["692804e172a5810620fac3194db7b7616a21ad3d","d619839baa8ce5503e496b94a9e42ad6f079293f","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["692804e172a5810620fac3194db7b7616a21ad3d","d619839baa8ce5503e496b94a9e42ad6f079293f","4c162cf3bb7fd2a150aaeeab80495a0a25bb9aee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["692804e172a5810620fac3194db7b7616a21ad3d","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}