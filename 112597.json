{"path":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#terms(Term).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#terms(Term).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#terms(Term).mjava","sourceNew":"    @Override\n    public TermEnum terms(Term term) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.terms: \" + term);\n  \n      int i; // index into info.sortedTerms\n      int j; // index into sortedFields\n      \n      sortFields();\n      if (sortedFields.length == 1 && sortedFields[0].getKey() == term.field()) {\n        j = 0; // fast path\n      } else {\n        j = Arrays.binarySearch(sortedFields, term.field(), termComparator);\n      }\n      \n      if (j < 0) { // not found; choose successor\n        j = -j -1; \n        i = 0;\n        if (j < sortedFields.length) getInfo(j).sortTerms();\n      } else { // found\n        Info info = getInfo(j);\n        info.sortTerms();\n        i = Arrays.binarySearch(info.sortedTerms, term.text(), termComparator);\n        if (i < 0) { // not found; choose successor\n          i = -i -1;\n          if (i >= info.sortedTerms.length) { // move to next successor\n            j++;\n            i = 0;\n            if (j < sortedFields.length) getInfo(j).sortTerms();\n          }\n        }\n      }\n      final int ix = i;\n      final int jx = j;\n  \n      return new TermEnum() {\n  \n        private int srtTermsIdx = ix; // index into info.sortedTerms\n        private int srtFldsIdx = jx; // index into sortedFields\n          \n        @Override\n        public boolean next() {\n          if (DEBUG) System.err.println(\"TermEnum.next\");\n          if (srtFldsIdx >= sortedFields.length) return false;\n          Info info = getInfo(srtFldsIdx);\n          if (++srtTermsIdx < info.sortedTerms.length) return true;\n  \n          // move to successor\n          srtFldsIdx++;\n          srtTermsIdx = 0;\n          if (srtFldsIdx >= sortedFields.length) return false;\n          getInfo(srtFldsIdx).sortTerms();\n          return true;\n        }\n  \n        @Override\n        public Term term() {\n          if (DEBUG) System.err.println(\"TermEnum.term: \" + srtTermsIdx);\n          if (srtFldsIdx >= sortedFields.length) return null;\n          Info info = getInfo(srtFldsIdx);\n          if (srtTermsIdx >= info.sortedTerms.length) return null;\n//          if (DEBUG) System.err.println(\"TermEnum.term: \" + i + \", \" + info.sortedTerms[i].getKey());\n          return createTerm(info, srtFldsIdx, info.sortedTerms[srtTermsIdx].getKey());\n        }\n        \n        @Override\n        public int docFreq() {\n          if (DEBUG) System.err.println(\"TermEnum.docFreq\");\n          if (srtFldsIdx >= sortedFields.length) return 0;\n          Info info = getInfo(srtFldsIdx);\n          if (srtTermsIdx >= info.sortedTerms.length) return 0;\n          return numPositions(info.getPositions(srtTermsIdx));\n        }\n  \n        @Override\n        public void close() {\n          if (DEBUG) System.err.println(\"TermEnum.close\");\n        }\n        \n        /** Returns a new Term object, minimizing String.intern() overheads. */\n        private Term createTerm(Info info, int pos, String text) { \n          // Assertion: sortFields has already been called before\n          Term template = info.template;\n          if (template == null) { // not yet cached?\n            String fieldName = sortedFields[pos].getKey();\n            template = new Term(fieldName);\n            info.template = template;\n          }\n          \n          return template.createTerm(text);\n        }\n        \n      };\n    }\n\n","sourceOld":"    @Override\n    public TermEnum terms(Term term) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.terms: \" + term);\n  \n      int i; // index into info.sortedTerms\n      int j; // index into sortedFields\n      \n      sortFields();\n      if (sortedFields.length == 1 && sortedFields[0].getKey() == term.field()) {\n        j = 0; // fast path\n      } else {\n        j = Arrays.binarySearch(sortedFields, term.field(), termComparator);\n      }\n      \n      if (j < 0) { // not found; choose successor\n        j = -j -1; \n        i = 0;\n        if (j < sortedFields.length) getInfo(j).sortTerms();\n      } else { // found\n        Info info = getInfo(j);\n        info.sortTerms();\n        i = Arrays.binarySearch(info.sortedTerms, term.text(), termComparator);\n        if (i < 0) { // not found; choose successor\n          i = -i -1;\n          if (i >= info.sortedTerms.length) { // move to next successor\n            j++;\n            i = 0;\n            if (j < sortedFields.length) getInfo(j).sortTerms();\n          }\n        }\n      }\n      final int ix = i;\n      final int jx = j;\n  \n      return new TermEnum() {\n  \n        private int srtTermsIdx = ix; // index into info.sortedTerms\n        private int srtFldsIdx = jx; // index into sortedFields\n          \n        @Override\n        public boolean next() {\n          if (DEBUG) System.err.println(\"TermEnum.next\");\n          if (srtFldsIdx >= sortedFields.length) return false;\n          Info info = getInfo(srtFldsIdx);\n          if (++srtTermsIdx < info.sortedTerms.length) return true;\n  \n          // move to successor\n          srtFldsIdx++;\n          srtTermsIdx = 0;\n          if (srtFldsIdx >= sortedFields.length) return false;\n          getInfo(srtFldsIdx).sortTerms();\n          return true;\n        }\n  \n        @Override\n        public Term term() {\n          if (DEBUG) System.err.println(\"TermEnum.term: \" + srtTermsIdx);\n          if (srtFldsIdx >= sortedFields.length) return null;\n          Info info = getInfo(srtFldsIdx);\n          if (srtTermsIdx >= info.sortedTerms.length) return null;\n//          if (DEBUG) System.err.println(\"TermEnum.term: \" + i + \", \" + info.sortedTerms[i].getKey());\n          return createTerm(info, srtFldsIdx, info.sortedTerms[srtTermsIdx].getKey());\n        }\n        \n        @Override\n        public int docFreq() {\n          if (DEBUG) System.err.println(\"TermEnum.docFreq\");\n          if (srtFldsIdx >= sortedFields.length) return 0;\n          Info info = getInfo(srtFldsIdx);\n          if (srtTermsIdx >= info.sortedTerms.length) return 0;\n          return numPositions(info.getPositions(srtTermsIdx));\n        }\n  \n        @Override\n        public void close() {\n          if (DEBUG) System.err.println(\"TermEnum.close\");\n        }\n        \n        /** Returns a new Term object, minimizing String.intern() overheads. */\n        private Term createTerm(Info info, int pos, String text) { \n          // Assertion: sortFields has already been called before\n          Term template = info.template;\n          if (template == null) { // not yet cached?\n            String fieldName = sortedFields[pos].getKey();\n            template = new Term(fieldName);\n            info.template = template;\n          }\n          \n          return template.createTerm(text);\n        }\n        \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#terms(Term).mjava","sourceNew":null,"sourceOld":"    @Override\n    public TermEnum terms(Term term) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.terms: \" + term);\n  \n      int i; // index into info.sortedTerms\n      int j; // index into sortedFields\n      \n      sortFields();\n      if (sortedFields.length == 1 && sortedFields[0].getKey() == term.field()) {\n        j = 0; // fast path\n      } else {\n        j = Arrays.binarySearch(sortedFields, term.field(), termComparator);\n      }\n      \n      if (j < 0) { // not found; choose successor\n        j = -j -1; \n        i = 0;\n        if (j < sortedFields.length) getInfo(j).sortTerms();\n      } else { // found\n        Info info = getInfo(j);\n        info.sortTerms();\n        i = Arrays.binarySearch(info.sortedTerms, term.text(), termComparator);\n        if (i < 0) { // not found; choose successor\n          i = -i -1;\n          if (i >= info.sortedTerms.length) { // move to next successor\n            j++;\n            i = 0;\n            if (j < sortedFields.length) getInfo(j).sortTerms();\n          }\n        }\n      }\n      final int ix = i;\n      final int jx = j;\n  \n      return new TermEnum() {\n  \n        private int srtTermsIdx = ix; // index into info.sortedTerms\n        private int srtFldsIdx = jx; // index into sortedFields\n          \n        @Override\n        public boolean next() {\n          if (DEBUG) System.err.println(\"TermEnum.next\");\n          if (srtFldsIdx >= sortedFields.length) return false;\n          Info info = getInfo(srtFldsIdx);\n          if (++srtTermsIdx < info.sortedTerms.length) return true;\n  \n          // move to successor\n          srtFldsIdx++;\n          srtTermsIdx = 0;\n          if (srtFldsIdx >= sortedFields.length) return false;\n          getInfo(srtFldsIdx).sortTerms();\n          return true;\n        }\n  \n        @Override\n        public Term term() {\n          if (DEBUG) System.err.println(\"TermEnum.term: \" + srtTermsIdx);\n          if (srtFldsIdx >= sortedFields.length) return null;\n          Info info = getInfo(srtFldsIdx);\n          if (srtTermsIdx >= info.sortedTerms.length) return null;\n//          if (DEBUG) System.err.println(\"TermEnum.term: \" + i + \", \" + info.sortedTerms[i].getKey());\n          return createTerm(info, srtFldsIdx, info.sortedTerms[srtTermsIdx].getKey());\n        }\n        \n        @Override\n        public int docFreq() {\n          if (DEBUG) System.err.println(\"TermEnum.docFreq\");\n          if (srtFldsIdx >= sortedFields.length) return 0;\n          Info info = getInfo(srtFldsIdx);\n          if (srtTermsIdx >= info.sortedTerms.length) return 0;\n          return numPositions(info.getPositions(srtTermsIdx));\n        }\n  \n        @Override\n        public void close() {\n          if (DEBUG) System.err.println(\"TermEnum.close\");\n        }\n        \n        /** Returns a new Term object, minimizing String.intern() overheads. */\n        private Term createTerm(Info info, int pos, String text) { \n          // Assertion: sortFields has already been called before\n          Term template = info.template;\n          if (template == null) { // not yet cached?\n            String fieldName = sortedFields[pos].getKey();\n            template = new Term(fieldName);\n            info.template = template;\n          }\n          \n          return template.createTerm(text);\n        }\n        \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#terms(Term).mjava","sourceNew":null,"sourceOld":"    @Override\n    public TermEnum terms(Term term) {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.terms: \" + term);\n  \n      int i; // index into info.sortedTerms\n      int j; // index into sortedFields\n      \n      sortFields();\n      if (sortedFields.length == 1 && sortedFields[0].getKey() == term.field()) {\n        j = 0; // fast path\n      } else {\n        j = Arrays.binarySearch(sortedFields, term.field(), termComparator);\n      }\n      \n      if (j < 0) { // not found; choose successor\n        j = -j -1; \n        i = 0;\n        if (j < sortedFields.length) getInfo(j).sortTerms();\n      } else { // found\n        Info info = getInfo(j);\n        info.sortTerms();\n        i = Arrays.binarySearch(info.sortedTerms, term.text(), termComparator);\n        if (i < 0) { // not found; choose successor\n          i = -i -1;\n          if (i >= info.sortedTerms.length) { // move to next successor\n            j++;\n            i = 0;\n            if (j < sortedFields.length) getInfo(j).sortTerms();\n          }\n        }\n      }\n      final int ix = i;\n      final int jx = j;\n  \n      return new TermEnum() {\n  \n        private int srtTermsIdx = ix; // index into info.sortedTerms\n        private int srtFldsIdx = jx; // index into sortedFields\n          \n        @Override\n        public boolean next() {\n          if (DEBUG) System.err.println(\"TermEnum.next\");\n          if (srtFldsIdx >= sortedFields.length) return false;\n          Info info = getInfo(srtFldsIdx);\n          if (++srtTermsIdx < info.sortedTerms.length) return true;\n  \n          // move to successor\n          srtFldsIdx++;\n          srtTermsIdx = 0;\n          if (srtFldsIdx >= sortedFields.length) return false;\n          getInfo(srtFldsIdx).sortTerms();\n          return true;\n        }\n  \n        @Override\n        public Term term() {\n          if (DEBUG) System.err.println(\"TermEnum.term: \" + srtTermsIdx);\n          if (srtFldsIdx >= sortedFields.length) return null;\n          Info info = getInfo(srtFldsIdx);\n          if (srtTermsIdx >= info.sortedTerms.length) return null;\n//          if (DEBUG) System.err.println(\"TermEnum.term: \" + i + \", \" + info.sortedTerms[i].getKey());\n          return createTerm(info, srtFldsIdx, info.sortedTerms[srtTermsIdx].getKey());\n        }\n        \n        @Override\n        public int docFreq() {\n          if (DEBUG) System.err.println(\"TermEnum.docFreq\");\n          if (srtFldsIdx >= sortedFields.length) return 0;\n          Info info = getInfo(srtFldsIdx);\n          if (srtTermsIdx >= info.sortedTerms.length) return 0;\n          return numPositions(info.getPositions(srtTermsIdx));\n        }\n  \n        @Override\n        public void close() {\n          if (DEBUG) System.err.println(\"TermEnum.close\");\n        }\n        \n        /** Returns a new Term object, minimizing String.intern() overheads. */\n        private Term createTerm(Info info, int pos, String text) { \n          // Assertion: sortFields has already been called before\n          Term template = info.template;\n          if (template == null) { // not yet cached?\n            String fieldName = sortedFields[pos].getKey();\n            template = new Term(fieldName);\n            info.template = template;\n          }\n          \n          return template.createTerm(text);\n        }\n        \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","28427ef110c4c5bf5b4057731b83110bd1e13724"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5f4e87790277826a2aea119328600dfb07761f32":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}