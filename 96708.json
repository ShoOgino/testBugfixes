{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#insertColl(String,Collection[Clause]).mjava","commits":[{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":1,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#insertColl(String,Collection[Clause]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy#insertColl(String,Collection[Clause]).mjava","sourceNew":"  /**\n   * Insert the collection name into the clauses where collection is not specified\n   */\n  static List<Clause> insertColl(String coll, Collection<Clause> conditions) {\n    return conditions.stream()\n        .filter(Clause::isPerCollectiontag)\n        .map(clause -> {\n          Map<String, Object> copy = new LinkedHashMap<>(clause.original);\n          if (!copy.containsKey(\"collection\")) copy.put(\"collection\", coll);\n          return new Clause(copy);\n        })\n        .filter(it -> (it.collection.isPass(coll)))\n        .collect(Collectors.toList());\n\n  }\n\n","sourceOld":"  /**\n   * Insert the collection name into the clauses where collection is not specified\n   */\n  static List<Clause> insertColl(String coll, Collection<Clause> conditions) {\n    return conditions.stream()\n        .filter(Clause::isPerCollectiontag)\n        .map(clause -> {\n          Map<String, Object> copy = new LinkedHashMap<>(clause.original);\n          if (!copy.containsKey(\"collection\")) copy.put(\"collection\", coll);\n          return new Clause(copy);\n        })\n        .filter(it -> (it.collection.isPass(coll)))\n        .collect(Collectors.toList());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#insertColl(String,Collection[Clause]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy#insertColl(String,Collection[Clause]).mjava","sourceNew":"  /**\n   * Insert the collection name into the clauses where collection is not specified\n   */\n  static List<Clause> insertColl(String coll, Collection<Clause> conditions) {\n    return conditions.stream()\n        .filter(Clause::isPerCollectiontag)\n        .map(clause -> {\n          Map<String, Object> copy = new LinkedHashMap<>(clause.original);\n          if (!copy.containsKey(\"collection\")) copy.put(\"collection\", coll);\n          return new Clause(copy);\n        })\n        .filter(it -> (it.collection.isPass(coll)))\n        .collect(Collectors.toList());\n\n  }\n\n","sourceOld":"  /**\n   * Insert the collection name into the clauses where collection is not specified\n   */\n  static List<Clause> insertColl(String coll, Collection<Clause> conditions) {\n    return conditions.stream()\n        .filter(Clause::isPerCollectiontag)\n        .map(clause -> {\n          Map<String, Object> copy = new LinkedHashMap<>(clause.original);\n          if (!copy.containsKey(\"collection\")) copy.put(\"collection\", coll);\n          return new Clause(copy);\n        })\n        .filter(it -> (it.collection.isPass(coll)))\n        .collect(Collectors.toList());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#insertColl(String,Collection[Clause]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Insert the collection name into the clauses where collection is not specified\n   */\n  static List<Clause> insertColl(String coll, Collection<Clause> conditions) {\n    return conditions.stream()\n        .filter(Clause::isPerCollectiontag)\n        .map(clause -> {\n          Map<String, Object> copy = new LinkedHashMap<>(clause.original);\n          if (!copy.containsKey(\"collection\")) copy.put(\"collection\", coll);\n          return new Clause(copy);\n        })\n        .filter(it -> (it.collection.isPass(coll)))\n        .collect(Collectors.toList());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9837f40c922407d857991971de6def18eda0857b","date":1529994497,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#insertColl(String,Collection[Clause]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#insertColl(String,Collection[Clause]).mjava","sourceNew":"  /**\n   * Insert the collection name into the clauses where collection is not specified\n   */\n  static List<Clause> insertColl(String coll, Collection<Clause> conditions) {\n    return conditions.stream()\n        .filter(Clause::isPerCollectiontag)\n        .map(clause -> {\n          Map<String, Object> copy = new LinkedHashMap<>(clause.original);\n          if (!copy.containsKey(\"collection\")) copy.put(\"collection\", coll);\n          return Clause.create(copy);\n        })\n        .filter(it -> (it.getCollection().isPass(coll)))\n        .collect(Collectors.toList());\n\n  }\n\n","sourceOld":"  /**\n   * Insert the collection name into the clauses where collection is not specified\n   */\n  static List<Clause> insertColl(String coll, Collection<Clause> conditions) {\n    return conditions.stream()\n        .filter(Clause::isPerCollectiontag)\n        .map(clause -> {\n          Map<String, Object> copy = new LinkedHashMap<>(clause.original);\n          if (!copy.containsKey(\"collection\")) copy.put(\"collection\", coll);\n          return new Clause(copy);\n        })\n        .filter(it -> (it.collection.isPass(coll)))\n        .collect(Collectors.toList());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#insertColl(String,Collection[Clause]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#insertColl(String,Collection[Clause]).mjava","sourceNew":"  /**\n   * Insert the collection name into the clauses where collection is not specified\n   */\n  static List<Clause> insertColl(String coll, Collection<Clause> conditions) {\n    return conditions.stream()\n        .filter(Clause::isPerCollectiontag)\n        .map(clause -> {\n          Map<String, Object> copy = new LinkedHashMap<>(clause.original);\n          if (!copy.containsKey(\"collection\")) copy.put(\"collection\", coll);\n          return Clause.create(copy);\n        })\n        .filter(it -> (it.getCollection().isPass(coll)))\n        .collect(Collectors.toList());\n\n  }\n\n","sourceOld":"  /**\n   * Insert the collection name into the clauses where collection is not specified\n   */\n  static List<Clause> insertColl(String coll, Collection<Clause> conditions) {\n    return conditions.stream()\n        .filter(Clause::isPerCollectiontag)\n        .map(clause -> {\n          Map<String, Object> copy = new LinkedHashMap<>(clause.original);\n          if (!copy.containsKey(\"collection\")) copy.put(\"collection\", coll);\n          return new Clause(copy);\n        })\n        .filter(it -> (it.collection.isPass(coll)))\n        .collect(Collectors.toList());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#insertColl(String,Collection[Clause]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#insertColl(String,Collection[Clause]).mjava","sourceNew":"  /**\n   * Insert the collection name into the clauses where collection is not specified\n   */\n  static List<Clause> insertColl(String coll, Collection<Clause> conditions) {\n    return conditions.stream()\n        .filter(Clause::isPerCollectiontag)\n        .map(clause -> {\n          Map<String, Object> copy = new LinkedHashMap<>(clause.original);\n          if (!copy.containsKey(\"collection\")) copy.put(\"collection\", coll);\n          return Clause.create(copy);\n        })\n        .filter(it -> (it.getCollection().isPass(coll)))\n        .collect(Collectors.toList());\n\n  }\n\n","sourceOld":"  /**\n   * Insert the collection name into the clauses where collection is not specified\n   */\n  static List<Clause> insertColl(String coll, Collection<Clause> conditions) {\n    return conditions.stream()\n        .filter(Clause::isPerCollectiontag)\n        .map(clause -> {\n          Map<String, Object> copy = new LinkedHashMap<>(clause.original);\n          if (!copy.containsKey(\"collection\")) copy.put(\"collection\", coll);\n          return new Clause(copy);\n        })\n        .filter(it -> (it.collection.isPass(coll)))\n        .collect(Collectors.toList());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c73f63a2a7b9f4a6b21e8723912461026968d87e","date":1539669411,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#insertColl(String,Collection[Clause]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#insertColl(String,Collection[Clause]).mjava","sourceNew":"  /**\n   * Insert the collection name into the clauses where collection is not specified\n   */\n  static List<Clause> insertColl(String coll, Collection<Clause> conditions) {\n    return conditions.stream()\n        .filter(Clause::isPerCollectiontag)\n        .map(clause -> {\n          Map<String, Object> copy = new LinkedHashMap<>(clause.original);\n          if (!copy.containsKey(\"collection\")) {\n            copy.put(\"collection\", coll);\n            copy.put(Clause.class.getName(), clause);\n          }\n          return Clause.create(copy);\n        })\n        .filter(it -> (it.getCollection().isPass(coll)))\n        .collect(Collectors.toList());\n\n  }\n\n","sourceOld":"  /**\n   * Insert the collection name into the clauses where collection is not specified\n   */\n  static List<Clause> insertColl(String coll, Collection<Clause> conditions) {\n    return conditions.stream()\n        .filter(Clause::isPerCollectiontag)\n        .map(clause -> {\n          Map<String, Object> copy = new LinkedHashMap<>(clause.original);\n          if (!copy.containsKey(\"collection\")) copy.put(\"collection\", coll);\n          return Clause.create(copy);\n        })\n        .filter(it -> (it.getCollection().isPass(coll)))\n        .collect(Collectors.toList());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#insertColl(String,Collection[Clause]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Insert the collection name into the clauses where collection is not specified\n   */\n  static List<Clause> insertColl(String coll, Collection<Clause> conditions) {\n    return conditions.stream()\n        .filter(Clause::isPerCollectiontag)\n        .map(clause -> {\n          Map<String, Object> copy = new LinkedHashMap<>(clause.original);\n          if (!copy.containsKey(\"collection\")) {\n            copy.put(\"collection\", coll);\n            copy.put(Clause.class.getName(), clause);\n          }\n          return Clause.create(copy);\n        })\n        .filter(it -> (it.getCollection().isPass(coll)))\n        .collect(Collectors.toList());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["28288370235ed02234a64753cdbf0c6ec096304a","9837f40c922407d857991971de6def18eda0857b"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["c73f63a2a7b9f4a6b21e8723912461026968d87e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c73f63a2a7b9f4a6b21e8723912461026968d87e":["9837f40c922407d857991971de6def18eda0857b"],"9837f40c922407d857991971de6def18eda0857b":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"98f11c416d30e556e0004a9a84960702d12d35b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["28288370235ed02234a64753cdbf0c6ec096304a","9837f40c922407d857991971de6def18eda0857b"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"c73f63a2a7b9f4a6b21e8723912461026968d87e":["3f504512a03d978990cbff30db0522b354e846db"],"9837f40c922407d857991971de6def18eda0857b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c73f63a2a7b9f4a6b21e8723912461026968d87e","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"28288370235ed02234a64753cdbf0c6ec096304a":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9837f40c922407d857991971de6def18eda0857b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}