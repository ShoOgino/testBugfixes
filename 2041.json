{"path":"lucene/src/test/org/apache/lucene/queryParser/TestMultiPhraseQueryParsing#testMultiPhraseQueryParsing().mjava","commits":[{"id":"112629f1dfd1451722c6047bcf593e6efc96f5f4","date":1309910887,"type":0,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiPhraseQueryParsing#testMultiPhraseQueryParsing().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiPhraseQueryParsing() throws Exception {\n    TokenAndPos[] INCR_0_QUERY_TOKENS_AND = new TokenAndPos[]{\n        new TokenAndPos(\"a\", 0),\n        new TokenAndPos(\"1\", 0),\n        new TokenAndPos(\"b\", 1),\n        new TokenAndPos(\"1\", 1),\n        new TokenAndPos(\"c\", 2)\n    };\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new CannedAnalyzer(INCR_0_QUERY_TOKENS_AND));\n    Query q = qp.parse(\"\\\"this text is acually ignored\\\"\");\n    assertTrue(\"wrong query type!\", q instanceof MultiPhraseQuery);\n\n    MultiPhraseQuery multiPhraseQuery = new MultiPhraseQuery();\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n\n    assertEquals(multiPhraseQuery, q);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiPhraseQueryParsing#testMultiPhraseQueryParsing().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiPhraseQueryParsing() throws Exception {\n    TokenAndPos[] INCR_0_QUERY_TOKENS_AND = new TokenAndPos[]{\n        new TokenAndPos(\"a\", 0),\n        new TokenAndPos(\"1\", 0),\n        new TokenAndPos(\"b\", 1),\n        new TokenAndPos(\"1\", 1),\n        new TokenAndPos(\"c\", 2)\n    };\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new CannedAnalyzer(INCR_0_QUERY_TOKENS_AND));\n    Query q = qp.parse(\"\\\"this text is acually ignored\\\"\");\n    assertTrue(\"wrong query type!\", q instanceof MultiPhraseQuery);\n\n    MultiPhraseQuery multiPhraseQuery = new MultiPhraseQuery();\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n\n    assertEquals(multiPhraseQuery, q);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiPhraseQueryParsing#testMultiPhraseQueryParsing().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiPhraseQueryParsing() throws Exception {\n    TokenAndPos[] INCR_0_QUERY_TOKENS_AND = new TokenAndPos[]{\n        new TokenAndPos(\"a\", 0),\n        new TokenAndPos(\"1\", 0),\n        new TokenAndPos(\"b\", 1),\n        new TokenAndPos(\"1\", 1),\n        new TokenAndPos(\"c\", 2)\n    };\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new CannedAnalyzer(INCR_0_QUERY_TOKENS_AND));\n    Query q = qp.parse(\"\\\"this text is acually ignored\\\"\");\n    assertTrue(\"wrong query type!\", q instanceof MultiPhraseQuery);\n\n    MultiPhraseQuery multiPhraseQuery = new MultiPhraseQuery();\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n\n    assertEquals(multiPhraseQuery, q);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiPhraseQueryParsing#testMultiPhraseQueryParsing().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiPhraseQueryParsing#testMultiPhraseQueryParsing().mjava","sourceNew":"  public void testMultiPhraseQueryParsing() throws Exception {\n    TokenAndPos[] INCR_0_QUERY_TOKENS_AND = new TokenAndPos[]{\n        new TokenAndPos(\"a\", 0),\n        new TokenAndPos(\"1\", 0),\n        new TokenAndPos(\"b\", 1),\n        new TokenAndPos(\"1\", 1),\n        new TokenAndPos(\"c\", 2)\n    };\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new CannedAnalyzer(INCR_0_QUERY_TOKENS_AND));\n    Query q = qp.parse(\"\\\"this text is acually ignored\\\"\");\n    assertTrue(\"wrong query type!\", q instanceof MultiPhraseQuery);\n\n    MultiPhraseQuery multiPhraseQuery = new MultiPhraseQuery();\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n\n    assertEquals(multiPhraseQuery, q);\n  }\n\n","sourceOld":"  public void testMultiPhraseQueryParsing() throws Exception {\n    TokenAndPos[] INCR_0_QUERY_TOKENS_AND = new TokenAndPos[]{\n        new TokenAndPos(\"a\", 0),\n        new TokenAndPos(\"1\", 0),\n        new TokenAndPos(\"b\", 1),\n        new TokenAndPos(\"1\", 1),\n        new TokenAndPos(\"c\", 2)\n    };\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new CannedAnalyzer(INCR_0_QUERY_TOKENS_AND));\n    Query q = qp.parse(\"\\\"this text is acually ignored\\\"\");\n    assertTrue(\"wrong query type!\", q instanceof MultiPhraseQuery);\n\n    MultiPhraseQuery multiPhraseQuery = new MultiPhraseQuery();\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"a\"), new Term(\"field\", \"1\") }, -1);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"b\"), new Term(\"field\", \"1\") }, 0);\n    multiPhraseQuery.add(new Term[]{ new Term(\"field\", \"c\") }, 1);\n\n    assertEquals(multiPhraseQuery, q);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["112629f1dfd1451722c6047bcf593e6efc96f5f4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112629f1dfd1451722c6047bcf593e6efc96f5f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"]},"commit2Childs":{"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["112629f1dfd1451722c6047bcf593e6efc96f5f4","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"112629f1dfd1451722c6047bcf593e6efc96f5f4":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}