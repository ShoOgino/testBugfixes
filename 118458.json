{"path":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#collectSpanQueryFields(SpanQuery,Set[String]).mjava","commits":[{"id":"9ba1c5612e47760f10f8355ed2c1b6ee587f2936","date":1256834464,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#collectSpanQueryFields(SpanQuery,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  private void collectSpanQueryFields(SpanQuery spanQuery, Set<String> fieldNames) {\n    if (spanQuery instanceof FieldMaskingSpanQuery) {\n      collectSpanQueryFields(((FieldMaskingSpanQuery)spanQuery).getMaskedQuery(), fieldNames);\n    } else if (spanQuery instanceof SpanFirstQuery) {\n      collectSpanQueryFields(((SpanFirstQuery)spanQuery).getMatch(), fieldNames);\n    } else if (spanQuery instanceof SpanNearQuery) {\n      for (final SpanQuery clause : ((SpanNearQuery)spanQuery).getClauses()) {\n        collectSpanQueryFields(clause, fieldNames);\n      }\n    } else if (spanQuery instanceof SpanNotQuery) {\n      collectSpanQueryFields(((SpanNotQuery)spanQuery).getInclude(), fieldNames);\n    } else if (spanQuery instanceof SpanOrQuery) {\n      for (final SpanQuery clause : ((SpanOrQuery)spanQuery).getClauses()) {\n        collectSpanQueryFields(clause, fieldNames);\n      }\n    } else {\n      fieldNames.add(spanQuery.getField());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#collectSpanQueryFields(SpanQuery,Set[String]).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#collectSpanQueryFields(SpanQuery,Set[String]).mjava","sourceNew":"  private void collectSpanQueryFields(SpanQuery spanQuery, Set<String> fieldNames) {\n    if (spanQuery instanceof FieldMaskingSpanQuery) {\n      collectSpanQueryFields(((FieldMaskingSpanQuery)spanQuery).getMaskedQuery(), fieldNames);\n    } else if (spanQuery instanceof SpanFirstQuery) {\n      collectSpanQueryFields(((SpanFirstQuery)spanQuery).getMatch(), fieldNames);\n    } else if (spanQuery instanceof SpanNearQuery) {\n      for (final SpanQuery clause : ((SpanNearQuery)spanQuery).getClauses()) {\n        collectSpanQueryFields(clause, fieldNames);\n      }\n    } else if (spanQuery instanceof SpanNotQuery) {\n      collectSpanQueryFields(((SpanNotQuery)spanQuery).getInclude(), fieldNames);\n    } else if (spanQuery instanceof SpanOrQuery) {\n      for (final SpanQuery clause : ((SpanOrQuery)spanQuery).getClauses()) {\n        collectSpanQueryFields(clause, fieldNames);\n      }\n    } else {\n      fieldNames.add(spanQuery.getField());\n    }\n  }\n\n","sourceOld":"  private void collectSpanQueryFields(SpanQuery spanQuery, Set<String> fieldNames) {\n    if (spanQuery instanceof FieldMaskingSpanQuery) {\n      collectSpanQueryFields(((FieldMaskingSpanQuery)spanQuery).getMaskedQuery(), fieldNames);\n    } else if (spanQuery instanceof SpanFirstQuery) {\n      collectSpanQueryFields(((SpanFirstQuery)spanQuery).getMatch(), fieldNames);\n    } else if (spanQuery instanceof SpanNearQuery) {\n      for (final SpanQuery clause : ((SpanNearQuery)spanQuery).getClauses()) {\n        collectSpanQueryFields(clause, fieldNames);\n      }\n    } else if (spanQuery instanceof SpanNotQuery) {\n      collectSpanQueryFields(((SpanNotQuery)spanQuery).getInclude(), fieldNames);\n    } else if (spanQuery instanceof SpanOrQuery) {\n      for (final SpanQuery clause : ((SpanOrQuery)spanQuery).getClauses()) {\n        collectSpanQueryFields(clause, fieldNames);\n      }\n    } else {\n      fieldNames.add(spanQuery.getField());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ba1c5612e47760f10f8355ed2c1b6ee587f2936":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["9ba1c5612e47760f10f8355ed2c1b6ee587f2936"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ba1c5612e47760f10f8355ed2c1b6ee587f2936"],"9ba1c5612e47760f10f8355ed2c1b6ee587f2936":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}